
APPS_ENDDEVICE_DEMO_6_1(2).elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001e46c  00000000  00000000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0001e46c  0001e46c  0002e46c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000a18  20000000  0001e474  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .lpram        00000000  30000000  30000000  00030a18  2**0
                  CONTENTS
  4 .bss          00001de8  20000a18  0001ee90  00030a18  2**3
                  ALLOC
  5 .stack        00002000  20002800  00020c78  00030a18  2**0
                  ALLOC
  6 .ARM.attributes 00000028  00000000  00000000  00030a18  2**0
                  CONTENTS, READONLY
  7 .comment      0000008c  00000000  00000000  00030a40  2**0
                  CONTENTS, READONLY
  8 .debug_info   0008dc71  00000000  00000000  00030acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000d28d  00000000  00000000  000be73d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019eab  00000000  00000000  000cb9ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001680  00000000  00000000  000e5875  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001e60  00000000  00000000  000e6ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000310f6  00000000  00000000  000e8d55  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000330d6  00000000  00000000  00119e4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b21d8  00000000  00000000  0014cf21  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00004fb8  00000000  00000000  001ff0fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	00 48 00 20 39 39 00 00 35 39 00 00 35 39 00 00     .H. 99..59..59..
	...
      2c:	35 39 00 00 00 00 00 00 00 00 00 00 35 39 00 00     59..........59..
      3c:	35 39 00 00 35 39 00 00 35 39 00 00 99 13 00 00     59..59..59......
      4c:	7d 0b 00 00 35 39 00 00 35 39 00 00 35 39 00 00     }...59..59..59..
      5c:	35 39 00 00 51 21 00 00 61 21 00 00 71 21 00 00     59..Q!..a!..q!..
      6c:	81 21 00 00 91 21 00 00 a1 21 00 00 35 39 00 00     .!...!...!..59..
      7c:	35 39 00 00 35 39 00 00 f1 34 00 00 01 35 00 00     59..59...4...5..
      8c:	11 35 00 00 21 35 00 00 31 35 00 00 69 08 00 00     .5..!5..15..i...
      9c:	35 39 00 00 35 39 00 00 35 39 00 00 35 39 00 00     59..59..59..59..
      ac:	35 39 00 00 00 00 00 00                             59......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000a18 	.word	0x20000a18
      d4:	00000000 	.word	0x00000000
      d8:	0001e474 	.word	0x0001e474

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000a1c 	.word	0x20000a1c
     108:	0001e474 	.word	0x0001e474
     10c:	0001e474 	.word	0x0001e474
     110:	00000000 	.word	0x00000000

00000114 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     114:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     116:	2000      	movs	r0, #0
     118:	4b08      	ldr	r3, [pc, #32]	; (13c <delay_init+0x28>)
     11a:	4798      	blx	r3
     11c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     11e:	4c08      	ldr	r4, [pc, #32]	; (140 <delay_init+0x2c>)
     120:	21fa      	movs	r1, #250	; 0xfa
     122:	0089      	lsls	r1, r1, #2
     124:	47a0      	blx	r4
     126:	4b07      	ldr	r3, [pc, #28]	; (144 <delay_init+0x30>)
     128:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     12a:	4907      	ldr	r1, [pc, #28]	; (148 <delay_init+0x34>)
     12c:	0028      	movs	r0, r5
     12e:	47a0      	blx	r4
     130:	4b06      	ldr	r3, [pc, #24]	; (14c <delay_init+0x38>)
     132:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     134:	2205      	movs	r2, #5
     136:	4b06      	ldr	r3, [pc, #24]	; (150 <delay_init+0x3c>)
     138:	601a      	str	r2, [r3, #0]
}
     13a:	bd70      	pop	{r4, r5, r6, pc}
     13c:	00003221 	.word	0x00003221
     140:	00012d11 	.word	0x00012d11
     144:	20000000 	.word	0x20000000
     148:	000f4240 	.word	0x000f4240
     14c:	20000004 	.word	0x20000004
     150:	e000e010 	.word	0xe000e010

00000154 <delay_cycles_us>:
 *
 * \param n  Number of microseconds to wait
 */
void delay_cycles_us(
		uint32_t n)
{
     154:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 10u */
		delay_cycles(cycles_per_us);
     156:	4b08      	ldr	r3, [pc, #32]	; (178 <delay_cycles_us+0x24>)
     158:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     15a:	4a08      	ldr	r2, [pc, #32]	; (17c <delay_cycles_us+0x28>)
		SysTick->VAL = 0;
     15c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     15e:	2180      	movs	r1, #128	; 0x80
     160:	0249      	lsls	r1, r1, #9
	while (n--) {
     162:	3801      	subs	r0, #1
     164:	d307      	bcc.n	176 <delay_cycles_us+0x22>
	if (n > 0) {
     166:	2c00      	cmp	r4, #0
     168:	d0fb      	beq.n	162 <delay_cycles_us+0xe>
		SysTick->LOAD = n;
     16a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     16c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     16e:	6813      	ldr	r3, [r2, #0]
     170:	420b      	tst	r3, r1
     172:	d0fc      	beq.n	16e <delay_cycles_us+0x1a>
     174:	e7f5      	b.n	162 <delay_cycles_us+0xe>
	}
}
     176:	bd30      	pop	{r4, r5, pc}
     178:	20000004 	.word	0x20000004
     17c:	e000e010 	.word	0xe000e010

00000180 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     180:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     182:	4b08      	ldr	r3, [pc, #32]	; (1a4 <delay_cycles_ms+0x24>)
     184:	681c      	ldr	r4, [r3, #0]
		SysTick->LOAD = n;
     186:	4a08      	ldr	r2, [pc, #32]	; (1a8 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     188:	2500      	movs	r5, #0
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     18a:	2180      	movs	r1, #128	; 0x80
     18c:	0249      	lsls	r1, r1, #9
	while (n--) {
     18e:	3801      	subs	r0, #1
     190:	d307      	bcc.n	1a2 <delay_cycles_ms+0x22>
	if (n > 0) {
     192:	2c00      	cmp	r4, #0
     194:	d0fb      	beq.n	18e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     196:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     198:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     19a:	6813      	ldr	r3, [r2, #0]
     19c:	420b      	tst	r3, r1
     19e:	d0fc      	beq.n	19a <delay_cycles_ms+0x1a>
     1a0:	e7f5      	b.n	18e <delay_cycles_ms+0xe>
	}
}
     1a2:	bd30      	pop	{r4, r5, pc}
     1a4:	20000000 	.word	0x20000000
     1a8:	e000e010 	.word	0xe000e010

000001ac <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     1ac:	4b0c      	ldr	r3, [pc, #48]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1ae:	681b      	ldr	r3, [r3, #0]
     1b0:	2b00      	cmp	r3, #0
     1b2:	d106      	bne.n	1c2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     1b4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     1b8:	2b00      	cmp	r3, #0
     1ba:	d007      	beq.n	1cc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     1bc:	2200      	movs	r2, #0
     1be:	4b09      	ldr	r3, [pc, #36]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1c0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     1c2:	4a07      	ldr	r2, [pc, #28]	; (1e0 <cpu_irq_enter_critical+0x34>)
     1c4:	6813      	ldr	r3, [r2, #0]
     1c6:	3301      	adds	r3, #1
     1c8:	6013      	str	r3, [r2, #0]
}
     1ca:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     1cc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     1ce:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     1d2:	2200      	movs	r2, #0
     1d4:	4b04      	ldr	r3, [pc, #16]	; (1e8 <cpu_irq_enter_critical+0x3c>)
     1d6:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     1d8:	3201      	adds	r2, #1
     1da:	4b02      	ldr	r3, [pc, #8]	; (1e4 <cpu_irq_enter_critical+0x38>)
     1dc:	701a      	strb	r2, [r3, #0]
     1de:	e7f0      	b.n	1c2 <cpu_irq_enter_critical+0x16>
     1e0:	20000a34 	.word	0x20000a34
     1e4:	20000a38 	.word	0x20000a38
     1e8:	20000008 	.word	0x20000008

000001ec <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     1ec:	4b08      	ldr	r3, [pc, #32]	; (210 <cpu_irq_leave_critical+0x24>)
     1ee:	681a      	ldr	r2, [r3, #0]
     1f0:	3a01      	subs	r2, #1
     1f2:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     1f4:	681b      	ldr	r3, [r3, #0]
     1f6:	2b00      	cmp	r3, #0
     1f8:	d109      	bne.n	20e <cpu_irq_leave_critical+0x22>
     1fa:	4b06      	ldr	r3, [pc, #24]	; (214 <cpu_irq_leave_critical+0x28>)
     1fc:	781b      	ldrb	r3, [r3, #0]
     1fe:	2b00      	cmp	r3, #0
     200:	d005      	beq.n	20e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     202:	2201      	movs	r2, #1
     204:	4b04      	ldr	r3, [pc, #16]	; (218 <cpu_irq_leave_critical+0x2c>)
     206:	701a      	strb	r2, [r3, #0]
     208:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     20c:	b662      	cpsie	i
	}
}
     20e:	4770      	bx	lr
     210:	20000a34 	.word	0x20000a34
     214:	20000a38 	.word	0x20000a38
     218:	20000008 	.word	0x20000008

0000021c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     21c:	b5f0      	push	{r4, r5, r6, r7, lr}
     21e:	46c6      	mov	lr, r8
     220:	b500      	push	{lr}
     222:	b082      	sub	sp, #8
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     224:	ac01      	add	r4, sp, #4
     226:	2501      	movs	r5, #1
     228:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     22a:	2300      	movs	r3, #0
     22c:	4698      	mov	r8, r3
     22e:	70a3      	strb	r3, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     230:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     232:	0021      	movs	r1, r4
     234:	2013      	movs	r0, #19
     236:	4e12      	ldr	r6, [pc, #72]	; (280 <system_board_init+0x64>)
     238:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     23a:	4f12      	ldr	r7, [pc, #72]	; (284 <system_board_init+0x68>)
     23c:	2380      	movs	r3, #128	; 0x80
     23e:	031b      	lsls	r3, r3, #12
     240:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);
	
	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     242:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_1_PIN, &pin_conf);
     244:	0021      	movs	r1, r4
     246:	2012      	movs	r0, #18
     248:	47b0      	blx	r6
     24a:	2380      	movs	r3, #128	; 0x80
     24c:	02db      	lsls	r3, r3, #11
     24e:	61bb      	str	r3, [r7, #24]
	port_pin_set_output_level(LED_1_PIN, LED_1_INACTIVE);
#ifdef RFSWITCH_ENABLE
	/* Configure RFSWITCH as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     250:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(RF_SWITCH_PIN, &pin_conf);
     252:	0021      	movs	r1, r4
     254:	200d      	movs	r0, #13
     256:	47b0      	blx	r6
	} else {
		port_base->OUTCLR.reg = pin_mask;
     258:	2380      	movs	r3, #128	; 0x80
     25a:	019b      	lsls	r3, r3, #6
     25c:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
#endif

#ifdef TCXO_ENABLE
	/* Configure TXPO PWR as output */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     25e:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(TCXO_PWR_PIN, &pin_conf);
     260:	0021      	movs	r1, r4
     262:	2009      	movs	r0, #9
     264:	47b0      	blx	r6
     266:	2380      	movs	r3, #128	; 0x80
     268:	009b      	lsls	r3, r3, #2
     26a:	617b      	str	r3, [r7, #20]
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     26c:	4643      	mov	r3, r8
     26e:	7023      	strb	r3, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     270:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     272:	0021      	movs	r1, r4
     274:	201c      	movs	r0, #28
     276:	47b0      	blx	r6
		
}
     278:	b002      	add	sp, #8
     27a:	bc04      	pop	{r2}
     27c:	4690      	mov	r8, r2
     27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     280:	0000108d 	.word	0x0000108d
     284:	40002800 	.word	0x40002800

00000288 <at30tse_init>:

/**
 * \brief Configures the SERCOM I2C master to be used with the AT30TSE75X device.
 */
void at30tse_init(void)
{
     288:	b530      	push	{r4, r5, lr}
     28a:	b08f      	sub	sp, #60	; 0x3c
static inline void i2c_master_get_config_defaults(
		struct i2c_master_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
     28c:	aa01      	add	r2, sp, #4
     28e:	2364      	movs	r3, #100	; 0x64
     290:	9301      	str	r3, [sp, #4]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
     292:	4b21      	ldr	r3, [pc, #132]	; (318 <at30tse_init+0x90>)
     294:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
     296:	2300      	movs	r3, #0
     298:	6093      	str	r3, [r2, #8]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     29a:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
     29c:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
     29e:	2180      	movs	r1, #128	; 0x80
     2a0:	0389      	lsls	r1, r1, #14
     2a2:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
	config->unknown_bus_state_timeout = 65535;
     2a4:	2101      	movs	r1, #1
     2a6:	4249      	negs	r1, r1
     2a8:	8291      	strh	r1, [r2, #20]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->scl_low_timeout  = false;
     2aa:	3125      	adds	r1, #37	; 0x25
     2ac:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
     2ae:	6293      	str	r3, [r2, #40]	; 0x28
#ifdef FEATURE_I2C_SCL_STRETCH_MODE
	config->scl_stretch_only_after_ack_bit = false;
     2b0:	3108      	adds	r1, #8
     2b2:	5453      	strb	r3, [r2, r1]
#endif
#ifdef FEATURE_I2C_SCL_EXTEND_TIMEOUT
	config->slave_scl_low_extend_timeout   = false;
     2b4:	3101      	adds	r1, #1
     2b6:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
     2b8:	3101      	adds	r1, #1
     2ba:	5453      	strb	r3, [r2, r1]
#endif
	/* The typical value is 215ns */
	config->sda_scl_rise_time_ns = 215;
     2bc:	33d7      	adds	r3, #215	; 0xd7
     2be:	8613      	strh	r3, [r2, #48]	; 0x30
    /* Initialize config structure and device instance. */
	struct i2c_master_config conf;
	i2c_master_get_config_defaults(&conf);

	/* Change buffer timeout to something longer. */
	conf.buffer_timeout = 10000;
     2c0:	4b16      	ldr	r3, [pc, #88]	; (31c <at30tse_init+0x94>)
     2c2:	82d3      	strh	r3, [r2, #22]

	conf.pinmux_pad0 = AT30TSE_PINMUX_PAD0;
     2c4:	4b16      	ldr	r3, [pc, #88]	; (320 <at30tse_init+0x98>)
     2c6:	61d3      	str	r3, [r2, #28]
	conf.pinmux_pad1 = AT30TSE_PINMUX_PAD1;
     2c8:	4b16      	ldr	r3, [pc, #88]	; (324 <at30tse_init+0x9c>)
     2ca:	6213      	str	r3, [r2, #32]

	/* Initialize and enable device with config. */
	i2c_master_init(&dev_inst_at30tse75x, AT30TSE_SERCOM, &conf);
     2cc:	4c16      	ldr	r4, [pc, #88]	; (328 <at30tse_init+0xa0>)
     2ce:	4917      	ldr	r1, [pc, #92]	; (32c <at30tse_init+0xa4>)
     2d0:	0020      	movs	r0, r4
     2d2:	4b17      	ldr	r3, [pc, #92]	; (330 <at30tse_init+0xa8>)
     2d4:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
     2d6:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
     2d8:	2207      	movs	r2, #7
     2da:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
     2dc:	421a      	tst	r2, r3
     2de:	d1fc      	bne.n	2da <at30tse_init+0x52>

	/* Wait for module to sync */
	_i2c_master_wait_for_sync(module);

	/* Enable module */
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     2e0:	6823      	ldr	r3, [r4, #0]
     2e2:	2202      	movs	r2, #2
     2e4:	4313      	orrs	r3, r2
     2e6:	6023      	str	r3, [r4, #0]

#if I2C_MASTER_CALLBACK_MODE == true
	/* Enable module interrupts */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     2e8:	4d0f      	ldr	r5, [pc, #60]	; (328 <at30tse_init+0xa0>)
     2ea:	6828      	ldr	r0, [r5, #0]
     2ec:	4b11      	ldr	r3, [pc, #68]	; (334 <at30tse_init+0xac>)
     2ee:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     2f0:	231f      	movs	r3, #31
     2f2:	4018      	ands	r0, r3
     2f4:	3b1e      	subs	r3, #30
     2f6:	4083      	lsls	r3, r0
     2f8:	4a0f      	ldr	r2, [pc, #60]	; (338 <at30tse_init+0xb0>)
     2fa:	6013      	str	r3, [r2, #0]
#endif
	/* Start timeout if bus state is unknown */
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
		timeout_counter++;
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     2fc:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
     2fe:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
     300:	2110      	movs	r1, #16
     302:	8b62      	ldrh	r2, [r4, #26]
     304:	420a      	tst	r2, r1
     306:	d104      	bne.n	312 <at30tse_init+0x8a>
		timeout_counter++;
     308:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
     30a:	4283      	cmp	r3, r0
     30c:	d3f9      	bcc.n	302 <at30tse_init+0x7a>
			/* Timeout, force bus state to idle */
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
     30e:	2310      	movs	r3, #16
     310:	8363      	strh	r3, [r4, #26]
	i2c_master_enable(&dev_inst_at30tse75x);
}
     312:	b00f      	add	sp, #60	; 0x3c
     314:	bd30      	pop	{r4, r5, pc}
     316:	46c0      	nop			; (mov r8, r8)
     318:	00000d48 	.word	0x00000d48
     31c:	00002710 	.word	0x00002710
     320:	00100002 	.word	0x00100002
     324:	00110002 	.word	0x00110002
     328:	20001058 	.word	0x20001058
     32c:	42000400 	.word	0x42000400
     330:	00001469 	.word	0x00001469
     334:	00002121 	.word	0x00002121
     338:	e000e100 	.word	0xe000e100

0000033c <at30tse_read_register>:
 * \param[in] reg_size Register size.
 *
 * \return Register value.
 */
uint16_t at30tse_read_register(uint8_t reg, uint8_t reg_type, uint8_t reg_size)
{
     33c:	b570      	push	{r4, r5, r6, lr}
     33e:	b088      	sub	sp, #32
	uint8_t buffer[2];
	buffer[0] = reg | reg_type;
     340:	ad07      	add	r5, sp, #28
     342:	4308      	orrs	r0, r1
     344:	7028      	strb	r0, [r5, #0]
	buffer[1] = 0;
     346:	2300      	movs	r3, #0
     348:	706b      	strb	r3, [r5, #1]

	/* Internal register pointer in AT30TSE */
    struct i2c_master_packet write_transfer = {
     34a:	a904      	add	r1, sp, #16
     34c:	204f      	movs	r0, #79	; 0x4f
     34e:	8008      	strh	r0, [r1, #0]
     350:	2401      	movs	r4, #1
     352:	804c      	strh	r4, [r1, #2]
     354:	604d      	str	r5, [r1, #4]
     356:	720b      	strb	r3, [r1, #8]
     358:	724b      	strb	r3, [r1, #9]
     35a:	728b      	strb	r3, [r1, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Read data */
    struct i2c_master_packet read_transfer = {
     35c:	ac01      	add	r4, sp, #4
     35e:	8020      	strh	r0, [r4, #0]
     360:	8062      	strh	r2, [r4, #2]
     362:	9502      	str	r5, [sp, #8]
     364:	7223      	strb	r3, [r4, #8]
     366:	7263      	strb	r3, [r4, #9]
     368:	72a3      	strb	r3, [r4, #10]
		.ten_bit_address = false,
		.high_speed      = false,
		.hs_master_code  = 0x0,
	};
	/* Do the transfer */
	i2c_master_write_packet_wait_no_stop(&dev_inst_at30tse75x, &write_transfer);
     36a:	4e07      	ldr	r6, [pc, #28]	; (388 <at30tse_read_register+0x4c>)
     36c:	0030      	movs	r0, r6
     36e:	4b07      	ldr	r3, [pc, #28]	; (38c <at30tse_read_register+0x50>)
     370:	4798      	blx	r3
    i2c_master_read_packet_wait(&dev_inst_at30tse75x, &read_transfer);
     372:	0021      	movs	r1, r4
     374:	0030      	movs	r0, r6
     376:	4b06      	ldr	r3, [pc, #24]	; (390 <at30tse_read_register+0x54>)
     378:	4798      	blx	r3

	return (buffer[0] << 8) | buffer[1];
     37a:	782b      	ldrb	r3, [r5, #0]
     37c:	021b      	lsls	r3, r3, #8
     37e:	7868      	ldrb	r0, [r5, #1]
     380:	4318      	orrs	r0, r3
}
     382:	b008      	add	sp, #32
     384:	bd70      	pop	{r4, r5, r6, pc}
     386:	46c0      	nop			; (mov r8, r8)
     388:	20001058 	.word	0x20001058
     38c:	00001aa9 	.word	0x00001aa9
     390:	00001a85 	.word	0x00001a85

00000394 <at30tse_read_temperature>:
 * \brief Reads the temperature value.
 *
 * \return Temperature data.
 */
double at30tse_read_temperature()
{
     394:	b5d0      	push	{r4, r6, r7, lr}
	/* Read the 16-bit temperature register. */
	uint16_t data = at30tse_read_register(AT30TSE_TEMPERATURE_REG,
     396:	2202      	movs	r2, #2
     398:	2100      	movs	r1, #0
     39a:	2000      	movs	r0, #0
     39c:	4b1f      	ldr	r3, [pc, #124]	; (41c <at30tse_read_temperature+0x88>)
     39e:	4798      	blx	r3
     3a0:	0003      	movs	r3, r0
											AT30TSE_NON_VOLATILE_REG,
											AT30TSE_TEMPERATURE_REG_SIZE);

	double temperature = 0;
	int8_t sign = 1;
     3a2:	2701      	movs	r7, #1

	/*Check if negative and clear sign bit. */
	if (data & (1 << 15)){
     3a4:	0402      	lsls	r2, r0, #16
     3a6:	d40c      	bmi.n	3c2 <at30tse_read_temperature+0x2e>
		sign *= -1;
		data &= ~(1 << 15);
	}

	/* Convert to temperature  */
	switch (resolution){
     3a8:	4a1d      	ldr	r2, [pc, #116]	; (420 <at30tse_read_temperature+0x8c>)
     3aa:	7816      	ldrb	r6, [r2, #0]
     3ac:	2e01      	cmp	r6, #1
     3ae:	d016      	beq.n	3de <at30tse_read_temperature+0x4a>
     3b0:	2e00      	cmp	r6, #0
     3b2:	d00a      	beq.n	3ca <at30tse_read_temperature+0x36>
     3b4:	2e02      	cmp	r6, #2
     3b6:	d01c      	beq.n	3f2 <at30tse_read_temperature+0x5e>
     3b8:	2e03      	cmp	r6, #3
     3ba:	d025      	beq.n	408 <at30tse_read_temperature+0x74>
	double temperature = 0;
     3bc:	2000      	movs	r0, #0
     3be:	2100      	movs	r1, #0
			temperature = data * sign * 0.0625;
			break;
		default:
			break;
	}
	return temperature;
     3c0:	e00c      	b.n	3dc <at30tse_read_temperature+0x48>
		data &= ~(1 << 15);
     3c2:	0440      	lsls	r0, r0, #17
     3c4:	0c43      	lsrs	r3, r0, #17
		sign *= -1;
     3c6:	3f02      	subs	r7, #2
     3c8:	e7ee      	b.n	3a8 <at30tse_read_temperature+0x14>
			data = (data >> 7);
     3ca:	09db      	lsrs	r3, r3, #7
			temperature = data * sign * 0.5;
     3cc:	b298      	uxth	r0, r3
     3ce:	4378      	muls	r0, r7
     3d0:	4b14      	ldr	r3, [pc, #80]	; (424 <at30tse_read_temperature+0x90>)
     3d2:	4798      	blx	r3
     3d4:	2200      	movs	r2, #0
     3d6:	4b14      	ldr	r3, [pc, #80]	; (428 <at30tse_read_temperature+0x94>)
     3d8:	4c14      	ldr	r4, [pc, #80]	; (42c <at30tse_read_temperature+0x98>)
     3da:	47a0      	blx	r4
}
     3dc:	bdd0      	pop	{r4, r6, r7, pc}
			data = (data >> 6);
     3de:	099b      	lsrs	r3, r3, #6
			temperature = data * sign * 0.25;
     3e0:	b298      	uxth	r0, r3
     3e2:	4378      	muls	r0, r7
     3e4:	4b0f      	ldr	r3, [pc, #60]	; (424 <at30tse_read_temperature+0x90>)
     3e6:	4798      	blx	r3
     3e8:	2200      	movs	r2, #0
     3ea:	4b11      	ldr	r3, [pc, #68]	; (430 <at30tse_read_temperature+0x9c>)
     3ec:	4c0f      	ldr	r4, [pc, #60]	; (42c <at30tse_read_temperature+0x98>)
     3ee:	47a0      	blx	r4
			break;
     3f0:	e7f4      	b.n	3dc <at30tse_read_temperature+0x48>
			data = (data >> 5);
     3f2:	095b      	lsrs	r3, r3, #5
			temperature = data * sign * 0.125;
     3f4:	b298      	uxth	r0, r3
     3f6:	4378      	muls	r0, r7
     3f8:	4b0a      	ldr	r3, [pc, #40]	; (424 <at30tse_read_temperature+0x90>)
     3fa:	4798      	blx	r3
     3fc:	2200      	movs	r2, #0
     3fe:	23ff      	movs	r3, #255	; 0xff
     400:	059b      	lsls	r3, r3, #22
     402:	4c0a      	ldr	r4, [pc, #40]	; (42c <at30tse_read_temperature+0x98>)
     404:	47a0      	blx	r4
			break;
     406:	e7e9      	b.n	3dc <at30tse_read_temperature+0x48>
			data = (data >> 4);
     408:	091b      	lsrs	r3, r3, #4
			temperature = data * sign * 0.0625;
     40a:	b298      	uxth	r0, r3
     40c:	4378      	muls	r0, r7
     40e:	4b05      	ldr	r3, [pc, #20]	; (424 <at30tse_read_temperature+0x90>)
     410:	4798      	blx	r3
     412:	2200      	movs	r2, #0
     414:	4b07      	ldr	r3, [pc, #28]	; (434 <at30tse_read_temperature+0xa0>)
     416:	4c05      	ldr	r4, [pc, #20]	; (42c <at30tse_read_temperature+0x98>)
     418:	47a0      	blx	r4
			break;
     41a:	e7df      	b.n	3dc <at30tse_read_temperature+0x48>
     41c:	0000033d 	.word	0x0000033d
     420:	20000a39 	.word	0x20000a39
     424:	000158f9 	.word	0x000158f9
     428:	3fe00000 	.word	0x3fe00000
     42c:	00014d65 	.word	0x00014d65
     430:	3fd00000 	.word	0x3fd00000
     434:	3fb00000 	.word	0x3fb00000

00000438 <_adc_get_inst_index>:
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
}
     438:	2000      	movs	r0, #0
     43a:	4770      	bx	lr

0000043c <adc_get_config_defaults>:
 *
 * \param[out] config  Pointer to configuration struct to initialize to
 *                     default values
 */
void adc_get_config_defaults(struct adc_config *const config)
{
     43c:	b510      	push	{r4, lr}
	Assert(config);
	config->clock_source                  = GCLK_GENERATOR_0;
     43e:	2300      	movs	r3, #0
     440:	2200      	movs	r2, #0
     442:	7003      	strb	r3, [r0, #0]
	config->reference                     = ADC_REFERENCE_INTREF;
     444:	7043      	strb	r3, [r0, #1]
	config->clock_prescaler               = ADC_CLOCK_PRESCALER_DIV2;
     446:	7083      	strb	r3, [r0, #2]
	config->resolution                    = ADC_RESOLUTION_12BIT;
     448:	70c3      	strb	r3, [r0, #3]
	config->window.window_mode            = ADC_WINDOW_MODE_DISABLE;
     44a:	2100      	movs	r1, #0
     44c:	8303      	strh	r3, [r0, #24]
	config->window.window_upper_value     = 0;
     44e:	6203      	str	r3, [r0, #32]
	config->window.window_lower_value     = 0;
     450:	61c3      	str	r3, [r0, #28]
#if SAMR30 || SAMR34 || SAMR35
	config->positive_input                = ADC_POSITIVE_INPUT_PIN6;
     452:	2406      	movs	r4, #6
     454:	7104      	strb	r4, [r0, #4]
#else
	config->positive_input                = ADC_POSITIVE_INPUT_PIN1;
#endif
	config->negative_input                = ADC_NEGATIVE_INPUT_GND;
     456:	24c0      	movs	r4, #192	; 0xc0
     458:	0164      	lsls	r4, r4, #5
     45a:	80c4      	strh	r4, [r0, #6]
	config->accumulate_samples            = ADC_ACCUMULATE_DISABLE;
     45c:	7201      	strb	r1, [r0, #8]
	config->divide_result                 = ADC_DIVIDE_RESULT_DISABLE;
     45e:	7242      	strb	r2, [r0, #9]
	config->left_adjust                   = false;
     460:	7282      	strb	r2, [r0, #10]
	config->differential_mode             = false;
     462:	72c2      	strb	r2, [r0, #11]
	config->freerunning                   = false;
     464:	7302      	strb	r2, [r0, #12]
	config->event_action                  = ADC_EVENT_ACTION_DISABLED;
     466:	242a      	movs	r4, #42	; 0x2a
     468:	5502      	strb	r2, [r0, r4]
	config->run_in_standby                = false;
     46a:	7342      	strb	r2, [r0, #13]
	config->on_demand                     = false;
     46c:	7382      	strb	r2, [r0, #14]
	config->sampling_time_compensation_enable  = false;
     46e:	73c2      	strb	r2, [r0, #15]
	config->positive_input_sequence_mask_enable = 0;
     470:	6103      	str	r3, [r0, #16]
	config->reference_compensation_enable = false;
     472:	7502      	strb	r2, [r0, #20]
	config->correction.correction_enable  = false;
     474:	3c06      	subs	r4, #6
     476:	5502      	strb	r2, [r0, r4]
	config->correction.gain_correction    = ADC_GAINCORR_RESETVALUE;
     478:	84c3      	strh	r3, [r0, #38]	; 0x26
	config->correction.offset_correction  = ADC_OFFSETCORR_RESETVALUE;
     47a:	8503      	strh	r3, [r0, #40]	; 0x28
	config->sample_length                 = 0;
     47c:	7541      	strb	r1, [r0, #21]
}
     47e:	bd10      	pop	{r4, pc}

00000480 <adc_init>:
 */
enum status_code adc_init(
		struct adc_module *const module_inst,
		Adc *hw,
		struct adc_config *config)
{
     480:	b5f0      	push	{r4, r5, r6, r7, lr}
     482:	46ce      	mov	lr, r9
     484:	b500      	push	{lr}
     486:	b098      	sub	sp, #96	; 0x60
     488:	0005      	movs	r5, r0
     48a:	000c      	movs	r4, r1
     48c:	0016      	movs	r6, r2
	Assert(module_inst);
	Assert(hw);
	Assert(config);

	/* Temporary variable to hold ADC instance number */
	uint8_t instance = _adc_get_inst_index(hw);
     48e:	0008      	movs	r0, r1
     490:	4bb2      	ldr	r3, [pc, #712]	; (75c <adc_init+0x2dc>)
     492:	4798      	blx	r3

	/* Associate the software module instance with the hardware module */
	module_inst->hw = hw;
     494:	602c      	str	r4, [r5, #0]

		case SYSTEM_CLOCK_APB_APBC:
			MCLK->APBCMASK.reg |= mask;
			break;
		case SYSTEM_CLOCK_APB_APBD:
			MCLK->APBDMASK.reg |= mask;
     496:	4ab2      	ldr	r2, [pc, #712]	; (760 <adc_init+0x2e0>)
     498:	6a13      	ldr	r3, [r2, #32]
     49a:	2108      	movs	r1, #8
     49c:	430b      	orrs	r3, r1
     49e:	6213      	str	r3, [r2, #32]
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, MCLK_APBDMASK_ADC);
#else
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, _adc_apbcmasks[instance]);
#endif

	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     4a0:	7822      	ldrb	r2, [r4, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
     4a2:	2305      	movs	r3, #5
	if (hw->CTRLA.reg & ADC_CTRLA_SWRST) {
     4a4:	07d2      	lsls	r2, r2, #31
     4a6:	d504      	bpl.n	4b2 <adc_init+0x32>
	}
#endif

	/* Write configuration to module */
	return _adc_set_config(instance, module_inst, config);
}
     4a8:	0018      	movs	r0, r3
     4aa:	b018      	add	sp, #96	; 0x60
     4ac:	bc04      	pop	{r2}
     4ae:	4691      	mov	r9, r2
     4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct adc_module *const module_inst)
{
	/* Sanity check arguments */
	Assert(module_inst);

	Adc *const adc_module = module_inst->hw;
     4b2:	682a      	ldr	r2, [r5, #0]

	if (adc_module->SYNCBUSY.reg) {
     4b4:	8c13      	ldrh	r3, [r2, #32]
     4b6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     4b8:	2b00      	cmp	r3, #0
     4ba:	d1fb      	bne.n	4b4 <adc_init+0x34>
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     4bc:	7822      	ldrb	r2, [r4, #0]
		return STATUS_ERR_DENIED;
     4be:	331c      	adds	r3, #28
	if (hw->CTRLA.reg & ADC_CTRLA_ENABLE) {
     4c0:	0792      	lsls	r2, r2, #30
     4c2:	d4f1      	bmi.n	4a8 <adc_init+0x28>
	module_inst->reference = config->reference;
     4c4:	7873      	ldrb	r3, [r6, #1]
     4c6:	712b      	strb	r3, [r5, #4]
	if (module_inst->reference == ADC_REFERENCE_INTREF) {
     4c8:	2b00      	cmp	r3, #0
     4ca:	d104      	bne.n	4d6 <adc_init+0x56>
	switch (vref) {
		case SYSTEM_VOLTAGE_REFERENCE_TEMPSENSE:
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
			break;
		case SYSTEM_VOLTAGE_REFERENCE_OUTPUT:
			SUPC->VREF.reg |= SUPC_VREF_VREFOE;
     4cc:	4aa5      	ldr	r2, [pc, #660]	; (764 <adc_init+0x2e4>)
     4ce:	69d3      	ldr	r3, [r2, #28]
     4d0:	2104      	movs	r1, #4
     4d2:	430b      	orrs	r3, r1
     4d4:	61d3      	str	r3, [r2, #28]
		module_inst->callback[i] = NULL;
     4d6:	2300      	movs	r3, #0
     4d8:	60ab      	str	r3, [r5, #8]
     4da:	60eb      	str	r3, [r5, #12]
     4dc:	612b      	str	r3, [r5, #16]
	module_inst->registered_callback_mask = 0;
     4de:	76ab      	strb	r3, [r5, #26]
	module_inst->enabled_callback_mask = 0;
     4e0:	76eb      	strb	r3, [r5, #27]
	module_inst->remaining_conversions = 0;
     4e2:	832b      	strh	r3, [r5, #24]
	module_inst->job_status = STATUS_OK;
     4e4:	772b      	strb	r3, [r5, #28]
	_adc_instances[instance] = module_inst;
     4e6:	0080      	lsls	r0, r0, #2
     4e8:	4b9f      	ldr	r3, [pc, #636]	; (768 <adc_init+0x2e8>)
     4ea:	50c5      	str	r5, [r0, r3]
	if (config->event_action == ADC_EVENT_ACTION_DISABLED &&
     4ec:	232a      	movs	r3, #42	; 0x2a
     4ee:	5cf3      	ldrb	r3, [r6, r3]
     4f0:	2b00      	cmp	r3, #0
     4f2:	d105      	bne.n	500 <adc_init+0x80>
     4f4:	7b33      	ldrb	r3, [r6, #12]
     4f6:	2b00      	cmp	r3, #0
     4f8:	d102      	bne.n	500 <adc_init+0x80>
		module_inst->software_trigger = true;
     4fa:	3301      	adds	r3, #1
     4fc:	776b      	strb	r3, [r5, #29]
     4fe:	e001      	b.n	504 <adc_init+0x84>
		module_inst->software_trigger = false;
     500:	2300      	movs	r3, #0
     502:	776b      	strb	r3, [r5, #29]
	Adc *const adc_module = module_inst->hw;
     504:	682f      	ldr	r7, [r5, #0]
	gclk_chan_conf.source_generator = config->clock_source;
     506:	7833      	ldrb	r3, [r6, #0]
     508:	466a      	mov	r2, sp
     50a:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(_adc_gclk_ids[index], &gclk_chan_conf);
     50c:	4669      	mov	r1, sp
     50e:	201e      	movs	r0, #30
     510:	4b96      	ldr	r3, [pc, #600]	; (76c <adc_init+0x2ec>)
     512:	4798      	blx	r3
	system_gclk_chan_enable(_adc_gclk_ids[index]);
     514:	201e      	movs	r0, #30
     516:	4b96      	ldr	r3, [pc, #600]	; (770 <adc_init+0x2f0>)
     518:	4798      	blx	r3
	_adc_configure_ain_pin(index, config->positive_input);
     51a:	7934      	ldrb	r4, [r6, #4]
	const uint32_t pinmapping[] = {
     51c:	2258      	movs	r2, #88	; 0x58
     51e:	4995      	ldr	r1, [pc, #596]	; (774 <adc_init+0x2f4>)
     520:	a802      	add	r0, sp, #8
     522:	4b95      	ldr	r3, [pc, #596]	; (778 <adc_init+0x2f8>)
     524:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     526:	2c13      	cmp	r4, #19
     528:	d90b      	bls.n	542 <adc_init+0xc2>
	_adc_configure_ain_pin(index, config->negative_input);
     52a:	88f4      	ldrh	r4, [r6, #6]
	const uint32_t pinmapping[] = {
     52c:	2258      	movs	r2, #88	; 0x58
     52e:	4991      	ldr	r1, [pc, #580]	; (774 <adc_init+0x2f4>)
     530:	a802      	add	r0, sp, #8
     532:	4b91      	ldr	r3, [pc, #580]	; (778 <adc_init+0x2f8>)
     534:	4798      	blx	r3
	if (pin <= _adc_extchannel_msb[index]) {
     536:	2c13      	cmp	r4, #19
     538:	d911      	bls.n	55e <adc_init+0xde>
     53a:	2400      	movs	r4, #0
	const uint32_t pinmapping[] = {
     53c:	4b8e      	ldr	r3, [pc, #568]	; (778 <adc_init+0x2f8>)
     53e:	4699      	mov	r9, r3
     540:	e01e      	b.n	580 <adc_init+0x100>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     542:	00a4      	lsls	r4, r4, #2
     544:	ab02      	add	r3, sp, #8
     546:	58e0      	ldr	r0, [r4, r3]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     548:	a901      	add	r1, sp, #4
     54a:	2300      	movs	r3, #0
     54c:	704b      	strb	r3, [r1, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     54e:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     550:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     552:	3301      	adds	r3, #1
     554:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     556:	b2c0      	uxtb	r0, r0
     558:	4b88      	ldr	r3, [pc, #544]	; (77c <adc_init+0x2fc>)
     55a:	4798      	blx	r3
     55c:	e7e5      	b.n	52a <adc_init+0xaa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     55e:	00a4      	lsls	r4, r4, #2
     560:	ab02      	add	r3, sp, #8
     562:	58e0      	ldr	r0, [r4, r3]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     564:	a901      	add	r1, sp, #4
     566:	2300      	movs	r3, #0
     568:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     56a:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     56c:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     56e:	3301      	adds	r3, #1
     570:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     572:	b2c0      	uxtb	r0, r0
     574:	4b81      	ldr	r3, [pc, #516]	; (77c <adc_init+0x2fc>)
     576:	4798      	blx	r3
     578:	e7df      	b.n	53a <adc_init+0xba>
     57a:	3401      	adds	r4, #1
	for(uint8_t i=0;i <= _adc_extchannel_msb[index];i++){
     57c:	2c14      	cmp	r4, #20
     57e:	d018      	beq.n	5b2 <adc_init+0x132>
		if(config->positive_input_sequence_mask_enable & (1 << i)){
     580:	2301      	movs	r3, #1
     582:	40a3      	lsls	r3, r4
     584:	6932      	ldr	r2, [r6, #16]
     586:	421a      	tst	r2, r3
     588:	d0f7      	beq.n	57a <adc_init+0xfa>
	const uint32_t pinmapping[] = {
     58a:	2258      	movs	r2, #88	; 0x58
     58c:	4979      	ldr	r1, [pc, #484]	; (774 <adc_init+0x2f4>)
     58e:	a802      	add	r0, sp, #8
     590:	47c8      	blx	r9
	if (pin <= _adc_extchannel_msb[index]) {
     592:	2c13      	cmp	r4, #19
     594:	d8f1      	bhi.n	57a <adc_init+0xfa>
		pin_map_result = pinmapping[pin >> ADC_INPUTCTRL_MUXPOS_Pos];
     596:	00a3      	lsls	r3, r4, #2
     598:	aa02      	add	r2, sp, #8
     59a:	5898      	ldr	r0, [r3, r2]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     59c:	a901      	add	r1, sp, #4
     59e:	2300      	movs	r3, #0
     5a0:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     5a2:	70cb      	strb	r3, [r1, #3]
		config.input_pull   = SYSTEM_PINMUX_PIN_PULL_NONE;
     5a4:	708b      	strb	r3, [r1, #2]
		config.mux_position = 1;
     5a6:	3301      	adds	r3, #1
     5a8:	700b      	strb	r3, [r1, #0]
		system_pinmux_pin_set_config(pin_map_result, &config);
     5aa:	b2c0      	uxtb	r0, r0
     5ac:	4b73      	ldr	r3, [pc, #460]	; (77c <adc_init+0x2fc>)
     5ae:	4798      	blx	r3
     5b0:	e7e3      	b.n	57a <adc_init+0xfa>
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     5b2:	7b73      	ldrb	r3, [r6, #13]
     5b4:	019b      	lsls	r3, r3, #6
						    | (config->on_demand << ADC_CTRLA_ONDEMAND_Pos)) ;
     5b6:	7bb2      	ldrb	r2, [r6, #14]
     5b8:	01d2      	lsls	r2, r2, #7
     5ba:	4313      	orrs	r3, r2
     5bc:	b2db      	uxtb	r3, r3
	adc_module->CTRLA.reg = ((config->run_in_standby << ADC_CTRLA_RUNSTDBY_Pos)
     5be:	703b      	strb	r3, [r7, #0]
			(config->reference_compensation_enable << ADC_REFCTRL_REFCOMP_Pos)
     5c0:	7d33      	ldrb	r3, [r6, #20]
     5c2:	01db      	lsls	r3, r3, #7
			| (config->reference);
     5c4:	7872      	ldrb	r2, [r6, #1]
     5c6:	4313      	orrs	r3, r2
     5c8:	b2db      	uxtb	r3, r3
	adc_module->REFCTRL.reg =
     5ca:	70bb      	strb	r3, [r7, #2]
	switch (config->resolution) {
     5cc:	78f3      	ldrb	r3, [r6, #3]
     5ce:	2b34      	cmp	r3, #52	; 0x34
     5d0:	d900      	bls.n	5d4 <adc_init+0x154>
     5d2:	e140      	b.n	856 <adc_init+0x3d6>
     5d4:	009b      	lsls	r3, r3, #2
     5d6:	4a6a      	ldr	r2, [pc, #424]	; (780 <adc_init+0x300>)
     5d8:	58d3      	ldr	r3, [r2, r3]
     5da:	469f      	mov	pc, r3
		accumulate = ADC_ACCUMULATE_SAMPLES_16;
     5dc:	2204      	movs	r2, #4
		resolution = ADC_RESOLUTION_16BIT;
     5de:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_4;
     5e0:	2102      	movs	r1, #2
     5e2:	e01a      	b.n	61a <adc_init+0x19a>
		adjres = config->divide_result;
     5e4:	7a71      	ldrb	r1, [r6, #9]
		accumulate = config->accumulate_samples;
     5e6:	7a32      	ldrb	r2, [r6, #8]
		resolution = ADC_RESOLUTION_16BIT;
     5e8:	2010      	movs	r0, #16
     5ea:	e016      	b.n	61a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_64;
     5ec:	2206      	movs	r2, #6
		resolution = ADC_RESOLUTION_16BIT;
     5ee:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     5f0:	2101      	movs	r1, #1
     5f2:	e012      	b.n	61a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_256;
     5f4:	2208      	movs	r2, #8
		resolution = ADC_RESOLUTION_16BIT;
     5f6:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_DISABLE;
     5f8:	2100      	movs	r1, #0
     5fa:	e00e      	b.n	61a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     5fc:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_8BIT;
     5fe:	2030      	movs	r0, #48	; 0x30
	uint8_t adjres = 0;
     600:	2100      	movs	r1, #0
     602:	e00a      	b.n	61a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     604:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_10BIT;
     606:	2020      	movs	r0, #32
	uint8_t adjres = 0;
     608:	2100      	movs	r1, #0
     60a:	e006      	b.n	61a <adc_init+0x19a>
	enum adc_accumulate_samples accumulate = ADC_ACCUMULATE_DISABLE;
     60c:	2200      	movs	r2, #0
		resolution = ADC_RESOLUTION_12BIT;
     60e:	2000      	movs	r0, #0
	uint8_t adjres = 0;
     610:	2100      	movs	r1, #0
     612:	e002      	b.n	61a <adc_init+0x19a>
		accumulate = ADC_ACCUMULATE_SAMPLES_4;
     614:	2202      	movs	r2, #2
		resolution = ADC_RESOLUTION_16BIT;
     616:	2010      	movs	r0, #16
		adjres = ADC_DIVIDE_RESULT_2;
     618:	2101      	movs	r1, #1
	adc_module->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(adjres) | accumulate;
     61a:	0109      	lsls	r1, r1, #4
     61c:	2370      	movs	r3, #112	; 0x70
     61e:	400b      	ands	r3, r1
     620:	4313      	orrs	r3, r2
     622:	733b      	strb	r3, [r7, #12]
	Adc *const adc_module = module_inst->hw;
     624:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     626:	8c13      	ldrh	r3, [r2, #32]
     628:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     62a:	2b00      	cmp	r3, #0
     62c:	d1fb      	bne.n	626 <adc_init+0x1a6>
	if (config->sample_length > 63) {
     62e:	7d72      	ldrb	r2, [r6, #21]
		return STATUS_ERR_INVALID_ARG;
     630:	3317      	adds	r3, #23
	if (config->sample_length > 63) {
     632:	2a3f      	cmp	r2, #63	; 0x3f
     634:	d900      	bls.n	638 <adc_init+0x1b8>
     636:	e737      	b.n	4a8 <adc_init+0x28>
				| (config->sampling_time_compensation_enable << ADC_SAMPCTRL_OFFCOMP_Pos);
     638:	7bf3      	ldrb	r3, [r6, #15]
     63a:	01db      	lsls	r3, r3, #7
     63c:	431a      	orrs	r2, r3
     63e:	b2d2      	uxtb	r2, r2
		adc_module->SAMPCTRL.reg =
     640:	737a      	strb	r2, [r7, #13]
	Adc *const adc_module = module_inst->hw;
     642:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     644:	8c13      	ldrh	r3, [r2, #32]
     646:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     648:	2b00      	cmp	r3, #0
     64a:	d1fb      	bne.n	644 <adc_init+0x1c4>
			config->clock_prescaler;
     64c:	78b3      	ldrb	r3, [r6, #2]
	adc_module->CTRLB.reg =
     64e:	707b      	strb	r3, [r7, #1]
			(config->correction.correction_enable << ADC_CTRLC_CORREN_Pos) |
     650:	2324      	movs	r3, #36	; 0x24
     652:	5cf3      	ldrb	r3, [r6, r3]
     654:	00db      	lsls	r3, r3, #3
			(config->freerunning << ADC_CTRLC_FREERUN_Pos) |
     656:	7b32      	ldrb	r2, [r6, #12]
     658:	0092      	lsls	r2, r2, #2
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     65a:	431a      	orrs	r2, r3
			(config->differential_mode << ADC_CTRLC_DIFFMODE_Pos);
     65c:	7af3      	ldrb	r3, [r6, #11]
			(config->left_adjust << ADC_CTRLC_LEFTADJ_Pos) |
     65e:	4313      	orrs	r3, r2
     660:	7ab2      	ldrb	r2, [r6, #10]
     662:	0052      	lsls	r2, r2, #1
     664:	4313      	orrs	r3, r2
     666:	4303      	orrs	r3, r0
	adc_module->CTRLC.reg =
     668:	817b      	strh	r3, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     66a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     66c:	8c13      	ldrh	r3, [r2, #32]
     66e:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     670:	2b00      	cmp	r3, #0
     672:	d1fb      	bne.n	66c <adc_init+0x1ec>
	if (config->window.window_mode != ADC_WINDOW_MODE_DISABLE) {
     674:	8b32      	ldrh	r2, [r6, #24]
     676:	2a00      	cmp	r2, #0
     678:	d020      	beq.n	6bc <adc_init+0x23c>
		switch (resolution) {
     67a:	2810      	cmp	r0, #16
     67c:	d100      	bne.n	680 <adc_init+0x200>
     67e:	e0c9      	b.n	814 <adc_init+0x394>
     680:	d800      	bhi.n	684 <adc_init+0x204>
     682:	e083      	b.n	78c <adc_init+0x30c>
     684:	2820      	cmp	r0, #32
     686:	d100      	bne.n	68a <adc_init+0x20a>
     688:	e0a3      	b.n	7d2 <adc_init+0x352>
     68a:	2830      	cmp	r0, #48	; 0x30
     68c:	d116      	bne.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     68e:	7af3      	ldrb	r3, [r6, #11]
     690:	2b00      	cmp	r3, #0
     692:	d00a      	beq.n	6aa <adc_init+0x22a>
					(config->window.window_lower_value > 127 ||
     694:	69f1      	ldr	r1, [r6, #28]
     696:	3180      	adds	r1, #128	; 0x80
				return STATUS_ERR_INVALID_ARG;
     698:	2317      	movs	r3, #23
			if (config->differential_mode &&
     69a:	29ff      	cmp	r1, #255	; 0xff
     69c:	d900      	bls.n	6a0 <adc_init+0x220>
     69e:	e703      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -128 ||
     6a0:	6a31      	ldr	r1, [r6, #32]
     6a2:	3180      	adds	r1, #128	; 0x80
     6a4:	29ff      	cmp	r1, #255	; 0xff
     6a6:	d900      	bls.n	6aa <adc_init+0x22a>
     6a8:	e6fe      	b.n	4a8 <adc_init+0x28>
				return STATUS_ERR_INVALID_ARG;
     6aa:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 255 ||
     6ac:	69f1      	ldr	r1, [r6, #28]
     6ae:	29ff      	cmp	r1, #255	; 0xff
     6b0:	dd00      	ble.n	6b4 <adc_init+0x234>
     6b2:	e6f9      	b.n	4a8 <adc_init+0x28>
     6b4:	6a31      	ldr	r1, [r6, #32]
     6b6:	29ff      	cmp	r1, #255	; 0xff
     6b8:	dd00      	ble.n	6bc <adc_init+0x23c>
     6ba:	e6f5      	b.n	4a8 <adc_init+0x28>
	adc_module->CTRLC.reg |= config->window.window_mode;
     6bc:	897b      	ldrh	r3, [r7, #10]
     6be:	431a      	orrs	r2, r3
     6c0:	817a      	strh	r2, [r7, #10]
	Adc *const adc_module = module_inst->hw;
     6c2:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6c4:	8c13      	ldrh	r3, [r2, #32]
     6c6:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6c8:	2b00      	cmp	r3, #0
     6ca:	d1fb      	bne.n	6c4 <adc_init+0x244>
	adc_module->WINLT.reg =
     6cc:	8bb3      	ldrh	r3, [r6, #28]
     6ce:	81fb      	strh	r3, [r7, #14]
	Adc *const adc_module = module_inst->hw;
     6d0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6d2:	8c13      	ldrh	r3, [r2, #32]
     6d4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6d6:	2b00      	cmp	r3, #0
     6d8:	d1fb      	bne.n	6d2 <adc_init+0x252>
	adc_module->WINUT.reg = config->window.window_upper_value <<
     6da:	8c33      	ldrh	r3, [r6, #32]
     6dc:	823b      	strh	r3, [r7, #16]
	Adc *const adc_module = module_inst->hw;
     6de:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6e0:	8c13      	ldrh	r3, [r2, #32]
     6e2:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6e4:	2b00      	cmp	r3, #0
     6e6:	d1fb      	bne.n	6e0 <adc_init+0x260>
			config->positive_input;
     6e8:	7933      	ldrb	r3, [r6, #4]
			config->negative_input |
     6ea:	88f2      	ldrh	r2, [r6, #6]
     6ec:	4313      	orrs	r3, r2
	adc_module->INPUTCTRL.reg =
     6ee:	813b      	strh	r3, [r7, #8]
	Adc *const adc_module = module_inst->hw;
     6f0:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     6f2:	8c13      	ldrh	r3, [r2, #32]
     6f4:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     6f6:	2b00      	cmp	r3, #0
     6f8:	d1fb      	bne.n	6f2 <adc_init+0x272>
	adc_module->EVCTRL.reg = config->event_action;
     6fa:	332a      	adds	r3, #42	; 0x2a
     6fc:	5cf3      	ldrb	r3, [r6, r3]
     6fe:	70fb      	strb	r3, [r7, #3]
	adc_module->INTENCLR.reg =
     700:	2307      	movs	r3, #7
     702:	713b      	strb	r3, [r7, #4]
	if (config->correction.correction_enable){
     704:	331d      	adds	r3, #29
     706:	5cf3      	ldrb	r3, [r6, r3]
     708:	2b00      	cmp	r3, #0
     70a:	d01b      	beq.n	744 <adc_init+0x2c4>
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     70c:	8cf2      	ldrh	r2, [r6, #38]	; 0x26
     70e:	491d      	ldr	r1, [pc, #116]	; (784 <adc_init+0x304>)
			return STATUS_ERR_INVALID_ARG;
     710:	2317      	movs	r3, #23
		if (config->correction.gain_correction > ADC_GAINCORR_GAINCORR_Msk) {
     712:	428a      	cmp	r2, r1
     714:	d900      	bls.n	718 <adc_init+0x298>
     716:	e6c7      	b.n	4a8 <adc_init+0x28>
			adc_module->GAINCORR.reg = config->correction.gain_correction <<
     718:	827a      	strh	r2, [r7, #18]
	Adc *const adc_module = module_inst->hw;
     71a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     71c:	8c13      	ldrh	r3, [r2, #32]
     71e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     720:	2b00      	cmp	r3, #0
     722:	d1fb      	bne.n	71c <adc_init+0x29c>
		if (config->correction.offset_correction > 2047 ||
     724:	8d31      	ldrh	r1, [r6, #40]	; 0x28
     726:	2380      	movs	r3, #128	; 0x80
     728:	011b      	lsls	r3, r3, #4
     72a:	18ca      	adds	r2, r1, r3
     72c:	4815      	ldr	r0, [pc, #84]	; (784 <adc_init+0x304>)
     72e:	b292      	uxth	r2, r2
			return STATUS_ERR_INVALID_ARG;
     730:	2317      	movs	r3, #23
		if (config->correction.offset_correction > 2047 ||
     732:	4282      	cmp	r2, r0
     734:	d900      	bls.n	738 <adc_init+0x2b8>
     736:	e6b7      	b.n	4a8 <adc_init+0x28>
			adc_module->OFFSETCORR.reg = config->correction.offset_correction <<
     738:	82b9      	strh	r1, [r7, #20]
	Adc *const adc_module = module_inst->hw;
     73a:	682a      	ldr	r2, [r5, #0]
	if (adc_module->SYNCBUSY.reg) {
     73c:	8c13      	ldrh	r3, [r2, #32]
     73e:	b29b      	uxth	r3, r3
		while (adc_is_syncing(module_inst)) {
     740:	2b00      	cmp	r3, #0
     742:	d1fb      	bne.n	73c <adc_init+0x2bc>
			ADC_CALIB_BIASREFBUF(
     744:	4b10      	ldr	r3, [pc, #64]	; (788 <adc_init+0x308>)
     746:	681b      	ldr	r3, [r3, #0]
     748:	021a      	lsls	r2, r3, #8
     74a:	21e0      	movs	r1, #224	; 0xe0
     74c:	00c9      	lsls	r1, r1, #3
     74e:	400a      	ands	r2, r1
			ADC_CALIB_BIASCOMP(
     750:	069b      	lsls	r3, r3, #26
     752:	0f5b      	lsrs	r3, r3, #29
			) |
     754:	4313      	orrs	r3, r2
	adc_module->CALIB.reg =
     756:	85bb      	strh	r3, [r7, #44]	; 0x2c
	return STATUS_OK;
     758:	2300      	movs	r3, #0
     75a:	e6a5      	b.n	4a8 <adc_init+0x28>
     75c:	00000439 	.word	0x00000439
     760:	40000400 	.word	0x40000400
     764:	40001400 	.word	0x40001400
     768:	20001080 	.word	0x20001080
     76c:	000032fd 	.word	0x000032fd
     770:	0000328d 	.word	0x0000328d
     774:	0001c698 	.word	0x0001c698
     778:	00015f45 	.word	0x00015f45
     77c:	000033f9 	.word	0x000033f9
     780:	0001c5c4 	.word	0x0001c5c4
     784:	00000fff 	.word	0x00000fff
     788:	00806020 	.word	0x00806020
		switch (resolution) {
     78c:	2800      	cmp	r0, #0
     78e:	d195      	bne.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     790:	7af3      	ldrb	r3, [r6, #11]
     792:	2b00      	cmp	r3, #0
     794:	d012      	beq.n	7bc <adc_init+0x33c>
					(config->window.window_lower_value > 2047 ||
     796:	69f3      	ldr	r3, [r6, #28]
     798:	2080      	movs	r0, #128	; 0x80
     79a:	0100      	lsls	r0, r0, #4
     79c:	4684      	mov	ip, r0
     79e:	4463      	add	r3, ip
     7a0:	0019      	movs	r1, r3
			if (config->differential_mode &&
     7a2:	482e      	ldr	r0, [pc, #184]	; (85c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     7a4:	2317      	movs	r3, #23
			if (config->differential_mode &&
     7a6:	4281      	cmp	r1, r0
     7a8:	d900      	bls.n	7ac <adc_init+0x32c>
     7aa:	e67d      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -2048 ||
     7ac:	6a33      	ldr	r3, [r6, #32]
     7ae:	4463      	add	r3, ip
     7b0:	0019      	movs	r1, r3
     7b2:	482a      	ldr	r0, [pc, #168]	; (85c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     7b4:	2317      	movs	r3, #23
					config->window.window_lower_value < -2048 ||
     7b6:	4281      	cmp	r1, r0
     7b8:	d900      	bls.n	7bc <adc_init+0x33c>
     7ba:	e675      	b.n	4a8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 4095 ||
     7bc:	4927      	ldr	r1, [pc, #156]	; (85c <adc_init+0x3dc>)
				return STATUS_ERR_INVALID_ARG;
     7be:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 4095 ||
     7c0:	69f0      	ldr	r0, [r6, #28]
     7c2:	4288      	cmp	r0, r1
     7c4:	dd00      	ble.n	7c8 <adc_init+0x348>
     7c6:	e66f      	b.n	4a8 <adc_init+0x28>
     7c8:	6a30      	ldr	r0, [r6, #32]
     7ca:	4288      	cmp	r0, r1
     7cc:	dd00      	ble.n	7d0 <adc_init+0x350>
     7ce:	e66b      	b.n	4a8 <adc_init+0x28>
     7d0:	e774      	b.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     7d2:	7af3      	ldrb	r3, [r6, #11]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d012      	beq.n	7fe <adc_init+0x37e>
					(config->window.window_lower_value > 511 ||
     7d8:	69f3      	ldr	r3, [r6, #28]
     7da:	2080      	movs	r0, #128	; 0x80
     7dc:	0080      	lsls	r0, r0, #2
     7de:	4684      	mov	ip, r0
     7e0:	4463      	add	r3, ip
     7e2:	0019      	movs	r1, r3
			if (config->differential_mode &&
     7e4:	481e      	ldr	r0, [pc, #120]	; (860 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     7e6:	2317      	movs	r3, #23
			if (config->differential_mode &&
     7e8:	4281      	cmp	r1, r0
     7ea:	d900      	bls.n	7ee <adc_init+0x36e>
     7ec:	e65c      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -512 ||
     7ee:	6a33      	ldr	r3, [r6, #32]
     7f0:	4463      	add	r3, ip
     7f2:	0019      	movs	r1, r3
     7f4:	481a      	ldr	r0, [pc, #104]	; (860 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     7f6:	2317      	movs	r3, #23
					config->window.window_lower_value < -512 ||
     7f8:	4281      	cmp	r1, r0
     7fa:	d900      	bls.n	7fe <adc_init+0x37e>
     7fc:	e654      	b.n	4a8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 1023 ||
     7fe:	4918      	ldr	r1, [pc, #96]	; (860 <adc_init+0x3e0>)
				return STATUS_ERR_INVALID_ARG;
     800:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 1023 ||
     802:	69f0      	ldr	r0, [r6, #28]
     804:	4288      	cmp	r0, r1
     806:	dd00      	ble.n	80a <adc_init+0x38a>
     808:	e64e      	b.n	4a8 <adc_init+0x28>
     80a:	6a30      	ldr	r0, [r6, #32]
     80c:	4288      	cmp	r0, r1
     80e:	dd00      	ble.n	812 <adc_init+0x392>
     810:	e64a      	b.n	4a8 <adc_init+0x28>
     812:	e753      	b.n	6bc <adc_init+0x23c>
			if (config->differential_mode &&
     814:	7af3      	ldrb	r3, [r6, #11]
     816:	2b00      	cmp	r3, #0
     818:	d012      	beq.n	840 <adc_init+0x3c0>
					(config->window.window_lower_value > 32767 ||
     81a:	69f3      	ldr	r3, [r6, #28]
     81c:	2080      	movs	r0, #128	; 0x80
     81e:	0200      	lsls	r0, r0, #8
     820:	4684      	mov	ip, r0
     822:	4463      	add	r3, ip
     824:	0019      	movs	r1, r3
			if (config->differential_mode &&
     826:	480f      	ldr	r0, [pc, #60]	; (864 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     828:	2317      	movs	r3, #23
			if (config->differential_mode &&
     82a:	4281      	cmp	r1, r0
     82c:	d900      	bls.n	830 <adc_init+0x3b0>
     82e:	e63b      	b.n	4a8 <adc_init+0x28>
					config->window.window_lower_value < -32768 ||
     830:	6a33      	ldr	r3, [r6, #32]
     832:	4463      	add	r3, ip
     834:	0019      	movs	r1, r3
     836:	480b      	ldr	r0, [pc, #44]	; (864 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     838:	2317      	movs	r3, #23
					config->window.window_lower_value < -32768 ||
     83a:	4281      	cmp	r1, r0
     83c:	d900      	bls.n	840 <adc_init+0x3c0>
     83e:	e633      	b.n	4a8 <adc_init+0x28>
			} else if (config->window.window_lower_value > 65535 ||
     840:	4908      	ldr	r1, [pc, #32]	; (864 <adc_init+0x3e4>)
				return STATUS_ERR_INVALID_ARG;
     842:	2317      	movs	r3, #23
			} else if (config->window.window_lower_value > 65535 ||
     844:	69f0      	ldr	r0, [r6, #28]
     846:	4288      	cmp	r0, r1
     848:	dd00      	ble.n	84c <adc_init+0x3cc>
     84a:	e62d      	b.n	4a8 <adc_init+0x28>
     84c:	6a30      	ldr	r0, [r6, #32]
     84e:	4288      	cmp	r0, r1
     850:	dd00      	ble.n	854 <adc_init+0x3d4>
     852:	e629      	b.n	4a8 <adc_init+0x28>
     854:	e732      	b.n	6bc <adc_init+0x23c>
		return STATUS_ERR_INVALID_ARG;
     856:	2317      	movs	r3, #23
     858:	e626      	b.n	4a8 <adc_init+0x28>
     85a:	46c0      	nop			; (mov r8, r8)
     85c:	00000fff 	.word	0x00000fff
     860:	000003ff 	.word	0x000003ff
     864:	0000ffff 	.word	0x0000ffff

00000868 <ADC_Handler>:
		}

	MREPEAT(ADC_INST_NUM, _ADC_INTERRUPT_HANDLER, 0)
#else
void ADC_Handler(void)
{
     868:	b570      	push	{r4, r5, r6, lr}
	struct adc_module *module = _adc_instances[instance];
     86a:	4b2f      	ldr	r3, [pc, #188]	; (928 <ADC_Handler+0xc0>)
     86c:	681c      	ldr	r4, [r3, #0]
	uint32_t flags = module->hw->INTFLAG.reg & module->hw->INTENSET.reg;
     86e:	6823      	ldr	r3, [r4, #0]
     870:	799a      	ldrb	r2, [r3, #6]
     872:	795d      	ldrb	r5, [r3, #5]
     874:	4015      	ands	r5, r2
	if (flags & ADC_INTFLAG_RESRDY) {
     876:	07ea      	lsls	r2, r5, #31
     878:	d52a      	bpl.n	8d0 <ADC_Handler+0x68>
		module->hw->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     87a:	2201      	movs	r2, #1
     87c:	719a      	strb	r2, [r3, #6]
		*(module->job_buffer++) = module->hw->RESULT.reg;
     87e:	6962      	ldr	r2, [r4, #20]
     880:	1c93      	adds	r3, r2, #2
     882:	6163      	str	r3, [r4, #20]
     884:	6823      	ldr	r3, [r4, #0]
     886:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
     888:	b29b      	uxth	r3, r3
     88a:	8013      	strh	r3, [r2, #0]
		if (--module->remaining_conversions > 0) {
     88c:	8b23      	ldrh	r3, [r4, #24]
     88e:	3b01      	subs	r3, #1
     890:	b29b      	uxth	r3, r3
     892:	8323      	strh	r3, [r4, #24]
     894:	2b00      	cmp	r3, #0
     896:	d015      	beq.n	8c4 <ADC_Handler+0x5c>
			if (module->software_trigger == true
     898:	7f63      	ldrb	r3, [r4, #29]
     89a:	2b00      	cmp	r3, #0
     89c:	d018      	beq.n	8d0 <ADC_Handler+0x68>
				&& (!(module->hw->SEQSTATUS.reg & ADC_SEQSTATUS_SEQBUSY))) {
     89e:	6822      	ldr	r2, [r4, #0]
     8a0:	79d3      	ldrb	r3, [r2, #7]
     8a2:	b25b      	sxtb	r3, r3
     8a4:	2b00      	cmp	r3, #0
     8a6:	db13      	blt.n	8d0 <ADC_Handler+0x68>
     8a8:	8c13      	ldrh	r3, [r2, #32]
     8aa:	b29b      	uxth	r3, r3
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;

	while (adc_is_syncing(module_inst)) {
     8ac:	2b00      	cmp	r3, #0
     8ae:	d1fb      	bne.n	8a8 <ADC_Handler+0x40>
		/* Wait for synchronization */
	}

	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     8b0:	7e13      	ldrb	r3, [r2, #24]
     8b2:	2102      	movs	r1, #2
     8b4:	430b      	orrs	r3, r1
     8b6:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     8b8:	6822      	ldr	r2, [r4, #0]
	if (adc_module->SYNCBUSY.reg) {
     8ba:	8c13      	ldrh	r3, [r2, #32]
     8bc:	b29b      	uxth	r3, r3

	while (adc_is_syncing(module_inst)) {
     8be:	2b00      	cmp	r3, #0
     8c0:	d1fb      	bne.n	8ba <ADC_Handler+0x52>
     8c2:	e005      	b.n	8d0 <ADC_Handler+0x68>
	Assert(module_inst);
	Assert(module_inst->hw);

	Adc *const adc_module = module_inst->hw;
	/* Enable interrupt */
	adc_module->INTENCLR.reg = interrupt;
     8c4:	2301      	movs	r3, #1
     8c6:	6822      	ldr	r2, [r4, #0]
     8c8:	7113      	strb	r3, [r2, #4]
			if (module->job_status == STATUS_BUSY) {
     8ca:	7f23      	ldrb	r3, [r4, #28]
     8cc:	2b05      	cmp	r3, #5
     8ce:	d016      	beq.n	8fe <ADC_Handler+0x96>
	if (flags & ADC_INTFLAG_WINMON) {
     8d0:	076b      	lsls	r3, r5, #29
     8d2:	d508      	bpl.n	8e6 <ADC_Handler+0x7e>
		module->hw->INTFLAG.reg = ADC_INTFLAG_WINMON;
     8d4:	2304      	movs	r3, #4
     8d6:	6822      	ldr	r2, [r4, #0]
     8d8:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_WINDOW)) &&
     8da:	7ee3      	ldrb	r3, [r4, #27]
     8dc:	079b      	lsls	r3, r3, #30
     8de:	d502      	bpl.n	8e6 <ADC_Handler+0x7e>
     8e0:	7ea3      	ldrb	r3, [r4, #26]
     8e2:	079b      	lsls	r3, r3, #30
     8e4:	d417      	bmi.n	916 <ADC_Handler+0xae>
	if (flags & ADC_INTFLAG_OVERRUN) {
     8e6:	07ab      	lsls	r3, r5, #30
     8e8:	d508      	bpl.n	8fc <ADC_Handler+0x94>
		module->hw->INTFLAG.reg = ADC_INTFLAG_OVERRUN;
     8ea:	2302      	movs	r3, #2
     8ec:	6822      	ldr	r2, [r4, #0]
     8ee:	7193      	strb	r3, [r2, #6]
		if ((module->enabled_callback_mask & (1 << ADC_CALLBACK_ERROR)) &&
     8f0:	7ee3      	ldrb	r3, [r4, #27]
     8f2:	075b      	lsls	r3, r3, #29
     8f4:	d502      	bpl.n	8fc <ADC_Handler+0x94>
     8f6:	7ea3      	ldrb	r3, [r4, #26]
     8f8:	075b      	lsls	r3, r3, #29
     8fa:	d410      	bmi.n	91e <ADC_Handler+0xb6>
	_adc_interrupt_handler(0);
}
     8fc:	bd70      	pop	{r4, r5, r6, pc}
				module->job_status = STATUS_OK;
     8fe:	2300      	movs	r3, #0
     900:	7723      	strb	r3, [r4, #28]
				if ((module->enabled_callback_mask &
     902:	7ee3      	ldrb	r3, [r4, #27]
     904:	07db      	lsls	r3, r3, #31
     906:	d5e3      	bpl.n	8d0 <ADC_Handler+0x68>
						(1 << ADC_CALLBACK_READ_BUFFER)) &&
     908:	7ea3      	ldrb	r3, [r4, #26]
     90a:	07db      	lsls	r3, r3, #31
     90c:	d5e0      	bpl.n	8d0 <ADC_Handler+0x68>
					(module->callback[ADC_CALLBACK_READ_BUFFER])(module);
     90e:	0020      	movs	r0, r4
     910:	68a3      	ldr	r3, [r4, #8]
     912:	4798      	blx	r3
     914:	e7dc      	b.n	8d0 <ADC_Handler+0x68>
			(module->callback[ADC_CALLBACK_WINDOW])(module);
     916:	0020      	movs	r0, r4
     918:	68e3      	ldr	r3, [r4, #12]
     91a:	4798      	blx	r3
     91c:	e7e3      	b.n	8e6 <ADC_Handler+0x7e>
			(module->callback[ADC_CALLBACK_ERROR])(module);
     91e:	6923      	ldr	r3, [r4, #16]
     920:	0020      	movs	r0, r4
     922:	4798      	blx	r3
}
     924:	e7ea      	b.n	8fc <ADC_Handler+0x94>
     926:	46c0      	nop			; (mov r8, r8)
     928:	20001080 	.word	0x20001080

0000092c <adc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     92c:	1c93      	adds	r3, r2, #2
     92e:	009b      	lsls	r3, r3, #2
     930:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->registered_callback_mask |= (1 << callback_type);
     932:	2301      	movs	r3, #1
     934:	4093      	lsls	r3, r2
     936:	001a      	movs	r2, r3
     938:	7e83      	ldrb	r3, [r0, #26]
     93a:	4313      	orrs	r3, r2
     93c:	7683      	strb	r3, [r0, #26]
}
     93e:	4770      	bx	lr

00000940 <adc_read_buffer_job>:
 */
enum status_code adc_read_buffer_job(
		struct adc_module *const module_inst,
		uint16_t *buffer,
		uint16_t samples)
{
     940:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(samples);
	Assert(buffer);

	if(module_inst->remaining_conversions != 0 ||
     942:	8b03      	ldrh	r3, [r0, #24]
     944:	b29b      	uxth	r3, r3
			module_inst->job_status == STATUS_BUSY){
		return STATUS_BUSY;
     946:	2405      	movs	r4, #5
	if(module_inst->remaining_conversions != 0 ||
     948:	2b00      	cmp	r3, #0
     94a:	d001      	beq.n	950 <adc_read_buffer_job+0x10>
	if(module_inst->software_trigger == true) {
		adc_start_conversion(module_inst);
	}

	return STATUS_OK;
}
     94c:	0020      	movs	r0, r4
     94e:	bd10      	pop	{r4, pc}
			module_inst->job_status == STATUS_BUSY){
     950:	7f03      	ldrb	r3, [r0, #28]
	if(module_inst->remaining_conversions != 0 ||
     952:	2b05      	cmp	r3, #5
     954:	d0fa      	beq.n	94c <adc_read_buffer_job+0xc>
	module_inst->job_status = STATUS_BUSY;
     956:	2305      	movs	r3, #5
     958:	7703      	strb	r3, [r0, #28]
	module_inst->remaining_conversions = samples;
     95a:	8302      	strh	r2, [r0, #24]
	module_inst->job_buffer = buffer;
     95c:	6141      	str	r1, [r0, #20]
	adc_module->INTENSET.reg = interrupt;
     95e:	3b04      	subs	r3, #4
     960:	6802      	ldr	r2, [r0, #0]
     962:	7153      	strb	r3, [r2, #5]
	if(module_inst->software_trigger == true) {
     964:	7f43      	ldrb	r3, [r0, #29]
	return STATUS_OK;
     966:	2400      	movs	r4, #0
	if(module_inst->software_trigger == true) {
     968:	2b00      	cmp	r3, #0
     96a:	d0ef      	beq.n	94c <adc_read_buffer_job+0xc>
	Adc *const adc_module = module_inst->hw;
     96c:	6802      	ldr	r2, [r0, #0]
     96e:	8c13      	ldrh	r3, [r2, #32]
     970:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     972:	2b00      	cmp	r3, #0
     974:	d1fb      	bne.n	96e <adc_read_buffer_job+0x2e>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
     976:	7e13      	ldrb	r3, [r2, #24]
     978:	2102      	movs	r1, #2
     97a:	430b      	orrs	r3, r1
     97c:	7613      	strb	r3, [r2, #24]
	Adc *const adc_module = module_inst->hw;
     97e:	6802      	ldr	r2, [r0, #0]
	if (adc_module->SYNCBUSY.reg) {
     980:	8c13      	ldrh	r3, [r2, #32]
     982:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
     984:	2b00      	cmp	r3, #0
     986:	d1fb      	bne.n	980 <adc_read_buffer_job+0x40>
	return STATUS_OK;
     988:	2400      	movs	r4, #0
     98a:	e7df      	b.n	94c <adc_read_buffer_job+0xc>

0000098c <aes_get_config_defaults>:
		struct aes_config *const config)
{

	/* Sanity check arguments */
	Assert(config);
	config->encrypt_mode = AES_ENCRYPTION;
     98c:	2301      	movs	r3, #1
     98e:	7003      	strb	r3, [r0, #0]
	config->key_size = AES_KEY_SIZE_128;
     990:	2300      	movs	r3, #0
     992:	7043      	strb	r3, [r0, #1]
	config->start_mode = AES_MANUAL_START;
     994:	7083      	strb	r3, [r0, #2]
	config->opmode= AES_ECB_MODE;
     996:	70c3      	strb	r3, [r0, #3]
	config->cfb_size = AES_CFB_SIZE_128;
     998:	7103      	strb	r3, [r0, #4]
	config->ctype = AES_COUNTERMEASURE_TYPE_ALL;
     99a:	220f      	movs	r2, #15
     99c:	7142      	strb	r2, [r0, #5]
	config->enable_xor_key = false;
     99e:	7183      	strb	r3, [r0, #6]
	config->enable_key_gen = false;
     9a0:	71c3      	strb	r3, [r0, #7]
	config->lod = false;
     9a2:	7203      	strb	r3, [r0, #8]
}
     9a4:	4770      	bx	lr

000009a6 <aes_enable>:
 */
void aes_enable(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLA.reg |= AES_CTRLA_ENABLE;
     9a6:	6802      	ldr	r2, [r0, #0]
     9a8:	6813      	ldr	r3, [r2, #0]
     9aa:	2102      	movs	r1, #2
     9ac:	430b      	orrs	r3, r1
     9ae:	6013      	str	r3, [r2, #0]

}
     9b0:	4770      	bx	lr

000009b2 <aes_disable>:
{
	Assert(module);
	Assert(module->hw);

	/* Disbale interrupt */
	module->hw->INTENCLR.reg = AES_INTENCLR_MASK;
     9b2:	2303      	movs	r3, #3
     9b4:	6802      	ldr	r2, [r0, #0]
     9b6:	7153      	strb	r3, [r2, #5]
	/* Clear interrupt flag */
	module->hw->INTFLAG.reg = AES_INTFLAG_MASK;
     9b8:	6802      	ldr	r2, [r0, #0]
     9ba:	71d3      	strb	r3, [r2, #7]

	module->hw->CTRLA.reg &= (~AES_CTRLA_ENABLE);
     9bc:	6802      	ldr	r2, [r0, #0]
     9be:	6813      	ldr	r3, [r2, #0]
     9c0:	2102      	movs	r1, #2
     9c2:	438b      	bics	r3, r1
     9c4:	6013      	str	r3, [r2, #0]
}
     9c6:	4770      	bx	lr

000009c8 <aes_set_config>:
 */
void aes_set_config(
		struct aes_module *const module,
		Aes *const hw,
		struct aes_config *const config)
{
     9c8:	b570      	push	{r4, r5, r6, lr}
     9ca:	0004      	movs	r4, r0
     9cc:	000d      	movs	r5, r1
	/* Validate arguments. */
	Assert(hw);
	Assert(config);
	Assert(module);

	module->opmode = config->opmode;
     9ce:	78d3      	ldrb	r3, [r2, #3]
     9d0:	7103      	strb	r3, [r0, #4]
	module->hw = hw;
     9d2:	6021      	str	r1, [r4, #0]
	module->key_size = config->key_size;
     9d4:	7853      	ldrb	r3, [r2, #1]
     9d6:	7143      	strb	r3, [r0, #5]
	module->cfb_size = config->cfb_size;
     9d8:	7913      	ldrb	r3, [r2, #4]
     9da:	7183      	strb	r3, [r0, #6]

	ul_mode |= (config->encrypt_mode << AES_CTRLA_CIPHER_Pos)
     9dc:	7813      	ldrb	r3, [r2, #0]
     9de:	029b      	lsls	r3, r3, #10
			 | (config->start_mode << AES_CTRLA_STARTMODE_Pos)
     9e0:	7891      	ldrb	r1, [r2, #2]
     9e2:	02c9      	lsls	r1, r1, #11
     9e4:	430b      	orrs	r3, r1
			 | (config->key_size << AES_CTRLA_KEYSIZE_Pos)
     9e6:	7851      	ldrb	r1, [r2, #1]
     9e8:	0209      	lsls	r1, r1, #8
     9ea:	430b      	orrs	r3, r1
			 | (config->opmode << AES_CTRLA_AESMODE_Pos)
     9ec:	78d1      	ldrb	r1, [r2, #3]
     9ee:	0089      	lsls	r1, r1, #2
     9f0:	430b      	orrs	r3, r1
			 | (config->cfb_size << AES_CTRLA_CFBS_Pos)
     9f2:	7911      	ldrb	r1, [r2, #4]
     9f4:	0149      	lsls	r1, r1, #5
     9f6:	430b      	orrs	r3, r1
			 | (AES_CTRLA_CTYPE(config->ctype))
			 | (config->enable_xor_key << AES_CTRLA_XORKEY_Pos)
     9f8:	7991      	ldrb	r1, [r2, #6]
     9fa:	0389      	lsls	r1, r1, #14
			 | (config->enable_key_gen << AES_CTRLA_KEYGEN_Pos)
     9fc:	79d0      	ldrb	r0, [r2, #7]
     9fe:	0340      	lsls	r0, r0, #13
			 | (config->lod << AES_CTRLA_LOD_Pos);
     a00:	4301      	orrs	r1, r0
     a02:	7a10      	ldrb	r0, [r2, #8]
     a04:	0300      	lsls	r0, r0, #12
     a06:	4301      	orrs	r1, r0
			 | (AES_CTRLA_CTYPE(config->ctype))
     a08:	7952      	ldrb	r2, [r2, #5]
     a0a:	0412      	lsls	r2, r2, #16
     a0c:	20f0      	movs	r0, #240	; 0xf0
     a0e:	0300      	lsls	r0, r0, #12
     a10:	4002      	ands	r2, r0
			 | (config->lod << AES_CTRLA_LOD_Pos);
     a12:	430a      	orrs	r2, r1
     a14:	4313      	orrs	r3, r2
     a16:	001e      	movs	r6, r3
	if (hw->CTRLA.reg & AES_CTRLA_ENABLE) {
     a18:	682b      	ldr	r3, [r5, #0]
     a1a:	079b      	lsls	r3, r3, #30
     a1c:	d401      	bmi.n	a22 <aes_set_config+0x5a>
		aes_disable(module);
		hw->CTRLA.reg = ul_mode;
		aes_enable(module);
	} else {
		hw->CTRLA.reg = ul_mode;
     a1e:	602e      	str	r6, [r5, #0]
	}
}
     a20:	bd70      	pop	{r4, r5, r6, pc}
		aes_disable(module);
     a22:	0020      	movs	r0, r4
     a24:	4b03      	ldr	r3, [pc, #12]	; (a34 <aes_set_config+0x6c>)
     a26:	4798      	blx	r3
		hw->CTRLA.reg = ul_mode;
     a28:	602e      	str	r6, [r5, #0]
		aes_enable(module);
     a2a:	0020      	movs	r0, r4
     a2c:	4b02      	ldr	r3, [pc, #8]	; (a38 <aes_set_config+0x70>)
     a2e:	4798      	blx	r3
     a30:	e7f6      	b.n	a20 <aes_set_config+0x58>
     a32:	46c0      	nop			; (mov r8, r8)
     a34:	000009b3 	.word	0x000009b3
     a38:	000009a7 	.word	0x000009a7

00000a3c <aes_init>:
{
     a3c:	b570      	push	{r4, r5, r6, lr}
			MCLK->APBCMASK.reg |= mask;
     a3e:	4c05      	ldr	r4, [pc, #20]	; (a54 <aes_init+0x18>)
     a40:	69e5      	ldr	r5, [r4, #28]
     a42:	2380      	movs	r3, #128	; 0x80
     a44:	019b      	lsls	r3, r3, #6
     a46:	432b      	orrs	r3, r5
     a48:	61e3      	str	r3, [r4, #28]
	hw->CTRLA.reg = AES_CTRLA_SWRST;
     a4a:	2301      	movs	r3, #1
     a4c:	600b      	str	r3, [r1, #0]
	aes_set_config(module,hw, config);
     a4e:	4b02      	ldr	r3, [pc, #8]	; (a58 <aes_init+0x1c>)
     a50:	4798      	blx	r3
}
     a52:	bd70      	pop	{r4, r5, r6, pc}
     a54:	40000400 	.word	0x40000400
     a58:	000009c9 	.word	0x000009c9

00000a5c <aes_write_key>:
 * \note The key size depends on the current AES configuration.
 */
void aes_write_key(
		struct aes_module *const module,
		const uint32_t *key)
{
     a5c:	b570      	push	{r4, r5, r6, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(key);

	switch (module->key_size) {
     a5e:	7943      	ldrb	r3, [r0, #5]
     a60:	2b01      	cmp	r3, #1
     a62:	d005      	beq.n	a70 <aes_write_key+0x14>
     a64:	2b00      	cmp	r3, #0
     a66:	d010      	beq.n	a8a <aes_write_key+0x2e>
     a68:	2b02      	cmp	r3, #2
     a6a:	d10d      	bne.n	a88 <aes_write_key+0x2c>
	case AES_KEY_SIZE_192:
		key_length = 6;
		break;

	case AES_KEY_SIZE_256:
		key_length = 8;
     a6c:	2508      	movs	r5, #8
     a6e:	e000      	b.n	a72 <aes_write_key+0x16>
		key_length = 6;
     a70:	2506      	movs	r5, #6
{
     a72:	2300      	movs	r3, #0
	default:
		break;
	}

	for (i = 0; i < key_length; i++) {
		module->hw->KEYWORD[i].reg = *key;
     a74:	c910      	ldmia	r1!, {r4}
     a76:	1c9a      	adds	r2, r3, #2
     a78:	0092      	lsls	r2, r2, #2
     a7a:	6806      	ldr	r6, [r0, #0]
     a7c:	46b4      	mov	ip, r6
     a7e:	4462      	add	r2, ip
     a80:	6054      	str	r4, [r2, #4]
	for (i = 0; i < key_length; i++) {
     a82:	3301      	adds	r3, #1
     a84:	42ab      	cmp	r3, r5
     a86:	d3f5      	bcc.n	a74 <aes_write_key+0x18>
		key++;
	}
}
     a88:	bd70      	pop	{r4, r5, r6, pc}
		key_length = 4;
     a8a:	2504      	movs	r5, #4
     a8c:	e7f1      	b.n	a72 <aes_write_key+0x16>
	...

00000a90 <aes_write_input_data>:
 * \param[in] input_data_buffer Pointer to an input data buffer
 */
void aes_write_input_data(
		struct aes_module *const module,
		const uint32_t *input_data_buffer)
{
     a90:	b510      	push	{r4, lr}
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);;
	Assert(input_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     a92:	2300      	movs	r3, #0
     a94:	6802      	ldr	r2, [r0, #0]
     a96:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     a98:	4b0f      	ldr	r3, [pc, #60]	; (ad8 <aes_write_input_data+0x48>)
     a9a:	6842      	ldr	r2, [r0, #4]
     a9c:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     a9e:	4a0f      	ldr	r2, [pc, #60]	; (adc <aes_write_input_data+0x4c>)
     aa0:	4293      	cmp	r3, r2
     aa2:	d00a      	beq.n	aba <aes_write_input_data+0x2a>
		for (i = 0; i < 2; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
			input_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     aa4:	7903      	ldrb	r3, [r0, #4]
     aa6:	2b03      	cmp	r3, #3
     aa8:	d00e      	beq.n	ac8 <aes_write_input_data+0x38>
     aaa:	000c      	movs	r4, r1
     aac:	3410      	adds	r4, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		module->hw->INDATA.reg = *input_data_buffer;
	} else {
		for (i = 0; i < 4; i++) {
			module->hw->INDATA.reg = *input_data_buffer;
     aae:	6803      	ldr	r3, [r0, #0]
     ab0:	c904      	ldmia	r1!, {r2}
     ab2:	639a      	str	r2, [r3, #56]	; 0x38
		for (i = 0; i < 4; i++) {
     ab4:	428c      	cmp	r4, r1
     ab6:	d1fa      	bne.n	aae <aes_write_input_data+0x1e>
			input_data_buffer++;
		}
	}
}
     ab8:	bd10      	pop	{r4, pc}
			module->hw->INDATA.reg = *input_data_buffer;
     aba:	6803      	ldr	r3, [r0, #0]
     abc:	680a      	ldr	r2, [r1, #0]
     abe:	639a      	str	r2, [r3, #56]	; 0x38
     ac0:	6803      	ldr	r3, [r0, #0]
     ac2:	684a      	ldr	r2, [r1, #4]
     ac4:	639a      	str	r2, [r3, #56]	; 0x38
     ac6:	e7f7      	b.n	ab8 <aes_write_input_data+0x28>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     ac8:	7983      	ldrb	r3, [r0, #6]
     aca:	3b02      	subs	r3, #2
     acc:	2b01      	cmp	r3, #1
     ace:	d8ec      	bhi.n	aaa <aes_write_input_data+0x1a>
		module->hw->INDATA.reg = *input_data_buffer;
     ad0:	6803      	ldr	r3, [r0, #0]
     ad2:	680a      	ldr	r2, [r1, #0]
     ad4:	639a      	str	r2, [r3, #56]	; 0x38
     ad6:	e7ef      	b.n	ab8 <aes_write_input_data+0x28>
     ad8:	00ff00ff 	.word	0x00ff00ff
     adc:	00010003 	.word	0x00010003

00000ae0 <aes_read_output_data>:
	/* Validate arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(output_data_buffer);

	module->hw->DATABUFPTR.reg = 0;
     ae0:	2300      	movs	r3, #0
     ae2:	6802      	ldr	r2, [r0, #0]
     ae4:	7213      	strb	r3, [r2, #8]
	if (module->opmode == AES_CFB_MODE
		&& module->cfb_size == AES_CFB_SIZE_64){
     ae6:	4b10      	ldr	r3, [pc, #64]	; (b28 <aes_read_output_data+0x48>)
     ae8:	6842      	ldr	r2, [r0, #4]
     aea:	4013      	ands	r3, r2
	if (module->opmode == AES_CFB_MODE
     aec:	4a0f      	ldr	r2, [pc, #60]	; (b2c <aes_read_output_data+0x4c>)
     aee:	4293      	cmp	r3, r2
     af0:	d00a      	beq.n	b08 <aes_read_output_data+0x28>
		for (i = 0; i < 2; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
			output_data_buffer++;
		}
	} else if (module->opmode == AES_CFB_MODE
     af2:	7903      	ldrb	r3, [r0, #4]
     af4:	2b03      	cmp	r3, #3
     af6:	d00e      	beq.n	b16 <aes_read_output_data+0x36>
     af8:	000a      	movs	r2, r1
     afa:	3210      	adds	r2, #16
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
		*output_data_buffer = module->hw->INDATA.reg;
	} else {
		for (i = 0; i < 4; i++) {
			*output_data_buffer = module->hw->INDATA.reg;
     afc:	6803      	ldr	r3, [r0, #0]
     afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     b00:	c108      	stmia	r1!, {r3}
		for (i = 0; i < 4; i++) {
     b02:	428a      	cmp	r2, r1
     b04:	d1fa      	bne.n	afc <aes_read_output_data+0x1c>
			output_data_buffer++;
		}
	}
}
     b06:	4770      	bx	lr
			*output_data_buffer = module->hw->INDATA.reg;
     b08:	6803      	ldr	r3, [r0, #0]
     b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     b0c:	600b      	str	r3, [r1, #0]
     b0e:	6803      	ldr	r3, [r0, #0]
     b10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     b12:	604b      	str	r3, [r1, #4]
     b14:	e7f7      	b.n	b06 <aes_read_output_data+0x26>
		&& (module->cfb_size == AES_CFB_SIZE_32 || module->cfb_size == AES_CFB_SIZE_16)){
     b16:	7983      	ldrb	r3, [r0, #6]
     b18:	3b02      	subs	r3, #2
     b1a:	2b01      	cmp	r3, #1
     b1c:	d8ec      	bhi.n	af8 <aes_read_output_data+0x18>
		*output_data_buffer = module->hw->INDATA.reg;
     b1e:	6803      	ldr	r3, [r0, #0]
     b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
     b22:	600b      	str	r3, [r1, #0]
     b24:	e7ef      	b.n	b06 <aes_read_output_data+0x26>
     b26:	46c0      	nop			; (mov r8, r8)
     b28:	00ff00ff 	.word	0x00ff00ff
     b2c:	00010003 	.word	0x00010003

00000b30 <extint_register_callback>:
	/* Sanity check arguments */
	Assert(callback);

	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     b30:	2317      	movs	r3, #23
	if (type != EXTINT_CALLBACK_TYPE_DETECT) {
     b32:	2a00      	cmp	r2, #0
     b34:	d001      	beq.n	b3a <extint_register_callback+0xa>
	} else if (_extint_dev.callbacks[channel] == callback) {
		return STATUS_OK;
	}

	return STATUS_ERR_ALREADY_INITIALIZED;
}
     b36:	0018      	movs	r0, r3
     b38:	4770      	bx	lr
	if (_extint_dev.callbacks[channel] == NULL) {
     b3a:	008b      	lsls	r3, r1, #2
     b3c:	4a06      	ldr	r2, [pc, #24]	; (b58 <extint_register_callback+0x28>)
     b3e:	589b      	ldr	r3, [r3, r2]
     b40:	2b00      	cmp	r3, #0
     b42:	d003      	beq.n	b4c <extint_register_callback+0x1c>
	} else if (_extint_dev.callbacks[channel] == callback) {
     b44:	4283      	cmp	r3, r0
     b46:	d005      	beq.n	b54 <extint_register_callback+0x24>
	return STATUS_ERR_ALREADY_INITIALIZED;
     b48:	231d      	movs	r3, #29
     b4a:	e7f4      	b.n	b36 <extint_register_callback+0x6>
		_extint_dev.callbacks[channel] = callback;
     b4c:	0089      	lsls	r1, r1, #2
     b4e:	5088      	str	r0, [r1, r2]
		return STATUS_OK;
     b50:	2300      	movs	r3, #0
     b52:	e7f0      	b.n	b36 <extint_register_callback+0x6>
		return STATUS_OK;
     b54:	2300      	movs	r3, #0
     b56:	e7ee      	b.n	b36 <extint_register_callback+0x6>
     b58:	20001088 	.word	0x20001088

00000b5c <extint_chan_enable_callback>:

		eic->INTENSET.reg = (1UL << channel);
	}
	else {
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     b5c:	2317      	movs	r3, #23
	if (type == EXTINT_CALLBACK_TYPE_DETECT) {
     b5e:	2900      	cmp	r1, #0
     b60:	d001      	beq.n	b66 <extint_chan_enable_callback+0xa>
	}

	return STATUS_OK;
}
     b62:	0018      	movs	r0, r3
     b64:	4770      	bx	lr
		Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

		return eics[eic_index];
	} else {
		Assert(false);
		return NULL;
     b66:	2200      	movs	r2, #0
	if (eic_index < EIC_INST_NUM) {
     b68:	281f      	cmp	r0, #31
     b6a:	d800      	bhi.n	b6e <extint_chan_enable_callback+0x12>
		return eics[eic_index];
     b6c:	4a02      	ldr	r2, [pc, #8]	; (b78 <extint_chan_enable_callback+0x1c>)
		eic->INTENSET.reg = (1UL << channel);
     b6e:	2301      	movs	r3, #1
     b70:	4083      	lsls	r3, r0
     b72:	6113      	str	r3, [r2, #16]
	return STATUS_OK;
     b74:	2300      	movs	r3, #0
     b76:	e7f4      	b.n	b62 <extint_chan_enable_callback+0x6>
     b78:	40002400 	.word	0x40002400

00000b7c <EIC_Handler>:
	return _current_channel;
}

/** Handler for the EXTINT hardware module interrupt. */
void EIC_Handler(void)
{
     b7c:	b570      	push	{r4, r5, r6, lr}
	/* Find any triggered channels, run associated callback handlers */
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b7e:	2200      	movs	r2, #0
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <EIC_Handler+0x48>)
     b82:	701a      	strb	r2, [r3, #0]
     b84:	2300      	movs	r3, #0
     b86:	4910      	ldr	r1, [pc, #64]	; (bc8 <EIC_Handler+0x4c>)
 */
static inline bool extint_chan_is_detected(
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));
     b88:	251f      	movs	r5, #31
		if (extint_chan_is_detected(_current_channel)) {
			/* Clear flag */
			extint_chan_clear_detected(_current_channel);
			/* Find any associated callback entries in the callback table */
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     b8a:	4e10      	ldr	r6, [pc, #64]	; (bcc <EIC_Handler+0x50>)
	for (_current_channel = 0; _current_channel < EIC_NUMBER_OF_INTERRUPTS ; _current_channel++) {
     b8c:	4c0d      	ldr	r4, [pc, #52]	; (bc4 <EIC_Handler+0x48>)
     b8e:	e00a      	b.n	ba6 <EIC_Handler+0x2a>
		return eics[eic_index];
     b90:	490d      	ldr	r1, [pc, #52]	; (bc8 <EIC_Handler+0x4c>)
     b92:	e008      	b.n	ba6 <EIC_Handler+0x2a>
     b94:	7823      	ldrb	r3, [r4, #0]
     b96:	3301      	adds	r3, #1
     b98:	b2db      	uxtb	r3, r3
     b9a:	7023      	strb	r3, [r4, #0]
     b9c:	2b0f      	cmp	r3, #15
     b9e:	d810      	bhi.n	bc2 <EIC_Handler+0x46>
		return NULL;
     ba0:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     ba2:	2b1f      	cmp	r3, #31
     ba4:	d9f4      	bls.n	b90 <EIC_Handler+0x14>
	uint32_t eic_mask   = (1UL << (channel % 32));
     ba6:	0028      	movs	r0, r5
     ba8:	4018      	ands	r0, r3
     baa:	2201      	movs	r2, #1
     bac:	4082      	lsls	r2, r0

	return (eic_module->INTFLAG.reg & eic_mask);
     bae:	6948      	ldr	r0, [r1, #20]
		if (extint_chan_is_detected(_current_channel)) {
     bb0:	4210      	tst	r0, r2
     bb2:	d0ef      	beq.n	b94 <EIC_Handler+0x18>
		const uint8_t channel)
{
	Eic *const eic_module = _extint_get_eic_from_channel(channel);
	uint32_t eic_mask   = (1UL << (channel % 32));

	eic_module->INTFLAG.reg = eic_mask;
     bb4:	614a      	str	r2, [r1, #20]
			if (_extint_dev.callbacks[_current_channel] != NULL) {
     bb6:	009b      	lsls	r3, r3, #2
     bb8:	599b      	ldr	r3, [r3, r6]
     bba:	2b00      	cmp	r3, #0
     bbc:	d0ea      	beq.n	b94 <EIC_Handler+0x18>
				/* Run the registered callback */
				_extint_dev.callbacks[_current_channel]();
     bbe:	4798      	blx	r3
     bc0:	e7e8      	b.n	b94 <EIC_Handler+0x18>
			}
		}
	}
}
     bc2:	bd70      	pop	{r4, r5, r6, pc}
     bc4:	20001084 	.word	0x20001084
     bc8:	40002400 	.word	0x40002400
     bcc:	20001088 	.word	0x20001088

00000bd0 <_extint_enable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Enable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg |= EIC_CTRLA_ENABLE;
     bd0:	4a06      	ldr	r2, [pc, #24]	; (bec <_extint_enable+0x1c>)
     bd2:	7813      	ldrb	r3, [r2, #0]
     bd4:	2102      	movs	r1, #2
     bd6:	430b      	orrs	r3, r1
     bd8:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     bda:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     bdc:	6853      	ldr	r3, [r2, #4]
     bde:	4219      	tst	r1, r3
     be0:	d1fc      	bne.n	bdc <_extint_enable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     be2:	6853      	ldr	r3, [r2, #4]
     be4:	4218      	tst	r0, r3
     be6:	d1f9      	bne.n	bdc <_extint_enable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     be8:	4770      	bx	lr
     bea:	46c0      	nop			; (mov r8, r8)
     bec:	40002400 	.word	0x40002400

00000bf0 <_extint_disable>:
{
	Eic *const eics[EIC_INST_NUM] = EIC_INSTS;

	/* Disable all EIC hardware modules. */
	for (uint32_t i = 0; i < EIC_INST_NUM; i++) {
		eics[i]->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     bf0:	4a06      	ldr	r2, [pc, #24]	; (c0c <_extint_disable+0x1c>)
     bf2:	7813      	ldrb	r3, [r2, #0]
     bf4:	2102      	movs	r1, #2
     bf6:	438b      	bics	r3, r1
     bf8:	7013      	strb	r3, [r2, #0]
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     bfa:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     bfc:	6853      	ldr	r3, [r2, #4]
     bfe:	4219      	tst	r1, r3
     c00:	d1fc      	bne.n	bfc <_extint_disable+0xc>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c02:	6853      	ldr	r3, [r2, #4]
     c04:	4218      	tst	r0, r3
     c06:	d1f9      	bne.n	bfc <_extint_disable+0xc>
	}

	while (extint_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}
}
     c08:	4770      	bx	lr
     c0a:	46c0      	nop			; (mov r8, r8)
     c0c:	40002400 	.word	0x40002400

00000c10 <_system_extint_init>:
{
     c10:	b510      	push	{r4, lr}
			MCLK->APBAMASK.reg |= mask;
     c12:	4a12      	ldr	r2, [pc, #72]	; (c5c <_system_extint_init+0x4c>)
     c14:	6951      	ldr	r1, [r2, #20]
     c16:	2380      	movs	r3, #128	; 0x80
     c18:	009b      	lsls	r3, r3, #2
     c1a:	430b      	orrs	r3, r1
     c1c:	6153      	str	r3, [r2, #20]
		eics[i]->CTRLA.reg |= EIC_CTRLA_SWRST;
     c1e:	4a10      	ldr	r2, [pc, #64]	; (c60 <_system_extint_init+0x50>)
     c20:	7813      	ldrb	r3, [r2, #0]
     c22:	2101      	movs	r1, #1
     c24:	430b      	orrs	r3, r1
     c26:	7013      	strb	r3, [r2, #0]
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     c28:	3101      	adds	r1, #1
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c2a:	2001      	movs	r0, #1
		if((eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_ENABLE)
     c2c:	6853      	ldr	r3, [r2, #4]
     c2e:	4219      	tst	r1, r3
     c30:	d1fc      	bne.n	c2c <_system_extint_init+0x1c>
		 || (eics[i]->SYNCBUSY.reg & EIC_SYNCBUSY_SWRST)){
     c32:	6853      	ldr	r3, [r2, #4]
     c34:	4218      	tst	r0, r3
     c36:	d1f9      	bne.n	c2c <_system_extint_init+0x1c>
		eics[i]->CTRLA.bit.CKSEL = EXTINT_CLK_ULP32K;
     c38:	4a09      	ldr	r2, [pc, #36]	; (c60 <_system_extint_init+0x50>)
     c3a:	7813      	ldrb	r3, [r2, #0]
     c3c:	2110      	movs	r1, #16
     c3e:	430b      	orrs	r3, r1
     c40:	7013      	strb	r3, [r2, #0]
     c42:	4b08      	ldr	r3, [pc, #32]	; (c64 <_system_extint_init+0x54>)
     c44:	0019      	movs	r1, r3
     c46:	3140      	adds	r1, #64	; 0x40
		_extint_dev.callbacks[j] = NULL;
     c48:	2200      	movs	r2, #0
     c4a:	c304      	stmia	r3!, {r2}
	for (uint8_t j = 0; j < EIC_NUMBER_OF_INTERRUPTS; j++) {
     c4c:	428b      	cmp	r3, r1
     c4e:	d1fc      	bne.n	c4a <_system_extint_init+0x3a>
     c50:	2208      	movs	r2, #8
     c52:	4b05      	ldr	r3, [pc, #20]	; (c68 <_system_extint_init+0x58>)
     c54:	601a      	str	r2, [r3, #0]
	_extint_enable();
     c56:	4b05      	ldr	r3, [pc, #20]	; (c6c <_system_extint_init+0x5c>)
     c58:	4798      	blx	r3
}
     c5a:	bd10      	pop	{r4, pc}
     c5c:	40000400 	.word	0x40000400
     c60:	40002400 	.word	0x40002400
     c64:	20001088 	.word	0x20001088
     c68:	e000e100 	.word	0xe000e100
     c6c:	00000bd1 	.word	0x00000bd1

00000c70 <extint_chan_get_config_defaults>:
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->gpio_pin            = 0;
     c70:	2300      	movs	r3, #0
     c72:	6003      	str	r3, [r0, #0]
	config->gpio_pin_mux        = 0;
     c74:	6043      	str	r3, [r0, #4]
	config->gpio_pin_pull       = EXTINT_PULL_UP;
     c76:	2201      	movs	r2, #1
     c78:	7202      	strb	r2, [r0, #8]
	config->filter_input_signal = false;
     c7a:	7283      	strb	r3, [r0, #10]
	config->detection_criteria  = EXTINT_DETECT_FALLING;
     c7c:	3201      	adds	r2, #1
     c7e:	72c2      	strb	r2, [r0, #11]
	config->enable_async_edge_detection = false;
     c80:	7243      	strb	r3, [r0, #9]
}
     c82:	4770      	bx	lr

00000c84 <extint_chan_set_config>:

 */
void extint_chan_set_config(
		const uint8_t channel,
		const struct extint_chan_conf *const config)
{
     c84:	b5f0      	push	{r4, r5, r6, r7, lr}
     c86:	b083      	sub	sp, #12
     c88:	0005      	movs	r5, r0
     c8a:	000c      	movs	r4, r1
	/* Sanity check arguments */
	Assert(config);
	_extint_disable();
     c8c:	4b1c      	ldr	r3, [pc, #112]	; (d00 <extint_chan_set_config+0x7c>)
     c8e:	4798      	blx	r3
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     c90:	a901      	add	r1, sp, #4
     c92:	2300      	movs	r3, #0
     c94:	704b      	strb	r3, [r1, #1]
	config->powersave    = false;
     c96:	70cb      	strb	r3, [r1, #3]
			config->detection_criteria)));
#endif
	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = config->gpio_pin_mux;
     c98:	7923      	ldrb	r3, [r4, #4]
     c9a:	700b      	strb	r3, [r1, #0]
	pinmux_config.direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->gpio_pin_pull;
     c9c:	7a23      	ldrb	r3, [r4, #8]
     c9e:	708b      	strb	r3, [r1, #2]
	system_pinmux_pin_set_config(config->gpio_pin, &pinmux_config);
     ca0:	7820      	ldrb	r0, [r4, #0]
     ca2:	4b18      	ldr	r3, [pc, #96]	; (d04 <extint_chan_set_config+0x80>)
     ca4:	4798      	blx	r3
		return NULL;
     ca6:	2100      	movs	r1, #0
	if (eic_index < EIC_INST_NUM) {
     ca8:	2d1f      	cmp	r5, #31
     caa:	d800      	bhi.n	cae <extint_chan_set_config+0x2a>
		return eics[eic_index];
     cac:	4916      	ldr	r1, [pc, #88]	; (d08 <extint_chan_set_config+0x84>)

	/* Get a pointer to the module hardware instance */
	Eic *const EIC_module = _extint_get_eic_from_channel(channel);

	uint32_t config_pos = (4 * (channel % 8));
     cae:	2207      	movs	r2, #7
     cb0:	402a      	ands	r2, r5
     cb2:	0092      	lsls	r2, r2, #2
	uint32_t new_config;

	/* Determine the channel's new edge detection configuration */
	new_config = (config->detection_criteria << EIC_CONFIG_SENSE0_Pos);
     cb4:	7ae7      	ldrb	r7, [r4, #11]

	/* Enable the hardware signal filter if requested in the config */
	if (config->filter_input_signal) {
     cb6:	7aa3      	ldrb	r3, [r4, #10]
     cb8:	2b00      	cmp	r3, #0
     cba:	d001      	beq.n	cc0 <extint_chan_set_config+0x3c>
     cbc:	2308      	movs	r3, #8
     cbe:	431f      	orrs	r7, r3
     cc0:	08eb      	lsrs	r3, r5, #3
     cc2:	009b      	lsls	r3, r3, #2
     cc4:	18cb      	adds	r3, r1, r3
		new_config |= EIC_CONFIG_FILTEN0;
	}

	/* Clear the existing and set the new channel configuration */
	EIC_module->CONFIG[channel / 8].reg
		= (EIC_module->CONFIG[channel / 8].reg &
     cc6:	69d8      	ldr	r0, [r3, #28]
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     cc8:	260f      	movs	r6, #15
     cca:	4096      	lsls	r6, r2
		= (EIC_module->CONFIG[channel / 8].reg &
     ccc:	43b0      	bics	r0, r6
			(new_config << config_pos);
     cce:	4097      	lsls	r7, r2
     cd0:	003a      	movs	r2, r7
			~((EIC_CONFIG_SENSE0_Msk | EIC_CONFIG_FILTEN0) << config_pos)) |
     cd2:	4302      	orrs	r2, r0
		= (EIC_module->CONFIG[channel / 8].reg &
     cd4:	61da      	str	r2, [r3, #28]
#if (SAML22) || (SAML21XXXB) || (SAMC20) || (SAMR30) || (SAMR34) || (SAMR35)
	/* Config asynchronous edge detection */
	if (config->enable_async_edge_detection) {
     cd6:	7a63      	ldrb	r3, [r4, #9]
     cd8:	2b00      	cmp	r3, #0
     cda:	d10b      	bne.n	cf4 <extint_chan_set_config+0x70>
		EIC_module->ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->ASYNCH.reg &= (EIC_ASYNCH_MASK & (~(1UL << channel)));
     cdc:	698a      	ldr	r2, [r1, #24]
     cde:	2301      	movs	r3, #1
     ce0:	40ab      	lsls	r3, r5
     ce2:	43db      	mvns	r3, r3
     ce4:	041b      	lsls	r3, r3, #16
     ce6:	0c1b      	lsrs	r3, r3, #16
     ce8:	4013      	ands	r3, r2
     cea:	618b      	str	r3, [r1, #24]
		EIC_module->EIC_ASYNCH.reg |= (1UL << channel);
	} else {
		EIC_module->EIC_ASYNCH.reg &= (EIC_EIC_ASYNCH_MASK & (~(1UL << channel)));
	}
#endif
	_extint_enable();
     cec:	4b07      	ldr	r3, [pc, #28]	; (d0c <extint_chan_set_config+0x88>)
     cee:	4798      	blx	r3
}
     cf0:	b003      	add	sp, #12
     cf2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EIC_module->ASYNCH.reg |= (1UL << channel);
     cf4:	698a      	ldr	r2, [r1, #24]
     cf6:	2301      	movs	r3, #1
     cf8:	40ab      	lsls	r3, r5
     cfa:	4313      	orrs	r3, r2
     cfc:	618b      	str	r3, [r1, #24]
     cfe:	e7f5      	b.n	cec <extint_chan_set_config+0x68>
     d00:	00000bf1 	.word	0x00000bf1
     d04:	000033f9 	.word	0x000033f9
     d08:	40002400 	.word	0x40002400
     d0c:	00000bd1 	.word	0x00000bd1

00000d10 <nvm_set_config>:
 *                        EEPROM and/or auxiliary space configuration from being
 *                        altered
 */
enum status_code nvm_set_config(
		const struct nvm_config *const config)
{
     d10:	b510      	push	{r4, lr}
			MCLK->APBBMASK.reg |= mask;
     d12:	4a1e      	ldr	r2, [pc, #120]	; (d8c <nvm_set_config+0x7c>)
     d14:	6993      	ldr	r3, [r2, #24]
     d16:	2104      	movs	r1, #4
     d18:	430b      	orrs	r3, r1
     d1a:	6193      	str	r3, [r2, #24]
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBB, PM_APBBMASK_NVMCTRL);
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     d1c:	4b1c      	ldr	r3, [pc, #112]	; (d90 <nvm_set_config+0x80>)
     d1e:	2220      	movs	r2, #32
     d20:	32ff      	adds	r2, #255	; 0xff
     d22:	831a      	strh	r2, [r3, #24]
static inline bool nvm_is_ready(void)
{
	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	return nvm_module->INTFLAG.reg & NVMCTRL_INTFLAG_READY;
     d24:	7d1a      	ldrb	r2, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
		return STATUS_BUSY;
     d26:	2305      	movs	r3, #5
	if (!nvm_is_ready()) {
     d28:	07d2      	lsls	r2, r2, #31
     d2a:	d401      	bmi.n	d30 <nvm_set_config+0x20>
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
		return STATUS_ERR_IO;
	}

	return STATUS_OK;
}
     d2c:	0018      	movs	r0, r3
     d2e:	bd10      	pop	{r4, pc}
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     d30:	7803      	ldrb	r3, [r0, #0]
     d32:	021b      	lsls	r3, r3, #8
     d34:	22c0      	movs	r2, #192	; 0xc0
     d36:	0092      	lsls	r2, r2, #2
     d38:	4013      	ands	r3, r2
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     d3a:	7841      	ldrb	r1, [r0, #1]
     d3c:	01c9      	lsls	r1, r1, #7
     d3e:	22ff      	movs	r2, #255	; 0xff
     d40:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_SLEEPPRM(config->sleep_power_mode) |
     d42:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     d44:	7881      	ldrb	r1, [r0, #2]
     d46:	0049      	lsls	r1, r1, #1
     d48:	221e      	movs	r2, #30
     d4a:	400a      	ands	r2, r1
			((config->manual_page_write & 0x01) << NVMCTRL_CTRLB_MANW_Pos) |
     d4c:	4313      	orrs	r3, r2
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     d4e:	78c2      	ldrb	r2, [r0, #3]
     d50:	0492      	lsls	r2, r2, #18
     d52:	2180      	movs	r1, #128	; 0x80
     d54:	02c9      	lsls	r1, r1, #11
     d56:	400a      	ands	r2, r1
			NVMCTRL_CTRLB_RWS(config->wait_states) |
     d58:	4313      	orrs	r3, r2
			NVMCTRL_CTRLB_READMODE(config->cache_readmode);
     d5a:	7902      	ldrb	r2, [r0, #4]
     d5c:	0412      	lsls	r2, r2, #16
     d5e:	21c0      	movs	r1, #192	; 0xc0
     d60:	0289      	lsls	r1, r1, #10
     d62:	400a      	ands	r2, r1
			((config->disable_cache & 0x01) << NVMCTRL_CTRLB_CACHEDIS_Pos) |
     d64:	4313      	orrs	r3, r2
	nvm_module->CTRLB.reg =
     d66:	4a0a      	ldr	r2, [pc, #40]	; (d90 <nvm_set_config+0x80>)
     d68:	6053      	str	r3, [r2, #4]
	_nvm_dev.page_size         = (8 << nvm_module->PARAM.bit.PSZ);
     d6a:	6893      	ldr	r3, [r2, #8]
     d6c:	035b      	lsls	r3, r3, #13
     d6e:	0f5b      	lsrs	r3, r3, #29
     d70:	4908      	ldr	r1, [pc, #32]	; (d94 <nvm_set_config+0x84>)
     d72:	2408      	movs	r4, #8
     d74:	409c      	lsls	r4, r3
     d76:	800c      	strh	r4, [r1, #0]
	_nvm_dev.number_of_pages   = nvm_module->PARAM.bit.NVMP;
     d78:	6893      	ldr	r3, [r2, #8]
     d7a:	804b      	strh	r3, [r1, #2]
	_nvm_dev.manual_page_write = config->manual_page_write;
     d7c:	7843      	ldrb	r3, [r0, #1]
     d7e:	710b      	strb	r3, [r1, #4]
	if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     d80:	8b13      	ldrh	r3, [r2, #24]
     d82:	05db      	lsls	r3, r3, #23
	return STATUS_OK;
     d84:	0fdb      	lsrs	r3, r3, #31
     d86:	011b      	lsls	r3, r3, #4
     d88:	e7d0      	b.n	d2c <nvm_set_config+0x1c>
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	40000400 	.word	0x40000400
     d90:	41004000 	.word	0x41004000
     d94:	20000a3c 	.word	0x20000a3c

00000d98 <nvm_execute_command>:
 */
enum status_code nvm_execute_command(
		const enum nvm_command command,
		const uint32_t address,
		const uint32_t parameter)
{
     d98:	b530      	push	{r4, r5, lr}
     d9a:	0004      	movs	r4, r0
	uint32_t ctrlb_bak;

	/* Check that the address given is valid  */
	if (address > ((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)
     d9c:	4a25      	ldr	r2, [pc, #148]	; (e34 <nvm_execute_command+0x9c>)
     d9e:	8810      	ldrh	r0, [r2, #0]
     da0:	8853      	ldrh	r3, [r2, #2]
     da2:	4343      	muls	r3, r0
     da4:	428b      	cmp	r3, r1
     da6:	d20b      	bcs.n	dc0 <nvm_execute_command+0x28>
		&& !(address >= NVMCTRL_AUX0_ADDRESS && address <= NVMCTRL_AUX1_ADDRESS )){
     da8:	2280      	movs	r2, #128	; 0x80
     daa:	0192      	lsls	r2, r2, #6
     dac:	4b22      	ldr	r3, [pc, #136]	; (e38 <nvm_execute_command+0xa0>)
     dae:	18cb      	adds	r3, r1, r3
     db0:	4293      	cmp	r3, r2
     db2:	d905      	bls.n	dc0 <nvm_execute_command+0x28>
#ifdef FEATURE_NVM_RWWEE
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     db4:	4a21      	ldr	r2, [pc, #132]	; (e3c <nvm_execute_command+0xa4>)
			|| address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     db6:	2018      	movs	r0, #24
		if (address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     db8:	4b21      	ldr	r3, [pc, #132]	; (e40 <nvm_execute_command+0xa8>)
     dba:	18cb      	adds	r3, r1, r3
     dbc:	4293      	cmp	r3, r2
     dbe:	d80e      	bhi.n	dde <nvm_execute_command+0x46>

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Turn off cache before issuing flash commands */
	ctrlb_bak = nvm_module->CTRLB.reg;
     dc0:	4b20      	ldr	r3, [pc, #128]	; (e44 <nvm_execute_command+0xac>)
     dc2:	685d      	ldr	r5, [r3, #4]
#if (SAMC20) || (SAMC21)
	nvm_module->CTRLB.reg = ((ctrlb_bak &(~(NVMCTRL_CTRLB_CACHEDIS(0x2))))
							| NVMCTRL_CTRLB_CACHEDIS(0x1));
#else
	nvm_module->CTRLB.reg = ctrlb_bak | NVMCTRL_CTRLB_CACHEDIS;
     dc4:	2280      	movs	r2, #128	; 0x80
     dc6:	02d2      	lsls	r2, r2, #11
     dc8:	432a      	orrs	r2, r5
     dca:	605a      	str	r2, [r3, #4]
#endif

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     dcc:	2220      	movs	r2, #32
     dce:	32ff      	adds	r2, #255	; 0xff
     dd0:	831a      	strh	r2, [r3, #24]
     dd2:	7d1b      	ldrb	r3, [r3, #20]

	/* Check if the module is busy */
	if (!nvm_is_ready()) {
     dd4:	07db      	lsls	r3, r3, #31
     dd6:	d403      	bmi.n	de0 <nvm_execute_command+0x48>
		/* Restore the setting */
		nvm_module->CTRLB.reg = ctrlb_bak;
     dd8:	4b1a      	ldr	r3, [pc, #104]	; (e44 <nvm_execute_command+0xac>)
     dda:	605d      	str	r5, [r3, #4]
		return STATUS_BUSY;
     ddc:	2005      	movs	r0, #5

	/* Restore the setting */
	nvm_module->CTRLB.reg = ctrlb_bak;

	return STATUS_OK;
}
     dde:	bd30      	pop	{r4, r5, pc}
	switch (command) {
     de0:	2c45      	cmp	r4, #69	; 0x45
     de2:	d822      	bhi.n	e2a <nvm_execute_command+0x92>
     de4:	00a3      	lsls	r3, r4, #2
     de6:	4a18      	ldr	r2, [pc, #96]	; (e48 <nvm_execute_command+0xb0>)
     de8:	58d3      	ldr	r3, [r2, r3]
     dea:	469f      	mov	pc, r3
			if (nvm_module->STATUS.reg & NVMCTRL_STATUS_SB) {
     dec:	4b15      	ldr	r3, [pc, #84]	; (e44 <nvm_execute_command+0xac>)
     dee:	8b1b      	ldrh	r3, [r3, #24]
     df0:	05db      	lsls	r3, r3, #23
     df2:	d503      	bpl.n	dfc <nvm_execute_command+0x64>
				nvm_module->CTRLB.reg = ctrlb_bak;
     df4:	4b13      	ldr	r3, [pc, #76]	; (e44 <nvm_execute_command+0xac>)
     df6:	605d      	str	r5, [r3, #4]
				return STATUS_ERR_IO;
     df8:	2010      	movs	r0, #16
     dfa:	e7f0      	b.n	dde <nvm_execute_command+0x46>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     dfc:	0889      	lsrs	r1, r1, #2
     dfe:	0049      	lsls	r1, r1, #1
     e00:	4b10      	ldr	r3, [pc, #64]	; (e44 <nvm_execute_command+0xac>)
     e02:	61d9      	str	r1, [r3, #28]
			break;
     e04:	e003      	b.n	e0e <nvm_execute_command+0x76>
			nvm_module->ADDR.reg = (uintptr_t)&NVM_MEMORY[address / 4];
     e06:	0889      	lsrs	r1, r1, #2
     e08:	0049      	lsls	r1, r1, #1
     e0a:	4b0e      	ldr	r3, [pc, #56]	; (e44 <nvm_execute_command+0xac>)
     e0c:	61d9      	str	r1, [r3, #28]
	nvm_module->CTRLA.reg = command | NVMCTRL_CTRLA_CMDEX_KEY;
     e0e:	20a5      	movs	r0, #165	; 0xa5
     e10:	0200      	lsls	r0, r0, #8
     e12:	4304      	orrs	r4, r0
     e14:	4b0b      	ldr	r3, [pc, #44]	; (e44 <nvm_execute_command+0xac>)
     e16:	801c      	strh	r4, [r3, #0]
     e18:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     e1a:	2201      	movs	r2, #1
     e1c:	7d0b      	ldrb	r3, [r1, #20]
     e1e:	4213      	tst	r3, r2
     e20:	d0fc      	beq.n	e1c <nvm_execute_command+0x84>
	nvm_module->CTRLB.reg = ctrlb_bak;
     e22:	4b08      	ldr	r3, [pc, #32]	; (e44 <nvm_execute_command+0xac>)
     e24:	605d      	str	r5, [r3, #4]
	return STATUS_OK;
     e26:	2000      	movs	r0, #0
     e28:	e7d9      	b.n	dde <nvm_execute_command+0x46>
			nvm_module->CTRLB.reg = ctrlb_bak;
     e2a:	4b06      	ldr	r3, [pc, #24]	; (e44 <nvm_execute_command+0xac>)
     e2c:	605d      	str	r5, [r3, #4]
			return STATUS_ERR_INVALID_ARG;
     e2e:	2017      	movs	r0, #23
     e30:	e7d5      	b.n	dde <nvm_execute_command+0x46>
     e32:	46c0      	nop			; (mov r8, r8)
     e34:	20000a3c 	.word	0x20000a3c
     e38:	ff7fc000 	.word	0xff7fc000
     e3c:	00001fff 	.word	0x00001fff
     e40:	ffc00000 	.word	0xffc00000
     e44:	41004000 	.word	0x41004000
     e48:	0001c6f0 	.word	0x0001c6f0

00000e4c <nvm_write_buffer>:
 */
enum status_code nvm_write_buffer(
		const uint32_t destination_address,
		const uint8_t *buffer,
		uint16_t length)
{
     e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	bool is_rww_eeprom = false;
#endif

	/* Check if the destination address is valid */
	if (destination_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     e4e:	4b2f      	ldr	r3, [pc, #188]	; (f0c <nvm_write_buffer+0xc0>)
     e50:	881c      	ldrh	r4, [r3, #0]
     e52:	885b      	ldrh	r3, [r3, #2]
     e54:	4363      	muls	r3, r4
	if (destination_address >
     e56:	4283      	cmp	r3, r0
     e58:	d207      	bcs.n	e6a <nvm_write_buffer+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     e5a:	4e2d      	ldr	r6, [pc, #180]	; (f10 <nvm_write_buffer+0xc4>)
			|| destination_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     e5c:	2518      	movs	r5, #24
		if (destination_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     e5e:	4b2d      	ldr	r3, [pc, #180]	; (f14 <nvm_write_buffer+0xc8>)
     e60:	18c3      	adds	r3, r0, r3
     e62:	42b3      	cmp	r3, r6
     e64:	d806      	bhi.n	e74 <nvm_write_buffer+0x28>
		}
		is_rww_eeprom = true;
     e66:	2601      	movs	r6, #1
     e68:	e000      	b.n	e6c <nvm_write_buffer+0x20>
	bool is_rww_eeprom = false;
     e6a:	2600      	movs	r6, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the write address not aligned to the start of a page */
	if (destination_address & (_nvm_dev.page_size - 1)) {
     e6c:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     e6e:	2518      	movs	r5, #24
	if (destination_address & (_nvm_dev.page_size - 1)) {
     e70:	4218      	tst	r0, r3
     e72:	d001      	beq.n	e78 <nvm_write_buffer+0x2c>
				destination_address, 0);
#endif
	}

	return STATUS_OK;
}
     e74:	0028      	movs	r0, r5
     e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
     e78:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     e7a:	4294      	cmp	r4, r2
     e7c:	d3fa      	bcc.n	e74 <nvm_write_buffer+0x28>
     e7e:	4b26      	ldr	r3, [pc, #152]	; (f18 <nvm_write_buffer+0xcc>)
     e80:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     e82:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     e84:	07db      	lsls	r3, r3, #31
     e86:	d5f5      	bpl.n	e74 <nvm_write_buffer+0x28>
	nvm_module->CTRLA.reg = NVM_COMMAND_PAGE_BUFFER_CLEAR | NVMCTRL_CTRLA_CMDEX_KEY;
     e88:	4c24      	ldr	r4, [pc, #144]	; (f1c <nvm_write_buffer+0xd0>)
     e8a:	4b23      	ldr	r3, [pc, #140]	; (f18 <nvm_write_buffer+0xcc>)
     e8c:	801c      	strh	r4, [r3, #0]
     e8e:	001d      	movs	r5, r3
	while (!nvm_is_ready()) {
     e90:	2401      	movs	r4, #1
     e92:	7d2b      	ldrb	r3, [r5, #20]
     e94:	4223      	tst	r3, r4
     e96:	d0fc      	beq.n	e92 <nvm_write_buffer+0x46>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     e98:	2420      	movs	r4, #32
     e9a:	34ff      	adds	r4, #255	; 0xff
     e9c:	4b1e      	ldr	r3, [pc, #120]	; (f18 <nvm_write_buffer+0xcc>)
     e9e:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     ea0:	2a00      	cmp	r2, #0
     ea2:	d02c      	beq.n	efe <nvm_write_buffer+0xb2>
     ea4:	2301      	movs	r3, #1
     ea6:	0005      	movs	r5, r0
     ea8:	439d      	bics	r5, r3
     eaa:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     eac:	1e54      	subs	r4, r2, #1
     eae:	46a4      	mov	ip, r4
     eb0:	e009      	b.n	ec6 <nvm_write_buffer+0x7a>
			data |= (buffer[i + 1] << 8);
     eb2:	18cf      	adds	r7, r1, r3
     eb4:	787f      	ldrb	r7, [r7, #1]
     eb6:	023f      	lsls	r7, r7, #8
     eb8:	433c      	orrs	r4, r7
		NVM_MEMORY[nvm_address++] = data;
     eba:	802c      	strh	r4, [r5, #0]
	for (uint16_t i = 0; i < length; i += 2) {
     ebc:	3302      	adds	r3, #2
     ebe:	b29b      	uxth	r3, r3
     ec0:	3502      	adds	r5, #2
     ec2:	429a      	cmp	r2, r3
     ec4:	d904      	bls.n	ed0 <nvm_write_buffer+0x84>
		data = buffer[i];
     ec6:	5ccc      	ldrb	r4, [r1, r3]
		if (i < (length - 1)) {
     ec8:	4563      	cmp	r3, ip
     eca:	dbf2      	blt.n	eb2 <nvm_write_buffer+0x66>
		data = buffer[i];
     ecc:	b2a4      	uxth	r4, r4
     ece:	e7f4      	b.n	eba <nvm_write_buffer+0x6e>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     ed0:	4b0e      	ldr	r3, [pc, #56]	; (f0c <nvm_write_buffer+0xc0>)
     ed2:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     ed4:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     ed6:	2b00      	cmp	r3, #0
     ed8:	d1cc      	bne.n	e74 <nvm_write_buffer+0x28>
     eda:	2a3f      	cmp	r2, #63	; 0x3f
     edc:	d8ca      	bhi.n	e74 <nvm_write_buffer+0x28>
				(nvm_execute_command(NVM_COMMAND_RWWEE_WRITE_PAGE,destination_address, 0)):
     ede:	2e00      	cmp	r6, #0
     ee0:	d106      	bne.n	ef0 <nvm_write_buffer+0xa4>
     ee2:	2200      	movs	r2, #0
     ee4:	0001      	movs	r1, r0
     ee6:	2004      	movs	r0, #4
     ee8:	4b0d      	ldr	r3, [pc, #52]	; (f20 <nvm_write_buffer+0xd4>)
     eea:	4798      	blx	r3
     eec:	0005      	movs	r5, r0
     eee:	e7c1      	b.n	e74 <nvm_write_buffer+0x28>
     ef0:	2200      	movs	r2, #0
     ef2:	0001      	movs	r1, r0
     ef4:	201c      	movs	r0, #28
     ef6:	4b0a      	ldr	r3, [pc, #40]	; (f20 <nvm_write_buffer+0xd4>)
     ef8:	4798      	blx	r3
     efa:	0005      	movs	r5, r0
     efc:	e7ba      	b.n	e74 <nvm_write_buffer+0x28>
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     efe:	4b03      	ldr	r3, [pc, #12]	; (f0c <nvm_write_buffer+0xc0>)
     f00:	791b      	ldrb	r3, [r3, #4]
	return STATUS_OK;
     f02:	2500      	movs	r5, #0
	if ((_nvm_dev.manual_page_write == false) && (length < NVMCTRL_PAGE_SIZE)) {
     f04:	2b00      	cmp	r3, #0
     f06:	d0ea      	beq.n	ede <nvm_write_buffer+0x92>
     f08:	e7b4      	b.n	e74 <nvm_write_buffer+0x28>
     f0a:	46c0      	nop			; (mov r8, r8)
     f0c:	20000a3c 	.word	0x20000a3c
     f10:	00001fff 	.word	0x00001fff
     f14:	ffc00000 	.word	0xffc00000
     f18:	41004000 	.word	0x41004000
     f1c:	ffffa544 	.word	0xffffa544
     f20:	00000d99 	.word	0x00000d99

00000f24 <nvm_read_buffer>:
 */
enum status_code nvm_read_buffer(
		const uint32_t source_address,
		uint8_t *const buffer,
		uint16_t length)
{
     f24:	b570      	push	{r4, r5, r6, lr}
	/* Check if the source address is valid */
	if (source_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     f26:	4b1b      	ldr	r3, [pc, #108]	; (f94 <nvm_read_buffer+0x70>)
     f28:	881c      	ldrh	r4, [r3, #0]
     f2a:	885b      	ldrh	r3, [r3, #2]
     f2c:	4363      	muls	r3, r4
	if (source_address >
     f2e:	4283      	cmp	r3, r0
     f30:	d205      	bcs.n	f3e <nvm_read_buffer+0x1a>
#ifdef FEATURE_NVM_RWWEE
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     f32:	4e19      	ldr	r6, [pc, #100]	; (f98 <nvm_read_buffer+0x74>)
			|| source_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     f34:	2518      	movs	r5, #24
		if (source_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     f36:	4b19      	ldr	r3, [pc, #100]	; (f9c <nvm_read_buffer+0x78>)
     f38:	18c3      	adds	r3, r0, r3
     f3a:	42b3      	cmp	r3, r6
     f3c:	d803      	bhi.n	f46 <nvm_read_buffer+0x22>
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the read address is not aligned to the start of a page */
	if (source_address & (_nvm_dev.page_size - 1)) {
     f3e:	1e63      	subs	r3, r4, #1
		return STATUS_ERR_BAD_ADDRESS;
     f40:	2518      	movs	r5, #24
	if (source_address & (_nvm_dev.page_size - 1)) {
     f42:	4218      	tst	r0, r3
     f44:	d001      	beq.n	f4a <nvm_read_buffer+0x26>
			buffer[i + 1] = (data >> 8);
		}
	}

	return STATUS_OK;
}
     f46:	0028      	movs	r0, r5
     f48:	bd70      	pop	{r4, r5, r6, pc}
		return STATUS_ERR_INVALID_ARG;
     f4a:	3d01      	subs	r5, #1
	if (length > _nvm_dev.page_size) {
     f4c:	4294      	cmp	r4, r2
     f4e:	d3fa      	bcc.n	f46 <nvm_read_buffer+0x22>
     f50:	4b13      	ldr	r3, [pc, #76]	; (fa0 <nvm_read_buffer+0x7c>)
     f52:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     f54:	3d12      	subs	r5, #18
	if (!nvm_is_ready()) {
     f56:	07db      	lsls	r3, r3, #31
     f58:	d5f5      	bpl.n	f46 <nvm_read_buffer+0x22>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     f5a:	2420      	movs	r4, #32
     f5c:	34ff      	adds	r4, #255	; 0xff
     f5e:	4b10      	ldr	r3, [pc, #64]	; (fa0 <nvm_read_buffer+0x7c>)
     f60:	831c      	strh	r4, [r3, #24]
	for (uint16_t i = 0; i < length; i += 2) {
     f62:	2a00      	cmp	r2, #0
     f64:	d014      	beq.n	f90 <nvm_read_buffer+0x6c>
     f66:	2301      	movs	r3, #1
     f68:	4398      	bics	r0, r3
     f6a:	2300      	movs	r3, #0
		if (i < (length - 1)) {
     f6c:	1e56      	subs	r6, r2, #1
     f6e:	e004      	b.n	f7a <nvm_read_buffer+0x56>
	for (uint16_t i = 0; i < length; i += 2) {
     f70:	3302      	adds	r3, #2
     f72:	b29b      	uxth	r3, r3
     f74:	3002      	adds	r0, #2
     f76:	429a      	cmp	r2, r3
     f78:	d908      	bls.n	f8c <nvm_read_buffer+0x68>
		uint16_t data = NVM_MEMORY[page_address++];
     f7a:	8804      	ldrh	r4, [r0, #0]
     f7c:	b2a4      	uxth	r4, r4
		buffer[i] = (data & 0xFF);
     f7e:	54cc      	strb	r4, [r1, r3]
		if (i < (length - 1)) {
     f80:	42b3      	cmp	r3, r6
     f82:	daf5      	bge.n	f70 <nvm_read_buffer+0x4c>
			buffer[i + 1] = (data >> 8);
     f84:	18cd      	adds	r5, r1, r3
     f86:	0a24      	lsrs	r4, r4, #8
     f88:	706c      	strb	r4, [r5, #1]
     f8a:	e7f1      	b.n	f70 <nvm_read_buffer+0x4c>
	return STATUS_OK;
     f8c:	2500      	movs	r5, #0
     f8e:	e7da      	b.n	f46 <nvm_read_buffer+0x22>
     f90:	2500      	movs	r5, #0
     f92:	e7d8      	b.n	f46 <nvm_read_buffer+0x22>
     f94:	20000a3c 	.word	0x20000a3c
     f98:	00001fff 	.word	0x00001fff
     f9c:	ffc00000 	.word	0xffc00000
     fa0:	41004000 	.word	0x41004000

00000fa4 <nvm_erase_row>:
 *                                 not aligned to the start of a row
 * \retval STATUS_ABORTED          NVM erased error
 */
enum status_code nvm_erase_row(
		const uint32_t row_address)
{
     fa4:	b510      	push	{r4, lr}
		bool is_rww_eeprom = false;
#endif

	/* Check if the row address is valid */
	if (row_address >
			((uint32_t)_nvm_dev.page_size * _nvm_dev.number_of_pages)) {
     fa6:	4a1b      	ldr	r2, [pc, #108]	; (1014 <nvm_erase_row+0x70>)
     fa8:	8813      	ldrh	r3, [r2, #0]
     faa:	8852      	ldrh	r2, [r2, #2]
     fac:	435a      	muls	r2, r3
	if (row_address >
     fae:	4282      	cmp	r2, r0
     fb0:	d207      	bcs.n	fc2 <nvm_erase_row+0x1e>
#ifdef FEATURE_NVM_RWWEE
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     fb2:	4c19      	ldr	r4, [pc, #100]	; (1018 <nvm_erase_row+0x74>)
			|| row_address < NVMCTRL_RWW_EEPROM_ADDR){
			return STATUS_ERR_BAD_ADDRESS;
     fb4:	2218      	movs	r2, #24
		if (row_address >= ((uint32_t)NVMCTRL_RWW_EEPROM_SIZE + NVMCTRL_RWW_EEPROM_ADDR)
     fb6:	4919      	ldr	r1, [pc, #100]	; (101c <nvm_erase_row+0x78>)
     fb8:	1841      	adds	r1, r0, r1
     fba:	42a1      	cmp	r1, r4
     fbc:	d807      	bhi.n	fce <nvm_erase_row+0x2a>
		}
		is_rww_eeprom = true;
     fbe:	2101      	movs	r1, #1
     fc0:	e000      	b.n	fc4 <nvm_erase_row+0x20>
		bool is_rww_eeprom = false;
     fc2:	2100      	movs	r1, #0
		return STATUS_ERR_BAD_ADDRESS;
#endif
	}

	/* Check if the address to erase is not aligned to the start of a row */
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     fc4:	009b      	lsls	r3, r3, #2
     fc6:	3b01      	subs	r3, #1
		return STATUS_ERR_BAD_ADDRESS;
     fc8:	2218      	movs	r2, #24
	if (row_address & ((_nvm_dev.page_size * NVMCTRL_ROW_PAGES) - 1)) {
     fca:	4218      	tst	r0, r3
     fcc:	d001      	beq.n	fd2 <nvm_erase_row+0x2e>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
		return STATUS_ABORTED;
	}

	return STATUS_OK;
}
     fce:	0010      	movs	r0, r2
     fd0:	bd10      	pop	{r4, pc}
     fd2:	4b13      	ldr	r3, [pc, #76]	; (1020 <nvm_erase_row+0x7c>)
     fd4:	7d1b      	ldrb	r3, [r3, #20]
		return STATUS_BUSY;
     fd6:	3a13      	subs	r2, #19
	if (!nvm_is_ready()) {
     fd8:	07db      	lsls	r3, r3, #31
     fda:	d5f8      	bpl.n	fce <nvm_erase_row+0x2a>
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
     fdc:	4b10      	ldr	r3, [pc, #64]	; (1020 <nvm_erase_row+0x7c>)
     fde:	2220      	movs	r2, #32
     fe0:	32ff      	adds	r2, #255	; 0xff
     fe2:	831a      	strh	r2, [r3, #24]
	nvm_module->ADDR.reg  = (uintptr_t)&NVM_MEMORY[row_address / 4];
     fe4:	0880      	lsrs	r0, r0, #2
     fe6:	0040      	lsls	r0, r0, #1
     fe8:	61d8      	str	r0, [r3, #28]
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
     fea:	2900      	cmp	r1, #0
     fec:	d10f      	bne.n	100e <nvm_erase_row+0x6a>
     fee:	4a0d      	ldr	r2, [pc, #52]	; (1024 <nvm_erase_row+0x80>)
     ff0:	4b0b      	ldr	r3, [pc, #44]	; (1020 <nvm_erase_row+0x7c>)
     ff2:	801a      	strh	r2, [r3, #0]
     ff4:	0019      	movs	r1, r3
	while (!nvm_is_ready()) {
     ff6:	2201      	movs	r2, #1
     ff8:	7d0b      	ldrb	r3, [r1, #20]
     ffa:	4213      	tst	r3, r2
     ffc:	d0fc      	beq.n	ff8 <nvm_erase_row+0x54>
	if ((enum nvm_error)(nvm_module->STATUS.reg & NVM_ERRORS_MASK) != NVM_ERROR_NONE) {
     ffe:	4b08      	ldr	r3, [pc, #32]	; (1020 <nvm_erase_row+0x7c>)
    1000:	8b1a      	ldrh	r2, [r3, #24]
    1002:	201c      	movs	r0, #28
    1004:	4002      	ands	r2, r0
	return STATUS_OK;
    1006:	1e50      	subs	r0, r2, #1
    1008:	4182      	sbcs	r2, r0
    100a:	0092      	lsls	r2, r2, #2
    100c:	e7df      	b.n	fce <nvm_erase_row+0x2a>
	nvm_module->CTRLA.reg = ((is_rww_eeprom) ?
    100e:	4a06      	ldr	r2, [pc, #24]	; (1028 <nvm_erase_row+0x84>)
    1010:	e7ee      	b.n	ff0 <nvm_erase_row+0x4c>
    1012:	46c0      	nop			; (mov r8, r8)
    1014:	20000a3c 	.word	0x20000a3c
    1018:	00001fff 	.word	0x00001fff
    101c:	ffc00000 	.word	0xffc00000
    1020:	41004000 	.word	0x41004000
    1024:	0000a502 	.word	0x0000a502
    1028:	0000a51a 	.word	0x0000a51a

0000102c <nvm_get_parameters>:

	/* Get a pointer to the module hardware instance */
	Nvmctrl *const nvm_module = NVMCTRL;

	/* Clear error flags */
	nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    102c:	4b15      	ldr	r3, [pc, #84]	; (1084 <nvm_get_parameters+0x58>)
    102e:	2220      	movs	r2, #32
    1030:	32ff      	adds	r2, #255	; 0xff
    1032:	831a      	strh	r2, [r3, #24]

	/* Read out from the PARAM register */
	uint32_t param_reg = nvm_module->PARAM.reg;
    1034:	689b      	ldr	r3, [r3, #8]

	/* Mask out page size exponent and convert to a number of bytes */
	parameters->page_size =
			8 << ((param_reg & NVMCTRL_PARAM_PSZ_Msk) >> NVMCTRL_PARAM_PSZ_Pos);
    1036:	0359      	lsls	r1, r3, #13
    1038:	0f49      	lsrs	r1, r1, #29
    103a:	3a18      	subs	r2, #24
    103c:	3aff      	subs	r2, #255	; 0xff
    103e:	408a      	lsls	r2, r1
	parameters->page_size =
    1040:	7002      	strb	r2, [r0, #0]

	/* Mask out number of pages count */
	parameters->nvm_number_of_pages =
    1042:	8043      	strh	r3, [r0, #2]
			(param_reg & NVMCTRL_PARAM_NVMP_Msk) >> NVMCTRL_PARAM_NVMP_Pos;

#ifdef FEATURE_NVM_RWWEE
	/* Mask out rwwee number of pages count */
	parameters->rww_eeprom_number_of_pages =
			(param_reg & NVMCTRL_PARAM_RWWEEP_Msk) >> NVMCTRL_PARAM_RWWEEP_Pos;
    1044:	0d1b      	lsrs	r3, r3, #20
	parameters->rww_eeprom_number_of_pages =
    1046:	8183      	strh	r3, [r0, #12]
#endif

	/* Read the current EEPROM fuse value from the USER row */
	uint16_t eeprom_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_EEPROM_SIZE_Pos / 16] &
    1048:	4b0f      	ldr	r3, [pc, #60]	; (1088 <nvm_get_parameters+0x5c>)
    104a:	881b      	ldrh	r3, [r3, #0]
	uint16_t eeprom_fuse_value =
    104c:	065b      	lsls	r3, r3, #25
    104e:	0f5b      	lsrs	r3, r3, #29
			NVMCTRL_FUSES_EEPROM_SIZE_Msk) >> NVMCTRL_FUSES_EEPROM_SIZE_Pos;

	/* Translate the EEPROM fuse byte value to a number of NVM pages */
	if (eeprom_fuse_value == 7) {
    1050:	2b07      	cmp	r3, #7
    1052:	d010      	beq.n	1076 <nvm_get_parameters+0x4a>
		parameters->eeprom_number_of_pages = 0;
	}
	else {
		parameters->eeprom_number_of_pages =
				NVMCTRL_ROW_PAGES << (6 - eeprom_fuse_value);
    1054:	2206      	movs	r2, #6
    1056:	1ad2      	subs	r2, r2, r3
    1058:	2304      	movs	r3, #4
    105a:	4093      	lsls	r3, r2
		parameters->eeprom_number_of_pages =
    105c:	6043      	str	r3, [r0, #4]
	}

	/* Read the current BOOTSZ fuse value from the USER row */
	uint16_t boot_fuse_value =
			(NVM_USER_MEMORY[NVMCTRL_FUSES_BOOTPROT_Pos / 16] &
    105e:	4b0a      	ldr	r3, [pc, #40]	; (1088 <nvm_get_parameters+0x5c>)
    1060:	881b      	ldrh	r3, [r3, #0]
	uint16_t boot_fuse_value =
    1062:	2207      	movs	r2, #7
    1064:	4013      	ands	r3, r2
			NVMCTRL_FUSES_BOOTPROT_Msk) >> NVMCTRL_FUSES_BOOTPROT_Pos;

	/* Translate the BOOTSZ fuse byte value to a number of NVM pages */
	if (boot_fuse_value == 7) {
    1066:	2b07      	cmp	r3, #7
    1068:	d008      	beq.n	107c <nvm_get_parameters+0x50>
		parameters->bootloader_number_of_pages = 0;
	}
	else {
		parameters->bootloader_number_of_pages =
				NVMCTRL_ROW_PAGES << (7 - boot_fuse_value);
    106a:	2207      	movs	r2, #7
    106c:	1ad2      	subs	r2, r2, r3
    106e:	2304      	movs	r3, #4
    1070:	4093      	lsls	r3, r2
		parameters->bootloader_number_of_pages =
    1072:	6083      	str	r3, [r0, #8]
	}
}
    1074:	4770      	bx	lr
		parameters->eeprom_number_of_pages = 0;
    1076:	2300      	movs	r3, #0
    1078:	6043      	str	r3, [r0, #4]
    107a:	e7f0      	b.n	105e <nvm_get_parameters+0x32>
		parameters->bootloader_number_of_pages = 0;
    107c:	2300      	movs	r3, #0
    107e:	6083      	str	r3, [r0, #8]
    1080:	e7f8      	b.n	1074 <nvm_get_parameters+0x48>
    1082:	46c0      	nop			; (mov r8, r8)
    1084:	41004000 	.word	0x41004000
    1088:	00804000 	.word	0x00804000

0000108c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    108c:	b500      	push	{lr}
    108e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1090:	ab01      	add	r3, sp, #4
    1092:	2280      	movs	r2, #128	; 0x80
    1094:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    1096:	780a      	ldrb	r2, [r1, #0]
    1098:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    109a:	784a      	ldrb	r2, [r1, #1]
    109c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    109e:	788a      	ldrb	r2, [r1, #2]
    10a0:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    10a2:	0019      	movs	r1, r3
    10a4:	4b01      	ldr	r3, [pc, #4]	; (10ac <port_pin_set_config+0x20>)
    10a6:	4798      	blx	r3
}
    10a8:	b003      	add	sp, #12
    10aa:	bd00      	pop	{pc}
    10ac:	000033f9 	.word	0x000033f9

000010b0 <rtc_count_is_syncing>:
{
 	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10b0:	6803      	ldr	r3, [r0, #0]

	if (rtc_module->MODE0.SYNCBUSY.reg) {
    10b2:	6918      	ldr	r0, [r3, #16]
    10b4:	1e43      	subs	r3, r0, #1
    10b6:	4198      	sbcs	r0, r3
    10b8:	b2c0      	uxtb	r0, r0
		return true;
	}

	return false;
}
    10ba:	4770      	bx	lr

000010bc <rtc_count_enable>:
 * module configuration parameters cannot be altered while the module is enabled.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_enable(struct rtc_module *const module)
{
    10bc:	b570      	push	{r4, r5, r6, lr}
    10be:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10c0:	6806      	ldr	r6, [r0, #0]
    10c2:	2204      	movs	r2, #4
    10c4:	4b08      	ldr	r3, [pc, #32]	; (10e8 <rtc_count_enable+0x2c>)
    10c6:	601a      	str	r2, [r3, #0]

#if RTC_COUNT_ASYNC == true
	system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    10c8:	4d08      	ldr	r5, [pc, #32]	; (10ec <rtc_count_enable+0x30>)
    10ca:	0020      	movs	r0, r4
    10cc:	47a8      	blx	r5
    10ce:	2800      	cmp	r0, #0
    10d0:	d1fb      	bne.n	10ca <rtc_count_enable+0xe>
		/* Wait for synchronization */
	}

	/* Enable RTC module. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_ENABLE;
    10d2:	8833      	ldrh	r3, [r6, #0]
    10d4:	2202      	movs	r2, #2
    10d6:	4313      	orrs	r3, r2
    10d8:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    10da:	4d04      	ldr	r5, [pc, #16]	; (10ec <rtc_count_enable+0x30>)
    10dc:	0020      	movs	r0, r4
    10de:	47a8      	blx	r5
    10e0:	2800      	cmp	r0, #0
    10e2:	d1fb      	bne.n	10dc <rtc_count_enable+0x20>
		/* Wait for synchronization */
	}
}
    10e4:	bd70      	pop	{r4, r5, r6, pc}
    10e6:	46c0      	nop			; (mov r8, r8)
    10e8:	e000e100 	.word	0xe000e100
    10ec:	000010b1 	.word	0x000010b1

000010f0 <rtc_count_disable>:
 * Disables the RTC module.
 *
 * \param[in,out]  module  RTC hardware module
 */
void rtc_count_disable(struct rtc_module *const module)
{
    10f0:	b570      	push	{r4, r5, r6, lr}
    10f2:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    10f4:	6806      	ldr	r6, [r0, #0]
 * \param[in] vector  Interrupt vector to disable
 */
static inline void system_interrupt_disable(
		const enum system_interrupt_vector vector)
{
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    10f6:	2104      	movs	r1, #4
    10f8:	2380      	movs	r3, #128	; 0x80
    10fa:	4a0a      	ldr	r2, [pc, #40]	; (1124 <rtc_count_disable+0x34>)
    10fc:	50d1      	str	r1, [r2, r3]

#if RTC_COUNT_ASYNC == true
	system_interrupt_disable(SYSTEM_INTERRUPT_MODULE_RTC);
#endif

	while (rtc_count_is_syncing(module)) {
    10fe:	4d0a      	ldr	r5, [pc, #40]	; (1128 <rtc_count_disable+0x38>)
    1100:	0020      	movs	r0, r4
    1102:	47a8      	blx	r5
    1104:	2800      	cmp	r0, #0
    1106:	d1fb      	bne.n	1100 <rtc_count_disable+0x10>
		/* Wait for synchronization */
	}

	/* Disbale interrupt */
	rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTENCLR_MASK;
    1108:	4b08      	ldr	r3, [pc, #32]	; (112c <rtc_count_disable+0x3c>)
    110a:	8133      	strh	r3, [r6, #8]
	/* Clear interrupt flag */
	rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_MASK;
    110c:	81b3      	strh	r3, [r6, #12]

	/* Disable RTC module. */
	rtc_module->MODE0.CTRLA.reg &= ~RTC_MODE0_CTRLA_ENABLE;
    110e:	8833      	ldrh	r3, [r6, #0]
    1110:	2202      	movs	r2, #2
    1112:	4393      	bics	r3, r2
    1114:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    1116:	4d04      	ldr	r5, [pc, #16]	; (1128 <rtc_count_disable+0x38>)
    1118:	0020      	movs	r0, r4
    111a:	47a8      	blx	r5
    111c:	2800      	cmp	r0, #0
    111e:	d1fb      	bne.n	1118 <rtc_count_disable+0x28>
		/* Wait for synchronization */
	}
}
    1120:	bd70      	pop	{r4, r5, r6, pc}
    1122:	46c0      	nop			; (mov r8, r8)
    1124:	e000e100 	.word	0xe000e100
    1128:	000010b1 	.word	0x000010b1
    112c:	ffff81ff 	.word	0xffff81ff

00001130 <rtc_count_reset>:
 * Resets the RTC to hardware defaults.
 *
 * \param[in,out]  module  Pointer to the software instance struct
 */
void rtc_count_reset(struct rtc_module *const module)
{
    1130:	b570      	push	{r4, r5, r6, lr}
    1132:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1134:	6806      	ldr	r6, [r0, #0]

	/* Disable module before reset. */
	rtc_count_disable(module);
    1136:	4b0a      	ldr	r3, [pc, #40]	; (1160 <rtc_count_reset+0x30>)
    1138:	4798      	blx	r3

#if RTC_COUNT_ASYNC == true
	module->registered_callback = 0;
    113a:	2300      	movs	r3, #0
    113c:	86a3      	strh	r3, [r4, #52]	; 0x34
	module->enabled_callback    = 0;
    113e:	86e3      	strh	r3, [r4, #54]	; 0x36
#endif

	while (rtc_count_is_syncing(module)) {
    1140:	4d08      	ldr	r5, [pc, #32]	; (1164 <rtc_count_reset+0x34>)
    1142:	0020      	movs	r0, r4
    1144:	47a8      	blx	r5
    1146:	2800      	cmp	r0, #0
    1148:	d1fb      	bne.n	1142 <rtc_count_reset+0x12>
		/* Wait for synchronization */
	}

	/* Initiate software reset. */
	rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_SWRST;
    114a:	8833      	ldrh	r3, [r6, #0]
    114c:	2201      	movs	r2, #1
    114e:	4313      	orrs	r3, r2
    1150:	8033      	strh	r3, [r6, #0]

	while (rtc_count_is_syncing(module)) {
    1152:	4d04      	ldr	r5, [pc, #16]	; (1164 <rtc_count_reset+0x34>)
    1154:	0020      	movs	r0, r4
    1156:	47a8      	blx	r5
    1158:	2800      	cmp	r0, #0
    115a:	d1fb      	bne.n	1154 <rtc_count_reset+0x24>
		/* Wait for synchronization */
	}
}
    115c:	bd70      	pop	{r4, r5, r6, pc}
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	000010f1 	.word	0x000010f1
    1164:	000010b1 	.word	0x000010b1

00001168 <rtc_count_set_count>:
 * \retval STATUS_ERR_INVALID_ARG  If invalid argument(s) were provided
 */
enum status_code rtc_count_set_count(
		struct rtc_module *const module,
		const uint32_t count_value)
{
    1168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    116a:	0004      	movs	r4, r0
    116c:	000e      	movs	r6, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    116e:	6807      	ldr	r7, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    1170:	4d0c      	ldr	r5, [pc, #48]	; (11a4 <rtc_count_set_count+0x3c>)
    1172:	0020      	movs	r0, r4
    1174:	47a8      	blx	r5
    1176:	2800      	cmp	r0, #0
    1178:	d1fb      	bne.n	1172 <rtc_count_set_count+0xa>
		/* Wait for synchronization */
	}

	/* Set count according to mode */
	switch(module->mode){
    117a:	7923      	ldrb	r3, [r4, #4]
    117c:	2b00      	cmp	r3, #0
    117e:	d009      	beq.n	1194 <rtc_count_set_count+0x2c>

			break;

		default:
			Assert(false);
			return STATUS_ERR_INVALID_ARG;
    1180:	2017      	movs	r0, #23
	switch(module->mode){
    1182:	2b01      	cmp	r3, #1
    1184:	d105      	bne.n	1192 <rtc_count_set_count+0x2a>
			rtc_module->MODE0.COUNT.reg = count_value;
    1186:	61be      	str	r6, [r7, #24]
	}

	while (rtc_count_is_syncing(module)) {
    1188:	4d06      	ldr	r5, [pc, #24]	; (11a4 <rtc_count_set_count+0x3c>)
    118a:	0020      	movs	r0, r4
    118c:	47a8      	blx	r5
    118e:	2800      	cmp	r0, #0
    1190:	d1fb      	bne.n	118a <rtc_count_set_count+0x22>
		/* Wait for synchronization */
	}
	return STATUS_OK;
}
    1192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if(count_value > 0xffff){
    1194:	4b04      	ldr	r3, [pc, #16]	; (11a8 <rtc_count_set_count+0x40>)
				return STATUS_ERR_INVALID_ARG;
    1196:	2017      	movs	r0, #23
			if(count_value > 0xffff){
    1198:	429e      	cmp	r6, r3
    119a:	d8fa      	bhi.n	1192 <rtc_count_set_count+0x2a>
			rtc_module->MODE1.COUNT.reg = (uint32_t)count_value;
    119c:	b2b6      	uxth	r6, r6
    119e:	833e      	strh	r6, [r7, #24]
			break;
    11a0:	e7f2      	b.n	1188 <rtc_count_set_count+0x20>
    11a2:	46c0      	nop			; (mov r8, r8)
    11a4:	000010b1 	.word	0x000010b1
    11a8:	0000ffff 	.word	0x0000ffff

000011ac <rtc_count_get_count>:
 * Returns the current count value.
 *
 * \return The current counter value as a 32-bit unsigned integer.
 */
uint32_t rtc_count_get_count(struct rtc_module *const module)
{
    11ac:	b570      	push	{r4, r5, r6, lr}
    11ae:	0004      	movs	r4, r0
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11b0:	6806      	ldr	r6, [r0, #0]

	/* Initialize return value. */
	uint32_t ret_val;

	while (rtc_count_is_syncing(module)) {
    11b2:	4d08      	ldr	r5, [pc, #32]	; (11d4 <rtc_count_get_count+0x28>)
    11b4:	0020      	movs	r0, r4
    11b6:	47a8      	blx	r5
    11b8:	2800      	cmp	r0, #0
    11ba:	d1fb      	bne.n	11b4 <rtc_count_get_count+0x8>
		/* Wait for synchronization */
	}

	/* Read value based on mode. */
	switch (module->mode) {
    11bc:	7923      	ldrb	r3, [r4, #4]
    11be:	2b00      	cmp	r3, #0
    11c0:	d004      	beq.n	11cc <rtc_count_get_count+0x20>
			break;

		default:
			Assert(false);
			/* Counter not initialized. Assume counter value 0.*/
			ret_val = 0;
    11c2:	2000      	movs	r0, #0
	switch (module->mode) {
    11c4:	2b01      	cmp	r3, #1
    11c6:	d100      	bne.n	11ca <rtc_count_get_count+0x1e>
			ret_val = rtc_module->MODE0.COUNT.reg;
    11c8:	69b0      	ldr	r0, [r6, #24]
			break;
	}

	return ret_val;
}
    11ca:	bd70      	pop	{r4, r5, r6, pc}
			ret_val = (uint32_t)rtc_module->MODE1.COUNT.reg;
    11cc:	8b30      	ldrh	r0, [r6, #24]
    11ce:	b280      	uxth	r0, r0
			break;
    11d0:	e7fb      	b.n	11ca <rtc_count_get_count+0x1e>
    11d2:	46c0      	nop			; (mov r8, r8)
    11d4:	000010b1 	.word	0x000010b1

000011d8 <rtc_count_set_compare>:
 */
enum status_code rtc_count_set_compare(
		struct rtc_module *const module,
		const uint32_t comp_value,
		const enum rtc_count_compare comp_index)
{
    11d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    11da:	b083      	sub	sp, #12
    11dc:	0004      	movs	r4, r0
    11de:	9101      	str	r1, [sp, #4]
    11e0:	0015      	movs	r5, r2
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    11e2:	6806      	ldr	r6, [r0, #0]

	while (rtc_count_is_syncing(module)) {
    11e4:	4f13      	ldr	r7, [pc, #76]	; (1234 <rtc_count_set_compare+0x5c>)
    11e6:	0020      	movs	r0, r4
    11e8:	47b8      	blx	r7
    11ea:	2800      	cmp	r0, #0
    11ec:	d1fb      	bne.n	11e6 <rtc_count_set_compare+0xe>
		/* Wait for synchronization */
	}

	/* Set compare values based on operation mode. */
	switch (module->mode) {
    11ee:	7923      	ldrb	r3, [r4, #4]
    11f0:	2b00      	cmp	r3, #0
    11f2:	d00e      	beq.n	1212 <rtc_count_set_compare+0x3a>
    11f4:	2b01      	cmp	r3, #1
    11f6:	d119      	bne.n	122c <rtc_count_set_compare+0x54>
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity of comp_index. */
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
				return STATUS_ERR_INVALID_ARG;
    11f8:	3017      	adds	r0, #23
			if ((uint32_t)comp_index > RTC_COMP32_NUM) {
    11fa:	2d01      	cmp	r5, #1
    11fc:	d817      	bhi.n	122e <rtc_count_set_compare+0x56>
			}

			/* Set compare value for COMP. */
			rtc_module->MODE0.COMP[comp_index].reg = comp_value;
    11fe:	3508      	adds	r5, #8
    1200:	00ad      	lsls	r5, r5, #2
    1202:	9b01      	ldr	r3, [sp, #4]
    1204:	51ab      	str	r3, [r5, r6]
		default:
			Assert(false);
			return STATUS_ERR_BAD_FORMAT;
	}

	while (rtc_count_is_syncing(module)) {
    1206:	4d0b      	ldr	r5, [pc, #44]	; (1234 <rtc_count_set_compare+0x5c>)
    1208:	0020      	movs	r0, r4
    120a:	47a8      	blx	r5
    120c:	2800      	cmp	r0, #0
    120e:	d1fb      	bne.n	1208 <rtc_count_set_compare+0x30>
    1210:	e00d      	b.n	122e <rtc_count_set_compare+0x56>
				return STATUS_ERR_INVALID_ARG;
    1212:	2017      	movs	r0, #23
			if ((uint32_t)comp_index > RTC_NUM_OF_COMP16) {
    1214:	2d02      	cmp	r5, #2
    1216:	d80a      	bhi.n	122e <rtc_count_set_compare+0x56>
			if (comp_value > 0xffff) {
    1218:	4b07      	ldr	r3, [pc, #28]	; (1238 <rtc_count_set_compare+0x60>)
    121a:	9a01      	ldr	r2, [sp, #4]
    121c:	429a      	cmp	r2, r3
    121e:	d806      	bhi.n	122e <rtc_count_set_compare+0x56>
			rtc_module->MODE1.COMP[comp_index].reg = comp_value & 0xffff;
    1220:	466b      	mov	r3, sp
    1222:	889b      	ldrh	r3, [r3, #4]
    1224:	3510      	adds	r5, #16
    1226:	006d      	lsls	r5, r5, #1
    1228:	53ab      	strh	r3, [r5, r6]
			break;
    122a:	e7ec      	b.n	1206 <rtc_count_set_compare+0x2e>
			return STATUS_ERR_BAD_FORMAT;
    122c:	201a      	movs	r0, #26
		/* Wait for synchronization */
	}

	/* Return status if everything is OK. */
	return STATUS_OK;
}
    122e:	b003      	add	sp, #12
    1230:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1232:	46c0      	nop			; (mov r8, r8)
    1234:	000010b1 	.word	0x000010b1
    1238:	0000ffff 	.word	0x0000ffff

0000123c <rtc_count_init>:
{
    123c:	b570      	push	{r4, r5, r6, lr}
    123e:	0004      	movs	r4, r0
    1240:	0015      	movs	r5, r2
	module->hw = hw;
    1242:	6001      	str	r1, [r0, #0]
			MCLK->APBAMASK.reg |= mask;
    1244:	4a1f      	ldr	r2, [pc, #124]	; (12c4 <rtc_count_init+0x88>)
    1246:	6951      	ldr	r1, [r2, #20]
    1248:	2380      	movs	r3, #128	; 0x80
    124a:	005b      	lsls	r3, r3, #1
    124c:	430b      	orrs	r3, r1
    124e:	6153      	str	r3, [r2, #20]
	OSC32KCTRL->RTCCTRL.reg = RTC_CLOCK_SOURCE;
    1250:	2205      	movs	r2, #5
    1252:	4b1d      	ldr	r3, [pc, #116]	; (12c8 <rtc_count_init+0x8c>)
    1254:	611a      	str	r2, [r3, #16]
	rtc_count_reset(module);
    1256:	4b1d      	ldr	r3, [pc, #116]	; (12cc <rtc_count_init+0x90>)
    1258:	4798      	blx	r3
	module->mode                = config->mode;
    125a:	78ab      	ldrb	r3, [r5, #2]
    125c:	7123      	strb	r3, [r4, #4]
	_rtc_instance[0] = module;
    125e:	4b1c      	ldr	r3, [pc, #112]	; (12d0 <rtc_count_init+0x94>)
    1260:	601c      	str	r4, [r3, #0]
	Rtc *const rtc_module = module->hw;
    1262:	6822      	ldr	r2, [r4, #0]
				    | (config->enable_read_sync << RTC_MODE0_CTRLA_COUNTSYNC_Pos)
    1264:	792b      	ldrb	r3, [r5, #4]
    1266:	03db      	lsls	r3, r3, #15
				    | config->prescaler;
    1268:	8829      	ldrh	r1, [r5, #0]
    126a:	430b      	orrs	r3, r1
    126c:	b29b      	uxth	r3, r3
	rtc_module->MODE0.CTRLA.reg = RTC_MODE0_CTRLA_MODE(0)
    126e:	8013      	strh	r3, [r2, #0]
	switch (config->mode) {
    1270:	78ab      	ldrb	r3, [r5, #2]
    1272:	2b00      	cmp	r3, #0
    1274:	d013      	beq.n	129e <rtc_count_init+0x62>
			return STATUS_ERR_INVALID_ARG;
    1276:	2017      	movs	r0, #23
	switch (config->mode) {
    1278:	2b01      	cmp	r3, #1
    127a:	d10f      	bne.n	129c <rtc_count_init+0x60>
			rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MODE(0);
    127c:	8813      	ldrh	r3, [r2, #0]
    127e:	b29b      	uxth	r3, r3
    1280:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    1282:	78eb      	ldrb	r3, [r5, #3]
    1284:	2b00      	cmp	r3, #0
    1286:	d003      	beq.n	1290 <rtc_count_init+0x54>
				rtc_module->MODE0.CTRLA.reg |= RTC_MODE0_CTRLA_MATCHCLR;
    1288:	8813      	ldrh	r3, [r2, #0]
    128a:	2180      	movs	r1, #128	; 0x80
    128c:	430b      	orrs	r3, r1
    128e:	8013      	strh	r3, [r2, #0]
				rtc_count_set_compare(module, config->compare_values[i],
    1290:	68a9      	ldr	r1, [r5, #8]
    1292:	2200      	movs	r2, #0
    1294:	0020      	movs	r0, r4
    1296:	4b0f      	ldr	r3, [pc, #60]	; (12d4 <rtc_count_init+0x98>)
    1298:	4798      	blx	r3
	return STATUS_OK;
    129a:	2000      	movs	r0, #0
}
    129c:	bd70      	pop	{r4, r5, r6, pc}
			rtc_module->MODE1.CTRLA.reg |= RTC_MODE1_CTRLA_MODE(1);
    129e:	8813      	ldrh	r3, [r2, #0]
    12a0:	2104      	movs	r1, #4
    12a2:	430b      	orrs	r3, r1
    12a4:	8013      	strh	r3, [r2, #0]
			if (config->clear_on_match) {
    12a6:	78eb      	ldrb	r3, [r5, #3]
				return STATUS_ERR_INVALID_ARG;
    12a8:	2017      	movs	r0, #23
			if (config->clear_on_match) {
    12aa:	2b00      	cmp	r3, #0
    12ac:	d1f6      	bne.n	129c <rtc_count_init+0x60>
				rtc_count_set_compare(module, config->compare_values[i],
    12ae:	2200      	movs	r2, #0
    12b0:	68a9      	ldr	r1, [r5, #8]
    12b2:	0020      	movs	r0, r4
    12b4:	4e07      	ldr	r6, [pc, #28]	; (12d4 <rtc_count_init+0x98>)
    12b6:	47b0      	blx	r6
    12b8:	68e9      	ldr	r1, [r5, #12]
    12ba:	2201      	movs	r2, #1
    12bc:	0020      	movs	r0, r4
    12be:	47b0      	blx	r6
	return STATUS_OK;
    12c0:	2000      	movs	r0, #0
    12c2:	e7eb      	b.n	129c <rtc_count_init+0x60>
    12c4:	40000400 	.word	0x40000400
    12c8:	40001000 	.word	0x40001000
    12cc:	00001131 	.word	0x00001131
    12d0:	200010c8 	.word	0x200010c8
    12d4:	000011d9 	.word	0x000011d9

000012d8 <rtc_count_register_callback>:
{

	enum status_code status = STATUS_OK;

	/* Overflow callback */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW
    12d8:	2a0a      	cmp	r2, #10
    12da:	d009      	beq.n	12f0 <rtc_count_register_callback+0x18>
#ifdef FEATURE_RTC_TAMPER_DETECTION
		|| callback_type == RTC_COUNT_CALLBACK_TAMPER
#endif
		|| (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    12dc:	2a07      	cmp	r2, #7
    12de:	d907      	bls.n	12f0 <rtc_count_register_callback+0x18>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7)) {
		status = STATUS_OK;
	} else {
		/* Make sure callback type can be registered */
		switch (module->mode) {
    12e0:	7903      	ldrb	r3, [r0, #4]
    12e2:	2b00      	cmp	r3, #0
    12e4:	d010      	beq.n	1308 <rtc_count_register_callback+0x30>
    12e6:	2b01      	cmp	r3, #1
    12e8:	d112      	bne.n	1310 <rtc_count_register_callback+0x38>
    12ea:	3316      	adds	r3, #22
		case RTC_COUNT_MODE_32BIT:
			/* Check sanity for 32-bit mode. */
			if (callback_type > (RTC_COMP32_NUM + RTC_PER_NUM)) {
    12ec:	2a09      	cmp	r2, #9
    12ee:	d809      	bhi.n	1304 <rtc_count_register_callback+0x2c>
		}
	}

	if (status == STATUS_OK) {
		/* Register callback */
		module->callbacks[callback_type] = callback;
    12f0:	1c93      	adds	r3, r2, #2
    12f2:	009b      	lsls	r3, r3, #2
    12f4:	5019      	str	r1, [r3, r0]
		/* Set corresponding bit to set callback as registered */
		module->registered_callback |= (1 << callback_type);
    12f6:	8e83      	ldrh	r3, [r0, #52]	; 0x34
    12f8:	2101      	movs	r1, #1
    12fa:	4091      	lsls	r1, r2
    12fc:	430b      	orrs	r3, r1
    12fe:	b29b      	uxth	r3, r3
    1300:	8683      	strh	r3, [r0, #52]	; 0x34
    1302:	2300      	movs	r3, #0
	}

	return status;
}
    1304:	0018      	movs	r0, r3
    1306:	4770      	bx	lr
    1308:	2317      	movs	r3, #23
			if (callback_type > (RTC_NUM_OF_COMP16 + RTC_PER_NUM)) {
    130a:	2a0a      	cmp	r2, #10
    130c:	d8fa      	bhi.n	1304 <rtc_count_register_callback+0x2c>
    130e:	e7ef      	b.n	12f0 <rtc_count_register_callback+0x18>
			status = STATUS_ERR_INVALID_ARG;
    1310:	2317      	movs	r3, #23
    1312:	e7f7      	b.n	1304 <rtc_count_register_callback+0x2c>

00001314 <rtc_count_enable_callback>:
 * \param[in]     callback_type Callback type to enable
 */
void rtc_count_enable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    1314:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    1316:	6802      	ldr	r2, [r0, #0]

	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    1318:	290a      	cmp	r1, #10
    131a:	d011      	beq.n	1340 <rtc_count_enable_callback+0x2c>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if (callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    131c:	2907      	cmp	r1, #7
    131e:	d912      	bls.n	1346 <rtc_count_enable_callback+0x32>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7) {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
	}else {
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1320:	2380      	movs	r3, #128	; 0x80
    1322:	005b      	lsls	r3, r3, #1
    1324:	000c      	movs	r4, r1
    1326:	3c08      	subs	r4, #8
    1328:	40a3      	lsls	r3, r4
    132a:	24c0      	movs	r4, #192	; 0xc0
    132c:	00a4      	lsls	r4, r4, #2
    132e:	4023      	ands	r3, r4
    1330:	8153      	strh	r3, [r2, #10]
	}
	/* Mark callback as enabled. */
	module->enabled_callback |= (1 << callback_type);
    1332:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    1334:	2201      	movs	r2, #1
    1336:	408a      	lsls	r2, r1
    1338:	4313      	orrs	r3, r2
    133a:	b29b      	uxth	r3, r3
    133c:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    133e:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENSET.reg = RTC_MODE0_INTFLAG_OVF;
    1340:	4b04      	ldr	r3, [pc, #16]	; (1354 <rtc_count_enable_callback+0x40>)
    1342:	8153      	strh	r3, [r2, #10]
    1344:	e7f5      	b.n	1332 <rtc_count_enable_callback+0x1e>
		rtc_module->MODE0.INTENSET.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);
    1346:	2401      	movs	r4, #1
    1348:	408c      	lsls	r4, r1
    134a:	23ff      	movs	r3, #255	; 0xff
    134c:	4023      	ands	r3, r4
    134e:	8153      	strh	r3, [r2, #10]
    1350:	e7ef      	b.n	1332 <rtc_count_enable_callback+0x1e>
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	ffff8000 	.word	0xffff8000

00001358 <rtc_count_disable_callback>:
 * \param[in]     callback_type Callback type to disable
 */
void rtc_count_disable_callback(
		struct rtc_module *const module,
		enum rtc_count_callback callback_type)
{
    1358:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	Rtc *const rtc_module = module->hw;
    135a:	6802      	ldr	r2, [r0, #0]

	/* Disable interrupt */
	if (callback_type == RTC_COUNT_CALLBACK_OVERFLOW) {
    135c:	290a      	cmp	r1, #10
    135e:	d010      	beq.n	1382 <rtc_count_disable_callback+0x2a>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
#ifdef FEATURE_RTC_TAMPER_DETECTION
	} else if (callback_type == RTC_COUNT_CALLBACK_TAMPER) {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_TAMPER;
#endif
	} else if(callback_type >= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_0
    1360:	2907      	cmp	r1, #7
    1362:	d911      	bls.n	1388 <rtc_count_disable_callback+0x30>
			&& callback_type <= RTC_COUNT_CALLBACK_PERIODIC_INTERVAL_7){
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
	}else {
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_CMP(1 << (callback_type - RTC_PER_NUM));
    1364:	2380      	movs	r3, #128	; 0x80
    1366:	005b      	lsls	r3, r3, #1
    1368:	000c      	movs	r4, r1
    136a:	3c08      	subs	r4, #8
    136c:	40a3      	lsls	r3, r4
    136e:	24c0      	movs	r4, #192	; 0xc0
    1370:	00a4      	lsls	r4, r4, #2
    1372:	4023      	ands	r3, r4
    1374:	8113      	strh	r3, [r2, #8]
	}

	/* Mark callback as disabled. */
	module->enabled_callback &= ~(1 << callback_type);
    1376:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
    1378:	2201      	movs	r2, #1
    137a:	408a      	lsls	r2, r1
    137c:	4393      	bics	r3, r2
    137e:	86c3      	strh	r3, [r0, #54]	; 0x36
}
    1380:	bd10      	pop	{r4, pc}
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE0_INTFLAG_OVF;
    1382:	4b04      	ldr	r3, [pc, #16]	; (1394 <rtc_count_disable_callback+0x3c>)
    1384:	8113      	strh	r3, [r2, #8]
    1386:	e7f6      	b.n	1376 <rtc_count_disable_callback+0x1e>
		rtc_module->MODE0.INTENCLR.reg = RTC_MODE1_INTFLAG_PER(1 << callback_type);;
    1388:	2401      	movs	r4, #1
    138a:	408c      	lsls	r4, r1
    138c:	23ff      	movs	r3, #255	; 0xff
    138e:	4023      	ands	r3, r4
    1390:	8113      	strh	r3, [r2, #8]
    1392:	e7f0      	b.n	1376 <rtc_count_disable_callback+0x1e>
    1394:	ffff8000 	.word	0xffff8000

00001398 <RTC_Handler>:
/**
 * \internal ISR handler for RTC
 */
#if (RTC_INST_NUM == 1)
void RTC_Handler(void)
{
    1398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    139a:	46de      	mov	lr, fp
    139c:	4657      	mov	r7, sl
    139e:	464e      	mov	r6, r9
    13a0:	4645      	mov	r5, r8
    13a2:	b5e0      	push	{r5, r6, r7, lr}
	struct rtc_module *module = _rtc_instance[instance_index];
    13a4:	4b2b      	ldr	r3, [pc, #172]	; (1454 <RTC_Handler+0xbc>)
    13a6:	681b      	ldr	r3, [r3, #0]
    13a8:	469a      	mov	sl, r3
	Rtc *const rtc_module = module->hw;
    13aa:	681e      	ldr	r6, [r3, #0]
	uint16_t callback_mask = module->enabled_callback;
    13ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
	callback_mask &= module->registered_callback;
    13ae:	4652      	mov	r2, sl
    13b0:	8e92      	ldrh	r2, [r2, #52]	; 0x34
    13b2:	401a      	ands	r2, r3
    13b4:	4690      	mov	r8, r2
	uint16_t interrupt_status = rtc_module->MODE0.INTFLAG.reg;
    13b6:	89b2      	ldrh	r2, [r6, #12]
	interrupt_status &= rtc_module->MODE0.INTENSET.reg;
    13b8:	8973      	ldrh	r3, [r6, #10]
    13ba:	4013      	ands	r3, r2
	if (interrupt_status & RTC_MODE0_INTFLAG_OVF) {
    13bc:	b21a      	sxth	r2, r3
    13be:	2a00      	cmp	r2, #0
    13c0:	db08      	blt.n	13d4 <RTC_Handler+0x3c>
    13c2:	27ff      	movs	r7, #255	; 0xff
    13c4:	401f      	ands	r7, r3
	} else if (interrupt_status & RTC_MODE1_INTFLAG_PER(0xff)) {
    13c6:	d02a      	beq.n	141e <RTC_Handler+0x86>
    13c8:	2400      	movs	r4, #0
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    13ca:	2301      	movs	r3, #1
    13cc:	4699      	mov	r9, r3
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    13ce:	33fe      	adds	r3, #254	; 0xfe
    13d0:	469b      	mov	fp, r3
    13d2:	e014      	b.n	13fe <RTC_Handler+0x66>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_OVERFLOW)) {
    13d4:	4643      	mov	r3, r8
    13d6:	055b      	lsls	r3, r3, #21
    13d8:	d407      	bmi.n	13ea <RTC_Handler+0x52>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_OVF;
    13da:	4b1f      	ldr	r3, [pc, #124]	; (1458 <RTC_Handler+0xc0>)
    13dc:	81b3      	strh	r3, [r6, #12]
	_rtc_interrupt_handler(0);
}
    13de:	bc3c      	pop	{r2, r3, r4, r5}
    13e0:	4690      	mov	r8, r2
    13e2:	4699      	mov	r9, r3
    13e4:	46a2      	mov	sl, r4
    13e6:	46ab      	mov	fp, r5
    13e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			module->callbacks[RTC_COUNT_CALLBACK_OVERFLOW]();
    13ea:	4653      	mov	r3, sl
    13ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    13ee:	4798      	blx	r3
    13f0:	e7f3      	b.n	13da <RTC_Handler+0x42>
			rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_PER(1<<i);
    13f2:	465b      	mov	r3, fp
    13f4:	401d      	ands	r5, r3
    13f6:	81b5      	strh	r5, [r6, #12]
    13f8:	3401      	adds	r4, #1
		for ( i = 0;i < RTC_PER_NUM;i++) {
    13fa:	2c08      	cmp	r4, #8
    13fc:	d0ef      	beq.n	13de <RTC_Handler+0x46>
			if ((interrupt_status & RTC_MODE1_INTFLAG_PER(1 << i))
    13fe:	0023      	movs	r3, r4
    1400:	464d      	mov	r5, r9
    1402:	40a5      	lsls	r5, r4
    1404:	422f      	tst	r7, r5
    1406:	d0f4      	beq.n	13f2 <RTC_Handler+0x5a>
			  && (callback_mask & (1 << i))) {
    1408:	4642      	mov	r2, r8
    140a:	4122      	asrs	r2, r4
    140c:	4649      	mov	r1, r9
    140e:	4211      	tst	r1, r2
    1410:	d0ef      	beq.n	13f2 <RTC_Handler+0x5a>
				module->callbacks[i]();
    1412:	3302      	adds	r3, #2
    1414:	009b      	lsls	r3, r3, #2
    1416:	4652      	mov	r2, sl
    1418:	589b      	ldr	r3, [r3, r2]
    141a:	4798      	blx	r3
    141c:	e7e9      	b.n	13f2 <RTC_Handler+0x5a>
	}else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 0)) {
    141e:	05da      	lsls	r2, r3, #23
    1420:	d50a      	bpl.n	1438 <RTC_Handler+0xa0>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_0)) {
    1422:	4643      	mov	r3, r8
    1424:	05db      	lsls	r3, r3, #23
    1426:	d403      	bmi.n	1430 <RTC_Handler+0x98>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 0);
    1428:	2380      	movs	r3, #128	; 0x80
    142a:	005b      	lsls	r3, r3, #1
    142c:	81b3      	strh	r3, [r6, #12]
    142e:	e7d6      	b.n	13de <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_0]();
    1430:	4653      	mov	r3, sl
    1432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1434:	4798      	blx	r3
    1436:	e7f7      	b.n	1428 <RTC_Handler+0x90>
	} else if (interrupt_status & RTC_MODE1_INTFLAG_CMP(1 << 1)) {
    1438:	059b      	lsls	r3, r3, #22
    143a:	d5d0      	bpl.n	13de <RTC_Handler+0x46>
		if (callback_mask & (1 << RTC_COUNT_CALLBACK_COMPARE_1)) {
    143c:	4643      	mov	r3, r8
    143e:	059b      	lsls	r3, r3, #22
    1440:	d403      	bmi.n	144a <RTC_Handler+0xb2>
		rtc_module->MODE0.INTFLAG.reg = RTC_MODE1_INTFLAG_CMP(1 << 1);
    1442:	2380      	movs	r3, #128	; 0x80
    1444:	009b      	lsls	r3, r3, #2
    1446:	81b3      	strh	r3, [r6, #12]
}
    1448:	e7c9      	b.n	13de <RTC_Handler+0x46>
			module->callbacks[RTC_COUNT_CALLBACK_COMPARE_1]();
    144a:	4653      	mov	r3, sl
    144c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    144e:	4798      	blx	r3
    1450:	e7f7      	b.n	1442 <RTC_Handler+0xaa>
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	200010c8 	.word	0x200010c8
    1458:	ffff8000 	.word	0xffff8000

0000145c <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    145c:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    145e:	2207      	movs	r2, #7
    1460:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1462:	421a      	tst	r2, r3
    1464:	d1fc      	bne.n	1460 <_i2c_master_wait_for_sync+0x4>
}
    1466:	4770      	bx	lr

00001468 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		Sercom *const hw,
		const struct i2c_master_config *const config)
{
    1468:	b5f0      	push	{r4, r5, r6, r7, lr}
    146a:	46d6      	mov	lr, sl
    146c:	464f      	mov	r7, r9
    146e:	4646      	mov	r6, r8
    1470:	b5c0      	push	{r6, r7, lr}
    1472:	b08a      	sub	sp, #40	; 0x28
    1474:	0007      	movs	r7, r0
    1476:	000e      	movs	r6, r1
    1478:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize software module */
	module->hw = hw;
    147a:	6039      	str	r1, [r7, #0]

	SercomI2cm *const i2c_module = &(module->hw->I2CM);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    147c:	0008      	movs	r0, r1
    147e:	4ba5      	ldr	r3, [pc, #660]	; (1714 <i2c_master_init+0x2ac>)
    1480:	4798      	blx	r3

#if (SAML22) || (SAMC20)
	pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    1482:	2805      	cmp	r0, #5
    1484:	d100      	bne.n	1488 <i2c_master_init+0x20>
    1486:	e13d      	b.n	1704 <i2c_master_init+0x29c>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    1488:	0005      	movs	r5, r0
    148a:	3512      	adds	r5, #18
			MCLK->APBCMASK.reg |= mask;
    148c:	4aa2      	ldr	r2, [pc, #648]	; (1718 <i2c_master_init+0x2b0>)
    148e:	69d1      	ldr	r1, [r2, #28]
	/* Turn on module in PM */
#if (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
	} else {
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    1490:	2301      	movs	r3, #1
    1492:	4083      	lsls	r3, r0
    1494:	430b      	orrs	r3, r1
    1496:	61d3      	str	r3, [r2, #28]
#endif

	/* Set up the GCLK for the module */
	struct system_gclk_chan_config gclk_chan_conf;
	system_gclk_chan_get_config_defaults(&gclk_chan_conf);
	gclk_chan_conf.source_generator = config->generator_source;
    1498:	a909      	add	r1, sp, #36	; 0x24
    149a:	7b23      	ldrb	r3, [r4, #12]
    149c:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    149e:	b2ed      	uxtb	r5, r5
    14a0:	0028      	movs	r0, r5
    14a2:	4b9e      	ldr	r3, [pc, #632]	; (171c <i2c_master_init+0x2b4>)
    14a4:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    14a6:	0028      	movs	r0, r5
    14a8:	4b9d      	ldr	r3, [pc, #628]	; (1720 <i2c_master_init+0x2b8>)
    14aa:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    14ac:	7b20      	ldrb	r0, [r4, #12]
    14ae:	2100      	movs	r1, #0
    14b0:	4b9c      	ldr	r3, [pc, #624]	; (1724 <i2c_master_init+0x2bc>)
    14b2:	4798      	blx	r3

	/* Check if module is enabled. */
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    14b4:	6833      	ldr	r3, [r6, #0]
		return STATUS_ERR_DENIED;
    14b6:	201c      	movs	r0, #28
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_ENABLE) {
    14b8:	079b      	lsls	r3, r3, #30
    14ba:	d505      	bpl.n	14c8 <i2c_master_init+0x60>
	/* Set sercom module to operate in I2C master mode. */
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);

	/* Set config and return status. */
	return _i2c_master_set_config(module, config);
}
    14bc:	b00a      	add	sp, #40	; 0x28
    14be:	bc1c      	pop	{r2, r3, r4}
    14c0:	4690      	mov	r8, r2
    14c2:	4699      	mov	r9, r3
    14c4:	46a2      	mov	sl, r4
    14c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    14c8:	6833      	ldr	r3, [r6, #0]
		return STATUS_BUSY;
    14ca:	3817      	subs	r0, #23
	if (i2c_module->CTRLA.reg & SERCOM_I2CM_CTRLA_SWRST) {
    14cc:	07db      	lsls	r3, r3, #31
    14ce:	d4f5      	bmi.n	14bc <i2c_master_init+0x54>
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    14d0:	6838      	ldr	r0, [r7, #0]
    14d2:	4b90      	ldr	r3, [pc, #576]	; (1714 <i2c_master_init+0x2ac>)
    14d4:	4699      	mov	r9, r3
    14d6:	4798      	blx	r3
    14d8:	0005      	movs	r5, r0
	_sercom_set_handler(instance_index, _i2c_master_interrupt_handler);
    14da:	4993      	ldr	r1, [pc, #588]	; (1728 <i2c_master_init+0x2c0>)
    14dc:	4b93      	ldr	r3, [pc, #588]	; (172c <i2c_master_init+0x2c4>)
    14de:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    14e0:	00ad      	lsls	r5, r5, #2
    14e2:	4b93      	ldr	r3, [pc, #588]	; (1730 <i2c_master_init+0x2c8>)
    14e4:	50ef      	str	r7, [r5, r3]
	module->registered_callback = 0;
    14e6:	2300      	movs	r3, #0
    14e8:	763b      	strb	r3, [r7, #24]
	module->enabled_callback = 0;
    14ea:	767b      	strb	r3, [r7, #25]
	module->buffer_length = 0;
    14ec:	2500      	movs	r5, #0
    14ee:	837b      	strh	r3, [r7, #26]
	module->buffer_remaining = 0;
    14f0:	83bb      	strh	r3, [r7, #28]
	module->status = STATUS_OK;
    14f2:	2225      	movs	r2, #37	; 0x25
    14f4:	54bd      	strb	r5, [r7, r2]
	module->buffer = NULL;
    14f6:	623b      	str	r3, [r7, #32]
	i2c_module->CTRLA.reg = SERCOM_I2CM_CTRLA_MODE(0x5);
    14f8:	3314      	adds	r3, #20
    14fa:	6033      	str	r3, [r6, #0]
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    14fc:	683b      	ldr	r3, [r7, #0]
    14fe:	4698      	mov	r8, r3
	uint8_t sercom_index = _sercom_get_sercom_inst_index(sercom_hw);
    1500:	0018      	movs	r0, r3
    1502:	47c8      	blx	r9
    1504:	4681      	mov	r9, r0
    1506:	2380      	movs	r3, #128	; 0x80
    1508:	aa08      	add	r2, sp, #32
    150a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    150c:	7055      	strb	r5, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    150e:	2301      	movs	r3, #1
    1510:	7093      	strb	r3, [r2, #2]
	config->powersave    = false;
    1512:	70d5      	strb	r5, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
    1514:	69e0      	ldr	r0, [r4, #28]
	uint32_t pad1 = config->pinmux_pad1;
    1516:	6a26      	ldr	r6, [r4, #32]
	if (pad0 == PINMUX_DEFAULT) {
    1518:	2800      	cmp	r0, #0
    151a:	d100      	bne.n	151e <i2c_master_init+0xb6>
    151c:	e0af      	b.n	167e <i2c_master_init+0x216>
	pin_conf.mux_position = pad0 & 0xFFFF;
    151e:	ab08      	add	r3, sp, #32
    1520:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    1522:	2302      	movs	r3, #2
    1524:	aa08      	add	r2, sp, #32
    1526:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
    1528:	0c00      	lsrs	r0, r0, #16
    152a:	b2c0      	uxtb	r0, r0
    152c:	0011      	movs	r1, r2
    152e:	4b81      	ldr	r3, [pc, #516]	; (1734 <i2c_master_init+0x2cc>)
    1530:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
    1532:	2e00      	cmp	r6, #0
    1534:	d100      	bne.n	1538 <i2c_master_init+0xd0>
    1536:	e0a7      	b.n	1688 <i2c_master_init+0x220>
	pin_conf.mux_position = pad1 & 0xFFFF;
    1538:	ab08      	add	r3, sp, #32
    153a:	701e      	strb	r6, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
    153c:	2302      	movs	r3, #2
    153e:	aa08      	add	r2, sp, #32
    1540:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
    1542:	0c36      	lsrs	r6, r6, #16
    1544:	b2f0      	uxtb	r0, r6
    1546:	0011      	movs	r1, r2
    1548:	4b7a      	ldr	r3, [pc, #488]	; (1734 <i2c_master_init+0x2cc>)
    154a:	4798      	blx	r3
	module->unknown_bus_state_timeout = config->unknown_bus_state_timeout;
    154c:	8aa3      	ldrh	r3, [r4, #20]
    154e:	80fb      	strh	r3, [r7, #6]
	module->buffer_timeout = config->buffer_timeout;
    1550:	8ae3      	ldrh	r3, [r4, #22]
    1552:	813b      	strh	r3, [r7, #8]
	if (config->run_in_standby || system_is_debugger_present()) {
    1554:	7e23      	ldrb	r3, [r4, #24]
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1556:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
    1558:	2b00      	cmp	r3, #0
    155a:	d104      	bne.n	1566 <i2c_master_init+0xfe>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
    155c:	4b76      	ldr	r3, [pc, #472]	; (1738 <i2c_master_init+0x2d0>)
    155e:	789b      	ldrb	r3, [r3, #2]
    1560:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CM_CTRLA_RUNSTDBY;
    1562:	0fdb      	lsrs	r3, r3, #31
    1564:	01da      	lsls	r2, r3, #7
	tmp_ctrla |= config->transfer_speed;
    1566:	68a1      	ldr	r1, [r4, #8]
    1568:	6923      	ldr	r3, [r4, #16]
    156a:	430b      	orrs	r3, r1
    156c:	4313      	orrs	r3, r2
	if (config->scl_low_timeout) {
    156e:	2224      	movs	r2, #36	; 0x24
    1570:	5ca2      	ldrb	r2, [r4, r2]
    1572:	2a00      	cmp	r2, #0
    1574:	d002      	beq.n	157c <i2c_master_init+0x114>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_LOWTOUTEN;
    1576:	2280      	movs	r2, #128	; 0x80
    1578:	05d2      	lsls	r2, r2, #23
    157a:	4313      	orrs	r3, r2
		tmp_ctrla |= config->inactive_timeout;
    157c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    157e:	4313      	orrs	r3, r2
	if (config->scl_stretch_only_after_ack_bit || (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED)) {
    1580:	222c      	movs	r2, #44	; 0x2c
    1582:	5ca2      	ldrb	r2, [r4, r2]
    1584:	2a00      	cmp	r2, #0
    1586:	d103      	bne.n	1590 <i2c_master_init+0x128>
    1588:	2280      	movs	r2, #128	; 0x80
    158a:	0492      	lsls	r2, r2, #18
    158c:	4291      	cmp	r1, r2
    158e:	d102      	bne.n	1596 <i2c_master_init+0x12e>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SCLSM;
    1590:	2280      	movs	r2, #128	; 0x80
    1592:	0512      	lsls	r2, r2, #20
    1594:	4313      	orrs	r3, r2
	if (config->slave_scl_low_extend_timeout) {
    1596:	222d      	movs	r2, #45	; 0x2d
    1598:	5ca2      	ldrb	r2, [r4, r2]
    159a:	2a00      	cmp	r2, #0
    159c:	d002      	beq.n	15a4 <i2c_master_init+0x13c>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_SEXTTOEN;
    159e:	2280      	movs	r2, #128	; 0x80
    15a0:	0412      	lsls	r2, r2, #16
    15a2:	4313      	orrs	r3, r2
	if (config->master_scl_low_extend_timeout) {
    15a4:	222e      	movs	r2, #46	; 0x2e
    15a6:	5ca2      	ldrb	r2, [r4, r2]
    15a8:	2a00      	cmp	r2, #0
    15aa:	d002      	beq.n	15b2 <i2c_master_init+0x14a>
		tmp_ctrla |= SERCOM_I2CM_CTRLA_MEXTTOEN;
    15ac:	2280      	movs	r2, #128	; 0x80
    15ae:	03d2      	lsls	r2, r2, #15
    15b0:	4313      	orrs	r3, r2
	i2c_module->CTRLA.reg |= tmp_ctrla;
    15b2:	4642      	mov	r2, r8
    15b4:	6812      	ldr	r2, [r2, #0]
    15b6:	4313      	orrs	r3, r2
    15b8:	4642      	mov	r2, r8
    15ba:	6013      	str	r3, [r2, #0]
	i2c_module->CTRLB.reg = SERCOM_I2CM_CTRLB_SMEN;
    15bc:	2380      	movs	r3, #128	; 0x80
    15be:	005b      	lsls	r3, r3, #1
    15c0:	6053      	str	r3, [r2, #4]
	uint32_t fgclk       = system_gclk_chan_get_hz(SERCOM0_GCLK_ID_CORE + sercom_index);
    15c2:	464d      	mov	r5, r9
    15c4:	3512      	adds	r5, #18
    15c6:	b2e8      	uxtb	r0, r5
    15c8:	4b5c      	ldr	r3, [pc, #368]	; (173c <i2c_master_init+0x2d4>)
    15ca:	4798      	blx	r3
    15cc:	9007      	str	r0, [sp, #28]
	uint32_t fscl        = 1000 * config->baud_rate;
    15ce:	23fa      	movs	r3, #250	; 0xfa
    15d0:	009b      	lsls	r3, r3, #2
    15d2:	6822      	ldr	r2, [r4, #0]
    15d4:	435a      	muls	r2, r3
    15d6:	4691      	mov	r9, r2
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    15d8:	6863      	ldr	r3, [r4, #4]
    15da:	469a      	mov	sl, r3
	tmp_baud = (int32_t)(div_ceil(
    15dc:	4d58      	ldr	r5, [pc, #352]	; (1740 <i2c_master_init+0x2d8>)
    15de:	47a8      	blx	r5
    15e0:	9000      	str	r0, [sp, #0]
    15e2:	9101      	str	r1, [sp, #4]
    15e4:	464b      	mov	r3, r9
    15e6:	0058      	lsls	r0, r3, #1
    15e8:	47a8      	blx	r5
    15ea:	9002      	str	r0, [sp, #8]
    15ec:	9103      	str	r1, [sp, #12]
    15ee:	8e20      	ldrh	r0, [r4, #48]	; 0x30
    15f0:	47a8      	blx	r5
    15f2:	9004      	str	r0, [sp, #16]
    15f4:	9105      	str	r1, [sp, #20]
    15f6:	4f53      	ldr	r7, [pc, #332]	; (1744 <i2c_master_init+0x2dc>)
    15f8:	4a53      	ldr	r2, [pc, #332]	; (1748 <i2c_master_init+0x2e0>)
    15fa:	4b54      	ldr	r3, [pc, #336]	; (174c <i2c_master_init+0x2e4>)
    15fc:	9800      	ldr	r0, [sp, #0]
    15fe:	9901      	ldr	r1, [sp, #4]
    1600:	47b8      	blx	r7
    1602:	0002      	movs	r2, r0
    1604:	000b      	movs	r3, r1
    1606:	9804      	ldr	r0, [sp, #16]
    1608:	9905      	ldr	r1, [sp, #20]
    160a:	47b8      	blx	r7
    160c:	4e50      	ldr	r6, [pc, #320]	; (1750 <i2c_master_init+0x2e8>)
    160e:	2200      	movs	r2, #0
    1610:	4b50      	ldr	r3, [pc, #320]	; (1754 <i2c_master_init+0x2ec>)
    1612:	47b0      	blx	r6
    1614:	9004      	str	r0, [sp, #16]
    1616:	9105      	str	r1, [sp, #20]
    1618:	4648      	mov	r0, r9
    161a:	47a8      	blx	r5
    161c:	0002      	movs	r2, r0
    161e:	000b      	movs	r3, r1
    1620:	9804      	ldr	r0, [sp, #16]
    1622:	9905      	ldr	r1, [sp, #20]
    1624:	47b8      	blx	r7
    1626:	0002      	movs	r2, r0
    1628:	000b      	movs	r3, r1
    162a:	4d4b      	ldr	r5, [pc, #300]	; (1758 <i2c_master_init+0x2f0>)
    162c:	9800      	ldr	r0, [sp, #0]
    162e:	9901      	ldr	r1, [sp, #4]
    1630:	47a8      	blx	r5
    1632:	9a02      	ldr	r2, [sp, #8]
    1634:	9b03      	ldr	r3, [sp, #12]
    1636:	47b0      	blx	r6
    1638:	2200      	movs	r2, #0
    163a:	4b48      	ldr	r3, [pc, #288]	; (175c <i2c_master_init+0x2f4>)
    163c:	47a8      	blx	r5
    163e:	9a02      	ldr	r2, [sp, #8]
    1640:	9b03      	ldr	r3, [sp, #12]
    1642:	4d47      	ldr	r5, [pc, #284]	; (1760 <i2c_master_init+0x2f8>)
    1644:	47a8      	blx	r5
    1646:	4b47      	ldr	r3, [pc, #284]	; (1764 <i2c_master_init+0x2fc>)
    1648:	4798      	blx	r3
    164a:	0005      	movs	r5, r0
	if (config->transfer_speed == I2C_MASTER_SPEED_HIGH_SPEED) {
    164c:	2380      	movs	r3, #128	; 0x80
    164e:	049b      	lsls	r3, r3, #18
    1650:	68a2      	ldr	r2, [r4, #8]
    1652:	429a      	cmp	r2, r3
    1654:	d01e      	beq.n	1694 <i2c_master_init+0x22c>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1656:	0003      	movs	r3, r0
    1658:	2040      	movs	r0, #64	; 0x40
    165a:	2dff      	cmp	r5, #255	; 0xff
    165c:	d900      	bls.n	1660 <i2c_master_init+0x1f8>
    165e:	e72d      	b.n	14bc <i2c_master_init+0x54>
	int32_t tmp_baudlow_hs = 0;
    1660:	2400      	movs	r4, #0
	int32_t tmp_baud_hs = 0;
    1662:	2000      	movs	r0, #0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1664:	25ff      	movs	r5, #255	; 0xff
    1666:	401d      	ands	r5, r3
			SERCOM_I2CM_BAUD_HSBAUD(tmp_baud_hs) | SERCOM_I2CM_BAUD_HSBAUDLOW(tmp_baudlow_hs);
    1668:	0624      	lsls	r4, r4, #24
    166a:	4325      	orrs	r5, r4
    166c:	0400      	lsls	r0, r0, #16
    166e:	23ff      	movs	r3, #255	; 0xff
    1670:	041b      	lsls	r3, r3, #16
    1672:	4018      	ands	r0, r3
    1674:	4305      	orrs	r5, r0
		i2c_module->BAUD.reg = SERCOM_I2CM_BAUD_BAUD(tmp_baud) |
    1676:	4643      	mov	r3, r8
    1678:	60dd      	str	r5, [r3, #12]
	enum status_code tmp_status_code = STATUS_OK;
    167a:	2000      	movs	r0, #0
    167c:	e71e      	b.n	14bc <i2c_master_init+0x54>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
    167e:	2100      	movs	r1, #0
    1680:	4640      	mov	r0, r8
    1682:	4b39      	ldr	r3, [pc, #228]	; (1768 <i2c_master_init+0x300>)
    1684:	4798      	blx	r3
    1686:	e74a      	b.n	151e <i2c_master_init+0xb6>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
    1688:	2101      	movs	r1, #1
    168a:	4640      	mov	r0, r8
    168c:	4b36      	ldr	r3, [pc, #216]	; (1768 <i2c_master_init+0x300>)
    168e:	4798      	blx	r3
    1690:	0006      	movs	r6, r0
    1692:	e751      	b.n	1538 <i2c_master_init+0xd0>
	uint32_t fscl_hs     = 1000 * config->baud_rate_high_speed;
    1694:	26fa      	movs	r6, #250	; 0xfa
    1696:	00b6      	lsls	r6, r6, #2
    1698:	4653      	mov	r3, sl
    169a:	435e      	muls	r6, r3
		tmp_baudlow_hs = (int32_t)((fgclk * 2.0) / (3.0 * fscl_hs) - 1);
    169c:	9800      	ldr	r0, [sp, #0]
    169e:	9901      	ldr	r1, [sp, #4]
    16a0:	0002      	movs	r2, r0
    16a2:	000b      	movs	r3, r1
    16a4:	4c2a      	ldr	r4, [pc, #168]	; (1750 <i2c_master_init+0x2e8>)
    16a6:	47a0      	blx	r4
    16a8:	9000      	str	r0, [sp, #0]
    16aa:	9101      	str	r1, [sp, #4]
    16ac:	0030      	movs	r0, r6
    16ae:	4b24      	ldr	r3, [pc, #144]	; (1740 <i2c_master_init+0x2d8>)
    16b0:	4798      	blx	r3
    16b2:	2200      	movs	r2, #0
    16b4:	4b2d      	ldr	r3, [pc, #180]	; (176c <i2c_master_init+0x304>)
    16b6:	47b8      	blx	r7
    16b8:	0002      	movs	r2, r0
    16ba:	000b      	movs	r3, r1
    16bc:	9800      	ldr	r0, [sp, #0]
    16be:	9901      	ldr	r1, [sp, #4]
    16c0:	4c27      	ldr	r4, [pc, #156]	; (1760 <i2c_master_init+0x2f8>)
    16c2:	47a0      	blx	r4
    16c4:	2200      	movs	r2, #0
    16c6:	4b25      	ldr	r3, [pc, #148]	; (175c <i2c_master_init+0x2f4>)
    16c8:	4c23      	ldr	r4, [pc, #140]	; (1758 <i2c_master_init+0x2f0>)
    16ca:	47a0      	blx	r4
    16cc:	4b25      	ldr	r3, [pc, #148]	; (1764 <i2c_master_init+0x2fc>)
    16ce:	4798      	blx	r3
    16d0:	1e04      	subs	r4, r0, #0
		if (tmp_baudlow_hs) {
    16d2:	d00c      	beq.n	16ee <i2c_master_init+0x286>
			tmp_baud_hs = (int32_t)(fgclk / fscl_hs) - 2 - tmp_baudlow_hs;
    16d4:	0031      	movs	r1, r6
    16d6:	9807      	ldr	r0, [sp, #28]
    16d8:	4b25      	ldr	r3, [pc, #148]	; (1770 <i2c_master_init+0x308>)
    16da:	4798      	blx	r3
    16dc:	3802      	subs	r0, #2
    16de:	1b00      	subs	r0, r0, r4
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    16e0:	002b      	movs	r3, r5
    16e2:	2dff      	cmp	r5, #255	; 0xff
    16e4:	d80c      	bhi.n	1700 <i2c_master_init+0x298>
    16e6:	28ff      	cmp	r0, #255	; 0xff
    16e8:	d9bc      	bls.n	1664 <i2c_master_init+0x1fc>
    16ea:	2040      	movs	r0, #64	; 0x40
    16ec:	e6e6      	b.n	14bc <i2c_master_init+0x54>
			tmp_baud_hs = (int32_t)(div_ceil(fgclk, 2 * fscl_hs)) - 1;
    16ee:	0071      	lsls	r1, r6, #1
    16f0:	1e48      	subs	r0, r1, #1
    16f2:	9b07      	ldr	r3, [sp, #28]
    16f4:	469c      	mov	ip, r3
    16f6:	4460      	add	r0, ip
    16f8:	4b1d      	ldr	r3, [pc, #116]	; (1770 <i2c_master_init+0x308>)
    16fa:	4798      	blx	r3
    16fc:	3801      	subs	r0, #1
    16fe:	e7ef      	b.n	16e0 <i2c_master_init+0x278>
	if (tmp_baud > 255 || tmp_baud < 0 || tmp_baud_hs > 255 || tmp_baud_hs < 0) {
    1700:	2040      	movs	r0, #64	; 0x40
    1702:	e6db      	b.n	14bc <i2c_master_init+0x54>
			MCLK->APBDMASK.reg |= mask;
    1704:	4a04      	ldr	r2, [pc, #16]	; (1718 <i2c_master_init+0x2b0>)
    1706:	6a13      	ldr	r3, [r2, #32]
    1708:	2102      	movs	r1, #2
    170a:	430b      	orrs	r3, r1
    170c:	6213      	str	r3, [r2, #32]
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    170e:	2518      	movs	r5, #24
    1710:	e6c2      	b.n	1498 <i2c_master_init+0x30>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	000020a9 	.word	0x000020a9
    1718:	40000400 	.word	0x40000400
    171c:	000032fd 	.word	0x000032fd
    1720:	0000328d 	.word	0x0000328d
    1724:	00001f01 	.word	0x00001f01
    1728:	00001b9d 	.word	0x00001b9d
    172c:	000020e5 	.word	0x000020e5
    1730:	200010cc 	.word	0x200010cc
    1734:	000033f9 	.word	0x000033f9
    1738:	41002000 	.word	0x41002000
    173c:	00003321 	.word	0x00003321
    1740:	0001597d 	.word	0x0001597d
    1744:	00014d65 	.word	0x00014d65
    1748:	e826d695 	.word	0xe826d695
    174c:	3e112e0b 	.word	0x3e112e0b
    1750:	000140dd 	.word	0x000140dd
    1754:	40240000 	.word	0x40240000
    1758:	00015265 	.word	0x00015265
    175c:	3ff00000 	.word	0x3ff00000
    1760:	000146fd 	.word	0x000146fd
    1764:	00015891 	.word	0x00015891
    1768:	00001f4d 	.word	0x00001f4d
    176c:	40080000 	.word	0x40080000
    1770:	00012d11 	.word	0x00012d11

00001774 <_i2c_master_address_response>:
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1774:	6803      	ldr	r3, [r0, #0]

	/* Check for error and ignore bus-error; workaround for BUSSTATE stuck in
	 * BUSY */
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1776:	7e1a      	ldrb	r2, [r3, #24]
    1778:	0792      	lsls	r2, r2, #30
    177a:	d507      	bpl.n	178c <_i2c_master_address_response+0x18>

		/* Clear write interrupt flag */
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    177c:	2202      	movs	r2, #2
    177e:	761a      	strb	r2, [r3, #24]

		/* Check arbitration. */
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1780:	8b5b      	ldrh	r3, [r3, #26]
    1782:	079b      	lsls	r3, r3, #30
			/* Return packet collision. */
			return STATUS_ERR_PACKET_COLLISION;
    1784:	2041      	movs	r0, #65	; 0x41

		/* Return bad address value. */
		return STATUS_ERR_BAD_ADDRESS;
	}

	return STATUS_OK;
    1786:	17db      	asrs	r3, r3, #31
    1788:	4018      	ands	r0, r3
}
    178a:	4770      	bx	lr
	} else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    178c:	8b5a      	ldrh	r2, [r3, #26]
    178e:	0752      	lsls	r2, r2, #29
    1790:	d506      	bpl.n	17a0 <_i2c_master_address_response+0x2c>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1792:	6859      	ldr	r1, [r3, #4]
    1794:	22c0      	movs	r2, #192	; 0xc0
    1796:	0292      	lsls	r2, r2, #10
    1798:	430a      	orrs	r2, r1
    179a:	605a      	str	r2, [r3, #4]
		return STATUS_ERR_BAD_ADDRESS;
    179c:	2018      	movs	r0, #24
    179e:	e7f4      	b.n	178a <_i2c_master_address_response+0x16>
	return STATUS_OK;
    17a0:	2000      	movs	r0, #0
    17a2:	e7f2      	b.n	178a <_i2c_master_address_response+0x16>

000017a4 <_i2c_master_wait_for_bus>:
 * \retval STATUS_ERR_TIMEOUT  If no response was given within specified timeout
 *                             period
 */
enum status_code _i2c_master_wait_for_bus(
		struct i2c_master_module *const module)
{
    17a4:	b530      	push	{r4, r5, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17a6:	6802      	ldr	r2, [r0, #0]

	/* Wait for reply. */
	uint16_t timeout_counter = 0;
    17a8:	2300      	movs	r3, #0
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17aa:	2401      	movs	r4, #1
    17ac:	2502      	movs	r5, #2
    17ae:	7e11      	ldrb	r1, [r2, #24]
    17b0:	4221      	tst	r1, r4
    17b2:	d10b      	bne.n	17cc <_i2c_master_wait_for_bus+0x28>
			!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB)) {
    17b4:	7e11      	ldrb	r1, [r2, #24]
	while (!(i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB) &&
    17b6:	4229      	tst	r1, r5
    17b8:	d106      	bne.n	17c8 <_i2c_master_wait_for_bus+0x24>

		/* Check timeout condition. */
		if (++timeout_counter >= module->buffer_timeout) {
    17ba:	3301      	adds	r3, #1
    17bc:	b29b      	uxth	r3, r3
    17be:	8901      	ldrh	r1, [r0, #8]
    17c0:	4299      	cmp	r1, r3
    17c2:	d8f4      	bhi.n	17ae <_i2c_master_wait_for_bus+0xa>
			return STATUS_ERR_TIMEOUT;
    17c4:	2012      	movs	r0, #18
    17c6:	e002      	b.n	17ce <_i2c_master_wait_for_bus+0x2a>
		}
	}
	return STATUS_OK;
    17c8:	2000      	movs	r0, #0
    17ca:	e000      	b.n	17ce <_i2c_master_wait_for_bus+0x2a>
    17cc:	2000      	movs	r0, #0
}
    17ce:	bd30      	pop	{r4, r5, pc}

000017d0 <_i2c_master_send_hs_master_code>:
 * \retval STATUS_OK           No error happen
 */
enum status_code _i2c_master_send_hs_master_code(
		struct i2c_master_module *const module,
		uint8_t hs_master_code)
{
    17d0:	b510      	push	{r4, lr}
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    17d2:	6804      	ldr	r4, [r0, #0]
	/* Return value. */
	enum status_code tmp_status;

	/* Set NACK for high speed code */
	i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    17d4:	6862      	ldr	r2, [r4, #4]
    17d6:	2380      	movs	r3, #128	; 0x80
    17d8:	02db      	lsls	r3, r3, #11
    17da:	4313      	orrs	r3, r2
    17dc:	6063      	str	r3, [r4, #4]
	/* Send high speed code */
	i2c_module->ADDR.reg = hs_master_code;
    17de:	6261      	str	r1, [r4, #36]	; 0x24
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    17e0:	4b02      	ldr	r3, [pc, #8]	; (17ec <_i2c_master_send_hs_master_code+0x1c>)
    17e2:	4798      	blx	r3
	/* Clear write interrupt flag */
	i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    17e4:	2301      	movs	r3, #1
    17e6:	7623      	strb	r3, [r4, #24]

	return tmp_status;
}
    17e8:	bd10      	pop	{r4, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	000017a5 	.word	0x000017a5

000017f0 <_i2c_master_read_packet>:
 *
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    17f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    17f2:	46de      	mov	lr, fp
    17f4:	4657      	mov	r7, sl
    17f6:	464e      	mov	r6, r9
    17f8:	4645      	mov	r5, r8
    17fa:	b5e0      	push	{r5, r6, r7, lr}
    17fc:	b083      	sub	sp, #12
    17fe:	0006      	movs	r6, r0
    1800:	4689      	mov	r9, r1
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1802:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    1804:	884c      	ldrh	r4, [r1, #2]

	/* Written buffer counter. */
	uint16_t counter = 0;

	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1806:	682b      	ldr	r3, [r5, #0]
    1808:	011b      	lsls	r3, r3, #4
    180a:	0fdb      	lsrs	r3, r3, #31
    180c:	469a      	mov	sl, r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    180e:	7a4b      	ldrb	r3, [r1, #9]
    1810:	2b00      	cmp	r3, #0
    1812:	d12b      	bne.n	186c <_i2c_master_read_packet+0x7c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1814:	686b      	ldr	r3, [r5, #4]
    1816:	4a58      	ldr	r2, [pc, #352]	; (1978 <_i2c_master_read_packet+0x188>)
    1818:	4013      	ands	r3, r2
    181a:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    181c:	464b      	mov	r3, r9
    181e:	7a1b      	ldrb	r3, [r3, #8]
    1820:	2b00      	cmp	r3, #0
    1822:	d127      	bne.n	1874 <_i2c_master_read_packet+0x84>
				I2C_TRANSFER_READ;
		} else {
			return tmp_status;
		}
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1824:	464b      	mov	r3, r9
    1826:	881b      	ldrh	r3, [r3, #0]
    1828:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    182a:	464a      	mov	r2, r9
    182c:	7a52      	ldrb	r2, [r2, #9]
    182e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_READ |
    1830:	4313      	orrs	r3, r2
    1832:	2201      	movs	r2, #1
    1834:	4313      	orrs	r3, r2
    1836:	626b      	str	r3, [r5, #36]	; 0x24
	}

	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    1838:	0030      	movs	r0, r6
    183a:	4b50      	ldr	r3, [pc, #320]	; (197c <_i2c_master_read_packet+0x18c>)
    183c:	4798      	blx	r3
    183e:	9001      	str	r0, [sp, #4]

	/* Set action to ack or nack. */
	if ((sclsm_flag) && (packet->data_length == 1)) {
    1840:	4653      	mov	r3, sl
    1842:	2b00      	cmp	r3, #0
    1844:	d003      	beq.n	184e <_i2c_master_read_packet+0x5e>
    1846:	464b      	mov	r3, r9
    1848:	885b      	ldrh	r3, [r3, #2]
    184a:	2b01      	cmp	r3, #1
    184c:	d03b      	beq.n	18c6 <_i2c_master_read_packet+0xd6>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
	} else {
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;	
    184e:	686b      	ldr	r3, [r5, #4]
    1850:	4a49      	ldr	r2, [pc, #292]	; (1978 <_i2c_master_read_packet+0x188>)
    1852:	4013      	ands	r3, r2
    1854:	606b      	str	r3, [r5, #4]
	}

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    1856:	9b01      	ldr	r3, [sp, #4]
    1858:	2b00      	cmp	r3, #0
    185a:	d03a      	beq.n	18d2 <_i2c_master_read_packet+0xe2>
		_i2c_master_wait_for_sync(module);
		packet->data[counter] = i2c_module->DATA.reg;
	}

	return tmp_status;
}
    185c:	9801      	ldr	r0, [sp, #4]
    185e:	b003      	add	sp, #12
    1860:	bc3c      	pop	{r2, r3, r4, r5}
    1862:	4690      	mov	r8, r2
    1864:	4699      	mov	r9, r3
    1866:	46a2      	mov	sl, r4
    1868:	46ab      	mov	fp, r5
    186a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    186c:	7a89      	ldrb	r1, [r1, #10]
    186e:	4b44      	ldr	r3, [pc, #272]	; (1980 <_i2c_master_read_packet+0x190>)
    1870:	4798      	blx	r3
    1872:	e7cf      	b.n	1814 <_i2c_master_read_packet+0x24>
		i2c_module->ADDR.reg = (packet->address << 1) |
    1874:	464b      	mov	r3, r9
    1876:	881b      	ldrh	r3, [r3, #0]
    1878:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    187a:	464a      	mov	r2, r9
    187c:	7a52      	ldrb	r2, [r2, #9]
    187e:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) |
    1880:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    1882:	2280      	movs	r2, #128	; 0x80
    1884:	0212      	lsls	r2, r2, #8
    1886:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) |
    1888:	626b      	str	r3, [r5, #36]	; 0x24
		tmp_status = _i2c_master_wait_for_bus(module);
    188a:	0030      	movs	r0, r6
    188c:	4b3b      	ldr	r3, [pc, #236]	; (197c <_i2c_master_read_packet+0x18c>)
    188e:	4798      	blx	r3
    1890:	9001      	str	r0, [sp, #4]
		i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    1892:	686b      	ldr	r3, [r5, #4]
    1894:	4a38      	ldr	r2, [pc, #224]	; (1978 <_i2c_master_read_packet+0x188>)
    1896:	4013      	ands	r3, r2
    1898:	606b      	str	r3, [r5, #4]
		if (tmp_status == STATUS_OK) {
    189a:	2800      	cmp	r0, #0
    189c:	d1de      	bne.n	185c <_i2c_master_read_packet+0x6c>
			tmp_status = _i2c_master_address_response(module);
    189e:	0030      	movs	r0, r6
    18a0:	4b38      	ldr	r3, [pc, #224]	; (1984 <_i2c_master_read_packet+0x194>)
    18a2:	4798      	blx	r3
    18a4:	9001      	str	r0, [sp, #4]
		if (tmp_status == STATUS_OK) {
    18a6:	2800      	cmp	r0, #0
    18a8:	d1d8      	bne.n	185c <_i2c_master_read_packet+0x6c>
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    18aa:	464b      	mov	r3, r9
    18ac:	881b      	ldrh	r3, [r3, #0]
    18ae:	0a1b      	lsrs	r3, r3, #8
    18b0:	2278      	movs	r2, #120	; 0x78
    18b2:	4313      	orrs	r3, r2
    18b4:	005b      	lsls	r3, r3, #1
				(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    18b6:	464a      	mov	r2, r9
    18b8:	7a52      	ldrb	r2, [r2, #9]
    18ba:	0392      	lsls	r2, r2, #14
    18bc:	2101      	movs	r1, #1
    18be:	430a      	orrs	r2, r1
    18c0:	4313      	orrs	r3, r2
			i2c_module->ADDR.reg = (((packet->address >> 8) | 0x78) << 1) |
    18c2:	626b      	str	r3, [r5, #36]	; 0x24
    18c4:	e7b8      	b.n	1838 <_i2c_master_read_packet+0x48>
		i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    18c6:	686a      	ldr	r2, [r5, #4]
    18c8:	2380      	movs	r3, #128	; 0x80
    18ca:	02db      	lsls	r3, r3, #11
    18cc:	4313      	orrs	r3, r2
    18ce:	606b      	str	r3, [r5, #4]
    18d0:	e7c1      	b.n	1856 <_i2c_master_read_packet+0x66>
		tmp_status = _i2c_master_address_response(module);
    18d2:	0030      	movs	r0, r6
    18d4:	4b2b      	ldr	r3, [pc, #172]	; (1984 <_i2c_master_read_packet+0x194>)
    18d6:	4798      	blx	r3
    18d8:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    18da:	2800      	cmp	r0, #0
    18dc:	d1be      	bne.n	185c <_i2c_master_read_packet+0x6c>
    18de:	3c01      	subs	r4, #1
    18e0:	b2a4      	uxth	r4, r4
    18e2:	4680      	mov	r8, r0
		while (tmp_data_length--) {
    18e4:	4b28      	ldr	r3, [pc, #160]	; (1988 <_i2c_master_read_packet+0x198>)
    18e6:	469b      	mov	fp, r3
    18e8:	e015      	b.n	1916 <_i2c_master_read_packet+0x126>
					((sclsm_flag) && (tmp_data_length == 1)))) {
    18ea:	2c01      	cmp	r4, #1
    18ec:	d020      	beq.n	1930 <_i2c_master_read_packet+0x140>
				_i2c_master_wait_for_sync(module);
    18ee:	0030      	movs	r0, r6
    18f0:	4b26      	ldr	r3, [pc, #152]	; (198c <_i2c_master_read_packet+0x19c>)
    18f2:	4798      	blx	r3
				packet->data[counter++] = i2c_module->DATA.reg;
    18f4:	4643      	mov	r3, r8
    18f6:	1c5f      	adds	r7, r3, #1
    18f8:	b2bf      	uxth	r7, r7
    18fa:	2328      	movs	r3, #40	; 0x28
    18fc:	5ceb      	ldrb	r3, [r5, r3]
    18fe:	464a      	mov	r2, r9
    1900:	6852      	ldr	r2, [r2, #4]
    1902:	4641      	mov	r1, r8
    1904:	5453      	strb	r3, [r2, r1]
				tmp_status = _i2c_master_wait_for_bus(module);
    1906:	0030      	movs	r0, r6
    1908:	4b1c      	ldr	r3, [pc, #112]	; (197c <_i2c_master_read_packet+0x18c>)
    190a:	4798      	blx	r3
    190c:	3c01      	subs	r4, #1
    190e:	b2a4      	uxth	r4, r4
			if (tmp_status != STATUS_OK) {
    1910:	2800      	cmp	r0, #0
    1912:	d115      	bne.n	1940 <_i2c_master_read_packet+0x150>
				packet->data[counter++] = i2c_module->DATA.reg;
    1914:	46b8      	mov	r8, r7
		while (tmp_data_length--) {
    1916:	455c      	cmp	r4, fp
    1918:	d014      	beq.n	1944 <_i2c_master_read_packet+0x154>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    191a:	8b6b      	ldrh	r3, [r5, #26]
    191c:	069b      	lsls	r3, r3, #26
    191e:	d527      	bpl.n	1970 <_i2c_master_read_packet+0x180>
			if (module->send_nack && (((!sclsm_flag) && (tmp_data_length == 0)) ||
    1920:	7af3      	ldrb	r3, [r6, #11]
    1922:	2b00      	cmp	r3, #0
    1924:	d0e3      	beq.n	18ee <_i2c_master_read_packet+0xfe>
    1926:	4653      	mov	r3, sl
    1928:	2b00      	cmp	r3, #0
    192a:	d1de      	bne.n	18ea <_i2c_master_read_packet+0xfa>
    192c:	2c00      	cmp	r4, #0
    192e:	d1de      	bne.n	18ee <_i2c_master_read_packet+0xfe>
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1930:	686a      	ldr	r2, [r5, #4]
    1932:	2380      	movs	r3, #128	; 0x80
    1934:	02db      	lsls	r3, r3, #11
    1936:	4313      	orrs	r3, r2
    1938:	606b      	str	r3, [r5, #4]
    193a:	3c01      	subs	r4, #1
    193c:	b2a4      	uxth	r4, r4
    193e:	e7ea      	b.n	1916 <_i2c_master_read_packet+0x126>
				packet->data[counter++] = i2c_module->DATA.reg;
    1940:	46b8      	mov	r8, r7
				tmp_status = _i2c_master_wait_for_bus(module);
    1942:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1944:	7ab3      	ldrb	r3, [r6, #10]
    1946:	2b00      	cmp	r3, #0
    1948:	d109      	bne.n	195e <_i2c_master_read_packet+0x16e>
		_i2c_master_wait_for_sync(module);
    194a:	0030      	movs	r0, r6
    194c:	4b0f      	ldr	r3, [pc, #60]	; (198c <_i2c_master_read_packet+0x19c>)
    194e:	4798      	blx	r3
		packet->data[counter] = i2c_module->DATA.reg;
    1950:	2328      	movs	r3, #40	; 0x28
    1952:	5cea      	ldrb	r2, [r5, r3]
    1954:	464b      	mov	r3, r9
    1956:	685b      	ldr	r3, [r3, #4]
    1958:	4641      	mov	r1, r8
    195a:	545a      	strb	r2, [r3, r1]
    195c:	e77e      	b.n	185c <_i2c_master_read_packet+0x6c>
			_i2c_master_wait_for_sync(module);
    195e:	0030      	movs	r0, r6
    1960:	4b0a      	ldr	r3, [pc, #40]	; (198c <_i2c_master_read_packet+0x19c>)
    1962:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1964:	686a      	ldr	r2, [r5, #4]
    1966:	23c0      	movs	r3, #192	; 0xc0
    1968:	029b      	lsls	r3, r3, #10
    196a:	4313      	orrs	r3, r2
    196c:	606b      	str	r3, [r5, #4]
    196e:	e7ec      	b.n	194a <_i2c_master_read_packet+0x15a>
				return STATUS_ERR_PACKET_COLLISION;
    1970:	2341      	movs	r3, #65	; 0x41
    1972:	9301      	str	r3, [sp, #4]
    1974:	e772      	b.n	185c <_i2c_master_read_packet+0x6c>
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	fffbffff 	.word	0xfffbffff
    197c:	000017a5 	.word	0x000017a5
    1980:	000017d1 	.word	0x000017d1
    1984:	00001775 	.word	0x00001775
    1988:	0000ffff 	.word	0x0000ffff
    198c:	0000145d 	.word	0x0000145d

00001990 <_i2c_master_write_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1990:	b5f0      	push	{r4, r5, r6, r7, lr}
    1992:	46de      	mov	lr, fp
    1994:	4657      	mov	r7, sl
    1996:	464e      	mov	r6, r9
    1998:	4645      	mov	r5, r8
    199a:	b5e0      	push	{r5, r6, r7, lr}
    199c:	b083      	sub	sp, #12
    199e:	0006      	movs	r6, r0
    19a0:	000f      	movs	r7, r1
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    19a2:	6805      	ldr	r5, [r0, #0]

	/* Return value. */
	enum status_code tmp_status;
	uint16_t tmp_data_length = packet->data_length;
    19a4:	884c      	ldrh	r4, [r1, #2]

	_i2c_master_wait_for_sync(module);
    19a6:	4b32      	ldr	r3, [pc, #200]	; (1a70 <_i2c_master_write_packet+0xe0>)
    19a8:	4798      	blx	r3

	/* Switch to high speed mode */
	if (packet->high_speed) {
    19aa:	7a7b      	ldrb	r3, [r7, #9]
    19ac:	2b00      	cmp	r3, #0
    19ae:	d11d      	bne.n	19ec <_i2c_master_write_packet+0x5c>
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
	}

	/* Set action to ACK. */
	i2c_module->CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
    19b0:	686b      	ldr	r3, [r5, #4]
    19b2:	4a30      	ldr	r2, [pc, #192]	; (1a74 <_i2c_master_write_packet+0xe4>)
    19b4:	4013      	ands	r3, r2
    19b6:	606b      	str	r3, [r5, #4]

	/* Set address and direction bit. Will send start command on bus. */
	if (packet->ten_bit_address) {
    19b8:	7a3b      	ldrb	r3, [r7, #8]
    19ba:	2b00      	cmp	r3, #0
    19bc:	d01b      	beq.n	19f6 <_i2c_master_write_packet+0x66>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19be:	883b      	ldrh	r3, [r7, #0]
    19c0:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    19c2:	7a7a      	ldrb	r2, [r7, #9]
    19c4:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19c6:	4313      	orrs	r3, r2
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos) |
    19c8:	2280      	movs	r2, #128	; 0x80
    19ca:	0212      	lsls	r2, r2, #8
    19cc:	4313      	orrs	r3, r2
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19ce:	626b      	str	r3, [r5, #36]	; 0x24
	} else {
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
	}
	/* Wait for response on bus. */
	tmp_status = _i2c_master_wait_for_bus(module);
    19d0:	0030      	movs	r0, r6
    19d2:	4b29      	ldr	r3, [pc, #164]	; (1a78 <_i2c_master_write_packet+0xe8>)
    19d4:	4798      	blx	r3
    19d6:	9001      	str	r0, [sp, #4]

	/* Check for address response error unless previous error is
	 * detected. */
	if (tmp_status == STATUS_OK) {
    19d8:	2800      	cmp	r0, #0
    19da:	d013      	beq.n	1a04 <_i2c_master_write_packet+0x74>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}

	return tmp_status;
}
    19dc:	9801      	ldr	r0, [sp, #4]
    19de:	b003      	add	sp, #12
    19e0:	bc3c      	pop	{r2, r3, r4, r5}
    19e2:	4690      	mov	r8, r2
    19e4:	4699      	mov	r9, r3
    19e6:	46a2      	mov	sl, r4
    19e8:	46ab      	mov	fp, r5
    19ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		_i2c_master_send_hs_master_code(module, packet->hs_master_code);
    19ec:	7ab9      	ldrb	r1, [r7, #10]
    19ee:	0030      	movs	r0, r6
    19f0:	4b22      	ldr	r3, [pc, #136]	; (1a7c <_i2c_master_write_packet+0xec>)
    19f2:	4798      	blx	r3
    19f4:	e7dc      	b.n	19b0 <_i2c_master_write_packet+0x20>
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19f6:	883b      	ldrh	r3, [r7, #0]
    19f8:	005b      	lsls	r3, r3, #1
			(packet->high_speed << SERCOM_I2CM_ADDR_HS_Pos);
    19fa:	7a7a      	ldrb	r2, [r7, #9]
    19fc:	0392      	lsls	r2, r2, #14
		i2c_module->ADDR.reg = (packet->address << 1) | I2C_TRANSFER_WRITE |
    19fe:	4313      	orrs	r3, r2
    1a00:	626b      	str	r3, [r5, #36]	; 0x24
    1a02:	e7e5      	b.n	19d0 <_i2c_master_write_packet+0x40>
		tmp_status = _i2c_master_address_response(module);
    1a04:	0030      	movs	r0, r6
    1a06:	4b1e      	ldr	r3, [pc, #120]	; (1a80 <_i2c_master_write_packet+0xf0>)
    1a08:	4798      	blx	r3
    1a0a:	1e03      	subs	r3, r0, #0
    1a0c:	9001      	str	r0, [sp, #4]
	if (tmp_status == STATUS_OK) {
    1a0e:	d1e5      	bne.n	19dc <_i2c_master_write_packet+0x4c>
    1a10:	46a0      	mov	r8, r4
    1a12:	2400      	movs	r4, #0
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1a14:	3320      	adds	r3, #32
    1a16:	4699      	mov	r9, r3
			_i2c_master_wait_for_sync(module);
    1a18:	4b15      	ldr	r3, [pc, #84]	; (1a70 <_i2c_master_write_packet+0xe0>)
    1a1a:	469b      	mov	fp, r3
			tmp_status = _i2c_master_wait_for_bus(module);
    1a1c:	4b16      	ldr	r3, [pc, #88]	; (1a78 <_i2c_master_write_packet+0xe8>)
    1a1e:	469a      	mov	sl, r3
		while (tmp_data_length--) {
    1a20:	4544      	cmp	r4, r8
    1a22:	d015      	beq.n	1a50 <_i2c_master_write_packet+0xc0>
			if (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) {
    1a24:	8b6b      	ldrh	r3, [r5, #26]
    1a26:	464a      	mov	r2, r9
    1a28:	4213      	tst	r3, r2
    1a2a:	d01d      	beq.n	1a68 <_i2c_master_write_packet+0xd8>
			_i2c_master_wait_for_sync(module);
    1a2c:	0030      	movs	r0, r6
    1a2e:	47d8      	blx	fp
			i2c_module->DATA.reg = packet->data[buffer_counter++];
    1a30:	687b      	ldr	r3, [r7, #4]
    1a32:	5d1a      	ldrb	r2, [r3, r4]
    1a34:	2328      	movs	r3, #40	; 0x28
    1a36:	54ea      	strb	r2, [r5, r3]
			tmp_status = _i2c_master_wait_for_bus(module);
    1a38:	0030      	movs	r0, r6
    1a3a:	47d0      	blx	sl
			if (tmp_status != STATUS_OK) {
    1a3c:	2800      	cmp	r0, #0
    1a3e:	d106      	bne.n	1a4e <_i2c_master_write_packet+0xbe>
			if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1a40:	8b6b      	ldrh	r3, [r5, #26]
    1a42:	3401      	adds	r4, #1
    1a44:	075b      	lsls	r3, r3, #29
    1a46:	d5eb      	bpl.n	1a20 <_i2c_master_write_packet+0x90>
				tmp_status = STATUS_ERR_OVERFLOW;
    1a48:	231e      	movs	r3, #30
    1a4a:	9301      	str	r3, [sp, #4]
    1a4c:	e000      	b.n	1a50 <_i2c_master_write_packet+0xc0>
			tmp_status = _i2c_master_wait_for_bus(module);
    1a4e:	9001      	str	r0, [sp, #4]
		if (module->send_stop) {
    1a50:	7ab3      	ldrb	r3, [r6, #10]
    1a52:	2b00      	cmp	r3, #0
    1a54:	d0c2      	beq.n	19dc <_i2c_master_write_packet+0x4c>
			_i2c_master_wait_for_sync(module);
    1a56:	0030      	movs	r0, r6
    1a58:	4b05      	ldr	r3, [pc, #20]	; (1a70 <_i2c_master_write_packet+0xe0>)
    1a5a:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1a5c:	686a      	ldr	r2, [r5, #4]
    1a5e:	23c0      	movs	r3, #192	; 0xc0
    1a60:	029b      	lsls	r3, r3, #10
    1a62:	4313      	orrs	r3, r2
    1a64:	606b      	str	r3, [r5, #4]
    1a66:	e7b9      	b.n	19dc <_i2c_master_write_packet+0x4c>
				return STATUS_ERR_PACKET_COLLISION;
    1a68:	2341      	movs	r3, #65	; 0x41
    1a6a:	9301      	str	r3, [sp, #4]
    1a6c:	e7b6      	b.n	19dc <_i2c_master_write_packet+0x4c>
    1a6e:	46c0      	nop			; (mov r8, r8)
    1a70:	0000145d 	.word	0x0000145d
    1a74:	fffbffff 	.word	0xfffbffff
    1a78:	000017a5 	.word	0x000017a5
    1a7c:	000017d1 	.word	0x000017d1
    1a80:	00001775 	.word	0x00001775

00001a84 <i2c_master_read_packet_wait>:
{
    1a84:	b510      	push	{r4, lr}
	if (module->buffer_remaining > 0) {
    1a86:	8b83      	ldrh	r3, [r0, #28]
    1a88:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1a8a:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1a8c:	2b00      	cmp	r3, #0
    1a8e:	d001      	beq.n	1a94 <i2c_master_read_packet_wait+0x10>
}
    1a90:	0010      	movs	r0, r2
    1a92:	bd10      	pop	{r4, pc}
	module->send_stop = true;
    1a94:	3301      	adds	r3, #1
    1a96:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1a98:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_read_packet(module, packet);
    1a9a:	4b02      	ldr	r3, [pc, #8]	; (1aa4 <i2c_master_read_packet_wait+0x20>)
    1a9c:	4798      	blx	r3
    1a9e:	0002      	movs	r2, r0
    1aa0:	e7f6      	b.n	1a90 <i2c_master_read_packet_wait+0xc>
    1aa2:	46c0      	nop			; (mov r8, r8)
    1aa4:	000017f1 	.word	0x000017f1

00001aa8 <i2c_master_write_packet_wait_no_stop>:
 *                                      more data
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
    1aa8:	b510      	push	{r4, lr}
	Assert(module->hw);
	Assert(packet);

#if I2C_MASTER_CALLBACK_MODE == true
	/* Check if the I2C module is busy with a job */
	if (module->buffer_remaining > 0) {
    1aaa:	8b83      	ldrh	r3, [r0, #28]
    1aac:	b29b      	uxth	r3, r3
		return STATUS_BUSY;
    1aae:	2205      	movs	r2, #5
	if (module->buffer_remaining > 0) {
    1ab0:	2b00      	cmp	r3, #0
    1ab2:	d001      	beq.n	1ab8 <i2c_master_write_packet_wait_no_stop+0x10>

	module->send_stop = false;
	module->send_nack = true;

	return _i2c_master_write_packet(module, packet);
}
    1ab4:	0010      	movs	r0, r2
    1ab6:	bd10      	pop	{r4, pc}
	module->send_stop = false;
    1ab8:	7283      	strb	r3, [r0, #10]
	module->send_nack = true;
    1aba:	3301      	adds	r3, #1
    1abc:	72c3      	strb	r3, [r0, #11]
	return _i2c_master_write_packet(module, packet);
    1abe:	4b02      	ldr	r3, [pc, #8]	; (1ac8 <i2c_master_write_packet_wait_no_stop+0x20>)
    1ac0:	4798      	blx	r3
    1ac2:	0002      	movs	r2, r0
    1ac4:	e7f6      	b.n	1ab4 <i2c_master_write_packet_wait_no_stop+0xc>
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	00001991 	.word	0x00001991

00001acc <_i2c_master_wait_for_sync>:
	SercomI2cm *const i2c_hw = &(module->hw->I2CM);
    1acc:	6801      	ldr	r1, [r0, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    1ace:	2207      	movs	r2, #7
    1ad0:	69cb      	ldr	r3, [r1, #28]
	while (i2c_master_is_syncing(module)) {
    1ad2:	421a      	tst	r2, r3
    1ad4:	d1fc      	bne.n	1ad0 <_i2c_master_wait_for_sync+0x4>
}
    1ad6:	4770      	bx	lr

00001ad8 <_i2c_master_read>:
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_read(
		struct i2c_master_module *const module)
{
    1ad8:	b570      	push	{r4, r5, r6, lr}
    1ada:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1adc:	6806      	ldr	r6, [r0, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1ade:	6832      	ldr	r2, [r6, #0]

	/* Find index to save next value in buffer */
	uint16_t buffer_index = module->buffer_length;
    1ae0:	8b45      	ldrh	r5, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1ae2:	8b83      	ldrh	r3, [r0, #28]
    1ae4:	1aed      	subs	r5, r5, r3
    1ae6:	b2ad      	uxth	r5, r5

	module->buffer_remaining--;
    1ae8:	8b83      	ldrh	r3, [r0, #28]
    1aea:	3b01      	subs	r3, #1
    1aec:	b29b      	uxth	r3, r3
    1aee:	8383      	strh	r3, [r0, #28]

	if (sclsm_flag) {
    1af0:	0113      	lsls	r3, r2, #4
    1af2:	d51d      	bpl.n	1b30 <_i2c_master_read+0x58>
		if (module->send_nack && module->buffer_remaining == 1) {
    1af4:	7ac3      	ldrb	r3, [r0, #11]
    1af6:	2b00      	cmp	r3, #0
    1af8:	d003      	beq.n	1b02 <_i2c_master_read+0x2a>
    1afa:	8b83      	ldrh	r3, [r0, #28]
    1afc:	b29b      	uxth	r3, r3
    1afe:	2b01      	cmp	r3, #1
    1b00:	d010      	beq.n	1b24 <_i2c_master_read+0x4c>
			/* Set action to NACK. */
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
		}
	}

	if (module->buffer_remaining == 0) {
    1b02:	8ba3      	ldrh	r3, [r4, #28]
    1b04:	b29b      	uxth	r3, r3
    1b06:	2b00      	cmp	r3, #0
    1b08:	d102      	bne.n	1b10 <_i2c_master_read+0x38>
		if (module->send_stop) {
    1b0a:	7aa3      	ldrb	r3, [r4, #10]
    1b0c:	2b00      	cmp	r3, #0
    1b0e:	d11c      	bne.n	1b4a <_i2c_master_read+0x72>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
		}
	}
	
	/* Read byte from slave and put in buffer */
	_i2c_master_wait_for_sync(module);
    1b10:	0020      	movs	r0, r4
    1b12:	4b12      	ldr	r3, [pc, #72]	; (1b5c <_i2c_master_read+0x84>)
    1b14:	4798      	blx	r3
	module->buffer[buffer_index] = i2c_module->DATA.reg;
    1b16:	6a23      	ldr	r3, [r4, #32]
    1b18:	195d      	adds	r5, r3, r5
    1b1a:	2328      	movs	r3, #40	; 0x28
    1b1c:	5cf3      	ldrb	r3, [r6, r3]
    1b1e:	b2db      	uxtb	r3, r3
    1b20:	702b      	strb	r3, [r5, #0]
}
    1b22:	bd70      	pop	{r4, r5, r6, pc}
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1b24:	6872      	ldr	r2, [r6, #4]
    1b26:	2380      	movs	r3, #128	; 0x80
    1b28:	02db      	lsls	r3, r3, #11
    1b2a:	4313      	orrs	r3, r2
    1b2c:	6073      	str	r3, [r6, #4]
    1b2e:	e7e8      	b.n	1b02 <_i2c_master_read+0x2a>
		if (module->send_nack && module->buffer_remaining == 0) {
    1b30:	7ac3      	ldrb	r3, [r0, #11]
    1b32:	2b00      	cmp	r3, #0
    1b34:	d0e5      	beq.n	1b02 <_i2c_master_read+0x2a>
    1b36:	8b83      	ldrh	r3, [r0, #28]
    1b38:	b29b      	uxth	r3, r3
    1b3a:	2b00      	cmp	r3, #0
    1b3c:	d1e1      	bne.n	1b02 <_i2c_master_read+0x2a>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1b3e:	6872      	ldr	r2, [r6, #4]
    1b40:	2380      	movs	r3, #128	; 0x80
    1b42:	02db      	lsls	r3, r3, #11
    1b44:	4313      	orrs	r3, r2
    1b46:	6073      	str	r3, [r6, #4]
    1b48:	e7db      	b.n	1b02 <_i2c_master_read+0x2a>
			_i2c_master_wait_for_sync(module);
    1b4a:	0020      	movs	r0, r4
    1b4c:	4b03      	ldr	r3, [pc, #12]	; (1b5c <_i2c_master_read+0x84>)
    1b4e:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1b50:	6872      	ldr	r2, [r6, #4]
    1b52:	23c0      	movs	r3, #192	; 0xc0
    1b54:	029b      	lsls	r3, r3, #10
    1b56:	4313      	orrs	r3, r2
    1b58:	6073      	str	r3, [r6, #4]
    1b5a:	e7d9      	b.n	1b10 <_i2c_master_read+0x38>
    1b5c:	00001acd 	.word	0x00001acd

00001b60 <_i2c_master_write>:
 * Write next data. Used by interrupt handler to send next data byte to slave.
 *
 * \param[in,out] module  Pointer to software module structure
 */
static void _i2c_master_write(struct i2c_master_module *const module)
{
    1b60:	b570      	push	{r4, r5, r6, lr}
    1b62:	0004      	movs	r4, r0
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1b64:	6805      	ldr	r5, [r0, #0]

	/* Check for ack from slave */
	if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK)
    1b66:	8b6b      	ldrh	r3, [r5, #26]
    1b68:	075b      	lsls	r3, r3, #29
    1b6a:	d503      	bpl.n	1b74 <_i2c_master_write+0x14>
	{
		/* Set status */
		module->status = STATUS_ERR_OVERFLOW;
    1b6c:	221e      	movs	r2, #30
    1b6e:	2325      	movs	r3, #37	; 0x25
    1b70:	54c2      	strb	r2, [r0, r3]
	module->buffer_remaining--;

	/* Write byte from buffer to slave */
	_i2c_master_wait_for_sync(module);
	i2c_module->DATA.reg = module->buffer[buffer_index];
}
    1b72:	bd70      	pop	{r4, r5, r6, pc}
	uint16_t buffer_index = module->buffer_length;
    1b74:	8b46      	ldrh	r6, [r0, #26]
	buffer_index -= module->buffer_remaining;
    1b76:	8b83      	ldrh	r3, [r0, #28]
    1b78:	1af6      	subs	r6, r6, r3
    1b7a:	b2b6      	uxth	r6, r6
	module->buffer_remaining--;
    1b7c:	8b83      	ldrh	r3, [r0, #28]
    1b7e:	3b01      	subs	r3, #1
    1b80:	b29b      	uxth	r3, r3
    1b82:	8383      	strh	r3, [r0, #28]
	_i2c_master_wait_for_sync(module);
    1b84:	4b04      	ldr	r3, [pc, #16]	; (1b98 <_i2c_master_write+0x38>)
    1b86:	4798      	blx	r3
	i2c_module->DATA.reg = module->buffer[buffer_index];
    1b88:	6a23      	ldr	r3, [r4, #32]
    1b8a:	199e      	adds	r6, r3, r6
    1b8c:	7833      	ldrb	r3, [r6, #0]
    1b8e:	b2db      	uxtb	r3, r3
    1b90:	2228      	movs	r2, #40	; 0x28
    1b92:	54ab      	strb	r3, [r5, r2]
    1b94:	e7ed      	b.n	1b72 <_i2c_master_write+0x12>
    1b96:	46c0      	nop			; (mov r8, r8)
    1b98:	00001acd 	.word	0x00001acd

00001b9c <_i2c_master_interrupt_handler>:
 *
 * \param[in] instance  SERCOM instance that triggered the interrupt
 */
void _i2c_master_interrupt_handler(
		uint8_t instance)
{
    1b9c:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling */
	struct i2c_master_module *module =
    1b9e:	0080      	lsls	r0, r0, #2
    1ba0:	4b75      	ldr	r3, [pc, #468]	; (1d78 <_i2c_master_interrupt_handler+0x1dc>)
    1ba2:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_master_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    1ba4:	6825      	ldr	r5, [r4, #0]
	bool sclsm_flag = i2c_module->CTRLA.bit.SCLSM;
    1ba6:	682b      	ldr	r3, [r5, #0]
    1ba8:	011b      	lsls	r3, r3, #4
    1baa:	0fda      	lsrs	r2, r3, #31

	/* Combine callback registered and enabled masks */
	uint8_t callback_mask = module->enabled_callback;
    1bac:	7e63      	ldrb	r3, [r4, #25]
	callback_mask &= module->registered_callback;
    1bae:	7e26      	ldrb	r6, [r4, #24]
    1bb0:	401e      	ands	r6, r3

	/* Check if the module should respond to address ack */
	if ((module->buffer_length <= 0) && (module->buffer_remaining > 0)) {
    1bb2:	8b63      	ldrh	r3, [r4, #26]
    1bb4:	b29b      	uxth	r3, r3
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d103      	bne.n	1bc2 <_i2c_master_interrupt_handler+0x26>
    1bba:	8ba3      	ldrh	r3, [r4, #28]
    1bbc:	b29b      	uxth	r3, r3
    1bbe:	2b00      	cmp	r3, #0
    1bc0:	d123      	bne.n	1c0a <_i2c_master_interrupt_handler+0x6e>
		/* Call function for address response */
		_i2c_master_async_address_response(module);

	/* Check if buffer write is done */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1bc2:	8b63      	ldrh	r3, [r4, #26]
    1bc4:	b29b      	uxth	r3, r3
    1bc6:	2b00      	cmp	r3, #0
    1bc8:	d008      	beq.n	1bdc <_i2c_master_interrupt_handler+0x40>
    1bca:	8ba3      	ldrh	r3, [r4, #28]
    1bcc:	b29b      	uxth	r3, r3
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d104      	bne.n	1bdc <_i2c_master_interrupt_handler+0x40>
			(module->status == STATUS_BUSY) &&
    1bd2:	3325      	adds	r3, #37	; 0x25
    1bd4:	5ce3      	ldrb	r3, [r4, r3]
	} else if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1bd6:	2b05      	cmp	r3, #5
    1bd8:	d100      	bne.n	1bdc <_i2c_master_interrupt_handler+0x40>
    1bda:	e06d      	b.n	1cb8 <_i2c_master_interrupt_handler+0x11c>
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}

	/* Continue buffer write/read */
	} else if ((module->buffer_length > 0) && (module->buffer_remaining > 0)){
    1bdc:	8b63      	ldrh	r3, [r4, #26]
    1bde:	b29b      	uxth	r3, r3
    1be0:	2b00      	cmp	r3, #0
    1be2:	d024      	beq.n	1c2e <_i2c_master_interrupt_handler+0x92>
    1be4:	8ba3      	ldrh	r3, [r4, #28]
    1be6:	b29b      	uxth	r3, r3
    1be8:	2b00      	cmp	r3, #0
    1bea:	d020      	beq.n	1c2e <_i2c_master_interrupt_handler+0x92>
		/* Check that bus ownership is not lost */
		if ((!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(2))) &&
    1bec:	8b6b      	ldrh	r3, [r5, #26]
    1bee:	069b      	lsls	r3, r3, #26
    1bf0:	d500      	bpl.n	1bf4 <_i2c_master_interrupt_handler+0x58>
    1bf2:	e081      	b.n	1cf8 <_i2c_master_interrupt_handler+0x15c>
    1bf4:	2a00      	cmp	r2, #0
    1bf6:	d004      	beq.n	1c02 <_i2c_master_interrupt_handler+0x66>
				(!(sclsm_flag && (module->buffer_remaining == 1))))	{
    1bf8:	8ba3      	ldrh	r3, [r4, #28]
    1bfa:	b29b      	uxth	r3, r3
    1bfc:	2b01      	cmp	r3, #1
    1bfe:	d100      	bne.n	1c02 <_i2c_master_interrupt_handler+0x66>
    1c00:	e07a      	b.n	1cf8 <_i2c_master_interrupt_handler+0x15c>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1c02:	2241      	movs	r2, #65	; 0x41
    1c04:	2325      	movs	r3, #37	; 0x25
    1c06:	54e2      	strb	r2, [r4, r3]
    1c08:	e011      	b.n	1c2e <_i2c_master_interrupt_handler+0x92>
	if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_MB)
    1c0a:	7e2b      	ldrb	r3, [r5, #24]
    1c0c:	07db      	lsls	r3, r3, #31
    1c0e:	d507      	bpl.n	1c20 <_i2c_master_interrupt_handler+0x84>
		i2c_module->INTFLAG.reg = SERCOM_I2CM_INTENCLR_MB;
    1c10:	2301      	movs	r3, #1
    1c12:	762b      	strb	r3, [r5, #24]
		if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_ARBLOST) {
    1c14:	8b6b      	ldrh	r3, [r5, #26]
    1c16:	079b      	lsls	r3, r3, #30
    1c18:	d52e      	bpl.n	1c78 <_i2c_master_interrupt_handler+0xdc>
			module->status = STATUS_ERR_PACKET_COLLISION;
    1c1a:	2241      	movs	r2, #65	; 0x41
    1c1c:	2325      	movs	r3, #37	; 0x25
    1c1e:	54e2      	strb	r2, [r4, r3]
	module->buffer_length = module->buffer_remaining;
    1c20:	8ba3      	ldrh	r3, [r4, #28]
    1c22:	b29b      	uxth	r3, r3
    1c24:	8363      	strh	r3, [r4, #26]
	if (module->status == STATUS_BUSY) {
    1c26:	2325      	movs	r3, #37	; 0x25
    1c28:	5ce3      	ldrb	r3, [r4, r3]
    1c2a:	2b05      	cmp	r3, #5
    1c2c:	d038      	beq.n	1ca0 <_i2c_master_interrupt_handler+0x104>
			_i2c_master_read(module);
		}
	}

	/* Check if read buffer transfer is complete */
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c2e:	8b63      	ldrh	r3, [r4, #26]
    1c30:	b29b      	uxth	r3, r3
    1c32:	2b00      	cmp	r3, #0
    1c34:	d007      	beq.n	1c46 <_i2c_master_interrupt_handler+0xaa>
    1c36:	8ba3      	ldrh	r3, [r4, #28]
    1c38:	b29b      	uxth	r3, r3
    1c3a:	2b00      	cmp	r3, #0
    1c3c:	d103      	bne.n	1c46 <_i2c_master_interrupt_handler+0xaa>
			(module->status == STATUS_BUSY) &&
    1c3e:	3325      	adds	r3, #37	; 0x25
    1c40:	5ce3      	ldrb	r3, [r4, r3]
	if ((module->buffer_length > 0) && (module->buffer_remaining <= 0) &&
    1c42:	2b05      	cmp	r3, #5
    1c44:	d064      	beq.n	1d10 <_i2c_master_interrupt_handler+0x174>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
		}
	}

	/* Check for error */
	if ((module->status != STATUS_BUSY) && (module->status != STATUS_OK)) {
    1c46:	2325      	movs	r3, #37	; 0x25
    1c48:	5ce3      	ldrb	r3, [r4, r3]
    1c4a:	2b05      	cmp	r3, #5
    1c4c:	d013      	beq.n	1c76 <_i2c_master_interrupt_handler+0xda>
    1c4e:	2325      	movs	r3, #37	; 0x25
    1c50:	5ce3      	ldrb	r3, [r4, r3]
    1c52:	2b00      	cmp	r3, #0
    1c54:	d00f      	beq.n	1c76 <_i2c_master_interrupt_handler+0xda>
		/* Stop packet operation */
		i2c_module->INTENCLR.reg = SERCOM_I2CM_INTENCLR_MB |
    1c56:	2303      	movs	r3, #3
    1c58:	752b      	strb	r3, [r5, #20]
				SERCOM_I2CM_INTENCLR_SB;

		module->buffer_length = 0;
    1c5a:	2300      	movs	r3, #0
    1c5c:	8363      	strh	r3, [r4, #26]
		module->buffer_remaining = 0;
    1c5e:	83a3      	strh	r3, [r4, #28]

		/* Send nack and stop command unless arbitration is lost */
		if ((module->status != STATUS_ERR_PACKET_COLLISION) &&
    1c60:	3325      	adds	r3, #37	; 0x25
    1c62:	5ce3      	ldrb	r3, [r4, r3]
    1c64:	2b41      	cmp	r3, #65	; 0x41
    1c66:	d003      	beq.n	1c70 <_i2c_master_interrupt_handler+0xd4>
    1c68:	7aa3      	ldrb	r3, [r4, #10]
    1c6a:	2b00      	cmp	r3, #0
    1c6c:	d000      	beq.n	1c70 <_i2c_master_interrupt_handler+0xd4>
    1c6e:	e075      	b.n	1d5c <_i2c_master_interrupt_handler+0x1c0>
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
					SERCOM_I2CM_CTRLB_CMD(3);
		}

		/* Call error callback if enabled and registered */
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_ERROR)) {
    1c70:	0773      	lsls	r3, r6, #29
    1c72:	d500      	bpl.n	1c76 <_i2c_master_interrupt_handler+0xda>
    1c74:	e07b      	b.n	1d6e <_i2c_master_interrupt_handler+0x1d2>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
		}
	}
}
    1c76:	bd70      	pop	{r4, r5, r6, pc}
		else if (i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_RXNACK) {
    1c78:	8b6b      	ldrh	r3, [r5, #26]
    1c7a:	075b      	lsls	r3, r3, #29
    1c7c:	d5d0      	bpl.n	1c20 <_i2c_master_interrupt_handler+0x84>
			module->status           = STATUS_ERR_BAD_ADDRESS;
    1c7e:	2218      	movs	r2, #24
    1c80:	2325      	movs	r3, #37	; 0x25
    1c82:	54e2      	strb	r2, [r4, r3]
			module->buffer_remaining = 0;
    1c84:	2300      	movs	r3, #0
    1c86:	83a3      	strh	r3, [r4, #28]
			if (module->send_stop) {
    1c88:	7aa3      	ldrb	r3, [r4, #10]
    1c8a:	2b00      	cmp	r3, #0
    1c8c:	d0c8      	beq.n	1c20 <_i2c_master_interrupt_handler+0x84>
				_i2c_master_wait_for_sync(module);
    1c8e:	0020      	movs	r0, r4
    1c90:	4b3a      	ldr	r3, [pc, #232]	; (1d7c <_i2c_master_interrupt_handler+0x1e0>)
    1c92:	4798      	blx	r3
				i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1c94:	686a      	ldr	r2, [r5, #4]
    1c96:	23c0      	movs	r3, #192	; 0xc0
    1c98:	029b      	lsls	r3, r3, #10
    1c9a:	4313      	orrs	r3, r2
    1c9c:	606b      	str	r3, [r5, #4]
    1c9e:	e7bf      	b.n	1c20 <_i2c_master_interrupt_handler+0x84>
		if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1ca0:	331f      	adds	r3, #31
    1ca2:	5ce3      	ldrb	r3, [r4, r3]
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	d003      	beq.n	1cb0 <_i2c_master_interrupt_handler+0x114>
			_i2c_master_read(module);
    1ca8:	0020      	movs	r0, r4
    1caa:	4b35      	ldr	r3, [pc, #212]	; (1d80 <_i2c_master_interrupt_handler+0x1e4>)
    1cac:	4798      	blx	r3
    1cae:	e7be      	b.n	1c2e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_write(module);
    1cb0:	0020      	movs	r0, r4
    1cb2:	4b34      	ldr	r3, [pc, #208]	; (1d84 <_i2c_master_interrupt_handler+0x1e8>)
    1cb4:	4798      	blx	r3
    1cb6:	e7ba      	b.n	1c2e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1cb8:	331f      	adds	r3, #31
    1cba:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1cbc:	2b00      	cmp	r3, #0
    1cbe:	d000      	beq.n	1cc2 <_i2c_master_interrupt_handler+0x126>
    1cc0:	e78c      	b.n	1bdc <_i2c_master_interrupt_handler+0x40>
		i2c_module->INTENCLR.reg =
    1cc2:	3303      	adds	r3, #3
    1cc4:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1cc6:	2300      	movs	r3, #0
    1cc8:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1cca:	3325      	adds	r3, #37	; 0x25
    1ccc:	2200      	movs	r2, #0
    1cce:	54e2      	strb	r2, [r4, r3]
		if (module->send_stop) {
    1cd0:	7aa3      	ldrb	r3, [r4, #10]
    1cd2:	2b00      	cmp	r3, #0
    1cd4:	d107      	bne.n	1ce6 <_i2c_master_interrupt_handler+0x14a>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1cd6:	2301      	movs	r3, #1
    1cd8:	762b      	strb	r3, [r5, #24]
		if (callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE)) {
    1cda:	07f3      	lsls	r3, r6, #31
    1cdc:	d5a7      	bpl.n	1c2e <_i2c_master_interrupt_handler+0x92>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1cde:	68e3      	ldr	r3, [r4, #12]
    1ce0:	0020      	movs	r0, r4
    1ce2:	4798      	blx	r3
    1ce4:	e7a3      	b.n	1c2e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_wait_for_sync(module);
    1ce6:	0020      	movs	r0, r4
    1ce8:	4b24      	ldr	r3, [pc, #144]	; (1d7c <_i2c_master_interrupt_handler+0x1e0>)
    1cea:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(3);
    1cec:	686a      	ldr	r2, [r5, #4]
    1cee:	23c0      	movs	r3, #192	; 0xc0
    1cf0:	029b      	lsls	r3, r3, #10
    1cf2:	4313      	orrs	r3, r2
    1cf4:	606b      	str	r3, [r5, #4]
    1cf6:	e7f0      	b.n	1cda <_i2c_master_interrupt_handler+0x13e>
		} else if (module->transfer_direction == I2C_TRANSFER_WRITE) {
    1cf8:	2324      	movs	r3, #36	; 0x24
    1cfa:	5ce3      	ldrb	r3, [r4, r3]
    1cfc:	2b00      	cmp	r3, #0
    1cfe:	d103      	bne.n	1d08 <_i2c_master_interrupt_handler+0x16c>
			_i2c_master_write(module);
    1d00:	0020      	movs	r0, r4
    1d02:	4b20      	ldr	r3, [pc, #128]	; (1d84 <_i2c_master_interrupt_handler+0x1e8>)
    1d04:	4798      	blx	r3
    1d06:	e792      	b.n	1c2e <_i2c_master_interrupt_handler+0x92>
			_i2c_master_read(module);
    1d08:	0020      	movs	r0, r4
    1d0a:	4b1d      	ldr	r3, [pc, #116]	; (1d80 <_i2c_master_interrupt_handler+0x1e4>)
    1d0c:	4798      	blx	r3
    1d0e:	e78e      	b.n	1c2e <_i2c_master_interrupt_handler+0x92>
			(module->transfer_direction == I2C_TRANSFER_READ)) {
    1d10:	331f      	adds	r3, #31
    1d12:	5ce3      	ldrb	r3, [r4, r3]
			(module->status == STATUS_BUSY) &&
    1d14:	2b01      	cmp	r3, #1
    1d16:	d196      	bne.n	1c46 <_i2c_master_interrupt_handler+0xaa>
		if (i2c_module->INTFLAG.reg & SERCOM_I2CM_INTFLAG_SB) {
    1d18:	7e2b      	ldrb	r3, [r5, #24]
    1d1a:	079b      	lsls	r3, r3, #30
    1d1c:	d501      	bpl.n	1d22 <_i2c_master_interrupt_handler+0x186>
			i2c_module->INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1d1e:	2302      	movs	r3, #2
    1d20:	762b      	strb	r3, [r5, #24]
		i2c_module->INTENCLR.reg =
    1d22:	2303      	movs	r3, #3
    1d24:	752b      	strb	r3, [r5, #20]
		module->buffer_length = 0;
    1d26:	2300      	movs	r3, #0
    1d28:	8363      	strh	r3, [r4, #26]
		module->status        = STATUS_OK;
    1d2a:	3325      	adds	r3, #37	; 0x25
    1d2c:	2200      	movs	r2, #0
    1d2e:	54e2      	strb	r2, [r4, r3]
		if ((callback_mask & (1 << I2C_MASTER_CALLBACK_READ_COMPLETE))
    1d30:	07b3      	lsls	r3, r6, #30
    1d32:	d503      	bpl.n	1d3c <_i2c_master_interrupt_handler+0x1a0>
				&& (module->transfer_direction == I2C_TRANSFER_READ)) {
    1d34:	2324      	movs	r3, #36	; 0x24
    1d36:	5ce3      	ldrb	r3, [r4, r3]
    1d38:	2b01      	cmp	r3, #1
    1d3a:	d00b      	beq.n	1d54 <_i2c_master_interrupt_handler+0x1b8>
		} else if ((callback_mask & (1 << I2C_MASTER_CALLBACK_WRITE_COMPLETE))
    1d3c:	07f3      	lsls	r3, r6, #31
    1d3e:	d400      	bmi.n	1d42 <_i2c_master_interrupt_handler+0x1a6>
    1d40:	e781      	b.n	1c46 <_i2c_master_interrupt_handler+0xaa>
				&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
    1d42:	2324      	movs	r3, #36	; 0x24
    1d44:	5ce3      	ldrb	r3, [r4, r3]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d000      	beq.n	1d4c <_i2c_master_interrupt_handler+0x1b0>
    1d4a:	e77c      	b.n	1c46 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_WRITE_COMPLETE](module);
    1d4c:	68e3      	ldr	r3, [r4, #12]
    1d4e:	0020      	movs	r0, r4
    1d50:	4798      	blx	r3
    1d52:	e778      	b.n	1c46 <_i2c_master_interrupt_handler+0xaa>
			module->callbacks[I2C_MASTER_CALLBACK_READ_COMPLETE](module);
    1d54:	6923      	ldr	r3, [r4, #16]
    1d56:	0020      	movs	r0, r4
    1d58:	4798      	blx	r3
    1d5a:	e774      	b.n	1c46 <_i2c_master_interrupt_handler+0xaa>
			_i2c_master_wait_for_sync(module);
    1d5c:	0020      	movs	r0, r4
    1d5e:	4b07      	ldr	r3, [pc, #28]	; (1d7c <_i2c_master_interrupt_handler+0x1e0>)
    1d60:	4798      	blx	r3
			i2c_module->CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT |
    1d62:	686a      	ldr	r2, [r5, #4]
    1d64:	23e0      	movs	r3, #224	; 0xe0
    1d66:	02db      	lsls	r3, r3, #11
    1d68:	4313      	orrs	r3, r2
    1d6a:	606b      	str	r3, [r5, #4]
    1d6c:	e780      	b.n	1c70 <_i2c_master_interrupt_handler+0xd4>
			module->callbacks[I2C_MASTER_CALLBACK_ERROR](module);
    1d6e:	6963      	ldr	r3, [r4, #20]
    1d70:	0020      	movs	r0, r4
    1d72:	4798      	blx	r3
}
    1d74:	e77f      	b.n	1c76 <_i2c_master_interrupt_handler+0xda>
    1d76:	46c0      	nop			; (mov r8, r8)
    1d78:	200010cc 	.word	0x200010cc
    1d7c:	00001acd 	.word	0x00001acd
    1d80:	00001ad9 	.word	0x00001ad9
    1d84:	00001b61 	.word	0x00001b61

00001d88 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
    1d88:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d8a:	46de      	mov	lr, fp
    1d8c:	4657      	mov	r7, sl
    1d8e:	464e      	mov	r6, r9
    1d90:	4645      	mov	r5, r8
    1d92:	b5e0      	push	{r5, r6, r7, lr}
    1d94:	b087      	sub	sp, #28
    1d96:	4680      	mov	r8, r0
    1d98:	9104      	str	r1, [sp, #16]
    1d9a:	0016      	movs	r6, r2
    1d9c:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
    1d9e:	2200      	movs	r2, #0
    1da0:	2300      	movs	r3, #0
    1da2:	2100      	movs	r1, #0
    1da4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
    1da6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
    1da8:	2001      	movs	r0, #1
    1daa:	0021      	movs	r1, r4
    1dac:	9600      	str	r6, [sp, #0]
    1dae:	9701      	str	r7, [sp, #4]
    1db0:	465c      	mov	r4, fp
    1db2:	9403      	str	r4, [sp, #12]
    1db4:	4644      	mov	r4, r8
    1db6:	9405      	str	r4, [sp, #20]
    1db8:	e013      	b.n	1de2 <long_division+0x5a>
    1dba:	2420      	movs	r4, #32
    1dbc:	1a64      	subs	r4, r4, r1
    1dbe:	0005      	movs	r5, r0
    1dc0:	40e5      	lsrs	r5, r4
    1dc2:	46a8      	mov	r8, r5
    1dc4:	e014      	b.n	1df0 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
    1dc6:	9c00      	ldr	r4, [sp, #0]
    1dc8:	9d01      	ldr	r5, [sp, #4]
    1dca:	1b12      	subs	r2, r2, r4
    1dcc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
    1dce:	465c      	mov	r4, fp
    1dd0:	464d      	mov	r5, r9
    1dd2:	432c      	orrs	r4, r5
    1dd4:	46a3      	mov	fp, r4
    1dd6:	9c03      	ldr	r4, [sp, #12]
    1dd8:	4645      	mov	r5, r8
    1dda:	432c      	orrs	r4, r5
    1ddc:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
    1dde:	3901      	subs	r1, #1
    1de0:	d325      	bcc.n	1e2e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
    1de2:	2420      	movs	r4, #32
    1de4:	4264      	negs	r4, r4
    1de6:	190c      	adds	r4, r1, r4
    1de8:	d4e7      	bmi.n	1dba <long_division+0x32>
    1dea:	0005      	movs	r5, r0
    1dec:	40a5      	lsls	r5, r4
    1dee:	46a8      	mov	r8, r5
    1df0:	0004      	movs	r4, r0
    1df2:	408c      	lsls	r4, r1
    1df4:	46a1      	mov	r9, r4
		r = r << 1;
    1df6:	1892      	adds	r2, r2, r2
    1df8:	415b      	adcs	r3, r3
    1dfa:	0014      	movs	r4, r2
    1dfc:	001d      	movs	r5, r3
		if (n & bit_shift) {
    1dfe:	9e05      	ldr	r6, [sp, #20]
    1e00:	464f      	mov	r7, r9
    1e02:	403e      	ands	r6, r7
    1e04:	46b4      	mov	ip, r6
    1e06:	9e04      	ldr	r6, [sp, #16]
    1e08:	4647      	mov	r7, r8
    1e0a:	403e      	ands	r6, r7
    1e0c:	46b2      	mov	sl, r6
    1e0e:	4666      	mov	r6, ip
    1e10:	4657      	mov	r7, sl
    1e12:	433e      	orrs	r6, r7
    1e14:	d003      	beq.n	1e1e <long_division+0x96>
			r |= 0x01;
    1e16:	0006      	movs	r6, r0
    1e18:	4326      	orrs	r6, r4
    1e1a:	0032      	movs	r2, r6
    1e1c:	002b      	movs	r3, r5
		if (r >= d) {
    1e1e:	9c00      	ldr	r4, [sp, #0]
    1e20:	9d01      	ldr	r5, [sp, #4]
    1e22:	429d      	cmp	r5, r3
    1e24:	d8db      	bhi.n	1dde <long_division+0x56>
    1e26:	d1ce      	bne.n	1dc6 <long_division+0x3e>
    1e28:	4294      	cmp	r4, r2
    1e2a:	d8d8      	bhi.n	1dde <long_division+0x56>
    1e2c:	e7cb      	b.n	1dc6 <long_division+0x3e>
    1e2e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
    1e30:	4658      	mov	r0, fp
    1e32:	0019      	movs	r1, r3
    1e34:	b007      	add	sp, #28
    1e36:	bc3c      	pop	{r2, r3, r4, r5}
    1e38:	4690      	mov	r8, r2
    1e3a:	4699      	mov	r9, r3
    1e3c:	46a2      	mov	sl, r4
    1e3e:	46ab      	mov	fp, r5
    1e40:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001e42 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
    1e42:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
    1e44:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e46:	2340      	movs	r3, #64	; 0x40
    1e48:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
    1e4a:	4281      	cmp	r1, r0
    1e4c:	d202      	bcs.n	1e54 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
    1e4e:	0018      	movs	r0, r3
    1e50:	bd10      	pop	{r4, pc}
		baud_calculated++;
    1e52:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
    1e54:	1a09      	subs	r1, r1, r0
		baud_calculated++;
    1e56:	1c63      	adds	r3, r4, #1
    1e58:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
    1e5a:	4288      	cmp	r0, r1
    1e5c:	d9f9      	bls.n	1e52 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e5e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
    1e60:	2cff      	cmp	r4, #255	; 0xff
    1e62:	d8f4      	bhi.n	1e4e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
    1e64:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
    1e66:	2300      	movs	r3, #0
    1e68:	e7f1      	b.n	1e4e <_sercom_get_sync_baud_val+0xc>
	...

00001e6c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
    1e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e6e:	b083      	sub	sp, #12
    1e70:	000f      	movs	r7, r1
    1e72:	0016      	movs	r6, r2
    1e74:	aa08      	add	r2, sp, #32
    1e76:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
    1e78:	0004      	movs	r4, r0
    1e7a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1e7c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
    1e7e:	42bc      	cmp	r4, r7
    1e80:	d902      	bls.n	1e88 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
    1e82:	0010      	movs	r0, r2
    1e84:	b003      	add	sp, #12
    1e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
    1e88:	2b00      	cmp	r3, #0
    1e8a:	d114      	bne.n	1eb6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
    1e8c:	0002      	movs	r2, r0
    1e8e:	0008      	movs	r0, r1
    1e90:	2100      	movs	r1, #0
    1e92:	4c19      	ldr	r4, [pc, #100]	; (1ef8 <_sercom_get_async_baud_val+0x8c>)
    1e94:	47a0      	blx	r4
    1e96:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
    1e98:	003a      	movs	r2, r7
    1e9a:	2300      	movs	r3, #0
    1e9c:	2000      	movs	r0, #0
    1e9e:	4c17      	ldr	r4, [pc, #92]	; (1efc <_sercom_get_async_baud_val+0x90>)
    1ea0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
    1ea2:	2200      	movs	r2, #0
    1ea4:	2301      	movs	r3, #1
    1ea6:	1a12      	subs	r2, r2, r0
    1ea8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
    1eaa:	0c12      	lsrs	r2, r2, #16
    1eac:	041b      	lsls	r3, r3, #16
    1eae:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
    1eb0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
    1eb2:	2200      	movs	r2, #0
    1eb4:	e7e5      	b.n	1e82 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
    1eb6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
    1eb8:	2b01      	cmp	r3, #1
    1eba:	d1f9      	bne.n	1eb0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
    1ebc:	000a      	movs	r2, r1
    1ebe:	2300      	movs	r3, #0
    1ec0:	2100      	movs	r1, #0
    1ec2:	4c0d      	ldr	r4, [pc, #52]	; (1ef8 <_sercom_get_async_baud_val+0x8c>)
    1ec4:	47a0      	blx	r4
    1ec6:	0002      	movs	r2, r0
    1ec8:	000b      	movs	r3, r1
    1eca:	9200      	str	r2, [sp, #0]
    1ecc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
    1ece:	0038      	movs	r0, r7
    1ed0:	2100      	movs	r1, #0
    1ed2:	4c0a      	ldr	r4, [pc, #40]	; (1efc <_sercom_get_async_baud_val+0x90>)
    1ed4:	47a0      	blx	r4
    1ed6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
    1ed8:	2380      	movs	r3, #128	; 0x80
    1eda:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
    1edc:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
    1ede:	4298      	cmp	r0, r3
    1ee0:	d8cf      	bhi.n	1e82 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
    1ee2:	0f79      	lsrs	r1, r7, #29
    1ee4:	00f8      	lsls	r0, r7, #3
    1ee6:	9a00      	ldr	r2, [sp, #0]
    1ee8:	9b01      	ldr	r3, [sp, #4]
    1eea:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
    1eec:	00ea      	lsls	r2, r5, #3
    1eee:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
    1ef0:	b2d2      	uxtb	r2, r2
    1ef2:	0352      	lsls	r2, r2, #13
    1ef4:	432a      	orrs	r2, r5
    1ef6:	e7db      	b.n	1eb0 <_sercom_get_async_baud_val+0x44>
    1ef8:	000130b1 	.word	0x000130b1
    1efc:	00001d89 	.word	0x00001d89

00001f00 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
    1f00:	b510      	push	{r4, lr}
    1f02:	b082      	sub	sp, #8
    1f04:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
    1f06:	4b0e      	ldr	r3, [pc, #56]	; (1f40 <sercom_set_gclk_generator+0x40>)
    1f08:	781b      	ldrb	r3, [r3, #0]
    1f0a:	2b00      	cmp	r3, #0
    1f0c:	d007      	beq.n	1f1e <sercom_set_gclk_generator+0x1e>
    1f0e:	2900      	cmp	r1, #0
    1f10:	d105      	bne.n	1f1e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
    1f12:	4b0b      	ldr	r3, [pc, #44]	; (1f40 <sercom_set_gclk_generator+0x40>)
    1f14:	785b      	ldrb	r3, [r3, #1]
    1f16:	4283      	cmp	r3, r0
    1f18:	d010      	beq.n	1f3c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
    1f1a:	201d      	movs	r0, #29
    1f1c:	e00c      	b.n	1f38 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
    1f1e:	a901      	add	r1, sp, #4
    1f20:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
    1f22:	2011      	movs	r0, #17
    1f24:	4b07      	ldr	r3, [pc, #28]	; (1f44 <sercom_set_gclk_generator+0x44>)
    1f26:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
    1f28:	2011      	movs	r0, #17
    1f2a:	4b07      	ldr	r3, [pc, #28]	; (1f48 <sercom_set_gclk_generator+0x48>)
    1f2c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
    1f2e:	4b04      	ldr	r3, [pc, #16]	; (1f40 <sercom_set_gclk_generator+0x40>)
    1f30:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
    1f32:	2201      	movs	r2, #1
    1f34:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
    1f36:	2000      	movs	r0, #0
}
    1f38:	b002      	add	sp, #8
    1f3a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
    1f3c:	2000      	movs	r0, #0
    1f3e:	e7fb      	b.n	1f38 <sercom_set_gclk_generator+0x38>
    1f40:	20000a44 	.word	0x20000a44
    1f44:	000032fd 	.word	0x000032fd
    1f48:	0000328d 	.word	0x0000328d

00001f4c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
    1f4c:	4b3c      	ldr	r3, [pc, #240]	; (2040 <STACK_SIZE+0x40>)
    1f4e:	4298      	cmp	r0, r3
    1f50:	d032      	beq.n	1fb8 <_sercom_get_default_pad+0x6c>
    1f52:	d90a      	bls.n	1f6a <_sercom_get_default_pad+0x1e>
    1f54:	4b3b      	ldr	r3, [pc, #236]	; (2044 <STACK_SIZE+0x44>)
    1f56:	4298      	cmp	r0, r3
    1f58:	d04e      	beq.n	1ff8 <_sercom_get_default_pad+0xac>
    1f5a:	4b3b      	ldr	r3, [pc, #236]	; (2048 <STACK_SIZE+0x48>)
    1f5c:	4298      	cmp	r0, r3
    1f5e:	d055      	beq.n	200c <STACK_SIZE+0xc>
    1f60:	4b3a      	ldr	r3, [pc, #232]	; (204c <STACK_SIZE+0x4c>)
    1f62:	4298      	cmp	r0, r3
    1f64:	d038      	beq.n	1fd8 <_sercom_get_default_pad+0x8c>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
    1f66:	2000      	movs	r0, #0
}
    1f68:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
    1f6a:	2384      	movs	r3, #132	; 0x84
    1f6c:	05db      	lsls	r3, r3, #23
    1f6e:	4298      	cmp	r0, r3
    1f70:	d00c      	beq.n	1f8c <_sercom_get_default_pad+0x40>
    1f72:	4b37      	ldr	r3, [pc, #220]	; (2050 <STACK_SIZE+0x50>)
    1f74:	4298      	cmp	r0, r3
    1f76:	d1f6      	bne.n	1f66 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f78:	2901      	cmp	r1, #1
    1f7a:	d017      	beq.n	1fac <_sercom_get_default_pad+0x60>
    1f7c:	2900      	cmp	r1, #0
    1f7e:	d057      	beq.n	2030 <STACK_SIZE+0x30>
    1f80:	2902      	cmp	r1, #2
    1f82:	d015      	beq.n	1fb0 <_sercom_get_default_pad+0x64>
    1f84:	2903      	cmp	r1, #3
    1f86:	d015      	beq.n	1fb4 <_sercom_get_default_pad+0x68>
	return 0;
    1f88:	2000      	movs	r0, #0
    1f8a:	e7ed      	b.n	1f68 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1f8c:	2901      	cmp	r1, #1
    1f8e:	d007      	beq.n	1fa0 <_sercom_get_default_pad+0x54>
    1f90:	2900      	cmp	r1, #0
    1f92:	d04b      	beq.n	202c <STACK_SIZE+0x2c>
    1f94:	2902      	cmp	r1, #2
    1f96:	d005      	beq.n	1fa4 <_sercom_get_default_pad+0x58>
    1f98:	2903      	cmp	r1, #3
    1f9a:	d005      	beq.n	1fa8 <_sercom_get_default_pad+0x5c>
	return 0;
    1f9c:	2000      	movs	r0, #0
    1f9e:	e7e3      	b.n	1f68 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fa0:	482c      	ldr	r0, [pc, #176]	; (2054 <STACK_SIZE+0x54>)
    1fa2:	e7e1      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fa4:	482c      	ldr	r0, [pc, #176]	; (2058 <STACK_SIZE+0x58>)
    1fa6:	e7df      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fa8:	482c      	ldr	r0, [pc, #176]	; (205c <STACK_SIZE+0x5c>)
    1faa:	e7dd      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fac:	482c      	ldr	r0, [pc, #176]	; (2060 <STACK_SIZE+0x60>)
    1fae:	e7db      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fb0:	482c      	ldr	r0, [pc, #176]	; (2064 <STACK_SIZE+0x64>)
    1fb2:	e7d9      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fb4:	482c      	ldr	r0, [pc, #176]	; (2068 <STACK_SIZE+0x68>)
    1fb6:	e7d7      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fb8:	2901      	cmp	r1, #1
    1fba:	d007      	beq.n	1fcc <_sercom_get_default_pad+0x80>
    1fbc:	2900      	cmp	r1, #0
    1fbe:	d039      	beq.n	2034 <STACK_SIZE+0x34>
    1fc0:	2902      	cmp	r1, #2
    1fc2:	d005      	beq.n	1fd0 <_sercom_get_default_pad+0x84>
    1fc4:	2903      	cmp	r1, #3
    1fc6:	d005      	beq.n	1fd4 <_sercom_get_default_pad+0x88>
	return 0;
    1fc8:	2000      	movs	r0, #0
    1fca:	e7cd      	b.n	1f68 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fcc:	4827      	ldr	r0, [pc, #156]	; (206c <STACK_SIZE+0x6c>)
    1fce:	e7cb      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fd0:	4827      	ldr	r0, [pc, #156]	; (2070 <STACK_SIZE+0x70>)
    1fd2:	e7c9      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fd4:	4827      	ldr	r0, [pc, #156]	; (2074 <STACK_SIZE+0x74>)
    1fd6:	e7c7      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1fd8:	2901      	cmp	r1, #1
    1fda:	d007      	beq.n	1fec <_sercom_get_default_pad+0xa0>
    1fdc:	2900      	cmp	r1, #0
    1fde:	d02b      	beq.n	2038 <STACK_SIZE+0x38>
    1fe0:	2902      	cmp	r1, #2
    1fe2:	d005      	beq.n	1ff0 <_sercom_get_default_pad+0xa4>
    1fe4:	2903      	cmp	r1, #3
    1fe6:	d005      	beq.n	1ff4 <_sercom_get_default_pad+0xa8>
	return 0;
    1fe8:	2000      	movs	r0, #0
    1fea:	e7bd      	b.n	1f68 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    1fec:	4822      	ldr	r0, [pc, #136]	; (2078 <STACK_SIZE+0x78>)
    1fee:	e7bb      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1ff0:	4822      	ldr	r0, [pc, #136]	; (207c <STACK_SIZE+0x7c>)
    1ff2:	e7b9      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1ff4:	4822      	ldr	r0, [pc, #136]	; (2080 <STACK_SIZE+0x80>)
    1ff6:	e7b7      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    1ff8:	2902      	cmp	r1, #2
    1ffa:	d003      	beq.n	2004 <STACK_SIZE+0x4>
    1ffc:	2903      	cmp	r1, #3
    1ffe:	d003      	beq.n	2008 <STACK_SIZE+0x8>
    2000:	2000      	movs	r0, #0
    2002:	e7b1      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2004:	481f      	ldr	r0, [pc, #124]	; (2084 <STACK_SIZE+0x84>)
    2006:	e7af      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2008:	481f      	ldr	r0, [pc, #124]	; (2088 <STACK_SIZE+0x88>)
    200a:	e7ad      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    200c:	2901      	cmp	r1, #1
    200e:	d007      	beq.n	2020 <STACK_SIZE+0x20>
    2010:	2900      	cmp	r1, #0
    2012:	d013      	beq.n	203c <STACK_SIZE+0x3c>
    2014:	2902      	cmp	r1, #2
    2016:	d005      	beq.n	2024 <STACK_SIZE+0x24>
    2018:	2903      	cmp	r1, #3
    201a:	d005      	beq.n	2028 <STACK_SIZE+0x28>
	return 0;
    201c:	2000      	movs	r0, #0
    201e:	e7a3      	b.n	1f68 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
    2020:	481a      	ldr	r0, [pc, #104]	; (208c <STACK_SIZE+0x8c>)
    2022:	e7a1      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2024:	481a      	ldr	r0, [pc, #104]	; (2090 <STACK_SIZE+0x90>)
    2026:	e79f      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2028:	481a      	ldr	r0, [pc, #104]	; (2094 <STACK_SIZE+0x94>)
    202a:	e79d      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    202c:	481a      	ldr	r0, [pc, #104]	; (2098 <STACK_SIZE+0x98>)
    202e:	e79b      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2030:	2003      	movs	r0, #3
    2032:	e799      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2034:	4819      	ldr	r0, [pc, #100]	; (209c <STACK_SIZE+0x9c>)
    2036:	e797      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2038:	4819      	ldr	r0, [pc, #100]	; (20a0 <STACK_SIZE+0xa0>)
    203a:	e795      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    203c:	4819      	ldr	r0, [pc, #100]	; (20a4 <STACK_SIZE+0xa4>)
    203e:	e793      	b.n	1f68 <_sercom_get_default_pad+0x1c>
    2040:	42000800 	.word	0x42000800
    2044:	42001000 	.word	0x42001000
    2048:	43000400 	.word	0x43000400
    204c:	42000c00 	.word	0x42000c00
    2050:	42000400 	.word	0x42000400
    2054:	00050003 	.word	0x00050003
    2058:	00060003 	.word	0x00060003
    205c:	00070003 	.word	0x00070003
    2060:	00010003 	.word	0x00010003
    2064:	001e0003 	.word	0x001e0003
    2068:	001f0003 	.word	0x001f0003
    206c:	00090003 	.word	0x00090003
    2070:	000a0003 	.word	0x000a0003
    2074:	000b0003 	.word	0x000b0003
    2078:	00110003 	.word	0x00110003
    207c:	00120003 	.word	0x00120003
    2080:	00130003 	.word	0x00130003
    2084:	000e0003 	.word	0x000e0003
    2088:	000f0003 	.word	0x000f0003
    208c:	00170003 	.word	0x00170003
    2090:	00180003 	.word	0x00180003
    2094:	00190003 	.word	0x00190003
    2098:	00040003 	.word	0x00040003
    209c:	00080003 	.word	0x00080003
    20a0:	00100003 	.word	0x00100003
    20a4:	00160003 	.word	0x00160003

000020a8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
    20a8:	b530      	push	{r4, r5, lr}
    20aa:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
    20ac:	4b0b      	ldr	r3, [pc, #44]	; (20dc <_sercom_get_sercom_inst_index+0x34>)
    20ae:	466a      	mov	r2, sp
    20b0:	cb32      	ldmia	r3!, {r1, r4, r5}
    20b2:	c232      	stmia	r2!, {r1, r4, r5}
    20b4:	cb32      	ldmia	r3!, {r1, r4, r5}
    20b6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
    20b8:	9b00      	ldr	r3, [sp, #0]
    20ba:	4283      	cmp	r3, r0
    20bc:	d00b      	beq.n	20d6 <_sercom_get_sercom_inst_index+0x2e>
    20be:	2301      	movs	r3, #1
    20c0:	009a      	lsls	r2, r3, #2
    20c2:	4669      	mov	r1, sp
    20c4:	5852      	ldr	r2, [r2, r1]
    20c6:	4282      	cmp	r2, r0
    20c8:	d006      	beq.n	20d8 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20ca:	3301      	adds	r3, #1
    20cc:	2b06      	cmp	r3, #6
    20ce:	d1f7      	bne.n	20c0 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
    20d0:	2000      	movs	r0, #0
}
    20d2:	b007      	add	sp, #28
    20d4:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20d6:	2300      	movs	r3, #0
			return i;
    20d8:	b2d8      	uxtb	r0, r3
    20da:	e7fa      	b.n	20d2 <_sercom_get_sercom_inst_index+0x2a>
    20dc:	0001c808 	.word	0x0001c808

000020e0 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    20e0:	4770      	bx	lr
	...

000020e4 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    20e4:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    20e6:	4b0a      	ldr	r3, [pc, #40]	; (2110 <_sercom_set_handler+0x2c>)
    20e8:	781b      	ldrb	r3, [r3, #0]
    20ea:	2b00      	cmp	r3, #0
    20ec:	d10c      	bne.n	2108 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    20ee:	4f09      	ldr	r7, [pc, #36]	; (2114 <_sercom_set_handler+0x30>)
    20f0:	4e09      	ldr	r6, [pc, #36]	; (2118 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    20f2:	4d0a      	ldr	r5, [pc, #40]	; (211c <_sercom_set_handler+0x38>)
    20f4:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    20f6:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    20f8:	195a      	adds	r2, r3, r5
    20fa:	6014      	str	r4, [r2, #0]
    20fc:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    20fe:	2b18      	cmp	r3, #24
    2100:	d1f9      	bne.n	20f6 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    2102:	2201      	movs	r2, #1
    2104:	4b02      	ldr	r3, [pc, #8]	; (2110 <_sercom_set_handler+0x2c>)
    2106:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    2108:	0080      	lsls	r0, r0, #2
    210a:	4b02      	ldr	r3, [pc, #8]	; (2114 <_sercom_set_handler+0x30>)
    210c:	50c1      	str	r1, [r0, r3]
}
    210e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2110:	20000a46 	.word	0x20000a46
    2114:	20000a48 	.word	0x20000a48
    2118:	000020e1 	.word	0x000020e1
    211c:	200010cc 	.word	0x200010cc

00002120 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    2120:	b500      	push	{lr}
    2122:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    2124:	2308      	movs	r3, #8
    2126:	466a      	mov	r2, sp
    2128:	7013      	strb	r3, [r2, #0]
    212a:	3301      	adds	r3, #1
    212c:	7053      	strb	r3, [r2, #1]
    212e:	3301      	adds	r3, #1
    2130:	7093      	strb	r3, [r2, #2]
    2132:	3301      	adds	r3, #1
    2134:	70d3      	strb	r3, [r2, #3]
    2136:	3301      	adds	r3, #1
    2138:	7113      	strb	r3, [r2, #4]
    213a:	3301      	adds	r3, #1
    213c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    213e:	4b03      	ldr	r3, [pc, #12]	; (214c <_sercom_get_interrupt_vector+0x2c>)
    2140:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    2142:	466b      	mov	r3, sp
    2144:	5618      	ldrsb	r0, [r3, r0]
}
    2146:	b003      	add	sp, #12
    2148:	bd00      	pop	{pc}
    214a:	46c0      	nop			; (mov r8, r8)
    214c:	000020a9 	.word	0x000020a9

00002150 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    2150:	b510      	push	{r4, lr}
    2152:	4b02      	ldr	r3, [pc, #8]	; (215c <SERCOM0_Handler+0xc>)
    2154:	681b      	ldr	r3, [r3, #0]
    2156:	2000      	movs	r0, #0
    2158:	4798      	blx	r3
    215a:	bd10      	pop	{r4, pc}
    215c:	20000a48 	.word	0x20000a48

00002160 <SERCOM1_Handler>:
    2160:	b510      	push	{r4, lr}
    2162:	4b02      	ldr	r3, [pc, #8]	; (216c <SERCOM1_Handler+0xc>)
    2164:	685b      	ldr	r3, [r3, #4]
    2166:	2001      	movs	r0, #1
    2168:	4798      	blx	r3
    216a:	bd10      	pop	{r4, pc}
    216c:	20000a48 	.word	0x20000a48

00002170 <SERCOM2_Handler>:
    2170:	b510      	push	{r4, lr}
    2172:	4b02      	ldr	r3, [pc, #8]	; (217c <SERCOM2_Handler+0xc>)
    2174:	689b      	ldr	r3, [r3, #8]
    2176:	2002      	movs	r0, #2
    2178:	4798      	blx	r3
    217a:	bd10      	pop	{r4, pc}
    217c:	20000a48 	.word	0x20000a48

00002180 <SERCOM3_Handler>:
    2180:	b510      	push	{r4, lr}
    2182:	4b02      	ldr	r3, [pc, #8]	; (218c <SERCOM3_Handler+0xc>)
    2184:	68db      	ldr	r3, [r3, #12]
    2186:	2003      	movs	r0, #3
    2188:	4798      	blx	r3
    218a:	bd10      	pop	{r4, pc}
    218c:	20000a48 	.word	0x20000a48

00002190 <SERCOM4_Handler>:
    2190:	b510      	push	{r4, lr}
    2192:	4b02      	ldr	r3, [pc, #8]	; (219c <SERCOM4_Handler+0xc>)
    2194:	691b      	ldr	r3, [r3, #16]
    2196:	2004      	movs	r0, #4
    2198:	4798      	blx	r3
    219a:	bd10      	pop	{r4, pc}
    219c:	20000a48 	.word	0x20000a48

000021a0 <SERCOM5_Handler>:
    21a0:	b510      	push	{r4, lr}
    21a2:	4b02      	ldr	r3, [pc, #8]	; (21ac <SERCOM5_Handler+0xc>)
    21a4:	695b      	ldr	r3, [r3, #20]
    21a6:	2005      	movs	r0, #5
    21a8:	4798      	blx	r3
    21aa:	bd10      	pop	{r4, pc}
    21ac:	20000a48 	.word	0x20000a48

000021b0 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Sercom *const hw,
		const struct spi_config *const config)
{
    21b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    21b2:	46d6      	mov	lr, sl
    21b4:	464f      	mov	r7, r9
    21b6:	4646      	mov	r6, r8
    21b8:	b5c0      	push	{r6, r7, lr}
    21ba:	b08a      	sub	sp, #40	; 0x28
    21bc:	0006      	movs	r6, r0
    21be:	000f      	movs	r7, r1
    21c0:	0014      	movs	r4, r2
	Assert(module);
	Assert(hw);
	Assert(config);

	/* Initialize device instance */
	module->hw = hw;
    21c2:	6031      	str	r1, [r6, #0]

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if module is enabled. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_ENABLE) {
    21c4:	680b      	ldr	r3, [r1, #0]
    21c6:	079b      	lsls	r3, r3, #30
    21c8:	d40a      	bmi.n	21e0 <spi_init+0x30>
		return STATUS_ERR_DENIED;
#  endif
	}

	/* Check if reset is in progress. */
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    21ca:	680b      	ldr	r3, [r1, #0]
		return STATUS_BUSY;
    21cc:	2005      	movs	r0, #5
	if (spi_module->CTRLA.reg & SERCOM_SPI_CTRLA_SWRST){
    21ce:	07db      	lsls	r3, r3, #31
    21d0:	d400      	bmi.n	21d4 <spi_init+0x24>
    21d2:	e097      	b.n	2304 <spi_init+0x154>
	_sercom_instances[instance_index] = module;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
    21d4:	b00a      	add	sp, #40	; 0x28
    21d6:	bc1c      	pop	{r2, r3, r4}
    21d8:	4690      	mov	r8, r2
    21da:	4699      	mov	r9, r3
    21dc:	46a2      	mov	sl, r4
    21de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t pad_pinmuxes[] = {
    21e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    21e2:	9305      	str	r3, [sp, #20]
    21e4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    21e6:	9306      	str	r3, [sp, #24]
    21e8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    21ea:	9307      	str	r3, [sp, #28]
    21ec:	6b53      	ldr	r3, [r2, #52]	; 0x34
    21ee:	9308      	str	r3, [sp, #32]
    21f0:	2500      	movs	r5, #0
    21f2:	e00a      	b.n	220a <spi_init+0x5a>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    21f4:	0038      	movs	r0, r7
    21f6:	4b9a      	ldr	r3, [pc, #616]	; (2460 <spi_init+0x2b0>)
    21f8:	4798      	blx	r3
    21fa:	e00e      	b.n	221a <spi_init+0x6a>

	if (pin_index & 1) {
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
	}
	else {
		return (pmux_reg & PORT_PMUX_PMUXE_Msk) >> PORT_PMUX_PMUXE_Pos;
    21fc:	230f      	movs	r3, #15
    21fe:	4018      	ands	r0, r3
		if ((current_pinmux & 0xFFFF) !=
    2200:	4581      	cmp	r9, r0
    2202:	d130      	bne.n	2266 <spi_init+0xb6>
    2204:	3501      	adds	r5, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    2206:	2d04      	cmp	r5, #4
    2208:	d031      	beq.n	226e <spi_init+0xbe>
    220a:	b2e9      	uxtb	r1, r5
		uint32_t current_pinmux = pad_pinmuxes[pad];
    220c:	00ab      	lsls	r3, r5, #2
    220e:	aa02      	add	r2, sp, #8
    2210:	200c      	movs	r0, #12
    2212:	1812      	adds	r2, r2, r0
    2214:	58d0      	ldr	r0, [r2, r3]
		if (current_pinmux == PINMUX_DEFAULT) {
    2216:	2800      	cmp	r0, #0
    2218:	d0ec      	beq.n	21f4 <spi_init+0x44>
		if (current_pinmux == PINMUX_UNUSED) {
    221a:	1c43      	adds	r3, r0, #1
    221c:	d0f2      	beq.n	2204 <spi_init+0x54>
		if ((current_pinmux & 0xFFFF) !=
    221e:	0401      	lsls	r1, r0, #16
    2220:	0c0b      	lsrs	r3, r1, #16
    2222:	4699      	mov	r9, r3
				system_pinmux_pin_get_mux_position(current_pinmux >> 16)) {
    2224:	0c00      	lsrs	r0, r0, #16
	if (port_index < PORT_INST_NUM) {
    2226:	b2c3      	uxtb	r3, r0
    2228:	469c      	mov	ip, r3
		return NULL;
    222a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    222c:	0602      	lsls	r2, r0, #24
    222e:	d405      	bmi.n	223c <spi_init+0x8c>
		return &(ports[port_index]->Group[group_index]);
    2230:	4663      	mov	r3, ip
    2232:	095b      	lsrs	r3, r3, #5
    2234:	01db      	lsls	r3, r3, #7
    2236:	4a8b      	ldr	r2, [pc, #556]	; (2464 <spi_init+0x2b4>)
    2238:	4690      	mov	r8, r2
    223a:	4443      	add	r3, r8
	uint32_t pin_index = (gpio_pin % 32);
    223c:	221f      	movs	r2, #31
    223e:	4660      	mov	r0, ip
    2240:	4002      	ands	r2, r0
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    2242:	1898      	adds	r0, r3, r2
    2244:	3040      	adds	r0, #64	; 0x40
    2246:	7800      	ldrb	r0, [r0, #0]
    2248:	4682      	mov	sl, r0
		return SYSTEM_PINMUX_GPIO;
    224a:	2080      	movs	r0, #128	; 0x80
	if (!(port->PINCFG[pin_index].reg & PORT_PINCFG_PMUXEN)) {
    224c:	4651      	mov	r1, sl
    224e:	07c9      	lsls	r1, r1, #31
    2250:	d5d6      	bpl.n	2200 <spi_init+0x50>
	uint32_t pmux_reg = port->PMUX[pin_index / 2].reg;
    2252:	0852      	lsrs	r2, r2, #1
    2254:	189b      	adds	r3, r3, r2
    2256:	3330      	adds	r3, #48	; 0x30
    2258:	7818      	ldrb	r0, [r3, #0]
    225a:	b2c0      	uxtb	r0, r0
	if (pin_index & 1) {
    225c:	4663      	mov	r3, ip
    225e:	07db      	lsls	r3, r3, #31
    2260:	d5cc      	bpl.n	21fc <spi_init+0x4c>
		return (pmux_reg & PORT_PMUX_PMUXO_Msk) >> PORT_PMUX_PMUXO_Pos;
    2262:	0900      	lsrs	r0, r0, #4
    2264:	e7cc      	b.n	2200 <spi_init+0x50>
			module->hw = NULL;
    2266:	2300      	movs	r3, #0
    2268:	6033      	str	r3, [r6, #0]
			return STATUS_ERR_DENIED;
    226a:	201c      	movs	r0, #28
    226c:	e7b2      	b.n	21d4 <spi_init+0x24>
	uint32_t external_clock = system_gclk_chan_get_hz(SERCOM_GCLK_ID);
    226e:	2011      	movs	r0, #17
    2270:	4b7d      	ldr	r3, [pc, #500]	; (2468 <spi_init+0x2b8>)
    2272:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2274:	7822      	ldrb	r2, [r4, #0]
	uint32_t ctrla = 0;
    2276:	2500      	movs	r5, #0
	if (config->mode == SPI_MODE_MASTER) {
    2278:	2a01      	cmp	r2, #1
    227a:	d026      	beq.n	22ca <spi_init+0x11a>
	ctrla |= config->mux_setting;
    227c:	6863      	ldr	r3, [r4, #4]
    227e:	68a2      	ldr	r2, [r4, #8]
    2280:	4313      	orrs	r3, r2
    2282:	68e2      	ldr	r2, [r4, #12]
    2284:	4313      	orrs	r3, r2
    2286:	432b      	orrs	r3, r5
	ctrlb |= config->character_size;
    2288:	7c22      	ldrb	r2, [r4, #16]
	if (config->run_in_standby) {
    228a:	7c61      	ldrb	r1, [r4, #17]
    228c:	2900      	cmp	r1, #0
    228e:	d001      	beq.n	2294 <spi_init+0xe4>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    2290:	2180      	movs	r1, #128	; 0x80
    2292:	430b      	orrs	r3, r1
	if (config->receiver_enable) {
    2294:	7ca1      	ldrb	r1, [r4, #18]
    2296:	2900      	cmp	r1, #0
    2298:	d002      	beq.n	22a0 <spi_init+0xf0>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    229a:	2180      	movs	r1, #128	; 0x80
    229c:	0289      	lsls	r1, r1, #10
    229e:	430a      	orrs	r2, r1
	if (config->select_slave_low_detect_enable) {
    22a0:	7ce1      	ldrb	r1, [r4, #19]
    22a2:	2900      	cmp	r1, #0
    22a4:	d002      	beq.n	22ac <spi_init+0xfc>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    22a6:	2180      	movs	r1, #128	; 0x80
    22a8:	0089      	lsls	r1, r1, #2
    22aa:	430a      	orrs	r2, r1
	if (config->master_slave_select_enable) {
    22ac:	7d21      	ldrb	r1, [r4, #20]
    22ae:	2900      	cmp	r1, #0
    22b0:	d002      	beq.n	22b8 <spi_init+0x108>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    22b2:	2180      	movs	r1, #128	; 0x80
    22b4:	0189      	lsls	r1, r1, #6
    22b6:	430a      	orrs	r2, r1
	if (spi_module->CTRLA.reg == ctrla &&
    22b8:	6839      	ldr	r1, [r7, #0]
	ctrla |= SERCOM_SPI_CTRLA_ENABLE;
    22ba:	2002      	movs	r0, #2
    22bc:	4303      	orrs	r3, r0
	if (spi_module->CTRLA.reg == ctrla &&
    22be:	428b      	cmp	r3, r1
    22c0:	d017      	beq.n	22f2 <spi_init+0x142>
	module->hw = NULL;
    22c2:	2300      	movs	r3, #0
    22c4:	6033      	str	r3, [r6, #0]
	return STATUS_ERR_DENIED;
    22c6:	201c      	movs	r0, #28
    22c8:	e784      	b.n	21d4 <spi_init+0x24>
		enum status_code error_code = _sercom_get_sync_baud_val(
    22ca:	aa04      	add	r2, sp, #16
    22cc:	0001      	movs	r1, r0
    22ce:	69a0      	ldr	r0, [r4, #24]
    22d0:	4b66      	ldr	r3, [pc, #408]	; (246c <spi_init+0x2bc>)
    22d2:	4798      	blx	r3
    22d4:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    22d6:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    22d8:	2b00      	cmp	r3, #0
    22da:	d000      	beq.n	22de <spi_init+0x12e>
    22dc:	e77a      	b.n	21d4 <spi_init+0x24>
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    22de:	7b3b      	ldrb	r3, [r7, #12]
    22e0:	b2db      	uxtb	r3, r3
    22e2:	aa04      	add	r2, sp, #16
    22e4:	7812      	ldrb	r2, [r2, #0]
			return STATUS_ERR_DENIED;
    22e6:	3005      	adds	r0, #5
		if (spi_module->BAUD.reg !=  (uint8_t)baud) {
    22e8:	429a      	cmp	r2, r3
    22ea:	d000      	beq.n	22ee <spi_init+0x13e>
    22ec:	e772      	b.n	21d4 <spi_init+0x24>
		ctrla |= SERCOM_SPI_CTRLA_MODE(0x3);
    22ee:	350c      	adds	r5, #12
    22f0:	e7c4      	b.n	227c <spi_init+0xcc>
			spi_module->CTRLB.reg == ctrlb) {
    22f2:	687b      	ldr	r3, [r7, #4]
	if (spi_module->CTRLA.reg == ctrla &&
    22f4:	4293      	cmp	r3, r2
    22f6:	d1e4      	bne.n	22c2 <spi_init+0x112>
		module->mode           = config->mode;
    22f8:	7823      	ldrb	r3, [r4, #0]
    22fa:	7173      	strb	r3, [r6, #5]
		module->character_size = config->character_size;
    22fc:	7c23      	ldrb	r3, [r4, #16]
    22fe:	71b3      	strb	r3, [r6, #6]
		return STATUS_OK;
    2300:	2000      	movs	r0, #0
    2302:	e767      	b.n	21d4 <spi_init+0x24>
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2304:	0008      	movs	r0, r1
    2306:	4b5a      	ldr	r3, [pc, #360]	; (2470 <spi_init+0x2c0>)
    2308:	4798      	blx	r3
	if (sercom_index == 5) {
    230a:	2805      	cmp	r0, #5
    230c:	d100      	bne.n	2310 <spi_init+0x160>
    230e:	e09f      	b.n	2450 <spi_init+0x2a0>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2310:	0003      	movs	r3, r0
    2312:	3312      	adds	r3, #18
			MCLK->APBCMASK.reg |= mask;
    2314:	4957      	ldr	r1, [pc, #348]	; (2474 <spi_init+0x2c4>)
    2316:	69cd      	ldr	r5, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
    2318:	2201      	movs	r2, #1
    231a:	4082      	lsls	r2, r0
    231c:	432a      	orrs	r2, r5
    231e:	61ca      	str	r2, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    2320:	a909      	add	r1, sp, #36	; 0x24
    2322:	2524      	movs	r5, #36	; 0x24
    2324:	5d62      	ldrb	r2, [r4, r5]
    2326:	700a      	strb	r2, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    2328:	b2db      	uxtb	r3, r3
    232a:	9301      	str	r3, [sp, #4]
    232c:	0018      	movs	r0, r3
    232e:	4b52      	ldr	r3, [pc, #328]	; (2478 <spi_init+0x2c8>)
    2330:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    2332:	9801      	ldr	r0, [sp, #4]
    2334:	4b51      	ldr	r3, [pc, #324]	; (247c <spi_init+0x2cc>)
    2336:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    2338:	5d60      	ldrb	r0, [r4, r5]
    233a:	2100      	movs	r1, #0
    233c:	4b50      	ldr	r3, [pc, #320]	; (2480 <spi_init+0x2d0>)
    233e:	4798      	blx	r3
	if (config->mode == SPI_MODE_MASTER) {
    2340:	7823      	ldrb	r3, [r4, #0]
    2342:	2b01      	cmp	r3, #1
    2344:	d019      	beq.n	237a <spi_init+0x1ca>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2346:	6833      	ldr	r3, [r6, #0]
    2348:	4698      	mov	r8, r3
	config->mux_position = SYSTEM_PINMUX_GPIO;
    234a:	ab04      	add	r3, sp, #16
    234c:	2280      	movs	r2, #128	; 0x80
    234e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2350:	2200      	movs	r2, #0
    2352:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    2354:	2101      	movs	r1, #1
    2356:	7099      	strb	r1, [r3, #2]
	config->powersave    = false;
    2358:	70da      	strb	r2, [r3, #3]
	if(config->mode == SPI_MODE_SLAVE) {
    235a:	7823      	ldrb	r3, [r4, #0]
    235c:	2b00      	cmp	r3, #0
    235e:	d101      	bne.n	2364 <spi_init+0x1b4>
		pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2360:	ab04      	add	r3, sp, #16
    2362:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2364:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2366:	9305      	str	r3, [sp, #20]
    2368:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    236a:	9306      	str	r3, [sp, #24]
    236c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    236e:	9307      	str	r3, [sp, #28]
    2370:	6b63      	ldr	r3, [r4, #52]	; 0x34
    2372:	9308      	str	r3, [sp, #32]
    2374:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2376:	ad05      	add	r5, sp, #20
    2378:	e011      	b.n	239e <spi_init+0x1ee>
		spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_MODE(0x3);
    237a:	683b      	ldr	r3, [r7, #0]
    237c:	220c      	movs	r2, #12
    237e:	4313      	orrs	r3, r2
    2380:	603b      	str	r3, [r7, #0]
    2382:	e7e0      	b.n	2346 <spi_init+0x196>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2384:	4640      	mov	r0, r8
    2386:	4b36      	ldr	r3, [pc, #216]	; (2460 <spi_init+0x2b0>)
    2388:	4798      	blx	r3
    238a:	e00d      	b.n	23a8 <spi_init+0x1f8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    238c:	a904      	add	r1, sp, #16
    238e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2390:	0c00      	lsrs	r0, r0, #16
    2392:	b2c0      	uxtb	r0, r0
    2394:	4b3b      	ldr	r3, [pc, #236]	; (2484 <spi_init+0x2d4>)
    2396:	4798      	blx	r3
    2398:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    239a:	2f04      	cmp	r7, #4
    239c:	d007      	beq.n	23ae <spi_init+0x1fe>
    239e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    23a0:	00bb      	lsls	r3, r7, #2
    23a2:	5958      	ldr	r0, [r3, r5]
		if (current_pinmux == PINMUX_DEFAULT) {
    23a4:	2800      	cmp	r0, #0
    23a6:	d0ed      	beq.n	2384 <spi_init+0x1d4>
		if (current_pinmux != PINMUX_UNUSED) {
    23a8:	1c43      	adds	r3, r0, #1
    23aa:	d1ef      	bne.n	238c <spi_init+0x1dc>
    23ac:	e7f4      	b.n	2398 <spi_init+0x1e8>
	module->mode             = config->mode;
    23ae:	7823      	ldrb	r3, [r4, #0]
    23b0:	7173      	strb	r3, [r6, #5]
	module->character_size   = config->character_size;
    23b2:	7c23      	ldrb	r3, [r4, #16]
    23b4:	71b3      	strb	r3, [r6, #6]
	module->receiver_enabled = config->receiver_enable;
    23b6:	7ca3      	ldrb	r3, [r4, #18]
    23b8:	71f3      	strb	r3, [r6, #7]
	module->master_slave_select_enable = config->master_slave_select_enable;
    23ba:	7d23      	ldrb	r3, [r4, #20]
    23bc:	7233      	strb	r3, [r6, #8]
	uint16_t baud = 0;
    23be:	2200      	movs	r2, #0
    23c0:	ab02      	add	r3, sp, #8
    23c2:	80da      	strh	r2, [r3, #6]
	if (config->mode == SPI_MODE_MASTER) {
    23c4:	7823      	ldrb	r3, [r4, #0]
    23c6:	2b01      	cmp	r3, #1
    23c8:	d02a      	beq.n	2420 <spi_init+0x270>
	ctrla |= config->transfer_mode;
    23ca:	6863      	ldr	r3, [r4, #4]
    23cc:	68a2      	ldr	r2, [r4, #8]
    23ce:	4313      	orrs	r3, r2
	ctrla |= config->mux_setting;
    23d0:	68e2      	ldr	r2, [r4, #12]
    23d2:	4313      	orrs	r3, r2
	ctrlb |= config->character_size;
    23d4:	7c21      	ldrb	r1, [r4, #16]
	if (config->run_in_standby || system_is_debugger_present()) {
    23d6:	7c62      	ldrb	r2, [r4, #17]
    23d8:	2a00      	cmp	r2, #0
    23da:	d103      	bne.n	23e4 <spi_init+0x234>
    23dc:	4a2a      	ldr	r2, [pc, #168]	; (2488 <spi_init+0x2d8>)
    23de:	7892      	ldrb	r2, [r2, #2]
    23e0:	0792      	lsls	r2, r2, #30
    23e2:	d501      	bpl.n	23e8 <spi_init+0x238>
		ctrla |= SERCOM_SPI_CTRLA_RUNSTDBY;
    23e4:	2280      	movs	r2, #128	; 0x80
    23e6:	4313      	orrs	r3, r2
	if (config->receiver_enable) {
    23e8:	7ca2      	ldrb	r2, [r4, #18]
    23ea:	2a00      	cmp	r2, #0
    23ec:	d002      	beq.n	23f4 <spi_init+0x244>
		ctrlb |= SERCOM_SPI_CTRLB_RXEN;
    23ee:	2280      	movs	r2, #128	; 0x80
    23f0:	0292      	lsls	r2, r2, #10
    23f2:	4311      	orrs	r1, r2
	if (config->select_slave_low_detect_enable) {
    23f4:	7ce2      	ldrb	r2, [r4, #19]
    23f6:	2a00      	cmp	r2, #0
    23f8:	d002      	beq.n	2400 <spi_init+0x250>
		ctrlb |= SERCOM_SPI_CTRLB_SSDE;
    23fa:	2280      	movs	r2, #128	; 0x80
    23fc:	0092      	lsls	r2, r2, #2
    23fe:	4311      	orrs	r1, r2
	if (config->master_slave_select_enable) {
    2400:	7d22      	ldrb	r2, [r4, #20]
    2402:	2a00      	cmp	r2, #0
    2404:	d002      	beq.n	240c <spi_init+0x25c>
		ctrlb |= SERCOM_SPI_CTRLB_MSSEN;
    2406:	2280      	movs	r2, #128	; 0x80
    2408:	0192      	lsls	r2, r2, #6
    240a:	4311      	orrs	r1, r2
	spi_module->CTRLA.reg |= ctrla;
    240c:	4642      	mov	r2, r8
    240e:	6812      	ldr	r2, [r2, #0]
    2410:	4313      	orrs	r3, r2
    2412:	4642      	mov	r2, r8
    2414:	6013      	str	r3, [r2, #0]
	spi_module->CTRLB.reg |= ctrlb;
    2416:	6853      	ldr	r3, [r2, #4]
    2418:	430b      	orrs	r3, r1
    241a:	6053      	str	r3, [r2, #4]
	return STATUS_OK;
    241c:	2000      	movs	r0, #0
    241e:	e6d9      	b.n	21d4 <spi_init+0x24>
		uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2420:	6830      	ldr	r0, [r6, #0]
    2422:	4b13      	ldr	r3, [pc, #76]	; (2470 <spi_init+0x2c0>)
    2424:	4798      	blx	r3
		uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2426:	3012      	adds	r0, #18
		uint32_t internal_clock = system_gclk_chan_get_hz(gclk_index);
    2428:	b2c0      	uxtb	r0, r0
    242a:	4b0f      	ldr	r3, [pc, #60]	; (2468 <spi_init+0x2b8>)
    242c:	4798      	blx	r3
    242e:	0001      	movs	r1, r0
		enum status_code error_code = _sercom_get_sync_baud_val(
    2430:	ab02      	add	r3, sp, #8
    2432:	1d9a      	adds	r2, r3, #6
    2434:	69a0      	ldr	r0, [r4, #24]
    2436:	4b0d      	ldr	r3, [pc, #52]	; (246c <spi_init+0x2bc>)
    2438:	4798      	blx	r3
    243a:	0003      	movs	r3, r0
			return STATUS_ERR_INVALID_ARG;
    243c:	2017      	movs	r0, #23
		if (error_code != STATUS_OK) {
    243e:	2b00      	cmp	r3, #0
    2440:	d000      	beq.n	2444 <spi_init+0x294>
    2442:	e6c7      	b.n	21d4 <spi_init+0x24>
		spi_module->BAUD.reg = (uint8_t)baud;
    2444:	ab02      	add	r3, sp, #8
    2446:	3306      	adds	r3, #6
    2448:	781b      	ldrb	r3, [r3, #0]
    244a:	4642      	mov	r2, r8
    244c:	7313      	strb	r3, [r2, #12]
    244e:	e7bc      	b.n	23ca <spi_init+0x21a>
			MCLK->APBDMASK.reg |= mask;
    2450:	4a08      	ldr	r2, [pc, #32]	; (2474 <spi_init+0x2c4>)
    2452:	6a13      	ldr	r3, [r2, #32]
    2454:	2102      	movs	r1, #2
    2456:	430b      	orrs	r3, r1
    2458:	6213      	str	r3, [r2, #32]
		gclk_index   =  SERCOM5_GCLK_ID_CORE;
    245a:	2318      	movs	r3, #24
    245c:	e760      	b.n	2320 <spi_init+0x170>
    245e:	46c0      	nop			; (mov r8, r8)
    2460:	00001f4d 	.word	0x00001f4d
    2464:	40002800 	.word	0x40002800
    2468:	00003321 	.word	0x00003321
    246c:	00001e43 	.word	0x00001e43
    2470:	000020a9 	.word	0x000020a9
    2474:	40000400 	.word	0x40000400
    2478:	000032fd 	.word	0x000032fd
    247c:	0000328d 	.word	0x0000328d
    2480:	00001f01 	.word	0x00001f01
    2484:	000033f9 	.word	0x000033f9
    2488:	41002000 	.word	0x41002000

0000248c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		const bool select)
{
    248c:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(slave);

	/* Check that the SPI module is operating in master mode */
	if (module->mode != SPI_MODE_MASTER) {
    248e:	7944      	ldrb	r4, [r0, #5]
		return STATUS_ERR_UNSUPPORTED_DEV;
    2490:	2315      	movs	r3, #21
	if (module->mode != SPI_MODE_MASTER) {
    2492:	2c01      	cmp	r4, #1
    2494:	d001      	beq.n	249a <spi_select_slave+0xe>
			/* Drive Slave Select high */
			port_pin_set_output_level(slave->ss_pin, true);
		}
	}
	return STATUS_OK;
}
    2496:	0018      	movs	r0, r3
    2498:	bd10      	pop	{r4, pc}
	if(!(module->master_slave_select_enable))
    249a:	7a04      	ldrb	r4, [r0, #8]
	return STATUS_OK;
    249c:	2300      	movs	r3, #0
	if(!(module->master_slave_select_enable))
    249e:	2c00      	cmp	r4, #0
    24a0:	d1f9      	bne.n	2496 <spi_select_slave+0xa>
		if (select) {
    24a2:	2a00      	cmp	r2, #0
    24a4:	d058      	beq.n	2558 <spi_select_slave+0xcc>
			if (slave->address_enabled) {
    24a6:	784b      	ldrb	r3, [r1, #1]
    24a8:	2b00      	cmp	r3, #0
    24aa:	d044      	beq.n	2536 <spi_select_slave+0xaa>
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check interrupt flag */
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24ac:	6803      	ldr	r3, [r0, #0]
    24ae:	7e1b      	ldrb	r3, [r3, #24]
				if (!spi_is_ready_to_write(module)) {
    24b0:	07db      	lsls	r3, r3, #31
    24b2:	d410      	bmi.n	24d6 <spi_select_slave+0x4a>
					port_pin_set_output_level(slave->ss_pin, true);
    24b4:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24b6:	09d1      	lsrs	r1, r2, #7
		return NULL;
    24b8:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24ba:	2900      	cmp	r1, #0
    24bc:	d104      	bne.n	24c8 <spi_select_slave+0x3c>
		return &(ports[port_index]->Group[group_index]);
    24be:	0953      	lsrs	r3, r2, #5
    24c0:	01db      	lsls	r3, r3, #7
    24c2:	492e      	ldr	r1, [pc, #184]	; (257c <spi_select_slave+0xf0>)
    24c4:	468c      	mov	ip, r1
    24c6:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24c8:	211f      	movs	r1, #31
    24ca:	4011      	ands	r1, r2
    24cc:	2201      	movs	r2, #1
    24ce:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    24d0:	619a      	str	r2, [r3, #24]
					return STATUS_BUSY;
    24d2:	2305      	movs	r3, #5
    24d4:	e7df      	b.n	2496 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    24d6:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    24d8:	09d4      	lsrs	r4, r2, #7
		return NULL;
    24da:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    24dc:	2c00      	cmp	r4, #0
    24de:	d104      	bne.n	24ea <spi_select_slave+0x5e>
		return &(ports[port_index]->Group[group_index]);
    24e0:	0953      	lsrs	r3, r2, #5
    24e2:	01db      	lsls	r3, r3, #7
    24e4:	4c25      	ldr	r4, [pc, #148]	; (257c <spi_select_slave+0xf0>)
    24e6:	46a4      	mov	ip, r4
    24e8:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    24ea:	241f      	movs	r4, #31
    24ec:	4014      	ands	r4, r2
    24ee:	2201      	movs	r2, #1
    24f0:	40a2      	lsls	r2, r4
		port_base->OUTCLR.reg = pin_mask;
    24f2:	615a      	str	r2, [r3, #20]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);
    24f4:	6803      	ldr	r3, [r0, #0]
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    24f6:	7e1a      	ldrb	r2, [r3, #24]

	/* Check if the data register has been copied to the shift register */
	if (!spi_is_ready_to_write(module)) {
    24f8:	07d2      	lsls	r2, r2, #31
    24fa:	d501      	bpl.n	2500 <spi_select_slave+0x74>
		/* Data register has not been copied to the shift register, return */
		return STATUS_BUSY;
	}

	/* Write the character to the DATA register */
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    24fc:	788a      	ldrb	r2, [r1, #2]
    24fe:	629a      	str	r2, [r3, #40]	; 0x28
				if (!(module->receiver_enabled)) {
    2500:	79c2      	ldrb	r2, [r0, #7]
	return STATUS_OK;
    2502:	2300      	movs	r3, #0
				if (!(module->receiver_enabled)) {
    2504:	2a00      	cmp	r2, #0
    2506:	d1c6      	bne.n	2496 <spi_select_slave+0xa>
	SercomSpi *const spi_module = &(module->hw->SPI);
    2508:	6802      	ldr	r2, [r0, #0]
					while (!spi_is_ready_to_read(module)) {
    250a:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    250c:	7e13      	ldrb	r3, [r2, #24]
    250e:	420b      	tst	r3, r1
    2510:	d0fc      	beq.n	250c <spi_select_slave+0x80>
    2512:	7e11      	ldrb	r1, [r2, #24]
	return STATUS_OK;
    2514:	2300      	movs	r3, #0
	Assert(module->hw);

	SercomSpi *const spi_module = &(module->hw->SPI);

	/* Check if data is ready to be read */
	if (!spi_is_ready_to_read(module)) {
    2516:	0749      	lsls	r1, r1, #29
    2518:	d5bd      	bpl.n	2496 <spi_select_slave+0xa>

	/* Return value */
	enum status_code retval = STATUS_OK;

	/* Check if data is overflown */
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    251a:	8b53      	ldrh	r3, [r2, #26]
    251c:	075b      	lsls	r3, r3, #29
    251e:	d501      	bpl.n	2524 <spi_select_slave+0x98>
		retval = STATUS_ERR_OVERFLOW;
		/* Clear overflow flag */
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    2520:	2304      	movs	r3, #4
    2522:	8353      	strh	r3, [r2, #26]
	}

	/* Read the character from the DATA register */
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    2524:	7983      	ldrb	r3, [r0, #6]
    2526:	2b01      	cmp	r3, #1
    2528:	d002      	beq.n	2530 <spi_select_slave+0xa4>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
	} else {
		*rx_data = (uint8_t)spi_module->DATA.reg;
    252a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    252c:	2300      	movs	r3, #0
    252e:	e7b2      	b.n	2496 <spi_select_slave+0xa>
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    2530:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2532:	2300      	movs	r3, #0
    2534:	e7af      	b.n	2496 <spi_select_slave+0xa>
				port_pin_set_output_level(slave->ss_pin, false);
    2536:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    2538:	09d1      	lsrs	r1, r2, #7
		return NULL;
    253a:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    253c:	2900      	cmp	r1, #0
    253e:	d104      	bne.n	254a <spi_select_slave+0xbe>
		return &(ports[port_index]->Group[group_index]);
    2540:	0953      	lsrs	r3, r2, #5
    2542:	01db      	lsls	r3, r3, #7
    2544:	490d      	ldr	r1, [pc, #52]	; (257c <spi_select_slave+0xf0>)
    2546:	468c      	mov	ip, r1
    2548:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    254a:	211f      	movs	r1, #31
    254c:	4011      	ands	r1, r2
    254e:	2201      	movs	r2, #1
    2550:	408a      	lsls	r2, r1
		port_base->OUTCLR.reg = pin_mask;
    2552:	615a      	str	r2, [r3, #20]
	return STATUS_OK;
    2554:	2300      	movs	r3, #0
    2556:	e79e      	b.n	2496 <spi_select_slave+0xa>
			port_pin_set_output_level(slave->ss_pin, true);
    2558:	780a      	ldrb	r2, [r1, #0]
	if (port_index < PORT_INST_NUM) {
    255a:	09d1      	lsrs	r1, r2, #7
		return NULL;
    255c:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    255e:	2900      	cmp	r1, #0
    2560:	d104      	bne.n	256c <spi_select_slave+0xe0>
		return &(ports[port_index]->Group[group_index]);
    2562:	0953      	lsrs	r3, r2, #5
    2564:	01db      	lsls	r3, r3, #7
    2566:	4905      	ldr	r1, [pc, #20]	; (257c <spi_select_slave+0xf0>)
    2568:	468c      	mov	ip, r1
    256a:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    256c:	211f      	movs	r1, #31
    256e:	4011      	ands	r1, r2
    2570:	2201      	movs	r2, #1
    2572:	408a      	lsls	r2, r1
		port_base->OUTSET.reg = pin_mask;
    2574:	619a      	str	r2, [r3, #24]
	return STATUS_OK;
    2576:	2300      	movs	r3, #0
    2578:	e78d      	b.n	2496 <spi_select_slave+0xa>
    257a:	46c0      	nop			; (mov r8, r8)
    257c:	40002800 	.word	0x40002800

00002580 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
    2580:	b5f0      	push	{r4, r5, r6, r7, lr}
    2582:	46de      	mov	lr, fp
    2584:	4657      	mov	r7, sl
    2586:	464e      	mov	r6, r9
    2588:	4645      	mov	r5, r8
    258a:	b5e0      	push	{r5, r6, r7, lr}
    258c:	b091      	sub	sp, #68	; 0x44
    258e:	0005      	movs	r5, r0
    2590:	000c      	movs	r4, r1
    2592:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
    2594:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    2596:	0008      	movs	r0, r1
    2598:	4bc6      	ldr	r3, [pc, #792]	; (28b4 <usart_init+0x334>)
    259a:	4798      	blx	r3
    259c:	0002      	movs	r2, r0
	uint32_t pm_index, gclk_index; 
#if (SAML22) || (SAMC20) 
	pm_index	= sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
	gclk_index	= sercom_index + SERCOM0_GCLK_ID_CORE;
#elif (SAML21) || (SAMR30) || (SAMR34) || (SAMR35)
	if (sercom_index == 5) {
    259e:	2805      	cmp	r0, #5
    25a0:	d00d      	beq.n	25be <usart_init+0x3e>
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
		gclk_index   = SERCOM5_GCLK_ID_CORE;
	} else {
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    25a2:	0007      	movs	r7, r0
    25a4:	3712      	adds	r7, #18
		pm_index     = sercom_index + MCLK_APBCMASK_SERCOM0_Pos;
    25a6:	0003      	movs	r3, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    25a8:	6821      	ldr	r1, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
    25aa:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
    25ac:	07c9      	lsls	r1, r1, #31
    25ae:	d509      	bpl.n	25c4 <usart_init+0x44>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
    25b0:	b011      	add	sp, #68	; 0x44
    25b2:	bc3c      	pop	{r2, r3, r4, r5}
    25b4:	4690      	mov	r8, r2
    25b6:	4699      	mov	r9, r3
    25b8:	46a2      	mov	sl, r4
    25ba:	46ab      	mov	fp, r5
    25bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    25be:	2718      	movs	r7, #24
		pm_index     = MCLK_APBDMASK_SERCOM5_Pos;
    25c0:	2301      	movs	r3, #1
    25c2:	e7f1      	b.n	25a8 <usart_init+0x28>
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    25c4:	6821      	ldr	r1, [r4, #0]
		return STATUS_ERR_DENIED;
    25c6:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
    25c8:	0789      	lsls	r1, r1, #30
    25ca:	d4f1      	bmi.n	25b0 <usart_init+0x30>
	if (sercom_index == 5) {
    25cc:	2a05      	cmp	r2, #5
    25ce:	d049      	beq.n	2664 <usart_init+0xe4>
			MCLK->APBCMASK.reg |= mask;
    25d0:	49b9      	ldr	r1, [pc, #740]	; (28b8 <usart_init+0x338>)
    25d2:	69c8      	ldr	r0, [r1, #28]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);	
    25d4:	2201      	movs	r2, #1
    25d6:	409a      	lsls	r2, r3
    25d8:	0013      	movs	r3, r2
    25da:	4303      	orrs	r3, r0
    25dc:	61cb      	str	r3, [r1, #28]
	gclk_chan_conf.source_generator = config->generator_source;
    25de:	a90f      	add	r1, sp, #60	; 0x3c
    25e0:	232d      	movs	r3, #45	; 0x2d
    25e2:	4698      	mov	r8, r3
    25e4:	5cf3      	ldrb	r3, [r6, r3]
    25e6:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
    25e8:	b2ff      	uxtb	r7, r7
    25ea:	0038      	movs	r0, r7
    25ec:	4bb3      	ldr	r3, [pc, #716]	; (28bc <usart_init+0x33c>)
    25ee:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
    25f0:	0038      	movs	r0, r7
    25f2:	4bb3      	ldr	r3, [pc, #716]	; (28c0 <usart_init+0x340>)
    25f4:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
    25f6:	4643      	mov	r3, r8
    25f8:	5cf0      	ldrb	r0, [r6, r3]
    25fa:	2100      	movs	r1, #0
    25fc:	4bb1      	ldr	r3, [pc, #708]	; (28c4 <usart_init+0x344>)
    25fe:	4798      	blx	r3
	module->character_size = config->character_size;
    2600:	7af3      	ldrb	r3, [r6, #11]
    2602:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
    2604:	2324      	movs	r3, #36	; 0x24
    2606:	5cf3      	ldrb	r3, [r6, r3]
    2608:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
    260a:	2325      	movs	r3, #37	; 0x25
    260c:	5cf3      	ldrb	r3, [r6, r3]
    260e:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
    2610:	7ef3      	ldrb	r3, [r6, #27]
    2612:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
    2614:	7f33      	ldrb	r3, [r6, #28]
    2616:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
    2618:	682b      	ldr	r3, [r5, #0]
    261a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
    261c:	0018      	movs	r0, r3
    261e:	4ba5      	ldr	r3, [pc, #660]	; (28b4 <usart_init+0x334>)
    2620:	4798      	blx	r3
	if (sercom_index == 5) {
    2622:	2805      	cmp	r0, #5
    2624:	d026      	beq.n	2674 <usart_init+0xf4>
		gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
    2626:	3012      	adds	r0, #18
	uint16_t baud  = 0;
    2628:	2200      	movs	r2, #0
    262a:	230e      	movs	r3, #14
    262c:	a906      	add	r1, sp, #24
    262e:	468c      	mov	ip, r1
    2630:	4463      	add	r3, ip
    2632:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
    2634:	8a32      	ldrh	r2, [r6, #16]
    2636:	9202      	str	r2, [sp, #8]
    2638:	2380      	movs	r3, #128	; 0x80
    263a:	01db      	lsls	r3, r3, #7
    263c:	429a      	cmp	r2, r3
    263e:	d100      	bne.n	2642 <usart_init+0xc2>
    2640:	e0ab      	b.n	279a <usart_init+0x21a>
    2642:	d919      	bls.n	2678 <usart_init+0xf8>
    2644:	23c0      	movs	r3, #192	; 0xc0
    2646:	01db      	lsls	r3, r3, #7
    2648:	9a02      	ldr	r2, [sp, #8]
    264a:	429a      	cmp	r2, r3
    264c:	d100      	bne.n	2650 <usart_init+0xd0>
    264e:	e09f      	b.n	2790 <usart_init+0x210>
    2650:	2380      	movs	r3, #128	; 0x80
    2652:	021b      	lsls	r3, r3, #8
    2654:	429a      	cmp	r2, r3
    2656:	d000      	beq.n	265a <usart_init+0xda>
    2658:	e127      	b.n	28aa <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
    265a:	2303      	movs	r3, #3
    265c:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    265e:	2300      	movs	r3, #0
    2660:	9307      	str	r3, [sp, #28]
    2662:	e012      	b.n	268a <usart_init+0x10a>
			MCLK->APBDMASK.reg |= mask;
    2664:	4994      	ldr	r1, [pc, #592]	; (28b8 <usart_init+0x338>)
    2666:	6a08      	ldr	r0, [r1, #32]
		system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBD, 1 << pm_index);
    2668:	3a04      	subs	r2, #4
    266a:	409a      	lsls	r2, r3
    266c:	0013      	movs	r3, r2
    266e:	4303      	orrs	r3, r0
    2670:	620b      	str	r3, [r1, #32]
    2672:	e7b4      	b.n	25de <usart_init+0x5e>
		gclk_index   = SERCOM5_GCLK_ID_CORE;
    2674:	2018      	movs	r0, #24
    2676:	e7d7      	b.n	2628 <usart_init+0xa8>
	switch (config->sample_rate) {
    2678:	2380      	movs	r3, #128	; 0x80
    267a:	019b      	lsls	r3, r3, #6
    267c:	429a      	cmp	r2, r3
    267e:	d000      	beq.n	2682 <usart_init+0x102>
    2680:	e113      	b.n	28aa <usart_init+0x32a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    2682:	2310      	movs	r3, #16
    2684:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2686:	3b0f      	subs	r3, #15
    2688:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
    268a:	6833      	ldr	r3, [r6, #0]
    268c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    268e:	68f3      	ldr	r3, [r6, #12]
    2690:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    2692:	6973      	ldr	r3, [r6, #20]
    2694:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    2696:	7e33      	ldrb	r3, [r6, #24]
    2698:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    269a:	2326      	movs	r3, #38	; 0x26
    269c:	5cf3      	ldrb	r3, [r6, r3]
    269e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    26a0:	6873      	ldr	r3, [r6, #4]
    26a2:	4699      	mov	r9, r3
	switch (transfer_mode)
    26a4:	2b00      	cmp	r3, #0
    26a6:	d100      	bne.n	26aa <usart_init+0x12a>
    26a8:	e09f      	b.n	27ea <usart_init+0x26a>
    26aa:	2380      	movs	r3, #128	; 0x80
    26ac:	055b      	lsls	r3, r3, #21
    26ae:	4599      	cmp	r9, r3
    26b0:	d104      	bne.n	26bc <usart_init+0x13c>
			if (!config->use_external_clock) {
    26b2:	2327      	movs	r3, #39	; 0x27
    26b4:	5cf3      	ldrb	r3, [r6, r3]
    26b6:	2b00      	cmp	r3, #0
    26b8:	d100      	bne.n	26bc <usart_init+0x13c>
    26ba:	e084      	b.n	27c6 <usart_init+0x246>
	if(config->encoding_format_enable) {
    26bc:	7e73      	ldrb	r3, [r6, #25]
    26be:	2b00      	cmp	r3, #0
    26c0:	d002      	beq.n	26c8 <usart_init+0x148>
		usart_hw->RXPL.reg = config->receive_pulse_length;
    26c2:	7eb3      	ldrb	r3, [r6, #26]
    26c4:	4642      	mov	r2, r8
    26c6:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
    26c8:	682a      	ldr	r2, [r5, #0]
    26ca:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
    26cc:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
    26ce:	2b00      	cmp	r3, #0
    26d0:	d1fc      	bne.n	26cc <usart_init+0x14c>
	usart_hw->BAUD.reg = baud;
    26d2:	330e      	adds	r3, #14
    26d4:	aa06      	add	r2, sp, #24
    26d6:	4694      	mov	ip, r2
    26d8:	4463      	add	r3, ip
    26da:	881b      	ldrh	r3, [r3, #0]
    26dc:	4642      	mov	r2, r8
    26de:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
    26e0:	9b05      	ldr	r3, [sp, #20]
    26e2:	9a03      	ldr	r2, [sp, #12]
    26e4:	4313      	orrs	r3, r2
    26e6:	9a04      	ldr	r2, [sp, #16]
    26e8:	4313      	orrs	r3, r2
    26ea:	464a      	mov	r2, r9
    26ec:	4313      	orrs	r3, r2
    26ee:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    26f0:	465b      	mov	r3, fp
    26f2:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
    26f4:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    26f6:	4653      	mov	r3, sl
    26f8:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
    26fa:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
    26fc:	2327      	movs	r3, #39	; 0x27
    26fe:	5cf3      	ldrb	r3, [r6, r3]
    2700:	2b00      	cmp	r3, #0
    2702:	d101      	bne.n	2708 <usart_init+0x188>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
    2704:	3304      	adds	r3, #4
    2706:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2708:	7e73      	ldrb	r3, [r6, #25]
    270a:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    270c:	7f32      	ldrb	r2, [r6, #28]
    270e:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
    2710:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    2712:	7f72      	ldrb	r2, [r6, #29]
    2714:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
    2716:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2718:	2224      	movs	r2, #36	; 0x24
    271a:	5cb2      	ldrb	r2, [r6, r2]
    271c:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
    271e:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
    2720:	2225      	movs	r2, #37	; 0x25
    2722:	5cb2      	ldrb	r2, [r6, r2]
    2724:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
    2726:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
    2728:	7ab1      	ldrb	r1, [r6, #10]
    272a:	7af2      	ldrb	r2, [r6, #11]
    272c:	4311      	orrs	r1, r2
    272e:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
    2730:	8933      	ldrh	r3, [r6, #8]
    2732:	2bff      	cmp	r3, #255	; 0xff
    2734:	d07d      	beq.n	2832 <usart_init+0x2b2>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
    2736:	2280      	movs	r2, #128	; 0x80
    2738:	0452      	lsls	r2, r2, #17
    273a:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
    273c:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
    273e:	232c      	movs	r3, #44	; 0x2c
    2740:	5cf3      	ldrb	r3, [r6, r3]
    2742:	2b00      	cmp	r3, #0
    2744:	d103      	bne.n	274e <usart_init+0x1ce>
    2746:	4b60      	ldr	r3, [pc, #384]	; (28c8 <usart_init+0x348>)
    2748:	789b      	ldrb	r3, [r3, #2]
    274a:	079b      	lsls	r3, r3, #30
    274c:	d501      	bpl.n	2752 <usart_init+0x1d2>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
    274e:	2380      	movs	r3, #128	; 0x80
    2750:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
    2752:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2754:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2756:	2b00      	cmp	r3, #0
    2758:	d1fc      	bne.n	2754 <usart_init+0x1d4>
	usart_hw->CTRLB.reg = ctrlb;
    275a:	4643      	mov	r3, r8
    275c:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
    275e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2760:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2762:	2b00      	cmp	r3, #0
    2764:	d1fc      	bne.n	2760 <usart_init+0x1e0>
	usart_hw->CTRLA.reg = ctrla;
    2766:	4643      	mov	r3, r8
    2768:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
    276a:	ab0e      	add	r3, sp, #56	; 0x38
    276c:	2280      	movs	r2, #128	; 0x80
    276e:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
    2770:	2200      	movs	r2, #0
    2772:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
    2774:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
    2776:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
    2778:	6b33      	ldr	r3, [r6, #48]	; 0x30
    277a:	930a      	str	r3, [sp, #40]	; 0x28
    277c:	6b73      	ldr	r3, [r6, #52]	; 0x34
    277e:	930b      	str	r3, [sp, #44]	; 0x2c
    2780:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    2782:	930c      	str	r3, [sp, #48]	; 0x30
    2784:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    2786:	9302      	str	r3, [sp, #8]
    2788:	930d      	str	r3, [sp, #52]	; 0x34
    278a:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
    278c:	ae0a      	add	r6, sp, #40	; 0x28
    278e:	e05e      	b.n	284e <usart_init+0x2ce>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    2790:	2308      	movs	r3, #8
    2792:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
    2794:	3b07      	subs	r3, #7
    2796:	9307      	str	r3, [sp, #28]
    2798:	e777      	b.n	268a <usart_init+0x10a>
	ctrla = (uint32_t)config->data_order |
    279a:	6833      	ldr	r3, [r6, #0]
    279c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
    279e:	68f3      	ldr	r3, [r6, #12]
    27a0:	9303      	str	r3, [sp, #12]
		config->sample_adjustment |
    27a2:	6973      	ldr	r3, [r6, #20]
    27a4:	9304      	str	r3, [sp, #16]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
    27a6:	7e33      	ldrb	r3, [r6, #24]
    27a8:	469b      	mov	fp, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
    27aa:	2326      	movs	r3, #38	; 0x26
    27ac:	5cf3      	ldrb	r3, [r6, r3]
    27ae:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
    27b0:	6873      	ldr	r3, [r6, #4]
    27b2:	4699      	mov	r9, r3
	switch (transfer_mode)
    27b4:	2b00      	cmp	r3, #0
    27b6:	d014      	beq.n	27e2 <usart_init+0x262>
    27b8:	2380      	movs	r3, #128	; 0x80
    27ba:	055b      	lsls	r3, r3, #21
    27bc:	4599      	cmp	r9, r3
    27be:	d100      	bne.n	27c2 <usart_init+0x242>
    27c0:	e777      	b.n	26b2 <usart_init+0x132>
	enum status_code status_code = STATUS_OK;
    27c2:	2000      	movs	r0, #0
    27c4:	e020      	b.n	2808 <usart_init+0x288>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
    27c6:	6a33      	ldr	r3, [r6, #32]
    27c8:	001f      	movs	r7, r3
    27ca:	b2c0      	uxtb	r0, r0
    27cc:	4b3f      	ldr	r3, [pc, #252]	; (28cc <usart_init+0x34c>)
    27ce:	4798      	blx	r3
    27d0:	0001      	movs	r1, r0
    27d2:	220e      	movs	r2, #14
    27d4:	ab06      	add	r3, sp, #24
    27d6:	469c      	mov	ip, r3
    27d8:	4462      	add	r2, ip
    27da:	0038      	movs	r0, r7
    27dc:	4b3c      	ldr	r3, [pc, #240]	; (28d0 <usart_init+0x350>)
    27de:	4798      	blx	r3
    27e0:	e012      	b.n	2808 <usart_init+0x288>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
    27e2:	2308      	movs	r3, #8
    27e4:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    27e6:	2300      	movs	r3, #0
    27e8:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
    27ea:	2327      	movs	r3, #39	; 0x27
    27ec:	5cf3      	ldrb	r3, [r6, r3]
    27ee:	2b00      	cmp	r3, #0
    27f0:	d00e      	beq.n	2810 <usart_init+0x290>
				status_code =
    27f2:	9b06      	ldr	r3, [sp, #24]
    27f4:	9300      	str	r3, [sp, #0]
    27f6:	9b07      	ldr	r3, [sp, #28]
    27f8:	220e      	movs	r2, #14
    27fa:	a906      	add	r1, sp, #24
    27fc:	468c      	mov	ip, r1
    27fe:	4462      	add	r2, ip
    2800:	6ab1      	ldr	r1, [r6, #40]	; 0x28
    2802:	6a30      	ldr	r0, [r6, #32]
    2804:	4f33      	ldr	r7, [pc, #204]	; (28d4 <usart_init+0x354>)
    2806:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
    2808:	2800      	cmp	r0, #0
    280a:	d000      	beq.n	280e <usart_init+0x28e>
    280c:	e6d0      	b.n	25b0 <usart_init+0x30>
    280e:	e755      	b.n	26bc <usart_init+0x13c>
						_sercom_get_async_baud_val(config->baudrate,
    2810:	6a33      	ldr	r3, [r6, #32]
    2812:	001f      	movs	r7, r3
    2814:	b2c0      	uxtb	r0, r0
    2816:	4b2d      	ldr	r3, [pc, #180]	; (28cc <usart_init+0x34c>)
    2818:	4798      	blx	r3
    281a:	0001      	movs	r1, r0
				status_code =
    281c:	9b06      	ldr	r3, [sp, #24]
    281e:	9300      	str	r3, [sp, #0]
    2820:	9b07      	ldr	r3, [sp, #28]
    2822:	220e      	movs	r2, #14
    2824:	a806      	add	r0, sp, #24
    2826:	4684      	mov	ip, r0
    2828:	4462      	add	r2, ip
    282a:	0038      	movs	r0, r7
    282c:	4f29      	ldr	r7, [pc, #164]	; (28d4 <usart_init+0x354>)
    282e:	47b8      	blx	r7
    2830:	e7ea      	b.n	2808 <usart_init+0x288>
		if(config->lin_slave_enable) {
    2832:	7ef3      	ldrb	r3, [r6, #27]
    2834:	2b00      	cmp	r3, #0
    2836:	d082      	beq.n	273e <usart_init+0x1be>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
    2838:	2380      	movs	r3, #128	; 0x80
    283a:	04db      	lsls	r3, r3, #19
    283c:	431f      	orrs	r7, r3
    283e:	e77e      	b.n	273e <usart_init+0x1be>
			current_pinmux = _sercom_get_default_pad(hw, pad);
    2840:	0020      	movs	r0, r4
    2842:	4b25      	ldr	r3, [pc, #148]	; (28d8 <usart_init+0x358>)
    2844:	4798      	blx	r3
    2846:	e007      	b.n	2858 <usart_init+0x2d8>
    2848:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
    284a:	2f04      	cmp	r7, #4
    284c:	d00d      	beq.n	286a <usart_init+0x2ea>
    284e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
    2850:	00bb      	lsls	r3, r7, #2
    2852:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
    2854:	2800      	cmp	r0, #0
    2856:	d0f3      	beq.n	2840 <usart_init+0x2c0>
		if (current_pinmux != PINMUX_UNUSED) {
    2858:	1c43      	adds	r3, r0, #1
    285a:	d0f5      	beq.n	2848 <usart_init+0x2c8>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
    285c:	a90e      	add	r1, sp, #56	; 0x38
    285e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
    2860:	0c00      	lsrs	r0, r0, #16
    2862:	b2c0      	uxtb	r0, r0
    2864:	4b1d      	ldr	r3, [pc, #116]	; (28dc <usart_init+0x35c>)
    2866:	4798      	blx	r3
    2868:	e7ee      	b.n	2848 <usart_init+0x2c8>
		module->callback[i]            = NULL;
    286a:	2300      	movs	r3, #0
    286c:	60eb      	str	r3, [r5, #12]
    286e:	612b      	str	r3, [r5, #16]
    2870:	616b      	str	r3, [r5, #20]
    2872:	61ab      	str	r3, [r5, #24]
    2874:	61eb      	str	r3, [r5, #28]
    2876:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
    2878:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
    287a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
    287c:	2200      	movs	r2, #0
    287e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
    2880:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
    2882:	3330      	adds	r3, #48	; 0x30
    2884:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
    2886:	3301      	adds	r3, #1
    2888:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
    288a:	3301      	adds	r3, #1
    288c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
    288e:	3301      	adds	r3, #1
    2890:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
    2892:	6828      	ldr	r0, [r5, #0]
    2894:	4b07      	ldr	r3, [pc, #28]	; (28b4 <usart_init+0x334>)
    2896:	4798      	blx	r3
    2898:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
    289a:	4911      	ldr	r1, [pc, #68]	; (28e0 <usart_init+0x360>)
    289c:	4b11      	ldr	r3, [pc, #68]	; (28e4 <usart_init+0x364>)
    289e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
    28a0:	00a4      	lsls	r4, r4, #2
    28a2:	4b11      	ldr	r3, [pc, #68]	; (28e8 <usart_init+0x368>)
    28a4:	50e5      	str	r5, [r4, r3]
	return status_code;
    28a6:	2000      	movs	r0, #0
    28a8:	e682      	b.n	25b0 <usart_init+0x30>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
    28aa:	2310      	movs	r3, #16
    28ac:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
    28ae:	2300      	movs	r3, #0
    28b0:	9307      	str	r3, [sp, #28]
    28b2:	e6ea      	b.n	268a <usart_init+0x10a>
    28b4:	000020a9 	.word	0x000020a9
    28b8:	40000400 	.word	0x40000400
    28bc:	000032fd 	.word	0x000032fd
    28c0:	0000328d 	.word	0x0000328d
    28c4:	00001f01 	.word	0x00001f01
    28c8:	41002000 	.word	0x41002000
    28cc:	00003321 	.word	0x00003321
    28d0:	00001e43 	.word	0x00001e43
    28d4:	00001e6d 	.word	0x00001e6d
    28d8:	00001f4d 	.word	0x00001f4d
    28dc:	000033f9 	.word	0x000033f9
    28e0:	00002a21 	.word	0x00002a21
    28e4:	000020e5 	.word	0x000020e5
    28e8:	200010cc 	.word	0x200010cc

000028ec <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
    28ec:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
    28ee:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
    28f0:	2a00      	cmp	r2, #0
    28f2:	d101      	bne.n	28f8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
    28f4:	0018      	movs	r0, r3
    28f6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
    28f8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
    28fa:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    28fc:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
    28fe:	2a00      	cmp	r2, #0
    2900:	d1f8      	bne.n	28f4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    2902:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
    2904:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    2906:	2a00      	cmp	r2, #0
    2908:	d1fc      	bne.n	2904 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
    290a:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
    290c:	2102      	movs	r1, #2
    290e:	7e1a      	ldrb	r2, [r3, #24]
    2910:	420a      	tst	r2, r1
    2912:	d0fc      	beq.n	290e <usart_write_wait+0x22>
	return STATUS_OK;
    2914:	2300      	movs	r3, #0
    2916:	e7ed      	b.n	28f4 <usart_write_wait+0x8>

00002918 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
    2918:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
    291a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
    291c:	2a00      	cmp	r2, #0
    291e:	d101      	bne.n	2924 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
    2920:	0018      	movs	r0, r3
    2922:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
    2924:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
    2926:	b292      	uxth	r2, r2
		return STATUS_BUSY;
    2928:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
    292a:	2a00      	cmp	r2, #0
    292c:	d1f8      	bne.n	2920 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
    292e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
    2930:	7e10      	ldrb	r0, [r2, #24]
    2932:	0740      	lsls	r0, r0, #29
    2934:	d5f4      	bpl.n	2920 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
    2936:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    2938:	2b00      	cmp	r3, #0
    293a:	d1fc      	bne.n	2936 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    293c:	8b53      	ldrh	r3, [r2, #26]
    293e:	b2db      	uxtb	r3, r3
	if (error_code) {
    2940:	0698      	lsls	r0, r3, #26
    2942:	d01d      	beq.n	2980 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
    2944:	0798      	lsls	r0, r3, #30
    2946:	d503      	bpl.n	2950 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2948:	2302      	movs	r3, #2
    294a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
    294c:	3318      	adds	r3, #24
    294e:	e7e7      	b.n	2920 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2950:	0758      	lsls	r0, r3, #29
    2952:	d503      	bpl.n	295c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2954:	2304      	movs	r3, #4
    2956:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
    2958:	331a      	adds	r3, #26
    295a:	e7e1      	b.n	2920 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
    295c:	07d8      	lsls	r0, r3, #31
    295e:	d503      	bpl.n	2968 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2960:	2301      	movs	r3, #1
    2962:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
    2964:	3312      	adds	r3, #18
    2966:	e7db      	b.n	2920 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
    2968:	06d8      	lsls	r0, r3, #27
    296a:	d503      	bpl.n	2974 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    296c:	2310      	movs	r3, #16
    296e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
    2970:	3332      	adds	r3, #50	; 0x32
    2972:	e7d5      	b.n	2920 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
    2974:	069b      	lsls	r3, r3, #26
    2976:	d503      	bpl.n	2980 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2978:	2320      	movs	r3, #32
    297a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
    297c:	3321      	adds	r3, #33	; 0x21
    297e:	e7cf      	b.n	2920 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
    2980:	8d13      	ldrh	r3, [r2, #40]	; 0x28
    2982:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
    2984:	2300      	movs	r3, #0
    2986:	e7cb      	b.n	2920 <usart_read_wait+0x8>

00002988 <usart_read_buffer_wait>:
 */
enum status_code usart_read_buffer_wait(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    2988:	b5f0      	push	{r4, r5, r6, r7, lr}
    298a:	46d6      	mov	lr, sl
    298c:	b500      	push	{lr}
    298e:	b084      	sub	sp, #16
    2990:	0004      	movs	r4, r0
    2992:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    2994:	2017      	movs	r0, #23
	if (length == 0) {
    2996:	2a00      	cmp	r2, #0
    2998:	d103      	bne.n	29a2 <usart_read_buffer_wait+0x1a>
			rx_data[rx_pos++] = (received_data >> 8);
		}
	}

	return STATUS_OK;
}
    299a:	b004      	add	sp, #16
    299c:	bc04      	pop	{r2}
    299e:	4692      	mov	sl, r2
    29a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->receiver_enabled)) {
    29a2:	79a3      	ldrb	r3, [r4, #6]
		return STATUS_ERR_DENIED;
    29a4:	3005      	adds	r0, #5
	if (!(module->receiver_enabled)) {
    29a6:	2b00      	cmp	r3, #0
    29a8:	d0f7      	beq.n	299a <usart_read_buffer_wait+0x12>
	SercomUsart *const usart_hw = &(module->hw->USART);
    29aa:	6826      	ldr	r6, [r4, #0]
	while (length--) {
    29ac:	3a01      	subs	r2, #1
    29ae:	b293      	uxth	r3, r2
    29b0:	469a      	mov	sl, r3
    29b2:	2500      	movs	r5, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    29b4:	2704      	movs	r7, #4
    29b6:	e019      	b.n	29ec <usart_read_buffer_wait+0x64>
		uint16_t received_data = 0;
    29b8:	2300      	movs	r3, #0
    29ba:	aa02      	add	r2, sp, #8
    29bc:	80d3      	strh	r3, [r2, #6]
		retval = usart_read_wait(module, &received_data);
    29be:	1d91      	adds	r1, r2, #6
    29c0:	0020      	movs	r0, r4
    29c2:	4b15      	ldr	r3, [pc, #84]	; (2a18 <usart_read_buffer_wait+0x90>)
    29c4:	4798      	blx	r3
		if (retval != STATUS_OK) {
    29c6:	2800      	cmp	r0, #0
    29c8:	d1e7      	bne.n	299a <usart_read_buffer_wait+0x12>
		rx_data[rx_pos++] = received_data;
    29ca:	1c69      	adds	r1, r5, #1
    29cc:	b289      	uxth	r1, r1
    29ce:	ab02      	add	r3, sp, #8
    29d0:	88db      	ldrh	r3, [r3, #6]
    29d2:	9a01      	ldr	r2, [sp, #4]
    29d4:	5553      	strb	r3, [r2, r5]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    29d6:	7962      	ldrb	r2, [r4, #5]
    29d8:	2a01      	cmp	r2, #1
    29da:	d014      	beq.n	2a06 <usart_read_buffer_wait+0x7e>
		rx_data[rx_pos++] = received_data;
    29dc:	000d      	movs	r5, r1
	while (length--) {
    29de:	4653      	mov	r3, sl
    29e0:	3b01      	subs	r3, #1
    29e2:	b29b      	uxth	r3, r3
    29e4:	469a      	mov	sl, r3
    29e6:	4b0d      	ldr	r3, [pc, #52]	; (2a1c <usart_read_buffer_wait+0x94>)
    29e8:	459a      	cmp	sl, r3
    29ea:	d0d6      	beq.n	299a <usart_read_buffer_wait+0x12>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) {
    29ec:	7e33      	ldrb	r3, [r6, #24]
    29ee:	423b      	tst	r3, r7
    29f0:	d1e2      	bne.n	29b8 <usart_read_buffer_wait+0x30>
    29f2:	4b0a      	ldr	r3, [pc, #40]	; (2a1c <usart_read_buffer_wait+0x94>)
    29f4:	7e32      	ldrb	r2, [r6, #24]
    29f6:	423a      	tst	r2, r7
    29f8:	d1de      	bne.n	29b8 <usart_read_buffer_wait+0x30>
			} else if (i == USART_TIMEOUT) {
    29fa:	2b01      	cmp	r3, #1
    29fc:	d009      	beq.n	2a12 <usart_read_buffer_wait+0x8a>
    29fe:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    2a00:	2b00      	cmp	r3, #0
    2a02:	d1f7      	bne.n	29f4 <usart_read_buffer_wait+0x6c>
    2a04:	e7d8      	b.n	29b8 <usart_read_buffer_wait+0x30>
			rx_data[rx_pos++] = (received_data >> 8);
    2a06:	3502      	adds	r5, #2
    2a08:	b2ad      	uxth	r5, r5
    2a0a:	0a1b      	lsrs	r3, r3, #8
    2a0c:	9a01      	ldr	r2, [sp, #4]
    2a0e:	5453      	strb	r3, [r2, r1]
    2a10:	e7e5      	b.n	29de <usart_read_buffer_wait+0x56>
				return STATUS_ERR_TIMEOUT;
    2a12:	2012      	movs	r0, #18
    2a14:	e7c1      	b.n	299a <usart_read_buffer_wait+0x12>
    2a16:	46c0      	nop			; (mov r8, r8)
    2a18:	00002919 	.word	0x00002919
    2a1c:	0000ffff 	.word	0x0000ffff

00002a20 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    2a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    2a22:	0080      	lsls	r0, r0, #2
    2a24:	4b62      	ldr	r3, [pc, #392]	; (2bb0 <_usart_interrupt_handler+0x190>)
    2a26:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    2a28:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    2a2a:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
    2a2c:	2b00      	cmp	r3, #0
    2a2e:	d1fc      	bne.n	2a2a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    2a30:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
    2a32:	7da6      	ldrb	r6, [r4, #22]
    2a34:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    2a36:	2330      	movs	r3, #48	; 0x30
    2a38:	5ceb      	ldrb	r3, [r5, r3]
    2a3a:	2231      	movs	r2, #49	; 0x31
    2a3c:	5caf      	ldrb	r7, [r5, r2]
    2a3e:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    2a40:	07f3      	lsls	r3, r6, #31
    2a42:	d522      	bpl.n	2a8a <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
    2a44:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a46:	b29b      	uxth	r3, r3
    2a48:	2b00      	cmp	r3, #0
    2a4a:	d01c      	beq.n	2a86 <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a4c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
    2a4e:	7813      	ldrb	r3, [r2, #0]
    2a50:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    2a52:	1c51      	adds	r1, r2, #1
    2a54:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2a56:	7969      	ldrb	r1, [r5, #5]
    2a58:	2901      	cmp	r1, #1
    2a5a:	d00e      	beq.n	2a7a <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    2a5c:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    2a5e:	05db      	lsls	r3, r3, #23
    2a60:	0ddb      	lsrs	r3, r3, #23
    2a62:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
    2a64:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
    2a66:	3b01      	subs	r3, #1
    2a68:	b29b      	uxth	r3, r3
    2a6a:	85eb      	strh	r3, [r5, #46]	; 0x2e
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d10c      	bne.n	2a8a <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a70:	3301      	adds	r3, #1
    2a72:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    2a74:	3301      	adds	r3, #1
    2a76:	75a3      	strb	r3, [r4, #22]
    2a78:	e007      	b.n	2a8a <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    2a7a:	7851      	ldrb	r1, [r2, #1]
    2a7c:	0209      	lsls	r1, r1, #8
    2a7e:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    2a80:	3202      	adds	r2, #2
    2a82:	62aa      	str	r2, [r5, #40]	; 0x28
    2a84:	e7eb      	b.n	2a5e <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    2a86:	2301      	movs	r3, #1
    2a88:	7523      	strb	r3, [r4, #20]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    2a8a:	07b3      	lsls	r3, r6, #30
    2a8c:	d506      	bpl.n	2a9c <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    2a8e:	2302      	movs	r3, #2
    2a90:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
    2a92:	2200      	movs	r2, #0
    2a94:	3331      	adds	r3, #49	; 0x31
    2a96:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    2a98:	07fb      	lsls	r3, r7, #31
    2a9a:	d41a      	bmi.n	2ad2 <_usart_interrupt_handler+0xb2>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    2a9c:	0773      	lsls	r3, r6, #29
    2a9e:	d565      	bpl.n	2b6c <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
    2aa0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2aa2:	b29b      	uxth	r3, r3
    2aa4:	2b00      	cmp	r3, #0
    2aa6:	d05f      	beq.n	2b68 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2aa8:	8b63      	ldrh	r3, [r4, #26]
    2aaa:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
    2aac:	071a      	lsls	r2, r3, #28
    2aae:	d414      	bmi.n	2ada <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    2ab0:	223f      	movs	r2, #63	; 0x3f
    2ab2:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    2ab4:	2b00      	cmp	r3, #0
    2ab6:	d034      	beq.n	2b22 <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    2ab8:	079a      	lsls	r2, r3, #30
    2aba:	d511      	bpl.n	2ae0 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    2abc:	221a      	movs	r2, #26
    2abe:	2332      	movs	r3, #50	; 0x32
    2ac0:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    2ac2:	3b30      	subs	r3, #48	; 0x30
    2ac4:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    2ac6:	077b      	lsls	r3, r7, #29
    2ac8:	d550      	bpl.n	2b6c <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    2aca:	0028      	movs	r0, r5
    2acc:	696b      	ldr	r3, [r5, #20]
    2ace:	4798      	blx	r3
    2ad0:	e04c      	b.n	2b6c <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    2ad2:	0028      	movs	r0, r5
    2ad4:	68eb      	ldr	r3, [r5, #12]
    2ad6:	4798      	blx	r3
    2ad8:	e7e0      	b.n	2a9c <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
    2ada:	2237      	movs	r2, #55	; 0x37
    2adc:	4013      	ands	r3, r2
    2ade:	e7e9      	b.n	2ab4 <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    2ae0:	075a      	lsls	r2, r3, #29
    2ae2:	d505      	bpl.n	2af0 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
    2ae4:	221e      	movs	r2, #30
    2ae6:	2332      	movs	r3, #50	; 0x32
    2ae8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    2aea:	3b2e      	subs	r3, #46	; 0x2e
    2aec:	8363      	strh	r3, [r4, #26]
    2aee:	e7ea      	b.n	2ac6 <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    2af0:	07da      	lsls	r2, r3, #31
    2af2:	d505      	bpl.n	2b00 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    2af4:	2213      	movs	r2, #19
    2af6:	2332      	movs	r3, #50	; 0x32
    2af8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    2afa:	3b31      	subs	r3, #49	; 0x31
    2afc:	8363      	strh	r3, [r4, #26]
    2afe:	e7e2      	b.n	2ac6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
    2b00:	06da      	lsls	r2, r3, #27
    2b02:	d505      	bpl.n	2b10 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
    2b04:	2242      	movs	r2, #66	; 0x42
    2b06:	2332      	movs	r3, #50	; 0x32
    2b08:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
    2b0a:	3b22      	subs	r3, #34	; 0x22
    2b0c:	8363      	strh	r3, [r4, #26]
    2b0e:	e7da      	b.n	2ac6 <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
    2b10:	2220      	movs	r2, #32
    2b12:	421a      	tst	r2, r3
    2b14:	d0d7      	beq.n	2ac6 <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
    2b16:	3221      	adds	r2, #33	; 0x21
    2b18:	2332      	movs	r3, #50	; 0x32
    2b1a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
    2b1c:	3b12      	subs	r3, #18
    2b1e:	8363      	strh	r3, [r4, #26]
    2b20:	e7d1      	b.n	2ac6 <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    2b22:	8d23      	ldrh	r3, [r4, #40]	; 0x28
    2b24:	05db      	lsls	r3, r3, #23
    2b26:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    2b28:	b2da      	uxtb	r2, r3
    2b2a:	6a69      	ldr	r1, [r5, #36]	; 0x24
    2b2c:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    2b2e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    2b30:	1c51      	adds	r1, r2, #1
    2b32:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    2b34:	7969      	ldrb	r1, [r5, #5]
    2b36:	2901      	cmp	r1, #1
    2b38:	d010      	beq.n	2b5c <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    2b3a:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    2b3c:	3b01      	subs	r3, #1
    2b3e:	b29b      	uxth	r3, r3
    2b40:	85ab      	strh	r3, [r5, #44]	; 0x2c
    2b42:	2b00      	cmp	r3, #0
    2b44:	d112      	bne.n	2b6c <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b46:	3304      	adds	r3, #4
    2b48:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
    2b4a:	2200      	movs	r2, #0
    2b4c:	332e      	adds	r3, #46	; 0x2e
    2b4e:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    2b50:	07bb      	lsls	r3, r7, #30
    2b52:	d50b      	bpl.n	2b6c <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    2b54:	0028      	movs	r0, r5
    2b56:	692b      	ldr	r3, [r5, #16]
    2b58:	4798      	blx	r3
    2b5a:	e007      	b.n	2b6c <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    2b5c:	0a1b      	lsrs	r3, r3, #8
    2b5e:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    2b60:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    2b62:	3301      	adds	r3, #1
    2b64:	626b      	str	r3, [r5, #36]	; 0x24
    2b66:	e7e8      	b.n	2b3a <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    2b68:	2304      	movs	r3, #4
    2b6a:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
    2b6c:	06f3      	lsls	r3, r6, #27
    2b6e:	d504      	bpl.n	2b7a <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
    2b70:	2310      	movs	r3, #16
    2b72:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
    2b74:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
    2b76:	06fb      	lsls	r3, r7, #27
    2b78:	d40e      	bmi.n	2b98 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
    2b7a:	06b3      	lsls	r3, r6, #26
    2b7c:	d504      	bpl.n	2b88 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
    2b7e:	2320      	movs	r3, #32
    2b80:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
    2b82:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
    2b84:	073b      	lsls	r3, r7, #28
    2b86:	d40b      	bmi.n	2ba0 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
    2b88:	0733      	lsls	r3, r6, #28
    2b8a:	d504      	bpl.n	2b96 <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
    2b8c:	2308      	movs	r3, #8
    2b8e:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
    2b90:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
    2b92:	06bb      	lsls	r3, r7, #26
    2b94:	d408      	bmi.n	2ba8 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    2b96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
    2b98:	0028      	movs	r0, r5
    2b9a:	69eb      	ldr	r3, [r5, #28]
    2b9c:	4798      	blx	r3
    2b9e:	e7ec      	b.n	2b7a <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
    2ba0:	0028      	movs	r0, r5
    2ba2:	69ab      	ldr	r3, [r5, #24]
    2ba4:	4798      	blx	r3
    2ba6:	e7ef      	b.n	2b88 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
    2ba8:	6a2b      	ldr	r3, [r5, #32]
    2baa:	0028      	movs	r0, r5
    2bac:	4798      	blx	r3
}
    2bae:	e7f2      	b.n	2b96 <_usart_interrupt_handler+0x176>
    2bb0:	200010cc 	.word	0x200010cc

00002bb4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    2bb4:	b510      	push	{r4, lr}
	switch (clock_source) {
    2bb6:	2808      	cmp	r0, #8
    2bb8:	d803      	bhi.n	2bc2 <system_clock_source_get_hz+0xe>
    2bba:	0080      	lsls	r0, r0, #2
    2bbc:	4b1c      	ldr	r3, [pc, #112]	; (2c30 <system_clock_source_get_hz+0x7c>)
    2bbe:	581b      	ldr	r3, [r3, r0]
    2bc0:	469f      	mov	pc, r3
		}

		return _system_clock_inst.dpll.frequency;

	default:
		return 0;
    2bc2:	2000      	movs	r0, #0
    2bc4:	e032      	b.n	2c2c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc.frequency;
    2bc6:	4b1b      	ldr	r3, [pc, #108]	; (2c34 <system_clock_source_get_hz+0x80>)
    2bc8:	6918      	ldr	r0, [r3, #16]
    2bca:	e02f      	b.n	2c2c <system_clock_source_get_hz+0x78>
		return (OSCCTRL->OSC16MCTRL.bit.FSEL+1)*4000000UL;
    2bcc:	4b1a      	ldr	r3, [pc, #104]	; (2c38 <system_clock_source_get_hz+0x84>)
    2bce:	7d18      	ldrb	r0, [r3, #20]
    2bd0:	0700      	lsls	r0, r0, #28
    2bd2:	0f80      	lsrs	r0, r0, #30
    2bd4:	1c43      	adds	r3, r0, #1
    2bd6:	4819      	ldr	r0, [pc, #100]	; (2c3c <system_clock_source_get_hz+0x88>)
    2bd8:	4358      	muls	r0, r3
    2bda:	e027      	b.n	2c2c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.xosc32k.frequency;
    2bdc:	4b15      	ldr	r3, [pc, #84]	; (2c34 <system_clock_source_get_hz+0x80>)
    2bde:	6958      	ldr	r0, [r3, #20]
    2be0:	e024      	b.n	2c2c <system_clock_source_get_hz+0x78>
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2be2:	4b14      	ldr	r3, [pc, #80]	; (2c34 <system_clock_source_get_hz+0x80>)
    2be4:	681b      	ldr	r3, [r3, #0]
			return 0;
    2be6:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_ENABLE))
    2be8:	079b      	lsls	r3, r3, #30
    2bea:	d51f      	bpl.n	2c2c <system_clock_source_get_hz+0x78>
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2bec:	4912      	ldr	r1, [pc, #72]	; (2c38 <system_clock_source_get_hz+0x84>)
    2bee:	2280      	movs	r2, #128	; 0x80
    2bf0:	0052      	lsls	r2, r2, #1
    2bf2:	68cb      	ldr	r3, [r1, #12]
    2bf4:	4213      	tst	r3, r2
    2bf6:	d0fc      	beq.n	2bf2 <system_clock_source_get_hz+0x3e>
		if (_system_clock_inst.dfll.control & OSCCTRL_DFLLCTRL_MODE) {
    2bf8:	4b0e      	ldr	r3, [pc, #56]	; (2c34 <system_clock_source_get_hz+0x80>)
    2bfa:	681b      	ldr	r3, [r3, #0]
    2bfc:	075b      	lsls	r3, r3, #29
    2bfe:	d401      	bmi.n	2c04 <system_clock_source_get_hz+0x50>
		return 48000000UL;
    2c00:	480f      	ldr	r0, [pc, #60]	; (2c40 <system_clock_source_get_hz+0x8c>)
    2c02:	e013      	b.n	2c2c <system_clock_source_get_hz+0x78>
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2c04:	2000      	movs	r0, #0
    2c06:	4b0f      	ldr	r3, [pc, #60]	; (2c44 <system_clock_source_get_hz+0x90>)
    2c08:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    2c0a:	4b0a      	ldr	r3, [pc, #40]	; (2c34 <system_clock_source_get_hz+0x80>)
    2c0c:	689b      	ldr	r3, [r3, #8]
    2c0e:	041b      	lsls	r3, r3, #16
    2c10:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(OSCCTRL_GCLK_ID_DFLL48) *
    2c12:	4358      	muls	r0, r3
    2c14:	e00a      	b.n	2c2c <system_clock_source_get_hz+0x78>
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2c16:	2328      	movs	r3, #40	; 0x28
    2c18:	4a07      	ldr	r2, [pc, #28]	; (2c38 <system_clock_source_get_hz+0x84>)
    2c1a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
    2c1c:	2000      	movs	r0, #0
		if (!(OSCCTRL->DPLLCTRLA.reg & OSCCTRL_DPLLCTRLA_ENABLE)) {
    2c1e:	079b      	lsls	r3, r3, #30
    2c20:	d504      	bpl.n	2c2c <system_clock_source_get_hz+0x78>
		return _system_clock_inst.dpll.frequency;
    2c22:	4b04      	ldr	r3, [pc, #16]	; (2c34 <system_clock_source_get_hz+0x80>)
    2c24:	68d8      	ldr	r0, [r3, #12]
    2c26:	e001      	b.n	2c2c <system_clock_source_get_hz+0x78>
		return 32768UL;
    2c28:	2080      	movs	r0, #128	; 0x80
    2c2a:	0200      	lsls	r0, r0, #8
	}
}
    2c2c:	bd10      	pop	{r4, pc}
    2c2e:	46c0      	nop			; (mov r8, r8)
    2c30:	0001c820 	.word	0x0001c820
    2c34:	20000a60 	.word	0x20000a60
    2c38:	40000c00 	.word	0x40000c00
    2c3c:	003d0900 	.word	0x003d0900
    2c40:	02dc6c00 	.word	0x02dc6c00
    2c44:	00003321 	.word	0x00003321

00002c48 <system_clock_source_osc16m_set_config>:
 *
 * \param[in] config  OSC16M configuration structure containing the new config
 */
void system_clock_source_osc16m_set_config(
		struct system_clock_source_osc16m_config *const config)
{
    2c48:	b570      	push	{r4, r5, r6, lr}
	OSCCTRL_OSC16MCTRL_Type temp = OSCCTRL->OSC16MCTRL;
    2c4a:	4c0b      	ldr	r4, [pc, #44]	; (2c78 <system_clock_source_osc16m_set_config+0x30>)
    2c4c:	7d23      	ldrb	r3, [r4, #20]

	/* Use temporary struct to reduce register access */
	temp.bit.FSEL    = config->fsel;
	temp.bit.ONDEMAND = config->on_demand;
    2c4e:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2c50:	7846      	ldrb	r6, [r0, #1]

	OSCCTRL->OSC16MCTRL = temp;
    2c52:	7802      	ldrb	r2, [r0, #0]
    2c54:	2103      	movs	r1, #3
    2c56:	4011      	ands	r1, r2
    2c58:	0089      	lsls	r1, r1, #2
    2c5a:	220c      	movs	r2, #12
    2c5c:	4393      	bics	r3, r2
    2c5e:	430b      	orrs	r3, r1
    2c60:	3a0b      	subs	r2, #11
    2c62:	4032      	ands	r2, r6
    2c64:	0192      	lsls	r2, r2, #6
    2c66:	2140      	movs	r1, #64	; 0x40
    2c68:	438b      	bics	r3, r1
    2c6a:	4313      	orrs	r3, r2
    2c6c:	01ed      	lsls	r5, r5, #7
    2c6e:	227f      	movs	r2, #127	; 0x7f
    2c70:	4013      	ands	r3, r2
    2c72:	432b      	orrs	r3, r5
    2c74:	7523      	strb	r3, [r4, #20]
}
    2c76:	bd70      	pop	{r4, r5, r6, pc}
    2c78:	40000c00 	.word	0x40000c00

00002c7c <system_clock_source_xosc32k_set_config>:
 *
 * \param[in] config  XOSC32K configuration structure containing the new config
 */
void system_clock_source_xosc32k_set_config(
		struct system_clock_source_xosc32k_config *const config)
{
    2c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c7e:	46d6      	mov	lr, sl
    2c80:	464f      	mov	r7, r9
    2c82:	4646      	mov	r6, r8
    2c84:	b5c0      	push	{r6, r7, lr}
	OSC32KCTRL_XOSC32K_Type temp = OSC32KCTRL->XOSC32K;
    2c86:	4b20      	ldr	r3, [pc, #128]	; (2d08 <system_clock_source_xosc32k_set_config+0x8c>)
    2c88:	469a      	mov	sl, r3
    2c8a:	695b      	ldr	r3, [r3, #20]

	temp.bit.STARTUP = config->startup_time;
    2c8c:	7845      	ldrb	r5, [r0, #1]

	if (config->external_clock == SYSTEM_CLOCK_EXTERNAL_CRYSTAL) {
    2c8e:	7801      	ldrb	r1, [r0, #0]
    2c90:	424c      	negs	r4, r1
    2c92:	414c      	adcs	r4, r1
    2c94:	46a1      	mov	r9, r4
		temp.bit.XTALEN = 1;
	} else {
		temp.bit.XTALEN = 0;
	}

	temp.bit.EN1K = config->enable_1khz_output;
    2c96:	7881      	ldrb	r1, [r0, #2]
    2c98:	468c      	mov	ip, r1
	temp.bit.EN32K = config->enable_32khz_output;
    2c9a:	78c1      	ldrb	r1, [r0, #3]
    2c9c:	4688      	mov	r8, r1

	temp.bit.ONDEMAND = config->on_demand;
    2c9e:	7a46      	ldrb	r6, [r0, #9]
	temp.bit.RUNSTDBY = config->run_in_standby;
    2ca0:	7a07      	ldrb	r7, [r0, #8]
	temp.bit.WRTLOCK  = config->write_once;
    2ca2:	7a84      	ldrb	r4, [r0, #10]

	/* Cache the new frequency in case the user needs to check the current
	 * operating frequency later */
	_system_clock_inst.xosc32k.frequency = config->frequency;
    2ca4:	6840      	ldr	r0, [r0, #4]
    2ca6:	4919      	ldr	r1, [pc, #100]	; (2d0c <system_clock_source_xosc32k_set_config+0x90>)
    2ca8:	6148      	str	r0, [r1, #20]

	OSC32KCTRL->XOSC32K = temp;
    2caa:	2101      	movs	r1, #1
    2cac:	4648      	mov	r0, r9
    2cae:	0080      	lsls	r0, r0, #2
    2cb0:	2204      	movs	r2, #4
    2cb2:	4393      	bics	r3, r2
    2cb4:	4303      	orrs	r3, r0
    2cb6:	4640      	mov	r0, r8
    2cb8:	4008      	ands	r0, r1
    2cba:	00c0      	lsls	r0, r0, #3
    2cbc:	3204      	adds	r2, #4
    2cbe:	4393      	bics	r3, r2
    2cc0:	4303      	orrs	r3, r0
    2cc2:	4660      	mov	r0, ip
    2cc4:	4008      	ands	r0, r1
    2cc6:	0100      	lsls	r0, r0, #4
    2cc8:	3208      	adds	r2, #8
    2cca:	4393      	bics	r3, r2
    2ccc:	4303      	orrs	r3, r0
    2cce:	400f      	ands	r7, r1
    2cd0:	01bf      	lsls	r7, r7, #6
    2cd2:	2040      	movs	r0, #64	; 0x40
    2cd4:	4383      	bics	r3, r0
    2cd6:	433b      	orrs	r3, r7
    2cd8:	400e      	ands	r6, r1
    2cda:	01f6      	lsls	r6, r6, #7
    2cdc:	3040      	adds	r0, #64	; 0x40
    2cde:	4383      	bics	r3, r0
    2ce0:	4333      	orrs	r3, r6
    2ce2:	3879      	subs	r0, #121	; 0x79
    2ce4:	4005      	ands	r5, r0
    2ce6:	022d      	lsls	r5, r5, #8
    2ce8:	4809      	ldr	r0, [pc, #36]	; (2d10 <system_clock_source_xosc32k_set_config+0x94>)
    2cea:	4003      	ands	r3, r0
    2cec:	432b      	orrs	r3, r5
    2cee:	4021      	ands	r1, r4
    2cf0:	0309      	lsls	r1, r1, #12
    2cf2:	4808      	ldr	r0, [pc, #32]	; (2d14 <system_clock_source_xosc32k_set_config+0x98>)
    2cf4:	4003      	ands	r3, r0
    2cf6:	430b      	orrs	r3, r1
    2cf8:	4652      	mov	r2, sl
    2cfa:	6153      	str	r3, [r2, #20]
}
    2cfc:	bc1c      	pop	{r2, r3, r4}
    2cfe:	4690      	mov	r8, r2
    2d00:	4699      	mov	r9, r3
    2d02:	46a2      	mov	sl, r4
    2d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d06:	46c0      	nop			; (mov r8, r8)
    2d08:	40001000 	.word	0x40001000
    2d0c:	20000a60 	.word	0x20000a60
    2d10:	fffff8ff 	.word	0xfffff8ff
    2d14:	ffffefff 	.word	0xffffefff

00002d18 <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
    2d18:	b510      	push	{r4, lr}
	_system_clock_inst.dfll.val =
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2d1a:	7a83      	ldrb	r3, [r0, #10]
    2d1c:	069b      	lsls	r3, r3, #26
    2d1e:	0c1b      	lsrs	r3, r3, #16
			OSCCTRL_DFLLVAL_FINE(config->fine_value);
    2d20:	8982      	ldrh	r2, [r0, #12]
    2d22:	0592      	lsls	r2, r2, #22
    2d24:	0d92      	lsrs	r2, r2, #22
			OSCCTRL_DFLLVAL_COARSE(config->coarse_value) |
    2d26:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.val =
    2d28:	491a      	ldr	r1, [pc, #104]	; (2d94 <system_clock_source_dfll_set_config+0x7c>)
    2d2a:	604b      	str	r3, [r1, #4]

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
    2d2c:	7a03      	ldrb	r3, [r0, #8]
    2d2e:	7a42      	ldrb	r2, [r0, #9]
    2d30:	4313      	orrs	r3, r2
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
    2d32:	8882      	ldrh	r2, [r0, #4]
    2d34:	88c4      	ldrh	r4, [r0, #6]
    2d36:	4322      	orrs	r2, r4
    2d38:	4313      	orrs	r3, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2d3a:	7842      	ldrb	r2, [r0, #1]
    2d3c:	01d2      	lsls	r2, r2, #7
			(uint32_t)config->chill_cycle     |
    2d3e:	4313      	orrs	r3, r2
			((uint32_t)config->run_in_stanby << OSCCTRL_DFLLCTRL_RUNSTDBY_Pos);
    2d40:	7882      	ldrb	r2, [r0, #2]
    2d42:	0192      	lsls	r2, r2, #6
			((uint32_t)config->on_demand << OSCCTRL_DFLLCTRL_ONDEMAND_Pos) |
    2d44:	4313      	orrs	r3, r2
	_system_clock_inst.dfll.control =
    2d46:	600b      	str	r3, [r1, #0]

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
    2d48:	7803      	ldrb	r3, [r0, #0]
    2d4a:	2b04      	cmp	r3, #4
    2d4c:	d011      	beq.n	2d72 <system_clock_source_dfll_set_config+0x5a>
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
	}
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_USB_RECOVERY) {
    2d4e:	2b20      	cmp	r3, #32
    2d50:	d10e      	bne.n	2d70 <system_clock_source_dfll_set_config+0x58>

		_system_clock_inst.dfll.mul =
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2d52:	7b83      	ldrb	r3, [r0, #14]
    2d54:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2d56:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2d58:	4313      	orrs	r3, r2
    2d5a:	8a02      	ldrh	r2, [r0, #16]
    2d5c:	0412      	lsls	r2, r2, #16
    2d5e:	490e      	ldr	r1, [pc, #56]	; (2d98 <system_clock_source_dfll_set_config+0x80>)
    2d60:	400a      	ands	r2, r1
    2d62:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d64:	4a0b      	ldr	r2, [pc, #44]	; (2d94 <system_clock_source_dfll_set_config+0x7c>)
    2d66:	6093      	str	r3, [r2, #8]

		/* Enable the USB recovery mode */
		_system_clock_inst.dfll.control |= config->loop_mode |
    2d68:	6811      	ldr	r1, [r2, #0]
    2d6a:	4b0c      	ldr	r3, [pc, #48]	; (2d9c <system_clock_source_dfll_set_config+0x84>)
    2d6c:	430b      	orrs	r3, r1
    2d6e:	6013      	str	r3, [r2, #0]
				OSCCTRL_DFLLCTRL_MODE | OSCCTRL_DFLLCTRL_BPLCKC;
	}
}
    2d70:	bd10      	pop	{r4, pc}
				OSCCTRL_DFLLMUL_CSTEP(config->coarse_max_step) |
    2d72:	7b83      	ldrb	r3, [r0, #14]
    2d74:	069b      	lsls	r3, r3, #26
				OSCCTRL_DFLLMUL_MUL(config->multiply_factor);
    2d76:	8a42      	ldrh	r2, [r0, #18]
				OSCCTRL_DFLLMUL_FSTEP(config->fine_max_step)   |
    2d78:	4313      	orrs	r3, r2
    2d7a:	8a02      	ldrh	r2, [r0, #16]
    2d7c:	0412      	lsls	r2, r2, #16
    2d7e:	4906      	ldr	r1, [pc, #24]	; (2d98 <system_clock_source_dfll_set_config+0x80>)
    2d80:	400a      	ands	r2, r1
    2d82:	4313      	orrs	r3, r2
		_system_clock_inst.dfll.mul =
    2d84:	4a03      	ldr	r2, [pc, #12]	; (2d94 <system_clock_source_dfll_set_config+0x7c>)
    2d86:	6093      	str	r3, [r2, #8]
		_system_clock_inst.dfll.control |= config->loop_mode;
    2d88:	6813      	ldr	r3, [r2, #0]
    2d8a:	2104      	movs	r1, #4
    2d8c:	430b      	orrs	r3, r1
    2d8e:	6013      	str	r3, [r2, #0]
    2d90:	e7ee      	b.n	2d70 <system_clock_source_dfll_set_config+0x58>
    2d92:	46c0      	nop			; (mov r8, r8)
    2d94:	20000a60 	.word	0x20000a60
    2d98:	03ff0000 	.word	0x03ff0000
    2d9c:	00000424 	.word	0x00000424

00002da0 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2da0:	2808      	cmp	r0, #8
    2da2:	d803      	bhi.n	2dac <system_clock_source_enable+0xc>
    2da4:	0080      	lsls	r0, r0, #2
    2da6:	4b29      	ldr	r3, [pc, #164]	; (2e4c <system_clock_source_enable+0xac>)
    2da8:	581b      	ldr	r3, [r3, r0]
    2daa:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    2dac:	2017      	movs	r0, #23
    2dae:	e04b      	b.n	2e48 <system_clock_source_enable+0xa8>
		OSCCTRL->OSC16MCTRL.reg |= OSCCTRL_OSC16MCTRL_ENABLE;
    2db0:	4a27      	ldr	r2, [pc, #156]	; (2e50 <system_clock_source_enable+0xb0>)
    2db2:	7d13      	ldrb	r3, [r2, #20]
    2db4:	2102      	movs	r1, #2
    2db6:	430b      	orrs	r3, r1
    2db8:	7513      	strb	r3, [r2, #20]
		return STATUS_OK;
    2dba:	2000      	movs	r0, #0
    2dbc:	e044      	b.n	2e48 <system_clock_source_enable+0xa8>
		OSC32KCTRL->OSC32K.reg |= OSC32KCTRL_OSC32K_ENABLE;
    2dbe:	4a25      	ldr	r2, [pc, #148]	; (2e54 <system_clock_source_enable+0xb4>)
    2dc0:	6993      	ldr	r3, [r2, #24]
    2dc2:	2102      	movs	r1, #2
    2dc4:	430b      	orrs	r3, r1
    2dc6:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    2dc8:	2000      	movs	r0, #0
		break;
    2dca:	e03d      	b.n	2e48 <system_clock_source_enable+0xa8>
		OSCCTRL->XOSCCTRL.reg |= OSCCTRL_XOSCCTRL_ENABLE;
    2dcc:	4a20      	ldr	r2, [pc, #128]	; (2e50 <system_clock_source_enable+0xb0>)
    2dce:	8a13      	ldrh	r3, [r2, #16]
    2dd0:	2102      	movs	r1, #2
    2dd2:	430b      	orrs	r3, r1
    2dd4:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2dd6:	2000      	movs	r0, #0
		break;
    2dd8:	e036      	b.n	2e48 <system_clock_source_enable+0xa8>
		OSC32KCTRL->XOSC32K.reg |= OSC32KCTRL_XOSC32K_ENABLE;
    2dda:	4a1e      	ldr	r2, [pc, #120]	; (2e54 <system_clock_source_enable+0xb4>)
    2ddc:	6953      	ldr	r3, [r2, #20]
    2dde:	2102      	movs	r1, #2
    2de0:	430b      	orrs	r3, r1
    2de2:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2de4:	2000      	movs	r0, #0
		break;
    2de6:	e02f      	b.n	2e48 <system_clock_source_enable+0xa8>
		_system_clock_inst.dfll.control |= OSCCTRL_DFLLCTRL_ENABLE;
    2de8:	491b      	ldr	r1, [pc, #108]	; (2e58 <system_clock_source_enable+0xb8>)
    2dea:	680b      	ldr	r3, [r1, #0]
    2dec:	2202      	movs	r2, #2
    2dee:	4313      	orrs	r3, r2
    2df0:	600b      	str	r3, [r1, #0]
	OSCCTRL->DFLLCTRL.reg = OSCCTRL_DFLLCTRL_ENABLE;
    2df2:	4b17      	ldr	r3, [pc, #92]	; (2e50 <system_clock_source_enable+0xb0>)
    2df4:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2df6:	0019      	movs	r1, r3
    2df8:	32fe      	adds	r2, #254	; 0xfe
    2dfa:	68cb      	ldr	r3, [r1, #12]
    2dfc:	4213      	tst	r3, r2
    2dfe:	d0fc      	beq.n	2dfa <system_clock_source_enable+0x5a>
	OSCCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    2e00:	4a15      	ldr	r2, [pc, #84]	; (2e58 <system_clock_source_enable+0xb8>)
    2e02:	6891      	ldr	r1, [r2, #8]
    2e04:	4b12      	ldr	r3, [pc, #72]	; (2e50 <system_clock_source_enable+0xb0>)
    2e06:	6219      	str	r1, [r3, #32]
	OSCCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    2e08:	6852      	ldr	r2, [r2, #4]
    2e0a:	61da      	str	r2, [r3, #28]
	OSCCTRL->DFLLCTRL.reg = 0;
    2e0c:	2200      	movs	r2, #0
    2e0e:	831a      	strh	r2, [r3, #24]
	while (!(OSCCTRL->STATUS.reg & OSCCTRL_STATUS_DFLLRDY)) {
    2e10:	0019      	movs	r1, r3
    2e12:	3201      	adds	r2, #1
    2e14:	32ff      	adds	r2, #255	; 0xff
    2e16:	68cb      	ldr	r3, [r1, #12]
    2e18:	4213      	tst	r3, r2
    2e1a:	d0fc      	beq.n	2e16 <system_clock_source_enable+0x76>
	OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2e1c:	4b0e      	ldr	r3, [pc, #56]	; (2e58 <system_clock_source_enable+0xb8>)
    2e1e:	681b      	ldr	r3, [r3, #0]
    2e20:	b29b      	uxth	r3, r3
    2e22:	4a0b      	ldr	r2, [pc, #44]	; (2e50 <system_clock_source_enable+0xb0>)
    2e24:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2e26:	2000      	movs	r0, #0
    2e28:	e00e      	b.n	2e48 <system_clock_source_enable+0xa8>
		OSCCTRL->DPLLCTRLA.reg |= OSCCTRL_DPLLCTRLA_ENABLE;
    2e2a:	4909      	ldr	r1, [pc, #36]	; (2e50 <system_clock_source_enable+0xb0>)
    2e2c:	2228      	movs	r2, #40	; 0x28
    2e2e:	5c8b      	ldrb	r3, [r1, r2]
    2e30:	2002      	movs	r0, #2
    2e32:	4303      	orrs	r3, r0
    2e34:	548b      	strb	r3, [r1, r2]
		while(OSCCTRL->DPLLSYNCBUSY.reg & OSCCTRL_DPLLSYNCBUSY_ENABLE){
    2e36:	0008      	movs	r0, r1
    2e38:	2138      	movs	r1, #56	; 0x38
    2e3a:	3a26      	subs	r2, #38	; 0x26
    2e3c:	5c43      	ldrb	r3, [r0, r1]
    2e3e:	4213      	tst	r3, r2
    2e40:	d1fc      	bne.n	2e3c <system_clock_source_enable+0x9c>
	return STATUS_OK;
    2e42:	2000      	movs	r0, #0
    2e44:	e000      	b.n	2e48 <system_clock_source_enable+0xa8>
		return STATUS_OK;
    2e46:	2000      	movs	r0, #0
}
    2e48:	4770      	bx	lr
    2e4a:	46c0      	nop			; (mov r8, r8)
    2e4c:	0001c844 	.word	0x0001c844
    2e50:	40000c00 	.word	0x40000c00
    2e54:	40001000 	.word	0x40001000
    2e58:	20000a60 	.word	0x20000a60

00002e5c <system_clock_source_disable>:
 *                                 given
 */
enum status_code system_clock_source_disable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    2e5c:	2808      	cmp	r0, #8
    2e5e:	d832      	bhi.n	2ec6 <system_clock_source_disable+0x6a>
    2e60:	0080      	lsls	r0, r0, #2
    2e62:	4b1a      	ldr	r3, [pc, #104]	; (2ecc <system_clock_source_disable+0x70>)
    2e64:	581b      	ldr	r3, [r3, r0]
    2e66:	469f      	mov	pc, r3
	case SYSTEM_CLOCK_SOURCE_OSC16M:
		OSCCTRL->OSC16MCTRL.reg &= ~OSCCTRL_OSC16MCTRL_ENABLE;
    2e68:	4a19      	ldr	r2, [pc, #100]	; (2ed0 <system_clock_source_disable+0x74>)
    2e6a:	7d13      	ldrb	r3, [r2, #20]
    2e6c:	2102      	movs	r1, #2
    2e6e:	438b      	bics	r3, r1
    2e70:	7513      	strb	r3, [r2, #20]
		Assert(false);
		return STATUS_ERR_INVALID_ARG;

	}

	return STATUS_OK;
    2e72:	2000      	movs	r0, #0
}
    2e74:	4770      	bx	lr
		OSC32KCTRL->OSC32K.reg &= ~OSC32KCTRL_OSC32K_ENABLE;
    2e76:	4a17      	ldr	r2, [pc, #92]	; (2ed4 <system_clock_source_disable+0x78>)
    2e78:	6993      	ldr	r3, [r2, #24]
    2e7a:	2102      	movs	r1, #2
    2e7c:	438b      	bics	r3, r1
    2e7e:	6193      	str	r3, [r2, #24]
	return STATUS_OK;
    2e80:	2000      	movs	r0, #0
		break;
    2e82:	e7f7      	b.n	2e74 <system_clock_source_disable+0x18>
		OSCCTRL->XOSCCTRL.reg &= ~OSCCTRL_XOSCCTRL_ENABLE;
    2e84:	4a12      	ldr	r2, [pc, #72]	; (2ed0 <system_clock_source_disable+0x74>)
    2e86:	8a13      	ldrh	r3, [r2, #16]
    2e88:	2102      	movs	r1, #2
    2e8a:	438b      	bics	r3, r1
    2e8c:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    2e8e:	2000      	movs	r0, #0
		break;
    2e90:	e7f0      	b.n	2e74 <system_clock_source_disable+0x18>
		OSC32KCTRL->XOSC32K.reg &= ~OSC32KCTRL_XOSC32K_ENABLE;
    2e92:	4a10      	ldr	r2, [pc, #64]	; (2ed4 <system_clock_source_disable+0x78>)
    2e94:	6953      	ldr	r3, [r2, #20]
    2e96:	2102      	movs	r1, #2
    2e98:	438b      	bics	r3, r1
    2e9a:	6153      	str	r3, [r2, #20]
	return STATUS_OK;
    2e9c:	2000      	movs	r0, #0
		break;
    2e9e:	e7e9      	b.n	2e74 <system_clock_source_disable+0x18>
		_system_clock_inst.dfll.control &= ~OSCCTRL_DFLLCTRL_ENABLE;
    2ea0:	4b0d      	ldr	r3, [pc, #52]	; (2ed8 <system_clock_source_disable+0x7c>)
    2ea2:	681a      	ldr	r2, [r3, #0]
    2ea4:	2102      	movs	r1, #2
    2ea6:	438a      	bics	r2, r1
    2ea8:	601a      	str	r2, [r3, #0]
		OSCCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    2eaa:	681b      	ldr	r3, [r3, #0]
    2eac:	b29b      	uxth	r3, r3
    2eae:	4a08      	ldr	r2, [pc, #32]	; (2ed0 <system_clock_source_disable+0x74>)
    2eb0:	8313      	strh	r3, [r2, #24]
	return STATUS_OK;
    2eb2:	2000      	movs	r0, #0
		break;
    2eb4:	e7de      	b.n	2e74 <system_clock_source_disable+0x18>
		OSCCTRL->DPLLCTRLA.reg &= ~OSCCTRL_DPLLCTRLA_ENABLE;
    2eb6:	4906      	ldr	r1, [pc, #24]	; (2ed0 <system_clock_source_disable+0x74>)
    2eb8:	2228      	movs	r2, #40	; 0x28
    2eba:	5c8b      	ldrb	r3, [r1, r2]
    2ebc:	2002      	movs	r0, #2
    2ebe:	4383      	bics	r3, r0
    2ec0:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
    2ec2:	2000      	movs	r0, #0
		break;
    2ec4:	e7d6      	b.n	2e74 <system_clock_source_disable+0x18>
		return STATUS_ERR_INVALID_ARG;
    2ec6:	2017      	movs	r0, #23
    2ec8:	e7d4      	b.n	2e74 <system_clock_source_disable+0x18>
    2eca:	46c0      	nop			; (mov r8, r8)
    2ecc:	0001c868 	.word	0x0001c868
    2ed0:	40000c00 	.word	0x40000c00
    2ed4:	40001000 	.word	0x40001000
    2ed8:	20000a60 	.word	0x20000a60

00002edc <system_clock_init>:
 * \note OSC16M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC16M default enable can be disabled after system_clock_init. Make sure the
 * clock switches successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    2edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ede:	46ce      	mov	lr, r9
    2ee0:	4647      	mov	r7, r8
    2ee2:	b580      	push	{r7, lr}
    2ee4:	b08d      	sub	sp, #52	; 0x34
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	OSCCTRL->INTFLAG.reg = OSCCTRL_INTFLAG_DFLLRDY;
    2ee6:	2280      	movs	r2, #128	; 0x80
    2ee8:	0052      	lsls	r2, r2, #1
    2eea:	4b76      	ldr	r3, [pc, #472]	; (30c4 <system_clock_init+0x1e8>)
    2eec:	609a      	str	r2, [r3, #8]
	SUPC->INTFLAG.reg = SUPC_INTFLAG_BOD33RDY | SUPC_INTFLAG_BOD33DET;
    2eee:	3afd      	subs	r2, #253	; 0xfd
    2ef0:	4b75      	ldr	r3, [pc, #468]	; (30c8 <system_clock_init+0x1ec>)
    2ef2:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    2ef4:	4a75      	ldr	r2, [pc, #468]	; (30cc <system_clock_init+0x1f0>)
    2ef6:	6853      	ldr	r3, [r2, #4]
    2ef8:	211e      	movs	r1, #30
    2efa:	438b      	bics	r3, r1
    2efc:	391a      	subs	r1, #26
    2efe:	430b      	orrs	r3, r1
    2f00:	6053      	str	r3, [r2, #4]
 */
static inline enum status_code system_switch_performance_level(
					const enum system_performance_level performance_level)
{

	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    2f02:	2380      	movs	r3, #128	; 0x80
    2f04:	05db      	lsls	r3, r3, #23
    2f06:	789b      	ldrb	r3, [r3, #2]
    2f08:	2b02      	cmp	r3, #2
    2f0a:	d00f      	beq.n	2f2c <system_clock_init+0x50>
		return STATUS_OK;
	}

#if SAML22 || SAML21XXXB || SAMR34J || SAMR35J
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    2f0c:	2380      	movs	r3, #128	; 0x80
    2f0e:	05db      	lsls	r3, r3, #23
    2f10:	789b      	ldrb	r3, [r3, #2]
    2f12:	b25b      	sxtb	r3, r3
    2f14:	2b00      	cmp	r3, #0
    2f16:	db09      	blt.n	2f2c <system_clock_init+0x50>
		return STATUS_ERR_INVALID_ARG;
	}
#endif

	/* Clear performance level status */
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    2f18:	2380      	movs	r3, #128	; 0x80
    2f1a:	05db      	lsls	r3, r3, #23
    2f1c:	2201      	movs	r2, #1
    2f1e:	719a      	strb	r2, [r3, #6]

	/* Switch performance level */
	PM->PLCFG.reg = performance_level;
    2f20:	3201      	adds	r2, #1
    2f22:	709a      	strb	r2, [r3, #2]

	/* Waiting performance level ready */
	while (!PM->INTFLAG.reg) {
    2f24:	001a      	movs	r2, r3
    2f26:	7993      	ldrb	r3, [r2, #6]
    2f28:	2b00      	cmp	r3, #0
    2f2a:	d0fc      	beq.n	2f26 <system_clock_init+0x4a>
	config->external_clock      = SYSTEM_CLOCK_EXTERNAL_CRYSTAL;
    2f2c:	a809      	add	r0, sp, #36	; 0x24
    2f2e:	2300      	movs	r3, #0
    2f30:	7003      	strb	r3, [r0, #0]
	config->frequency           = 32768UL;
    2f32:	2280      	movs	r2, #128	; 0x80
    2f34:	0212      	lsls	r2, r2, #8
    2f36:	6042      	str	r2, [r0, #4]
	config->enable_1khz_output  = false;
    2f38:	7083      	strb	r3, [r0, #2]
	config->enable_32khz_output = true;
    2f3a:	2201      	movs	r2, #1
    2f3c:	70c2      	strb	r2, [r0, #3]
	config->run_in_standby      = false;
    2f3e:	7203      	strb	r3, [r0, #8]
	config->write_once          = false;
    2f40:	7283      	strb	r3, [r0, #10]
	struct system_clock_source_xosc32k_config xosc32k_conf;
	system_clock_source_xosc32k_get_config_defaults(&xosc32k_conf);

	xosc32k_conf.frequency           = 32768UL;
	xosc32k_conf.external_clock      = CONF_CLOCK_XOSC32K_EXTERNAL_CRYSTAL;
	xosc32k_conf.startup_time        = CONF_CLOCK_XOSC32K_STARTUP_TIME;
    2f42:	3203      	adds	r2, #3
    2f44:	7042      	strb	r2, [r0, #1]
	xosc32k_conf.enable_1khz_output  = CONF_CLOCK_XOSC32K_ENABLE_1KHZ_OUPUT;
	xosc32k_conf.enable_32khz_output = CONF_CLOCK_XOSC32K_ENABLE_32KHZ_OUTPUT;
	xosc32k_conf.on_demand           = false;
    2f46:	7243      	strb	r3, [r0, #9]
	xosc32k_conf.run_in_standby      = CONF_CLOCK_XOSC32K_RUN_IN_STANDBY;

	system_clock_source_xosc32k_set_config(&xosc32k_conf);
    2f48:	4b61      	ldr	r3, [pc, #388]	; (30d0 <system_clock_init+0x1f4>)
    2f4a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_XOSC32K);
    2f4c:	2005      	movs	r0, #5
    2f4e:	4b61      	ldr	r3, [pc, #388]	; (30d4 <system_clock_init+0x1f8>)
    2f50:	4798      	blx	r3
		return ((OSC32KCTRL->STATUS.reg & mask) == mask);
    2f52:	4961      	ldr	r1, [pc, #388]	; (30d8 <system_clock_init+0x1fc>)
    2f54:	2201      	movs	r2, #1
    2f56:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_XOSC32K));
    2f58:	421a      	tst	r2, r3
    2f5a:	d0fc      	beq.n	2f56 <system_clock_init+0x7a>
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    2f5c:	a901      	add	r1, sp, #4
    2f5e:	2501      	movs	r5, #1
    2f60:	604d      	str	r5, [r1, #4]
	config->high_when_disabled = false;
    2f62:	2400      	movs	r4, #0
    2f64:	704c      	strb	r4, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
    2f66:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2f68:	724c      	strb	r4, [r1, #9]
	gclk_conf.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
    2f6a:	2303      	movs	r3, #3
    2f6c:	700b      	strb	r3, [r1, #0]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2f6e:	2000      	movs	r0, #0
    2f70:	4b5a      	ldr	r3, [pc, #360]	; (30dc <system_clock_init+0x200>)
    2f72:	4798      	blx	r3
	system_clock_source_disable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2f74:	2006      	movs	r0, #6
    2f76:	4b5a      	ldr	r3, [pc, #360]	; (30e0 <system_clock_init+0x204>)
    2f78:	4798      	blx	r3
	config->run_in_standby  = false;
    2f7a:	466b      	mov	r3, sp
    2f7c:	705c      	strb	r4, [r3, #1]
	osc16m_conf.fsel      		= CONF_CLOCK_OSC16M_FREQ_SEL;
    2f7e:	701d      	strb	r5, [r3, #0]
	osc16m_conf.on_demand       = 0;
    2f80:	709c      	strb	r4, [r3, #2]
	system_clock_source_osc16m_set_config(&osc16m_conf);
    2f82:	4668      	mov	r0, sp
    2f84:	4b57      	ldr	r3, [pc, #348]	; (30e4 <system_clock_init+0x208>)
    2f86:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC16M);
    2f88:	2006      	movs	r0, #6
    2f8a:	4b52      	ldr	r3, [pc, #328]	; (30d4 <system_clock_init+0x1f8>)
    2f8c:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    2f8e:	494d      	ldr	r1, [pc, #308]	; (30c4 <system_clock_init+0x1e8>)
    2f90:	2210      	movs	r2, #16
    2f92:	68cb      	ldr	r3, [r1, #12]
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_OSC16M));
    2f94:	421a      	tst	r2, r3
    2f96:	d0fc      	beq.n	2f92 <system_clock_init+0xb6>
	config->division_factor    = 1;
    2f98:	a901      	add	r1, sp, #4
    2f9a:	2301      	movs	r3, #1
    2f9c:	604b      	str	r3, [r1, #4]
	config->high_when_disabled = false;
    2f9e:	2400      	movs	r4, #0
    2fa0:	704c      	strb	r4, [r1, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    2fa2:	3305      	adds	r3, #5
    2fa4:	700b      	strb	r3, [r1, #0]
	config->run_in_standby     = false;
    2fa6:	720c      	strb	r4, [r1, #8]
	config->output_enable      = false;
    2fa8:	724c      	strb	r4, [r1, #9]
	system_gclk_gen_set_config(GCLK_GENERATOR_0, &gclk_conf);
    2faa:	2000      	movs	r0, #0
    2fac:	4b4b      	ldr	r3, [pc, #300]	; (30dc <system_clock_init+0x200>)
    2fae:	4798      	blx	r3
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
    2fb0:	ab04      	add	r3, sp, #16
    2fb2:	2200      	movs	r2, #0
    2fb4:	809c      	strh	r4, [r3, #4]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
    2fb6:	80dc      	strh	r4, [r3, #6]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
    2fb8:	721a      	strb	r2, [r3, #8]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
    2fba:	725a      	strb	r2, [r3, #9]
	config->run_in_stanby   = false;
    2fbc:	709a      	strb	r2, [r3, #2]
	config->fine_value      = 0xff / 4; /* Midpoint */
    2fbe:	213f      	movs	r1, #63	; 0x3f
    2fc0:	8199      	strh	r1, [r3, #12]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
    2fc2:	393b      	subs	r1, #59	; 0x3b
    2fc4:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
    2fc6:	705a      	strb	r2, [r3, #1]
	/* Using DFLL48M COARSE CAL value from NVM Software Calibration Area Mapping 
	   in DFLL.COARSE helps to output a frequency close to 48 MHz.*/
#define NVM_DFLL_COARSE_POS    26 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

	uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP5)
    2fc8:	4b47      	ldr	r3, [pc, #284]	; (30e8 <system_clock_init+0x20c>)
    2fca:	681b      	ldr	r3, [r3, #0]
    2fcc:	0e9b      	lsrs	r3, r3, #26
			+ (NVM_DFLL_COARSE_POS / 32))
		>> (NVM_DFLL_COARSE_POS % 32))
		& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
	/* In some revision chip, the Calibration value is not correct */
	if (coarse == 0x3f) {
    2fce:	2b3f      	cmp	r3, #63	; 0x3f
    2fd0:	d100      	bne.n	2fd4 <system_clock_init+0xf8>
    2fd2:	e074      	b.n	30be <system_clock_init+0x1e2>
		coarse = 0x1f;
	}

	dfll_conf.coarse_value = coarse;
    2fd4:	a804      	add	r0, sp, #16
    2fd6:	7283      	strb	r3, [r0, #10]
#  else
	dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;
#  endif

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
    2fd8:	23b7      	movs	r3, #183	; 0xb7
    2fda:	00db      	lsls	r3, r3, #3
    2fdc:	8243      	strh	r3, [r0, #18]
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
    2fde:	2307      	movs	r3, #7
    2fe0:	7383      	strb	r3, [r0, #14]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
    2fe2:	3338      	adds	r3, #56	; 0x38
    2fe4:	8203      	strh	r3, [r0, #16]
		dfll_conf.chill_cycle = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_DISABLE;

		dfll_conf.multiply_factor = 48000;
	}

	system_clock_source_dfll_set_config(&dfll_conf);
    2fe6:	4b41      	ldr	r3, [pc, #260]	; (30ec <system_clock_init+0x210>)
    2fe8:	4798      	blx	r3
#endif

	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    2fea:	4b41      	ldr	r3, [pc, #260]	; (30f0 <system_clock_init+0x214>)
    2fec:	4798      	blx	r3
	config->division_factor    = 1;
    2fee:	ac01      	add	r4, sp, #4
    2ff0:	2601      	movs	r6, #1
    2ff2:	9602      	str	r6, [sp, #8]
	config->high_when_disabled = false;
    2ff4:	2500      	movs	r5, #0
    2ff6:	7065      	strb	r5, [r4, #1]
	config->output_enable      = false;
    2ff8:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
    2ffa:	2305      	movs	r3, #5
    2ffc:	4699      	mov	r9, r3
    2ffe:	7023      	strb	r3, [r4, #0]
    3000:	7226      	strb	r6, [r4, #8]
    3002:	0021      	movs	r1, r4
    3004:	2001      	movs	r0, #1
    3006:	4b35      	ldr	r3, [pc, #212]	; (30dc <system_clock_init+0x200>)
    3008:	4698      	mov	r8, r3
    300a:	4798      	blx	r3
    300c:	2001      	movs	r0, #1
    300e:	4f39      	ldr	r7, [pc, #228]	; (30f4 <system_clock_init+0x218>)
    3010:	47b8      	blx	r7
	config->high_when_disabled = false;
    3012:	7065      	strb	r5, [r4, #1]
	config->source_clock       = GCLK_SOURCE_OSC16M;
    3014:	2306      	movs	r3, #6
    3016:	7023      	strb	r3, [r4, #0]
	config->run_in_standby     = false;
    3018:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
    301a:	7265      	strb	r5, [r4, #9]
    301c:	464b      	mov	r3, r9
    301e:	6063      	str	r3, [r4, #4]
    3020:	0021      	movs	r1, r4
    3022:	2002      	movs	r0, #2
    3024:	47c0      	blx	r8
    3026:	2002      	movs	r0, #2
    3028:	47b8      	blx	r7
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
    302a:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(OSCCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
    302c:	0021      	movs	r1, r4
    302e:	2000      	movs	r0, #0
    3030:	4b31      	ldr	r3, [pc, #196]	; (30f8 <system_clock_init+0x21c>)
    3032:	4798      	blx	r3
		system_gclk_chan_enable(OSCCTRL_GCLK_ID_DFLL48);
    3034:	2000      	movs	r0, #0
    3036:	4b31      	ldr	r3, [pc, #196]	; (30fc <system_clock_init+0x220>)
    3038:	4798      	blx	r3
#  endif
#endif

	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
    303a:	2007      	movs	r0, #7
    303c:	4b25      	ldr	r3, [pc, #148]	; (30d4 <system_clock_init+0x1f8>)
    303e:	4798      	blx	r3
		return ((OSCCTRL->STATUS.reg & mask) == mask);
    3040:	4920      	ldr	r1, [pc, #128]	; (30c4 <system_clock_init+0x1e8>)
    3042:	22d0      	movs	r2, #208	; 0xd0
    3044:	0112      	lsls	r2, r2, #4
    3046:	68cb      	ldr	r3, [r1, #12]
    3048:	4013      	ands	r3, r2
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
    304a:	4293      	cmp	r3, r2
    304c:	d1fb      	bne.n	3046 <system_clock_init+0x16a>
	MCLK->BUPDIV.reg = MCLK_BUPDIV_BUPDIV(1 << divider);
    304e:	4c2c      	ldr	r4, [pc, #176]	; (3100 <system_clock_init+0x224>)
    3050:	2301      	movs	r3, #1
    3052:	71a3      	strb	r3, [r4, #6]
	MCLK->LPDIV.reg = MCLK_LPDIV_LPDIV(1 << divider);
    3054:	7163      	strb	r3, [r4, #5]
	MCLK->CPUDIV.reg = MCLK_CPUDIV_CPUDIV(1 << divider);
    3056:	7123      	strb	r3, [r4, #4]
	config->high_when_disabled = false;
    3058:	a901      	add	r1, sp, #4
    305a:	2300      	movs	r3, #0
    305c:	704b      	strb	r3, [r1, #1]
	config->run_in_standby     = false;
    305e:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
    3060:	724b      	strb	r3, [r1, #9]
	system_main_clock_set_failure_detect(CONF_CLOCK_CPU_CLOCK_FAILURE_DETECT);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    3062:	3307      	adds	r3, #7
    3064:	700b      	strb	r3, [r1, #0]
    3066:	3b01      	subs	r3, #1
    3068:	604b      	str	r3, [r1, #4]
    306a:	2000      	movs	r0, #0
    306c:	4b1b      	ldr	r3, [pc, #108]	; (30dc <system_clock_init+0x200>)
    306e:	4798      	blx	r3
    3070:	2000      	movs	r0, #0
    3072:	4b20      	ldr	r3, [pc, #128]	; (30f4 <system_clock_init+0x218>)
    3074:	4798      	blx	r3
	return (system_gclk_gen_get_hz(GCLK_GENERATOR_0) / MCLK->CPUDIV.reg);
    3076:	2000      	movs	r0, #0
    3078:	4b22      	ldr	r3, [pc, #136]	; (3104 <system_clock_init+0x228>)
    307a:	4798      	blx	r3
    307c:	7921      	ldrb	r1, [r4, #4]
    307e:	b2c9      	uxtb	r1, r1
    3080:	4b21      	ldr	r3, [pc, #132]	; (3108 <system_clock_init+0x22c>)
    3082:	4798      	blx	r3
#endif

	/* If CPU frequency is less than 12MHz, scale down performance level to PL0 */
	uint32_t cpu_freq = system_cpu_clock_get_hz();
	if (cpu_freq <= 12000000) {
    3084:	4b21      	ldr	r3, [pc, #132]	; (310c <system_clock_init+0x230>)
    3086:	4298      	cmp	r0, r3
    3088:	d814      	bhi.n	30b4 <system_clock_init+0x1d8>
	if (performance_level == (enum system_performance_level)PM->PLCFG.reg) {
    308a:	2380      	movs	r3, #128	; 0x80
    308c:	05db      	lsls	r3, r3, #23
    308e:	789b      	ldrb	r3, [r3, #2]
    3090:	2b00      	cmp	r3, #0
    3092:	d00f      	beq.n	30b4 <system_clock_init+0x1d8>
	if (PM->PLCFG.reg & PM_PLCFG_PLDIS) {
    3094:	2380      	movs	r3, #128	; 0x80
    3096:	05db      	lsls	r3, r3, #23
    3098:	789b      	ldrb	r3, [r3, #2]
    309a:	b25b      	sxtb	r3, r3
    309c:	2b00      	cmp	r3, #0
    309e:	db09      	blt.n	30b4 <system_clock_init+0x1d8>
	PM->INTFLAG.reg = PM_INTFLAG_PLRDY;
    30a0:	2380      	movs	r3, #128	; 0x80
    30a2:	05db      	lsls	r3, r3, #23
    30a4:	2201      	movs	r2, #1
    30a6:	719a      	strb	r2, [r3, #6]
	PM->PLCFG.reg = performance_level;
    30a8:	2200      	movs	r2, #0
    30aa:	709a      	strb	r2, [r3, #2]
	while (!PM->INTFLAG.reg) {
    30ac:	001a      	movs	r2, r3
    30ae:	7993      	ldrb	r3, [r2, #6]
    30b0:	2b00      	cmp	r3, #0
    30b2:	d0fc      	beq.n	30ae <system_clock_init+0x1d2>
		system_switch_performance_level(SYSTEM_PERFORMANCE_LEVEL_0);
	}
}
    30b4:	b00d      	add	sp, #52	; 0x34
    30b6:	bc0c      	pop	{r2, r3}
    30b8:	4690      	mov	r8, r2
    30ba:	4699      	mov	r9, r3
    30bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		coarse = 0x1f;
    30be:	3b20      	subs	r3, #32
    30c0:	e788      	b.n	2fd4 <system_clock_init+0xf8>
    30c2:	46c0      	nop			; (mov r8, r8)
    30c4:	40000c00 	.word	0x40000c00
    30c8:	40001400 	.word	0x40001400
    30cc:	41004000 	.word	0x41004000
    30d0:	00002c7d 	.word	0x00002c7d
    30d4:	00002da1 	.word	0x00002da1
    30d8:	40001000 	.word	0x40001000
    30dc:	00003135 	.word	0x00003135
    30e0:	00002e5d 	.word	0x00002e5d
    30e4:	00002c49 	.word	0x00002c49
    30e8:	00806020 	.word	0x00806020
    30ec:	00002d19 	.word	0x00002d19
    30f0:	00003111 	.word	0x00003111
    30f4:	000031e1 	.word	0x000031e1
    30f8:	000032fd 	.word	0x000032fd
    30fc:	0000328d 	.word	0x0000328d
    3100:	40000400 	.word	0x40000400
    3104:	00003221 	.word	0x00003221
    3108:	00012d11 	.word	0x00012d11
    310c:	00b71b00 	.word	0x00b71b00

00003110 <system_gclk_init>:
			MCLK->APBAMASK.reg |= mask;
    3110:	4a06      	ldr	r2, [pc, #24]	; (312c <system_gclk_init+0x1c>)
    3112:	6953      	ldr	r3, [r2, #20]
    3114:	2140      	movs	r1, #64	; 0x40
    3116:	430b      	orrs	r3, r1
    3118:	6153      	str	r3, [r2, #20]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, MCLK_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRLA.reg = GCLK_CTRLA_SWRST;
    311a:	2201      	movs	r2, #1
    311c:	4b04      	ldr	r3, [pc, #16]	; (3130 <system_gclk_init+0x20>)
    311e:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRLA.reg & GCLK_CTRLA_SWRST) {
    3120:	0019      	movs	r1, r3
    3122:	780b      	ldrb	r3, [r1, #0]
    3124:	4213      	tst	r3, r2
    3126:	d1fc      	bne.n	3122 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    3128:	4770      	bx	lr
    312a:	46c0      	nop			; (mov r8, r8)
    312c:	40000400 	.word	0x40000400
    3130:	40001800 	.word	0x40001800

00003134 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    3134:	b570      	push	{r4, r5, r6, lr}
    3136:	0004      	movs	r4, r0
	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config ;


	/* Select the requested source clock for the generator */
	new_genctrl_config = config->source_clock << GCLK_GENCTRL_SRC_Pos;
    3138:	780d      	ldrb	r5, [r1, #0]

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    313a:	784b      	ldrb	r3, [r1, #1]
    313c:	2b00      	cmp	r3, #0
    313e:	d002      	beq.n	3146 <system_gclk_gen_set_config+0x12>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    3140:	2380      	movs	r3, #128	; 0x80
    3142:	00db      	lsls	r3, r3, #3
    3144:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    3146:	7a4b      	ldrb	r3, [r1, #9]
    3148:	2b00      	cmp	r3, #0
    314a:	d002      	beq.n	3152 <system_gclk_gen_set_config+0x1e>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    314c:	2380      	movs	r3, #128	; 0x80
    314e:	011b      	lsls	r3, r3, #4
    3150:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    3152:	6848      	ldr	r0, [r1, #4]
    3154:	2801      	cmp	r0, #1
    3156:	d90f      	bls.n	3178 <system_gclk_gen_set_config+0x44>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    3158:	1e43      	subs	r3, r0, #1
    315a:	4218      	tst	r0, r3
    315c:	d131      	bne.n	31c2 <system_gclk_gen_set_config+0x8e>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    315e:	2802      	cmp	r0, #2
    3160:	d92d      	bls.n	31be <system_gclk_gen_set_config+0x8a>
    3162:	2302      	movs	r3, #2
    3164:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    3166:	3201      	adds	r2, #1
						mask <<= 1) {
    3168:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    316a:	4298      	cmp	r0, r3
    316c:	d8fb      	bhi.n	3166 <system_gclk_gen_set_config+0x32>
    316e:	2380      	movs	r3, #128	; 0x80
    3170:	015b      	lsls	r3, r3, #5
    3172:	431d      	orrs	r5, r3
			}

			/* Set binary divider power of 2 division factor */
			new_genctrl_config  |= div2_count << GCLK_GENCTRL_DIV_Pos;
    3174:	0412      	lsls	r2, r2, #16
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    3176:	4315      	orrs	r5, r2
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    3178:	7a0b      	ldrb	r3, [r1, #8]
    317a:	2b00      	cmp	r3, #0
    317c:	d002      	beq.n	3184 <system_gclk_gen_set_config+0x50>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    317e:	2380      	movs	r3, #128	; 0x80
    3180:	019b      	lsls	r3, r3, #6
    3182:	431d      	orrs	r5, r3
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3184:	2604      	movs	r6, #4
    3186:	40a6      	lsls	r6, r4
    3188:	4911      	ldr	r1, [pc, #68]	; (31d0 <system_gclk_gen_set_config+0x9c>)
    318a:	4a12      	ldr	r2, [pc, #72]	; (31d4 <system_gclk_gen_set_config+0xa0>)
    318c:	684b      	ldr	r3, [r1, #4]
    318e:	4013      	ands	r3, r2
	}

	while (system_gclk_is_syncing(generator)) {
    3190:	421e      	tst	r6, r3
    3192:	d1fb      	bne.n	318c <system_gclk_gen_set_config+0x58>
	cpu_irq_enter_critical();
    3194:	4b10      	ldr	r3, [pc, #64]	; (31d8 <system_gclk_gen_set_config+0xa4>)
    3196:	4798      	blx	r3
    3198:	00a4      	lsls	r4, r4, #2
    319a:	4b0d      	ldr	r3, [pc, #52]	; (31d0 <system_gclk_gen_set_config+0x9c>)
    319c:	469c      	mov	ip, r3
    319e:	4464      	add	r4, ip
		/* Wait for synchronization */
	};

	system_interrupt_enter_critical_section();

	GCLK->GENCTRL[generator].reg = new_genctrl_config | (GCLK->GENCTRL[generator].reg & GCLK_GENCTRL_GENEN);
    31a0:	6a22      	ldr	r2, [r4, #32]
    31a2:	2380      	movs	r3, #128	; 0x80
    31a4:	005b      	lsls	r3, r3, #1
    31a6:	401a      	ands	r2, r3
    31a8:	432a      	orrs	r2, r5
    31aa:	6222      	str	r2, [r4, #32]
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    31ac:	4661      	mov	r1, ip
    31ae:	4a09      	ldr	r2, [pc, #36]	; (31d4 <system_gclk_gen_set_config+0xa0>)
    31b0:	684b      	ldr	r3, [r1, #4]
    31b2:	4013      	ands	r3, r2

	while (system_gclk_is_syncing(generator)) {
    31b4:	421e      	tst	r6, r3
    31b6:	d1fb      	bne.n	31b0 <system_gclk_gen_set_config+0x7c>
	cpu_irq_leave_critical();
    31b8:	4b08      	ldr	r3, [pc, #32]	; (31dc <system_gclk_gen_set_config+0xa8>)
    31ba:	4798      	blx	r3
		/* Wait for synchronization */
	};

	system_interrupt_leave_critical_section();
}
    31bc:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    31be:	2200      	movs	r2, #0
    31c0:	e7d5      	b.n	316e <system_gclk_gen_set_config+0x3a>
					(config->division_factor) << GCLK_GENCTRL_DIV_Pos;
    31c2:	0400      	lsls	r0, r0, #16
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    31c4:	2380      	movs	r3, #128	; 0x80
    31c6:	009b      	lsls	r3, r3, #2
    31c8:	4318      	orrs	r0, r3
    31ca:	4305      	orrs	r5, r0
    31cc:	e7d4      	b.n	3178 <system_gclk_gen_set_config+0x44>
    31ce:	46c0      	nop			; (mov r8, r8)
    31d0:	40001800 	.word	0x40001800
    31d4:	000007fc 	.word	0x000007fc
    31d8:	000001ad 	.word	0x000001ad
    31dc:	000001ed 	.word	0x000001ed

000031e0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    31e0:	b510      	push	{r4, lr}
    31e2:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    31e4:	2204      	movs	r2, #4
    31e6:	4082      	lsls	r2, r0
    31e8:	4809      	ldr	r0, [pc, #36]	; (3210 <system_gclk_gen_enable+0x30>)
    31ea:	490a      	ldr	r1, [pc, #40]	; (3214 <system_gclk_gen_enable+0x34>)
    31ec:	6843      	ldr	r3, [r0, #4]
    31ee:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    31f0:	421a      	tst	r2, r3
    31f2:	d1fb      	bne.n	31ec <system_gclk_gen_enable+0xc>
	cpu_irq_enter_critical();
    31f4:	4b08      	ldr	r3, [pc, #32]	; (3218 <system_gclk_gen_enable+0x38>)
    31f6:	4798      	blx	r3
    31f8:	00a4      	lsls	r4, r4, #2
    31fa:	4b05      	ldr	r3, [pc, #20]	; (3210 <system_gclk_gen_enable+0x30>)
    31fc:	469c      	mov	ip, r3
    31fe:	4464      	add	r4, ip
	};

	system_interrupt_enter_critical_section();

	/* Enable generator */
	GCLK->GENCTRL[generator].reg |= GCLK_GENCTRL_GENEN;
    3200:	6a22      	ldr	r2, [r4, #32]
    3202:	2380      	movs	r3, #128	; 0x80
    3204:	005b      	lsls	r3, r3, #1
    3206:	4313      	orrs	r3, r2
    3208:	6223      	str	r3, [r4, #32]
	cpu_irq_leave_critical();
    320a:	4b04      	ldr	r3, [pc, #16]	; (321c <system_gclk_gen_enable+0x3c>)
    320c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    320e:	bd10      	pop	{r4, pc}
    3210:	40001800 	.word	0x40001800
    3214:	000007fc 	.word	0x000007fc
    3218:	000001ad 	.word	0x000001ad
    321c:	000001ed 	.word	0x000001ed

00003220 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    3220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3222:	0004      	movs	r4, r0
	 if (GCLK->SYNCBUSY.reg & GCLK_SYNCBUSY_GENCTRL(1 << generator )){
    3224:	2204      	movs	r2, #4
    3226:	4082      	lsls	r2, r0
    3228:	4812      	ldr	r0, [pc, #72]	; (3274 <system_gclk_gen_get_hz+0x54>)
    322a:	4913      	ldr	r1, [pc, #76]	; (3278 <system_gclk_gen_get_hz+0x58>)
    322c:	6843      	ldr	r3, [r0, #4]
    322e:	400b      	ands	r3, r1
	while (system_gclk_is_syncing(generator)) {
    3230:	421a      	tst	r2, r3
    3232:	d1fb      	bne.n	322c <system_gclk_gen_get_hz+0xc>
	cpu_irq_enter_critical();
    3234:	4b11      	ldr	r3, [pc, #68]	; (327c <system_gclk_gen_get_hz+0x5c>)
    3236:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL[generator].bit.SRC);
    3238:	4f0e      	ldr	r7, [pc, #56]	; (3274 <system_gclk_gen_get_hz+0x54>)
    323a:	3408      	adds	r4, #8
    323c:	00a4      	lsls	r4, r4, #2
    323e:	59e0      	ldr	r0, [r4, r7]
    3240:	0700      	lsls	r0, r0, #28
    3242:	0f00      	lsrs	r0, r0, #28
	uint32_t gen_input_hz = system_clock_source_get_hz(
    3244:	4b0e      	ldr	r3, [pc, #56]	; (3280 <system_gclk_gen_get_hz+0x60>)
    3246:	4798      	blx	r3
    3248:	0006      	movs	r6, r0

	uint8_t divsel = GCLK->GENCTRL[generator].bit.DIVSEL;
    324a:	59e5      	ldr	r5, [r4, r7]
    324c:	04ed      	lsls	r5, r5, #19
    324e:	0fed      	lsrs	r5, r5, #31
	uint32_t divider = GCLK->GENCTRL[generator].bit.DIV;
    3250:	59e4      	ldr	r4, [r4, r7]
    3252:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    3254:	4b0b      	ldr	r3, [pc, #44]	; (3284 <system_gclk_gen_get_hz+0x64>)
    3256:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    3258:	2d00      	cmp	r5, #0
    325a:	d107      	bne.n	326c <system_gclk_gen_get_hz+0x4c>
    325c:	2c01      	cmp	r4, #1
    325e:	d907      	bls.n	3270 <system_gclk_gen_get_hz+0x50>
		gen_input_hz /= divider;
    3260:	0021      	movs	r1, r4
    3262:	0030      	movs	r0, r6
    3264:	4b08      	ldr	r3, [pc, #32]	; (3288 <system_gclk_gen_get_hz+0x68>)
    3266:	4798      	blx	r3
    3268:	0006      	movs	r6, r0
    326a:	e001      	b.n	3270 <system_gclk_gen_get_hz+0x50>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    326c:	3401      	adds	r4, #1
    326e:	40e6      	lsrs	r6, r4
	}

	return gen_input_hz;
}
    3270:	0030      	movs	r0, r6
    3272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3274:	40001800 	.word	0x40001800
    3278:	000007fc 	.word	0x000007fc
    327c:	000001ad 	.word	0x000001ad
    3280:	00002bb5 	.word	0x00002bb5
    3284:	000001ed 	.word	0x000001ed
    3288:	00012d11 	.word	0x00012d11

0000328c <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    328c:	b510      	push	{r4, lr}
    328e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3290:	4b09      	ldr	r3, [pc, #36]	; (32b8 <system_gclk_chan_enable+0x2c>)
    3292:	4798      	blx	r3
    3294:	00a0      	lsls	r0, r4, #2
    3296:	4b09      	ldr	r3, [pc, #36]	; (32bc <system_gclk_chan_enable+0x30>)
    3298:	469c      	mov	ip, r3
    329a:	4460      	add	r0, ip
	system_interrupt_enter_critical_section();

	/* Enable the peripheral channel */
	GCLK->PCHCTRL[channel].reg |= GCLK_PCHCTRL_CHEN;
    329c:	2280      	movs	r2, #128	; 0x80
    329e:	5883      	ldr	r3, [r0, r2]
    32a0:	2140      	movs	r1, #64	; 0x40
    32a2:	430b      	orrs	r3, r1
    32a4:	5083      	str	r3, [r0, r2]

	while (!(GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN)) {
    32a6:	3140      	adds	r1, #64	; 0x40
    32a8:	3a40      	subs	r2, #64	; 0x40
    32aa:	5843      	ldr	r3, [r0, r1]
    32ac:	421a      	tst	r2, r3
    32ae:	d0fc      	beq.n	32aa <system_gclk_chan_enable+0x1e>
	cpu_irq_leave_critical();
    32b0:	4b03      	ldr	r3, [pc, #12]	; (32c0 <system_gclk_chan_enable+0x34>)
    32b2:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    32b4:	bd10      	pop	{r4, pc}
    32b6:	46c0      	nop			; (mov r8, r8)
    32b8:	000001ad 	.word	0x000001ad
    32bc:	40001800 	.word	0x40001800
    32c0:	000001ed 	.word	0x000001ed

000032c4 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    32c4:	b510      	push	{r4, lr}
    32c6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    32c8:	4b09      	ldr	r3, [pc, #36]	; (32f0 <system_gclk_chan_disable+0x2c>)
    32ca:	4798      	blx	r3
    32cc:	00a0      	lsls	r0, r4, #2
    32ce:	4b09      	ldr	r3, [pc, #36]	; (32f4 <system_gclk_chan_disable+0x30>)
    32d0:	469c      	mov	ip, r3
    32d2:	4460      	add	r0, ip

	/* Sanity check WRTLOCK */
	Assert(!GCLK->PCHCTRL[channel].bit.WRTLOCK);

	/* Disable the peripheral channel */
	GCLK->PCHCTRL[channel].reg &= ~GCLK_PCHCTRL_CHEN;
    32d4:	2280      	movs	r2, #128	; 0x80
    32d6:	5883      	ldr	r3, [r0, r2]
    32d8:	2140      	movs	r1, #64	; 0x40
    32da:	438b      	bics	r3, r1
    32dc:	5083      	str	r3, [r0, r2]

	while (GCLK->PCHCTRL[channel].reg & GCLK_PCHCTRL_CHEN) {
    32de:	3140      	adds	r1, #64	; 0x40
    32e0:	3a40      	subs	r2, #64	; 0x40
    32e2:	5843      	ldr	r3, [r0, r1]
    32e4:	421a      	tst	r2, r3
    32e6:	d1fc      	bne.n	32e2 <system_gclk_chan_disable+0x1e>
	cpu_irq_leave_critical();
    32e8:	4b03      	ldr	r3, [pc, #12]	; (32f8 <system_gclk_chan_disable+0x34>)
    32ea:	4798      	blx	r3
		/* Wait for clock synchronization */
	}

	system_interrupt_leave_critical_section();
}
    32ec:	bd10      	pop	{r4, pc}
    32ee:	46c0      	nop			; (mov r8, r8)
    32f0:	000001ad 	.word	0x000001ad
    32f4:	40001800 	.word	0x40001800
    32f8:	000001ed 	.word	0x000001ed

000032fc <system_gclk_chan_set_config>:
{
    32fc:	b570      	push	{r4, r5, r6, lr}
    32fe:	0004      	movs	r4, r0
    3300:	000d      	movs	r5, r1
	system_gclk_chan_disable(channel);
    3302:	4b05      	ldr	r3, [pc, #20]	; (3318 <system_gclk_chan_set_config+0x1c>)
    3304:	4798      	blx	r3
	GCLK->PCHCTRL[channel].reg = GCLK_PCHCTRL_GEN(config->source_generator);
    3306:	782a      	ldrb	r2, [r5, #0]
    3308:	230f      	movs	r3, #15
    330a:	4013      	ands	r3, r2
    330c:	3420      	adds	r4, #32
    330e:	00a4      	lsls	r4, r4, #2
    3310:	4a02      	ldr	r2, [pc, #8]	; (331c <system_gclk_chan_set_config+0x20>)
    3312:	50a3      	str	r3, [r4, r2]
}
    3314:	bd70      	pop	{r4, r5, r6, pc}
    3316:	46c0      	nop			; (mov r8, r8)
    3318:	000032c5 	.word	0x000032c5
    331c:	40001800 	.word	0x40001800

00003320 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    3320:	b510      	push	{r4, lr}
    3322:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    3324:	4b06      	ldr	r3, [pc, #24]	; (3340 <system_gclk_chan_get_hz+0x20>)
    3326:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();
	/* Select the requested generic clock channel */
	gen_id = GCLK->PCHCTRL[channel].bit.GEN;
    3328:	3420      	adds	r4, #32
    332a:	00a4      	lsls	r4, r4, #2
    332c:	4b05      	ldr	r3, [pc, #20]	; (3344 <system_gclk_chan_get_hz+0x24>)
    332e:	58e4      	ldr	r4, [r4, r3]
    3330:	0724      	lsls	r4, r4, #28
    3332:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    3334:	4b04      	ldr	r3, [pc, #16]	; (3348 <system_gclk_chan_get_hz+0x28>)
    3336:	4798      	blx	r3
	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    3338:	0020      	movs	r0, r4
    333a:	4b04      	ldr	r3, [pc, #16]	; (334c <system_gclk_chan_get_hz+0x2c>)
    333c:	4798      	blx	r3
}
    333e:	bd10      	pop	{r4, pc}
    3340:	000001ad 	.word	0x000001ad
    3344:	40001800 	.word	0x40001800
    3348:	000001ed 	.word	0x000001ed
    334c:	00003221 	.word	0x00003221

00003350 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    3350:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    3352:	78d3      	ldrb	r3, [r2, #3]
    3354:	2b00      	cmp	r3, #0
    3356:	d135      	bne.n	33c4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    3358:	7813      	ldrb	r3, [r2, #0]
    335a:	2b80      	cmp	r3, #128	; 0x80
    335c:	d029      	beq.n	33b2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    335e:	061b      	lsls	r3, r3, #24
    3360:	2480      	movs	r4, #128	; 0x80
    3362:	0264      	lsls	r4, r4, #9
    3364:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    3366:	7854      	ldrb	r4, [r2, #1]
    3368:	2502      	movs	r5, #2
    336a:	43ac      	bics	r4, r5
    336c:	d106      	bne.n	337c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    336e:	7894      	ldrb	r4, [r2, #2]
    3370:	2c00      	cmp	r4, #0
    3372:	d120      	bne.n	33b6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    3374:	2480      	movs	r4, #128	; 0x80
    3376:	02a4      	lsls	r4, r4, #10
    3378:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    337a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    337c:	7854      	ldrb	r4, [r2, #1]
    337e:	3c01      	subs	r4, #1
    3380:	2c01      	cmp	r4, #1
    3382:	d91c      	bls.n	33be <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    3384:	040d      	lsls	r5, r1, #16
    3386:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    3388:	24a0      	movs	r4, #160	; 0xa0
    338a:	05e4      	lsls	r4, r4, #23
    338c:	432c      	orrs	r4, r5
    338e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    3390:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    3392:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    3394:	24d0      	movs	r4, #208	; 0xd0
    3396:	0624      	lsls	r4, r4, #24
    3398:	432c      	orrs	r4, r5
    339a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    339c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    339e:	78d4      	ldrb	r4, [r2, #3]
    33a0:	2c00      	cmp	r4, #0
    33a2:	d122      	bne.n	33ea <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    33a4:	035b      	lsls	r3, r3, #13
    33a6:	d51c      	bpl.n	33e2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    33a8:	7893      	ldrb	r3, [r2, #2]
    33aa:	2b01      	cmp	r3, #1
    33ac:	d01e      	beq.n	33ec <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    33ae:	6141      	str	r1, [r0, #20]
    33b0:	e017      	b.n	33e2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    33b2:	2300      	movs	r3, #0
    33b4:	e7d7      	b.n	3366 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    33b6:	24c0      	movs	r4, #192	; 0xc0
    33b8:	02e4      	lsls	r4, r4, #11
    33ba:	4323      	orrs	r3, r4
    33bc:	e7dd      	b.n	337a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    33be:	4c0d      	ldr	r4, [pc, #52]	; (33f4 <_system_pinmux_config+0xa4>)
    33c0:	4023      	ands	r3, r4
    33c2:	e7df      	b.n	3384 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    33c4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    33c6:	040c      	lsls	r4, r1, #16
    33c8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    33ca:	23a0      	movs	r3, #160	; 0xa0
    33cc:	05db      	lsls	r3, r3, #23
    33ce:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33d0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    33d2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    33d4:	23d0      	movs	r3, #208	; 0xd0
    33d6:	061b      	lsls	r3, r3, #24
    33d8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    33da:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    33dc:	78d3      	ldrb	r3, [r2, #3]
    33de:	2b00      	cmp	r3, #0
    33e0:	d103      	bne.n	33ea <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    33e2:	7853      	ldrb	r3, [r2, #1]
    33e4:	3b01      	subs	r3, #1
    33e6:	2b01      	cmp	r3, #1
    33e8:	d902      	bls.n	33f0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    33ea:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    33ec:	6181      	str	r1, [r0, #24]
    33ee:	e7f8      	b.n	33e2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    33f0:	6081      	str	r1, [r0, #8]
}
    33f2:	e7fa      	b.n	33ea <_system_pinmux_config+0x9a>
    33f4:	fffbffff 	.word	0xfffbffff

000033f8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    33f8:	b510      	push	{r4, lr}
    33fa:	000a      	movs	r2, r1
	if (port_index < PORT_INST_NUM) {
    33fc:	09c1      	lsrs	r1, r0, #7
		return NULL;
    33fe:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    3400:	2900      	cmp	r1, #0
    3402:	d104      	bne.n	340e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    3404:	0943      	lsrs	r3, r0, #5
    3406:	01db      	lsls	r3, r3, #7
    3408:	4905      	ldr	r1, [pc, #20]	; (3420 <system_pinmux_pin_set_config+0x28>)
    340a:	468c      	mov	ip, r1
    340c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    340e:	241f      	movs	r4, #31
    3410:	4020      	ands	r0, r4
    3412:	2101      	movs	r1, #1
    3414:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    3416:	0018      	movs	r0, r3
    3418:	4b02      	ldr	r3, [pc, #8]	; (3424 <system_pinmux_pin_set_config+0x2c>)
    341a:	4798      	blx	r3
}
    341c:	bd10      	pop	{r4, pc}
    341e:	46c0      	nop			; (mov r8, r8)
    3420:	40002800 	.word	0x40002800
    3424:	00003351 	.word	0x00003351

00003428 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    3428:	4770      	bx	lr
	...

0000342c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    342c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    342e:	4b05      	ldr	r3, [pc, #20]	; (3444 <system_init+0x18>)
    3430:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    3432:	4b05      	ldr	r3, [pc, #20]	; (3448 <system_init+0x1c>)
    3434:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    3436:	4b05      	ldr	r3, [pc, #20]	; (344c <system_init+0x20>)
    3438:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    343a:	4b05      	ldr	r3, [pc, #20]	; (3450 <system_init+0x24>)
    343c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    343e:	4b05      	ldr	r3, [pc, #20]	; (3454 <system_init+0x28>)
    3440:	4798      	blx	r3
}
    3442:	bd10      	pop	{r4, pc}
    3444:	00002edd 	.word	0x00002edd
    3448:	0000021d 	.word	0x0000021d
    344c:	00003429 	.word	0x00003429
    3450:	00000c11 	.word	0x00000c11
    3454:	00003429 	.word	0x00003429

00003458 <tc_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    3458:	1c93      	adds	r3, r2, #2
    345a:	009b      	lsls	r3, r3, #2
    345c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
    345e:	2a02      	cmp	r2, #2
    3460:	d009      	beq.n	3476 <tc_register_callback+0x1e>
		module->register_callback_mask |= TC_INTFLAG_MC(1);
	}
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
    3462:	2a03      	cmp	r2, #3
    3464:	d00c      	beq.n	3480 <tc_register_callback+0x28>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
	}
	else {
		module->register_callback_mask |= (1 << callback_type);
    3466:	2301      	movs	r3, #1
    3468:	4093      	lsls	r3, r2
    346a:	001a      	movs	r2, r3
    346c:	7e03      	ldrb	r3, [r0, #24]
    346e:	4313      	orrs	r3, r2
    3470:	7603      	strb	r3, [r0, #24]
	}
	return STATUS_OK;
}
    3472:	2000      	movs	r0, #0
    3474:	4770      	bx	lr
		module->register_callback_mask |= TC_INTFLAG_MC(1);
    3476:	7e03      	ldrb	r3, [r0, #24]
    3478:	2210      	movs	r2, #16
    347a:	4313      	orrs	r3, r2
    347c:	7603      	strb	r3, [r0, #24]
    347e:	e7f8      	b.n	3472 <tc_register_callback+0x1a>
		module->register_callback_mask |= TC_INTFLAG_MC(2);
    3480:	7e03      	ldrb	r3, [r0, #24]
    3482:	2220      	movs	r2, #32
    3484:	4313      	orrs	r3, r2
    3486:	7603      	strb	r3, [r0, #24]
    3488:	e7f3      	b.n	3472 <tc_register_callback+0x1a>
	...

0000348c <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
    348c:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
    348e:	0080      	lsls	r0, r0, #2
    3490:	4b16      	ldr	r3, [pc, #88]	; (34ec <_tc_interrupt_handler+0x60>)
    3492:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
    3494:	6823      	ldr	r3, [r4, #0]
    3496:	7a9d      	ldrb	r5, [r3, #10]
    3498:	7e22      	ldrb	r2, [r4, #24]
    349a:	7e63      	ldrb	r3, [r4, #25]
    349c:	4013      	ands	r3, r2
    349e:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
    34a0:	07eb      	lsls	r3, r5, #31
    34a2:	d406      	bmi.n	34b2 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
    34a4:	07ab      	lsls	r3, r5, #30
    34a6:	d40b      	bmi.n	34c0 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
    34a8:	06eb      	lsls	r3, r5, #27
    34aa:	d410      	bmi.n	34ce <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
    34ac:	06ab      	lsls	r3, r5, #26
    34ae:	d415      	bmi.n	34dc <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
    34b0:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
    34b2:	0020      	movs	r0, r4
    34b4:	68a3      	ldr	r3, [r4, #8]
    34b6:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
    34b8:	2301      	movs	r3, #1
    34ba:	6822      	ldr	r2, [r4, #0]
    34bc:	7293      	strb	r3, [r2, #10]
    34be:	e7f1      	b.n	34a4 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
    34c0:	0020      	movs	r0, r4
    34c2:	68e3      	ldr	r3, [r4, #12]
    34c4:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
    34c6:	2302      	movs	r3, #2
    34c8:	6822      	ldr	r2, [r4, #0]
    34ca:	7293      	strb	r3, [r2, #10]
    34cc:	e7ec      	b.n	34a8 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
    34ce:	0020      	movs	r0, r4
    34d0:	6923      	ldr	r3, [r4, #16]
    34d2:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
    34d4:	2310      	movs	r3, #16
    34d6:	6822      	ldr	r2, [r4, #0]
    34d8:	7293      	strb	r3, [r2, #10]
    34da:	e7e7      	b.n	34ac <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
    34dc:	0020      	movs	r0, r4
    34de:	6963      	ldr	r3, [r4, #20]
    34e0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
    34e2:	6823      	ldr	r3, [r4, #0]
    34e4:	2220      	movs	r2, #32
    34e6:	729a      	strb	r2, [r3, #10]
}
    34e8:	e7e2      	b.n	34b0 <_tc_interrupt_handler+0x24>
    34ea:	46c0      	nop			; (mov r8, r8)
    34ec:	200010e4 	.word	0x200010e4

000034f0 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
    34f0:	b510      	push	{r4, lr}
    34f2:	2000      	movs	r0, #0
    34f4:	4b01      	ldr	r3, [pc, #4]	; (34fc <TC0_Handler+0xc>)
    34f6:	4798      	blx	r3
    34f8:	bd10      	pop	{r4, pc}
    34fa:	46c0      	nop			; (mov r8, r8)
    34fc:	0000348d 	.word	0x0000348d

00003500 <TC1_Handler>:
    3500:	b510      	push	{r4, lr}
    3502:	2001      	movs	r0, #1
    3504:	4b01      	ldr	r3, [pc, #4]	; (350c <TC1_Handler+0xc>)
    3506:	4798      	blx	r3
    3508:	bd10      	pop	{r4, pc}
    350a:	46c0      	nop			; (mov r8, r8)
    350c:	0000348d 	.word	0x0000348d

00003510 <TC2_Handler>:
    3510:	b510      	push	{r4, lr}
    3512:	2002      	movs	r0, #2
    3514:	4b01      	ldr	r3, [pc, #4]	; (351c <TC2_Handler+0xc>)
    3516:	4798      	blx	r3
    3518:	bd10      	pop	{r4, pc}
    351a:	46c0      	nop			; (mov r8, r8)
    351c:	0000348d 	.word	0x0000348d

00003520 <TC3_Handler>:
    3520:	b510      	push	{r4, lr}
    3522:	2003      	movs	r0, #3
    3524:	4b01      	ldr	r3, [pc, #4]	; (352c <TC3_Handler+0xc>)
    3526:	4798      	blx	r3
    3528:	bd10      	pop	{r4, pc}
    352a:	46c0      	nop			; (mov r8, r8)
    352c:	0000348d 	.word	0x0000348d

00003530 <TC4_Handler>:
    3530:	b510      	push	{r4, lr}
    3532:	2004      	movs	r0, #4
    3534:	4b01      	ldr	r3, [pc, #4]	; (353c <TC4_Handler+0xc>)
    3536:	4798      	blx	r3
    3538:	bd10      	pop	{r4, pc}
    353a:	46c0      	nop			; (mov r8, r8)
    353c:	0000348d 	.word	0x0000348d

00003540 <_tc_get_inst_index>:
 *
 * \return Index of the given TC module instance.
 */
uint8_t _tc_get_inst_index(
		Tc *const hw)
{
    3540:	b530      	push	{r4, r5, lr}
    3542:	b087      	sub	sp, #28
	/* List of available TC modules. */
	Tc *const tc_modules[TC_INST_NUM] = TC_INSTS;
    3544:	a901      	add	r1, sp, #4
    3546:	4b0c      	ldr	r3, [pc, #48]	; (3578 <_tc_get_inst_index+0x38>)
    3548:	000a      	movs	r2, r1
    354a:	cb32      	ldmia	r3!, {r1, r4, r5}
    354c:	c232      	stmia	r2!, {r1, r4, r5}
    354e:	cb12      	ldmia	r3!, {r1, r4}
    3550:	c212      	stmia	r2!, {r1, r4}

	/* Find index for TC instance. */
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
		if (hw == tc_modules[i]) {
    3552:	9b01      	ldr	r3, [sp, #4]
    3554:	4298      	cmp	r0, r3
    3556:	d00b      	beq.n	3570 <_tc_get_inst_index+0x30>
    3558:	2301      	movs	r3, #1
    355a:	a901      	add	r1, sp, #4
    355c:	009a      	lsls	r2, r3, #2
    355e:	5852      	ldr	r2, [r2, r1]
    3560:	4282      	cmp	r2, r0
    3562:	d006      	beq.n	3572 <_tc_get_inst_index+0x32>
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3564:	3301      	adds	r3, #1
    3566:	2b05      	cmp	r3, #5
    3568:	d1f8      	bne.n	355c <_tc_get_inst_index+0x1c>
		}
	}

	/* Invalid data given. */
	Assert(false);
	return 0;
    356a:	2000      	movs	r0, #0
}
    356c:	b007      	add	sp, #28
    356e:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < TC_INST_NUM; i++) {
    3570:	2300      	movs	r3, #0
			return i;
    3572:	b2d8      	uxtb	r0, r3
    3574:	e7fa      	b.n	356c <_tc_get_inst_index+0x2c>
    3576:	46c0      	nop			; (mov r8, r8)
    3578:	0001c8b4 	.word	0x0001c8b4

0000357c <tc_init>:
 */
enum status_code tc_init(
		struct tc_module *const module_inst,
		Tc *const hw,
		const struct tc_config *const config)
{
    357c:	b5f0      	push	{r4, r5, r6, r7, lr}
    357e:	46c6      	mov	lr, r8
    3580:	b500      	push	{lr}
    3582:	b08e      	sub	sp, #56	; 0x38
    3584:	0004      	movs	r4, r0
    3586:	000d      	movs	r5, r1
    3588:	0016      	movs	r6, r2
	uint32_t ctrla_tmp = 0;
	/* Temporary variable to hold all updates to the CTRLBSET
	 * register before they are written to it */
	uint8_t ctrlbset_tmp = 0;
	/* Temporary variable to hold TC instance number */
	uint8_t instance = _tc_get_inst_index(hw);
    358a:	0008      	movs	r0, r1
    358c:	4bae      	ldr	r3, [pc, #696]	; (3848 <tc_init+0x2cc>)
    358e:	4798      	blx	r3
    3590:	4680      	mov	r8, r0
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC2,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC3,
									SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC4};
#elif (SAML21J) || (SAMR34J) || (SAMR35J)
	/* Array of GLCK ID for different TC instances */
	uint8_t inst_gclk_id[] = {TC0_GCLK_ID, TC1_GCLK_ID, TC2_GCLK_ID, TC3_GCLK_ID, TC4_GCLK_ID};
    3592:	ab0c      	add	r3, sp, #48	; 0x30
    3594:	221b      	movs	r2, #27
    3596:	701a      	strb	r2, [r3, #0]
    3598:	705a      	strb	r2, [r3, #1]
    359a:	3201      	adds	r2, #1
    359c:	709a      	strb	r2, [r3, #2]
    359e:	70da      	strb	r2, [r3, #3]
    35a0:	3201      	adds	r2, #1
    35a2:	711a      	strb	r2, [r3, #4]
	/* Array of MCLK APB mask bit position for different TC instances */
	uint32_t inst_mclk_apbmask[] = {SYSTEM_CLOCK_APB_APBC, MCLK_APBCMASK_TC0,
    35a4:	a902      	add	r1, sp, #8
    35a6:	4ba9      	ldr	r3, [pc, #676]	; (384c <tc_init+0x2d0>)
    35a8:	3314      	adds	r3, #20
    35aa:	000a      	movs	r2, r1
    35ac:	cb83      	ldmia	r3!, {r0, r1, r7}
    35ae:	c283      	stmia	r2!, {r0, r1, r7}
    35b0:	cb83      	ldmia	r3!, {r0, r1, r7}
    35b2:	c283      	stmia	r2!, {r0, r1, r7}
    35b4:	cb83      	ldmia	r3!, {r0, r1, r7}
    35b6:	c283      	stmia	r2!, {r0, r1, r7}
    35b8:	681b      	ldr	r3, [r3, #0]
    35ba:	6013      	str	r3, [r2, #0]
	struct system_gclk_chan_config gclk_chan_config;

#if TC_ASYNC == true
	/* Initialize parameters */
	for (uint8_t i = 0; i < TC_CALLBACK_N; i++) {
		module_inst->callback[i]        = NULL;
    35bc:	2300      	movs	r3, #0
    35be:	60a3      	str	r3, [r4, #8]
    35c0:	60e3      	str	r3, [r4, #12]
    35c2:	6123      	str	r3, [r4, #16]
    35c4:	6163      	str	r3, [r4, #20]
	}
	module_inst->register_callback_mask     = 0x00;
    35c6:	7623      	strb	r3, [r4, #24]
	module_inst->enable_callback_mask       = 0x00;
    35c8:	7663      	strb	r3, [r4, #25]

	/* Register this instance for callbacks*/
	_tc_instances[instance] = module_inst;
    35ca:	4643      	mov	r3, r8
    35cc:	009a      	lsls	r2, r3, #2
    35ce:	4ba0      	ldr	r3, [pc, #640]	; (3850 <tc_init+0x2d4>)
    35d0:	50d4      	str	r4, [r2, r3]
#endif

	/* Associate the given device instance with the hardware module */
	module_inst->hw = hw;
    35d2:	6025      	str	r5, [r4, #0]

	module_inst->double_buffering_enabled = config->double_buffering_enabled;
    35d4:	2334      	movs	r3, #52	; 0x34
    35d6:	5cf3      	ldrb	r3, [r6, r3]
    35d8:	76a3      	strb	r3, [r4, #26]

	/* Check if odd numbered TC modules are being configured in 32-bit
	 * counter size. Only even numbered counters are allowed to be
	 * configured in 32-bit counter size.
	 */
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    35da:	78f3      	ldrb	r3, [r6, #3]
    35dc:	2b08      	cmp	r3, #8
    35de:	d008      	beq.n	35f2 <tc_init+0x76>
	}

	/* Make the counter size variable in the module_inst struct reflect
	 * the counter size in the module
	 */
	module_inst->counter_size = config->counter_size;
    35e0:	7123      	strb	r3, [r4, #4]

	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    35e2:	682b      	ldr	r3, [r5, #0]
		/* We are in the middle of a reset. Abort. */
		return STATUS_BUSY;
    35e4:	2005      	movs	r0, #5
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_SWRST) {
    35e6:	07db      	lsls	r3, r3, #31
    35e8:	d508      	bpl.n	35fc <tc_init+0x80>
			return STATUS_OK;
	}

	Assert(false);
	return STATUS_ERR_INVALID_ARG;
}
    35ea:	b00e      	add	sp, #56	; 0x38
    35ec:	bc04      	pop	{r2}
    35ee:	4690      	mov	r8, r2
    35f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return STATUS_ERR_INVALID_ARG;
    35f2:	2017      	movs	r0, #23
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) &&
    35f4:	4642      	mov	r2, r8
    35f6:	07d2      	lsls	r2, r2, #31
    35f8:	d4f7      	bmi.n	35ea <tc_init+0x6e>
    35fa:	e7f1      	b.n	35e0 <tc_init+0x64>
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    35fc:	7aeb      	ldrb	r3, [r5, #11]
		return STATUS_ERR_DENIED;
    35fe:	3017      	adds	r0, #23
	if (hw->COUNT8.STATUS.reg & TC_STATUS_SLAVE) {
    3600:	079b      	lsls	r3, r3, #30
    3602:	d4f2      	bmi.n	35ea <tc_init+0x6e>
	if (hw->COUNT8.CTRLA.reg & TC_CTRLA_ENABLE) {
    3604:	682b      	ldr	r3, [r5, #0]
    3606:	079b      	lsls	r3, r3, #30
    3608:	d4ef      	bmi.n	35ea <tc_init+0x6e>
	if (config->pwm_channel[0].enabled) {
    360a:	7c33      	ldrb	r3, [r6, #16]
    360c:	2b00      	cmp	r3, #0
    360e:	d112      	bne.n	3636 <tc_init+0xba>
	if (config->pwm_channel[1].enabled) {
    3610:	7f33      	ldrb	r3, [r6, #28]
    3612:	2b00      	cmp	r3, #0
    3614:	d11b      	bne.n	364e <tc_init+0xd2>
	system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[instance*2],
    3616:	4643      	mov	r3, r8
    3618:	005a      	lsls	r2, r3, #1
    361a:	a902      	add	r1, sp, #8
    361c:	1c53      	adds	r3, r2, #1
    361e:	009b      	lsls	r3, r3, #2
    3620:	5858      	ldr	r0, [r3, r1]
    3622:	4643      	mov	r3, r8
    3624:	00db      	lsls	r3, r3, #3
    3626:	585b      	ldr	r3, [r3, r1]
	switch (bus) {
    3628:	b2d9      	uxtb	r1, r3
    362a:	2904      	cmp	r1, #4
    362c:	d823      	bhi.n	3676 <tc_init+0xfa>
    362e:	008b      	lsls	r3, r1, #2
    3630:	4988      	ldr	r1, [pc, #544]	; (3854 <tc_init+0x2d8>)
    3632:	58cb      	ldr	r3, [r1, r3]
    3634:	469f      	mov	pc, r3
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    3636:	a901      	add	r1, sp, #4
    3638:	2301      	movs	r3, #1
    363a:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    363c:	2200      	movs	r2, #0
    363e:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[0].pin_mux;
    3640:	7e32      	ldrb	r2, [r6, #24]
    3642:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3644:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3646:	7d30      	ldrb	r0, [r6, #20]
    3648:	4b83      	ldr	r3, [pc, #524]	; (3858 <tc_init+0x2dc>)
    364a:	4798      	blx	r3
    364c:	e7e0      	b.n	3610 <tc_init+0x94>
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
    364e:	a901      	add	r1, sp, #4
    3650:	2301      	movs	r3, #1
    3652:	708b      	strb	r3, [r1, #2]
	config->powersave    = false;
    3654:	2200      	movs	r2, #0
    3656:	70ca      	strb	r2, [r1, #3]
		pin_config.mux_position = config->pwm_channel[1].pin_mux;
    3658:	3224      	adds	r2, #36	; 0x24
    365a:	18b2      	adds	r2, r6, r2
    365c:	7812      	ldrb	r2, [r2, #0]
    365e:	700a      	strb	r2, [r1, #0]
		pin_config.direction = SYSTEM_PINMUX_PIN_DIR_OUTPUT;
    3660:	704b      	strb	r3, [r1, #1]
		system_pinmux_pin_set_config(
    3662:	331f      	adds	r3, #31
    3664:	18f3      	adds	r3, r6, r3
    3666:	7818      	ldrb	r0, [r3, #0]
    3668:	4b7b      	ldr	r3, [pc, #492]	; (3858 <tc_init+0x2dc>)
    366a:	4798      	blx	r3
    366c:	e7d3      	b.n	3616 <tc_init+0x9a>
			MCLK->APBAMASK.reg |= mask;
    366e:	497b      	ldr	r1, [pc, #492]	; (385c <tc_init+0x2e0>)
    3670:	694b      	ldr	r3, [r1, #20]
    3672:	4318      	orrs	r0, r3
    3674:	6148      	str	r0, [r1, #20]
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    3676:	78f3      	ldrb	r3, [r6, #3]
    3678:	2b08      	cmp	r3, #8
    367a:	d100      	bne.n	367e <tc_init+0x102>
    367c:	e086      	b.n	378c <tc_init+0x210>
	gclk_chan_config.source_generator = config->clock_source;
    367e:	7833      	ldrb	r3, [r6, #0]
    3680:	466a      	mov	r2, sp
    3682:	7013      	strb	r3, [r2, #0]
	system_gclk_chan_set_config(inst_gclk_id[instance], &gclk_chan_config);
    3684:	ab0c      	add	r3, sp, #48	; 0x30
    3686:	4642      	mov	r2, r8
    3688:	5c9f      	ldrb	r7, [r3, r2]
    368a:	4669      	mov	r1, sp
    368c:	0038      	movs	r0, r7
    368e:	4b74      	ldr	r3, [pc, #464]	; (3860 <tc_init+0x2e4>)
    3690:	4798      	blx	r3
	system_gclk_chan_enable(inst_gclk_id[instance]);
    3692:	0038      	movs	r0, r7
    3694:	4b73      	ldr	r3, [pc, #460]	; (3864 <tc_init+0x2e8>)
    3696:	4798      	blx	r3
			(uint32_t)config->counter_size |
    3698:	78f3      	ldrb	r3, [r6, #3]
    369a:	79f2      	ldrb	r2, [r6, #7]
    369c:	4313      	orrs	r3, r2
			(uint32_t)config->clock_prescaler;
    369e:	88b2      	ldrh	r2, [r6, #4]
	ctrla_tmp =
    36a0:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    36a2:	7a72      	ldrb	r2, [r6, #9]
    36a4:	2a00      	cmp	r2, #0
    36a6:	d002      	beq.n	36ae <tc_init+0x132>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    36a8:	2280      	movs	r2, #128	; 0x80
    36aa:	0252      	lsls	r2, r2, #9
    36ac:	4313      	orrs	r3, r2
		if (config->enable_capture_on_channel[i] == true) {
    36ae:	7ab2      	ldrb	r2, [r6, #10]
    36b0:	2a00      	cmp	r2, #0
    36b2:	d002      	beq.n	36ba <tc_init+0x13e>
			ctrla_tmp |= (TC_CTRLA_CAPTEN(1) << i);
    36b4:	2280      	movs	r2, #128	; 0x80
    36b6:	0292      	lsls	r2, r2, #10
    36b8:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    36ba:	7af2      	ldrb	r2, [r6, #11]
    36bc:	2a00      	cmp	r2, #0
    36be:	d002      	beq.n	36c6 <tc_init+0x14a>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    36c0:	2280      	movs	r2, #128	; 0x80
    36c2:	0352      	lsls	r2, r2, #13
    36c4:	4313      	orrs	r3, r2
		if (config->enable_capture_on_IO[i] == true) {
    36c6:	7b32      	ldrb	r2, [r6, #12]
    36c8:	2a00      	cmp	r2, #0
    36ca:	d002      	beq.n	36d2 <tc_init+0x156>
			ctrla_tmp |= (TC_CTRLA_COPEN(1) << i);
    36cc:	2280      	movs	r2, #128	; 0x80
    36ce:	0392      	lsls	r2, r2, #14
    36d0:	4313      	orrs	r3, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    36d2:	7871      	ldrb	r1, [r6, #1]
    36d4:	0189      	lsls	r1, r1, #6
				|(config->on_demand << TC_CTRLA_ONDEMAND_Pos);
    36d6:	78b2      	ldrb	r2, [r6, #2]
    36d8:	01d2      	lsls	r2, r2, #7
    36da:	4311      	orrs	r1, r2
	ctrla_tmp |= (config->run_in_standby << TC_CTRLA_RUNSTDBY_Pos)
    36dc:	4319      	orrs	r1, r3
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36de:	6822      	ldr	r2, [r4, #0]

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	return (tc_module->SYNCBUSY.reg);
    36e0:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    36e2:	2b00      	cmp	r3, #0
    36e4:	d1fc      	bne.n	36e0 <tc_init+0x164>
	hw->COUNT8.CTRLA.reg = ctrla_tmp;
    36e6:	6029      	str	r1, [r5, #0]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    36e8:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    36ea:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    36ec:	2b00      	cmp	r3, #0
    36ee:	d1fc      	bne.n	36ea <tc_init+0x16e>
	hw->COUNT8.WAVE.reg = config->wave_generation;
    36f0:	79b3      	ldrb	r3, [r6, #6]
    36f2:	732b      	strb	r3, [r5, #12]
	if (config->oneshot) {
    36f4:	7b71      	ldrb	r1, [r6, #13]
		ctrlbset_tmp = TC_CTRLBSET_ONESHOT;
    36f6:	1e4b      	subs	r3, r1, #1
    36f8:	4199      	sbcs	r1, r3
    36fa:	0089      	lsls	r1, r1, #2
	if (config->count_direction) {
    36fc:	7bb3      	ldrb	r3, [r6, #14]
    36fe:	2b00      	cmp	r3, #0
    3700:	d001      	beq.n	3706 <tc_init+0x18a>
		ctrlbset_tmp |= TC_CTRLBSET_DIR;
    3702:	2301      	movs	r3, #1
    3704:	4319      	orrs	r1, r3
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3706:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3708:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    370a:	2b00      	cmp	r3, #0
    370c:	d1fc      	bne.n	3708 <tc_init+0x18c>
	hw->COUNT8.CTRLBCLR.reg = 0xFF;
    370e:	33ff      	adds	r3, #255	; 0xff
    3710:	712b      	strb	r3, [r5, #4]
	if (ctrlbset_tmp) {
    3712:	2900      	cmp	r1, #0
    3714:	d004      	beq.n	3720 <tc_init+0x1a4>
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3716:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3718:	6913      	ldr	r3, [r2, #16]
		while (tc_is_syncing(module_inst)) {
    371a:	2b00      	cmp	r3, #0
    371c:	d1fc      	bne.n	3718 <tc_init+0x19c>
		hw->COUNT8.CTRLBSET.reg = ctrlbset_tmp;
    371e:	7169      	strb	r1, [r5, #5]
	hw->COUNT8.DRVCTRL.reg = config->waveform_invert_output;
    3720:	7a33      	ldrb	r3, [r6, #8]
    3722:	736b      	strb	r3, [r5, #13]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3724:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3726:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    3728:	2b00      	cmp	r3, #0
    372a:	d1fc      	bne.n	3726 <tc_init+0x1aa>
	switch (module_inst->counter_size) {
    372c:	7923      	ldrb	r3, [r4, #4]
    372e:	2b04      	cmp	r3, #4
    3730:	d059      	beq.n	37e6 <tc_init+0x26a>
    3732:	2b08      	cmp	r3, #8
    3734:	d074      	beq.n	3820 <tc_init+0x2a4>
	return STATUS_ERR_INVALID_ARG;
    3736:	2017      	movs	r0, #23
	switch (module_inst->counter_size) {
    3738:	2b00      	cmp	r3, #0
    373a:	d000      	beq.n	373e <tc_init+0x1c2>
    373c:	e755      	b.n	35ea <tc_init+0x6e>
    373e:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3740:	2b00      	cmp	r3, #0
    3742:	d1fc      	bne.n	373e <tc_init+0x1c2>
				= config->counter_16_bit.value;
    3744:	8d33      	ldrh	r3, [r6, #40]	; 0x28
    3746:	82ab      	strh	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3748:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    374a:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    374c:	2b00      	cmp	r3, #0
    374e:	d1fc      	bne.n	374a <tc_init+0x1ce>
					config->counter_16_bit.compare_capture_channel[0];
    3750:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
			hw->COUNT16.CC[0].reg =
    3752:	83ab      	strh	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3754:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3756:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3758:	2b00      	cmp	r3, #0
    375a:	d1fc      	bne.n	3756 <tc_init+0x1da>
					config->counter_16_bit.compare_capture_channel[1];
    375c:	8db3      	ldrh	r3, [r6, #44]	; 0x2c
			hw->COUNT16.CC[1].reg =
    375e:	83eb      	strh	r3, [r5, #30]
			return STATUS_OK;
    3760:	2000      	movs	r0, #0
    3762:	e742      	b.n	35ea <tc_init+0x6e>
			MCLK->APBBMASK.reg |= mask;
    3764:	493d      	ldr	r1, [pc, #244]	; (385c <tc_init+0x2e0>)
    3766:	698b      	ldr	r3, [r1, #24]
    3768:	4318      	orrs	r0, r3
    376a:	6188      	str	r0, [r1, #24]
    376c:	e783      	b.n	3676 <tc_init+0xfa>
			MCLK->APBCMASK.reg |= mask;
    376e:	493b      	ldr	r1, [pc, #236]	; (385c <tc_init+0x2e0>)
    3770:	69cb      	ldr	r3, [r1, #28]
    3772:	4318      	orrs	r0, r3
    3774:	61c8      	str	r0, [r1, #28]
    3776:	e77e      	b.n	3676 <tc_init+0xfa>
			MCLK->APBDMASK.reg |= mask;
    3778:	4938      	ldr	r1, [pc, #224]	; (385c <tc_init+0x2e0>)
    377a:	6a0b      	ldr	r3, [r1, #32]
    377c:	4318      	orrs	r0, r3
    377e:	6208      	str	r0, [r1, #32]
    3780:	e779      	b.n	3676 <tc_init+0xfa>
			MCLK->APBEMASK.reg |= mask;
    3782:	4b36      	ldr	r3, [pc, #216]	; (385c <tc_init+0x2e0>)
    3784:	6a59      	ldr	r1, [r3, #36]	; 0x24
    3786:	4308      	orrs	r0, r1
    3788:	6258      	str	r0, [r3, #36]	; 0x24
    378a:	e774      	b.n	3676 <tc_init+0xfa>
	if ((config->counter_size == TC_COUNTER_SIZE_32BIT) && (instance+1 < TC_INST_NUM))
    378c:	4643      	mov	r3, r8
    378e:	3301      	adds	r3, #1
    3790:	2b04      	cmp	r3, #4
    3792:	dd00      	ble.n	3796 <tc_init+0x21a>
    3794:	e773      	b.n	367e <tc_init+0x102>
		system_apb_clock_set_mask((enum system_clock_apb_bus)inst_mclk_apbmask[(instance+1)*2],
    3796:	ab02      	add	r3, sp, #8
    3798:	1cd1      	adds	r1, r2, #3
    379a:	0089      	lsls	r1, r1, #2
    379c:	58c9      	ldr	r1, [r1, r3]
    379e:	3202      	adds	r2, #2
    37a0:	0092      	lsls	r2, r2, #2
    37a2:	58d3      	ldr	r3, [r2, r3]
	switch (bus) {
    37a4:	b2da      	uxtb	r2, r3
    37a6:	2a04      	cmp	r2, #4
    37a8:	d900      	bls.n	37ac <tc_init+0x230>
    37aa:	e768      	b.n	367e <tc_init+0x102>
    37ac:	0093      	lsls	r3, r2, #2
    37ae:	4a2e      	ldr	r2, [pc, #184]	; (3868 <tc_init+0x2ec>)
    37b0:	58d3      	ldr	r3, [r2, r3]
    37b2:	469f      	mov	pc, r3
			MCLK->APBAMASK.reg |= mask;
    37b4:	4a29      	ldr	r2, [pc, #164]	; (385c <tc_init+0x2e0>)
    37b6:	6953      	ldr	r3, [r2, #20]
    37b8:	4319      	orrs	r1, r3
    37ba:	6151      	str	r1, [r2, #20]
    37bc:	e75f      	b.n	367e <tc_init+0x102>
			MCLK->APBBMASK.reg |= mask;
    37be:	4a27      	ldr	r2, [pc, #156]	; (385c <tc_init+0x2e0>)
    37c0:	6993      	ldr	r3, [r2, #24]
    37c2:	4319      	orrs	r1, r3
    37c4:	6191      	str	r1, [r2, #24]
    37c6:	e75a      	b.n	367e <tc_init+0x102>
			MCLK->APBCMASK.reg |= mask;
    37c8:	4a24      	ldr	r2, [pc, #144]	; (385c <tc_init+0x2e0>)
    37ca:	69d3      	ldr	r3, [r2, #28]
    37cc:	4319      	orrs	r1, r3
    37ce:	61d1      	str	r1, [r2, #28]
    37d0:	e755      	b.n	367e <tc_init+0x102>
			MCLK->APBDMASK.reg |= mask;
    37d2:	4a22      	ldr	r2, [pc, #136]	; (385c <tc_init+0x2e0>)
    37d4:	6a13      	ldr	r3, [r2, #32]
    37d6:	4319      	orrs	r1, r3
    37d8:	6211      	str	r1, [r2, #32]
    37da:	e750      	b.n	367e <tc_init+0x102>
			MCLK->APBEMASK.reg |= mask;
    37dc:	4b1f      	ldr	r3, [pc, #124]	; (385c <tc_init+0x2e0>)
    37de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    37e0:	4311      	orrs	r1, r2
    37e2:	6259      	str	r1, [r3, #36]	; 0x24
    37e4:	e74b      	b.n	367e <tc_init+0x102>
    37e6:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37e8:	2b00      	cmp	r3, #0
    37ea:	d1fc      	bne.n	37e6 <tc_init+0x26a>
					config->counter_8_bit.value;
    37ec:	3328      	adds	r3, #40	; 0x28
    37ee:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.COUNT.reg =
    37f0:	752b      	strb	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    37f2:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    37f4:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    37f6:	2b00      	cmp	r3, #0
    37f8:	d1fc      	bne.n	37f4 <tc_init+0x278>
					config->counter_8_bit.period;
    37fa:	3329      	adds	r3, #41	; 0x29
    37fc:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.PER.reg =
    37fe:	76eb      	strb	r3, [r5, #27]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3800:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3802:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3804:	2b00      	cmp	r3, #0
    3806:	d1fc      	bne.n	3802 <tc_init+0x286>
					config->counter_8_bit.compare_capture_channel[0];
    3808:	332a      	adds	r3, #42	; 0x2a
    380a:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[0].reg =
    380c:	772b      	strb	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    380e:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3810:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3812:	2b00      	cmp	r3, #0
    3814:	d1fc      	bne.n	3810 <tc_init+0x294>
					config->counter_8_bit.compare_capture_channel[1];
    3816:	332b      	adds	r3, #43	; 0x2b
    3818:	5cf3      	ldrb	r3, [r6, r3]
			hw->COUNT8.CC[1].reg =
    381a:	776b      	strb	r3, [r5, #29]
			return STATUS_OK;
    381c:	2000      	movs	r0, #0
    381e:	e6e4      	b.n	35ea <tc_init+0x6e>
    3820:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    3822:	2b00      	cmp	r3, #0
    3824:	d1fc      	bne.n	3820 <tc_init+0x2a4>
				= config->counter_32_bit.value;
    3826:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    3828:	616b      	str	r3, [r5, #20]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    382a:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    382c:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    382e:	2b00      	cmp	r3, #0
    3830:	d1fc      	bne.n	382c <tc_init+0x2b0>
			hw->COUNT32.CC[0].reg =
    3832:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    3834:	61eb      	str	r3, [r5, #28]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3836:	6822      	ldr	r2, [r4, #0]
	return (tc_module->SYNCBUSY.reg);
    3838:	6913      	ldr	r3, [r2, #16]
			while (tc_is_syncing(module_inst)) {
    383a:	2b00      	cmp	r3, #0
    383c:	d1fc      	bne.n	3838 <tc_init+0x2bc>
					config->counter_32_bit.compare_capture_channel[1];
    383e:	6b33      	ldr	r3, [r6, #48]	; 0x30
			hw->COUNT32.CC[1].reg =
    3840:	622b      	str	r3, [r5, #32]
			return STATUS_OK;
    3842:	2000      	movs	r0, #0
    3844:	e6d1      	b.n	35ea <tc_init+0x6e>
    3846:	46c0      	nop			; (mov r8, r8)
    3848:	00003541 	.word	0x00003541
    384c:	0001c8b4 	.word	0x0001c8b4
    3850:	200010e4 	.word	0x200010e4
    3854:	0001c88c 	.word	0x0001c88c
    3858:	000033f9 	.word	0x000033f9
    385c:	40000400 	.word	0x40000400
    3860:	000032fd 	.word	0x000032fd
    3864:	0000328d 	.word	0x0000328d
    3868:	0001c8a0 	.word	0x0001c8a0

0000386c <tc_get_count_value>:
	/* Sanity check arguments */
	Assert(module_inst);
	Assert(module_inst->hw);

	/* Get a pointer to the module's hardware instance */
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    386c:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    386e:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3870:	2b00      	cmp	r3, #0
    3872:	d1fc      	bne.n	386e <tc_get_count_value+0x2>
		/* Wait for sync */
	}

	/* Make certain that there are no conflicting commands in the register */
	tc_module->CTRLBCLR.reg = TC_CTRLBCLR_CMD_NONE;
    3874:	7113      	strb	r3, [r2, #4]
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    3876:	6801      	ldr	r1, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3878:	690b      	ldr	r3, [r1, #16]

	while (tc_is_syncing(module_inst)) {
    387a:	2b00      	cmp	r3, #0
    387c:	d1fc      	bne.n	3878 <tc_get_count_value+0xc>
		/* Wait for sync */
	}

	/* Write command to execute */
	tc_module->CTRLBSET.reg = TC_CTRLBSET_CMD(TC_CTRLBSET_CMD_READSYNC_Val);
    387e:	3380      	adds	r3, #128	; 0x80
    3880:	7153      	strb	r3, [r2, #5]

	/* Read synchronization */
	tc_sync_read_count(module_inst);
	
	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    3882:	6802      	ldr	r2, [r0, #0]
	return (tc_module->SYNCBUSY.reg);
    3884:	6913      	ldr	r3, [r2, #16]

	while (tc_is_syncing(module_inst)) {
    3886:	2b00      	cmp	r3, #0
    3888:	d1fc      	bne.n	3884 <tc_get_count_value+0x18>
		/* Wait for sync */
	}

	/* Read from based on the TC counter size */
	switch (module_inst->counter_size) {
    388a:	7903      	ldrb	r3, [r0, #4]
    388c:	2b04      	cmp	r3, #4
    388e:	d005      	beq.n	389c <tc_get_count_value+0x30>
    3890:	2b08      	cmp	r3, #8
    3892:	d009      	beq.n	38a8 <tc_get_count_value+0x3c>
		case TC_COUNTER_SIZE_32BIT:
			return tc_module->COUNT32.COUNT.reg;
	}

	Assert(false);
	return 0;
    3894:	2000      	movs	r0, #0
	switch (module_inst->counter_size) {
    3896:	2b00      	cmp	r3, #0
    3898:	d003      	beq.n	38a2 <tc_get_count_value+0x36>
}
    389a:	4770      	bx	lr
			return (uint32_t)tc_module->COUNT8.COUNT.reg;
    389c:	7d10      	ldrb	r0, [r2, #20]
    389e:	b2c0      	uxtb	r0, r0
    38a0:	e7fb      	b.n	389a <tc_get_count_value+0x2e>
			return (uint32_t)tc_module->COUNT16.COUNT.reg;
    38a2:	8a90      	ldrh	r0, [r2, #20]
    38a4:	b280      	uxth	r0, r0
    38a6:	e7f8      	b.n	389a <tc_get_count_value+0x2e>
			return tc_module->COUNT32.COUNT.reg;
    38a8:	6950      	ldr	r0, [r2, #20]
    38aa:	e7f6      	b.n	389a <tc_get_count_value+0x2e>

000038ac <tc_set_compare_value>:
 */
enum status_code tc_set_compare_value(
		const struct tc_module *const module_inst,
		const enum tc_compare_capture_channel channel_index,
		const uint32_t compare)
{
    38ac:	b510      	push	{r4, lr}
	Assert(module_inst);
	Assert(module_inst->hw);
	Assert(compare);

	/* Get a pointer to the module's hardware instance */
	Tc *const tc_module = module_inst->hw;
    38ae:	6804      	ldr	r4, [r0, #0]
    38b0:	6923      	ldr	r3, [r4, #16]

	while (tc_is_syncing(module_inst)) {
    38b2:	2b00      	cmp	r3, #0
    38b4:	d1fc      	bne.n	38b0 <tc_set_compare_value+0x4>
		/* Wait for sync */
	}

	/* Read out based on the TC counter size */
	switch (module_inst->counter_size) {
    38b6:	7903      	ldrb	r3, [r0, #4]
    38b8:	2b04      	cmp	r3, #4
    38ba:	d006      	beq.n	38ca <tc_set_compare_value+0x1e>
    38bc:	2b08      	cmp	r3, #8
    38be:	d028      	beq.n	3912 <tc_set_compare_value+0x66>
    38c0:	2b00      	cmp	r3, #0
    38c2:	d013      	beq.n	38ec <tc_set_compare_value+0x40>
				}
				return STATUS_OK;
			}
	}

	return STATUS_ERR_INVALID_ARG;
    38c4:	2317      	movs	r3, #23
}
    38c6:	0018      	movs	r0, r3
    38c8:	bd10      	pop	{r4, pc}
	return STATUS_ERR_INVALID_ARG;
    38ca:	2317      	movs	r3, #23
			if (channel_index <
    38cc:	2901      	cmp	r1, #1
    38ce:	d8fa      	bhi.n	38c6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    38d0:	7e83      	ldrb	r3, [r0, #26]
    38d2:	2b00      	cmp	r3, #0
    38d4:	d005      	beq.n	38e2 <tc_set_compare_value+0x36>
							(uint8_t)compare;
    38d6:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CCBUF[channel_index].reg =
    38d8:	1861      	adds	r1, r4, r1
    38da:	3130      	adds	r1, #48	; 0x30
    38dc:	700a      	strb	r2, [r1, #0]
				return STATUS_OK;
    38de:	2300      	movs	r3, #0
    38e0:	e7f1      	b.n	38c6 <tc_set_compare_value+0x1a>
							(uint8_t)compare;
    38e2:	b2d2      	uxtb	r2, r2
					tc_module->COUNT8.CC[channel_index].reg  =
    38e4:	1864      	adds	r4, r4, r1
    38e6:	7722      	strb	r2, [r4, #28]
				return STATUS_OK;
    38e8:	2300      	movs	r3, #0
    38ea:	e7ec      	b.n	38c6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    38ec:	2317      	movs	r3, #23
			if (channel_index <
    38ee:	2901      	cmp	r1, #1
    38f0:	d8e9      	bhi.n	38c6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    38f2:	7e83      	ldrb	r3, [r0, #26]
    38f4:	2b00      	cmp	r3, #0
    38f6:	d005      	beq.n	3904 <tc_set_compare_value+0x58>
							(uint16_t)compare;
    38f8:	b292      	uxth	r2, r2
					tc_module->COUNT16.CCBUF[channel_index].reg =
    38fa:	3118      	adds	r1, #24
    38fc:	0049      	lsls	r1, r1, #1
    38fe:	530a      	strh	r2, [r1, r4]
				return STATUS_OK;
    3900:	2300      	movs	r3, #0
    3902:	e7e0      	b.n	38c6 <tc_set_compare_value+0x1a>
							(uint16_t)compare;
    3904:	b292      	uxth	r2, r2
					tc_module->COUNT16.CC[channel_index].reg =
    3906:	310c      	adds	r1, #12
    3908:	0049      	lsls	r1, r1, #1
    390a:	1864      	adds	r4, r4, r1
    390c:	80a2      	strh	r2, [r4, #4]
				return STATUS_OK;
    390e:	2300      	movs	r3, #0
    3910:	e7d9      	b.n	38c6 <tc_set_compare_value+0x1a>
	return STATUS_ERR_INVALID_ARG;
    3912:	2317      	movs	r3, #23
			if (channel_index <
    3914:	2901      	cmp	r1, #1
    3916:	d8d6      	bhi.n	38c6 <tc_set_compare_value+0x1a>
				if (module_inst->double_buffering_enabled){
    3918:	7e83      	ldrb	r3, [r0, #26]
    391a:	2b00      	cmp	r3, #0
    391c:	d105      	bne.n	392a <tc_set_compare_value+0x7e>
					tc_module->COUNT32.CC[channel_index].reg =
    391e:	3106      	adds	r1, #6
    3920:	0089      	lsls	r1, r1, #2
    3922:	1864      	adds	r4, r4, r1
    3924:	6062      	str	r2, [r4, #4]
				return STATUS_OK;
    3926:	2300      	movs	r3, #0
    3928:	e7cd      	b.n	38c6 <tc_set_compare_value+0x1a>
					tc_module->COUNT32.CCBUF[channel_index].reg =
    392a:	310c      	adds	r1, #12
    392c:	0089      	lsls	r1, r1, #2
    392e:	510a      	str	r2, [r1, r4]
				return STATUS_OK;
    3930:	2300      	movs	r3, #0
    3932:	e7c8      	b.n	38c6 <tc_set_compare_value+0x1a>

00003934 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    3934:	e7fe      	b.n	3934 <Dummy_Handler>
	...

00003938 <Reset_Handler>:
{
    3938:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    393a:	4a1a      	ldr	r2, [pc, #104]	; (39a4 <Reset_Handler+0x6c>)
    393c:	4b1a      	ldr	r3, [pc, #104]	; (39a8 <Reset_Handler+0x70>)
    393e:	429a      	cmp	r2, r3
    3940:	d011      	beq.n	3966 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    3942:	001a      	movs	r2, r3
    3944:	4b19      	ldr	r3, [pc, #100]	; (39ac <Reset_Handler+0x74>)
    3946:	429a      	cmp	r2, r3
    3948:	d20d      	bcs.n	3966 <Reset_Handler+0x2e>
    394a:	4a19      	ldr	r2, [pc, #100]	; (39b0 <Reset_Handler+0x78>)
    394c:	3303      	adds	r3, #3
    394e:	1a9b      	subs	r3, r3, r2
    3950:	089b      	lsrs	r3, r3, #2
    3952:	3301      	adds	r3, #1
    3954:	009b      	lsls	r3, r3, #2
    3956:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    3958:	4813      	ldr	r0, [pc, #76]	; (39a8 <Reset_Handler+0x70>)
    395a:	4912      	ldr	r1, [pc, #72]	; (39a4 <Reset_Handler+0x6c>)
    395c:	588c      	ldr	r4, [r1, r2]
    395e:	5084      	str	r4, [r0, r2]
    3960:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    3962:	429a      	cmp	r2, r3
    3964:	d1fa      	bne.n	395c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    3966:	4a13      	ldr	r2, [pc, #76]	; (39b4 <Reset_Handler+0x7c>)
    3968:	4b13      	ldr	r3, [pc, #76]	; (39b8 <Reset_Handler+0x80>)
    396a:	429a      	cmp	r2, r3
    396c:	d20a      	bcs.n	3984 <Reset_Handler+0x4c>
    396e:	43d3      	mvns	r3, r2
    3970:	4911      	ldr	r1, [pc, #68]	; (39b8 <Reset_Handler+0x80>)
    3972:	185b      	adds	r3, r3, r1
    3974:	2103      	movs	r1, #3
    3976:	438b      	bics	r3, r1
    3978:	3304      	adds	r3, #4
    397a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    397c:	2100      	movs	r1, #0
    397e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    3980:	4293      	cmp	r3, r2
    3982:	d1fc      	bne.n	397e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    3984:	4a0d      	ldr	r2, [pc, #52]	; (39bc <Reset_Handler+0x84>)
    3986:	21ff      	movs	r1, #255	; 0xff
    3988:	4b0d      	ldr	r3, [pc, #52]	; (39c0 <Reset_Handler+0x88>)
    398a:	438b      	bics	r3, r1
    398c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    398e:	4a0d      	ldr	r2, [pc, #52]	; (39c4 <Reset_Handler+0x8c>)
    3990:	6853      	ldr	r3, [r2, #4]
    3992:	397f      	subs	r1, #127	; 0x7f
    3994:	430b      	orrs	r3, r1
    3996:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    3998:	4b0b      	ldr	r3, [pc, #44]	; (39c8 <Reset_Handler+0x90>)
    399a:	4798      	blx	r3
        main();
    399c:	4b0b      	ldr	r3, [pc, #44]	; (39cc <Reset_Handler+0x94>)
    399e:	4798      	blx	r3
    39a0:	e7fe      	b.n	39a0 <Reset_Handler+0x68>
    39a2:	46c0      	nop			; (mov r8, r8)
    39a4:	0001e474 	.word	0x0001e474
    39a8:	20000000 	.word	0x20000000
    39ac:	20000a18 	.word	0x20000a18
    39b0:	20000004 	.word	0x20000004
    39b4:	20000a18 	.word	0x20000a18
    39b8:	20002800 	.word	0x20002800
    39bc:	e000ed00 	.word	0xe000ed00
    39c0:	00000000 	.word	0x00000000
    39c4:	41004000 	.word	0x41004000
    39c8:	00015eb1 	.word	0x00015eb1
    39cc:	00004edd 	.word	0x00004edd

000039d0 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
    39d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    39d2:	46c6      	mov	lr, r8
    39d4:	b500      	push	{lr}
    39d6:	000c      	movs	r4, r1
    39d8:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
    39da:	2800      	cmp	r0, #0
    39dc:	d10f      	bne.n	39fe <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
    39de:	2a00      	cmp	r2, #0
    39e0:	dd11      	ble.n	3a06 <_read+0x36>
    39e2:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
    39e4:	4e09      	ldr	r6, [pc, #36]	; (3a0c <_read+0x3c>)
    39e6:	4d0a      	ldr	r5, [pc, #40]	; (3a10 <_read+0x40>)
    39e8:	6830      	ldr	r0, [r6, #0]
    39ea:	0021      	movs	r1, r4
    39ec:	682b      	ldr	r3, [r5, #0]
    39ee:	4798      	blx	r3
		ptr++;
    39f0:	3401      	adds	r4, #1
	for (; len > 0; --len) {
    39f2:	42bc      	cmp	r4, r7
    39f4:	d1f8      	bne.n	39e8 <_read+0x18>
		nChars++;
	}
	return nChars;
}
    39f6:	4640      	mov	r0, r8
    39f8:	bc04      	pop	{r2}
    39fa:	4690      	mov	r8, r2
    39fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
    39fe:	2301      	movs	r3, #1
    3a00:	425b      	negs	r3, r3
    3a02:	4698      	mov	r8, r3
    3a04:	e7f7      	b.n	39f6 <_read+0x26>
	for (; len > 0; --len) {
    3a06:	4680      	mov	r8, r0
    3a08:	e7f5      	b.n	39f6 <_read+0x26>
    3a0a:	46c0      	nop			; (mov r8, r8)
    3a0c:	20001100 	.word	0x20001100
    3a10:	200010f8 	.word	0x200010f8

00003a14 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
    3a14:	b5f0      	push	{r4, r5, r6, r7, lr}
    3a16:	46c6      	mov	lr, r8
    3a18:	b500      	push	{lr}
    3a1a:	000e      	movs	r6, r1
    3a1c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
    3a1e:	3801      	subs	r0, #1
    3a20:	2802      	cmp	r0, #2
    3a22:	d810      	bhi.n	3a46 <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
    3a24:	2a00      	cmp	r2, #0
    3a26:	d011      	beq.n	3a4c <_write+0x38>
    3a28:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
    3a2a:	4b0c      	ldr	r3, [pc, #48]	; (3a5c <_write+0x48>)
    3a2c:	4698      	mov	r8, r3
    3a2e:	4f0c      	ldr	r7, [pc, #48]	; (3a60 <_write+0x4c>)
    3a30:	4643      	mov	r3, r8
    3a32:	6818      	ldr	r0, [r3, #0]
    3a34:	5d31      	ldrb	r1, [r6, r4]
    3a36:	683b      	ldr	r3, [r7, #0]
    3a38:	4798      	blx	r3
    3a3a:	2800      	cmp	r0, #0
    3a3c:	db08      	blt.n	3a50 <_write+0x3c>
			return -1;
		}
		++nChars;
    3a3e:	3401      	adds	r4, #1
	for (; len != 0; --len) {
    3a40:	42a5      	cmp	r5, r4
    3a42:	d1f5      	bne.n	3a30 <_write+0x1c>
    3a44:	e006      	b.n	3a54 <_write+0x40>
		return -1;
    3a46:	2401      	movs	r4, #1
    3a48:	4264      	negs	r4, r4
    3a4a:	e003      	b.n	3a54 <_write+0x40>
	for (; len != 0; --len) {
    3a4c:	0014      	movs	r4, r2
    3a4e:	e001      	b.n	3a54 <_write+0x40>
			return -1;
    3a50:	2401      	movs	r4, #1
    3a52:	4264      	negs	r4, r4
	}
	return nChars;
}
    3a54:	0020      	movs	r0, r4
    3a56:	bc04      	pop	{r2}
    3a58:	4690      	mov	r8, r2
    3a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3a5c:	20001100 	.word	0x20001100
    3a60:	200010fc 	.word	0x200010fc

00003a64 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    3a64:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    3a66:	4a06      	ldr	r2, [pc, #24]	; (3a80 <_sbrk+0x1c>)
    3a68:	6812      	ldr	r2, [r2, #0]
    3a6a:	2a00      	cmp	r2, #0
    3a6c:	d004      	beq.n	3a78 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    3a6e:	4a04      	ldr	r2, [pc, #16]	; (3a80 <_sbrk+0x1c>)
    3a70:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    3a72:	18c3      	adds	r3, r0, r3
    3a74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    3a76:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    3a78:	4902      	ldr	r1, [pc, #8]	; (3a84 <_sbrk+0x20>)
    3a7a:	4a01      	ldr	r2, [pc, #4]	; (3a80 <_sbrk+0x1c>)
    3a7c:	6011      	str	r1, [r2, #0]
    3a7e:	e7f6      	b.n	3a6e <_sbrk+0xa>
    3a80:	20000a78 	.word	0x20000a78
    3a84:	20004800 	.word	0x20004800

00003a88 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    3a88:	2001      	movs	r0, #1
    3a8a:	4240      	negs	r0, r0
    3a8c:	4770      	bx	lr

00003a8e <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    3a8e:	2380      	movs	r3, #128	; 0x80
    3a90:	019b      	lsls	r3, r3, #6
    3a92:	604b      	str	r3, [r1, #4]

	return 0;
}
    3a94:	2000      	movs	r0, #0
    3a96:	4770      	bx	lr

00003a98 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    3a98:	2001      	movs	r0, #1
    3a9a:	4770      	bx	lr

00003a9c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    3a9c:	2000      	movs	r0, #0
    3a9e:	4770      	bx	lr

00003aa0 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    3aa0:	b570      	push	{r4, r5, r6, lr}
    3aa2:	b082      	sub	sp, #8
    3aa4:	0005      	movs	r5, r0
    3aa6:	000e      	movs	r6, r1
	uint16_t temp = 0;
    3aa8:	2200      	movs	r2, #0
    3aaa:	466b      	mov	r3, sp
    3aac:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    3aae:	4c06      	ldr	r4, [pc, #24]	; (3ac8 <usart_serial_getchar+0x28>)
    3ab0:	466b      	mov	r3, sp
    3ab2:	1d99      	adds	r1, r3, #6
    3ab4:	0028      	movs	r0, r5
    3ab6:	47a0      	blx	r4
    3ab8:	2800      	cmp	r0, #0
    3aba:	d1f9      	bne.n	3ab0 <usart_serial_getchar+0x10>

	*c = temp;
    3abc:	466b      	mov	r3, sp
    3abe:	3306      	adds	r3, #6
    3ac0:	881b      	ldrh	r3, [r3, #0]
    3ac2:	7033      	strb	r3, [r6, #0]
}
    3ac4:	b002      	add	sp, #8
    3ac6:	bd70      	pop	{r4, r5, r6, pc}
    3ac8:	00002919 	.word	0x00002919

00003acc <usart_serial_putchar>:
{
    3acc:	b570      	push	{r4, r5, r6, lr}
    3ace:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    3ad0:	b28c      	uxth	r4, r1
    3ad2:	4e03      	ldr	r6, [pc, #12]	; (3ae0 <usart_serial_putchar+0x14>)
    3ad4:	0021      	movs	r1, r4
    3ad6:	0028      	movs	r0, r5
    3ad8:	47b0      	blx	r6
    3ada:	2800      	cmp	r0, #0
    3adc:	d1fa      	bne.n	3ad4 <usart_serial_putchar+0x8>
}
    3ade:	bd70      	pop	{r4, r5, r6, pc}
    3ae0:	000028ed 	.word	0x000028ed

00003ae4 <USART_HOST_ISR_VECT>:
#if SAMD || SAMR21 || SAML21 || SAMR30 || SAMR34 || SAMR35
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
    3ae4:	b510      	push	{r4, lr}
    3ae6:	b082      	sub	sp, #8
static inline enum status_code usart_serial_read_packet(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
	return usart_read_buffer_wait(module, rx_data, length);
    3ae8:	466b      	mov	r3, sp
    3aea:	1ddc      	adds	r4, r3, #7
    3aec:	2201      	movs	r2, #1
    3aee:	0021      	movs	r1, r4
    3af0:	480f      	ldr	r0, [pc, #60]	; (3b30 <USART_HOST_ISR_VECT+0x4c>)
    3af2:	4b10      	ldr	r3, [pc, #64]	; (3b34 <USART_HOST_ISR_VECT+0x50>)
    3af4:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
    3af6:	b672      	cpsid	i
    3af8:	f3bf 8f5f 	dmb	sy
#else
    usart_serial_read_packet(USART_HOST, &temp, 1);
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
    3afc:	2200      	movs	r2, #0
    3afe:	4b0e      	ldr	r3, [pc, #56]	; (3b38 <USART_HOST_ISR_VECT+0x54>)
    3b00:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */

	serial_rx_buf[serial_rx_buf_tail] = temp;
    3b02:	4b0e      	ldr	r3, [pc, #56]	; (3b3c <USART_HOST_ISR_VECT+0x58>)
    3b04:	781b      	ldrb	r3, [r3, #0]
    3b06:	7821      	ldrb	r1, [r4, #0]
    3b08:	4a0d      	ldr	r2, [pc, #52]	; (3b40 <USART_HOST_ISR_VECT+0x5c>)
    3b0a:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
    3b0c:	2b7f      	cmp	r3, #127	; 0x7f
    3b0e:	d00a      	beq.n	3b26 <USART_HOST_ISR_VECT+0x42>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
	} else {
		serial_rx_buf_tail++;
    3b10:	3301      	adds	r3, #1
    3b12:	4a0a      	ldr	r2, [pc, #40]	; (3b3c <USART_HOST_ISR_VECT+0x58>)
    3b14:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
    3b16:	2201      	movs	r2, #1
    3b18:	4b07      	ldr	r3, [pc, #28]	; (3b38 <USART_HOST_ISR_VECT+0x54>)
    3b1a:	701a      	strb	r2, [r3, #0]
    3b1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    3b20:	b662      	cpsie	i
}
    3b22:	b002      	add	sp, #8
    3b24:	bd10      	pop	{r4, pc}
		serial_rx_buf_tail = 0x00;
    3b26:	2200      	movs	r2, #0
    3b28:	4b04      	ldr	r3, [pc, #16]	; (3b3c <USART_HOST_ISR_VECT+0x58>)
    3b2a:	701a      	strb	r2, [r3, #0]
    3b2c:	e7f3      	b.n	3b16 <USART_HOST_ISR_VECT+0x32>
    3b2e:	46c0      	nop			; (mov r8, r8)
    3b30:	20000a7c 	.word	0x20000a7c
    3b34:	00002989 	.word	0x00002989
    3b38:	20000008 	.word	0x20000008
    3b3c:	20000b31 	.word	0x20000b31
    3b40:	20000ab0 	.word	0x20000ab0

00003b44 <sio2host_init>:
{
    3b44:	b5f0      	push	{r4, r5, r6, r7, lr}
    3b46:	b091      	sub	sp, #68	; 0x44
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    3b48:	2380      	movs	r3, #128	; 0x80
    3b4a:	05db      	lsls	r3, r3, #23
    3b4c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    3b4e:	2300      	movs	r3, #0
    3b50:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
    3b52:	22ff      	movs	r2, #255	; 0xff
    3b54:	4669      	mov	r1, sp
    3b56:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
    3b58:	2200      	movs	r2, #0
    3b5a:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    3b5c:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
    3b5e:	2401      	movs	r4, #1
    3b60:	2124      	movs	r1, #36	; 0x24
    3b62:	4668      	mov	r0, sp
    3b64:	5444      	strb	r4, [r0, r1]
	config->transmitter_enable = true;
    3b66:	3101      	adds	r1, #1
    3b68:	5444      	strb	r4, [r0, r1]
	config->clock_polarity_inverted = false;
    3b6a:	3101      	adds	r1, #1
    3b6c:	5443      	strb	r3, [r0, r1]
	config->use_external_clock = false;
    3b6e:	3101      	adds	r1, #1
    3b70:	5443      	strb	r3, [r0, r1]
	config->ext_clock_freq   = 0;
    3b72:	930a      	str	r3, [sp, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    3b74:	3105      	adds	r1, #5
    3b76:	5443      	strb	r3, [r0, r1]
	config->generator_source = GCLK_GENERATOR_0;
    3b78:	3101      	adds	r1, #1
    3b7a:	5443      	strb	r3, [r0, r1]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    3b7c:	9305      	str	r3, [sp, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    3b7e:	8203      	strh	r3, [r0, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    3b80:	76c3      	strb	r3, [r0, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    3b82:	7602      	strb	r2, [r0, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    3b84:	7702      	strb	r2, [r0, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    3b86:	7642      	strb	r2, [r0, #25]
	config->receive_pulse_length                    = 19;
    3b88:	2313      	movs	r3, #19
    3b8a:	7683      	strb	r3, [r0, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    3b8c:	7742      	strb	r2, [r0, #29]
	host_uart_config.mux_setting = HOST_SERCOM_MUX_SETTING;
    3b8e:	2380      	movs	r3, #128	; 0x80
    3b90:	035b      	lsls	r3, r3, #13
    3b92:	9303      	str	r3, [sp, #12]
	host_uart_config.pinmux_pad0 = HOST_SERCOM_PINMUX_PAD0;
    3b94:	4b2f      	ldr	r3, [pc, #188]	; (3c54 <sio2host_init+0x110>)
    3b96:	930c      	str	r3, [sp, #48]	; 0x30
	host_uart_config.pinmux_pad1 = HOST_SERCOM_PINMUX_PAD1;
    3b98:	4b2f      	ldr	r3, [pc, #188]	; (3c58 <sio2host_init+0x114>)
    3b9a:	930d      	str	r3, [sp, #52]	; 0x34
	host_uart_config.pinmux_pad2 = HOST_SERCOM_PINMUX_PAD2;
    3b9c:	2301      	movs	r3, #1
    3b9e:	425b      	negs	r3, r3
    3ba0:	930e      	str	r3, [sp, #56]	; 0x38
	host_uart_config.pinmux_pad3 = HOST_SERCOM_PINMUX_PAD3;
    3ba2:	930f      	str	r3, [sp, #60]	; 0x3c
	host_uart_config.baudrate    = USART_HOST_BAUDRATE;
    3ba4:	23e1      	movs	r3, #225	; 0xe1
    3ba6:	025b      	lsls	r3, r3, #9
    3ba8:	9308      	str	r3, [sp, #32]
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    3baa:	4d2c      	ldr	r5, [pc, #176]	; (3c5c <sio2host_init+0x118>)
    3bac:	4b2c      	ldr	r3, [pc, #176]	; (3c60 <sio2host_init+0x11c>)
    3bae:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    3bb0:	4a2c      	ldr	r2, [pc, #176]	; (3c64 <sio2host_init+0x120>)
    3bb2:	4b2d      	ldr	r3, [pc, #180]	; (3c68 <sio2host_init+0x124>)
    3bb4:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    3bb6:	4a2d      	ldr	r2, [pc, #180]	; (3c6c <sio2host_init+0x128>)
    3bb8:	4b2d      	ldr	r3, [pc, #180]	; (3c70 <sio2host_init+0x12c>)
    3bba:	601a      	str	r2, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    3bbc:	466a      	mov	r2, sp
    3bbe:	2184      	movs	r1, #132	; 0x84
    3bc0:	05c9      	lsls	r1, r1, #23
    3bc2:	0028      	movs	r0, r5
    3bc4:	4b2b      	ldr	r3, [pc, #172]	; (3c74 <sio2host_init+0x130>)
    3bc6:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    3bc8:	4f2b      	ldr	r7, [pc, #172]	; (3c78 <sio2host_init+0x134>)
    3bca:	683b      	ldr	r3, [r7, #0]
    3bcc:	6898      	ldr	r0, [r3, #8]
    3bce:	2100      	movs	r1, #0
    3bd0:	4e2a      	ldr	r6, [pc, #168]	; (3c7c <sio2host_init+0x138>)
    3bd2:	47b0      	blx	r6
	setbuf(stdin, NULL);
    3bd4:	683b      	ldr	r3, [r7, #0]
    3bd6:	6858      	ldr	r0, [r3, #4]
    3bd8:	2100      	movs	r1, #0
    3bda:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bdc:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    3bde:	0030      	movs	r0, r6
    3be0:	4b27      	ldr	r3, [pc, #156]	; (3c80 <sio2host_init+0x13c>)
    3be2:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3be4:	231f      	movs	r3, #31
    3be6:	4018      	ands	r0, r3
    3be8:	4084      	lsls	r4, r0
    3bea:	4b26      	ldr	r3, [pc, #152]	; (3c84 <sio2host_init+0x140>)
    3bec:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bee:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3bf0:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d1fc      	bne.n	3bf0 <sio2host_init+0xac>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    3bf6:	6833      	ldr	r3, [r6, #0]
    3bf8:	2202      	movs	r2, #2
    3bfa:	4313      	orrs	r3, r2
    3bfc:	6033      	str	r3, [r6, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3bfe:	4b17      	ldr	r3, [pc, #92]	; (3c5c <sio2host_init+0x118>)
    3c00:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3c02:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3c04:	2a00      	cmp	r2, #0
    3c06:	d1fc      	bne.n	3c02 <sio2host_init+0xbe>
			module->receiver_enabled = true;
			break;

		case USART_TRANSCEIVER_TX:
			/* Enable TX */
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_TXEN;
    3c08:	6859      	ldr	r1, [r3, #4]
    3c0a:	2280      	movs	r2, #128	; 0x80
    3c0c:	0252      	lsls	r2, r2, #9
    3c0e:	430a      	orrs	r2, r1
    3c10:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = true;
    3c12:	2101      	movs	r1, #1
    3c14:	4a11      	ldr	r2, [pc, #68]	; (3c5c <sio2host_init+0x118>)
    3c16:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3c18:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3c1a:	2a00      	cmp	r2, #0
    3c1c:	d1fc      	bne.n	3c18 <sio2host_init+0xd4>
	return (usart_hw->SYNCBUSY.reg);
    3c1e:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3c20:	2a00      	cmp	r2, #0
    3c22:	d1fc      	bne.n	3c1e <sio2host_init+0xda>
			usart_hw->CTRLB.reg |= SERCOM_USART_CTRLB_RXEN;
    3c24:	6859      	ldr	r1, [r3, #4]
    3c26:	2280      	movs	r2, #128	; 0x80
    3c28:	0292      	lsls	r2, r2, #10
    3c2a:	430a      	orrs	r2, r1
    3c2c:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = true;
    3c2e:	2101      	movs	r1, #1
    3c30:	4a0a      	ldr	r2, [pc, #40]	; (3c5c <sio2host_init+0x118>)
    3c32:	7191      	strb	r1, [r2, #6]
	return (usart_hw->SYNCBUSY.reg);
    3c34:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3c36:	2a00      	cmp	r2, #0
    3c38:	d1fc      	bne.n	3c34 <sio2host_init+0xf0>
	USART_HOST_RX_ISR_ENABLE();
    3c3a:	4913      	ldr	r1, [pc, #76]	; (3c88 <sio2host_init+0x144>)
    3c3c:	2000      	movs	r0, #0
    3c3e:	4b13      	ldr	r3, [pc, #76]	; (3c8c <sio2host_init+0x148>)
    3c40:	4798      	blx	r3
    3c42:	2204      	movs	r2, #4
    3c44:	2384      	movs	r3, #132	; 0x84
    3c46:	05db      	lsls	r3, r3, #23
    3c48:	759a      	strb	r2, [r3, #22]
    3c4a:	32fc      	adds	r2, #252	; 0xfc
    3c4c:	4b0d      	ldr	r3, [pc, #52]	; (3c84 <sio2host_init+0x140>)
    3c4e:	601a      	str	r2, [r3, #0]
}
    3c50:	b011      	add	sp, #68	; 0x44
    3c52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3c54:	00040003 	.word	0x00040003
    3c58:	00050003 	.word	0x00050003
    3c5c:	20000a7c 	.word	0x20000a7c
    3c60:	20001100 	.word	0x20001100
    3c64:	00003acd 	.word	0x00003acd
    3c68:	200010fc 	.word	0x200010fc
    3c6c:	00003aa1 	.word	0x00003aa1
    3c70:	200010f8 	.word	0x200010f8
    3c74:	00002581 	.word	0x00002581
    3c78:	20000068 	.word	0x20000068
    3c7c:	0001617d 	.word	0x0001617d
    3c80:	00002121 	.word	0x00002121
    3c84:	e000e100 	.word	0xe000e100
    3c88:	00003ae5 	.word	0x00003ae5
    3c8c:	000020e5 	.word	0x000020e5

00003c90 <sio2host_deinit>:
{
    3c90:	b570      	push	{r4, r5, r6, lr}
	SercomUsart *const usart_hw = &(module->hw->USART);
    3c92:	4d15      	ldr	r5, [pc, #84]	; (3ce8 <sio2host_deinit+0x58>)
    3c94:	682c      	ldr	r4, [r5, #0]
	system_interrupt_disable(_sercom_get_interrupt_vector(module->hw));
    3c96:	0020      	movs	r0, r4
    3c98:	4b14      	ldr	r3, [pc, #80]	; (3cec <sio2host_deinit+0x5c>)
    3c9a:	4798      	blx	r3
	NVIC->ICER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    3c9c:	231f      	movs	r3, #31
    3c9e:	4018      	ands	r0, r3
    3ca0:	3b1e      	subs	r3, #30
    3ca2:	4083      	lsls	r3, r0
    3ca4:	2280      	movs	r2, #128	; 0x80
    3ca6:	4912      	ldr	r1, [pc, #72]	; (3cf0 <sio2host_deinit+0x60>)
    3ca8:	508b      	str	r3, [r1, r2]
	SercomUsart *const usart_hw = &(module->hw->USART);
    3caa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    3cac:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
    3cae:	2b00      	cmp	r3, #0
    3cb0:	d1fc      	bne.n	3cac <sio2host_deinit+0x1c>
	usart_hw->CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
    3cb2:	6823      	ldr	r3, [r4, #0]
    3cb4:	2202      	movs	r2, #2
    3cb6:	4393      	bics	r3, r2
    3cb8:	6023      	str	r3, [r4, #0]
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    3cba:	4b0b      	ldr	r3, [pc, #44]	; (3ce8 <sio2host_deinit+0x58>)
    3cbc:	681b      	ldr	r3, [r3, #0]
	return (usart_hw->SYNCBUSY.reg);
    3cbe:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3cc0:	2a00      	cmp	r2, #0
    3cc2:	d1fc      	bne.n	3cbe <sio2host_deinit+0x2e>
			module->receiver_enabled = false;
			break;

		case USART_TRANSCEIVER_TX:
			/* Disable TX */
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_TXEN;
    3cc4:	685a      	ldr	r2, [r3, #4]
    3cc6:	490b      	ldr	r1, [pc, #44]	; (3cf4 <sio2host_deinit+0x64>)
    3cc8:	400a      	ands	r2, r1
    3cca:	605a      	str	r2, [r3, #4]
			module->transmitter_enabled = false;
    3ccc:	2100      	movs	r1, #0
    3cce:	4a06      	ldr	r2, [pc, #24]	; (3ce8 <sio2host_deinit+0x58>)
    3cd0:	71d1      	strb	r1, [r2, #7]
	return (usart_hw->SYNCBUSY.reg);
    3cd2:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    3cd4:	2a00      	cmp	r2, #0
    3cd6:	d1fc      	bne.n	3cd2 <sio2host_deinit+0x42>
			usart_hw->CTRLB.reg &= ~SERCOM_USART_CTRLB_RXEN;
    3cd8:	685a      	ldr	r2, [r3, #4]
    3cda:	4907      	ldr	r1, [pc, #28]	; (3cf8 <sio2host_deinit+0x68>)
    3cdc:	400a      	ands	r2, r1
    3cde:	605a      	str	r2, [r3, #4]
			module->receiver_enabled = false;
    3ce0:	2200      	movs	r2, #0
    3ce2:	4b01      	ldr	r3, [pc, #4]	; (3ce8 <sio2host_deinit+0x58>)
    3ce4:	719a      	strb	r2, [r3, #6]
}
    3ce6:	bd70      	pop	{r4, r5, r6, pc}
    3ce8:	20000a7c 	.word	0x20000a7c
    3cec:	00002121 	.word	0x00002121
    3cf0:	e000e100 	.word	0xe000e100
    3cf4:	fffeffff 	.word	0xfffeffff
    3cf8:	fffdffff 	.word	0xfffdffff

00003cfc <sio2host_rx>:
{
    3cfc:	b570      	push	{r4, r5, r6, lr}
    3cfe:	0002      	movs	r2, r0
	if(serial_rx_buf_tail >= serial_rx_buf_head)
    3d00:	4b1f      	ldr	r3, [pc, #124]	; (3d80 <sio2host_rx+0x84>)
    3d02:	781c      	ldrb	r4, [r3, #0]
    3d04:	4b1f      	ldr	r3, [pc, #124]	; (3d84 <sio2host_rx+0x88>)
    3d06:	781b      	ldrb	r3, [r3, #0]
    3d08:	429c      	cmp	r4, r3
    3d0a:	d319      	bcc.n	3d40 <sio2host_rx+0x44>
		serial_rx_count = serial_rx_buf_tail - serial_rx_buf_head;
    3d0c:	1ae3      	subs	r3, r4, r3
    3d0e:	481e      	ldr	r0, [pc, #120]	; (3d88 <sio2host_rx+0x8c>)
    3d10:	7003      	strb	r3, [r0, #0]
	if (0 == serial_rx_count) {
    3d12:	4b1d      	ldr	r3, [pc, #116]	; (3d88 <sio2host_rx+0x8c>)
    3d14:	7818      	ldrb	r0, [r3, #0]
    3d16:	2800      	cmp	r0, #0
    3d18:	d031      	beq.n	3d7e <sio2host_rx+0x82>
	if (SERIAL_RX_BUF_SIZE_HOST <= serial_rx_count) {
    3d1a:	b243      	sxtb	r3, r0
    3d1c:	2b00      	cmp	r3, #0
    3d1e:	db15      	blt.n	3d4c <sio2host_rx+0x50>
    3d20:	1c03      	adds	r3, r0, #0
    3d22:	4288      	cmp	r0, r1
    3d24:	d900      	bls.n	3d28 <sio2host_rx+0x2c>
    3d26:	1c0b      	adds	r3, r1, #0
    3d28:	b2d8      	uxtb	r0, r3
	while (max_length > 0) {
    3d2a:	2800      	cmp	r0, #0
    3d2c:	d027      	beq.n	3d7e <sio2host_rx+0x82>
    3d2e:	4b15      	ldr	r3, [pc, #84]	; (3d84 <sio2host_rx+0x88>)
    3d30:	781b      	ldrb	r3, [r3, #0]
    3d32:	1e44      	subs	r4, r0, #1
    3d34:	b2e4      	uxtb	r4, r4
    3d36:	3401      	adds	r4, #1
    3d38:	1914      	adds	r4, r2, r4
		*data = serial_rx_buf[serial_rx_buf_head];
    3d3a:	4d14      	ldr	r5, [pc, #80]	; (3d8c <sio2host_rx+0x90>)
			serial_rx_buf_head = 0;
    3d3c:	2600      	movs	r6, #0
    3d3e:	e014      	b.n	3d6a <sio2host_rx+0x6e>
		serial_rx_count = serial_rx_buf_tail + (SERIAL_RX_BUF_SIZE_HOST - serial_rx_buf_head);
    3d40:	0020      	movs	r0, r4
    3d42:	3880      	subs	r0, #128	; 0x80
    3d44:	1ac3      	subs	r3, r0, r3
    3d46:	4810      	ldr	r0, [pc, #64]	; (3d88 <sio2host_rx+0x8c>)
    3d48:	7003      	strb	r3, [r0, #0]
    3d4a:	e7e2      	b.n	3d12 <sio2host_rx+0x16>
		serial_rx_buf_head = serial_rx_buf_tail;
    3d4c:	4b0d      	ldr	r3, [pc, #52]	; (3d84 <sio2host_rx+0x88>)
    3d4e:	701c      	strb	r4, [r3, #0]
		serial_rx_count = SERIAL_RX_BUF_SIZE_HOST;
    3d50:	2080      	movs	r0, #128	; 0x80
    3d52:	4b0d      	ldr	r3, [pc, #52]	; (3d88 <sio2host_rx+0x8c>)
    3d54:	7018      	strb	r0, [r3, #0]
		if (SERIAL_RX_BUF_SIZE_HOST <= max_length) {
    3d56:	b24b      	sxtb	r3, r1
    3d58:	2b00      	cmp	r3, #0
    3d5a:	db01      	blt.n	3d60 <sio2host_rx+0x64>
    3d5c:	0008      	movs	r0, r1
    3d5e:	e7e4      	b.n	3d2a <sio2host_rx+0x2e>
			max_length = SERIAL_RX_BUF_SIZE_HOST;
    3d60:	2080      	movs	r0, #128	; 0x80
    3d62:	e7e4      	b.n	3d2e <sio2host_rx+0x32>
			serial_rx_buf_head = 0;
    3d64:	0033      	movs	r3, r6
	while (max_length > 0) {
    3d66:	4294      	cmp	r4, r2
    3d68:	d007      	beq.n	3d7a <sio2host_rx+0x7e>
		*data = serial_rx_buf[serial_rx_buf_head];
    3d6a:	5ce9      	ldrb	r1, [r5, r3]
    3d6c:	7011      	strb	r1, [r2, #0]
		data++;
    3d6e:	3201      	adds	r2, #1
		if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_head) {
    3d70:	2b7f      	cmp	r3, #127	; 0x7f
    3d72:	d0f7      	beq.n	3d64 <sio2host_rx+0x68>
			serial_rx_buf_head++;
    3d74:	3301      	adds	r3, #1
    3d76:	b2db      	uxtb	r3, r3
    3d78:	e7f5      	b.n	3d66 <sio2host_rx+0x6a>
    3d7a:	4a02      	ldr	r2, [pc, #8]	; (3d84 <sio2host_rx+0x88>)
    3d7c:	7013      	strb	r3, [r2, #0]
}
    3d7e:	bd70      	pop	{r4, r5, r6, pc}
    3d80:	20000b31 	.word	0x20000b31
    3d84:	20000b30 	.word	0x20000b30
    3d88:	20000b32 	.word	0x20000b32
    3d8c:	20000ab0 	.word	0x20000ab0

00003d90 <adc_complete_callback>:
//! [job_complete_callback]
volatile bool adc_read_done = false;

void adc_complete_callback(
struct adc_module *const module)
{
    3d90:	b510      	push	{r4, lr}
	adc_read_done = true;
    3d92:	2201      	movs	r2, #1
    3d94:	4b02      	ldr	r3, [pc, #8]	; (3da0 <adc_complete_callback+0x10>)
    3d96:	701a      	strb	r2, [r3, #0]
	printf("ADC Callback!!!\r\n");
    3d98:	4802      	ldr	r0, [pc, #8]	; (3da4 <adc_complete_callback+0x14>)
    3d9a:	4b03      	ldr	r3, [pc, #12]	; (3da8 <adc_complete_callback+0x18>)
    3d9c:	4798      	blx	r3
}
    3d9e:	bd10      	pop	{r4, pc}
    3da0:	20000b33 	.word	0x20000b33
    3da4:	0001ca20 	.word	0x0001ca20
    3da8:	00016121 	.word	0x00016121

00003dac <appPostTask>:
 \brief      App Post Task
 \param[in]  Id of the application to be posted
 ************************************************************************/

void appPostTask(AppTaskIds_t id)
{
    3dac:	b510      	push	{r4, lr}
    3dae:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    3db0:	4b07      	ldr	r3, [pc, #28]	; (3dd0 <appPostTask+0x24>)
    3db2:	4798      	blx	r3
    appTaskFlags |= (1 << id);
    3db4:	4907      	ldr	r1, [pc, #28]	; (3dd4 <appPostTask+0x28>)
    3db6:	780b      	ldrb	r3, [r1, #0]
    3db8:	2201      	movs	r2, #1
    3dba:	40a2      	lsls	r2, r4
    3dbc:	4313      	orrs	r3, r2
    3dbe:	b2db      	uxtb	r3, r3
    3dc0:	700b      	strb	r3, [r1, #0]
    ATOMIC_SECTION_EXIT
    3dc2:	4b05      	ldr	r3, [pc, #20]	; (3dd8 <appPostTask+0x2c>)
    3dc4:	4798      	blx	r3

    /* Also post a APP task to the system */
    SYSTEM_PostTask(APP_TASK_ID);
    3dc6:	2010      	movs	r0, #16
    3dc8:	4b04      	ldr	r3, [pc, #16]	; (3ddc <appPostTask+0x30>)
    3dca:	4798      	blx	r3
}
    3dcc:	bd10      	pop	{r4, pc}
    3dce:	46c0      	nop			; (mov r8, r8)
    3dd0:	00005615 	.word	0x00005615
    3dd4:	20000b34 	.word	0x20000b34
    3dd8:	00005621 	.word	0x00005621
    3ddc:	0000c555 	.word	0x0000c555

00003de0 <demoTimerCb>:
{
    3de0:	b510      	push	{r4, lr}
    3de2:	b082      	sub	sp, #8
    printf("%d..",count);
    3de4:	4c2b      	ldr	r4, [pc, #172]	; (3e94 <demoTimerCb+0xb4>)
    3de6:	7821      	ldrb	r1, [r4, #0]
    3de8:	b2c9      	uxtb	r1, r1
    3dea:	482b      	ldr	r0, [pc, #172]	; (3e98 <demoTimerCb+0xb8>)
    3dec:	4b2b      	ldr	r3, [pc, #172]	; (3e9c <demoTimerCb+0xbc>)
    3dee:	4798      	blx	r3
    count--;
    3df0:	7823      	ldrb	r3, [r4, #0]
    3df2:	3b01      	subs	r3, #1
    3df4:	b2db      	uxtb	r3, r3
    3df6:	7023      	strb	r3, [r4, #0]
	startReceiving = false;
    3df8:	2200      	movs	r2, #0
    3dfa:	4b29      	ldr	r3, [pc, #164]	; (3ea0 <demoTimerCb+0xc0>)
    3dfc:	701a      	strb	r2, [r3, #0]
    sio2host_rx(rxchar,10);
    3dfe:	4c29      	ldr	r4, [pc, #164]	; (3ea4 <demoTimerCb+0xc4>)
    3e00:	210a      	movs	r1, #10
    3e02:	0020      	movs	r0, r4
    3e04:	4b28      	ldr	r3, [pc, #160]	; (3ea8 <demoTimerCb+0xc8>)
    3e06:	4798      	blx	r3
    3e08:	0023      	movs	r3, r4
    3e0a:	0020      	movs	r0, r4
    3e0c:	300b      	adds	r0, #11
    3e0e:	e002      	b.n	3e16 <demoTimerCb+0x36>
    3e10:	3301      	adds	r3, #1
    for(i = 0;i<=10;i++)
    3e12:	4283      	cmp	r3, r0
    3e14:	d006      	beq.n	3e24 <demoTimerCb+0x44>
        if(rxchar[i] != 13 && rxchar[i] != 10)
    3e16:	781c      	ldrb	r4, [r3, #0]
    3e18:	2c0d      	cmp	r4, #13
    3e1a:	d0f9      	beq.n	3e10 <demoTimerCb+0x30>
    3e1c:	2c0a      	cmp	r4, #10
    3e1e:	d0f7      	beq.n	3e10 <demoTimerCb+0x30>
            rxdata = rxchar[i];
    3e20:	b264      	sxtb	r4, r4
            break;
    3e22:	e000      	b.n	3e26 <demoTimerCb+0x46>
    int8_t rxdata = 0;
    3e24:	2400      	movs	r4, #0
    if(!count)
    3e26:	4b1b      	ldr	r3, [pc, #108]	; (3e94 <demoTimerCb+0xb4>)
    3e28:	781b      	ldrb	r3, [r3, #0]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d00d      	beq.n	3e4a <demoTimerCb+0x6a>
    if(count > 0 && (!rxdata))
    3e2e:	4b19      	ldr	r3, [pc, #100]	; (3e94 <demoTimerCb+0xb4>)
    3e30:	781b      	ldrb	r3, [r3, #0]
    3e32:	2b00      	cmp	r3, #0
    3e34:	d017      	beq.n	3e66 <demoTimerCb+0x86>
    3e36:	2c00      	cmp	r4, #0
    3e38:	d00b      	beq.n	3e52 <demoTimerCb+0x72>
    else if(count == 0 && (!rxdata))
    3e3a:	4b16      	ldr	r3, [pc, #88]	; (3e94 <demoTimerCb+0xb4>)
    3e3c:	781b      	ldrb	r3, [r3, #0]
    3e3e:	2b00      	cmp	r3, #0
    3e40:	d017      	beq.n	3e72 <demoTimerCb+0x92>
    else if(rxdata)
    3e42:	2c00      	cmp	r4, #0
    3e44:	d115      	bne.n	3e72 <demoTimerCb+0x92>
}
    3e46:	b002      	add	sp, #8
    3e48:	bd10      	pop	{r4, pc}
        printf("\r\n");
    3e4a:	4818      	ldr	r0, [pc, #96]	; (3eac <demoTimerCb+0xcc>)
    3e4c:	4b18      	ldr	r3, [pc, #96]	; (3eb0 <demoTimerCb+0xd0>)
    3e4e:	4798      	blx	r3
    3e50:	e7ed      	b.n	3e2e <demoTimerCb+0x4e>
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    3e52:	4b18      	ldr	r3, [pc, #96]	; (3eb4 <demoTimerCb+0xd4>)
    3e54:	7818      	ldrb	r0, [r3, #0]
    3e56:	2300      	movs	r3, #0
    3e58:	9300      	str	r3, [sp, #0]
    3e5a:	4b17      	ldr	r3, [pc, #92]	; (3eb8 <demoTimerCb+0xd8>)
    3e5c:	2200      	movs	r2, #0
    3e5e:	4917      	ldr	r1, [pc, #92]	; (3ebc <demoTimerCb+0xdc>)
    3e60:	4c17      	ldr	r4, [pc, #92]	; (3ec0 <demoTimerCb+0xe0>)
    3e62:	47a0      	blx	r4
    3e64:	e7ef      	b.n	3e46 <demoTimerCb+0x66>
    else if(count == 0 && (!rxdata))
    3e66:	4b0b      	ldr	r3, [pc, #44]	; (3e94 <demoTimerCb+0xb4>)
    3e68:	781b      	ldrb	r3, [r3, #0]
    3e6a:	2b00      	cmp	r3, #0
    3e6c:	d1e9      	bne.n	3e42 <demoTimerCb+0x62>
    3e6e:	2c00      	cmp	r4, #0
    3e70:	d009      	beq.n	3e86 <demoTimerCb+0xa6>
        printf("\r\n");
    3e72:	480e      	ldr	r0, [pc, #56]	; (3eac <demoTimerCb+0xcc>)
    3e74:	4b0e      	ldr	r3, [pc, #56]	; (3eb0 <demoTimerCb+0xd0>)
    3e76:	4798      	blx	r3
		appTaskState = DEMO_CERT_APP_STATE;
    3e78:	2201      	movs	r2, #1
    3e7a:	4b12      	ldr	r3, [pc, #72]	; (3ec4 <demoTimerCb+0xe4>)
    3e7c:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    3e7e:	2000      	movs	r0, #0
    3e80:	4b11      	ldr	r3, [pc, #68]	; (3ec8 <demoTimerCb+0xe8>)
    3e82:	4798      	blx	r3
}
    3e84:	e7df      	b.n	3e46 <demoTimerCb+0x66>
		appTaskState = RESTORE_BAND_STATE;
    3e86:	2200      	movs	r2, #0
    3e88:	4b0e      	ldr	r3, [pc, #56]	; (3ec4 <demoTimerCb+0xe4>)
    3e8a:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    3e8c:	2000      	movs	r0, #0
    3e8e:	4b0e      	ldr	r3, [pc, #56]	; (3ec8 <demoTimerCb+0xe8>)
    3e90:	4798      	blx	r3
    3e92:	e7d8      	b.n	3e46 <demoTimerCb+0x66>
    3e94:	20000016 	.word	0x20000016
    3e98:	0001ca98 	.word	0x0001ca98
    3e9c:	0001605d 	.word	0x0001605d
    3ea0:	20000b63 	.word	0x20000b63
    3ea4:	20000b58 	.word	0x20000b58
    3ea8:	00003cfd 	.word	0x00003cfd
    3eac:	0001cc40 	.word	0x0001cc40
    3eb0:	00016121 	.word	0x00016121
    3eb4:	2000005f 	.word	0x2000005f
    3eb8:	00003de1 	.word	0x00003de1
    3ebc:	000f4240 	.word	0x000f4240
    3ec0:	0000bf29 	.word	0x0000bf29
    3ec4:	20000b35 	.word	0x20000b35
    3ec8:	00003dad 	.word	0x00003dad

00003ecc <demo_appdata_callback>:
{
    3ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (LORAWAN_EVT_RX_DATA_AVAILABLE == appdata->evt)
    3ece:	780b      	ldrb	r3, [r1, #0]
    3ed0:	2b02      	cmp	r3, #2
    3ed2:	d00f      	beq.n	3ef4 <demo_appdata_callback+0x28>
    else if(LORAWAN_EVT_TRANSACTION_COMPLETE == appdata->evt)
    3ed4:	2b04      	cmp	r3, #4
    3ed6:	d100      	bne.n	3eda <demo_appdata_callback+0xe>
    3ed8:	e0ae      	b.n	4038 <demo_appdata_callback+0x16c>
    SwTimerStop(lTimerId);
    3eda:	4b9c      	ldr	r3, [pc, #624]	; (414c <demo_appdata_callback+0x280>)
    3edc:	7818      	ldrb	r0, [r3, #0]
    3ede:	4b9c      	ldr	r3, [pc, #624]	; (4150 <demo_appdata_callback+0x284>)
    3ee0:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    3ee2:	499c      	ldr	r1, [pc, #624]	; (4154 <demo_appdata_callback+0x288>)
    3ee4:	2003      	movs	r0, #3
    3ee6:	4b9c      	ldr	r3, [pc, #624]	; (4158 <demo_appdata_callback+0x28c>)
    3ee8:	4798      	blx	r3
        set_LED_data(LED_AMBER,&on);
    3eea:	499c      	ldr	r1, [pc, #624]	; (415c <demo_appdata_callback+0x290>)
    3eec:	2002      	movs	r0, #2
    3eee:	4b9a      	ldr	r3, [pc, #616]	; (4158 <demo_appdata_callback+0x28c>)
    3ef0:	4798      	blx	r3
}
    3ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = appdata->param.rxData.status;
    3ef4:	7b4c      	ldrb	r4, [r1, #13]
        switch(status)
    3ef6:	2c1e      	cmp	r4, #30
    3ef8:	d900      	bls.n	3efc <demo_appdata_callback+0x30>
    3efa:	e099      	b.n	4030 <demo_appdata_callback+0x164>
    3efc:	00a3      	lsls	r3, r4, #2
    3efe:	4a98      	ldr	r2, [pc, #608]	; (4160 <demo_appdata_callback+0x294>)
    3f00:	58d3      	ldr	r3, [r2, r3]
    3f02:	469f      	mov	pc, r3
    uint8_t dataLength = appdata->param.rxData.dataLength;
    3f04:	7b0e      	ldrb	r6, [r1, #12]
    if((dataLength > 0U) && (NULL != pData))
    3f06:	2e00      	cmp	r6, #0
    3f08:	d022      	beq.n	3f50 <demo_appdata_callback+0x84>
    uint8_t *pData = appdata->param.rxData.pData;
    3f0a:	688f      	ldr	r7, [r1, #8]
    if((dataLength > 0U) && (NULL != pData))
    3f0c:	2f00      	cmp	r7, #0
    3f0e:	d01f      	beq.n	3f50 <demo_appdata_callback+0x84>
    uint32_t devAddress = appdata->param.rxData.devAddr;
    3f10:	684d      	ldr	r5, [r1, #4]
        printf("*** Received DL Data ***\n\r");
    3f12:	4894      	ldr	r0, [pc, #592]	; (4164 <demo_appdata_callback+0x298>)
    3f14:	4c94      	ldr	r4, [pc, #592]	; (4168 <demo_appdata_callback+0x29c>)
    3f16:	47a0      	blx	r4
        printf("\nFrame Received at port %d\n\r",pData[0]);
    3f18:	7839      	ldrb	r1, [r7, #0]
    3f1a:	4894      	ldr	r0, [pc, #592]	; (416c <demo_appdata_callback+0x2a0>)
    3f1c:	47a0      	blx	r4
        printf("\nFrame Length - %d\n\r",dataLength);
    3f1e:	0031      	movs	r1, r6
    3f20:	4893      	ldr	r0, [pc, #588]	; (4170 <demo_appdata_callback+0x2a4>)
    3f22:	47a0      	blx	r4
        printf("\nAddress - 0x%lx\n\r", devAddress);
    3f24:	0029      	movs	r1, r5
    3f26:	4893      	ldr	r0, [pc, #588]	; (4174 <demo_appdata_callback+0x2a8>)
    3f28:	47a0      	blx	r4
        printf ("\nPayload: ");
    3f2a:	4893      	ldr	r0, [pc, #588]	; (4178 <demo_appdata_callback+0x2ac>)
    3f2c:	47a0      	blx	r4
        for (uint8_t i =0; i<dataLength - 1; i++)
    3f2e:	3e01      	subs	r6, #1
    3f30:	2e00      	cmp	r6, #0
    3f32:	dd09      	ble.n	3f48 <demo_appdata_callback+0x7c>
    3f34:	2400      	movs	r4, #0
            printf("%x",pData[i+1]);
    3f36:	4d8c      	ldr	r5, [pc, #560]	; (4168 <demo_appdata_callback+0x29c>)
    3f38:	193b      	adds	r3, r7, r4
    3f3a:	7859      	ldrb	r1, [r3, #1]
    3f3c:	488f      	ldr	r0, [pc, #572]	; (417c <demo_appdata_callback+0x2b0>)
    3f3e:	47a8      	blx	r5
        for (uint8_t i =0; i<dataLength - 1; i++)
    3f40:	3401      	adds	r4, #1
    3f42:	b2e4      	uxtb	r4, r4
    3f44:	42b4      	cmp	r4, r6
    3f46:	dbf7      	blt.n	3f38 <demo_appdata_callback+0x6c>
        printf("\r\n*************************\r\n");
    3f48:	488d      	ldr	r0, [pc, #564]	; (4180 <demo_appdata_callback+0x2b4>)
    3f4a:	4b8e      	ldr	r3, [pc, #568]	; (4184 <demo_appdata_callback+0x2b8>)
    3f4c:	4798      	blx	r3
    3f4e:	e002      	b.n	3f56 <demo_appdata_callback+0x8a>
        printf("Received ACK for Confirmed data\r\n");
    3f50:	488d      	ldr	r0, [pc, #564]	; (4188 <demo_appdata_callback+0x2bc>)
    3f52:	4b8c      	ldr	r3, [pc, #560]	; (4184 <demo_appdata_callback+0x2b8>)
    3f54:	4798      	blx	r3
    SwTimerStop(lTimerId);
    3f56:	4b7d      	ldr	r3, [pc, #500]	; (414c <demo_appdata_callback+0x280>)
    3f58:	7818      	ldrb	r0, [r3, #0]
    3f5a:	4b7d      	ldr	r3, [pc, #500]	; (4150 <demo_appdata_callback+0x284>)
    3f5c:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    3f5e:	497d      	ldr	r1, [pc, #500]	; (4154 <demo_appdata_callback+0x288>)
    3f60:	2003      	movs	r0, #3
    3f62:	4b7d      	ldr	r3, [pc, #500]	; (4158 <demo_appdata_callback+0x28c>)
    3f64:	4798      	blx	r3
    3f66:	e7c4      	b.n	3ef2 <demo_appdata_callback+0x26>
                printf("\n\rRADIO_NO_DATA \n\r");
    3f68:	4888      	ldr	r0, [pc, #544]	; (418c <demo_appdata_callback+0x2c0>)
    3f6a:	4b7f      	ldr	r3, [pc, #508]	; (4168 <demo_appdata_callback+0x29c>)
    3f6c:	4798      	blx	r3
            break;
    3f6e:	e7b4      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    3f70:	4887      	ldr	r0, [pc, #540]	; (4190 <demo_appdata_callback+0x2c4>)
    3f72:	4b7d      	ldr	r3, [pc, #500]	; (4168 <demo_appdata_callback+0x29c>)
    3f74:	4798      	blx	r3
            break;
    3f76:	e7b0      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    3f78:	4886      	ldr	r0, [pc, #536]	; (4194 <demo_appdata_callback+0x2c8>)
    3f7a:	4b7b      	ldr	r3, [pc, #492]	; (4168 <demo_appdata_callback+0x29c>)
    3f7c:	4798      	blx	r3
            break;
    3f7e:	e7ac      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRADIO_BUSY \n\r");
    3f80:	4885      	ldr	r0, [pc, #532]	; (4198 <demo_appdata_callback+0x2cc>)
    3f82:	4b79      	ldr	r3, [pc, #484]	; (4168 <demo_appdata_callback+0x29c>)
    3f84:	4798      	blx	r3
            break;
    3f86:	e7a8      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    3f88:	4884      	ldr	r0, [pc, #528]	; (419c <demo_appdata_callback+0x2d0>)
    3f8a:	4b77      	ldr	r3, [pc, #476]	; (4168 <demo_appdata_callback+0x29c>)
    3f8c:	4798      	blx	r3
            break;
    3f8e:	e7a4      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    3f90:	4883      	ldr	r0, [pc, #524]	; (41a0 <demo_appdata_callback+0x2d4>)
    3f92:	4b75      	ldr	r3, [pc, #468]	; (4168 <demo_appdata_callback+0x29c>)
    3f94:	4798      	blx	r3
            break;
    3f96:	e7a0      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    3f98:	4882      	ldr	r0, [pc, #520]	; (41a4 <demo_appdata_callback+0x2d8>)
    3f9a:	4b73      	ldr	r3, [pc, #460]	; (4168 <demo_appdata_callback+0x29c>)
    3f9c:	4798      	blx	r3
            break;
    3f9e:	e79c      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rNWK_NOT_JOINED \n\r");
    3fa0:	4881      	ldr	r0, [pc, #516]	; (41a8 <demo_appdata_callback+0x2dc>)
    3fa2:	4b71      	ldr	r3, [pc, #452]	; (4168 <demo_appdata_callback+0x29c>)
    3fa4:	4798      	blx	r3
            break;
    3fa6:	e798      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rINVALID_PARAMETER \n\r");
    3fa8:	4880      	ldr	r0, [pc, #512]	; (41ac <demo_appdata_callback+0x2e0>)
    3faa:	4b6f      	ldr	r3, [pc, #444]	; (4168 <demo_appdata_callback+0x29c>)
    3fac:	4798      	blx	r3
            break;
    3fae:	e794      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    3fb0:	487f      	ldr	r0, [pc, #508]	; (41b0 <demo_appdata_callback+0x2e4>)
    3fb2:	4b6d      	ldr	r3, [pc, #436]	; (4168 <demo_appdata_callback+0x29c>)
    3fb4:	4798      	blx	r3
            break;
    3fb6:	e790      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    3fb8:	487e      	ldr	r0, [pc, #504]	; (41b4 <demo_appdata_callback+0x2e8>)
    3fba:	4b6b      	ldr	r3, [pc, #428]	; (4168 <demo_appdata_callback+0x29c>)
    3fbc:	4798      	blx	r3
            break;
    3fbe:	e78c      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    3fc0:	487d      	ldr	r0, [pc, #500]	; (41b8 <demo_appdata_callback+0x2ec>)
    3fc2:	4b69      	ldr	r3, [pc, #420]	; (4168 <demo_appdata_callback+0x29c>)
    3fc4:	4798      	blx	r3
            break;
    3fc6:	e788      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    3fc8:	487c      	ldr	r0, [pc, #496]	; (41bc <demo_appdata_callback+0x2f0>)
    3fca:	4b67      	ldr	r3, [pc, #412]	; (4168 <demo_appdata_callback+0x29c>)
    3fcc:	4798      	blx	r3
            break;
    3fce:	e784      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rMAC_PAUSED  \n\r");
    3fd0:	487b      	ldr	r0, [pc, #492]	; (41c0 <demo_appdata_callback+0x2f4>)
    3fd2:	4b65      	ldr	r3, [pc, #404]	; (4168 <demo_appdata_callback+0x29c>)
    3fd4:	4798      	blx	r3
            break;
    3fd6:	e780      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    3fd8:	487a      	ldr	r0, [pc, #488]	; (41c4 <demo_appdata_callback+0x2f8>)
    3fda:	4b63      	ldr	r3, [pc, #396]	; (4168 <demo_appdata_callback+0x29c>)
    3fdc:	4798      	blx	r3
            break;
    3fde:	e77c      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rBUSY\n\r");
    3fe0:	4879      	ldr	r0, [pc, #484]	; (41c8 <demo_appdata_callback+0x2fc>)
    3fe2:	4b61      	ldr	r3, [pc, #388]	; (4168 <demo_appdata_callback+0x29c>)
    3fe4:	4798      	blx	r3
            break;
    3fe6:	e778      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rNO_ACK \n\r");
    3fe8:	4878      	ldr	r0, [pc, #480]	; (41cc <demo_appdata_callback+0x300>)
    3fea:	4b5f      	ldr	r3, [pc, #380]	; (4168 <demo_appdata_callback+0x29c>)
    3fec:	4798      	blx	r3
            break;
    3fee:	e774      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    3ff0:	4877      	ldr	r0, [pc, #476]	; (41d0 <demo_appdata_callback+0x304>)
    3ff2:	4b5d      	ldr	r3, [pc, #372]	; (4168 <demo_appdata_callback+0x29c>)
    3ff4:	4798      	blx	r3
            break;
    3ff6:	e770      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    3ff8:	4876      	ldr	r0, [pc, #472]	; (41d4 <demo_appdata_callback+0x308>)
    3ffa:	4b5b      	ldr	r3, [pc, #364]	; (4168 <demo_appdata_callback+0x29c>)
    3ffc:	4798      	blx	r3
            break;
    3ffe:	e76c      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rINVALID_REQUEST \n\r");
    4000:	4875      	ldr	r0, [pc, #468]	; (41d8 <demo_appdata_callback+0x30c>)
    4002:	4b59      	ldr	r3, [pc, #356]	; (4168 <demo_appdata_callback+0x29c>)
    4004:	4798      	blx	r3
            break;
    4006:	e768      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rFCNTR_ERROR \n\r");
    4008:	4874      	ldr	r0, [pc, #464]	; (41dc <demo_appdata_callback+0x310>)
    400a:	4b57      	ldr	r3, [pc, #348]	; (4168 <demo_appdata_callback+0x29c>)
    400c:	4798      	blx	r3
            break;
    400e:	e764      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rMIC_ERROR \n\r");
    4010:	4873      	ldr	r0, [pc, #460]	; (41e0 <demo_appdata_callback+0x314>)
    4012:	4b55      	ldr	r3, [pc, #340]	; (4168 <demo_appdata_callback+0x29c>)
    4014:	4798      	blx	r3
            break;
    4016:	e760      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rINVALID_MTYPE \n\r");
    4018:	4872      	ldr	r0, [pc, #456]	; (41e4 <demo_appdata_callback+0x318>)
    401a:	4b53      	ldr	r3, [pc, #332]	; (4168 <demo_appdata_callback+0x29c>)
    401c:	4798      	blx	r3
            break;
    401e:	e75c      	b.n	3eda <demo_appdata_callback+0xe>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    4020:	4871      	ldr	r0, [pc, #452]	; (41e8 <demo_appdata_callback+0x31c>)
    4022:	4b51      	ldr	r3, [pc, #324]	; (4168 <demo_appdata_callback+0x29c>)
    4024:	4798      	blx	r3
            break;
    4026:	e758      	b.n	3eda <demo_appdata_callback+0xe>
				printf("\n\rINVALID_PACKET \n\r");
    4028:	4870      	ldr	r0, [pc, #448]	; (41ec <demo_appdata_callback+0x320>)
    402a:	4b4f      	ldr	r3, [pc, #316]	; (4168 <demo_appdata_callback+0x29c>)
    402c:	4798      	blx	r3
			break;
    402e:	e754      	b.n	3eda <demo_appdata_callback+0xe>
                printf("UNKNOWN ERROR\n\r");
    4030:	486f      	ldr	r0, [pc, #444]	; (41f0 <demo_appdata_callback+0x324>)
    4032:	4b4d      	ldr	r3, [pc, #308]	; (4168 <demo_appdata_callback+0x29c>)
    4034:	4798      	blx	r3
            break;
    4036:	e00d      	b.n	4054 <demo_appdata_callback+0x188>
        switch(status = appdata->param.transCmpl.status)
    4038:	790c      	ldrb	r4, [r1, #4]
    403a:	2c1e      	cmp	r4, #30
    403c:	d900      	bls.n	4040 <demo_appdata_callback+0x174>
    403e:	e081      	b.n	4144 <demo_appdata_callback+0x278>
    4040:	00a3      	lsls	r3, r4, #2
    4042:	4a6c      	ldr	r2, [pc, #432]	; (41f4 <demo_appdata_callback+0x328>)
    4044:	58d3      	ldr	r3, [r2, r3]
    4046:	469f      	mov	pc, r3
                printf("Transmission Success\r\n");
    4048:	486b      	ldr	r0, [pc, #428]	; (41f8 <demo_appdata_callback+0x32c>)
    404a:	4b4e      	ldr	r3, [pc, #312]	; (4184 <demo_appdata_callback+0x2b8>)
    404c:	4798      	blx	r3
        printf("\n\r*************************************************\n\r");
    404e:	486b      	ldr	r0, [pc, #428]	; (41fc <demo_appdata_callback+0x330>)
    4050:	4b45      	ldr	r3, [pc, #276]	; (4168 <demo_appdata_callback+0x29c>)
    4052:	4798      	blx	r3
    SwTimerStop(lTimerId);
    4054:	4b3d      	ldr	r3, [pc, #244]	; (414c <demo_appdata_callback+0x280>)
    4056:	7818      	ldrb	r0, [r3, #0]
    4058:	4b3d      	ldr	r3, [pc, #244]	; (4150 <demo_appdata_callback+0x284>)
    405a:	4798      	blx	r3
    set_LED_data(LED_GREEN,&off);
    405c:	493d      	ldr	r1, [pc, #244]	; (4154 <demo_appdata_callback+0x288>)
    405e:	2003      	movs	r0, #3
    4060:	4b3d      	ldr	r3, [pc, #244]	; (4158 <demo_appdata_callback+0x28c>)
    4062:	4798      	blx	r3
    if(status != LORAWAN_SUCCESS)
    4064:	2c08      	cmp	r4, #8
    4066:	d100      	bne.n	406a <demo_appdata_callback+0x19e>
    4068:	e743      	b.n	3ef2 <demo_appdata_callback+0x26>
    406a:	e73e      	b.n	3eea <demo_appdata_callback+0x1e>
                printf("Transmission Success\r\n");
    406c:	4862      	ldr	r0, [pc, #392]	; (41f8 <demo_appdata_callback+0x32c>)
    406e:	4b45      	ldr	r3, [pc, #276]	; (4184 <demo_appdata_callback+0x2b8>)
    4070:	4798      	blx	r3
            break;
    4072:	e7ec      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_NO_DATA \n\r");
    4074:	4845      	ldr	r0, [pc, #276]	; (418c <demo_appdata_callback+0x2c0>)
    4076:	4b3c      	ldr	r3, [pc, #240]	; (4168 <demo_appdata_callback+0x29c>)
    4078:	4798      	blx	r3
            break;
    407a:	e7e8      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_DATA_SIZE \n\r");
    407c:	4844      	ldr	r0, [pc, #272]	; (4190 <demo_appdata_callback+0x2c4>)
    407e:	4b3a      	ldr	r3, [pc, #232]	; (4168 <demo_appdata_callback+0x29c>)
    4080:	4798      	blx	r3
            break;
    4082:	e7e4      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_INVALID_REQ \n\r");
    4084:	4843      	ldr	r0, [pc, #268]	; (4194 <demo_appdata_callback+0x2c8>)
    4086:	4b38      	ldr	r3, [pc, #224]	; (4168 <demo_appdata_callback+0x29c>)
    4088:	4798      	blx	r3
            break;
    408a:	e7e0      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_BUSY \n\r");
    408c:	4842      	ldr	r0, [pc, #264]	; (4198 <demo_appdata_callback+0x2cc>)
    408e:	4b36      	ldr	r3, [pc, #216]	; (4168 <demo_appdata_callback+0x29c>)
    4090:	4798      	blx	r3
            break;
    4092:	e7dc      	b.n	404e <demo_appdata_callback+0x182>
                printf("\nTx Timeout\n\r");
    4094:	485a      	ldr	r0, [pc, #360]	; (4200 <demo_appdata_callback+0x334>)
    4096:	4b34      	ldr	r3, [pc, #208]	; (4168 <demo_appdata_callback+0x29c>)
    4098:	4798      	blx	r3
            break;
    409a:	e7d8      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_OUT_OF_RANGE \n\r");
    409c:	483f      	ldr	r0, [pc, #252]	; (419c <demo_appdata_callback+0x2d0>)
    409e:	4b32      	ldr	r3, [pc, #200]	; (4168 <demo_appdata_callback+0x29c>)
    40a0:	4798      	blx	r3
            break;
    40a2:	e7d4      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_UNSUPPORTED_ATTR \n\r");
    40a4:	483e      	ldr	r0, [pc, #248]	; (41a0 <demo_appdata_callback+0x2d4>)
    40a6:	4b30      	ldr	r3, [pc, #192]	; (4168 <demo_appdata_callback+0x29c>)
    40a8:	4798      	blx	r3
            break;
    40aa:	e7d0      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRADIO_CHANNEL_BUSY \n\r");
    40ac:	483d      	ldr	r0, [pc, #244]	; (41a4 <demo_appdata_callback+0x2d8>)
    40ae:	4b2e      	ldr	r3, [pc, #184]	; (4168 <demo_appdata_callback+0x29c>)
    40b0:	4798      	blx	r3
            break;
    40b2:	e7cc      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rNWK_NOT_JOINED \n\r");
    40b4:	483c      	ldr	r0, [pc, #240]	; (41a8 <demo_appdata_callback+0x2dc>)
    40b6:	4b2c      	ldr	r3, [pc, #176]	; (4168 <demo_appdata_callback+0x29c>)
    40b8:	4798      	blx	r3
            break;
    40ba:	e7c8      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rINVALID_PARAMETER \n\r");
    40bc:	483b      	ldr	r0, [pc, #236]	; (41ac <demo_appdata_callback+0x2e0>)
    40be:	4b2a      	ldr	r3, [pc, #168]	; (4168 <demo_appdata_callback+0x29c>)
    40c0:	4798      	blx	r3
            break;
    40c2:	e7c4      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rKEYS_NOT_INITIALIZED \n\r");
    40c4:	483a      	ldr	r0, [pc, #232]	; (41b0 <demo_appdata_callback+0x2e4>)
    40c6:	4b28      	ldr	r3, [pc, #160]	; (4168 <demo_appdata_callback+0x29c>)
    40c8:	4798      	blx	r3
            break;
    40ca:	e7c0      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rSILENT_IMMEDIATELY_ACTIVE\n\r");
    40cc:	4839      	ldr	r0, [pc, #228]	; (41b4 <demo_appdata_callback+0x2e8>)
    40ce:	4b26      	ldr	r3, [pc, #152]	; (4168 <demo_appdata_callback+0x29c>)
    40d0:	4798      	blx	r3
            break;
    40d2:	e7bc      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rFCNTR_ERROR_REJOIN_NEEDED \n\r");
    40d4:	4838      	ldr	r0, [pc, #224]	; (41b8 <demo_appdata_callback+0x2ec>)
    40d6:	4b24      	ldr	r3, [pc, #144]	; (4168 <demo_appdata_callback+0x29c>)
    40d8:	4798      	blx	r3
            break;
    40da:	e7b8      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rINVALID_BUFFER_LENGTH \n\r");
    40dc:	4837      	ldr	r0, [pc, #220]	; (41bc <demo_appdata_callback+0x2f0>)
    40de:	4b22      	ldr	r3, [pc, #136]	; (4168 <demo_appdata_callback+0x29c>)
    40e0:	4798      	blx	r3
            break;
    40e2:	e7b4      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rMAC_PAUSED  \n\r");
    40e4:	4836      	ldr	r0, [pc, #216]	; (41c0 <demo_appdata_callback+0x2f4>)
    40e6:	4b20      	ldr	r3, [pc, #128]	; (4168 <demo_appdata_callback+0x29c>)
    40e8:	4798      	blx	r3
            break;
    40ea:	e7b0      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rNO_CHANNELS_FOUND \n\r");
    40ec:	4835      	ldr	r0, [pc, #212]	; (41c4 <demo_appdata_callback+0x2f8>)
    40ee:	4b1e      	ldr	r3, [pc, #120]	; (4168 <demo_appdata_callback+0x29c>)
    40f0:	4798      	blx	r3
            break;
    40f2:	e7ac      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rBUSY\n\r");
    40f4:	4834      	ldr	r0, [pc, #208]	; (41c8 <demo_appdata_callback+0x2fc>)
    40f6:	4b1c      	ldr	r3, [pc, #112]	; (4168 <demo_appdata_callback+0x29c>)
    40f8:	4798      	blx	r3
            break;
    40fa:	e7a8      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rNO_ACK \n\r");
    40fc:	4833      	ldr	r0, [pc, #204]	; (41cc <demo_appdata_callback+0x300>)
    40fe:	4b1a      	ldr	r3, [pc, #104]	; (4168 <demo_appdata_callback+0x29c>)
    4100:	4798      	blx	r3
            break;
    4102:	e7a4      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rALREADY JOINING IS IN PROGRESS \n\r");
    4104:	4832      	ldr	r0, [pc, #200]	; (41d0 <demo_appdata_callback+0x304>)
    4106:	4b18      	ldr	r3, [pc, #96]	; (4168 <demo_appdata_callback+0x29c>)
    4108:	4798      	blx	r3
            break;
    410a:	e7a0      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rRESOURCE_UNAVAILABLE \n\r");
    410c:	4831      	ldr	r0, [pc, #196]	; (41d4 <demo_appdata_callback+0x308>)
    410e:	4b16      	ldr	r3, [pc, #88]	; (4168 <demo_appdata_callback+0x29c>)
    4110:	4798      	blx	r3
            break;
    4112:	e79c      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rINVALID_REQUEST \n\r");
    4114:	4830      	ldr	r0, [pc, #192]	; (41d8 <demo_appdata_callback+0x30c>)
    4116:	4b14      	ldr	r3, [pc, #80]	; (4168 <demo_appdata_callback+0x29c>)
    4118:	4798      	blx	r3
            break;
    411a:	e798      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rFCNTR_ERROR \n\r");
    411c:	482f      	ldr	r0, [pc, #188]	; (41dc <demo_appdata_callback+0x310>)
    411e:	4b12      	ldr	r3, [pc, #72]	; (4168 <demo_appdata_callback+0x29c>)
    4120:	4798      	blx	r3
            break;
    4122:	e794      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rMIC_ERROR \n\r");
    4124:	482e      	ldr	r0, [pc, #184]	; (41e0 <demo_appdata_callback+0x314>)
    4126:	4b10      	ldr	r3, [pc, #64]	; (4168 <demo_appdata_callback+0x29c>)
    4128:	4798      	blx	r3
            break;
    412a:	e790      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rINVALID_MTYPE \n\r");
    412c:	482d      	ldr	r0, [pc, #180]	; (41e4 <demo_appdata_callback+0x318>)
    412e:	4b0e      	ldr	r3, [pc, #56]	; (4168 <demo_appdata_callback+0x29c>)
    4130:	4798      	blx	r3
            break;
    4132:	e78c      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rMCAST_HDR_INVALID \n\r");
    4134:	482c      	ldr	r0, [pc, #176]	; (41e8 <demo_appdata_callback+0x31c>)
    4136:	4b0c      	ldr	r3, [pc, #48]	; (4168 <demo_appdata_callback+0x29c>)
    4138:	4798      	blx	r3
            break;
    413a:	e788      	b.n	404e <demo_appdata_callback+0x182>
				printf("\n\rINVALID_PACKET \n\r");
    413c:	482b      	ldr	r0, [pc, #172]	; (41ec <demo_appdata_callback+0x320>)
    413e:	4b0a      	ldr	r3, [pc, #40]	; (4168 <demo_appdata_callback+0x29c>)
    4140:	4798      	blx	r3
			break;
    4142:	e784      	b.n	404e <demo_appdata_callback+0x182>
                printf("\n\rUNKNOWN ERROR\n\r");
    4144:	482f      	ldr	r0, [pc, #188]	; (4204 <demo_appdata_callback+0x338>)
    4146:	4b08      	ldr	r3, [pc, #32]	; (4168 <demo_appdata_callback+0x29c>)
    4148:	4798      	blx	r3
            break;
    414a:	e780      	b.n	404e <demo_appdata_callback+0x182>
    414c:	20000060 	.word	0x20000060
    4150:	0000c235 	.word	0x0000c235
    4154:	20000b54 	.word	0x20000b54
    4158:	0000b869 	.word	0x0000b869
    415c:	2000005c 	.word	0x2000005c
    4160:	0001c8f0 	.word	0x0001c8f0
    4164:	0001caa0 	.word	0x0001caa0
    4168:	0001605d 	.word	0x0001605d
    416c:	0001cabc 	.word	0x0001cabc
    4170:	0001cadc 	.word	0x0001cadc
    4174:	0001caf4 	.word	0x0001caf4
    4178:	0001cb08 	.word	0x0001cb08
    417c:	0001cb14 	.word	0x0001cb14
    4180:	0001cb18 	.word	0x0001cb18
    4184:	00016121 	.word	0x00016121
    4188:	0001cb38 	.word	0x0001cb38
    418c:	0001cb5c 	.word	0x0001cb5c
    4190:	0001cb70 	.word	0x0001cb70
    4194:	0001cb88 	.word	0x0001cb88
    4198:	0001cba0 	.word	0x0001cba0
    419c:	0001cbb0 	.word	0x0001cbb0
    41a0:	0001cbc8 	.word	0x0001cbc8
    41a4:	0001cbe4 	.word	0x0001cbe4
    41a8:	0001cbfc 	.word	0x0001cbfc
    41ac:	0001cc10 	.word	0x0001cc10
    41b0:	0001cc28 	.word	0x0001cc28
    41b4:	0001cc44 	.word	0x0001cc44
    41b8:	0001cc64 	.word	0x0001cc64
    41bc:	0001cc84 	.word	0x0001cc84
    41c0:	0001cca0 	.word	0x0001cca0
    41c4:	0001ccb4 	.word	0x0001ccb4
    41c8:	0001cccc 	.word	0x0001cccc
    41cc:	0001ccd8 	.word	0x0001ccd8
    41d0:	0001cce4 	.word	0x0001cce4
    41d4:	0001cd08 	.word	0x0001cd08
    41d8:	0001cd24 	.word	0x0001cd24
    41dc:	0001cd3c 	.word	0x0001cd3c
    41e0:	0001cd50 	.word	0x0001cd50
    41e4:	0001cd60 	.word	0x0001cd60
    41e8:	0001cd74 	.word	0x0001cd74
    41ec:	0001cd8c 	.word	0x0001cd8c
    41f0:	0001cda0 	.word	0x0001cda0
    41f4:	0001c96c 	.word	0x0001c96c
    41f8:	0001cdb0 	.word	0x0001cdb0
    41fc:	0001cdec 	.word	0x0001cdec
    4200:	0001cdc8 	.word	0x0001cdc8
    4204:	0001cdd8 	.word	0x0001cdd8

00004208 <lTimerCb>:
{
    4208:	b510      	push	{r4, lr}
    420a:	b082      	sub	sp, #8
    SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    420c:	4b07      	ldr	r3, [pc, #28]	; (422c <lTimerCb+0x24>)
    420e:	7818      	ldrb	r0, [r3, #0]
    4210:	2300      	movs	r3, #0
    4212:	9300      	str	r3, [sp, #0]
    4214:	4b06      	ldr	r3, [pc, #24]	; (4230 <lTimerCb+0x28>)
    4216:	2200      	movs	r2, #0
    4218:	4906      	ldr	r1, [pc, #24]	; (4234 <lTimerCb+0x2c>)
    421a:	4c07      	ldr	r4, [pc, #28]	; (4238 <lTimerCb+0x30>)
    421c:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&toggle);
    421e:	4907      	ldr	r1, [pc, #28]	; (423c <lTimerCb+0x34>)
    4220:	2003      	movs	r0, #3
    4222:	4b07      	ldr	r3, [pc, #28]	; (4240 <lTimerCb+0x38>)
    4224:	4798      	blx	r3
}
    4226:	b002      	add	sp, #8
    4228:	bd10      	pop	{r4, pc}
    422a:	46c0      	nop			; (mov r8, r8)
    422c:	20000060 	.word	0x20000060
    4230:	00004209 	.word	0x00004209
    4234:	000186a0 	.word	0x000186a0
    4238:	0000bf29 	.word	0x0000bf29
    423c:	2000005e 	.word	0x2000005e
    4240:	0000b869 	.word	0x0000b869

00004244 <displayTask>:
{
    4244:	b570      	push	{r4, r5, r6, lr}
	switch(appTaskState)
    4246:	4b29      	ldr	r3, [pc, #164]	; (42ec <displayTask+0xa8>)
    4248:	781b      	ldrb	r3, [r3, #0]
    424a:	2b01      	cmp	r3, #1
    424c:	d016      	beq.n	427c <displayTask+0x38>
    424e:	2b00      	cmp	r3, #0
    4250:	d007      	beq.n	4262 <displayTask+0x1e>
    4252:	2b02      	cmp	r3, #2
    4254:	d021      	beq.n	429a <displayTask+0x56>
    4256:	2b03      	cmp	r3, #3
    4258:	d02f      	beq.n	42ba <displayTask+0x76>
			printf("Error STATE Entered\r\n");
    425a:	4825      	ldr	r0, [pc, #148]	; (42f0 <displayTask+0xac>)
    425c:	4b25      	ldr	r3, [pc, #148]	; (42f4 <displayTask+0xb0>)
    425e:	4798      	blx	r3
			break;
    4260:	e00a      	b.n	4278 <displayTask+0x34>
	set_LED_data(LED_AMBER,&off);
    4262:	4d25      	ldr	r5, [pc, #148]	; (42f8 <displayTask+0xb4>)
    4264:	0029      	movs	r1, r5
    4266:	2002      	movs	r0, #2
    4268:	4c24      	ldr	r4, [pc, #144]	; (42fc <displayTask+0xb8>)
    426a:	47a0      	blx	r4
	set_LED_data(LED_GREEN,&off);
    426c:	0029      	movs	r1, r5
    426e:	2003      	movs	r0, #3
    4270:	47a0      	blx	r4
	appPostTask(PROCESS_TASK_HANDLER);
    4272:	2001      	movs	r0, #1
    4274:	4b22      	ldr	r3, [pc, #136]	; (4300 <displayTask+0xbc>)
    4276:	4798      	blx	r3
}
    4278:	2000      	movs	r0, #0
    427a:	bd70      	pop	{r4, r5, r6, pc}
	set_LED_data(LED_AMBER,&off);
    427c:	4d1e      	ldr	r5, [pc, #120]	; (42f8 <displayTask+0xb4>)
    427e:	0029      	movs	r1, r5
    4280:	2002      	movs	r0, #2
    4282:	4c1e      	ldr	r4, [pc, #120]	; (42fc <displayTask+0xb8>)
    4284:	47a0      	blx	r4
	set_LED_data(LED_GREEN,&off);
    4286:	0029      	movs	r1, r5
    4288:	2003      	movs	r0, #3
    428a:	47a0      	blx	r4
	printf("Wireless Sensor Network Demo\r\n");
    428c:	481d      	ldr	r0, [pc, #116]	; (4304 <displayTask+0xc0>)
    428e:	4b19      	ldr	r3, [pc, #100]	; (42f4 <displayTask+0xb0>)
    4290:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
    4292:	2001      	movs	r0, #1
    4294:	4b1a      	ldr	r3, [pc, #104]	; (4300 <displayTask+0xbc>)
    4296:	4798      	blx	r3
    4298:	e7ee      	b.n	4278 <displayTask+0x34>
    set_LED_data(LED_AMBER,&off);
    429a:	4d17      	ldr	r5, [pc, #92]	; (42f8 <displayTask+0xb4>)
    429c:	0029      	movs	r1, r5
    429e:	2002      	movs	r0, #2
    42a0:	4c16      	ldr	r4, [pc, #88]	; (42fc <displayTask+0xb8>)
    42a2:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&off);
    42a4:	0029      	movs	r1, r5
    42a6:	2003      	movs	r0, #3
    42a8:	47a0      	blx	r4
    printf("\r\nRegional band selected is %s\r\n", bandStrings[BAND_NUM]);
    42aa:	4917      	ldr	r1, [pc, #92]	; (4308 <displayTask+0xc4>)
    42ac:	4817      	ldr	r0, [pc, #92]	; (430c <displayTask+0xc8>)
    42ae:	4b18      	ldr	r3, [pc, #96]	; (4310 <displayTask+0xcc>)
    42b0:	4798      	blx	r3
	appPostTask(PROCESS_TASK_HANDLER);
    42b2:	2001      	movs	r0, #1
    42b4:	4b12      	ldr	r3, [pc, #72]	; (4300 <displayTask+0xbc>)
    42b6:	4798      	blx	r3
    42b8:	e7de      	b.n	4278 <displayTask+0x34>
    printf("\r\n1. Send Join Request\r\n");
    42ba:	4816      	ldr	r0, [pc, #88]	; (4314 <displayTask+0xd0>)
    42bc:	4c0d      	ldr	r4, [pc, #52]	; (42f4 <displayTask+0xb0>)
    42be:	47a0      	blx	r4
    printf("2. Send Data\r\n");
    42c0:	4815      	ldr	r0, [pc, #84]	; (4318 <displayTask+0xd4>)
    42c2:	47a0      	blx	r4
    printf("3. Sleep\r\n");
    42c4:	4815      	ldr	r0, [pc, #84]	; (431c <displayTask+0xd8>)
    42c6:	47a0      	blx	r4
    printf("4. Main Menu\r\n");
    42c8:	4815      	ldr	r0, [pc, #84]	; (4320 <displayTask+0xdc>)
    42ca:	47a0      	blx	r4
    printf("\r\nEnter your choice: ");
    42cc:	4815      	ldr	r0, [pc, #84]	; (4324 <displayTask+0xe0>)
    42ce:	4b10      	ldr	r3, [pc, #64]	; (4310 <displayTask+0xcc>)
    42d0:	4798      	blx	r3
    set_LED_data(LED_AMBER,&off);
    42d2:	4d09      	ldr	r5, [pc, #36]	; (42f8 <displayTask+0xb4>)
    42d4:	0029      	movs	r1, r5
    42d6:	2002      	movs	r0, #2
    42d8:	4c08      	ldr	r4, [pc, #32]	; (42fc <displayTask+0xb8>)
    42da:	47a0      	blx	r4
    set_LED_data(LED_GREEN,&off);
    42dc:	0029      	movs	r1, r5
    42de:	2003      	movs	r0, #3
    42e0:	47a0      	blx	r4
		appPostTask(PROCESS_TASK_HANDLER);
    42e2:	2001      	movs	r0, #1
    42e4:	4b06      	ldr	r3, [pc, #24]	; (4300 <displayTask+0xbc>)
    42e6:	4798      	blx	r3
    42e8:	e7c6      	b.n	4278 <displayTask+0x34>
    42ea:	46c0      	nop			; (mov r8, r8)
    42ec:	20000b35 	.word	0x20000b35
    42f0:	0001cfa8 	.word	0x0001cfa8
    42f4:	00016121 	.word	0x00016121
    42f8:	20000b54 	.word	0x20000b54
    42fc:	0000b869 	.word	0x0000b869
    4300:	00003dad 	.word	0x00003dad
    4304:	0001cf00 	.word	0x0001cf00
    4308:	0001cf20 	.word	0x0001cf20
    430c:	0001cf28 	.word	0x0001cf28
    4310:	0001605d 	.word	0x0001605d
    4314:	0001cf4c 	.word	0x0001cf4c
    4318:	0001cf64 	.word	0x0001cf64
    431c:	0001cf74 	.word	0x0001cf74
    4320:	0001cf80 	.word	0x0001cf80
    4324:	0001cf90 	.word	0x0001cf90

00004328 <configure_adc>:
{
    4328:	b530      	push	{r4, r5, lr}
    432a:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&config_adc);
    432c:	ac01      	add	r4, sp, #4
    432e:	0020      	movs	r0, r4
    4330:	4b13      	ldr	r3, [pc, #76]	; (4380 <configure_adc+0x58>)
    4332:	4798      	blx	r3
	config_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV8;
    4334:	2302      	movs	r3, #2
    4336:	70a3      	strb	r3, [r4, #2]
	config_adc.reference       = ADC_REFERENCE_INTVCC1;
    4338:	7063      	strb	r3, [r4, #1]
	config_adc.positive_input  = ADC_POSITIVE_INPUT_PIN11 ;//ADC_POSITIVE_INPUT_PIN6;
    433a:	3309      	adds	r3, #9
    433c:	7123      	strb	r3, [r4, #4]
	config_adc.resolution      = ADC_RESOLUTION_12BIT;
    433e:	2300      	movs	r3, #0
    4340:	70e3      	strb	r3, [r4, #3]
	adc_init(&adc_instance, ADC, &config_adc);
    4342:	4d10      	ldr	r5, [pc, #64]	; (4384 <configure_adc+0x5c>)
    4344:	0022      	movs	r2, r4
    4346:	4910      	ldr	r1, [pc, #64]	; (4388 <configure_adc+0x60>)
    4348:	0028      	movs	r0, r5
    434a:	4b10      	ldr	r3, [pc, #64]	; (438c <configure_adc+0x64>)
    434c:	4798      	blx	r3
	Adc *const adc_module = module_inst->hw;
    434e:	682a      	ldr	r2, [r5, #0]
    4350:	8c13      	ldrh	r3, [r2, #32]
    4352:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4354:	2b00      	cmp	r3, #0
    4356:	d1fb      	bne.n	4350 <configure_adc+0x28>
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    4358:	2180      	movs	r1, #128	; 0x80
    435a:	03c9      	lsls	r1, r1, #15
    435c:	4b0c      	ldr	r3, [pc, #48]	; (4390 <configure_adc+0x68>)
    435e:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    4360:	2307      	movs	r3, #7
    4362:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    4364:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    4366:	7813      	ldrb	r3, [r2, #0]
    4368:	2102      	movs	r1, #2
    436a:	430b      	orrs	r3, r1
    436c:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    436e:	4b05      	ldr	r3, [pc, #20]	; (4384 <configure_adc+0x5c>)
    4370:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    4372:	8c13      	ldrh	r3, [r2, #32]
    4374:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    4376:	2b00      	cmp	r3, #0
    4378:	d1fb      	bne.n	4372 <configure_adc+0x4a>
}
    437a:	b00d      	add	sp, #52	; 0x34
    437c:	bd30      	pop	{r4, r5, pc}
    437e:	46c0      	nop			; (mov r8, r8)
    4380:	0000043d 	.word	0x0000043d
    4384:	200018d4 	.word	0x200018d4
    4388:	43000c00 	.word	0x43000c00
    438c:	00000481 	.word	0x00000481
    4390:	e000e100 	.word	0xe000e100

00004394 <configure_adc_callbacks>:
{
    4394:	b510      	push	{r4, lr}
	adc_register_callback(&adc_instance,
    4396:	4c05      	ldr	r4, [pc, #20]	; (43ac <configure_adc_callbacks+0x18>)
    4398:	2200      	movs	r2, #0
    439a:	4905      	ldr	r1, [pc, #20]	; (43b0 <configure_adc_callbacks+0x1c>)
    439c:	0020      	movs	r0, r4
    439e:	4b05      	ldr	r3, [pc, #20]	; (43b4 <configure_adc_callbacks+0x20>)
    43a0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->enabled_callback_mask |= (1 << callback_type);
    43a2:	7ee3      	ldrb	r3, [r4, #27]
    43a4:	2201      	movs	r2, #1
    43a6:	4313      	orrs	r3, r2
    43a8:	76e3      	strb	r3, [r4, #27]
}
    43aa:	bd10      	pop	{r4, pc}
    43ac:	200018d4 	.word	0x200018d4
    43b0:	00003d91 	.word	0x00003d91
    43b4:	0000092d 	.word	0x0000092d

000043b8 <mote_demo_init>:
{
    43b8:	b530      	push	{r4, r5, lr}
    43ba:	b087      	sub	sp, #28
	configure_adc();
    43bc:	4b35      	ldr	r3, [pc, #212]	; (4494 <mote_demo_init+0xdc>)
    43be:	4798      	blx	r3
	configure_adc_callbacks();
    43c0:	4b35      	ldr	r3, [pc, #212]	; (4498 <mote_demo_init+0xe0>)
    43c2:	4798      	blx	r3
    resource_init();
    43c4:	4b35      	ldr	r3, [pc, #212]	; (449c <mote_demo_init+0xe4>)
    43c6:	4798      	blx	r3
static void dev_eui_read(void)
{
#if (EDBG_EUI_READ == 1)
	uint8_t invalidEDBGDevEui[8];
	uint8_t EDBGDevEUI[8];
	edbg_eui_read_eui64((uint8_t *)&EDBGDevEUI);
    43c8:	a804      	add	r0, sp, #16
    43ca:	4b35      	ldr	r3, [pc, #212]	; (44a0 <mote_demo_init+0xe8>)
    43cc:	4798      	blx	r3
	memset(&invalidEDBGDevEui, 0xFF, sizeof(invalidEDBGDevEui));
    43ce:	2208      	movs	r2, #8
    43d0:	21ff      	movs	r1, #255	; 0xff
    43d2:	a802      	add	r0, sp, #8
    43d4:	4b33      	ldr	r3, [pc, #204]	; (44a4 <mote_demo_init+0xec>)
    43d6:	4798      	blx	r3
	/* If EDBG doesnot have DEV EUI, the read value will be of all 0xFF, 
	   Set devEUI in conf_app.h in that case */
	if(0 != memcmp(&EDBGDevEUI, &invalidEDBGDevEui, sizeof(demoDevEui)))
    43d8:	2208      	movs	r2, #8
    43da:	a902      	add	r1, sp, #8
    43dc:	a804      	add	r0, sp, #16
    43de:	4b32      	ldr	r3, [pc, #200]	; (44a8 <mote_demo_init+0xf0>)
    43e0:	4798      	blx	r3
    43e2:	2800      	cmp	r0, #0
    43e4:	d003      	beq.n	43ee <mote_demo_init+0x36>
	{
		/* Set EUI addr in EDBG if there */
		memcpy(demoDevEui, EDBGDevEUI, sizeof(demoDevEui));
    43e6:	4a31      	ldr	r2, [pc, #196]	; (44ac <mote_demo_init+0xf4>)
    43e8:	ab04      	add	r3, sp, #16
    43ea:	cb03      	ldmia	r3!, {r0, r1}
    43ec:	c203      	stmia	r2!, {r0, r1}
	startReceiving = false;
    43ee:	2200      	movs	r2, #0
    43f0:	4b2f      	ldr	r3, [pc, #188]	; (44b0 <mote_demo_init+0xf8>)
    43f2:	701a      	strb	r2, [r3, #0]
    LORAWAN_Init(demo_appdata_callback, demo_joindata_callback);
    43f4:	492f      	ldr	r1, [pc, #188]	; (44b4 <mote_demo_init+0xfc>)
    43f6:	4830      	ldr	r0, [pc, #192]	; (44b8 <mote_demo_init+0x100>)
    43f8:	4b30      	ldr	r3, [pc, #192]	; (44bc <mote_demo_init+0x104>)
    43fa:	4798      	blx	r3
    printf("\n\n\r*******************************************************\n\r");
    43fc:	4830      	ldr	r0, [pc, #192]	; (44c0 <mote_demo_init+0x108>)
    43fe:	4c31      	ldr	r4, [pc, #196]	; (44c4 <mote_demo_init+0x10c>)
    4400:	47a0      	blx	r4
    printf("\n\rMicrochip LoRaWAN Stack %s\r\n",STACK_VER);
    4402:	4931      	ldr	r1, [pc, #196]	; (44c8 <mote_demo_init+0x110>)
    4404:	4831      	ldr	r0, [pc, #196]	; (44cc <mote_demo_init+0x114>)
    4406:	47a0      	blx	r4
    printf("\r\nInit - Successful\r\n");
    4408:	4831      	ldr	r0, [pc, #196]	; (44d0 <mote_demo_init+0x118>)
    440a:	4b32      	ldr	r3, [pc, #200]	; (44d4 <mote_demo_init+0x11c>)
    440c:	4798      	blx	r3
    status = PDS_IsRestorable();
    440e:	4b32      	ldr	r3, [pc, #200]	; (44d8 <mote_demo_init+0x120>)
    4410:	4798      	blx	r3
    if(status)
    4412:	2800      	cmp	r0, #0
    4414:	d037      	beq.n	4486 <mote_demo_init+0xce>
        PDS_RestoreAll();
    4416:	4b31      	ldr	r3, [pc, #196]	; (44dc <mote_demo_init+0x124>)
    4418:	4798      	blx	r3
        LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    441a:	4c31      	ldr	r4, [pc, #196]	; (44e0 <mote_demo_init+0x128>)
    441c:	0022      	movs	r2, r4
    441e:	2100      	movs	r1, #0
    4420:	2023      	movs	r0, #35	; 0x23
    4422:	4b30      	ldr	r3, [pc, #192]	; (44e4 <mote_demo_init+0x12c>)
    4424:	4798      	blx	r3
            if(bandTable[i] == prevBand)
    4426:	7821      	ldrb	r1, [r4, #0]
    4428:	4b2f      	ldr	r3, [pc, #188]	; (44e8 <mote_demo_init+0x130>)
    442a:	781b      	ldrb	r3, [r3, #0]
    442c:	428b      	cmp	r3, r1
    442e:	d027      	beq.n	4480 <mote_demo_init+0xc8>
    4430:	2401      	movs	r4, #1
    4432:	482d      	ldr	r0, [pc, #180]	; (44e8 <mote_demo_init+0x130>)
    4434:	5c22      	ldrb	r2, [r4, r0]
    4436:	428a      	cmp	r2, r1
    4438:	d023      	beq.n	4482 <mote_demo_init+0xca>
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    443a:	3401      	adds	r4, #1
    443c:	2c09      	cmp	r4, #9
    443e:	d1f9      	bne.n	4434 <mote_demo_init+0x7c>
        uint8_t prevChoice = 0xFF;
    4440:	34f6      	adds	r4, #246	; 0xf6
        memset(rxchar,0,sizeof(rxchar));
    4442:	4d2a      	ldr	r5, [pc, #168]	; (44ec <mote_demo_init+0x134>)
    4444:	220b      	movs	r2, #11
    4446:	2100      	movs	r1, #0
    4448:	0028      	movs	r0, r5
    444a:	4b16      	ldr	r3, [pc, #88]	; (44a4 <mote_demo_init+0xec>)
    444c:	4798      	blx	r3
        sio2host_rx(rxchar,10);
    444e:	210a      	movs	r1, #10
    4450:	0028      	movs	r0, r5
    4452:	4b27      	ldr	r3, [pc, #156]	; (44f0 <mote_demo_init+0x138>)
    4454:	4798      	blx	r3
        printf ("Last configured Regional band %s\r\n",bandStrings[prevChoice]);
    4456:	00a4      	lsls	r4, r4, #2
    4458:	4a26      	ldr	r2, [pc, #152]	; (44f4 <mote_demo_init+0x13c>)
    445a:	58a5      	ldr	r5, [r4, r2]
    445c:	0029      	movs	r1, r5
    445e:	4826      	ldr	r0, [pc, #152]	; (44f8 <mote_demo_init+0x140>)
    4460:	4c18      	ldr	r4, [pc, #96]	; (44c4 <mote_demo_init+0x10c>)
    4462:	47a0      	blx	r4
        printf("Press any key to change band\r\n Continuing in %s in ", bandStrings[prevChoice]);
    4464:	0029      	movs	r1, r5
    4466:	4825      	ldr	r0, [pc, #148]	; (44fc <mote_demo_init+0x144>)
    4468:	47a0      	blx	r4
        SwTimerStart(demoTimerId,MS_TO_US(1000),SW_TIMEOUT_RELATIVE,(void *)demoTimerCb,NULL);
    446a:	4b25      	ldr	r3, [pc, #148]	; (4500 <mote_demo_init+0x148>)
    446c:	7818      	ldrb	r0, [r3, #0]
    446e:	2300      	movs	r3, #0
    4470:	9300      	str	r3, [sp, #0]
    4472:	4b24      	ldr	r3, [pc, #144]	; (4504 <mote_demo_init+0x14c>)
    4474:	2200      	movs	r2, #0
    4476:	4924      	ldr	r1, [pc, #144]	; (4508 <mote_demo_init+0x150>)
    4478:	4c24      	ldr	r4, [pc, #144]	; (450c <mote_demo_init+0x154>)
    447a:	47a0      	blx	r4
}
    447c:	b007      	add	sp, #28
    447e:	bd30      	pop	{r4, r5, pc}
        for (uint32_t i = 0; i < sizeof(bandTable) -1; i++)
    4480:	2400      	movs	r4, #0
                prevChoice = i;
    4482:	b2e4      	uxtb	r4, r4
                break;
    4484:	e7dd      	b.n	4442 <mote_demo_init+0x8a>
		appTaskState = DEMO_CERT_APP_STATE;
    4486:	2201      	movs	r2, #1
    4488:	4b21      	ldr	r3, [pc, #132]	; (4510 <mote_demo_init+0x158>)
    448a:	701a      	strb	r2, [r3, #0]
        appPostTask(DISPLAY_TASK_HANDLER);
    448c:	2000      	movs	r0, #0
    448e:	4b21      	ldr	r3, [pc, #132]	; (4514 <mote_demo_init+0x15c>)
    4490:	4798      	blx	r3
}
    4492:	e7f3      	b.n	447c <mote_demo_init+0xc4>
    4494:	00004329 	.word	0x00004329
    4498:	00004395 	.word	0x00004395
    449c:	0000b8f1 	.word	0x0000b8f1
    44a0:	0000ae41 	.word	0x0000ae41
    44a4:	00015fc9 	.word	0x00015fc9
    44a8:	00015ef9 	.word	0x00015ef9
    44ac:	20000044 	.word	0x20000044
    44b0:	20000b63 	.word	0x20000b63
    44b4:	0000488d 	.word	0x0000488d
    44b8:	00003ecd 	.word	0x00003ecd
    44bc:	0000d0c1 	.word	0x0000d0c1
    44c0:	0001cfc0 	.word	0x0001cfc0
    44c4:	0001605d 	.word	0x0001605d
    44c8:	0001d000 	.word	0x0001d000
    44cc:	0001d010 	.word	0x0001d010
    44d0:	0001d030 	.word	0x0001d030
    44d4:	00016121 	.word	0x00016121
    44d8:	0000afed 	.word	0x0000afed
    44dc:	0000b035 	.word	0x0000b035
    44e0:	2000005d 	.word	0x2000005d
    44e4:	0000e4b9 	.word	0x0000e4b9
    44e8:	2000000c 	.word	0x2000000c
    44ec:	20000b58 	.word	0x20000b58
    44f0:	00003cfd 	.word	0x00003cfd
    44f4:	0001ca50 	.word	0x0001ca50
    44f8:	0001d048 	.word	0x0001d048
    44fc:	0001d06c 	.word	0x0001d06c
    4500:	2000005f 	.word	0x2000005f
    4504:	00003de1 	.word	0x00003de1
    4508:	000f4240 	.word	0x000f4240
    450c:	0000bf29 	.word	0x0000bf29
    4510:	20000b35 	.word	0x20000b35
    4514:	00003dad 	.word	0x00003dad

00004518 <appWakeup>:
{
    4518:	b510      	push	{r4, lr}
    451a:	0004      	movs	r4, r0
    HAL_Radio_resources_init();
    451c:	4b07      	ldr	r3, [pc, #28]	; (453c <appWakeup+0x24>)
    451e:	4798      	blx	r3
    sio2host_init();
    4520:	4b07      	ldr	r3, [pc, #28]	; (4540 <appWakeup+0x28>)
    4522:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    4524:	2203      	movs	r2, #3
    4526:	4b07      	ldr	r3, [pc, #28]	; (4544 <appWakeup+0x2c>)
    4528:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    452a:	2000      	movs	r0, #0
    452c:	4b06      	ldr	r3, [pc, #24]	; (4548 <appWakeup+0x30>)
    452e:	4798      	blx	r3
    printf("\r\nsleep_ok %ld ms\r\n", sleptDuration);
    4530:	0021      	movs	r1, r4
    4532:	4806      	ldr	r0, [pc, #24]	; (454c <appWakeup+0x34>)
    4534:	4b06      	ldr	r3, [pc, #24]	; (4550 <appWakeup+0x38>)
    4536:	4798      	blx	r3
}
    4538:	bd10      	pop	{r4, pc}
    453a:	46c0      	nop			; (mov r8, r8)
    453c:	00005329 	.word	0x00005329
    4540:	00003b45 	.word	0x00003b45
    4544:	20000b35 	.word	0x20000b35
    4548:	00003dad 	.word	0x00003dad
    454c:	0001ca3c 	.word	0x0001ca3c
    4550:	0001605d 	.word	0x0001605d

00004554 <APP_TaskHandler>:
{
    4554:	b570      	push	{r4, r5, r6, lr}
    if (appTaskFlags)
    4556:	4b12      	ldr	r3, [pc, #72]	; (45a0 <APP_TaskHandler+0x4c>)
    4558:	781b      	ldrb	r3, [r3, #0]
    455a:	2b00      	cmp	r3, #0
    455c:	d008      	beq.n	4570 <APP_TaskHandler+0x1c>
            if ((1 << taskId) & (appTaskFlags))
    455e:	4b10      	ldr	r3, [pc, #64]	; (45a0 <APP_TaskHandler+0x4c>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	07db      	lsls	r3, r3, #31
    4564:	d406      	bmi.n	4574 <APP_TaskHandler+0x20>
    4566:	4b0e      	ldr	r3, [pc, #56]	; (45a0 <APP_TaskHandler+0x4c>)
    4568:	781c      	ldrb	r4, [r3, #0]
    456a:	07a4      	lsls	r4, r4, #30
    456c:	0fe4      	lsrs	r4, r4, #31
    456e:	d102      	bne.n	4576 <APP_TaskHandler+0x22>
}
    4570:	2000      	movs	r0, #0
    4572:	bd70      	pop	{r4, r5, r6, pc}
            if ((1 << taskId) & (appTaskFlags))
    4574:	2400      	movs	r4, #0
                ATOMIC_SECTION_ENTER
    4576:	4b0b      	ldr	r3, [pc, #44]	; (45a4 <APP_TaskHandler+0x50>)
    4578:	4798      	blx	r3
                appTaskFlags &= ~(1 << taskId);
    457a:	4d09      	ldr	r5, [pc, #36]	; (45a0 <APP_TaskHandler+0x4c>)
    457c:	782b      	ldrb	r3, [r5, #0]
    457e:	2201      	movs	r2, #1
    4580:	40a2      	lsls	r2, r4
    4582:	4393      	bics	r3, r2
    4584:	702b      	strb	r3, [r5, #0]
                ATOMIC_SECTION_EXIT
    4586:	4b08      	ldr	r3, [pc, #32]	; (45a8 <APP_TaskHandler+0x54>)
    4588:	4798      	blx	r3
                appTaskHandlers[taskId]();
    458a:	00a4      	lsls	r4, r4, #2
    458c:	4b07      	ldr	r3, [pc, #28]	; (45ac <APP_TaskHandler+0x58>)
    458e:	58e3      	ldr	r3, [r4, r3]
    4590:	4798      	blx	r3
                if (appTaskFlags)
    4592:	782b      	ldrb	r3, [r5, #0]
    4594:	2b00      	cmp	r3, #0
    4596:	d0eb      	beq.n	4570 <APP_TaskHandler+0x1c>
                    SYSTEM_PostTask(APP_TASK_ID);
    4598:	2010      	movs	r0, #16
    459a:	4b05      	ldr	r3, [pc, #20]	; (45b0 <APP_TaskHandler+0x5c>)
    459c:	4798      	blx	r3
    459e:	e7e7      	b.n	4570 <APP_TaskHandler+0x1c>
    45a0:	20000b34 	.word	0x20000b34
    45a4:	00005615 	.word	0x00005615
    45a8:	00005621 	.word	0x00005621
    45ac:	0001ca34 	.word	0x0001ca34
    45b0:	0000c555 	.word	0x0000c555

000045b4 <print_array>:
{
    45b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    45b6:	0004      	movs	r4, r0
    45b8:	000d      	movs	r5, r1
    printf("0x");
    45ba:	480a      	ldr	r0, [pc, #40]	; (45e4 <print_array+0x30>)
    45bc:	4b0a      	ldr	r3, [pc, #40]	; (45e8 <print_array+0x34>)
    45be:	4798      	blx	r3
    for (uint8_t i =0; i < length; i++)
    45c0:	2d00      	cmp	r5, #0
    45c2:	d00b      	beq.n	45dc <print_array+0x28>
    45c4:	3d01      	subs	r5, #1
    45c6:	b2ed      	uxtb	r5, r5
    45c8:	3501      	adds	r5, #1
    45ca:	1965      	adds	r5, r4, r5
        printf("%02x", *array);
    45cc:	4e07      	ldr	r6, [pc, #28]	; (45ec <print_array+0x38>)
    45ce:	4f06      	ldr	r7, [pc, #24]	; (45e8 <print_array+0x34>)
    45d0:	7821      	ldrb	r1, [r4, #0]
    45d2:	0030      	movs	r0, r6
    45d4:	47b8      	blx	r7
        array++;
    45d6:	3401      	adds	r4, #1
    for (uint8_t i =0; i < length; i++)
    45d8:	42ac      	cmp	r4, r5
    45da:	d1f9      	bne.n	45d0 <print_array+0x1c>
    printf("\n\r");
    45dc:	4804      	ldr	r0, [pc, #16]	; (45f0 <print_array+0x3c>)
    45de:	4b02      	ldr	r3, [pc, #8]	; (45e8 <print_array+0x34>)
    45e0:	4798      	blx	r3
}
    45e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e4:	0001d1f4 	.word	0x0001d1f4
    45e8:	0001605d 	.word	0x0001605d
    45ec:	0001d1f8 	.word	0x0001d1f8
    45f0:	0001cb6c 	.word	0x0001cb6c

000045f4 <set_join_parameters>:
{
    45f4:	b510      	push	{r4, lr}
    45f6:	0004      	movs	r4, r0
    printf("\n********************Join Parameters********************\n\r");
    45f8:	482a      	ldr	r0, [pc, #168]	; (46a4 <set_join_parameters+0xb0>)
    45fa:	4b2b      	ldr	r3, [pc, #172]	; (46a8 <set_join_parameters+0xb4>)
    45fc:	4798      	blx	r3
    if(ACTIVATION_BY_PERSONALIZATION == activation_type)
    45fe:	2c01      	cmp	r4, #1
    4600:	d008      	beq.n	4614 <set_join_parameters+0x20>
        status = LORAWAN_SetAttr (DEV_EUI, demoDevEui);
    4602:	492a      	ldr	r1, [pc, #168]	; (46ac <set_join_parameters+0xb8>)
    4604:	2000      	movs	r0, #0
    4606:	4b2a      	ldr	r3, [pc, #168]	; (46b0 <set_join_parameters+0xbc>)
    4608:	4798      	blx	r3
    460a:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    460c:	2808      	cmp	r0, #8
    460e:	d025      	beq.n	465c <set_join_parameters+0x68>
}
    4610:	0020      	movs	r0, r4
    4612:	bd10      	pop	{r4, pc}
        status = LORAWAN_SetAttr (DEV_ADDR, &demoDevAddr);
    4614:	4927      	ldr	r1, [pc, #156]	; (46b4 <set_join_parameters+0xc0>)
    4616:	2002      	movs	r0, #2
    4618:	4b25      	ldr	r3, [pc, #148]	; (46b0 <set_join_parameters+0xbc>)
    461a:	4798      	blx	r3
    461c:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    461e:	2808      	cmp	r0, #8
    4620:	d1f6      	bne.n	4610 <set_join_parameters+0x1c>
            status = LORAWAN_SetAttr (APPS_KEY, demoAppsKey);
    4622:	4925      	ldr	r1, [pc, #148]	; (46b8 <set_join_parameters+0xc4>)
    4624:	2005      	movs	r0, #5
    4626:	4b22      	ldr	r3, [pc, #136]	; (46b0 <set_join_parameters+0xbc>)
    4628:	4798      	blx	r3
    462a:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    462c:	2808      	cmp	r0, #8
    462e:	d1ef      	bne.n	4610 <set_join_parameters+0x1c>
            printf("\nAppSessionKey : ");
    4630:	4822      	ldr	r0, [pc, #136]	; (46bc <set_join_parameters+0xc8>)
    4632:	4b1d      	ldr	r3, [pc, #116]	; (46a8 <set_join_parameters+0xb4>)
    4634:	4798      	blx	r3
            print_array((uint8_t *)&demoAppsKey, sizeof(demoAppsKey));
    4636:	2110      	movs	r1, #16
    4638:	481f      	ldr	r0, [pc, #124]	; (46b8 <set_join_parameters+0xc4>)
    463a:	4b21      	ldr	r3, [pc, #132]	; (46c0 <set_join_parameters+0xcc>)
    463c:	4798      	blx	r3
            status = LORAWAN_SetAttr (NWKS_KEY, demoNwksKey);
    463e:	4921      	ldr	r1, [pc, #132]	; (46c4 <set_join_parameters+0xd0>)
    4640:	2004      	movs	r0, #4
    4642:	4b1b      	ldr	r3, [pc, #108]	; (46b0 <set_join_parameters+0xbc>)
    4644:	4798      	blx	r3
    4646:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    4648:	2808      	cmp	r0, #8
    464a:	d1e1      	bne.n	4610 <set_join_parameters+0x1c>
            printf("\nNwkSessionKey : ");
    464c:	481e      	ldr	r0, [pc, #120]	; (46c8 <set_join_parameters+0xd4>)
    464e:	4b16      	ldr	r3, [pc, #88]	; (46a8 <set_join_parameters+0xb4>)
    4650:	4798      	blx	r3
            print_array((uint8_t *)&demoNwksKey, sizeof(demoNwksKey));
    4652:	2110      	movs	r1, #16
    4654:	481b      	ldr	r0, [pc, #108]	; (46c4 <set_join_parameters+0xd0>)
    4656:	4b1a      	ldr	r3, [pc, #104]	; (46c0 <set_join_parameters+0xcc>)
    4658:	4798      	blx	r3
    465a:	e7d9      	b.n	4610 <set_join_parameters+0x1c>
            printf("\nDevEUI : ");
    465c:	481b      	ldr	r0, [pc, #108]	; (46cc <set_join_parameters+0xd8>)
    465e:	4b12      	ldr	r3, [pc, #72]	; (46a8 <set_join_parameters+0xb4>)
    4660:	4798      	blx	r3
            print_array((uint8_t *)&demoDevEui, sizeof(demoDevEui));
    4662:	2108      	movs	r1, #8
    4664:	4811      	ldr	r0, [pc, #68]	; (46ac <set_join_parameters+0xb8>)
    4666:	4b16      	ldr	r3, [pc, #88]	; (46c0 <set_join_parameters+0xcc>)
    4668:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_EUI, demoAppEui);
    466a:	4919      	ldr	r1, [pc, #100]	; (46d0 <set_join_parameters+0xdc>)
    466c:	2001      	movs	r0, #1
    466e:	4b10      	ldr	r3, [pc, #64]	; (46b0 <set_join_parameters+0xbc>)
    4670:	4798      	blx	r3
    4672:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    4674:	2808      	cmp	r0, #8
    4676:	d1cb      	bne.n	4610 <set_join_parameters+0x1c>
            printf("\nAppEUI : ");
    4678:	4816      	ldr	r0, [pc, #88]	; (46d4 <set_join_parameters+0xe0>)
    467a:	4b0b      	ldr	r3, [pc, #44]	; (46a8 <set_join_parameters+0xb4>)
    467c:	4798      	blx	r3
            print_array((uint8_t *)&demoAppEui, sizeof(demoAppEui));
    467e:	2108      	movs	r1, #8
    4680:	4813      	ldr	r0, [pc, #76]	; (46d0 <set_join_parameters+0xdc>)
    4682:	4b0f      	ldr	r3, [pc, #60]	; (46c0 <set_join_parameters+0xcc>)
    4684:	4798      	blx	r3
            status = LORAWAN_SetAttr (APP_KEY, demoAppKey);
    4686:	4914      	ldr	r1, [pc, #80]	; (46d8 <set_join_parameters+0xe4>)
    4688:	2003      	movs	r0, #3
    468a:	4b09      	ldr	r3, [pc, #36]	; (46b0 <set_join_parameters+0xbc>)
    468c:	4798      	blx	r3
    468e:	0004      	movs	r4, r0
        if (LORAWAN_SUCCESS == status)
    4690:	2808      	cmp	r0, #8
    4692:	d1bd      	bne.n	4610 <set_join_parameters+0x1c>
            printf("\nAppKey : ");
    4694:	4811      	ldr	r0, [pc, #68]	; (46dc <set_join_parameters+0xe8>)
    4696:	4b04      	ldr	r3, [pc, #16]	; (46a8 <set_join_parameters+0xb4>)
    4698:	4798      	blx	r3
            print_array((uint8_t *)&demoAppKey, sizeof(demoAppKey));
    469a:	2110      	movs	r1, #16
    469c:	480e      	ldr	r0, [pc, #56]	; (46d8 <set_join_parameters+0xe4>)
    469e:	4b08      	ldr	r3, [pc, #32]	; (46c0 <set_join_parameters+0xcc>)
    46a0:	4798      	blx	r3
    46a2:	e7b5      	b.n	4610 <set_join_parameters+0x1c>
    46a4:	0001d44c 	.word	0x0001d44c
    46a8:	0001605d 	.word	0x0001605d
    46ac:	20000044 	.word	0x20000044
    46b0:	00010015 	.word	0x00010015
    46b4:	20000040 	.word	0x20000040
    46b8:	20000030 	.word	0x20000030
    46bc:	0001d488 	.word	0x0001d488
    46c0:	000045b5 	.word	0x000045b5
    46c4:	2000004c 	.word	0x2000004c
    46c8:	0001d49c 	.word	0x0001d49c
    46cc:	0001d4b0 	.word	0x0001d4b0
    46d0:	20000018 	.word	0x20000018
    46d4:	0001d4bc 	.word	0x0001d4bc
    46d8:	20000020 	.word	0x20000020
    46dc:	0001d4c8 	.word	0x0001d4c8

000046e0 <set_multicast_params>:
{
    46e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    46e2:	b08f      	sub	sp, #60	; 0x3c
    printf("\n***************Multicast Parameters********************\n\r");
    46e4:	482a      	ldr	r0, [pc, #168]	; (4790 <set_multicast_params+0xb0>)
    46e6:	4b2b      	ldr	r3, [pc, #172]	; (4794 <set_multicast_params+0xb4>)
    46e8:	4798      	blx	r3
    dMcastDevAddr.groupId = demoMcastGroupId;
    46ea:	af0c      	add	r7, sp, #48	; 0x30
    46ec:	2300      	movs	r3, #0
    46ee:	703b      	strb	r3, [r7, #0]
    mcastAppSKey.groupId  = demoMcastGroupId;
    46f0:	ac07      	add	r4, sp, #28
    46f2:	7023      	strb	r3, [r4, #0]
    mcastNwkSKey.groupId  = demoMcastGroupId;
    46f4:	aa02      	add	r2, sp, #8
    46f6:	7013      	strb	r3, [r2, #0]
    mcastStatus.groupId   = demoMcastGroupId;
    46f8:	ad01      	add	r5, sp, #4
    46fa:	702b      	strb	r3, [r5, #0]
    memcpy(&(mcastAppSKey.mcastAppSKey), &demoMcastAppsKey,LORAWAN_SESSIONKEY_LENGTH);
    46fc:	2210      	movs	r2, #16
    46fe:	4926      	ldr	r1, [pc, #152]	; (4798 <set_multicast_params+0xb8>)
    4700:	201d      	movs	r0, #29
    4702:	4468      	add	r0, sp
    4704:	4e25      	ldr	r6, [pc, #148]	; (479c <set_multicast_params+0xbc>)
    4706:	47b0      	blx	r6
    dMcastDevAddr.mcast_dev_addr = demoMcastDevAddr;
    4708:	4b25      	ldr	r3, [pc, #148]	; (47a0 <set_multicast_params+0xc0>)
    470a:	607b      	str	r3, [r7, #4]
    memcpy(&(mcastNwkSKey.mcastNwkSKey), &demoMcastNwksKey,LORAWAN_SESSIONKEY_LENGTH);
    470c:	2210      	movs	r2, #16
    470e:	4925      	ldr	r1, [pc, #148]	; (47a4 <set_multicast_params+0xc4>)
    4710:	2009      	movs	r0, #9
    4712:	4468      	add	r0, sp
    4714:	47b0      	blx	r6
    memcpy(&(mcastStatus.status),&demoMcastEnable,sizeof(demoMcastEnable));
    4716:	2301      	movs	r3, #1
    4718:	706b      	strb	r3, [r5, #1]
    status = LORAWAN_SetAttr(MCAST_APPS_KEY, &mcastAppSKey);
    471a:	0021      	movs	r1, r4
    471c:	202b      	movs	r0, #43	; 0x2b
    471e:	4b22      	ldr	r3, [pc, #136]	; (47a8 <set_multicast_params+0xc8>)
    4720:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    4722:	2808      	cmp	r0, #8
    4724:	d00a      	beq.n	473c <set_multicast_params+0x5c>
	    printf("\nMcastGroupAddrStatus : Failed\n\r");
    4726:	4821      	ldr	r0, [pc, #132]	; (47ac <set_multicast_params+0xcc>)
    4728:	4b1a      	ldr	r3, [pc, #104]	; (4794 <set_multicast_params+0xb4>)
    472a:	4798      	blx	r3
	    printf("\nMulticastStatus : Failed\n\r");
    472c:	4820      	ldr	r0, [pc, #128]	; (47b0 <set_multicast_params+0xd0>)
    472e:	4b19      	ldr	r3, [pc, #100]	; (4794 <set_multicast_params+0xb4>)
    4730:	4798      	blx	r3
	 printf("\n********************************************************\n\r");
    4732:	4820      	ldr	r0, [pc, #128]	; (47b4 <set_multicast_params+0xd4>)
    4734:	4b17      	ldr	r3, [pc, #92]	; (4794 <set_multicast_params+0xb4>)
    4736:	4798      	blx	r3
}
    4738:	b00f      	add	sp, #60	; 0x3c
    473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	    printf("\nMcastAppSessionKey : ");
    473c:	481e      	ldr	r0, [pc, #120]	; (47b8 <set_multicast_params+0xd8>)
    473e:	4b15      	ldr	r3, [pc, #84]	; (4794 <set_multicast_params+0xb4>)
    4740:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastAppSKey.mcastAppSKey), LORAWAN_SESSIONKEY_LENGTH);
    4742:	2110      	movs	r1, #16
    4744:	201d      	movs	r0, #29
    4746:	4468      	add	r0, sp
    4748:	4b1c      	ldr	r3, [pc, #112]	; (47bc <set_multicast_params+0xdc>)
    474a:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_NWKS_KEY, &mcastNwkSKey);
    474c:	a902      	add	r1, sp, #8
    474e:	202a      	movs	r0, #42	; 0x2a
    4750:	4b15      	ldr	r3, [pc, #84]	; (47a8 <set_multicast_params+0xc8>)
    4752:	4798      	blx	r3
    if(status == LORAWAN_SUCCESS)
    4754:	2808      	cmp	r0, #8
    4756:	d1e6      	bne.n	4726 <set_multicast_params+0x46>
	    printf("\nMcastNwkSessionKey : ");
    4758:	4819      	ldr	r0, [pc, #100]	; (47c0 <set_multicast_params+0xe0>)
    475a:	4b0e      	ldr	r3, [pc, #56]	; (4794 <set_multicast_params+0xb4>)
    475c:	4798      	blx	r3
	    print_array((uint8_t *)&(mcastNwkSKey.mcastNwkSKey), LORAWAN_SESSIONKEY_LENGTH);
    475e:	2110      	movs	r1, #16
    4760:	2009      	movs	r0, #9
    4762:	4468      	add	r0, sp
    4764:	4b15      	ldr	r3, [pc, #84]	; (47bc <set_multicast_params+0xdc>)
    4766:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_GROUP_ADDR, &dMcastDevAddr);
    4768:	a90c      	add	r1, sp, #48	; 0x30
    476a:	2029      	movs	r0, #41	; 0x29
    476c:	4b0e      	ldr	r3, [pc, #56]	; (47a8 <set_multicast_params+0xc8>)
    476e:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    4770:	2808      	cmp	r0, #8
    4772:	d1d8      	bne.n	4726 <set_multicast_params+0x46>
	    printf("\nMcastGroupAddr : 0x%lx\n\r", dMcastDevAddr.mcast_dev_addr);
    4774:	990d      	ldr	r1, [sp, #52]	; 0x34
    4776:	4813      	ldr	r0, [pc, #76]	; (47c4 <set_multicast_params+0xe4>)
    4778:	4b06      	ldr	r3, [pc, #24]	; (4794 <set_multicast_params+0xb4>)
    477a:	4798      	blx	r3
	    status = LORAWAN_SetAttr(MCAST_ENABLE, &mcastStatus);
    477c:	a901      	add	r1, sp, #4
    477e:	2028      	movs	r0, #40	; 0x28
    4780:	4b09      	ldr	r3, [pc, #36]	; (47a8 <set_multicast_params+0xc8>)
    4782:	4798      	blx	r3
    if (status == LORAWAN_SUCCESS)
    4784:	2808      	cmp	r0, #8
    4786:	d1d1      	bne.n	472c <set_multicast_params+0x4c>
	    printf("\nMulticastStatus : Enabled\n\r");
    4788:	480f      	ldr	r0, [pc, #60]	; (47c8 <set_multicast_params+0xe8>)
    478a:	4b02      	ldr	r3, [pc, #8]	; (4794 <set_multicast_params+0xb4>)
    478c:	4798      	blx	r3
    478e:	e7d0      	b.n	4732 <set_multicast_params+0x52>
    4790:	0001d4d4 	.word	0x0001d4d4
    4794:	0001605d 	.word	0x0001605d
    4798:	0001ca78 	.word	0x0001ca78
    479c:	00015f45 	.word	0x00015f45
    47a0:	0037cc56 	.word	0x0037cc56
    47a4:	0001ca88 	.word	0x0001ca88
    47a8:	00010015 	.word	0x00010015
    47ac:	0001d55c 	.word	0x0001d55c
    47b0:	0001d5a0 	.word	0x0001d5a0
    47b4:	0001d5bc 	.word	0x0001d5bc
    47b8:	0001d510 	.word	0x0001d510
    47bc:	000045b5 	.word	0x000045b5
    47c0:	0001d528 	.word	0x0001d528
    47c4:	0001d540 	.word	0x0001d540
    47c8:	0001d580 	.word	0x0001d580

000047cc <set_device_type>:
{
    47cc:	b510      	push	{r4, lr}
    47ce:	b082      	sub	sp, #8
    47d0:	466b      	mov	r3, sp
    47d2:	1dd9      	adds	r1, r3, #7
    47d4:	7008      	strb	r0, [r1, #0]
    status = LORAWAN_SetAttr(EDCLASS, &ed_class);
    47d6:	2019      	movs	r0, #25
    47d8:	4b08      	ldr	r3, [pc, #32]	; (47fc <set_device_type+0x30>)
    47da:	4798      	blx	r3
    47dc:	0004      	movs	r4, r0
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    47de:	2808      	cmp	r0, #8
    47e0:	d002      	beq.n	47e8 <set_device_type+0x1c>
}
    47e2:	0020      	movs	r0, r4
    47e4:	b002      	add	sp, #8
    47e6:	bd10      	pop	{r4, pc}
    if((LORAWAN_SUCCESS == status) && ((CLASS_C | CLASS_B) & ed_class) && (true == DEMO_APP_MCAST_ENABLE))
    47e8:	466b      	mov	r3, sp
    47ea:	3307      	adds	r3, #7
    47ec:	781b      	ldrb	r3, [r3, #0]
    47ee:	2206      	movs	r2, #6
    47f0:	421a      	tst	r2, r3
    47f2:	d0f6      	beq.n	47e2 <set_device_type+0x16>
        set_multicast_params();
    47f4:	4b02      	ldr	r3, [pc, #8]	; (4800 <set_device_type+0x34>)
    47f6:	4798      	blx	r3
    47f8:	e7f3      	b.n	47e2 <set_device_type+0x16>
    47fa:	46c0      	nop			; (mov r8, r8)
    47fc:	00010015 	.word	0x00010015
    4800:	000046e1 	.word	0x000046e1

00004804 <print_application_config>:
{
    4804:	b530      	push	{r4, r5, lr}
    4806:	b083      	sub	sp, #12
    printf("\n***************Application Configuration***************\n\r");
    4808:	4814      	ldr	r0, [pc, #80]	; (485c <print_application_config+0x58>)
    480a:	4d15      	ldr	r5, [pc, #84]	; (4860 <print_application_config+0x5c>)
    480c:	47a8      	blx	r5
    LORAWAN_GetAttr(EDCLASS, NULL, &edClass);
    480e:	466b      	mov	r3, sp
    4810:	1ddc      	adds	r4, r3, #7
    4812:	0022      	movs	r2, r4
    4814:	2100      	movs	r1, #0
    4816:	2019      	movs	r0, #25
    4818:	4b12      	ldr	r3, [pc, #72]	; (4864 <print_application_config+0x60>)
    481a:	4798      	blx	r3
    printf("\nDevType : ");
    481c:	4812      	ldr	r0, [pc, #72]	; (4868 <print_application_config+0x64>)
    481e:	47a8      	blx	r5
    if(edClass == CLASS_A)
    4820:	7823      	ldrb	r3, [r4, #0]
    4822:	2b01      	cmp	r3, #1
    4824:	d011      	beq.n	484a <print_application_config+0x46>
    else if(edClass == CLASS_C)
    4826:	2b04      	cmp	r3, #4
    4828:	d013      	beq.n	4852 <print_application_config+0x4e>
    printf("\nActivationType : ");
    482a:	4810      	ldr	r0, [pc, #64]	; (486c <print_application_config+0x68>)
    482c:	4c0c      	ldr	r4, [pc, #48]	; (4860 <print_application_config+0x5c>)
    482e:	47a0      	blx	r4
        printf("OTAA\n\r");
    4830:	480f      	ldr	r0, [pc, #60]	; (4870 <print_application_config+0x6c>)
    4832:	47a0      	blx	r4
    printf("\nTransmission Type - ");
    4834:	480f      	ldr	r0, [pc, #60]	; (4874 <print_application_config+0x70>)
    4836:	47a0      	blx	r4
        printf("UNCONFIRMED\n\r");
    4838:	480f      	ldr	r0, [pc, #60]	; (4878 <print_application_config+0x74>)
    483a:	47a0      	blx	r4
    printf("\nFPort - %d\n\r", DEMO_APP_FPORT);
    483c:	2101      	movs	r1, #1
    483e:	480f      	ldr	r0, [pc, #60]	; (487c <print_application_config+0x78>)
    4840:	47a0      	blx	r4
    printf("\n*******************************************************\n\r");
    4842:	480f      	ldr	r0, [pc, #60]	; (4880 <print_application_config+0x7c>)
    4844:	47a0      	blx	r4
}
    4846:	b003      	add	sp, #12
    4848:	bd30      	pop	{r4, r5, pc}
        printf("CLASS A\n\r");
    484a:	480e      	ldr	r0, [pc, #56]	; (4884 <print_application_config+0x80>)
    484c:	4b04      	ldr	r3, [pc, #16]	; (4860 <print_application_config+0x5c>)
    484e:	4798      	blx	r3
    4850:	e7eb      	b.n	482a <print_application_config+0x26>
        printf("CLASS C\n\r");
    4852:	480d      	ldr	r0, [pc, #52]	; (4888 <print_application_config+0x84>)
    4854:	4b02      	ldr	r3, [pc, #8]	; (4860 <print_application_config+0x5c>)
    4856:	4798      	blx	r3
    4858:	e7e7      	b.n	482a <print_application_config+0x26>
    485a:	46c0      	nop			; (mov r8, r8)
    485c:	0001d104 	.word	0x0001d104
    4860:	0001605d 	.word	0x0001605d
    4864:	0000e4b9 	.word	0x0000e4b9
    4868:	0001d140 	.word	0x0001d140
    486c:	0001d164 	.word	0x0001d164
    4870:	0001d178 	.word	0x0001d178
    4874:	0001d180 	.word	0x0001d180
    4878:	0001d198 	.word	0x0001d198
    487c:	0001d1a8 	.word	0x0001d1a8
    4880:	0001d1b8 	.word	0x0001d1b8
    4884:	0001d14c 	.word	0x0001d14c
    4888:	0001d158 	.word	0x0001d158

0000488c <demo_joindata_callback>:
{
    488c:	b510      	push	{r4, lr}
    488e:	b082      	sub	sp, #8
    4890:	0004      	movs	r4, r0
    set_LED_data(LED_GREEN,&off);
    4892:	4928      	ldr	r1, [pc, #160]	; (4934 <demo_joindata_callback+0xa8>)
    4894:	2003      	movs	r0, #3
    4896:	4b28      	ldr	r3, [pc, #160]	; (4938 <demo_joindata_callback+0xac>)
    4898:	4798      	blx	r3
    if(LORAWAN_SUCCESS == status)
    489a:	2c08      	cmp	r4, #8
    489c:	d018      	beq.n	48d0 <demo_joindata_callback+0x44>
	else if(LORAWAN_NO_CHANNELS_FOUND == status)
    489e:	2c10      	cmp	r4, #16
    48a0:	d03d      	beq.n	491e <demo_joindata_callback+0x92>
        joined = false;
    48a2:	2200      	movs	r2, #0
    48a4:	4b25      	ldr	r3, [pc, #148]	; (493c <demo_joindata_callback+0xb0>)
    48a6:	701a      	strb	r2, [r3, #0]
        set_LED_data(LED_AMBER,&on);
    48a8:	4925      	ldr	r1, [pc, #148]	; (4940 <demo_joindata_callback+0xb4>)
    48aa:	2002      	movs	r0, #2
    48ac:	4b22      	ldr	r3, [pc, #136]	; (4938 <demo_joindata_callback+0xac>)
    48ae:	4798      	blx	r3
        printf("\nJoining Denied\n\r");
    48b0:	4824      	ldr	r0, [pc, #144]	; (4944 <demo_joindata_callback+0xb8>)
    48b2:	4b25      	ldr	r3, [pc, #148]	; (4948 <demo_joindata_callback+0xbc>)
    48b4:	4798      	blx	r3
    printf("\n\r*******************************************************\n\r");
    48b6:	4825      	ldr	r0, [pc, #148]	; (494c <demo_joindata_callback+0xc0>)
    48b8:	4b23      	ldr	r3, [pc, #140]	; (4948 <demo_joindata_callback+0xbc>)
    48ba:	4798      	blx	r3
    PDS_StoreAll();
    48bc:	4b24      	ldr	r3, [pc, #144]	; (4950 <demo_joindata_callback+0xc4>)
    48be:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    48c0:	2203      	movs	r2, #3
    48c2:	4b24      	ldr	r3, [pc, #144]	; (4954 <demo_joindata_callback+0xc8>)
    48c4:	701a      	strb	r2, [r3, #0]
    appPostTask(DISPLAY_TASK_HANDLER);
    48c6:	2000      	movs	r0, #0
    48c8:	4b23      	ldr	r3, [pc, #140]	; (4958 <demo_joindata_callback+0xcc>)
    48ca:	4798      	blx	r3
}
    48cc:	b002      	add	sp, #8
    48ce:	bd10      	pop	{r4, pc}
        joined = true;
    48d0:	2201      	movs	r2, #1
    48d2:	4b1a      	ldr	r3, [pc, #104]	; (493c <demo_joindata_callback+0xb0>)
    48d4:	701a      	strb	r2, [r3, #0]
        printf("\nJoining Successful\n\r");
    48d6:	4821      	ldr	r0, [pc, #132]	; (495c <demo_joindata_callback+0xd0>)
    48d8:	4b1b      	ldr	r3, [pc, #108]	; (4948 <demo_joindata_callback+0xbc>)
    48da:	4798      	blx	r3
        LORAWAN_GetAttr(DEV_ADDR, NULL, &devAddress);
    48dc:	aa01      	add	r2, sp, #4
    48de:	2100      	movs	r1, #0
    48e0:	2002      	movs	r0, #2
    48e2:	4c1f      	ldr	r4, [pc, #124]	; (4960 <demo_joindata_callback+0xd4>)
    48e4:	47a0      	blx	r4
        LORAWAN_GetAttr(MCAST_ENABLE, NULL, &mcastEnabled);
    48e6:	466b      	mov	r3, sp
    48e8:	1cda      	adds	r2, r3, #3
    48ea:	2100      	movs	r1, #0
    48ec:	2028      	movs	r0, #40	; 0x28
    48ee:	47a0      	blx	r4
        if (devAddress != DEMO_APP_MCAST_GROUP_ADDRESS)
    48f0:	9901      	ldr	r1, [sp, #4]
    48f2:	4b1c      	ldr	r3, [pc, #112]	; (4964 <demo_joindata_callback+0xd8>)
    48f4:	4299      	cmp	r1, r3
    48f6:	d009      	beq.n	490c <demo_joindata_callback+0x80>
            printf("\nDevAddr: 0x%lx\n\r", devAddress);
    48f8:	481b      	ldr	r0, [pc, #108]	; (4968 <demo_joindata_callback+0xdc>)
    48fa:	4b13      	ldr	r3, [pc, #76]	; (4948 <demo_joindata_callback+0xbc>)
    48fc:	4798      	blx	r3
        print_application_config();
    48fe:	4b1b      	ldr	r3, [pc, #108]	; (496c <demo_joindata_callback+0xe0>)
    4900:	4798      	blx	r3
        set_LED_data(LED_GREEN,&on);
    4902:	490f      	ldr	r1, [pc, #60]	; (4940 <demo_joindata_callback+0xb4>)
    4904:	2003      	movs	r0, #3
    4906:	4b0c      	ldr	r3, [pc, #48]	; (4938 <demo_joindata_callback+0xac>)
    4908:	4798      	blx	r3
    490a:	e7d4      	b.n	48b6 <demo_joindata_callback+0x2a>
        else if ((devAddress == DEMO_APP_MCAST_GROUP_ADDRESS) && (true == mcastEnabled))
    490c:	466b      	mov	r3, sp
    490e:	3303      	adds	r3, #3
    4910:	781b      	ldrb	r3, [r3, #0]
    4912:	2b00      	cmp	r3, #0
    4914:	d0f3      	beq.n	48fe <demo_joindata_callback+0x72>
            printf("\nAddress conflict between Device Address and Multicast group address\n\r");
    4916:	4816      	ldr	r0, [pc, #88]	; (4970 <demo_joindata_callback+0xe4>)
    4918:	4b0b      	ldr	r3, [pc, #44]	; (4948 <demo_joindata_callback+0xbc>)
    491a:	4798      	blx	r3
    491c:	e7ef      	b.n	48fe <demo_joindata_callback+0x72>
		joined = false;
    491e:	2200      	movs	r2, #0
    4920:	4b06      	ldr	r3, [pc, #24]	; (493c <demo_joindata_callback+0xb0>)
    4922:	701a      	strb	r2, [r3, #0]
		set_LED_data(LED_AMBER,&on);
    4924:	4906      	ldr	r1, [pc, #24]	; (4940 <demo_joindata_callback+0xb4>)
    4926:	2002      	movs	r0, #2
    4928:	4b03      	ldr	r3, [pc, #12]	; (4938 <demo_joindata_callback+0xac>)
    492a:	4798      	blx	r3
		printf("\n No Free Channel found");
    492c:	4811      	ldr	r0, [pc, #68]	; (4974 <demo_joindata_callback+0xe8>)
    492e:	4b06      	ldr	r3, [pc, #24]	; (4948 <demo_joindata_callback+0xbc>)
    4930:	4798      	blx	r3
    4932:	e7c0      	b.n	48b6 <demo_joindata_callback+0x2a>
    4934:	20000b54 	.word	0x20000b54
    4938:	0000b869 	.word	0x0000b869
    493c:	20000b44 	.word	0x20000b44
    4940:	2000005c 	.word	0x2000005c
    4944:	0001ceb0 	.word	0x0001ceb0
    4948:	0001605d 	.word	0x0001605d
    494c:	0001cec4 	.word	0x0001cec4
    4950:	0000b121 	.word	0x0000b121
    4954:	20000b35 	.word	0x20000b35
    4958:	00003dad 	.word	0x00003dad
    495c:	0001ce24 	.word	0x0001ce24
    4960:	0000e4b9 	.word	0x0000e4b9
    4964:	0037cc56 	.word	0x0037cc56
    4968:	0001ce3c 	.word	0x0001ce3c
    496c:	00004805 	.word	0x00004805
    4970:	0001ce50 	.word	0x0001ce50
    4974:	0001ce98 	.word	0x0001ce98

00004978 <print_stack_status>:
{
    4978:	b510      	push	{r4, lr}
    switch(status)
    497a:	0003      	movs	r3, r0
    497c:	3b08      	subs	r3, #8
    497e:	b2da      	uxtb	r2, r3
    4980:	2a0d      	cmp	r2, #13
    4982:	d833      	bhi.n	49ec <print_stack_status+0x74>
    4984:	0093      	lsls	r3, r2, #2
    4986:	4a1c      	ldr	r2, [pc, #112]	; (49f8 <print_stack_status+0x80>)
    4988:	58d3      	ldr	r3, [r2, r3]
    498a:	469f      	mov	pc, r3
             printf("\nlorawan_success\n\r");
    498c:	481b      	ldr	r0, [pc, #108]	; (49fc <print_stack_status+0x84>)
    498e:	4b1c      	ldr	r3, [pc, #112]	; (4a00 <print_stack_status+0x88>)
    4990:	4798      	blx	r3
}
    4992:	bd10      	pop	{r4, pc}
             printf("\nlorawan_state : stack_Busy\n\r");
    4994:	481b      	ldr	r0, [pc, #108]	; (4a04 <print_stack_status+0x8c>)
    4996:	4b1a      	ldr	r3, [pc, #104]	; (4a00 <print_stack_status+0x88>)
    4998:	4798      	blx	r3
        break;
    499a:	e7fa      	b.n	4992 <print_stack_status+0x1a>
            printf("\ndevice_not_joined_to_network\n\r");
    499c:	481a      	ldr	r0, [pc, #104]	; (4a08 <print_stack_status+0x90>)
    499e:	4b18      	ldr	r3, [pc, #96]	; (4a00 <print_stack_status+0x88>)
    49a0:	4798      	blx	r3
        break;
    49a2:	e7f6      	b.n	4992 <print_stack_status+0x1a>
            printf("\ninvalid_parameter\n\r");
    49a4:	4819      	ldr	r0, [pc, #100]	; (4a0c <print_stack_status+0x94>)
    49a6:	4b16      	ldr	r3, [pc, #88]	; (4a00 <print_stack_status+0x88>)
    49a8:	4798      	blx	r3
        break;
    49aa:	e7f2      	b.n	4992 <print_stack_status+0x1a>
            printf("\nkeys_not_initialized\n\r");
    49ac:	4818      	ldr	r0, [pc, #96]	; (4a10 <print_stack_status+0x98>)
    49ae:	4b14      	ldr	r3, [pc, #80]	; (4a00 <print_stack_status+0x88>)
    49b0:	4798      	blx	r3
        break;
    49b2:	e7ee      	b.n	4992 <print_stack_status+0x1a>
            printf("\nsilent_immediately_active\n\r");
    49b4:	4817      	ldr	r0, [pc, #92]	; (4a14 <print_stack_status+0x9c>)
    49b6:	4b12      	ldr	r3, [pc, #72]	; (4a00 <print_stack_status+0x88>)
    49b8:	4798      	blx	r3
        break;
    49ba:	e7ea      	b.n	4992 <print_stack_status+0x1a>
            printf("\nframecounter_error_rejoin_needed\n\r");
    49bc:	4816      	ldr	r0, [pc, #88]	; (4a18 <print_stack_status+0xa0>)
    49be:	4b10      	ldr	r3, [pc, #64]	; (4a00 <print_stack_status+0x88>)
    49c0:	4798      	blx	r3
        break;
    49c2:	e7e6      	b.n	4992 <print_stack_status+0x1a>
            printf("\ninvalid_buffer_length\n\r");
    49c4:	4815      	ldr	r0, [pc, #84]	; (4a1c <print_stack_status+0xa4>)
    49c6:	4b0e      	ldr	r3, [pc, #56]	; (4a00 <print_stack_status+0x88>)
    49c8:	4798      	blx	r3
        break;
    49ca:	e7e2      	b.n	4992 <print_stack_status+0x1a>
            printf("\nMAC_paused\n\r");
    49cc:	4814      	ldr	r0, [pc, #80]	; (4a20 <print_stack_status+0xa8>)
    49ce:	4b0c      	ldr	r3, [pc, #48]	; (4a00 <print_stack_status+0x88>)
    49d0:	4798      	blx	r3
        break;
    49d2:	e7de      	b.n	4992 <print_stack_status+0x1a>
            printf("\nno_free_channels_found\n\r");
    49d4:	4813      	ldr	r0, [pc, #76]	; (4a24 <print_stack_status+0xac>)
    49d6:	4b0a      	ldr	r3, [pc, #40]	; (4a00 <print_stack_status+0x88>)
    49d8:	4798      	blx	r3
        break;
    49da:	e7da      	b.n	4992 <print_stack_status+0x1a>
            printf("\nrequest_invalid\n\r");
    49dc:	4812      	ldr	r0, [pc, #72]	; (4a28 <print_stack_status+0xb0>)
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <print_stack_status+0x88>)
    49e0:	4798      	blx	r3
        break;
    49e2:	e7d6      	b.n	4992 <print_stack_status+0x1a>
            printf("\nprev_join_request_in_progress\n\r");
    49e4:	4811      	ldr	r0, [pc, #68]	; (4a2c <print_stack_status+0xb4>)
    49e6:	4b06      	ldr	r3, [pc, #24]	; (4a00 <print_stack_status+0x88>)
    49e8:	4798      	blx	r3
        break;
    49ea:	e7d2      	b.n	4992 <print_stack_status+0x1a>
           printf("\nrequest_failed %d\n\r",status);
    49ec:	0001      	movs	r1, r0
    49ee:	4810      	ldr	r0, [pc, #64]	; (4a30 <print_stack_status+0xb8>)
    49f0:	4b03      	ldr	r3, [pc, #12]	; (4a00 <print_stack_status+0x88>)
    49f2:	4798      	blx	r3
}
    49f4:	e7cd      	b.n	4992 <print_stack_status+0x1a>
    49f6:	46c0      	nop			; (mov r8, r8)
    49f8:	0001c9e8 	.word	0x0001c9e8
    49fc:	0001d200 	.word	0x0001d200
    4a00:	0001605d 	.word	0x0001605d
    4a04:	0001d214 	.word	0x0001d214
    4a08:	0001d234 	.word	0x0001d234
    4a0c:	0001d254 	.word	0x0001d254
    4a10:	0001d26c 	.word	0x0001d26c
    4a14:	0001d284 	.word	0x0001d284
    4a18:	0001d2a4 	.word	0x0001d2a4
    4a1c:	0001d2c8 	.word	0x0001d2c8
    4a20:	0001d2e4 	.word	0x0001d2e4
    4a24:	0001d2f4 	.word	0x0001d2f4
    4a28:	0001d310 	.word	0x0001d310
    4a2c:	0001d324 	.word	0x0001d324
    4a30:	0001d348 	.word	0x0001d348

00004a34 <mote_set_parameters>:
{
    4a34:	b530      	push	{r4, r5, lr}
    4a36:	b083      	sub	sp, #12
    4a38:	000d      	movs	r5, r1
    bool joinBackoffEnable = false;
    4a3a:	466b      	mov	r3, sp
    4a3c:	1ddc      	adds	r4, r3, #7
    4a3e:	2300      	movs	r3, #0
    4a40:	7023      	strb	r3, [r4, #0]
    LORAWAN_Reset(ismBand);
    4a42:	4b1a      	ldr	r3, [pc, #104]	; (4aac <mote_set_parameters+0x78>)
    4a44:	4798      	blx	r3
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    4a46:	0021      	movs	r1, r4
    4a48:	202e      	movs	r0, #46	; 0x2e
    4a4a:	4b19      	ldr	r3, [pc, #100]	; (4ab0 <mote_set_parameters+0x7c>)
    4a4c:	4798      	blx	r3
    status = set_join_parameters(DEMO_APP_ACTIVATION_TYPE);
    4a4e:	2000      	movs	r0, #0
    4a50:	4b18      	ldr	r3, [pc, #96]	; (4ab4 <mote_set_parameters+0x80>)
    4a52:	4798      	blx	r3
    4a54:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS != status)
    4a56:	2808      	cmp	r0, #8
    4a58:	d005      	beq.n	4a66 <mote_set_parameters+0x32>
        printf("\nJoin parameters initialization failed\n\r");
    4a5a:	4817      	ldr	r0, [pc, #92]	; (4ab8 <mote_set_parameters+0x84>)
    4a5c:	4b17      	ldr	r3, [pc, #92]	; (4abc <mote_set_parameters+0x88>)
    4a5e:	4798      	blx	r3
}
    4a60:	0020      	movs	r0, r4
    4a62:	b003      	add	sp, #12
    4a64:	bd30      	pop	{r4, r5, pc}
    status = set_device_type(DEMO_APP_ENDDEVICE_CLASS);
    4a66:	2001      	movs	r0, #1
    4a68:	4b15      	ldr	r3, [pc, #84]	; (4ac0 <mote_set_parameters+0x8c>)
    4a6a:	4798      	blx	r3
    4a6c:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS != status)
    4a6e:	2808      	cmp	r0, #8
    4a70:	d003      	beq.n	4a7a <mote_set_parameters+0x46>
        printf("\nUnsupported Device Type\n\r");
    4a72:	4814      	ldr	r0, [pc, #80]	; (4ac4 <mote_set_parameters+0x90>)
    4a74:	4b11      	ldr	r3, [pc, #68]	; (4abc <mote_set_parameters+0x88>)
    4a76:	4798      	blx	r3
        return status;
    4a78:	e7f2      	b.n	4a60 <mote_set_parameters+0x2c>
    status = LORAWAN_Join(DEMO_APP_ACTIVATION_TYPE);
    4a7a:	2000      	movs	r0, #0
    4a7c:	4b12      	ldr	r3, [pc, #72]	; (4ac8 <mote_set_parameters+0x94>)
    4a7e:	4798      	blx	r3
    4a80:	0004      	movs	r4, r0
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    4a82:	2808      	cmp	r0, #8
    4a84:	d008      	beq.n	4a98 <mote_set_parameters+0x64>
        print_stack_status(status);
    4a86:	4b11      	ldr	r3, [pc, #68]	; (4acc <mote_set_parameters+0x98>)
    4a88:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    4a8a:	2203      	movs	r2, #3
    4a8c:	4b10      	ldr	r3, [pc, #64]	; (4ad0 <mote_set_parameters+0x9c>)
    4a8e:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    4a90:	2000      	movs	r0, #0
    4a92:	4b10      	ldr	r3, [pc, #64]	; (4ad4 <mote_set_parameters+0xa0>)
    4a94:	4798      	blx	r3
    4a96:	e7e3      	b.n	4a60 <mote_set_parameters+0x2c>
    if (LORAWAN_SUCCESS == status && index < sizeof(bandTable))
    4a98:	2d09      	cmp	r5, #9
    4a9a:	d8f4      	bhi.n	4a86 <mote_set_parameters+0x52>
        printf("\nJoin Request Sent for %s\n\r",bandStrings[index]);
    4a9c:	00ad      	lsls	r5, r5, #2
    4a9e:	4b0e      	ldr	r3, [pc, #56]	; (4ad8 <mote_set_parameters+0xa4>)
    4aa0:	58e9      	ldr	r1, [r5, r3]
    4aa2:	480e      	ldr	r0, [pc, #56]	; (4adc <mote_set_parameters+0xa8>)
    4aa4:	4b05      	ldr	r3, [pc, #20]	; (4abc <mote_set_parameters+0x88>)
    4aa6:	4798      	blx	r3
    4aa8:	e7da      	b.n	4a60 <mote_set_parameters+0x2c>
    4aaa:	46c0      	nop			; (mov r8, r8)
    4aac:	000104a5 	.word	0x000104a5
    4ab0:	00010015 	.word	0x00010015
    4ab4:	000045f5 	.word	0x000045f5
    4ab8:	0001d0a0 	.word	0x0001d0a0
    4abc:	0001605d 	.word	0x0001605d
    4ac0:	000047cd 	.word	0x000047cd
    4ac4:	0001d0cc 	.word	0x0001d0cc
    4ac8:	0000de4d 	.word	0x0000de4d
    4acc:	00004979 	.word	0x00004979
    4ad0:	20000b35 	.word	0x20000b35
    4ad4:	00003dad 	.word	0x00003dad
    4ad8:	0001ca50 	.word	0x0001ca50
    4adc:	0001d0e8 	.word	0x0001d0e8

00004ae0 <processTask>:
{
    4ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ae2:	46c6      	mov	lr, r8
    4ae4:	b500      	push	{lr}
    4ae6:	b08a      	sub	sp, #40	; 0x28
	switch(appTaskState)
    4ae8:	4bbf      	ldr	r3, [pc, #764]	; (4de8 <processTask+0x308>)
    4aea:	781b      	ldrb	r3, [r3, #0]
    4aec:	2b01      	cmp	r3, #1
    4aee:	d100      	bne.n	4af2 <processTask+0x12>
    4af0:	e086      	b.n	4c00 <processTask+0x120>
    4af2:	2b00      	cmp	r3, #0
    4af4:	d009      	beq.n	4b0a <processTask+0x2a>
    4af6:	2b02      	cmp	r3, #2
    4af8:	d100      	bne.n	4afc <processTask+0x1c>
    4afa:	e08c      	b.n	4c16 <processTask+0x136>
    4afc:	2b03      	cmp	r3, #3
    4afe:	d100      	bne.n	4b02 <processTask+0x22>
    4b00:	e09c      	b.n	4c3c <processTask+0x15c>
			printf("Error STATE Entered\r\n");
    4b02:	48ba      	ldr	r0, [pc, #744]	; (4dec <processTask+0x30c>)
    4b04:	4bba      	ldr	r3, [pc, #744]	; (4df0 <processTask+0x310>)
    4b06:	4798      	blx	r3
	return SYSTEM_TASK_SUCCESS;
    4b08:	e080      	b.n	4c0c <processTask+0x12c>
	uint8_t prevBand = 0xff;
    4b0a:	2411      	movs	r4, #17
    4b0c:	ab02      	add	r3, sp, #8
    4b0e:	469c      	mov	ip, r3
    4b10:	4464      	add	r4, ip
    4b12:	23ff      	movs	r3, #255	; 0xff
    4b14:	7023      	strb	r3, [r4, #0]
	bool joinBackoffEnable = false;
    4b16:	2200      	movs	r2, #0
    4b18:	3bed      	subs	r3, #237	; 0xed
    4b1a:	4463      	add	r3, ip
    4b1c:	701a      	strb	r2, [r3, #0]
	PDS_RestoreAll();
    4b1e:	4bb5      	ldr	r3, [pc, #724]	; (4df4 <processTask+0x314>)
    4b20:	4798      	blx	r3
	LORAWAN_GetAttr(ISMBAND,NULL,&prevBand);
    4b22:	0022      	movs	r2, r4
    4b24:	2100      	movs	r1, #0
    4b26:	2023      	movs	r0, #35	; 0x23
    4b28:	4bb3      	ldr	r3, [pc, #716]	; (4df8 <processTask+0x318>)
    4b2a:	4798      	blx	r3
		if(bandTable[i] == prevBand)
    4b2c:	7821      	ldrb	r1, [r4, #0]
    4b2e:	4bb3      	ldr	r3, [pc, #716]	; (4dfc <processTask+0x31c>)
    4b30:	781b      	ldrb	r3, [r3, #0]
    4b32:	428b      	cmp	r3, r1
    4b34:	d100      	bne.n	4b38 <processTask+0x58>
    4b36:	e14d      	b.n	4dd4 <processTask+0x2f4>
    4b38:	2301      	movs	r3, #1
    4b3a:	48b0      	ldr	r0, [pc, #704]	; (4dfc <processTask+0x31c>)
    4b3c:	5c1a      	ldrb	r2, [r3, r0]
    4b3e:	428a      	cmp	r2, r1
    4b40:	d016      	beq.n	4b70 <processTask+0x90>
	for (uint32_t i = 0; i < sizeof(bandTable)-1; i++)
    4b42:	3301      	adds	r3, #1
    4b44:	2b09      	cmp	r3, #9
    4b46:	d1f9      	bne.n	4b3c <processTask+0x5c>
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    4b48:	2112      	movs	r1, #18
    4b4a:	ab02      	add	r3, sp, #8
    4b4c:	469c      	mov	ip, r3
    4b4e:	4461      	add	r1, ip
    4b50:	202e      	movs	r0, #46	; 0x2e
    4b52:	4bab      	ldr	r3, [pc, #684]	; (4e00 <processTask+0x320>)
    4b54:	4798      	blx	r3
	uint8_t choice = 0xff;
    4b56:	24ff      	movs	r4, #255	; 0xff
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    4b58:	2c08      	cmp	r4, #8
    4b5a:	d91f      	bls.n	4b9c <processTask+0xbc>
		printf("Restoration failed\r\n");
    4b5c:	48a9      	ldr	r0, [pc, #676]	; (4e04 <processTask+0x324>)
    4b5e:	4ba4      	ldr	r3, [pc, #656]	; (4df0 <processTask+0x310>)
    4b60:	4798      	blx	r3
		appTaskState = DEMO_APP_STATE;
    4b62:	2202      	movs	r2, #2
    4b64:	4ba0      	ldr	r3, [pc, #640]	; (4de8 <processTask+0x308>)
    4b66:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    4b68:	2000      	movs	r0, #0
    4b6a:	4ba7      	ldr	r3, [pc, #668]	; (4e08 <processTask+0x328>)
    4b6c:	4798      	blx	r3
    4b6e:	e04d      	b.n	4c0c <processTask+0x12c>
			choice = i;
    4b70:	b2dc      	uxtb	r4, r3
	if(choice >0 && choice < sizeof(bandTable)-1)
    4b72:	1e62      	subs	r2, r4, #1
    4b74:	2a07      	cmp	r2, #7
    4b76:	d900      	bls.n	4b7a <processTask+0x9a>
    4b78:	e12d      	b.n	4dd6 <processTask+0x2f6>
		status = LORAWAN_Reset(bandTable[choice]);
    4b7a:	22ff      	movs	r2, #255	; 0xff
    4b7c:	4013      	ands	r3, r2
    4b7e:	4a9f      	ldr	r2, [pc, #636]	; (4dfc <processTask+0x31c>)
    4b80:	5cd0      	ldrb	r0, [r2, r3]
    4b82:	4ba2      	ldr	r3, [pc, #648]	; (4e0c <processTask+0x32c>)
    4b84:	4798      	blx	r3
    4b86:	0005      	movs	r5, r0
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    4b88:	2112      	movs	r1, #18
    4b8a:	ab02      	add	r3, sp, #8
    4b8c:	469c      	mov	ip, r3
    4b8e:	4461      	add	r1, ip
    4b90:	202e      	movs	r0, #46	; 0x2e
    4b92:	4b9b      	ldr	r3, [pc, #620]	; (4e00 <processTask+0x320>)
    4b94:	4798      	blx	r3
	if(status == LORAWAN_SUCCESS && choice < sizeof(bandTable)-1)
    4b96:	2d08      	cmp	r5, #8
    4b98:	d1e0      	bne.n	4b5c <processTask+0x7c>
    4b9a:	e7dd      	b.n	4b58 <processTask+0x78>
		uint32_t joinStatus = 0;
    4b9c:	2300      	movs	r3, #0
    4b9e:	9307      	str	r3, [sp, #28]
		PDS_RestoreAll();
    4ba0:	4b94      	ldr	r3, [pc, #592]	; (4df4 <processTask+0x314>)
    4ba2:	4798      	blx	r3
		LORAWAN_GetAttr(LORAWAN_STATUS,NULL, &joinStatus);
    4ba4:	aa07      	add	r2, sp, #28
    4ba6:	2100      	movs	r1, #0
    4ba8:	2020      	movs	r0, #32
    4baa:	4b93      	ldr	r3, [pc, #588]	; (4df8 <processTask+0x318>)
    4bac:	4798      	blx	r3
		printf("\r\nPDS_RestorationStatus: Success\r\n" );
    4bae:	4898      	ldr	r0, [pc, #608]	; (4e10 <processTask+0x330>)
    4bb0:	4b8f      	ldr	r3, [pc, #572]	; (4df0 <processTask+0x310>)
    4bb2:	4798      	blx	r3
		if(joinStatus & LORAWAN_NW_JOINED)
    4bb4:	9b07      	ldr	r3, [sp, #28]
    4bb6:	07db      	lsls	r3, r3, #31
    4bb8:	d514      	bpl.n	4be4 <processTask+0x104>
			joined = true;
    4bba:	2201      	movs	r2, #1
    4bbc:	4b95      	ldr	r3, [pc, #596]	; (4e14 <processTask+0x334>)
    4bbe:	701a      	strb	r2, [r3, #0]
			printf("joinStatus: Joined\r\n");
    4bc0:	4895      	ldr	r0, [pc, #596]	; (4e18 <processTask+0x338>)
    4bc2:	4b8b      	ldr	r3, [pc, #556]	; (4df0 <processTask+0x310>)
    4bc4:	4798      	blx	r3
		printf("Band: %s\r\n",bandStrings[choice]);
    4bc6:	00a4      	lsls	r4, r4, #2
    4bc8:	4b94      	ldr	r3, [pc, #592]	; (4e1c <processTask+0x33c>)
    4bca:	58e1      	ldr	r1, [r4, r3]
    4bcc:	4894      	ldr	r0, [pc, #592]	; (4e20 <processTask+0x340>)
    4bce:	4b95      	ldr	r3, [pc, #596]	; (4e24 <processTask+0x344>)
    4bd0:	4798      	blx	r3
		print_application_config();
    4bd2:	4b95      	ldr	r3, [pc, #596]	; (4e28 <processTask+0x348>)
    4bd4:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    4bd6:	2203      	movs	r2, #3
    4bd8:	4b83      	ldr	r3, [pc, #524]	; (4de8 <processTask+0x308>)
    4bda:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    4bdc:	2000      	movs	r0, #0
    4bde:	4b8a      	ldr	r3, [pc, #552]	; (4e08 <processTask+0x328>)
    4be0:	4798      	blx	r3
    4be2:	e013      	b.n	4c0c <processTask+0x12c>
			joined = false;
    4be4:	2200      	movs	r2, #0
    4be6:	4b8b      	ldr	r3, [pc, #556]	; (4e14 <processTask+0x334>)
    4be8:	701a      	strb	r2, [r3, #0]
			printf("JoinStatus : Denied\r\n");
    4bea:	4890      	ldr	r0, [pc, #576]	; (4e2c <processTask+0x34c>)
    4bec:	4b80      	ldr	r3, [pc, #512]	; (4df0 <processTask+0x310>)
    4bee:	4798      	blx	r3
			set_LED_data(LED_AMBER,&on);
    4bf0:	498f      	ldr	r1, [pc, #572]	; (4e30 <processTask+0x350>)
    4bf2:	2002      	movs	r0, #2
    4bf4:	4b8f      	ldr	r3, [pc, #572]	; (4e34 <processTask+0x354>)
    4bf6:	4798      	blx	r3
			SYSTEM_PostTask(APP_TASK_ID);
    4bf8:	2010      	movs	r0, #16
    4bfa:	4b8f      	ldr	r3, [pc, #572]	; (4e38 <processTask+0x358>)
    4bfc:	4798      	blx	r3
    4bfe:	e7e2      	b.n	4bc6 <processTask+0xe6>
	appTaskState = DEMO_APP_STATE;
    4c00:	2202      	movs	r2, #2
    4c02:	4b79      	ldr	r3, [pc, #484]	; (4de8 <processTask+0x308>)
    4c04:	701a      	strb	r2, [r3, #0]
	appPostTask(DISPLAY_TASK_HANDLER);
    4c06:	2000      	movs	r0, #0
    4c08:	4b7f      	ldr	r3, [pc, #508]	; (4e08 <processTask+0x328>)
    4c0a:	4798      	blx	r3
}
    4c0c:	2000      	movs	r0, #0
    4c0e:	b00a      	add	sp, #40	; 0x28
    4c10:	bc04      	pop	{r2}
    4c12:	4690      	mov	r8, r2
    4c14:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LORAWAN_Reset(bandTable[BAND_NUM]);
    4c16:	4c79      	ldr	r4, [pc, #484]	; (4dfc <processTask+0x31c>)
    4c18:	78a0      	ldrb	r0, [r4, #2]
    4c1a:	4b7c      	ldr	r3, [pc, #496]	; (4e0c <processTask+0x32c>)
    4c1c:	4798      	blx	r3
	mote_set_parameters(bandTable[BAND_NUM],BAND_NUM);
    4c1e:	78a0      	ldrb	r0, [r4, #2]
    4c20:	2102      	movs	r1, #2
    4c22:	4b86      	ldr	r3, [pc, #536]	; (4e3c <processTask+0x35c>)
    4c24:	4798      	blx	r3
	set_LED_data(LED_GREEN,&on);
    4c26:	4982      	ldr	r1, [pc, #520]	; (4e30 <processTask+0x350>)
    4c28:	2003      	movs	r0, #3
    4c2a:	4b82      	ldr	r3, [pc, #520]	; (4e34 <processTask+0x354>)
    4c2c:	4798      	blx	r3
	appTaskState = JOIN_SEND_STATE;
    4c2e:	2203      	movs	r2, #3
    4c30:	4b6d      	ldr	r3, [pc, #436]	; (4de8 <processTask+0x308>)
    4c32:	701a      	strb	r2, [r3, #0]
	appPostTask(DISPLAY_TASK_HANDLER);
    4c34:	2000      	movs	r0, #0
    4c36:	4b74      	ldr	r3, [pc, #464]	; (4e08 <processTask+0x328>)
    4c38:	4798      	blx	r3
    4c3a:	e7e7      	b.n	4c0c <processTask+0x12c>
	if (joined)
    4c3c:	4b75      	ldr	r3, [pc, #468]	; (4e14 <processTask+0x334>)
    4c3e:	781b      	ldrb	r3, [r3, #0]
    4c40:	2b00      	cmp	r3, #0
    4c42:	d0e3      	beq.n	4c0c <processTask+0x12c>
		adc_read_buffer_job(&adc_instance, adc_result_buffer, ADC_SAMPLES);
    4c44:	22fa      	movs	r2, #250	; 0xfa
    4c46:	0092      	lsls	r2, r2, #2
    4c48:	497d      	ldr	r1, [pc, #500]	; (4e40 <processTask+0x360>)
    4c4a:	487e      	ldr	r0, [pc, #504]	; (4e44 <processTask+0x364>)
    4c4c:	4b7e      	ldr	r3, [pc, #504]	; (4e48 <processTask+0x368>)
    4c4e:	4798      	blx	r3
		while (adc_read_done == false) {
    4c50:	4a7e      	ldr	r2, [pc, #504]	; (4e4c <processTask+0x36c>)
    4c52:	7813      	ldrb	r3, [r2, #0]
    4c54:	2b00      	cmp	r3, #0
    4c56:	d0fc      	beq.n	4c52 <processTask+0x172>
		printf("Voltage Recorded - %d\r\n", adc_result_buffer[0]);
    4c58:	4b79      	ldr	r3, [pc, #484]	; (4e40 <processTask+0x360>)
    4c5a:	8819      	ldrh	r1, [r3, #0]
    4c5c:	487c      	ldr	r0, [pc, #496]	; (4e50 <processTask+0x370>)
    4c5e:	4b71      	ldr	r3, [pc, #452]	; (4e24 <processTask+0x344>)
    4c60:	4798      	blx	r3
    4c62:	2414      	movs	r4, #20
		celavg = 0;
    4c64:	2300      	movs	r3, #0
    4c66:	9304      	str	r3, [sp, #16]
				get_resource_data(TEMP_SENSOR,(uint8_t *)&cel_val);
    4c68:	4e7a      	ldr	r6, [pc, #488]	; (4e54 <processTask+0x374>)
    4c6a:	4d7b      	ldr	r5, [pc, #492]	; (4e58 <processTask+0x378>)
				celavg = celavg + cel_val;
    4c6c:	4f7b      	ldr	r7, [pc, #492]	; (4e5c <processTask+0x37c>)
				get_resource_data(TEMP_SENSOR,(uint8_t *)&cel_val);
    4c6e:	0031      	movs	r1, r6
    4c70:	2001      	movs	r0, #1
    4c72:	47a8      	blx	r5
				celavg = celavg + cel_val;
    4c74:	6831      	ldr	r1, [r6, #0]
    4c76:	9804      	ldr	r0, [sp, #16]
    4c78:	47b8      	blx	r7
    4c7a:	9004      	str	r0, [sp, #16]
    4c7c:	3c01      	subs	r4, #1
			for(i=0;i<avgcnt;i++)
    4c7e:	2c00      	cmp	r4, #0
    4c80:	d1f5      	bne.n	4c6e <processTask+0x18e>
			cel_val = celavg/avgcnt;
    4c82:	4e74      	ldr	r6, [pc, #464]	; (4e54 <processTask+0x374>)
    4c84:	4f76      	ldr	r7, [pc, #472]	; (4e60 <processTask+0x380>)
    4c86:	4977      	ldr	r1, [pc, #476]	; (4e64 <processTask+0x384>)
    4c88:	47b8      	blx	r7
    4c8a:	6030      	str	r0, [r6, #0]
			cel_val = at30tse_read_temperature();
    4c8c:	4b76      	ldr	r3, [pc, #472]	; (4e68 <processTask+0x388>)
    4c8e:	4798      	blx	r3
    4c90:	4b76      	ldr	r3, [pc, #472]	; (4e6c <processTask+0x38c>)
    4c92:	4798      	blx	r3
    4c94:	6030      	str	r0, [r6, #0]
			fahren_val = convert_celsius_to_fahrenheit(cel_val);
    4c96:	4c76      	ldr	r4, [pc, #472]	; (4e70 <processTask+0x390>)
    fauren_val = (((celsius_val * 9)/5) + 32);
    4c98:	4b76      	ldr	r3, [pc, #472]	; (4e74 <processTask+0x394>)
    4c9a:	4698      	mov	r8, r3
    4c9c:	4976      	ldr	r1, [pc, #472]	; (4e78 <processTask+0x398>)
    4c9e:	4798      	blx	r3
    4ca0:	4976      	ldr	r1, [pc, #472]	; (4e7c <processTask+0x39c>)
    4ca2:	47b8      	blx	r7
    4ca4:	2184      	movs	r1, #132	; 0x84
    4ca6:	05c9      	lsls	r1, r1, #23
    4ca8:	4b6c      	ldr	r3, [pc, #432]	; (4e5c <processTask+0x37c>)
    4caa:	4798      	blx	r3
			fahren_val = convert_celsius_to_fahrenheit(cel_val);
    4cac:	6020      	str	r0, [r4, #0]
			printf("\nTemperature: ");
    4cae:	4874      	ldr	r0, [pc, #464]	; (4e80 <processTask+0x3a0>)
    4cb0:	4f5c      	ldr	r7, [pc, #368]	; (4e24 <processTask+0x344>)
    4cb2:	47b8      	blx	r7
			snprintf(temp_sen_str,sizeof(temp_sen_str),"%.1fC/%.1fF\n", cel_val, fahren_val);
    4cb4:	4d73      	ldr	r5, [pc, #460]	; (4e84 <processTask+0x3a4>)
    4cb6:	6820      	ldr	r0, [r4, #0]
    4cb8:	47a8      	blx	r5
    4cba:	9002      	str	r0, [sp, #8]
    4cbc:	9103      	str	r1, [sp, #12]
    4cbe:	6830      	ldr	r0, [r6, #0]
    4cc0:	47a8      	blx	r5
    4cc2:	9000      	str	r0, [sp, #0]
    4cc4:	9101      	str	r1, [sp, #4]
    4cc6:	4a70      	ldr	r2, [pc, #448]	; (4e88 <processTask+0x3a8>)
    4cc8:	2119      	movs	r1, #25
    4cca:	4870      	ldr	r0, [pc, #448]	; (4e8c <processTask+0x3ac>)
    4ccc:	4b70      	ldr	r3, [pc, #448]	; (4e90 <processTask+0x3b0>)
    4cce:	4798      	blx	r3
			printf("%.1f \xf8\x43  / %.1f \xf8\x46\r\n", cel_val, fahren_val);
    4cd0:	6830      	ldr	r0, [r6, #0]
    4cd2:	47a8      	blx	r5
    4cd4:	9004      	str	r0, [sp, #16]
    4cd6:	9105      	str	r1, [sp, #20]
    4cd8:	6820      	ldr	r0, [r4, #0]
    4cda:	47a8      	blx	r5
    4cdc:	9000      	str	r0, [sp, #0]
    4cde:	9101      	str	r1, [sp, #4]
    4ce0:	9a04      	ldr	r2, [sp, #16]
    4ce2:	9b05      	ldr	r3, [sp, #20]
    4ce4:	486b      	ldr	r0, [pc, #428]	; (4e94 <processTask+0x3b4>)
    4ce6:	47b8      	blx	r7
			fahren_val = fahren_val*100;
    4ce8:	496b      	ldr	r1, [pc, #428]	; (4e98 <processTask+0x3b8>)
    4cea:	6820      	ldr	r0, [r4, #0]
    4cec:	47c0      	blx	r8
    4cee:	1c05      	adds	r5, r0, #0
    4cf0:	6020      	str	r0, [r4, #0]
			temp = (int)(fahren_val < 0 ? (fahren_val - 0.5) : (fahren_val + 0.5));
    4cf2:	2100      	movs	r1, #0
    4cf4:	4b69      	ldr	r3, [pc, #420]	; (4e9c <processTask+0x3bc>)
    4cf6:	4798      	blx	r3
    4cf8:	2800      	cmp	r0, #0
    4cfa:	d14f      	bne.n	4d9c <processTask+0x2bc>
    4cfc:	1c28      	adds	r0, r5, #0
    4cfe:	4b61      	ldr	r3, [pc, #388]	; (4e84 <processTask+0x3a4>)
    4d00:	4798      	blx	r3
    4d02:	2200      	movs	r2, #0
    4d04:	4b66      	ldr	r3, [pc, #408]	; (4ea0 <processTask+0x3c0>)
    4d06:	4c67      	ldr	r4, [pc, #412]	; (4ea4 <processTask+0x3c4>)
    4d08:	47a0      	blx	r4
    4d0a:	4b67      	ldr	r3, [pc, #412]	; (4ea8 <processTask+0x3c8>)
    4d0c:	4798      	blx	r3
    4d0e:	b280      	uxth	r0, r0
    4d10:	2312      	movs	r3, #18
    4d12:	aa02      	add	r2, sp, #8
    4d14:	4694      	mov	ip, r2
    4d16:	4463      	add	r3, ip
    4d18:	8018      	strh	r0, [r3, #0]
			sbuf[0] = temp >> 8;		// temp high byte
    4d1a:	881a      	ldrh	r2, [r3, #0]
    4d1c:	a907      	add	r1, sp, #28
    4d1e:	0a12      	lsrs	r2, r2, #8
    4d20:	700a      	strb	r2, [r1, #0]
			sbuf[1] = temp & 0xFF;		// temp low byte
    4d22:	881b      	ldrh	r3, [r3, #0]
    4d24:	704b      	strb	r3, [r1, #1]
			delay_ms(10);
    4d26:	200a      	movs	r0, #10
    4d28:	4b60      	ldr	r3, [pc, #384]	; (4eac <processTask+0x3cc>)
    4d2a:	4798      	blx	r3
    4d2c:	2314      	movs	r3, #20
				vbatt = vbatt + temp;
    4d2e:	2212      	movs	r2, #18
    4d30:	a902      	add	r1, sp, #8
    4d32:	468c      	mov	ip, r1
    4d34:	4462      	add	r2, ip
    4d36:	8811      	ldrh	r1, [r2, #0]
    4d38:	3b01      	subs	r3, #1
			for(i=0;i<avgcnt;i++)
    4d3a:	2b00      	cmp	r3, #0
    4d3c:	d1fb      	bne.n	4d36 <processTask+0x256>
			printf("Battery voltage %.2f V \r\n",celavg);
    4d3e:	22a0      	movs	r2, #160	; 0xa0
    4d40:	0612      	lsls	r2, r2, #24
    4d42:	4b5b      	ldr	r3, [pc, #364]	; (4eb0 <processTask+0x3d0>)
    4d44:	485b      	ldr	r0, [pc, #364]	; (4eb4 <processTask+0x3d4>)
    4d46:	4937      	ldr	r1, [pc, #220]	; (4e24 <processTask+0x344>)
    4d48:	4788      	blx	r1
			sbuf[2] = adc_result_buffer[0] >> 8;//0x01;//vbatt >>8;	// vbatt high
    4d4a:	4b3d      	ldr	r3, [pc, #244]	; (4e40 <processTask+0x360>)
    4d4c:	881a      	ldrh	r2, [r3, #0]
    4d4e:	ab07      	add	r3, sp, #28
    4d50:	0a11      	lsrs	r1, r2, #8
    4d52:	7099      	strb	r1, [r3, #2]
			sbuf[3] = adc_result_buffer[0] &0xFF;//0xF3;//vbatt & 0xFF;	// vbatt low
    4d54:	70da      	strb	r2, [r3, #3]
			sbuf[4] = 0x02;//Sending Fixed Time
    4d56:	2202      	movs	r2, #2
    4d58:	711a      	strb	r2, [r3, #4]
			sbuf[5] = 0x02;//Sending Fixed Time
    4d5a:	715a      	strb	r2, [r3, #5]
			sbuf[6] = 0x00; // terminator
    4d5c:	2200      	movs	r2, #0
    4d5e:	719a      	strb	r2, [r3, #6]
			for (i = 0; i < 7; i++)
    4d60:	2300      	movs	r3, #0
				temp_sen_str[i] = sbuf[i];
    4d62:	484a      	ldr	r0, [pc, #296]	; (4e8c <processTask+0x3ac>)
    4d64:	a907      	add	r1, sp, #28
    4d66:	5c5a      	ldrb	r2, [r3, r1]
    4d68:	541a      	strb	r2, [r3, r0]
			for (i = 0; i < 7; i++)
    4d6a:	3301      	adds	r3, #1
    4d6c:	2b07      	cmp	r3, #7
    4d6e:	d1fa      	bne.n	4d66 <processTask+0x286>
			lorawanSendReq.bufferLength = 6;
    4d70:	4851      	ldr	r0, [pc, #324]	; (4eb8 <processTask+0x3d8>)
    4d72:	3b01      	subs	r3, #1
    4d74:	7203      	strb	r3, [r0, #8]
    lorawanSendReq.buffer = &temp_sen_str;
    4d76:	4b45      	ldr	r3, [pc, #276]	; (4e8c <processTask+0x3ac>)
    4d78:	6043      	str	r3, [r0, #4]
    lorawanSendReq.confirmed = DEMO_APP_TRANSMISSION_TYPE;
    4d7a:	2300      	movs	r3, #0
    4d7c:	7003      	strb	r3, [r0, #0]
    lorawanSendReq.port = DEMO_APP_FPORT;
    4d7e:	3301      	adds	r3, #1
    4d80:	7043      	strb	r3, [r0, #1]
    status = LORAWAN_Send(&lorawanSendReq);
    4d82:	4b4e      	ldr	r3, [pc, #312]	; (4ebc <processTask+0x3dc>)
    4d84:	4798      	blx	r3
    if (LORAWAN_SUCCESS == status)
    4d86:	2808      	cmp	r0, #8
    4d88:	d013      	beq.n	4db2 <processTask+0x2d2>
        print_stack_status(status);
    4d8a:	4b4d      	ldr	r3, [pc, #308]	; (4ec0 <processTask+0x3e0>)
    4d8c:	4798      	blx	r3
		appTaskState = JOIN_SEND_STATE;
    4d8e:	2203      	movs	r2, #3
    4d90:	4b15      	ldr	r3, [pc, #84]	; (4de8 <processTask+0x308>)
    4d92:	701a      	strb	r2, [r3, #0]
		appPostTask(DISPLAY_TASK_HANDLER);
    4d94:	2000      	movs	r0, #0
    4d96:	4b1c      	ldr	r3, [pc, #112]	; (4e08 <processTask+0x328>)
    4d98:	4798      	blx	r3
    4d9a:	e737      	b.n	4c0c <processTask+0x12c>
			temp = (int)(fahren_val < 0 ? (fahren_val - 0.5) : (fahren_val + 0.5));
    4d9c:	1c28      	adds	r0, r5, #0
    4d9e:	4b39      	ldr	r3, [pc, #228]	; (4e84 <processTask+0x3a4>)
    4da0:	4798      	blx	r3
    4da2:	2200      	movs	r2, #0
    4da4:	4b3e      	ldr	r3, [pc, #248]	; (4ea0 <processTask+0x3c0>)
    4da6:	4c47      	ldr	r4, [pc, #284]	; (4ec4 <processTask+0x3e4>)
    4da8:	47a0      	blx	r4
    4daa:	4b3f      	ldr	r3, [pc, #252]	; (4ea8 <processTask+0x3c8>)
    4dac:	4798      	blx	r3
    4dae:	b280      	uxth	r0, r0
    4db0:	e7ae      	b.n	4d10 <processTask+0x230>
        printf("\nTx Data Sent \r\n");
    4db2:	4845      	ldr	r0, [pc, #276]	; (4ec8 <processTask+0x3e8>)
    4db4:	4b0e      	ldr	r3, [pc, #56]	; (4df0 <processTask+0x310>)
    4db6:	4798      	blx	r3
        set_LED_data(LED_GREEN,&on);
    4db8:	491d      	ldr	r1, [pc, #116]	; (4e30 <processTask+0x350>)
    4dba:	2003      	movs	r0, #3
    4dbc:	4b1d      	ldr	r3, [pc, #116]	; (4e34 <processTask+0x354>)
    4dbe:	4798      	blx	r3
        SwTimerStart(lTimerId,MS_TO_US(100),SW_TIMEOUT_RELATIVE,(void *)lTimerCb,NULL);
    4dc0:	4b42      	ldr	r3, [pc, #264]	; (4ecc <processTask+0x3ec>)
    4dc2:	7818      	ldrb	r0, [r3, #0]
    4dc4:	2300      	movs	r3, #0
    4dc6:	9300      	str	r3, [sp, #0]
    4dc8:	4b41      	ldr	r3, [pc, #260]	; (4ed0 <processTask+0x3f0>)
    4dca:	2200      	movs	r2, #0
    4dcc:	4941      	ldr	r1, [pc, #260]	; (4ed4 <processTask+0x3f4>)
    4dce:	4c42      	ldr	r4, [pc, #264]	; (4ed8 <processTask+0x3f8>)
    4dd0:	47a0      	blx	r4
    4dd2:	e71b      	b.n	4c0c <processTask+0x12c>
			choice = i;
    4dd4:	2400      	movs	r4, #0
    LORAWAN_SetAttr(JOIN_BACKOFF_ENABLE,&joinBackoffEnable);
    4dd6:	2112      	movs	r1, #18
    4dd8:	ab02      	add	r3, sp, #8
    4dda:	469c      	mov	ip, r3
    4ddc:	4461      	add	r1, ip
    4dde:	202e      	movs	r0, #46	; 0x2e
    4de0:	4b07      	ldr	r3, [pc, #28]	; (4e00 <processTask+0x320>)
    4de2:	4798      	blx	r3
    4de4:	e6b8      	b.n	4b58 <processTask+0x78>
    4de6:	46c0      	nop			; (mov r8, r8)
    4de8:	20000b35 	.word	0x20000b35
    4dec:	0001cfa8 	.word	0x0001cfa8
    4df0:	00016121 	.word	0x00016121
    4df4:	0000b035 	.word	0x0000b035
    4df8:	0000e4b9 	.word	0x0000e4b9
    4dfc:	2000000c 	.word	0x2000000c
    4e00:	00010015 	.word	0x00010015
    4e04:	0001d3bc 	.word	0x0001d3bc
    4e08:	00003dad 	.word	0x00003dad
    4e0c:	000104a5 	.word	0x000104a5
    4e10:	0001d360 	.word	0x0001d360
    4e14:	20000b44 	.word	0x20000b44
    4e18:	0001d384 	.word	0x0001d384
    4e1c:	0001ca50 	.word	0x0001ca50
    4e20:	0001d3b0 	.word	0x0001d3b0
    4e24:	0001605d 	.word	0x0001605d
    4e28:	00004805 	.word	0x00004805
    4e2c:	0001d398 	.word	0x0001d398
    4e30:	2000005c 	.word	0x2000005c
    4e34:	0000b869 	.word	0x0000b869
    4e38:	0000c555 	.word	0x0000c555
    4e3c:	00004a35 	.word	0x00004a35
    4e40:	20001104 	.word	0x20001104
    4e44:	200018d4 	.word	0x200018d4
    4e48:	00000941 	.word	0x00000941
    4e4c:	20000b33 	.word	0x20000b33
    4e50:	0001d3d0 	.word	0x0001d3d0
    4e54:	20000b38 	.word	0x20000b38
    4e58:	0000b8d9 	.word	0x0000b8d9
    4e5c:	000132f5 	.word	0x000132f5
    4e60:	00013619 	.word	0x00013619
    4e64:	41a00000 	.word	0x41a00000
    4e68:	00000395 	.word	0x00000395
    4e6c:	00015a91 	.word	0x00015a91
    4e70:	20000b40 	.word	0x20000b40
    4e74:	000139f9 	.word	0x000139f9
    4e78:	41100000 	.word	0x41100000
    4e7c:	40a00000 	.word	0x40a00000
    4e80:	0001d3e8 	.word	0x0001d3e8
    4e84:	000159ed 	.word	0x000159ed
    4e88:	0001d3f8 	.word	0x0001d3f8
    4e8c:	20000b64 	.word	0x20000b64
    4e90:	00016331 	.word	0x00016331
    4e94:	0001d408 	.word	0x0001d408
    4e98:	42c80000 	.word	0x42c80000
    4e9c:	00013021 	.word	0x00013021
    4ea0:	3fe00000 	.word	0x3fe00000
    4ea4:	000140dd 	.word	0x000140dd
    4ea8:	00015891 	.word	0x00015891
    4eac:	00000181 	.word	0x00000181
    4eb0:	40139999 	.word	0x40139999
    4eb4:	0001d420 	.word	0x0001d420
    4eb8:	20000b48 	.word	0x20000b48
    4ebc:	0000d239 	.word	0x0000d239
    4ec0:	00004979 	.word	0x00004979
    4ec4:	00015265 	.word	0x00015265
    4ec8:	0001d43c 	.word	0x0001d43c
    4ecc:	20000060 	.word	0x20000060
    4ed0:	00004209 	.word	0x00004209
    4ed4:	000186a0 	.word	0x000186a0
    4ed8:	0000bf29 	.word	0x0000bf29

00004edc <main>:
 * \mainpage
 * \section preface Preface
 * This is the reference manual for the LORAWAN Demo Application of EU Band
 */
int main(void)
{
    4edc:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ede:	b085      	sub	sp, #20
    /* System Initialization */
    system_init();
    4ee0:	4b3b      	ldr	r3, [pc, #236]	; (4fd0 <main+0xf4>)
    4ee2:	4798      	blx	r3
    /* Initialize the delay driver */
    delay_init();
    4ee4:	4b3b      	ldr	r3, [pc, #236]	; (4fd4 <main+0xf8>)
    4ee6:	4798      	blx	r3
    /* Initialize the board target resources */
    board_init();
    4ee8:	4b3b      	ldr	r3, [pc, #236]	; (4fd8 <main+0xfc>)
    4eea:	4798      	blx	r3

    INTERRUPT_GlobalInterruptEnable();
    4eec:	2201      	movs	r2, #1
    4eee:	4b3b      	ldr	r3, [pc, #236]	; (4fdc <main+0x100>)
    4ef0:	701a      	strb	r2, [r3, #0]
    4ef2:	f3bf 8f5f 	dmb	sy
    4ef6:	b662      	cpsie	i

/* Initializes all the hardware and software modules used for Stack operation */
static void driver_init(void)
{
    /* Initialize the Radio Hardware */
    HAL_RadioInit();
    4ef8:	4b39      	ldr	r3, [pc, #228]	; (4fe0 <main+0x104>)
    4efa:	4798      	blx	r3
    /* Initialize the AES Hardware Engine */
    AESInit();
    4efc:	4b39      	ldr	r3, [pc, #228]	; (4fe4 <main+0x108>)
    4efe:	4798      	blx	r3
    /* Initialize the Software Timer Module */
    SystemTimerInit();
    4f00:	4b39      	ldr	r3, [pc, #228]	; (4fe8 <main+0x10c>)
    4f02:	4798      	blx	r3
#ifdef CONF_PMM_ENABLE
    /* Initialize the Sleep Timer Module */
    SleepTimerInit();
    4f04:	4b39      	ldr	r3, [pc, #228]	; (4fec <main+0x110>)
    4f06:	4798      	blx	r3
#endif
#if (ENABLE_PDS == 1)
    /* PDS Module Init */
    PDS_Init();
    4f08:	4b39      	ldr	r3, [pc, #228]	; (4ff0 <main+0x114>)
    4f0a:	4798      	blx	r3
    sio2host_init();
    4f0c:	4b39      	ldr	r3, [pc, #228]	; (4ff4 <main+0x118>)
    4f0e:	4798      	blx	r3
 *
 * \return An enum value indicating the cause of the last system reset.
 */
static inline enum system_reset_cause system_get_reset_cause(void)
{
	return (enum system_reset_cause)RSTC->RCAUSE.reg;
    4f10:	4b39      	ldr	r3, [pc, #228]	; (4ff8 <main+0x11c>)
    4f12:	781c      	ldrb	r4, [r3, #0]
    4f14:	b2e4      	uxtb	r4, r4
    printf("Last reset cause: ");
    4f16:	4839      	ldr	r0, [pc, #228]	; (4ffc <main+0x120>)
    4f18:	4b39      	ldr	r3, [pc, #228]	; (5000 <main+0x124>)
    4f1a:	4798      	blx	r3
    if(rcause & (1 << 6)) {
    4f1c:	0663      	lsls	r3, r4, #25
    4f1e:	d502      	bpl.n	4f26 <main+0x4a>
        printf("System Reset Request\r\n");
    4f20:	4838      	ldr	r0, [pc, #224]	; (5004 <main+0x128>)
    4f22:	4b39      	ldr	r3, [pc, #228]	; (5008 <main+0x12c>)
    4f24:	4798      	blx	r3
    if(rcause & (1 << 5)) {
    4f26:	06a3      	lsls	r3, r4, #26
    4f28:	d502      	bpl.n	4f30 <main+0x54>
        printf("Watchdog Reset\r\n");
    4f2a:	4838      	ldr	r0, [pc, #224]	; (500c <main+0x130>)
    4f2c:	4b36      	ldr	r3, [pc, #216]	; (5008 <main+0x12c>)
    4f2e:	4798      	blx	r3
    if(rcause & (1 << 4)) {
    4f30:	06e3      	lsls	r3, r4, #27
    4f32:	d502      	bpl.n	4f3a <main+0x5e>
        printf("External Reset\r\n");
    4f34:	4836      	ldr	r0, [pc, #216]	; (5010 <main+0x134>)
    4f36:	4b34      	ldr	r3, [pc, #208]	; (5008 <main+0x12c>)
    4f38:	4798      	blx	r3
    if(rcause & (1 << 2)) {
    4f3a:	0763      	lsls	r3, r4, #29
    4f3c:	d502      	bpl.n	4f44 <main+0x68>
        printf("Brown Out 33 Detector Reset\r\n");
    4f3e:	4835      	ldr	r0, [pc, #212]	; (5014 <main+0x138>)
    4f40:	4b31      	ldr	r3, [pc, #196]	; (5008 <main+0x12c>)
    4f42:	4798      	blx	r3
    if(rcause & (1 << 1)) {
    4f44:	07a3      	lsls	r3, r4, #30
    4f46:	d502      	bpl.n	4f4e <main+0x72>
        printf("Brown Out 12 Detector Reset\r\n");
    4f48:	4833      	ldr	r0, [pc, #204]	; (5018 <main+0x13c>)
    4f4a:	4b2f      	ldr	r3, [pc, #188]	; (5008 <main+0x12c>)
    4f4c:	4798      	blx	r3
    if(rcause & (1 << 0)) {
    4f4e:	07e3      	lsls	r3, r4, #31
    4f50:	d502      	bpl.n	4f58 <main+0x7c>
        printf("Power-On Reset\r\n");
    4f52:	4832      	ldr	r0, [pc, #200]	; (501c <main+0x140>)
    4f54:	4b2c      	ldr	r3, [pc, #176]	; (5008 <main+0x12c>)
    4f56:	4798      	blx	r3
    Stack_Init();
    4f58:	4b31      	ldr	r3, [pc, #196]	; (5020 <main+0x144>)
    4f5a:	4798      	blx	r3
    SwTimerCreate(&demoTimerId);
    4f5c:	4831      	ldr	r0, [pc, #196]	; (5024 <main+0x148>)
    4f5e:	4c32      	ldr	r4, [pc, #200]	; (5028 <main+0x14c>)
    4f60:	47a0      	blx	r4
    SwTimerCreate(&lTimerId);
    4f62:	4832      	ldr	r0, [pc, #200]	; (502c <main+0x150>)
    4f64:	47a0      	blx	r4
    mote_demo_init();
    4f66:	4b32      	ldr	r3, [pc, #200]	; (5030 <main+0x154>)
    4f68:	4798      	blx	r3
	at30tse_init();
    4f6a:	4b32      	ldr	r3, [pc, #200]	; (5034 <main+0x158>)
    4f6c:	4798      	blx	r3
        SYSTEM_RunTasks();
    4f6e:	4d32      	ldr	r5, [pc, #200]	; (5038 <main+0x15c>)
						if (false == certAppEnabled )
    4f70:	4c32      	ldr	r4, [pc, #200]	; (503c <main+0x160>)
								sleepReq.pmmWakeupCallback = appWakeup;
    4f72:	4e33      	ldr	r6, [pc, #204]	; (5040 <main+0x164>)
        SYSTEM_RunTasks();
    4f74:	47a8      	blx	r5
						if (false == certAppEnabled )
    4f76:	7823      	ldrb	r3, [r4, #0]
    4f78:	2b00      	cmp	r3, #0
    4f7a:	d1fb      	bne.n	4f74 <main+0x98>
								sleepReq.sleepTimeMs = DEMO_CONF_DEFAULT_APP_SLEEP_TIME_MS;
    4f7c:	ab01      	add	r3, sp, #4
    4f7e:	4a31      	ldr	r2, [pc, #196]	; (5044 <main+0x168>)
    4f80:	9201      	str	r2, [sp, #4]
								sleepReq.pmmWakeupCallback = appWakeup;
    4f82:	9603      	str	r6, [sp, #12]
								sleepReq.sleep_mode = CONF_PMM_SLEEPMODE_WHEN_IDLE;
    4f84:	2201      	movs	r2, #1
    4f86:	711a      	strb	r2, [r3, #4]
									deviceResetsForWakeup = false;
    4f88:	2200      	movs	r2, #0
    4f8a:	4b2f      	ldr	r3, [pc, #188]	; (5048 <main+0x16c>)
    4f8c:	701a      	strb	r2, [r3, #0]
								if (true == LORAWAN_ReadyToSleep(deviceResetsForWakeup))
    4f8e:	2000      	movs	r0, #0
    4f90:	4b2e      	ldr	r3, [pc, #184]	; (504c <main+0x170>)
    4f92:	4798      	blx	r3
    4f94:	2800      	cmp	r0, #0
    4f96:	d0ed      	beq.n	4f74 <main+0x98>
	config->direction  = PORT_PIN_DIR_INPUT;
    4f98:	2300      	movs	r3, #0
    4f9a:	466a      	mov	r2, sp
    4f9c:	7013      	strb	r3, [r2, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    4f9e:	3301      	adds	r3, #1
    4fa0:	7053      	strb	r3, [r2, #1]
static void app_resources_uninit(void)
{
    /* Disable USART TX and RX Pins */
    struct port_config pin_conf;
    port_get_config_defaults(&pin_conf);
    pin_conf.powersave  = true;
    4fa2:	7093      	strb	r3, [r2, #2]
    port_pin_set_config(HOST_SERCOM_PAD0_PIN, &pin_conf);
    4fa4:	4669      	mov	r1, sp
    4fa6:	2004      	movs	r0, #4
    4fa8:	4f29      	ldr	r7, [pc, #164]	; (5050 <main+0x174>)
    4faa:	47b8      	blx	r7
    port_pin_set_config(HOST_SERCOM_PAD1_PIN, &pin_conf);
    4fac:	4669      	mov	r1, sp
    4fae:	2005      	movs	r0, #5
    4fb0:	47b8      	blx	r7
    /* Disable UART module */
    sio2host_deinit();
    4fb2:	4b28      	ldr	r3, [pc, #160]	; (5054 <main+0x178>)
    4fb4:	4798      	blx	r3
    /* Disable Transceiver SPI Module */
    HAL_RadioDeInit();
    4fb6:	4b28      	ldr	r3, [pc, #160]	; (5058 <main+0x17c>)
    4fb8:	4798      	blx	r3
									if (PMM_SLEEP_REQ_DENIED == PMM_Sleep(&sleepReq))
    4fba:	a801      	add	r0, sp, #4
    4fbc:	4b27      	ldr	r3, [pc, #156]	; (505c <main+0x180>)
    4fbe:	4798      	blx	r3
    4fc0:	2800      	cmp	r0, #0
    4fc2:	d1d7      	bne.n	4f74 <main+0x98>
										HAL_Radio_resources_init();
    4fc4:	4b26      	ldr	r3, [pc, #152]	; (5060 <main+0x184>)
    4fc6:	4798      	blx	r3
										sio2host_init();
    4fc8:	4b0a      	ldr	r3, [pc, #40]	; (4ff4 <main+0x118>)
    4fca:	4798      	blx	r3
    4fcc:	e7d2      	b.n	4f74 <main+0x98>
    4fce:	46c0      	nop			; (mov r8, r8)
    4fd0:	0000342d 	.word	0x0000342d
    4fd4:	00000115 	.word	0x00000115
    4fd8:	0000021d 	.word	0x0000021d
    4fdc:	20000008 	.word	0x20000008
    4fe0:	00005171 	.word	0x00005171
    4fe4:	0000ae09 	.word	0x0000ae09
    4fe8:	0000be8d 	.word	0x0000be8d
    4fec:	0000554d 	.word	0x0000554d
    4ff0:	0000af71 	.word	0x0000af71
    4ff4:	00003b45 	.word	0x00003b45
    4ff8:	40000800 	.word	0x40000800
    4ffc:	0001d654 	.word	0x0001d654
    5000:	0001605d 	.word	0x0001605d
    5004:	0001d668 	.word	0x0001d668
    5008:	00016121 	.word	0x00016121
    500c:	0001d680 	.word	0x0001d680
    5010:	0001d690 	.word	0x0001d690
    5014:	0001d6a0 	.word	0x0001d6a0
    5018:	0001d6c0 	.word	0x0001d6c0
    501c:	0001d6e0 	.word	0x0001d6e0
    5020:	0000c4d9 	.word	0x0000c4d9
    5024:	2000005f 	.word	0x2000005f
    5028:	0000bef5 	.word	0x0000bef5
    502c:	20000060 	.word	0x20000060
    5030:	000043b9 	.word	0x000043b9
    5034:	00000289 	.word	0x00000289
    5038:	0000c4e9 	.word	0x0000c4e9
    503c:	20000b3c 	.word	0x20000b3c
    5040:	00004519 	.word	0x00004519
    5044:	00001388 	.word	0x00001388
    5048:	20000b7d 	.word	0x20000b7d
    504c:	0001070d 	.word	0x0001070d
    5050:	0000108d 	.word	0x0000108d
    5054:	00003c91 	.word	0x00003c91
    5058:	0000534d 	.word	0x0000534d
    505c:	000056b1 	.word	0x000056b1
    5060:	00005329 	.word	0x00005329

00005064 <HAL_SPISend>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    5064:	4b13      	ldr	r3, [pc, #76]	; (50b4 <HAL_SPISend+0x50>)
    5066:	681b      	ldr	r3, [r3, #0]
static uint8_t HAL_SPISend(uint8_t data)
{
	uint16_t read_val = 0;
	
	/* Write the byte in the transceiver data register */
	while (!spi_is_ready_to_write(&master));
    5068:	2101      	movs	r1, #1
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_DRE);
    506a:	7e1a      	ldrb	r2, [r3, #24]
    506c:	420a      	tst	r2, r1
    506e:	d0fc      	beq.n	506a <HAL_SPISend+0x6>
    5070:	7e1a      	ldrb	r2, [r3, #24]
	if (!spi_is_ready_to_write(module)) {
    5072:	07d2      	lsls	r2, r2, #31
    5074:	d500      	bpl.n	5078 <HAL_SPISend+0x14>
	spi_module->DATA.reg = tx_data & SERCOM_SPI_DATA_MASK;
    5076:	6298      	str	r0, [r3, #40]	; 0x28
	spi_write(&master, data);
	while (!spi_is_write_complete(&master));
    5078:	2102      	movs	r1, #2
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_TXC);
    507a:	7e1a      	ldrb	r2, [r3, #24]
    507c:	420a      	tst	r2, r1
    507e:	d0fc      	beq.n	507a <HAL_SPISend+0x16>
	
	while (!spi_is_ready_to_read(&master));
    5080:	2104      	movs	r1, #4
	return (spi_module->INTFLAG.reg & SERCOM_SPI_INTFLAG_RXC);
    5082:	7e1a      	ldrb	r2, [r3, #24]
    5084:	420a      	tst	r2, r1
    5086:	d0fc      	beq.n	5082 <HAL_SPISend+0x1e>
    5088:	7e1a      	ldrb	r2, [r3, #24]
	uint16_t read_val = 0;
    508a:	2000      	movs	r0, #0
	if (!spi_is_ready_to_read(module)) {
    508c:	0752      	lsls	r2, r2, #29
    508e:	d50a      	bpl.n	50a6 <HAL_SPISend+0x42>
	if (spi_module->STATUS.reg & SERCOM_SPI_STATUS_BUFOVF) {
    5090:	8b5a      	ldrh	r2, [r3, #26]
    5092:	0752      	lsls	r2, r2, #29
    5094:	d501      	bpl.n	509a <HAL_SPISend+0x36>
		spi_module->STATUS.reg = SERCOM_SPI_STATUS_BUFOVF;
    5096:	2204      	movs	r2, #4
    5098:	835a      	strh	r2, [r3, #26]
	if (module->character_size == SPI_CHARACTER_SIZE_9BIT) {
    509a:	4a06      	ldr	r2, [pc, #24]	; (50b4 <HAL_SPISend+0x50>)
    509c:	7992      	ldrb	r2, [r2, #6]
    509e:	2a01      	cmp	r2, #1
    50a0:	d003      	beq.n	50aa <HAL_SPISend+0x46>
		*rx_data = (uint8_t)spi_module->DATA.reg;
    50a2:	6a98      	ldr	r0, [r3, #40]	; 0x28
    50a4:	b2c0      	uxtb	r0, r0
	spi_read(&master, &read_val);
	
	return ((uint8_t)read_val);
    50a6:	b2c0      	uxtb	r0, r0
}
    50a8:	4770      	bx	lr
		*rx_data = (spi_module->DATA.reg & SERCOM_SPI_DATA_MASK);
    50aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
    50ac:	05c0      	lsls	r0, r0, #23
    50ae:	0dc0      	lsrs	r0, r0, #23
    50b0:	e7f9      	b.n	50a6 <HAL_SPISend+0x42>
    50b2:	46c0      	nop			; (mov r8, r8)
    50b4:	20000b8c 	.word	0x20000b8c

000050b8 <HAL_ResetPinMakeOutput>:
{
    50b8:	b500      	push	{lr}
    50ba:	b083      	sub	sp, #12
    50bc:	a901      	add	r1, sp, #4
    50be:	2301      	movs	r3, #1
    50c0:	704b      	strb	r3, [r1, #1]
	config->powersave  = false;
    50c2:	2200      	movs	r2, #0
    50c4:	708a      	strb	r2, [r1, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    50c6:	700b      	strb	r3, [r1, #0]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    50c8:	202f      	movs	r0, #47	; 0x2f
    50ca:	4b02      	ldr	r3, [pc, #8]	; (50d4 <HAL_ResetPinMakeOutput+0x1c>)
    50cc:	4798      	blx	r3
}
    50ce:	b003      	add	sp, #12
    50d0:	bd00      	pop	{pc}
    50d2:	46c0      	nop			; (mov r8, r8)
    50d4:	0000108d 	.word	0x0000108d

000050d8 <HAL_RadioDIO2Callback>:
{
    50d8:	b510      	push	{r4, lr}
  if (interruptHandlerDio2)
    50da:	4b05      	ldr	r3, [pc, #20]	; (50f0 <HAL_RadioDIO2Callback+0x18>)
    50dc:	681b      	ldr	r3, [r3, #0]
    50de:	2b00      	cmp	r3, #0
    50e0:	d004      	beq.n	50ec <HAL_RadioDIO2Callback+0x14>
	PMM_Wakeup();
    50e2:	4b04      	ldr	r3, [pc, #16]	; (50f4 <HAL_RadioDIO2Callback+0x1c>)
    50e4:	4798      	blx	r3
    interruptHandlerDio2();
    50e6:	4b02      	ldr	r3, [pc, #8]	; (50f0 <HAL_RadioDIO2Callback+0x18>)
    50e8:	681b      	ldr	r3, [r3, #0]
    50ea:	4798      	blx	r3
}
    50ec:	bd10      	pop	{r4, pc}
    50ee:	46c0      	nop			; (mov r8, r8)
    50f0:	20000b88 	.word	0x20000b88
    50f4:	0000562d 	.word	0x0000562d

000050f8 <HAL_RadioDIO1Callback>:
{
    50f8:	b510      	push	{r4, lr}
  if (interruptHandlerDio1)
    50fa:	4b05      	ldr	r3, [pc, #20]	; (5110 <HAL_RadioDIO1Callback+0x18>)
    50fc:	681b      	ldr	r3, [r3, #0]
    50fe:	2b00      	cmp	r3, #0
    5100:	d004      	beq.n	510c <HAL_RadioDIO1Callback+0x14>
	PMM_Wakeup();
    5102:	4b04      	ldr	r3, [pc, #16]	; (5114 <HAL_RadioDIO1Callback+0x1c>)
    5104:	4798      	blx	r3
    interruptHandlerDio1();
    5106:	4b02      	ldr	r3, [pc, #8]	; (5110 <HAL_RadioDIO1Callback+0x18>)
    5108:	681b      	ldr	r3, [r3, #0]
    510a:	4798      	blx	r3
}
    510c:	bd10      	pop	{r4, pc}
    510e:	46c0      	nop			; (mov r8, r8)
    5110:	20000b84 	.word	0x20000b84
    5114:	0000562d 	.word	0x0000562d

00005118 <HAL_RadioDIO0Callback>:
{
    5118:	b510      	push	{r4, lr}
  if (interruptHandlerDio0)
    511a:	4b05      	ldr	r3, [pc, #20]	; (5130 <HAL_RadioDIO0Callback+0x18>)
    511c:	681b      	ldr	r3, [r3, #0]
    511e:	2b00      	cmp	r3, #0
    5120:	d004      	beq.n	512c <HAL_RadioDIO0Callback+0x14>
	PMM_Wakeup();
    5122:	4b04      	ldr	r3, [pc, #16]	; (5134 <HAL_RadioDIO0Callback+0x1c>)
    5124:	4798      	blx	r3
    interruptHandlerDio0();
    5126:	4b02      	ldr	r3, [pc, #8]	; (5130 <HAL_RadioDIO0Callback+0x18>)
    5128:	681b      	ldr	r3, [r3, #0]
    512a:	4798      	blx	r3
}
    512c:	bd10      	pop	{r4, pc}
    512e:	46c0      	nop			; (mov r8, r8)
    5130:	20000b80 	.word	0x20000b80
    5134:	0000562d 	.word	0x0000562d

00005138 <HAL_SPICSAssert>:
{
    5138:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, true);
    513a:	2201      	movs	r2, #1
    513c:	4902      	ldr	r1, [pc, #8]	; (5148 <HAL_SPICSAssert+0x10>)
    513e:	4803      	ldr	r0, [pc, #12]	; (514c <HAL_SPICSAssert+0x14>)
    5140:	4b03      	ldr	r3, [pc, #12]	; (5150 <HAL_SPICSAssert+0x18>)
    5142:	4798      	blx	r3
}
    5144:	bd10      	pop	{r4, pc}
    5146:	46c0      	nop			; (mov r8, r8)
    5148:	200018f4 	.word	0x200018f4
    514c:	20000b8c 	.word	0x20000b8c
    5150:	0000248d 	.word	0x0000248d

00005154 <HAL_SPICSDeassert>:
{
    5154:	b510      	push	{r4, lr}
	spi_select_slave(&master, &slave, false);
    5156:	2200      	movs	r2, #0
    5158:	4902      	ldr	r1, [pc, #8]	; (5164 <HAL_SPICSDeassert+0x10>)
    515a:	4803      	ldr	r0, [pc, #12]	; (5168 <HAL_SPICSDeassert+0x14>)
    515c:	4b03      	ldr	r3, [pc, #12]	; (516c <HAL_SPICSDeassert+0x18>)
    515e:	4798      	blx	r3
}
    5160:	bd10      	pop	{r4, pc}
    5162:	46c0      	nop			; (mov r8, r8)
    5164:	200018f4 	.word	0x200018f4
    5168:	20000b8c 	.word	0x20000b8c
    516c:	0000248d 	.word	0x0000248d

00005170 <HAL_RadioInit>:
{
    5170:	b5f0      	push	{r4, r5, r6, r7, lr}
    5172:	46d6      	mov	lr, sl
    5174:	464f      	mov	r7, r9
    5176:	4646      	mov	r6, r8
    5178:	b5c0      	push	{r6, r7, lr}
    517a:	b090      	sub	sp, #64	; 0x40
	config->input_pull = PORT_PIN_PULL_UP;
    517c:	ac01      	add	r4, sp, #4
    517e:	2601      	movs	r6, #1
    5180:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    5182:	2500      	movs	r5, #0
    5184:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    5186:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(SX_RF_SPI_SCK, &pin_conf);
    5188:	0021      	movs	r1, r4
    518a:	2052      	movs	r0, #82	; 0x52
    518c:	4f52      	ldr	r7, [pc, #328]	; (52d8 <HAL_RadioInit+0x168>)
    518e:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_MOSI, &pin_conf);
    5190:	0021      	movs	r1, r4
    5192:	203e      	movs	r0, #62	; 0x3e
    5194:	47b8      	blx	r7
	port_pin_set_config(SX_RF_SPI_CS, &pin_conf);
    5196:	0021      	movs	r1, r4
    5198:	203f      	movs	r0, #63	; 0x3f
    519a:	47b8      	blx	r7
	port_pin_set_config(SX_RF_RESET_PIN, &pin_conf);
    519c:	0021      	movs	r1, r4
    519e:	202f      	movs	r0, #47	; 0x2f
    51a0:	47b8      	blx	r7
		port_base->OUTSET.reg = pin_mask;
    51a2:	2280      	movs	r2, #128	; 0x80
    51a4:	02d2      	lsls	r2, r2, #11
    51a6:	4b4d      	ldr	r3, [pc, #308]	; (52dc <HAL_RadioInit+0x16c>)
    51a8:	619a      	str	r2, [r3, #24]
    51aa:	4b4d      	ldr	r3, [pc, #308]	; (52e0 <HAL_RadioInit+0x170>)
    51ac:	2280      	movs	r2, #128	; 0x80
    51ae:	05d2      	lsls	r2, r2, #23
    51b0:	619a      	str	r2, [r3, #24]
    51b2:	2280      	movs	r2, #128	; 0x80
    51b4:	0612      	lsls	r2, r2, #24
    51b6:	619a      	str	r2, [r3, #24]
    51b8:	2280      	movs	r2, #128	; 0x80
    51ba:	0212      	lsls	r2, r2, #8
    51bc:	619a      	str	r2, [r3, #24]
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
    51be:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(SX_RF_SPI_MISO, &pin_conf);
    51c0:	0021      	movs	r1, r4
    51c2:	2053      	movs	r0, #83	; 0x53
    51c4:	47b8      	blx	r7
	extint_chan_get_config_defaults(&config_extint_chan);
    51c6:	ac02      	add	r4, sp, #8
    51c8:	0020      	movs	r0, r4
    51ca:	4b46      	ldr	r3, [pc, #280]	; (52e4 <HAL_RadioInit+0x174>)
    51cc:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO0_EIC_PIN;
    51ce:	2330      	movs	r3, #48	; 0x30
    51d0:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO0_EIC_MUX;
    51d2:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    51d4:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    51d6:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO0_EIC_LINE, &config_extint_chan);
    51d8:	0021      	movs	r1, r4
    51da:	2000      	movs	r0, #0
    51dc:	4b42      	ldr	r3, [pc, #264]	; (52e8 <HAL_RadioInit+0x178>)
    51de:	469a      	mov	sl, r3
    51e0:	4798      	blx	r3
	extint_register_callback(HAL_RadioDIO0Callback,DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    51e2:	2200      	movs	r2, #0
    51e4:	2100      	movs	r1, #0
    51e6:	4841      	ldr	r0, [pc, #260]	; (52ec <HAL_RadioInit+0x17c>)
    51e8:	4b41      	ldr	r3, [pc, #260]	; (52f0 <HAL_RadioInit+0x180>)
    51ea:	4699      	mov	r9, r3
    51ec:	4798      	blx	r3
	extint_chan_enable_callback(DIO0_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    51ee:	2100      	movs	r1, #0
    51f0:	2000      	movs	r0, #0
    51f2:	4b40      	ldr	r3, [pc, #256]	; (52f4 <HAL_RadioInit+0x184>)
    51f4:	4698      	mov	r8, r3
    51f6:	4798      	blx	r3
	config_extint_chan.gpio_pin           = DIO1_EIC_PIN;
    51f8:	230b      	movs	r3, #11
    51fa:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO1_EIC_MUX;
    51fc:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    51fe:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    5200:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO1_EIC_LINE, &config_extint_chan);
    5202:	0021      	movs	r1, r4
    5204:	200b      	movs	r0, #11
    5206:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO1Callback,DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5208:	2200      	movs	r2, #0
    520a:	210b      	movs	r1, #11
    520c:	483a      	ldr	r0, [pc, #232]	; (52f8 <HAL_RadioInit+0x188>)
    520e:	47c8      	blx	r9
	extint_chan_enable_callback(DIO1_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5210:	2100      	movs	r1, #0
    5212:	200b      	movs	r0, #11
    5214:	47c0      	blx	r8
	config_extint_chan.gpio_pin           = DIO2_EIC_PIN;
    5216:	230c      	movs	r3, #12
    5218:	9302      	str	r3, [sp, #8]
	config_extint_chan.gpio_pin_mux       = DIO2_EIC_MUX;
    521a:	6065      	str	r5, [r4, #4]
	config_extint_chan.gpio_pin_pull      = EXTINT_PULL_NONE;
    521c:	7225      	strb	r5, [r4, #8]
	config_extint_chan.detection_criteria = EXTINT_DETECT_RISING;
    521e:	72e6      	strb	r6, [r4, #11]
	extint_chan_set_config(DIO2_EIC_LINE, &config_extint_chan);
    5220:	0021      	movs	r1, r4
    5222:	200c      	movs	r0, #12
    5224:	47d0      	blx	sl
	extint_register_callback(HAL_RadioDIO2Callback,DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    5226:	2200      	movs	r2, #0
    5228:	210c      	movs	r1, #12
    522a:	4834      	ldr	r0, [pc, #208]	; (52fc <HAL_RadioInit+0x18c>)
    522c:	47c8      	blx	r9
	extint_chan_enable_callback(DIO2_EIC_LINE,EXTINT_CALLBACK_TYPE_DETECT);
    522e:	2100      	movs	r1, #0
    5230:	200c      	movs	r0, #12
    5232:	47c0      	blx	r8
	slave->ss_pin          = config->ss_pin;
    5234:	4b32      	ldr	r3, [pc, #200]	; (5300 <HAL_RadioInit+0x190>)
    5236:	4698      	mov	r8, r3
    5238:	233f      	movs	r3, #63	; 0x3f
    523a:	4642      	mov	r2, r8
    523c:	7013      	strb	r3, [r2, #0]
	slave->address_enabled = config->address_enabled;
    523e:	7055      	strb	r5, [r2, #1]
	slave->address         = config->address;
    5240:	7095      	strb	r5, [r2, #2]
	config->input_pull = PORT_PIN_PULL_UP;
    5242:	7066      	strb	r6, [r4, #1]
	config->powersave  = false;
    5244:	70a5      	strb	r5, [r4, #2]
	pin_conf.direction = PORT_PIN_DIR_OUTPUT;
    5246:	7026      	strb	r6, [r4, #0]
	port_pin_set_config(slave->ss_pin, &pin_conf);
    5248:	0021      	movs	r1, r4
    524a:	203f      	movs	r0, #63	; 0x3f
    524c:	47b8      	blx	r7
	port_pin_set_output_level(slave->ss_pin, true);
    524e:	4643      	mov	r3, r8
    5250:	781a      	ldrb	r2, [r3, #0]
	if (port_index < PORT_INST_NUM) {
    5252:	09d1      	lsrs	r1, r2, #7
		return NULL;
    5254:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    5256:	2900      	cmp	r1, #0
    5258:	d104      	bne.n	5264 <HAL_RadioInit+0xf4>
		return &(ports[port_index]->Group[group_index]);
    525a:	0953      	lsrs	r3, r2, #5
    525c:	01db      	lsls	r3, r3, #7
    525e:	4929      	ldr	r1, [pc, #164]	; (5304 <HAL_RadioInit+0x194>)
    5260:	468c      	mov	ip, r1
    5262:	4463      	add	r3, ip
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    5264:	211f      	movs	r1, #31
    5266:	4011      	ands	r1, r2
    5268:	2201      	movs	r2, #1
    526a:	0010      	movs	r0, r2
    526c:	4088      	lsls	r0, r1
		port_base->OUTSET.reg = pin_mask;
    526e:	6198      	str	r0, [r3, #24]
	config->mode             = SPI_MODE_MASTER;
    5270:	ac02      	add	r4, sp, #8
    5272:	7022      	strb	r2, [r4, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
    5274:	2300      	movs	r3, #0
    5276:	9303      	str	r3, [sp, #12]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
    5278:	9304      	str	r3, [sp, #16]
	config->character_size   = SPI_CHARACTER_SIZE_8BIT;
    527a:	7423      	strb	r3, [r4, #16]
	config->run_in_standby   = false;
    527c:	7463      	strb	r3, [r4, #17]
	config->receiver_enable  = true;
    527e:	74a2      	strb	r2, [r4, #18]
	config->select_slave_low_detect_enable= true;
    5280:	74e2      	strb	r2, [r4, #19]
	config->master_slave_select_enable= false;
    5282:	7523      	strb	r3, [r4, #20]
	config->generator_source = GCLK_GENERATOR_0;
    5284:	3223      	adds	r2, #35	; 0x23
    5286:	54a3      	strb	r3, [r4, r2]
	memset(&(config->mode_specific), 0, sizeof(config->mode_specific));
    5288:	3a18      	subs	r2, #24
    528a:	2100      	movs	r1, #0
    528c:	a808      	add	r0, sp, #32
    528e:	4b1e      	ldr	r3, [pc, #120]	; (5308 <HAL_RadioInit+0x198>)
    5290:	4798      	blx	r3
	config_spi_master.mode_specific.master.baudrate = SX_RF_SPI_BAUDRATE;
    5292:	4b1e      	ldr	r3, [pc, #120]	; (530c <HAL_RadioInit+0x19c>)
    5294:	61a3      	str	r3, [r4, #24]
	config_spi_master.mux_setting = SX_RF_SPI_SERCOM_MUX_SETTING;
    5296:	2380      	movs	r3, #128	; 0x80
    5298:	025b      	lsls	r3, r3, #9
    529a:	60e3      	str	r3, [r4, #12]
	config_spi_master.pinmux_pad0 = SX_RF_SPI_SERCOM_PINMUX_PAD0;
    529c:	4b1c      	ldr	r3, [pc, #112]	; (5310 <HAL_RadioInit+0x1a0>)
    529e:	62a3      	str	r3, [r4, #40]	; 0x28
	config_spi_master.pinmux_pad1 = PINMUX_UNUSED;
    52a0:	2301      	movs	r3, #1
    52a2:	425b      	negs	r3, r3
    52a4:	62e3      	str	r3, [r4, #44]	; 0x2c
	config_spi_master.pinmux_pad2 = SX_RF_SPI_SERCOM_PINMUX_PAD2;
    52a6:	4b1b      	ldr	r3, [pc, #108]	; (5314 <HAL_RadioInit+0x1a4>)
    52a8:	6323      	str	r3, [r4, #48]	; 0x30
	config_spi_master.pinmux_pad3 = SX_RF_SPI_SERCOM_PINMUX_PAD3;
    52aa:	4b1b      	ldr	r3, [pc, #108]	; (5318 <HAL_RadioInit+0x1a8>)
    52ac:	6363      	str	r3, [r4, #52]	; 0x34
	spi_init(&master, SX_RF_SPI, &config_spi_master);	
    52ae:	4d1b      	ldr	r5, [pc, #108]	; (531c <HAL_RadioInit+0x1ac>)
    52b0:	0022      	movs	r2, r4
    52b2:	491b      	ldr	r1, [pc, #108]	; (5320 <HAL_RadioInit+0x1b0>)
    52b4:	0028      	movs	r0, r5
    52b6:	4b1b      	ldr	r3, [pc, #108]	; (5324 <HAL_RadioInit+0x1b4>)
    52b8:	4798      	blx	r3
	SercomSpi *const spi_module = &(module->hw->SPI);
    52ba:	682a      	ldr	r2, [r5, #0]
	return (spi_module->SYNCBUSY.reg);
    52bc:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    52be:	2b00      	cmp	r3, #0
    52c0:	d1fc      	bne.n	52bc <HAL_RadioInit+0x14c>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    52c2:	6813      	ldr	r3, [r2, #0]
    52c4:	2102      	movs	r1, #2
    52c6:	430b      	orrs	r3, r1
    52c8:	6013      	str	r3, [r2, #0]
}
    52ca:	b010      	add	sp, #64	; 0x40
    52cc:	bc1c      	pop	{r2, r3, r4}
    52ce:	4690      	mov	r8, r2
    52d0:	4699      	mov	r9, r3
    52d2:	46a2      	mov	sl, r4
    52d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    52d6:	46c0      	nop			; (mov r8, r8)
    52d8:	0000108d 	.word	0x0000108d
    52dc:	40002900 	.word	0x40002900
    52e0:	40002880 	.word	0x40002880
    52e4:	00000c71 	.word	0x00000c71
    52e8:	00000c85 	.word	0x00000c85
    52ec:	00005119 	.word	0x00005119
    52f0:	00000b31 	.word	0x00000b31
    52f4:	00000b5d 	.word	0x00000b5d
    52f8:	000050f9 	.word	0x000050f9
    52fc:	000050d9 	.word	0x000050d9
    5300:	200018f4 	.word	0x200018f4
    5304:	40002800 	.word	0x40002800
    5308:	00015fc9 	.word	0x00015fc9
    530c:	001e8480 	.word	0x001e8480
    5310:	00530005 	.word	0x00530005
    5314:	003e0005 	.word	0x003e0005
    5318:	00520005 	.word	0x00520005
    531c:	20000b8c 	.word	0x20000b8c
    5320:	42001000 	.word	0x42001000
    5324:	000021b1 	.word	0x000021b1

00005328 <HAL_Radio_resources_init>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    5328:	4b07      	ldr	r3, [pc, #28]	; (5348 <HAL_Radio_resources_init+0x20>)
    532a:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    532c:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    532e:	2b00      	cmp	r3, #0
    5330:	d1fc      	bne.n	532c <HAL_Radio_resources_init+0x4>
	spi_module->CTRLA.reg |= SERCOM_SPI_CTRLA_ENABLE;
    5332:	6813      	ldr	r3, [r2, #0]
    5334:	2102      	movs	r1, #2
    5336:	430b      	orrs	r3, r1
    5338:	6013      	str	r3, [r2, #0]
	SercomSpi *const spi_module = &(module->hw->SPI);
    533a:	4b03      	ldr	r3, [pc, #12]	; (5348 <HAL_Radio_resources_init+0x20>)
    533c:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    533e:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(&master)) {
    5340:	2b00      	cmp	r3, #0
    5342:	d1fc      	bne.n	533e <HAL_Radio_resources_init+0x16>
}
    5344:	4770      	bx	lr
    5346:	46c0      	nop			; (mov r8, r8)
    5348:	20000b8c 	.word	0x20000b8c

0000534c <HAL_RadioDeInit>:
	SercomSpi *const spi_module = &(module->hw->SPI);
    534c:	4b06      	ldr	r3, [pc, #24]	; (5368 <HAL_RadioDeInit+0x1c>)
    534e:	681a      	ldr	r2, [r3, #0]
	return (spi_module->SYNCBUSY.reg);
    5350:	69d3      	ldr	r3, [r2, #28]
	while (spi_is_syncing(module)) {
    5352:	2b00      	cmp	r3, #0
    5354:	d1fc      	bne.n	5350 <HAL_RadioDeInit+0x4>
	spi_module->INTENCLR.reg = SERCOM_SPI_INTENCLR_MASK;
    5356:	338f      	adds	r3, #143	; 0x8f
    5358:	7513      	strb	r3, [r2, #20]
	spi_module->INTFLAG.reg = SERCOM_SPI_INTFLAG_MASK;
    535a:	7613      	strb	r3, [r2, #24]
	spi_module->CTRLA.reg &= ~SERCOM_SPI_CTRLA_ENABLE;
    535c:	6813      	ldr	r3, [r2, #0]
    535e:	2102      	movs	r1, #2
    5360:	438b      	bics	r3, r1
    5362:	6013      	str	r3, [r2, #0]
}
    5364:	4770      	bx	lr
    5366:	46c0      	nop			; (mov r8, r8)
    5368:	20000b8c 	.word	0x20000b8c

0000536c <RADIO_Reset>:
{
    536c:	b570      	push	{r4, r5, r6, lr}
    536e:	b082      	sub	sp, #8
	HAL_ResetPinMakeOutput();
    5370:	4c0a      	ldr	r4, [pc, #40]	; (539c <RADIO_Reset+0x30>)
    5372:	47a0      	blx	r4
		port_base->OUTCLR.reg = pin_mask;
    5374:	4d0a      	ldr	r5, [pc, #40]	; (53a0 <RADIO_Reset+0x34>)
    5376:	2680      	movs	r6, #128	; 0x80
    5378:	0236      	lsls	r6, r6, #8
    537a:	616e      	str	r6, [r5, #20]
	SystemBlockingWaitMs(1);
    537c:	2001      	movs	r0, #1
    537e:	4b09      	ldr	r3, [pc, #36]	; (53a4 <RADIO_Reset+0x38>)
    5380:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
    5382:	a901      	add	r1, sp, #4
    5384:	2300      	movs	r3, #0
    5386:	700b      	strb	r3, [r1, #0]
	config->input_pull = PORT_PIN_PULL_UP;
    5388:	2201      	movs	r2, #1
    538a:	704a      	strb	r2, [r1, #1]
	config->powersave  = false;
    538c:	708b      	strb	r3, [r1, #2]
	port_pin_set_config(SX_RF_RESET_PIN,&pin_conf);
    538e:	202f      	movs	r0, #47	; 0x2f
    5390:	4b05      	ldr	r3, [pc, #20]	; (53a8 <RADIO_Reset+0x3c>)
    5392:	4798      	blx	r3
		port_base->OUTSET.reg = pin_mask;
    5394:	61ae      	str	r6, [r5, #24]
	HAL_ResetPinMakeOutput();
    5396:	47a0      	blx	r4
}
    5398:	b002      	add	sp, #8
    539a:	bd70      	pop	{r4, r5, r6, pc}
    539c:	000050b9 	.word	0x000050b9
    53a0:	40002880 	.word	0x40002880
    53a4:	000055f9 	.word	0x000055f9
    53a8:	0000108d 	.word	0x0000108d

000053ac <RADIO_RegisterWrite>:
{
    53ac:	b570      	push	{r4, r5, r6, lr}
    53ae:	0004      	movs	r4, r0
    53b0:	000d      	movs	r5, r1
	HAL_SPICSAssert();
    53b2:	4b05      	ldr	r3, [pc, #20]	; (53c8 <RADIO_RegisterWrite+0x1c>)
    53b4:	4798      	blx	r3
	HAL_SPISend(REG_WRITE_CMD | reg);
    53b6:	2080      	movs	r0, #128	; 0x80
    53b8:	4320      	orrs	r0, r4
    53ba:	4c04      	ldr	r4, [pc, #16]	; (53cc <RADIO_RegisterWrite+0x20>)
    53bc:	47a0      	blx	r4
	HAL_SPISend(value);
    53be:	0028      	movs	r0, r5
    53c0:	47a0      	blx	r4
	HAL_SPICSDeassert();
    53c2:	4b03      	ldr	r3, [pc, #12]	; (53d0 <RADIO_RegisterWrite+0x24>)
    53c4:	4798      	blx	r3
}
    53c6:	bd70      	pop	{r4, r5, r6, pc}
    53c8:	00005139 	.word	0x00005139
    53cc:	00005065 	.word	0x00005065
    53d0:	00005155 	.word	0x00005155

000053d4 <RADIO_RegisterRead>:
{
    53d4:	b510      	push	{r4, lr}
    53d6:	0004      	movs	r4, r0
	HAL_SPICSAssert();
    53d8:	4b06      	ldr	r3, [pc, #24]	; (53f4 <RADIO_RegisterRead+0x20>)
    53da:	4798      	blx	r3
	HAL_SPISend(reg);
    53dc:	207f      	movs	r0, #127	; 0x7f
    53de:	4020      	ands	r0, r4
    53e0:	4c05      	ldr	r4, [pc, #20]	; (53f8 <RADIO_RegisterRead+0x24>)
    53e2:	47a0      	blx	r4
	readValue = HAL_SPISend(0xFF);
    53e4:	20ff      	movs	r0, #255	; 0xff
    53e6:	47a0      	blx	r4
    53e8:	0004      	movs	r4, r0
	HAL_SPICSDeassert();
    53ea:	4b04      	ldr	r3, [pc, #16]	; (53fc <RADIO_RegisterRead+0x28>)
    53ec:	4798      	blx	r3
}
    53ee:	0020      	movs	r0, r4
    53f0:	bd10      	pop	{r4, pc}
    53f2:	46c0      	nop			; (mov r8, r8)
    53f4:	00005139 	.word	0x00005139
    53f8:	00005065 	.word	0x00005065
    53fc:	00005155 	.word	0x00005155

00005400 <RADIO_FrameWrite>:
{
    5400:	b570      	push	{r4, r5, r6, lr}
    5402:	0004      	movs	r4, r0
    5404:	000e      	movs	r6, r1
    5406:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    5408:	4b0a      	ldr	r3, [pc, #40]	; (5434 <RADIO_FrameWrite+0x34>)
    540a:	4798      	blx	r3
    HAL_SPISend(REG_WRITE_CMD | offset);
    540c:	2080      	movs	r0, #128	; 0x80
    540e:	4320      	orrs	r0, r4
    5410:	4b09      	ldr	r3, [pc, #36]	; (5438 <RADIO_FrameWrite+0x38>)
    5412:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    5414:	2d00      	cmp	r5, #0
    5416:	d00a      	beq.n	542e <RADIO_FrameWrite+0x2e>
    5418:	0034      	movs	r4, r6
    541a:	3d01      	subs	r5, #1
    541c:	b2ed      	uxtb	r5, r5
    541e:	3501      	adds	r5, #1
    5420:	1975      	adds	r5, r6, r5
	    HAL_SPISend(buffer[i]);
    5422:	4e05      	ldr	r6, [pc, #20]	; (5438 <RADIO_FrameWrite+0x38>)
    5424:	7820      	ldrb	r0, [r4, #0]
    5426:	47b0      	blx	r6
    5428:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    542a:	42ac      	cmp	r4, r5
    542c:	d1fa      	bne.n	5424 <RADIO_FrameWrite+0x24>
    HAL_SPICSDeassert();
    542e:	4b03      	ldr	r3, [pc, #12]	; (543c <RADIO_FrameWrite+0x3c>)
    5430:	4798      	blx	r3
}
    5432:	bd70      	pop	{r4, r5, r6, pc}
    5434:	00005139 	.word	0x00005139
    5438:	00005065 	.word	0x00005065
    543c:	00005155 	.word	0x00005155

00005440 <RADIO_FrameRead>:
{
    5440:	b570      	push	{r4, r5, r6, lr}
    5442:	0004      	movs	r4, r0
    5444:	000e      	movs	r6, r1
    5446:	0015      	movs	r5, r2
    HAL_SPICSAssert();
    5448:	4b0a      	ldr	r3, [pc, #40]	; (5474 <RADIO_FrameRead+0x34>)
    544a:	4798      	blx	r3
    HAL_SPISend(offset);
    544c:	0020      	movs	r0, r4
    544e:	4b0a      	ldr	r3, [pc, #40]	; (5478 <RADIO_FrameRead+0x38>)
    5450:	4798      	blx	r3
    for (uint8_t i = 0; i < bufferLen; i++)
    5452:	2d00      	cmp	r5, #0
    5454:	d00b      	beq.n	546e <RADIO_FrameRead+0x2e>
    5456:	0034      	movs	r4, r6
    5458:	3d01      	subs	r5, #1
    545a:	b2ed      	uxtb	r5, r5
    545c:	3501      	adds	r5, #1
    545e:	1975      	adds	r5, r6, r5
	    buffer[i] = HAL_SPISend(0xFF);
    5460:	4e05      	ldr	r6, [pc, #20]	; (5478 <RADIO_FrameRead+0x38>)
    5462:	20ff      	movs	r0, #255	; 0xff
    5464:	47b0      	blx	r6
    5466:	7020      	strb	r0, [r4, #0]
    5468:	3401      	adds	r4, #1
    for (uint8_t i = 0; i < bufferLen; i++)
    546a:	42ac      	cmp	r4, r5
    546c:	d1f9      	bne.n	5462 <RADIO_FrameRead+0x22>
    HAL_SPICSDeassert();
    546e:	4b03      	ldr	r3, [pc, #12]	; (547c <RADIO_FrameRead+0x3c>)
    5470:	4798      	blx	r3
}
    5472:	bd70      	pop	{r4, r5, r6, pc}
    5474:	00005139 	.word	0x00005139
    5478:	00005065 	.word	0x00005065
    547c:	00005155 	.word	0x00005155

00005480 <HAL_RegisterDioInterruptHandler>:
 * \param[in] dioPin  - DIO pin
 * \param[in] handler - function to be called upon given DIO interrupt
 */
void HAL_RegisterDioInterruptHandler(uint8_t dioPin, DioInterruptHandler_t handler)
{
  switch (dioPin)
    5480:	2802      	cmp	r0, #2
    5482:	d007      	beq.n	5494 <HAL_RegisterDioInterruptHandler+0x14>
    5484:	2804      	cmp	r0, #4
    5486:	d008      	beq.n	549a <HAL_RegisterDioInterruptHandler+0x1a>
    5488:	2801      	cmp	r0, #1
    548a:	d000      	beq.n	548e <HAL_RegisterDioInterruptHandler+0xe>
#endif

    default:
      break;
  }
}
    548c:	4770      	bx	lr
      interruptHandlerDio0 = handler;
    548e:	4b04      	ldr	r3, [pc, #16]	; (54a0 <HAL_RegisterDioInterruptHandler+0x20>)
    5490:	6019      	str	r1, [r3, #0]
      break;
    5492:	e7fb      	b.n	548c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio1 = handler;
    5494:	4b03      	ldr	r3, [pc, #12]	; (54a4 <HAL_RegisterDioInterruptHandler+0x24>)
    5496:	6019      	str	r1, [r3, #0]
      break;
    5498:	e7f8      	b.n	548c <HAL_RegisterDioInterruptHandler+0xc>
      interruptHandlerDio2 = handler;
    549a:	4b03      	ldr	r3, [pc, #12]	; (54a8 <HAL_RegisterDioInterruptHandler+0x28>)
    549c:	6019      	str	r1, [r3, #0]
}
    549e:	e7f5      	b.n	548c <HAL_RegisterDioInterruptHandler+0xc>
    54a0:	20000b80 	.word	0x20000b80
    54a4:	20000b84 	.word	0x20000b84
    54a8:	20000b88 	.word	0x20000b88

000054ac <HAL_EnableRFCtrl>:

void HAL_EnableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
   if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    54ac:	2801      	cmp	r0, #1
    54ae:	d001      	beq.n	54b4 <HAL_EnableRFCtrl+0x8>
    54b0:	2900      	cmp	r1, #0
    54b2:	d103      	bne.n	54bc <HAL_EnableRFCtrl+0x10>
    54b4:	2280      	movs	r2, #128	; 0x80
    54b6:	0192      	lsls	r2, r2, #6
    54b8:	4b01      	ldr	r3, [pc, #4]	; (54c0 <HAL_EnableRFCtrl+0x14>)
    54ba:	619a      	str	r2, [r3, #24]
   {
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_ACTIVE);		
   }
#endif	
}
    54bc:	4770      	bx	lr
    54be:	46c0      	nop			; (mov r8, r8)
    54c0:	40002800 	.word	0x40002800

000054c4 <HAL_DisableRFCtrl>:

void HAL_DisableRFCtrl(RFCtrl1_t RFCtrl1, RFCtrl2_t RFCtrl2)
{
	/* In standard SAMR34_XPRO, Only RFO_HF and PA_BOOST needs to be controlled by a GPIO pin */
#ifdef RFSWITCH_ENABLE
	if ((RFCtrl1 == RFO_HF) || (RFCtrl2 == RX))
    54c4:	2801      	cmp	r0, #1
    54c6:	d001      	beq.n	54cc <HAL_DisableRFCtrl+0x8>
    54c8:	2900      	cmp	r1, #0
    54ca:	d103      	bne.n	54d4 <HAL_DisableRFCtrl+0x10>
		port_base->OUTCLR.reg = pin_mask;
    54cc:	2280      	movs	r2, #128	; 0x80
    54ce:	0192      	lsls	r2, r2, #6
    54d0:	4b01      	ldr	r3, [pc, #4]	; (54d8 <HAL_DisableRFCtrl+0x14>)
    54d2:	615a      	str	r2, [r3, #20]
	{
		port_pin_set_output_level(RF_SWITCH_PIN, RF_SWITCH_INACTIVE);	
	}
#endif	
}
    54d4:	4770      	bx	lr
    54d6:	46c0      	nop			; (mov r8, r8)
    54d8:	40002800 	.word	0x40002800

000054dc <HAL_GetRadioClkStabilizationDelay>:
 * \param[out] Time value in ms
 */
uint8_t HAL_GetRadioClkStabilizationDelay(void)
{
	return RADIO_CLK_STABILITATION_DELAY;
}
    54dc:	2002      	movs	r0, #2
    54de:	4770      	bx	lr

000054e0 <HAL_GetRadioClkSrc>:
 * \param[out] Type of clock source TCXO or XTAL
 */
RadioClockSources_t HAL_GetRadioClkSrc(void)
{
	return RADIO_CLK_SRC;
}
    54e0:	2000      	movs	r0, #0
    54e2:	4770      	bx	lr

000054e4 <HAL_TCXOPowerOn>:
 *
 * \param[in] None
 * \param[out] None
 */
void HAL_TCXOPowerOn(void)
{
    54e4:	b510      	push	{r4, lr}
		port_base->OUTSET.reg = pin_mask;
    54e6:	2280      	movs	r2, #128	; 0x80
    54e8:	0092      	lsls	r2, r2, #2
    54ea:	4b03      	ldr	r3, [pc, #12]	; (54f8 <HAL_TCXOPowerOn+0x14>)
    54ec:	619a      	str	r2, [r3, #24]
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_ACTIVE);
	delay_ms(RADIO_CLK_STABILITATION_DELAY);
    54ee:	2002      	movs	r0, #2
    54f0:	4b02      	ldr	r3, [pc, #8]	; (54fc <HAL_TCXOPowerOn+0x18>)
    54f2:	4798      	blx	r3
#endif
}
    54f4:	bd10      	pop	{r4, pc}
    54f6:	46c0      	nop			; (mov r8, r8)
    54f8:	40002800 	.word	0x40002800
    54fc:	00000181 	.word	0x00000181

00005500 <HAL_TCXOPowerOff>:
		port_base->OUTCLR.reg = pin_mask;
    5500:	2280      	movs	r2, #128	; 0x80
    5502:	0092      	lsls	r2, r2, #2
    5504:	4b01      	ldr	r3, [pc, #4]	; (550c <HAL_TCXOPowerOff+0xc>)
    5506:	615a      	str	r2, [r3, #20]
void HAL_TCXOPowerOff(void)
{
#ifdef TCXO_ENABLE
	port_pin_set_output_level(TCXO_PWR_PIN, TCXO_PWR_INACTIVE);
#endif
}
    5508:	4770      	bx	lr
    550a:	46c0      	nop			; (mov r8, r8)
    550c:	40002800 	.word	0x40002800

00005510 <HAL_Sleep>:
 *
 * \param[in] mode - sleep mode
 */
void HAL_Sleep(HAL_SleepMode_t mode)
{
	switch (mode)
    5510:	2801      	cmp	r0, #1
    5512:	d002      	beq.n	551a <HAL_Sleep+0xa>
    5514:	2802      	cmp	r0, #2
    5516:	d00c      	beq.n	5532 <HAL_Sleep+0x22>
		{
			/* other sleep modes are not implemented currently */
			break;
		}
	}
}
    5518:	4770      	bx	lr
	PM->SLEEPCFG.reg = sleep_mode;
    551a:	2204      	movs	r2, #4
    551c:	2380      	movs	r3, #128	; 0x80
    551e:	05db      	lsls	r3, r3, #23
    5520:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    5522:	001a      	movs	r2, r3
    5524:	7853      	ldrb	r3, [r2, #1]
    5526:	2b04      	cmp	r3, #4
    5528:	d1fc      	bne.n	5524 <HAL_Sleep+0x14>
  __ASM volatile ("dsb");
    552a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    552e:	bf30      	wfi
    5530:	e7f2      	b.n	5518 <HAL_Sleep+0x8>
	PM->SLEEPCFG.reg = sleep_mode;
    5532:	2205      	movs	r2, #5
    5534:	2380      	movs	r3, #128	; 0x80
    5536:	05db      	lsls	r3, r3, #23
    5538:	705a      	strb	r2, [r3, #1]
	while(PM->SLEEPCFG.reg != sleep_mode) ;
    553a:	001a      	movs	r2, r3
    553c:	7853      	ldrb	r3, [r2, #1]
    553e:	2b05      	cmp	r3, #5
    5540:	d1fc      	bne.n	553c <HAL_Sleep+0x2c>
  __ASM volatile ("dsb");
    5542:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("wfi");
    5546:	bf30      	wfi
    5548:	e7e6      	b.n	5518 <HAL_Sleep+0x8>
	...

0000554c <SleepTimerInit>:
/************************************** IMPLEMENTATION************************/
/**
* \brief Initializes the sleep timer module
*/
void SleepTimerInit(void)
{
    554c:	b510      	push	{r4, lr}
    554e:	b084      	sub	sp, #16
	/* Sanity check argument */
	Assert(config);

	/* Set default into configuration structure */
	config->prescaler           = RTC_COUNT_PRESCALER_DIV_1024;
	config->mode                = RTC_COUNT_MODE_32BIT;
    5550:	2201      	movs	r2, #1
    5552:	466b      	mov	r3, sp
    5554:	709a      	strb	r2, [r3, #2]
	config->clear_on_match      = false;
    5556:	2300      	movs	r3, #0
    5558:	4669      	mov	r1, sp
    555a:	70cb      	strb	r3, [r1, #3]

#ifdef FEATURE_RTC_CONTINUOUSLY_UPDATED
	config->continuously_update = false;
#endif
#if (SAML21XXXB) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30) || (SAMR34) || (SAMR35)
	config->enable_read_sync    = true;
    555c:	710a      	strb	r2, [r1, #4]
	struct rtc_count_config rtc_config;
	rtc_count_get_config_defaults(&rtc_config);
	
	rtc_config.prescaler = RTC_COUNT_PRESCALER_OFF;
    555e:	466a      	mov	r2, sp
    5560:	800b      	strh	r3, [r1, #0]
	rtc_config.enable_read_sync = true;
	rtc_config.compare_values[0] = COMPARE_COUNT_MAX_VALUE;
    5562:	3b01      	subs	r3, #1
    5564:	9302      	str	r3, [sp, #8]
	rtc_config.compare_values[1] = COMPARE_COUNT_MAX_VALUE;
    5566:	9303      	str	r3, [sp, #12]
	rtc_count_init(&rtc, RTC, &rtc_config);
    5568:	4c04      	ldr	r4, [pc, #16]	; (557c <SleepTimerInit+0x30>)
    556a:	4905      	ldr	r1, [pc, #20]	; (5580 <SleepTimerInit+0x34>)
    556c:	0020      	movs	r0, r4
    556e:	4b05      	ldr	r3, [pc, #20]	; (5584 <SleepTimerInit+0x38>)
    5570:	4798      	blx	r3
	rtc_count_enable(&rtc);
    5572:	0020      	movs	r0, r4
    5574:	4b04      	ldr	r3, [pc, #16]	; (5588 <SleepTimerInit+0x3c>)
    5576:	4798      	blx	r3
}
    5578:	b004      	add	sp, #16
    557a:	bd10      	pop	{r4, pc}
    557c:	200018f8 	.word	0x200018f8
    5580:	40002000 	.word	0x40002000
    5584:	0000123d 	.word	0x0000123d
    5588:	000010bd 	.word	0x000010bd

0000558c <SleepTimerGetElapsedTime>:
/**
* \brief Calculate the Elapsed Time from the previous call of this function
* \retval Elapsed time in ticks
*/
uint32_t SleepTimerGetElapsedTime(void)
{
    558c:	b510      	push	{r4, lr}
	return rtc_count_get_count(&rtc);
    558e:	4802      	ldr	r0, [pc, #8]	; (5598 <SleepTimerGetElapsedTime+0xc>)
    5590:	4b02      	ldr	r3, [pc, #8]	; (559c <SleepTimerGetElapsedTime+0x10>)
    5592:	4798      	blx	r3
}
    5594:	bd10      	pop	{r4, pc}
    5596:	46c0      	nop			; (mov r8, r8)
    5598:	200018f8 	.word	0x200018f8
    559c:	000011ad 	.word	0x000011ad

000055a0 <SleepTimerStart>:

/**
* \brief Initializes the sleep timer
*/
void SleepTimerStart(uint32_t sleepTicks, void (*cb)(void))
{
    55a0:	b570      	push	{r4, r5, r6, lr}
    55a2:	0005      	movs	r5, r0
    55a4:	000e      	movs	r6, r1
	rtc_count_set_count(&rtc, 0);
    55a6:	4c0a      	ldr	r4, [pc, #40]	; (55d0 <SleepTimerStart+0x30>)
    55a8:	2100      	movs	r1, #0
    55aa:	0020      	movs	r0, r4
    55ac:	4b09      	ldr	r3, [pc, #36]	; (55d4 <SleepTimerStart+0x34>)
    55ae:	4798      	blx	r3
	rtc_count_register_callback(&rtc, cb, RTC_COUNT_CALLBACK_COMPARE_0);
    55b0:	2208      	movs	r2, #8
    55b2:	0031      	movs	r1, r6
    55b4:	0020      	movs	r0, r4
    55b6:	4b08      	ldr	r3, [pc, #32]	; (55d8 <SleepTimerStart+0x38>)
    55b8:	4798      	blx	r3
	rtc_count_set_compare(&rtc, sleepTicks, RTC_COUNT_COMPARE_0);
    55ba:	2200      	movs	r2, #0
    55bc:	0029      	movs	r1, r5
    55be:	0020      	movs	r0, r4
    55c0:	4b06      	ldr	r3, [pc, #24]	; (55dc <SleepTimerStart+0x3c>)
    55c2:	4798      	blx	r3
	rtc_count_enable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    55c4:	2108      	movs	r1, #8
    55c6:	0020      	movs	r0, r4
    55c8:	4b05      	ldr	r3, [pc, #20]	; (55e0 <SleepTimerStart+0x40>)
    55ca:	4798      	blx	r3
}
    55cc:	bd70      	pop	{r4, r5, r6, pc}
    55ce:	46c0      	nop			; (mov r8, r8)
    55d0:	200018f8 	.word	0x200018f8
    55d4:	00001169 	.word	0x00001169
    55d8:	000012d9 	.word	0x000012d9
    55dc:	000011d9 	.word	0x000011d9
    55e0:	00001315 	.word	0x00001315

000055e4 <SleepTimerStop>:

/**
* \brief Stop the sleep timer
*/
void SleepTimerStop(void)
{
    55e4:	b510      	push	{r4, lr}
	rtc_count_disable_callback(&rtc, RTC_COUNT_CALLBACK_COMPARE_0);
    55e6:	2108      	movs	r1, #8
    55e8:	4801      	ldr	r0, [pc, #4]	; (55f0 <SleepTimerStop+0xc>)
    55ea:	4b02      	ldr	r3, [pc, #8]	; (55f4 <SleepTimerStop+0x10>)
    55ec:	4798      	blx	r3
}
    55ee:	bd10      	pop	{r4, pc}
    55f0:	200018f8 	.word	0x200018f8
    55f4:	00001359 	.word	0x00001359

000055f8 <SystemBlockingWaitMs>:
 * waiting with the MCU in sleep.
 * Find out how long it takes the MCU to go to and wake up from sleep to see if
 * it makes sense to go to sleep at all 
 */
void SystemBlockingWaitMs(uint32_t ms)
{
    55f8:	b510      	push	{r4, lr}
#ifndef UT
    delay_ms(ms);
    55fa:	2800      	cmp	r0, #0
    55fc:	d103      	bne.n	5606 <SystemBlockingWaitMs+0xe>
    55fe:	2001      	movs	r0, #1
    5600:	4b02      	ldr	r3, [pc, #8]	; (560c <SystemBlockingWaitMs+0x14>)
    5602:	4798      	blx	r3
#endif
}
    5604:	bd10      	pop	{r4, pc}
    delay_ms(ms);
    5606:	4b02      	ldr	r3, [pc, #8]	; (5610 <SystemBlockingWaitMs+0x18>)
    5608:	4798      	blx	r3
    560a:	e7fb      	b.n	5604 <SystemBlockingWaitMs+0xc>
    560c:	00000155 	.word	0x00000155
    5610:	00000181 	.word	0x00000181

00005614 <system_enter_critical_section>:
{

}

void system_enter_critical_section(void)
{
    5614:	b510      	push	{r4, lr}
	cpu_irq_enter_critical();
    5616:	4b01      	ldr	r3, [pc, #4]	; (561c <system_enter_critical_section+0x8>)
    5618:	4798      	blx	r3
#ifndef UT
	system_interrupt_enter_critical_section();
#endif
}
    561a:	bd10      	pop	{r4, pc}
    561c:	000001ad 	.word	0x000001ad

00005620 <system_leave_critical_section>:

void system_leave_critical_section(void)
{
    5620:	b510      	push	{r4, lr}
	cpu_irq_leave_critical();
    5622:	4b01      	ldr	r3, [pc, #4]	; (5628 <system_leave_critical_section+0x8>)
    5624:	4798      	blx	r3
#ifndef UT
	system_interrupt_leave_critical_section();
#endif
}
    5626:	bd10      	pop	{r4, pc}
    5628:	000001ed 	.word	0x000001ed

0000562c <PMM_Wakeup>:

/**
* \brief Wakeup from sleep
*/
void PMM_Wakeup(void)
{
    562c:	b570      	push	{r4, r5, r6, lr}
    uint64_t sleptTimeUs = 0;

    if (PMM_STATE_SLEEP == pmmState)
    562e:	4b16      	ldr	r3, [pc, #88]	; (5688 <PMM_Wakeup+0x5c>)
    5630:	781b      	ldrb	r3, [r3, #0]
    5632:	2b01      	cmp	r3, #1
    5634:	d000      	beq.n	5638 <PMM_Wakeup+0xc>
        {
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
            sleepReq = NULL;
        }
    }
}
    5636:	bd70      	pop	{r4, r5, r6, pc}
		pmmState = PMM_STATE_ACTIVE;
    5638:	2200      	movs	r2, #0
    563a:	4b13      	ldr	r3, [pc, #76]	; (5688 <PMM_Wakeup+0x5c>)
    563c:	701a      	strb	r2, [r3, #0]
        sleptTimeUs = SLEEP_TICKS_TO_US(SleepTimerGetElapsedTime());
    563e:	4b13      	ldr	r3, [pc, #76]	; (568c <PMM_Wakeup+0x60>)
    5640:	4798      	blx	r3
    5642:	4b13      	ldr	r3, [pc, #76]	; (5690 <PMM_Wakeup+0x64>)
    5644:	4798      	blx	r3
    5646:	4913      	ldr	r1, [pc, #76]	; (5694 <PMM_Wakeup+0x68>)
    5648:	4b13      	ldr	r3, [pc, #76]	; (5698 <PMM_Wakeup+0x6c>)
    564a:	4798      	blx	r3
    564c:	4b13      	ldr	r3, [pc, #76]	; (569c <PMM_Wakeup+0x70>)
    564e:	4798      	blx	r3
    5650:	0004      	movs	r4, r0
    5652:	000d      	movs	r5, r1
        SleepTimerStop();
    5654:	4b12      	ldr	r3, [pc, #72]	; (56a0 <PMM_Wakeup+0x74>)
    5656:	4798      	blx	r3
        SystemTimerSync(sleptTimeUs);
    5658:	0020      	movs	r0, r4
    565a:	0029      	movs	r1, r5
    565c:	4b11      	ldr	r3, [pc, #68]	; (56a4 <PMM_Wakeup+0x78>)
    565e:	4798      	blx	r3
        if (sleepReq && sleepReq->pmmWakeupCallback)
    5660:	4b11      	ldr	r3, [pc, #68]	; (56a8 <PMM_Wakeup+0x7c>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	2b00      	cmp	r3, #0
    5666:	d0e6      	beq.n	5636 <PMM_Wakeup+0xa>
    5668:	689e      	ldr	r6, [r3, #8]
    566a:	2e00      	cmp	r6, #0
    566c:	d0e3      	beq.n	5636 <PMM_Wakeup+0xa>
            sleepReq->pmmWakeupCallback(US_TO_MS(sleptTimeUs));
    566e:	22fa      	movs	r2, #250	; 0xfa
    5670:	0092      	lsls	r2, r2, #2
    5672:	2300      	movs	r3, #0
    5674:	0020      	movs	r0, r4
    5676:	0029      	movs	r1, r5
    5678:	4c0c      	ldr	r4, [pc, #48]	; (56ac <PMM_Wakeup+0x80>)
    567a:	47a0      	blx	r4
    567c:	47b0      	blx	r6
            sleepReq = NULL;
    567e:	2200      	movs	r2, #0
    5680:	4b09      	ldr	r3, [pc, #36]	; (56a8 <PMM_Wakeup+0x7c>)
    5682:	601a      	str	r2, [r3, #0]
}
    5684:	e7d7      	b.n	5636 <PMM_Wakeup+0xa>
    5686:	46c0      	nop			; (mov r8, r8)
    5688:	20000b98 	.word	0x20000b98
    568c:	0000558d 	.word	0x0000558d
    5690:	00014051 	.word	0x00014051
    5694:	41f423d7 	.word	0x41f423d7
    5698:	000139f9 	.word	0x000139f9
    569c:	00013135 	.word	0x00013135
    56a0:	000055e5 	.word	0x000055e5
    56a4:	0000c411 	.word	0x0000c411
    56a8:	20000b9c 	.word	0x20000b9c
    56ac:	00013071 	.word	0x00013071

000056b0 <PMM_Sleep>:
{
    56b0:	b570      	push	{r4, r5, r6, lr}
    56b2:	1e05      	subs	r5, r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    56b4:	d059      	beq.n	576a <PMM_Sleep+0xba>
    56b6:	4b33      	ldr	r3, [pc, #204]	; (5784 <PMM_Sleep+0xd4>)
    56b8:	781b      	ldrb	r3, [r3, #0]
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    56ba:	2000      	movs	r0, #0
    if ( req && (PMM_STATE_ACTIVE == pmmState) )
    56bc:	2b00      	cmp	r3, #0
    56be:	d000      	beq.n	56c2 <PMM_Sleep+0x12>
}
    56c0:	bd70      	pop	{r4, r5, r6, pc}
        canSleep = SYSTEM_ReadyToSleep();
    56c2:	4b31      	ldr	r3, [pc, #196]	; (5788 <PMM_Sleep+0xd8>)
    56c4:	4798      	blx	r3
    56c6:	1e04      	subs	r4, r0, #0
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    56c8:	d051      	beq.n	576e <PMM_Sleep+0xbe>
        (PMM_SLEEPTIME_MAX_MS >= durationMs) && \
    56ca:	682b      	ldr	r3, [r5, #0]
    56cc:	4a2f      	ldr	r2, [pc, #188]	; (578c <PMM_Sleep+0xdc>)
    56ce:	4694      	mov	ip, r2
    56d0:	4463      	add	r3, ip
        canSleep = canSleep && validateSleepDuration( req->sleepTimeMs );
    56d2:	2400      	movs	r4, #0
    56d4:	4a2e      	ldr	r2, [pc, #184]	; (5790 <PMM_Sleep+0xe0>)
    56d6:	429a      	cmp	r2, r3
    56d8:	4164      	adcs	r4, r4
    56da:	b2e4      	uxtb	r4, r4
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    56dc:	792a      	ldrb	r2, [r5, #4]
    56de:	2a02      	cmp	r2, #2
    56e0:	d01e      	beq.n	5720 <PMM_Sleep+0x70>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    56e2:	2a01      	cmp	r2, #1
    56e4:	d029      	beq.n	573a <PMM_Sleep+0x8a>
    uint32_t sysSleepTime = ~0u; /* 0xffFFffFF is invalid */
    56e6:	2601      	movs	r6, #1
    56e8:	4276      	negs	r6, r6
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    56ea:	2000      	movs	r0, #0
        if ( canSleep )
    56ec:	2c00      	cmp	r4, #0
    56ee:	d0e7      	beq.n	56c0 <PMM_Sleep+0x10>
            SystemTimerSuspend();
    56f0:	4b28      	ldr	r3, [pc, #160]	; (5794 <PMM_Sleep+0xe4>)
    56f2:	4798      	blx	r3
            SleepTimerStart( MS_TO_SLEEP_TICKS( sysSleepTime - PMM_WAKEUPTIME_MS ), PMM_Wakeup );
    56f4:	0030      	movs	r0, r6
    56f6:	380a      	subs	r0, #10
    56f8:	4b27      	ldr	r3, [pc, #156]	; (5798 <PMM_Sleep+0xe8>)
    56fa:	4798      	blx	r3
    56fc:	4927      	ldr	r1, [pc, #156]	; (579c <PMM_Sleep+0xec>)
    56fe:	4b28      	ldr	r3, [pc, #160]	; (57a0 <PMM_Sleep+0xf0>)
    5700:	4798      	blx	r3
    5702:	4b28      	ldr	r3, [pc, #160]	; (57a4 <PMM_Sleep+0xf4>)
    5704:	4798      	blx	r3
    5706:	4928      	ldr	r1, [pc, #160]	; (57a8 <PMM_Sleep+0xf8>)
    5708:	4b28      	ldr	r3, [pc, #160]	; (57ac <PMM_Sleep+0xfc>)
    570a:	4798      	blx	r3
            pmmState = PMM_STATE_SLEEP;
    570c:	2201      	movs	r2, #1
    570e:	4b1d      	ldr	r3, [pc, #116]	; (5784 <PMM_Sleep+0xd4>)
    5710:	701a      	strb	r2, [r3, #0]
            sleepReq = req;
    5712:	4b27      	ldr	r3, [pc, #156]	; (57b0 <PMM_Sleep+0x100>)
    5714:	601d      	str	r5, [r3, #0]
            HAL_Sleep(req->sleep_mode);
    5716:	7928      	ldrb	r0, [r5, #4]
    5718:	4b26      	ldr	r3, [pc, #152]	; (57b4 <PMM_Sleep+0x104>)
    571a:	4798      	blx	r3
            status = PMM_SLEEP_REQ_PROCESSED;
    571c:	2001      	movs	r0, #1
    571e:	e7cf      	b.n	56c0 <PMM_Sleep+0x10>
            canSleep = canSleep && ( SWTIMER_INVALID_TIMEOUT == SwTimerNextExpiryDuration() );
    5720:	4a1b      	ldr	r2, [pc, #108]	; (5790 <PMM_Sleep+0xe0>)
    5722:	2400      	movs	r4, #0
    5724:	4293      	cmp	r3, r2
    5726:	d806      	bhi.n	5736 <PMM_Sleep+0x86>
    5728:	4b23      	ldr	r3, [pc, #140]	; (57b8 <PMM_Sleep+0x108>)
    572a:	4798      	blx	r3
    572c:	3001      	adds	r0, #1
    572e:	4244      	negs	r4, r0
    5730:	4144      	adcs	r4, r0
    5732:	e000      	b.n	5736 <PMM_Sleep+0x86>
    5734:	2400      	movs	r4, #0
            sysSleepTime = req->sleepTimeMs;
    5736:	682e      	ldr	r6, [r5, #0]
    5738:	e7d7      	b.n	56ea <PMM_Sleep+0x3a>
            sysSleepTime = SwTimerNextExpiryDuration();
    573a:	4b1f      	ldr	r3, [pc, #124]	; (57b8 <PMM_Sleep+0x108>)
    573c:	4798      	blx	r3
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    573e:	1c43      	adds	r3, r0, #1
    5740:	d01c      	beq.n	577c <PMM_Sleep+0xcc>
    5742:	21fa      	movs	r1, #250	; 0xfa
    5744:	0089      	lsls	r1, r1, #2
    5746:	4b1d      	ldr	r3, [pc, #116]	; (57bc <PMM_Sleep+0x10c>)
    5748:	4798      	blx	r3
    574a:	0003      	movs	r3, r0
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    574c:	2000      	movs	r0, #0
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    574e:	2c00      	cmp	r4, #0
    5750:	d0b6      	beq.n	56c0 <PMM_Sleep+0x10>
            if ( canSleep && (req->sleepTimeMs < sysSleepTime) )
    5752:	490f      	ldr	r1, [pc, #60]	; (5790 <PMM_Sleep+0xe0>)
    5754:	4a0d      	ldr	r2, [pc, #52]	; (578c <PMM_Sleep+0xdc>)
    5756:	189a      	adds	r2, r3, r2
    5758:	428a      	cmp	r2, r1
    575a:	d8b1      	bhi.n	56c0 <PMM_Sleep+0x10>
    575c:	682e      	ldr	r6, [r5, #0]
    575e:	429e      	cmp	r6, r3
    5760:	d9c6      	bls.n	56f0 <PMM_Sleep+0x40>
    5762:	001e      	movs	r6, r3
    5764:	e7c4      	b.n	56f0 <PMM_Sleep+0x40>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    5766:	4b16      	ldr	r3, [pc, #88]	; (57c0 <PMM_Sleep+0x110>)
    5768:	e7f8      	b.n	575c <PMM_Sleep+0xac>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    576a:	2000      	movs	r0, #0
    576c:	e7a8      	b.n	56c0 <PMM_Sleep+0x10>
        if ( SLEEP_MODE_BACKUP == req->sleep_mode )
    576e:	792b      	ldrb	r3, [r5, #4]
    5770:	2b02      	cmp	r3, #2
    5772:	d0df      	beq.n	5734 <PMM_Sleep+0x84>
        else if ( SLEEP_MODE_STANDBY == req->sleep_mode )
    5774:	2b01      	cmp	r3, #1
    5776:	d0e0      	beq.n	573a <PMM_Sleep+0x8a>
    PMM_Status_t status = PMM_SLEEP_REQ_DENIED;
    5778:	2000      	movs	r0, #0
    return status;
    577a:	e7a1      	b.n	56c0 <PMM_Sleep+0x10>
            canSleep = canSleep && validateSleepDuration( sysSleepTime );
    577c:	2c00      	cmp	r4, #0
    577e:	d1f2      	bne.n	5766 <PMM_Sleep+0xb6>
            sysSleepTime = (SWTIMER_INVALID_TIMEOUT == sysSleepTime) ? PMM_SLEEPTIME_MAX_MS : US_TO_MS( sysSleepTime );
    5780:	4e0f      	ldr	r6, [pc, #60]	; (57c0 <PMM_Sleep+0x110>)
    5782:	e7b2      	b.n	56ea <PMM_Sleep+0x3a>
    5784:	20000b98 	.word	0x20000b98
    5788:	0000c579 	.word	0x0000c579
    578c:	fffffc18 	.word	0xfffffc18
    5790:	07cebbc8 	.word	0x07cebbc8
    5794:	0000c3dd 	.word	0x0000c3dd
    5798:	00014051 	.word	0x00014051
    579c:	42031375 	.word	0x42031375
    57a0:	000139f9 	.word	0x000139f9
    57a4:	00013105 	.word	0x00013105
    57a8:	0000562d 	.word	0x0000562d
    57ac:	000055a1 	.word	0x000055a1
    57b0:	20000b9c 	.word	0x20000b9c
    57b4:	00005511 	.word	0x00005511
    57b8:	0000c119 	.word	0x0000c119
    57bc:	00012d11 	.word	0x00012d11
    57c0:	07cebfb0 	.word	0x07cebfb0

000057c4 <LorawanReg_AS_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AS_Pds_Cb(void)
{
	; // nothing to do
}
    57c4:	4770      	bx	lr
	...

000057c8 <LORAReg_InitAS>:
{
    57c8:	b570      	push	{r4, r5, r6, lr}
    57ca:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AS;
    57cc:	4b8e      	ldr	r3, [pc, #568]	; (5a08 <LORAReg_InitAS+0x240>)
    57ce:	2103      	movs	r1, #3
    57d0:	2226      	movs	r2, #38	; 0x26
    57d2:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_AS;
    57d4:	2410      	movs	r4, #16
    57d6:	3204      	adds	r2, #4
    57d8:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_AS;
    57da:	3a29      	subs	r2, #41	; 0x29
    57dc:	3126      	adds	r1, #38	; 0x26
    57de:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AS;
    57e0:	3902      	subs	r1, #2
    57e2:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    57e4:	001a      	movs	r2, r3
    57e6:	3283      	adds	r2, #131	; 0x83
    57e8:	2100      	movs	r1, #0
    57ea:	711a      	strb	r2, [r3, #4]
    57ec:	0a15      	lsrs	r5, r2, #8
    57ee:	715d      	strb	r5, [r3, #5]
    57f0:	0c15      	lsrs	r5, r2, #16
    57f2:	719d      	strb	r5, [r3, #6]
    57f4:	0e12      	lsrs	r2, r2, #24
    57f6:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    57f8:	001a      	movs	r2, r3
    57fa:	3243      	adds	r2, #67	; 0x43
    57fc:	701a      	strb	r2, [r3, #0]
    57fe:	0a15      	lsrs	r5, r2, #8
    5800:	705d      	strb	r5, [r3, #1]
    5802:	0c15      	lsrs	r5, r2, #16
    5804:	709d      	strb	r5, [r3, #2]
    5806:	0e12      	lsrs	r2, r2, #24
    5808:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    580a:	001a      	movs	r2, r3
    580c:	32a3      	adds	r2, #163	; 0xa3
    580e:	721a      	strb	r2, [r3, #8]
    5810:	0a15      	lsrs	r5, r2, #8
    5812:	725d      	strb	r5, [r3, #9]
    5814:	0c15      	lsrs	r5, r2, #16
    5816:	729d      	strb	r5, [r3, #10]
    5818:	0e12      	lsrs	r2, r2, #24
    581a:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    581c:	001a      	movs	r2, r3
    581e:	3264      	adds	r2, #100	; 0x64
    5820:	32ff      	adds	r2, #255	; 0xff
    5822:	741a      	strb	r2, [r3, #16]
    5824:	0a15      	lsrs	r5, r2, #8
    5826:	745d      	strb	r5, [r3, #17]
    5828:	0c15      	lsrs	r5, r2, #16
    582a:	749d      	strb	r5, [r3, #18]
    582c:	0e12      	lsrs	r2, r2, #24
    582e:	74da      	strb	r2, [r3, #19]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    5830:	001a      	movs	r2, r3
    5832:	3234      	adds	r2, #52	; 0x34
    5834:	751a      	strb	r2, [r3, #20]
    5836:	0a15      	lsrs	r5, r2, #8
    5838:	755d      	strb	r5, [r3, #21]
    583a:	0c15      	lsrs	r5, r2, #16
    583c:	759d      	strb	r5, [r3, #22]
    583e:	0e12      	lsrs	r2, r2, #24
    5840:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    5842:	001a      	movs	r2, r3
    5844:	323d      	adds	r2, #61	; 0x3d
    5846:	761a      	strb	r2, [r3, #24]
    5848:	0a15      	lsrs	r5, r2, #8
    584a:	765d      	strb	r5, [r3, #25]
    584c:	0c15      	lsrs	r5, r2, #16
    584e:	769d      	strb	r5, [r3, #26]
    5850:	0e12      	lsrs	r2, r2, #24
    5852:	76da      	strb	r2, [r3, #27]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    5854:	001a      	movs	r2, r3
    5856:	32c4      	adds	r2, #196	; 0xc4
    5858:	32ff      	adds	r2, #255	; 0xff
    585a:	731a      	strb	r2, [r3, #12]
    585c:	0a15      	lsrs	r5, r2, #8
    585e:	735d      	strb	r5, [r3, #13]
    5860:	0c15      	lsrs	r5, r2, #16
    5862:	739d      	strb	r5, [r3, #14]
    5864:	0e12      	lsrs	r2, r2, #24
    5866:	73da      	strb	r2, [r3, #15]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AS;
    5868:	2202      	movs	r2, #2
    586a:	2522      	movs	r5, #34	; 0x22
    586c:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AS;
    586e:	3501      	adds	r5, #1
    5870:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AS;	
    5872:	2500      	movs	r5, #0
    5874:	771d      	strb	r5, [r3, #28]
    5876:	3d16      	subs	r5, #22
    5878:	775d      	strb	r5, [r3, #29]
    587a:	351c      	adds	r5, #28
    587c:	779d      	strb	r5, [r3, #30]
    587e:	3531      	adds	r5, #49	; 0x31
    5880:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = NEW_CHANNEL_INDEX_AS;
    5882:	3d16      	subs	r5, #22
    5884:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AS;
    5886:	2632      	movs	r6, #50	; 0x32
    5888:	3d01      	subs	r5, #1
    588a:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_AS;
    588c:	3d19      	subs	r5, #25
    588e:	3e0e      	subs	r6, #14
    5890:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AS;
    5892:	3601      	adds	r6, #1
    5894:	5599      	strb	r1, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    5896:	3607      	adds	r6, #7
    5898:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwrIndx = MAX_TX_PWR_INDEX_AS;
    589a:	3601      	adds	r6, #1
    589c:	559d      	strb	r5, [r3, r6]
	RegParams.maxTxPwr = 16;
    589e:	3521      	adds	r5, #33	; 0x21
    58a0:	555c      	strb	r4, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    58a2:	34b1      	adds	r4, #177	; 0xb1
    58a4:	34ff      	adds	r4, #255	; 0xff
    58a6:	551a      	strb	r2, [r3, r4]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    58a8:	4a58      	ldr	r2, [pc, #352]	; (5a0c <LORAReg_InitAS+0x244>)
    58aa:	7815      	ldrb	r5, [r2, #0]
    58ac:	2468      	movs	r4, #104	; 0x68
    58ae:	34ff      	adds	r4, #255	; 0xff
    58b0:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    58b2:	7855      	ldrb	r5, [r2, #1]
    58b4:	3c2b      	subs	r4, #43	; 0x2b
    58b6:	3cff      	subs	r4, #255	; 0xff
    58b8:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    58ba:	7894      	ldrb	r4, [r2, #2]
    58bc:	223c      	movs	r2, #60	; 0x3c
    58be:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    58c0:	2400      	movs	r4, #0
    58c2:	3a04      	subs	r2, #4
    58c4:	549c      	strb	r4, [r3, r2]
    58c6:	3201      	adds	r2, #1
    58c8:	549c      	strb	r4, [r3, r2]
    58ca:	3201      	adds	r2, #1
    58cc:	549c      	strb	r4, [r3, r2]
    58ce:	3201      	adds	r2, #1
    58d0:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    58d2:	3207      	adds	r2, #7
    58d4:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    58d6:	001a      	movs	r2, r3
    58d8:	323e      	adds	r2, #62	; 0x3e
    58da:	7011      	strb	r1, [r2, #0]
    58dc:	7051      	strb	r1, [r2, #1]
    58de:	7091      	strb	r1, [r2, #2]
    58e0:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    58e2:	31c3      	adds	r1, #195	; 0xc3
    58e4:	31ff      	adds	r1, #255	; 0xff
    58e6:	5c5a      	ldrb	r2, [r3, r1]
    58e8:	2401      	movs	r4, #1
    58ea:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    58ec:	2402      	movs	r4, #2
    58ee:	4322      	orrs	r2, r4
    58f0:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    58f2:	222e      	movs	r2, #46	; 0x2e
    58f4:	5498      	strb	r0, [r3, r2]
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    58f6:	3806      	subs	r0, #6
		result =  LORAWAN_INVALID_PARAMETER;
    58f8:	240a      	movs	r4, #10
	if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    58fa:	2808      	cmp	r0, #8
    58fc:	d91a      	bls.n	5934 <LORAReg_InitAS+0x16c>
	if(!initialized)
    58fe:	4b44      	ldr	r3, [pc, #272]	; (5a10 <LORAReg_InitAS+0x248>)
    5900:	781b      	ldrb	r3, [r3, #0]
    5902:	2b00      	cmp	r3, #0
    5904:	d102      	bne.n	590c <LORAReg_InitAS+0x144>
		initialized = true;
    5906:	2201      	movs	r2, #1
    5908:	4b41      	ldr	r3, [pc, #260]	; (5a10 <LORAReg_InitAS+0x248>)
    590a:	701a      	strb	r2, [r3, #0]
    LORAREG_InitGetAttrFnPtrsAS();	
    590c:	4b41      	ldr	r3, [pc, #260]	; (5a14 <LORAReg_InitAS+0x24c>)
    590e:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAS();
    5910:	4b41      	ldr	r3, [pc, #260]	; (5a18 <LORAReg_InitAS+0x250>)
    5912:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAS();
    5914:	4b41      	ldr	r3, [pc, #260]	; (5a1c <LORAReg_InitAS+0x254>)
    5916:	4798      	blx	r3
	PDS_STORE(RegParams.regParamItems.band_item_id);
    5918:	4b3b      	ldr	r3, [pc, #236]	; (5a08 <LORAReg_InitAS+0x240>)
    591a:	4a41      	ldr	r2, [pc, #260]	; (5a20 <LORAReg_InitAS+0x258>)
    591c:	5c9a      	ldrb	r2, [r3, r2]
    591e:	4941      	ldr	r1, [pc, #260]	; (5a24 <LORAReg_InitAS+0x25c>)
    5920:	5c58      	ldrb	r0, [r3, r1]
    5922:	0200      	lsls	r0, r0, #8
    5924:	4310      	orrs	r0, r2
    5926:	b2c1      	uxtb	r1, r0
    5928:	0a00      	lsrs	r0, r0, #8
    592a:	4b3f      	ldr	r3, [pc, #252]	; (5a28 <LORAReg_InitAS+0x260>)
    592c:	4798      	blx	r3
}
    592e:	0020      	movs	r0, r4
    5930:	b006      	add	sp, #24
    5932:	bd70      	pop	{r4, r5, r6, pc}
	memcpy (RegParams.pChParams, DefaultChannels923, sizeof(DefaultChannels923));
    5934:	001c      	movs	r4, r3
    5936:	0018      	movs	r0, r3
    5938:	3083      	adds	r0, #131	; 0x83
    593a:	3a2a      	subs	r2, #42	; 0x2a
    593c:	493b      	ldr	r1, [pc, #236]	; (5a2c <LORAReg_InitAS+0x264>)
    593e:	4d3c      	ldr	r5, [pc, #240]	; (5a30 <LORAReg_InitAS+0x268>)
    5940:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923, sizeof(AdvChannels923));
    5942:	0020      	movs	r0, r4
    5944:	30a3      	adds	r0, #163	; 0xa3
    5946:	2218      	movs	r2, #24
    5948:	493a      	ldr	r1, [pc, #232]	; (5a34 <LORAReg_InitAS+0x26c>)
    594a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams923, sizeof(SubBandParams923) );
    594c:	0020      	movs	r0, r4
    594e:	30c4      	adds	r0, #196	; 0xc4
    5950:	30ff      	adds	r0, #255	; 0xff
    5952:	220c      	movs	r2, #12
    5954:	4938      	ldr	r1, [pc, #224]	; (5a38 <LORAReg_InitAS+0x270>)
    5956:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle923,sizeof(SubBandDutyCycle923));
    5958:	0020      	movs	r0, r4
    595a:	30ae      	adds	r0, #174	; 0xae
    595c:	30ff      	adds	r0, #255	; 0xff
    595e:	2202      	movs	r2, #2
    5960:	4936      	ldr	r1, [pc, #216]	; (5a3c <LORAReg_InitAS+0x274>)
    5962:	47a8      	blx	r5
    5964:	2302      	movs	r3, #2
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    5966:	4828      	ldr	r0, [pc, #160]	; (5a08 <LORAReg_InitAS+0x240>)
    5968:	25ff      	movs	r5, #255	; 0xff
	for (i = 2; i < RegParams.maxChannels; i++)
    596a:	242a      	movs	r4, #42	; 0x2a
		RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    596c:	7902      	ldrb	r2, [r0, #4]
    596e:	7941      	ldrb	r1, [r0, #5]
    5970:	0209      	lsls	r1, r1, #8
    5972:	4311      	orrs	r1, r2
    5974:	7982      	ldrb	r2, [r0, #6]
    5976:	0412      	lsls	r2, r2, #16
    5978:	4311      	orrs	r1, r2
    597a:	79c2      	ldrb	r2, [r0, #7]
    597c:	0612      	lsls	r2, r2, #24
    597e:	430a      	orrs	r2, r1
    5980:	0059      	lsls	r1, r3, #1
    5982:	188a      	adds	r2, r1, r2
    5984:	7055      	strb	r5, [r2, #1]
	for (i = 2; i < RegParams.maxChannels; i++)
    5986:	3301      	adds	r3, #1
    5988:	b2db      	uxtb	r3, r3
    598a:	5702      	ldrsb	r2, [r0, r4]
    598c:	4293      	cmp	r3, r2
    598e:	dbed      	blt.n	596c <LORAReg_InitAS+0x1a4>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_AS;
    5990:	4c1d      	ldr	r4, [pc, #116]	; (5a08 <LORAReg_InitAS+0x240>)
    5992:	2210      	movs	r2, #16
    5994:	23c2      	movs	r3, #194	; 0xc2
    5996:	33ff      	adds	r3, #255	; 0xff
    5998:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsAS, sizeof(DefaultDrParamsAS) );
    599a:	7820      	ldrb	r0, [r4, #0]
    599c:	7863      	ldrb	r3, [r4, #1]
    599e:	021b      	lsls	r3, r3, #8
    59a0:	4303      	orrs	r3, r0
    59a2:	78a0      	ldrb	r0, [r4, #2]
    59a4:	0400      	lsls	r0, r0, #16
    59a6:	4303      	orrs	r3, r0
    59a8:	78e0      	ldrb	r0, [r4, #3]
    59aa:	0600      	lsls	r0, r0, #24
    59ac:	4318      	orrs	r0, r3
    59ae:	3230      	adds	r2, #48	; 0x30
    59b0:	4923      	ldr	r1, [pc, #140]	; (5a40 <LORAReg_InitAS+0x278>)
    59b2:	4b1f      	ldr	r3, [pc, #124]	; (5a30 <LORAReg_InitAS+0x268>)
    59b4:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_AS_05_IDX;
    59b6:	2304      	movs	r3, #4
    59b8:	2104      	movs	r1, #4
    59ba:	4a22      	ldr	r2, [pc, #136]	; (5a44 <LORAReg_InitAS+0x27c>)
    59bc:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AS_CH_PARAM_1;
    59be:	2100      	movs	r1, #0
    59c0:	4a21      	ldr	r2, [pc, #132]	; (5a48 <LORAReg_InitAS+0x280>)
    59c2:	54a1      	strb	r1, [r4, r2]
    59c4:	18a2      	adds	r2, r4, r2
    59c6:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_AS_CH_PARAM_2;
    59c8:	3101      	adds	r1, #1
    59ca:	2284      	movs	r2, #132	; 0x84
    59cc:	0092      	lsls	r2, r2, #2
    59ce:	54a1      	strb	r1, [r4, r2]
    59d0:	18a2      	adds	r2, r4, r2
    59d2:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = PDS_REG_AS_BAND;
    59d4:	3101      	adds	r1, #1
    59d6:	4a12      	ldr	r2, [pc, #72]	; (5a20 <LORAReg_InitAS+0x258>)
    59d8:	54a1      	strb	r1, [r4, r2]
    59da:	18a2      	adds	r2, r4, r2
    59dc:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    59de:	2200      	movs	r2, #0
    59e0:	2383      	movs	r3, #131	; 0x83
    59e2:	009b      	lsls	r3, r3, #2
    59e4:	54e2      	strb	r2, [r4, r3]
    59e6:	469c      	mov	ip, r3
    59e8:	4464      	add	r4, ip
    59ea:	2300      	movs	r3, #0
    59ec:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegAsPdsOps;
    59ee:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_AS_MAX_VALUE & 0x00FF);
    59f0:	3203      	adds	r2, #3
    59f2:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_AS_Pds_Cb;
    59f4:	4a15      	ldr	r2, [pc, #84]	; (5a4c <LORAReg_InitAS+0x284>)
		PDS_RegFile(PDS_FILE_REG_AS_05_IDX,filemarks);
    59f6:	9200      	str	r2, [sp, #0]
    59f8:	4915      	ldr	r1, [pc, #84]	; (5a50 <LORAReg_InitAS+0x288>)
    59fa:	9a03      	ldr	r2, [sp, #12]
    59fc:	4b15      	ldr	r3, [pc, #84]	; (5a54 <LORAReg_InitAS+0x28c>)
    59fe:	2004      	movs	r0, #4
    5a00:	4c15      	ldr	r4, [pc, #84]	; (5a58 <LORAReg_InitAS+0x290>)
    5a02:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    5a04:	2408      	movs	r4, #8
    5a06:	e77a      	b.n	58fe <LORAReg_InitAS+0x136>
    5a08:	20001b54 	.word	0x20001b54
    5a0c:	20001b50 	.word	0x20001b50
    5a10:	20000ba0 	.word	0x20000ba0
    5a14:	00009ea1 	.word	0x00009ea1
    5a18:	0000a5bd 	.word	0x0000a5bd
    5a1c:	0000a885 	.word	0x0000a885
    5a20:	00000212 	.word	0x00000212
    5a24:	00000213 	.word	0x00000213
    5a28:	0000af89 	.word	0x0000af89
    5a2c:	0001d708 	.word	0x0001d708
    5a30:	00015f45 	.word	0x00015f45
    5a34:	0001d6f0 	.word	0x0001d6f0
    5a38:	0001d750 	.word	0x0001d750
    5a3c:	0001d74c 	.word	0x0001d74c
    5a40:	0001d70c 	.word	0x0001d70c
    5a44:	0000020b 	.word	0x0000020b
    5a48:	0000020e 	.word	0x0000020e
    5a4c:	000057c5 	.word	0x000057c5
    5a50:	20001930 	.word	0x20001930
    5a54:	0001d75c 	.word	0x0001d75c
    5a58:	0000b185 	.word	0x0000b185

00005a5c <LorawanReg_AU_Pds_Cb>:
}
#if (ENABLE_PDS == 1)
void LorawanReg_AU_Pds_Cb(void)
{
	
}
    5a5c:	4770      	bx	lr
	...

00005a60 <LORAReg_InitAU>:
{
    5a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    5a62:	46de      	mov	lr, fp
    5a64:	4657      	mov	r7, sl
    5a66:	464e      	mov	r6, r9
    5a68:	4645      	mov	r5, r8
    5a6a:	b5e0      	push	{r5, r6, r7, lr}
    5a6c:	b087      	sub	sp, #28
    5a6e:	4683      	mov	fp, r0
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_AU;
    5a70:	4c83      	ldr	r4, [pc, #524]	; (5c80 <LORAReg_InitAU+0x220>)
    5a72:	2103      	movs	r1, #3
    5a74:	2326      	movs	r3, #38	; 0x26
    5a76:	54e1      	strb	r1, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_AU_NA;
    5a78:	3145      	adds	r1, #69	; 0x45
    5a7a:	3304      	adds	r3, #4
    5a7c:	54e1      	strb	r1, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_AU;
    5a7e:	3941      	subs	r1, #65	; 0x41
    5a80:	3b03      	subs	r3, #3
    5a82:	54e1      	strb	r1, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    5a84:	0020      	movs	r0, r4
    5a86:	30b3      	adds	r0, #179	; 0xb3
    5a88:	2600      	movs	r6, #0
    5a8a:	7120      	strb	r0, [r4, #4]
    5a8c:	0a03      	lsrs	r3, r0, #8
    5a8e:	7163      	strb	r3, [r4, #5]
    5a90:	0c03      	lsrs	r3, r0, #16
    5a92:	71a3      	strb	r3, [r4, #6]
    5a94:	0e03      	lsrs	r3, r0, #24
    5a96:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    5a98:	2343      	movs	r3, #67	; 0x43
    5a9a:	4698      	mov	r8, r3
    5a9c:	44a0      	add	r8, r4
    5a9e:	4643      	mov	r3, r8
    5aa0:	7023      	strb	r3, [r4, #0]
    5aa2:	4643      	mov	r3, r8
    5aa4:	0a1b      	lsrs	r3, r3, #8
    5aa6:	7063      	strb	r3, [r4, #1]
    5aa8:	4643      	mov	r3, r8
    5aaa:	0c1b      	lsrs	r3, r3, #16
    5aac:	70a3      	strb	r3, [r4, #2]
    5aae:	4643      	mov	r3, r8
    5ab0:	0e1b      	lsrs	r3, r3, #24
    5ab2:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    5ab4:	2321      	movs	r3, #33	; 0x21
    5ab6:	31f8      	adds	r1, #248	; 0xf8
    5ab8:	54e1      	strb	r1, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_AU;
    5aba:	2508      	movs	r5, #8
    5abc:	2708      	movs	r7, #8
    5abe:	3301      	adds	r3, #1
    5ac0:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_AU;
    5ac2:	3301      	adds	r3, #1
    5ac4:	54e5      	strb	r5, [r4, r3]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_AU;
    5ac6:	3b83      	subs	r3, #131	; 0x83
    5ac8:	469c      	mov	ip, r3
    5aca:	7723      	strb	r3, [r4, #28]
    5acc:	2370      	movs	r3, #112	; 0x70
    5ace:	7763      	strb	r3, [r4, #29]
    5ad0:	77a7      	strb	r7, [r4, #30]
    5ad2:	3b39      	subs	r3, #57	; 0x39
    5ad4:	77e3      	strb	r3, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_AU;
    5ad6:	39c7      	subs	r1, #199	; 0xc7
    5ad8:	3b17      	subs	r3, #23
    5ada:	54e1      	strb	r1, [r4, r3]
	RegParams.minDataRate = MAC_DATARATE_MIN_AU;
    5adc:	2224      	movs	r2, #36	; 0x24
    5ade:	3b1a      	subs	r3, #26
    5ae0:	54a3      	strb	r3, [r4, r2]
	RegParams.maxDataRate = MAC_DATARATE_MAX_AU;
    5ae2:	3201      	adds	r2, #1
    5ae4:	54a6      	strb	r6, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    5ae6:	321b      	adds	r2, #27
    5ae8:	4692      	mov	sl, r2
    5aea:	2254      	movs	r2, #84	; 0x54
    5aec:	32ff      	adds	r2, #255	; 0xff
    5aee:	4653      	mov	r3, sl
    5af0:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    5af2:	23aa      	movs	r3, #170	; 0xaa
    5af4:	005b      	lsls	r3, r3, #1
    5af6:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    5af8:	2350      	movs	r3, #80	; 0x50
    5afa:	33ff      	adds	r3, #255	; 0xff
    5afc:	54e6      	strb	r6, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR6;
    5afe:	3301      	adds	r3, #1
    5b00:	3a4e      	subs	r2, #78	; 0x4e
    5b02:	3aff      	subs	r2, #255	; 0xff
    5b04:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    5b06:	2352      	movs	r3, #82	; 0x52
    5b08:	33ff      	adds	r3, #255	; 0xff
    5b0a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    5b0c:	3b45      	subs	r3, #69	; 0x45
    5b0e:	3bff      	subs	r3, #255	; 0xff
    5b10:	4699      	mov	r9, r3
    5b12:	3346      	adds	r3, #70	; 0x46
    5b14:	33ff      	adds	r3, #255	; 0xff
    5b16:	464a      	mov	r2, r9
    5b18:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 8;
    5b1a:	2356      	movs	r3, #86	; 0x56
    5b1c:	33ff      	adds	r3, #255	; 0xff
    5b1e:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_AU;
    5b20:	2300      	movs	r3, #0
    5b22:	4699      	mov	r9, r3
    5b24:	2344      	movs	r3, #68	; 0x44
    5b26:	33ff      	adds	r3, #255	; 0xff
    5b28:	464a      	mov	r2, r9
    5b2a:	54e2      	strb	r2, [r4, r3]
    5b2c:	0023      	movs	r3, r4
    5b2e:	3344      	adds	r3, #68	; 0x44
    5b30:	33ff      	adds	r3, #255	; 0xff
    5b32:	2228      	movs	r2, #40	; 0x28
    5b34:	4252      	negs	r2, r2
    5b36:	705a      	strb	r2, [r3, #1]
    5b38:	2274      	movs	r2, #116	; 0x74
    5b3a:	4252      	negs	r2, r2
    5b3c:	709a      	strb	r2, [r3, #2]
    5b3e:	2236      	movs	r2, #54	; 0x36
    5b40:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_AU;
    5b42:	2360      	movs	r3, #96	; 0x60
    5b44:	4699      	mov	r9, r3
    5b46:	2348      	movs	r3, #72	; 0x48
    5b48:	33ff      	adds	r3, #255	; 0xff
    5b4a:	464a      	mov	r2, r9
    5b4c:	54e2      	strb	r2, [r4, r3]
    5b4e:	0023      	movs	r3, r4
    5b50:	3348      	adds	r3, #72	; 0x48
    5b52:	33ff      	adds	r3, #255	; 0xff
    5b54:	227a      	movs	r2, #122	; 0x7a
    5b56:	4252      	negs	r2, r2
    5b58:	705a      	strb	r2, [r3, #1]
    5b5a:	2269      	movs	r2, #105	; 0x69
    5b5c:	4252      	negs	r2, r2
    5b5e:	709a      	strb	r2, [r3, #2]
    5b60:	2236      	movs	r2, #54	; 0x36
    5b62:	70da      	strb	r2, [r3, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_AU;
    5b64:	234c      	movs	r3, #76	; 0x4c
    5b66:	33ff      	adds	r3, #255	; 0xff
    5b68:	4662      	mov	r2, ip
    5b6a:	54e2      	strb	r2, [r4, r3]
    5b6c:	0023      	movs	r3, r4
    5b6e:	334c      	adds	r3, #76	; 0x4c
    5b70:	33ff      	adds	r3, #255	; 0xff
    5b72:	2270      	movs	r2, #112	; 0x70
    5b74:	705a      	strb	r2, [r3, #1]
    5b76:	709f      	strb	r7, [r3, #2]
    5b78:	2237      	movs	r2, #55	; 0x37
    5b7a:	70da      	strb	r2, [r3, #3]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    5b7c:	0023      	movs	r3, r4
    5b7e:	3334      	adds	r3, #52	; 0x34
    5b80:	7523      	strb	r3, [r4, #20]
    5b82:	0a1a      	lsrs	r2, r3, #8
    5b84:	7562      	strb	r2, [r4, #21]
    5b86:	0c1a      	lsrs	r2, r3, #16
    5b88:	75a2      	strb	r2, [r4, #22]
    5b8a:	0e1b      	lsrs	r3, r3, #24
    5b8c:	75e3      	strb	r3, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    5b8e:	0023      	movs	r3, r4
    5b90:	333d      	adds	r3, #61	; 0x3d
    5b92:	7623      	strb	r3, [r4, #24]
    5b94:	0a1a      	lsrs	r2, r3, #8
    5b96:	7662      	strb	r2, [r4, #25]
    5b98:	0c1a      	lsrs	r2, r3, #16
    5b9a:	76a2      	strb	r2, [r4, #26]
    5b9c:	0e1b      	lsrs	r3, r3, #24
    5b9e:	76e3      	strb	r3, [r4, #27]
    RegParams.Rx1DrOffset = 5;
    5ba0:	2305      	movs	r3, #5
    5ba2:	469c      	mov	ip, r3
    5ba4:	3327      	adds	r3, #39	; 0x27
    5ba6:	4662      	mov	r2, ip
    5ba8:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwrIndx = 10;
    5baa:	3b22      	subs	r3, #34	; 0x22
    5bac:	469c      	mov	ip, r3
    5bae:	3323      	adds	r3, #35	; 0x23
    5bb0:	4662      	mov	r2, ip
    5bb2:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = 30;
    5bb4:	3b0f      	subs	r3, #15
    5bb6:	469c      	mov	ip, r3
    5bb8:	330a      	adds	r3, #10
    5bba:	4662      	mov	r2, ip
    5bbc:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    5bbe:	2358      	movs	r3, #88	; 0x58
    5bc0:	33ff      	adds	r3, #255	; 0xff
    5bc2:	54e6      	strb	r6, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];	
    5bc4:	4b2f      	ldr	r3, [pc, #188]	; (5c84 <LORAReg_InitAU+0x224>)
    5bc6:	469a      	mov	sl, r3
    5bc8:	781a      	ldrb	r2, [r3, #0]
    5bca:	4691      	mov	r9, r2
    5bcc:	223d      	movs	r2, #61	; 0x3d
    5bce:	464b      	mov	r3, r9
    5bd0:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    5bd2:	4653      	mov	r3, sl
    5bd4:	785b      	ldrb	r3, [r3, #1]
    5bd6:	469c      	mov	ip, r3
    5bd8:	233c      	movs	r3, #60	; 0x3c
    5bda:	4662      	mov	r2, ip
    5bdc:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    5bde:	2300      	movs	r3, #0
    5be0:	5463      	strb	r3, [r4, r1]
    5be2:	2100      	movs	r1, #0
    5be4:	3339      	adds	r3, #57	; 0x39
    5be6:	54e1      	strb	r1, [r4, r3]
    5be8:	3301      	adds	r3, #1
    5bea:	54e1      	strb	r1, [r4, r3]
    5bec:	3301      	adds	r3, #1
    5bee:	54e1      	strb	r1, [r4, r3]
	RegParams.joinbccount =0;
    5bf0:	3307      	adds	r3, #7
    5bf2:	54e6      	strb	r6, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    5bf4:	0023      	movs	r3, r4
    5bf6:	333e      	adds	r3, #62	; 0x3e
    5bf8:	7019      	strb	r1, [r3, #0]
    5bfa:	7059      	strb	r1, [r3, #1]
    5bfc:	7099      	strb	r1, [r3, #2]
    5bfe:	70d9      	strb	r1, [r3, #3]
	RegParams.band = ismBand;
    5c00:	232e      	movs	r3, #46	; 0x2e
    5c02:	465a      	mov	r2, fp
    5c04:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915AU, sizeof(DefaultChannels915AU) );
    5c06:	2290      	movs	r2, #144	; 0x90
    5c08:	491f      	ldr	r1, [pc, #124]	; (5c88 <LORAReg_InitAU+0x228>)
    5c0a:	4b20      	ldr	r3, [pc, #128]	; (5c8c <LORAReg_InitAU+0x22c>)
    5c0c:	4699      	mov	r9, r3
    5c0e:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsAU, sizeof(DefaultDrParamsAU) );
    5c10:	2270      	movs	r2, #112	; 0x70
    5c12:	491f      	ldr	r1, [pc, #124]	; (5c90 <LORAReg_InitAU+0x230>)
    5c14:	4640      	mov	r0, r8
    5c16:	47c8      	blx	r9
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    5c18:	23ab      	movs	r3, #171	; 0xab
    5c1a:	005b      	lsls	r3, r3, #1
    5c1c:	54e6      	strb	r6, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_AU_09_IDX;
    5c1e:	4b1d      	ldr	r3, [pc, #116]	; (5c94 <LORAReg_InitAU+0x234>)
    5c20:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_AU_CH_PARAM;
    5c22:	2200      	movs	r2, #0
    5c24:	4b1c      	ldr	r3, [pc, #112]	; (5c98 <LORAReg_InitAU+0x238>)
    5c26:	54e2      	strb	r2, [r4, r3]
    5c28:	18e3      	adds	r3, r4, r3
    5c2a:	705f      	strb	r7, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    5c2c:	2384      	movs	r3, #132	; 0x84
    5c2e:	009b      	lsls	r3, r3, #2
    5c30:	54e2      	strb	r2, [r4, r3]
    5c32:	18e3      	adds	r3, r4, r3
    5c34:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    5c36:	4b19      	ldr	r3, [pc, #100]	; (5c9c <LORAReg_InitAU+0x23c>)
    5c38:	54e2      	strb	r2, [r4, r3]
    5c3a:	18e3      	adds	r3, r4, r3
    5c3c:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_AU_LAST_USED_SB;
    5c3e:	3201      	adds	r2, #1
    5c40:	2383      	movs	r3, #131	; 0x83
    5c42:	009b      	lsls	r3, r3, #2
    5c44:	54e2      	strb	r2, [r4, r3]
    5c46:	469c      	mov	ip, r3
    5c48:	4464      	add	r4, ip
    5c4a:	7067      	strb	r7, [r4, #1]
	filemarks.fileMarkListAddr = aRegAuPdsOps;
    5c4c:	ab02      	add	r3, sp, #8
	filemarks.numItems =  (uint8_t)(PDS_REG_AU_MAX_VALUE & 0x00FF);
    5c4e:	3201      	adds	r2, #1
    5c50:	711a      	strb	r2, [r3, #4]
	filemarks.fIDcb = LorawanReg_AU_Pds_Cb;
    5c52:	4a13      	ldr	r2, [pc, #76]	; (5ca0 <LORAReg_InitAU+0x240>)
	PDS_RegFile(PDS_FILE_REG_AU_09_IDX,filemarks);
    5c54:	9200      	str	r2, [sp, #0]
    5c56:	4913      	ldr	r1, [pc, #76]	; (5ca4 <LORAReg_InitAU+0x244>)
    5c58:	9a03      	ldr	r2, [sp, #12]
    5c5a:	4b13      	ldr	r3, [pc, #76]	; (5ca8 <LORAReg_InitAU+0x248>)
    5c5c:	2008      	movs	r0, #8
    5c5e:	4c13      	ldr	r4, [pc, #76]	; (5cac <LORAReg_InitAU+0x24c>)
    5c60:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsAU();
    5c62:	4b13      	ldr	r3, [pc, #76]	; (5cb0 <LORAReg_InitAU+0x250>)
    5c64:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsAU();
    5c66:	4b13      	ldr	r3, [pc, #76]	; (5cb4 <LORAReg_InitAU+0x254>)
    5c68:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsAU();
    5c6a:	4b13      	ldr	r3, [pc, #76]	; (5cb8 <LORAReg_InitAU+0x258>)
    5c6c:	4798      	blx	r3
}
    5c6e:	2008      	movs	r0, #8
    5c70:	b007      	add	sp, #28
    5c72:	bc3c      	pop	{r2, r3, r4, r5}
    5c74:	4690      	mov	r8, r2
    5c76:	4699      	mov	r9, r3
    5c78:	46a2      	mov	sl, r4
    5c7a:	46ab      	mov	fp, r5
    5c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5c7e:	46c0      	nop			; (mov r8, r8)
    5c80:	20001b54 	.word	0x20001b54
    5c84:	20001b50 	.word	0x20001b50
    5c88:	0001d774 	.word	0x0001d774
    5c8c:	00015f45 	.word	0x00015f45
    5c90:	0001d804 	.word	0x0001d804
    5c94:	0000020b 	.word	0x0000020b
    5c98:	0000020e 	.word	0x0000020e
    5c9c:	00000212 	.word	0x00000212
    5ca0:	00005a5d 	.word	0x00005a5d
    5ca4:	20001934 	.word	0x20001934
    5ca8:	0001d874 	.word	0x0001d874
    5cac:	0000b185 	.word	0x0000b185
    5cb0:	00009fe9 	.word	0x00009fe9
    5cb4:	0000a629 	.word	0x0000a629
    5cb8:	0000a8f1 	.word	0x0000a8f1

00005cbc <LorawanReg_EU868_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_EU868_Pds_Cb(void)
{
	
}
    5cbc:	4770      	bx	lr
	...

00005cc0 <LORAReg_InitEU>:
{
    5cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cc2:	b08b      	sub	sp, #44	; 0x2c
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_EU;
    5cc4:	4ba2      	ldr	r3, [pc, #648]	; (5f50 <LORAReg_InitEU+0x290>)
    5cc6:	2103      	movs	r1, #3
    5cc8:	2226      	movs	r2, #38	; 0x26
    5cca:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_T2;
    5ccc:	2510      	movs	r5, #16
    5cce:	3204      	adds	r2, #4
    5cd0:	549d      	strb	r5, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_EU;
    5cd2:	2406      	movs	r4, #6
    5cd4:	3a01      	subs	r2, #1
    5cd6:	549c      	strb	r4, [r3, r2]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_EU;
    5cd8:	3c05      	subs	r4, #5
    5cda:	3a02      	subs	r2, #2
    5cdc:	549c      	strb	r4, [r3, r2]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    5cde:	001a      	movs	r2, r3
    5ce0:	3283      	adds	r2, #131	; 0x83
    5ce2:	2400      	movs	r4, #0
    5ce4:	711a      	strb	r2, [r3, #4]
    5ce6:	0a16      	lsrs	r6, r2, #8
    5ce8:	715e      	strb	r6, [r3, #5]
    5cea:	0c16      	lsrs	r6, r2, #16
    5cec:	719e      	strb	r6, [r3, #6]
    5cee:	0e12      	lsrs	r2, r2, #24
    5cf0:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    5cf2:	001a      	movs	r2, r3
    5cf4:	3243      	adds	r2, #67	; 0x43
    5cf6:	701a      	strb	r2, [r3, #0]
    5cf8:	0a16      	lsrs	r6, r2, #8
    5cfa:	705e      	strb	r6, [r3, #1]
    5cfc:	0c16      	lsrs	r6, r2, #16
    5cfe:	709e      	strb	r6, [r3, #2]
    5d00:	0e12      	lsrs	r2, r2, #24
    5d02:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    5d04:	001a      	movs	r2, r3
    5d06:	32c4      	adds	r2, #196	; 0xc4
    5d08:	32ff      	adds	r2, #255	; 0xff
    5d0a:	731a      	strb	r2, [r3, #12]
    5d0c:	0a16      	lsrs	r6, r2, #8
    5d0e:	735e      	strb	r6, [r3, #13]
    5d10:	0c16      	lsrs	r6, r2, #16
    5d12:	739e      	strb	r6, [r3, #14]
    5d14:	0e12      	lsrs	r2, r2, #24
    5d16:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    5d18:	001a      	movs	r2, r3
    5d1a:	32a3      	adds	r2, #163	; 0xa3
    5d1c:	721a      	strb	r2, [r3, #8]
    5d1e:	0a16      	lsrs	r6, r2, #8
    5d20:	725e      	strb	r6, [r3, #9]
    5d22:	0c16      	lsrs	r6, r2, #16
    5d24:	729e      	strb	r6, [r3, #10]
    5d26:	0e12      	lsrs	r2, r2, #24
    5d28:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    5d2a:	001a      	movs	r2, r3
    5d2c:	3264      	adds	r2, #100	; 0x64
    5d2e:	32ff      	adds	r2, #255	; 0xff
    5d30:	741a      	strb	r2, [r3, #16]
    5d32:	0a16      	lsrs	r6, r2, #8
    5d34:	745e      	strb	r6, [r3, #17]
    5d36:	0c16      	lsrs	r6, r2, #16
    5d38:	749e      	strb	r6, [r3, #18]
    5d3a:	0e12      	lsrs	r2, r2, #24
    5d3c:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    5d3e:	001a      	movs	r2, r3
    5d40:	3234      	adds	r2, #52	; 0x34
    5d42:	751a      	strb	r2, [r3, #20]
    5d44:	0a16      	lsrs	r6, r2, #8
    5d46:	755e      	strb	r6, [r3, #21]
    5d48:	0c16      	lsrs	r6, r2, #16
    5d4a:	759e      	strb	r6, [r3, #22]
    5d4c:	0e12      	lsrs	r2, r2, #24
    5d4e:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    5d50:	001a      	movs	r2, r3
    5d52:	323d      	adds	r2, #61	; 0x3d
    5d54:	761a      	strb	r2, [r3, #24]
    5d56:	0a16      	lsrs	r6, r2, #8
    5d58:	765e      	strb	r6, [r3, #25]
    5d5a:	0c16      	lsrs	r6, r2, #16
    5d5c:	769e      	strb	r6, [r3, #26]
    5d5e:	0e12      	lsrs	r2, r2, #24
    5d60:	76da      	strb	r2, [r3, #27]
	RegParams.MinNewChIndex = 3;
    5d62:	2221      	movs	r2, #33	; 0x21
    5d64:	5499      	strb	r1, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_EU;
    5d66:	2622      	movs	r6, #34	; 0x22
    5d68:	3a01      	subs	r2, #1
    5d6a:	549e      	strb	r6, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_EU;
    5d6c:	3a19      	subs	r2, #25
    5d6e:	3602      	adds	r6, #2
    5d70:	559a      	strb	r2, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_EU;
    5d72:	3601      	adds	r6, #1
    5d74:	559c      	strb	r4, [r3, r6]
	RegParams.Rx1DrOffset = 5;
    5d76:	2705      	movs	r7, #5
    5d78:	3607      	adds	r6, #7
    5d7a:	559f      	strb	r7, [r3, r6]
	RegParams.maxTxPwrIndx = 7;
    5d7c:	3601      	adds	r6, #1
    5d7e:	559a      	strb	r2, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    5d80:	32ba      	adds	r2, #186	; 0xba
    5d82:	32ff      	adds	r2, #255	; 0xff
    5d84:	5499      	strb	r1, [r3, r2]
	RegParams.maxTxPwr = 16;
    5d86:	3a99      	subs	r2, #153	; 0x99
    5d88:	3aff      	subs	r2, #255	; 0xff
    5d8a:	549d      	strb	r5, [r3, r2]
	RegParams.pDutyCycleTimer->timerId = regTimerId[0];
    5d8c:	4a71      	ldr	r2, [pc, #452]	; (5f54 <LORAReg_InitEU+0x294>)
    5d8e:	7815      	ldrb	r5, [r2, #0]
    5d90:	2168      	movs	r1, #104	; 0x68
    5d92:	31ff      	adds	r1, #255	; 0xff
    5d94:	545d      	strb	r5, [r3, r1]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    5d96:	7855      	ldrb	r5, [r2, #1]
    5d98:	392b      	subs	r1, #43	; 0x2b
    5d9a:	39ff      	subs	r1, #255	; 0xff
    5d9c:	545d      	strb	r5, [r3, r1]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    5d9e:	7891      	ldrb	r1, [r2, #2]
    5da0:	223c      	movs	r2, #60	; 0x3c
    5da2:	5499      	strb	r1, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    5da4:	2100      	movs	r1, #0
    5da6:	3a04      	subs	r2, #4
    5da8:	5499      	strb	r1, [r3, r2]
    5daa:	3201      	adds	r2, #1
    5dac:	5499      	strb	r1, [r3, r2]
    5dae:	3201      	adds	r2, #1
    5db0:	5499      	strb	r1, [r3, r2]
    5db2:	3201      	adds	r2, #1
    5db4:	5499      	strb	r1, [r3, r2]
	RegParams.joinbccount =0;
    5db6:	3207      	adds	r2, #7
    5db8:	549c      	strb	r4, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    5dba:	001a      	movs	r2, r3
    5dbc:	323e      	adds	r2, #62	; 0x3e
    5dbe:	7011      	strb	r1, [r2, #0]
    5dc0:	7051      	strb	r1, [r2, #1]
    5dc2:	7091      	strb	r1, [r2, #2]
    5dc4:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    5dc6:	222e      	movs	r2, #46	; 0x2e
    5dc8:	5498      	strb	r0, [r3, r2]
	if(ismBand == ISM_EU868)
    5dca:	2800      	cmp	r0, #0
    5dcc:	d006      	beq.n	5ddc <LORAReg_InitEU+0x11c>
		return UNSUPPORTED_BAND;
    5dce:	23c6      	movs	r3, #198	; 0xc6
	else if(ismBand == ISM_EU433)
    5dd0:	2801      	cmp	r0, #1
    5dd2:	d100      	bne.n	5dd6 <LORAReg_InitEU+0x116>
    5dd4:	e084      	b.n	5ee0 <LORAReg_InitEU+0x220>
}
    5dd6:	0018      	movs	r0, r3
    5dd8:	b00b      	add	sp, #44	; 0x2c
    5dda:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels868, sizeof(DefaultChannels868) );
    5ddc:	001c      	movs	r4, r3
    5dde:	0018      	movs	r0, r3
    5de0:	3083      	adds	r0, #131	; 0x83
    5de2:	3a28      	subs	r2, #40	; 0x28
    5de4:	495c      	ldr	r1, [pc, #368]	; (5f58 <LORAReg_InitEU+0x298>)
    5de6:	4d5d      	ldr	r5, [pc, #372]	; (5f5c <LORAReg_InitEU+0x29c>)
    5de8:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels868, sizeof(AdvChannels868) );	
    5dea:	0020      	movs	r0, r4
    5dec:	30a3      	adds	r0, #163	; 0xa3
    5dee:	2224      	movs	r2, #36	; 0x24
    5df0:	495b      	ldr	r1, [pc, #364]	; (5f60 <LORAReg_InitEU+0x2a0>)
    5df2:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams868, sizeof(SubBandParams868) );
    5df4:	0020      	movs	r0, r4
    5df6:	30c4      	adds	r0, #196	; 0xc4
    5df8:	30ff      	adds	r0, #255	; 0xff
    5dfa:	2248      	movs	r2, #72	; 0x48
    5dfc:	4959      	ldr	r1, [pc, #356]	; (5f64 <LORAReg_InitEU+0x2a4>)
    5dfe:	47a8      	blx	r5
	memcpy(RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycle868,sizeof(SubBandDutyCycle868));
    5e00:	0020      	movs	r0, r4
    5e02:	30ae      	adds	r0, #174	; 0xae
    5e04:	30ff      	adds	r0, #255	; 0xff
    5e06:	220c      	movs	r2, #12
    5e08:	4957      	ldr	r1, [pc, #348]	; (5f68 <LORAReg_InitEU+0x2a8>)
    5e0a:	47a8      	blx	r5
    5e0c:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    5e0e:	4850      	ldr	r0, [pc, #320]	; (5f50 <LORAReg_InitEU+0x290>)
    5e10:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    5e12:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;		
    5e14:	7902      	ldrb	r2, [r0, #4]
    5e16:	7941      	ldrb	r1, [r0, #5]
    5e18:	0209      	lsls	r1, r1, #8
    5e1a:	4311      	orrs	r1, r2
    5e1c:	7982      	ldrb	r2, [r0, #6]
    5e1e:	0412      	lsls	r2, r2, #16
    5e20:	4311      	orrs	r1, r2
    5e22:	79c2      	ldrb	r2, [r0, #7]
    5e24:	0612      	lsls	r2, r2, #24
    5e26:	430a      	orrs	r2, r1
    5e28:	0059      	lsls	r1, r3, #1
    5e2a:	188a      	adds	r2, r1, r2
    5e2c:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    5e2e:	3301      	adds	r3, #1
    5e30:	b2db      	uxtb	r3, r3
    5e32:	5702      	ldrsb	r2, [r0, r4]
    5e34:	4293      	cmp	r3, r2
    5e36:	dbed      	blt.n	5e14 <LORAReg_InitEU+0x154>
		RegParams.DefRx1DataRate = MAC_868_RX1_WINDOW_DATARATE;
    5e38:	4b45      	ldr	r3, [pc, #276]	; (5f50 <LORAReg_InitEU+0x290>)
    5e3a:	2200      	movs	r2, #0
    5e3c:	2122      	movs	r1, #34	; 0x22
    5e3e:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2DataRate = MAC_868_RX2_WINDOW_DATARATE;
    5e40:	3101      	adds	r1, #1
    5e42:	545a      	strb	r2, [r3, r1]
		RegParams.DefRx2Freq = MAC_868_RX2_WINDOW_FREQ;
    5e44:	3208      	adds	r2, #8
    5e46:	771a      	strb	r2, [r3, #28]
    5e48:	3a22      	subs	r2, #34	; 0x22
    5e4a:	775a      	strb	r2, [r3, #29]
    5e4c:	3a13      	subs	r2, #19
    5e4e:	779a      	strb	r2, [r3, #30]
    5e50:	3260      	adds	r2, #96	; 0x60
    5e52:	77da      	strb	r2, [r3, #31]
		RegParams.regParamItems.fileid = PDS_FILE_REG_EU868_04_IDX;
    5e54:	3920      	subs	r1, #32
    5e56:	4a45      	ldr	r2, [pc, #276]	; (5f6c <LORAReg_InitEU+0x2ac>)
    5e58:	5499      	strb	r1, [r3, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_EU868_CH_PARAM_1;
    5e5a:	2100      	movs	r1, #0
    5e5c:	4a44      	ldr	r2, [pc, #272]	; (5f70 <LORAReg_InitEU+0x2b0>)
    5e5e:	5499      	strb	r1, [r3, r2]
    5e60:	189a      	adds	r2, r3, r2
    5e62:	2103      	movs	r1, #3
    5e64:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_EU868_CH_PARAM_2;
    5e66:	2100      	movs	r1, #0
    5e68:	2284      	movs	r2, #132	; 0x84
    5e6a:	0092      	lsls	r2, r2, #2
    5e6c:	5499      	strb	r1, [r3, r2]
    5e6e:	189a      	adds	r2, r3, r2
    5e70:	310b      	adds	r1, #11
    5e72:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    5e74:	2100      	movs	r1, #0
    5e76:	4a3f      	ldr	r2, [pc, #252]	; (5f74 <LORAReg_InitEU+0x2b4>)
    5e78:	5499      	strb	r1, [r3, r2]
    5e7a:	189a      	adds	r2, r3, r2
    5e7c:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    5e7e:	2283      	movs	r2, #131	; 0x83
    5e80:	0092      	lsls	r2, r2, #2
    5e82:	5499      	strb	r1, [r3, r2]
    5e84:	4694      	mov	ip, r2
    5e86:	4463      	add	r3, ip
    5e88:	2200      	movs	r2, #0
    5e8a:	705a      	strb	r2, [r3, #1]
		filemarks_fid1.fileMarkListAddr = aRegEu868Fid1PdsOps;
    5e8c:	ab02      	add	r3, sp, #8
		filemarks_fid1.numItems =  (uint8_t)(PDS_REG_EU868_FID1_MAX_VALUE & 0x00FF);
    5e8e:	2601      	movs	r6, #1
    5e90:	711e      	strb	r6, [r3, #4]
		filemarks_fid1.fIDcb = LorawanReg_EU868_Pds_Cb;
    5e92:	4d39      	ldr	r5, [pc, #228]	; (5f78 <LORAReg_InitEU+0x2b8>)
		PDS_RegFile(PDS_FILE_REG_EU868_04_IDX,filemarks_fid1);
    5e94:	9500      	str	r5, [sp, #0]
    5e96:	4939      	ldr	r1, [pc, #228]	; (5f7c <LORAReg_InitEU+0x2bc>)
    5e98:	9a03      	ldr	r2, [sp, #12]
    5e9a:	4b39      	ldr	r3, [pc, #228]	; (5f80 <LORAReg_InitEU+0x2c0>)
    5e9c:	2003      	movs	r0, #3
    5e9e:	4c39      	ldr	r4, [pc, #228]	; (5f84 <LORAReg_InitEU+0x2c4>)
    5ea0:	47a0      	blx	r4
		filemarks_fid2.fileMarkListAddr = aRegEu868Fid2PdsOps;
    5ea2:	ab06      	add	r3, sp, #24
		filemarks_fid2.numItems =  (uint8_t)(PDS_REG_EU868_FID2_MAX_VALUE & 0x00FF);
    5ea4:	711e      	strb	r6, [r3, #4]
		PDS_RegFile(PDS_FILE_REG_EU868_12_IDX,filemarks_fid2);
    5ea6:	9500      	str	r5, [sp, #0]
    5ea8:	4937      	ldr	r1, [pc, #220]	; (5f88 <LORAReg_InitEU+0x2c8>)
    5eaa:	9a07      	ldr	r2, [sp, #28]
    5eac:	4b37      	ldr	r3, [pc, #220]	; (5f8c <LORAReg_InitEU+0x2cc>)
    5eae:	200b      	movs	r0, #11
    5eb0:	47a0      	blx	r4
	memcpy (RegParams.pDrParams, DefaultDrparamsEU, sizeof(DefaultDrparamsEU) );
    5eb2:	4a27      	ldr	r2, [pc, #156]	; (5f50 <LORAReg_InitEU+0x290>)
    5eb4:	7810      	ldrb	r0, [r2, #0]
    5eb6:	7853      	ldrb	r3, [r2, #1]
    5eb8:	021b      	lsls	r3, r3, #8
    5eba:	4303      	orrs	r3, r0
    5ebc:	7890      	ldrb	r0, [r2, #2]
    5ebe:	0400      	lsls	r0, r0, #16
    5ec0:	4303      	orrs	r3, r0
    5ec2:	78d0      	ldrb	r0, [r2, #3]
    5ec4:	0600      	lsls	r0, r0, #24
    5ec6:	4318      	orrs	r0, r3
    5ec8:	2240      	movs	r2, #64	; 0x40
    5eca:	4931      	ldr	r1, [pc, #196]	; (5f90 <LORAReg_InitEU+0x2d0>)
    5ecc:	4b23      	ldr	r3, [pc, #140]	; (5f5c <LORAReg_InitEU+0x29c>)
    5ece:	4798      	blx	r3
    LORAREG_InitGetAttrFnPtrsEU();
    5ed0:	4b30      	ldr	r3, [pc, #192]	; (5f94 <LORAReg_InitEU+0x2d4>)
    5ed2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsEU();
    5ed4:	4b30      	ldr	r3, [pc, #192]	; (5f98 <LORAReg_InitEU+0x2d8>)
    5ed6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsEU();
    5ed8:	4b30      	ldr	r3, [pc, #192]	; (5f9c <LORAReg_InitEU+0x2dc>)
    5eda:	4798      	blx	r3
	return status;
    5edc:	2308      	movs	r3, #8
    5ede:	e77a      	b.n	5dd6 <LORAReg_InitEU+0x116>
    memcpy (RegParams.pChParams, DefaultChannels433, sizeof(DefaultChannels433) );
    5ee0:	4c1b      	ldr	r4, [pc, #108]	; (5f50 <LORAReg_InitEU+0x290>)
    5ee2:	0020      	movs	r0, r4
    5ee4:	3083      	adds	r0, #131	; 0x83
    5ee6:	2206      	movs	r2, #6
    5ee8:	492d      	ldr	r1, [pc, #180]	; (5fa0 <LORAReg_InitEU+0x2e0>)
    5eea:	4d1c      	ldr	r5, [pc, #112]	; (5f5c <LORAReg_InitEU+0x29c>)
    5eec:	47a8      	blx	r5
    memcpy (RegParams.pOtherChParams, AdvChannels433, sizeof(AdvChannels433) );
    5eee:	0020      	movs	r0, r4
    5ef0:	30a3      	adds	r0, #163	; 0xa3
    5ef2:	2224      	movs	r2, #36	; 0x24
    5ef4:	492b      	ldr	r1, [pc, #172]	; (5fa4 <LORAReg_InitEU+0x2e4>)
    5ef6:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParams433, sizeof(SubBandParams433) );	
    5ef8:	0020      	movs	r0, r4
    5efa:	30c4      	adds	r0, #196	; 0xc4
    5efc:	30ff      	adds	r0, #255	; 0xff
    5efe:	220c      	movs	r2, #12
    5f00:	4929      	ldr	r1, [pc, #164]	; (5fa8 <LORAReg_InitEU+0x2e8>)
    5f02:	47a8      	blx	r5
    5f04:	2303      	movs	r3, #3
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    5f06:	4812      	ldr	r0, [pc, #72]	; (5f50 <LORAReg_InitEU+0x290>)
    5f08:	25ff      	movs	r5, #255	; 0xff
    for (i = 3; i < RegParams.maxChannels; i++)
    5f0a:	242a      	movs	r4, #42	; 0x2a
        RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    5f0c:	7902      	ldrb	r2, [r0, #4]
    5f0e:	7941      	ldrb	r1, [r0, #5]
    5f10:	0209      	lsls	r1, r1, #8
    5f12:	4311      	orrs	r1, r2
    5f14:	7982      	ldrb	r2, [r0, #6]
    5f16:	0412      	lsls	r2, r2, #16
    5f18:	4311      	orrs	r1, r2
    5f1a:	79c2      	ldrb	r2, [r0, #7]
    5f1c:	0612      	lsls	r2, r2, #24
    5f1e:	430a      	orrs	r2, r1
    5f20:	0059      	lsls	r1, r3, #1
    5f22:	188a      	adds	r2, r1, r2
    5f24:	7055      	strb	r5, [r2, #1]
    for (i = 3; i < RegParams.maxChannels; i++)
    5f26:	3301      	adds	r3, #1
    5f28:	b2db      	uxtb	r3, r3
    5f2a:	5702      	ldrsb	r2, [r0, r4]
    5f2c:	4293      	cmp	r3, r2
    5f2e:	dbed      	blt.n	5f0c <LORAReg_InitEU+0x24c>
		RegParams.DefRx1DataRate = MAC_433_RX1_WINDOW_DATARATE;
    5f30:	4b07      	ldr	r3, [pc, #28]	; (5f50 <LORAReg_InitEU+0x290>)
    5f32:	2105      	movs	r1, #5
    5f34:	2222      	movs	r2, #34	; 0x22
    5f36:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2DataRate = MAC_433_RX2_WINDOW_DATARATE;
    5f38:	2100      	movs	r1, #0
    5f3a:	3201      	adds	r2, #1
    5f3c:	5499      	strb	r1, [r3, r2]
		RegParams.DefRx2Freq = MAC_433_RX2_WINDOW_FREQ;
    5f3e:	3a93      	subs	r2, #147	; 0x93
    5f40:	771a      	strb	r2, [r3, #28]
    5f42:	3241      	adds	r2, #65	; 0x41
    5f44:	775a      	strb	r2, [r3, #29]
    5f46:	3a02      	subs	r2, #2
    5f48:	779a      	strb	r2, [r3, #30]
    5f4a:	324a      	adds	r2, #74	; 0x4a
    5f4c:	77da      	strb	r2, [r3, #31]
    5f4e:	e7b0      	b.n	5eb2 <LORAReg_InitEU+0x1f2>
    5f50:	20001b54 	.word	0x20001b54
    5f54:	20001b50 	.word	0x20001b50
    5f58:	0001d8d4 	.word	0x0001d8d4
    5f5c:	00015f45 	.word	0x00015f45
    5f60:	0001d8a8 	.word	0x0001d8a8
    5f64:	0001d934 	.word	0x0001d934
    5f68:	0001d91c 	.word	0x0001d91c
    5f6c:	0000020b 	.word	0x0000020b
    5f70:	0000020e 	.word	0x0000020e
    5f74:	00000212 	.word	0x00000212
    5f78:	00005cbd 	.word	0x00005cbd
    5f7c:	20001938 	.word	0x20001938
    5f80:	0001d97c 	.word	0x0001d97c
    5f84:	0000b185 	.word	0x0000b185
    5f88:	2000193c 	.word	0x2000193c
    5f8c:	0001d984 	.word	0x0001d984
    5f90:	0001d8dc 	.word	0x0001d8dc
    5f94:	00009d59 	.word	0x00009d59
    5f98:	0000a555 	.word	0x0000a555
    5f9c:	0000a825 	.word	0x0000a825
    5fa0:	0001d8cc 	.word	0x0001d8cc
    5fa4:	0001d884 	.word	0x0001d884
    5fa8:	0001d928 	.word	0x0001d928

00005fac <LorawanReg_IND_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_IND_Pds_Cb(void)
{
	
}
    5fac:	4770      	bx	lr
	...

00005fb0 <LORAReg_InitIN>:
{
    5fb0:	b530      	push	{r4, r5, lr}
    5fb2:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_IN;
    5fb4:	4b72      	ldr	r3, [pc, #456]	; (6180 <LORAReg_InitIN+0x1d0>)
    5fb6:	2403      	movs	r4, #3
    5fb8:	2226      	movs	r2, #38	; 0x26
    5fba:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_IN;
    5fbc:	2110      	movs	r1, #16
    5fbe:	3204      	adds	r2, #4
    5fc0:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_IN;
    5fc2:	3a29      	subs	r2, #41	; 0x29
    5fc4:	3119      	adds	r1, #25
    5fc6:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_IN;
    5fc8:	3902      	subs	r1, #2
    5fca:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    5fcc:	001a      	movs	r2, r3
    5fce:	3283      	adds	r2, #131	; 0x83
    5fd0:	2100      	movs	r1, #0
    5fd2:	711a      	strb	r2, [r3, #4]
    5fd4:	0a15      	lsrs	r5, r2, #8
    5fd6:	715d      	strb	r5, [r3, #5]
    5fd8:	0c15      	lsrs	r5, r2, #16
    5fda:	719d      	strb	r5, [r3, #6]
    5fdc:	0e12      	lsrs	r2, r2, #24
    5fde:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    5fe0:	001a      	movs	r2, r3
    5fe2:	3243      	adds	r2, #67	; 0x43
    5fe4:	701a      	strb	r2, [r3, #0]
    5fe6:	0a15      	lsrs	r5, r2, #8
    5fe8:	705d      	strb	r5, [r3, #1]
    5fea:	0c15      	lsrs	r5, r2, #16
    5fec:	709d      	strb	r5, [r3, #2]
    5fee:	0e12      	lsrs	r2, r2, #24
    5ff0:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    5ff2:	001a      	movs	r2, r3
    5ff4:	32a3      	adds	r2, #163	; 0xa3
    5ff6:	721a      	strb	r2, [r3, #8]
    5ff8:	0a15      	lsrs	r5, r2, #8
    5ffa:	725d      	strb	r5, [r3, #9]
    5ffc:	0c15      	lsrs	r5, r2, #16
    5ffe:	729d      	strb	r5, [r3, #10]
    6000:	0e12      	lsrs	r2, r2, #24
    6002:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    6004:	001a      	movs	r2, r3
    6006:	3264      	adds	r2, #100	; 0x64
    6008:	32ff      	adds	r2, #255	; 0xff
    600a:	741a      	strb	r2, [r3, #16]
    600c:	0a15      	lsrs	r5, r2, #8
    600e:	745d      	strb	r5, [r3, #17]
    6010:	0c15      	lsrs	r5, r2, #16
    6012:	749d      	strb	r5, [r3, #18]
    6014:	0e12      	lsrs	r2, r2, #24
    6016:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    6018:	001a      	movs	r2, r3
    601a:	3234      	adds	r2, #52	; 0x34
    601c:	751a      	strb	r2, [r3, #20]
    601e:	0a15      	lsrs	r5, r2, #8
    6020:	755d      	strb	r5, [r3, #21]
    6022:	0c15      	lsrs	r5, r2, #16
    6024:	759d      	strb	r5, [r3, #22]
    6026:	0e12      	lsrs	r2, r2, #24
    6028:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    602a:	001a      	movs	r2, r3
    602c:	323d      	adds	r2, #61	; 0x3d
    602e:	761a      	strb	r2, [r3, #24]
    6030:	0a15      	lsrs	r5, r2, #8
    6032:	765d      	strb	r5, [r3, #25]
    6034:	0c15      	lsrs	r5, r2, #16
    6036:	769d      	strb	r5, [r3, #26]
    6038:	0e12      	lsrs	r2, r2, #24
    603a:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_IN;
    603c:	2222      	movs	r2, #34	; 0x22
    603e:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_IN;
    6040:	2502      	movs	r5, #2
    6042:	3201      	adds	r2, #1
    6044:	549d      	strb	r5, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_IN;	
    6046:	3a33      	subs	r2, #51	; 0x33
    6048:	771a      	strb	r2, [r3, #28]
    604a:	3a70      	subs	r2, #112	; 0x70
    604c:	775a      	strb	r2, [r3, #29]
    604e:	3226      	adds	r2, #38	; 0x26
    6050:	779a      	strb	r2, [r3, #30]
    6052:	328d      	adds	r2, #141	; 0x8d
    6054:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_IN;
    6056:	3a12      	subs	r2, #18
    6058:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_IN;
    605a:	352e      	adds	r5, #46	; 0x2e
    605c:	3a01      	subs	r2, #1
    605e:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_IN;
    6060:	3a19      	subs	r2, #25
    6062:	3d0c      	subs	r5, #12
    6064:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_IN;
    6066:	3501      	adds	r5, #1
    6068:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    606a:	359c      	adds	r5, #156	; 0x9c
    606c:	35ff      	adds	r5, #255	; 0xff
    606e:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 7;
    6070:	3429      	adds	r4, #41	; 0x29
    6072:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 10;
    6074:	3c22      	subs	r4, #34	; 0x22
    6076:	3226      	adds	r2, #38	; 0x26
    6078:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = 30;
    607a:	3414      	adds	r4, #20
    607c:	3a05      	subs	r2, #5
    607e:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[0];
    6080:	4a40      	ldr	r2, [pc, #256]	; (6184 <LORAReg_InitIN+0x1d4>)
    6082:	7815      	ldrb	r5, [r2, #0]
    6084:	341e      	adds	r4, #30
    6086:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinDutyCycleTimer->remainingtime = 0;
    6088:	2500      	movs	r5, #0
    608a:	3c04      	subs	r4, #4
    608c:	551d      	strb	r5, [r3, r4]
    608e:	3401      	adds	r4, #1
    6090:	551d      	strb	r5, [r3, r4]
    6092:	3401      	adds	r4, #1
    6094:	551d      	strb	r5, [r3, r4]
    6096:	3401      	adds	r4, #1
    6098:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    609a:	7854      	ldrb	r4, [r2, #1]
    609c:	223d      	movs	r2, #61	; 0x3d
    609e:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    60a0:	3205      	adds	r2, #5
    60a2:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    60a4:	001a      	movs	r2, r3
    60a6:	323e      	adds	r2, #62	; 0x3e
    60a8:	7011      	strb	r1, [r2, #0]
    60aa:	7051      	strb	r1, [r2, #1]
    60ac:	7091      	strb	r1, [r2, #2]
    60ae:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    60b0:	222e      	movs	r2, #46	; 0x2e
    60b2:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    60b4:	240a      	movs	r4, #10
	if(ismBand == ISM_IND865)
    60b6:	280f      	cmp	r0, #15
    60b8:	d008      	beq.n	60cc <LORAReg_InitIN+0x11c>
    LORAREG_InitGetAttrFnPtrsIN();
    60ba:	4b33      	ldr	r3, [pc, #204]	; (6188 <LORAReg_InitIN+0x1d8>)
    60bc:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsIN();
    60be:	4b33      	ldr	r3, [pc, #204]	; (618c <LORAReg_InitIN+0x1dc>)
    60c0:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsIN();
    60c2:	4b33      	ldr	r3, [pc, #204]	; (6190 <LORAReg_InitIN+0x1e0>)
    60c4:	4798      	blx	r3
}
    60c6:	0020      	movs	r0, r4
    60c8:	b007      	add	sp, #28
    60ca:	bd30      	pop	{r4, r5, pc}
    memcpy (RegParams.pChParams, DefaultChannels865, sizeof(DefaultChannels865) );
    60cc:	001c      	movs	r4, r3
    60ce:	0018      	movs	r0, r3
    60d0:	3083      	adds	r0, #131	; 0x83
    60d2:	3a28      	subs	r2, #40	; 0x28
    60d4:	492f      	ldr	r1, [pc, #188]	; (6194 <LORAReg_InitIN+0x1e4>)
    60d6:	4d30      	ldr	r5, [pc, #192]	; (6198 <LORAReg_InitIN+0x1e8>)
    60d8:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels865, sizeof(AdvChannels865) );
    60da:	0020      	movs	r0, r4
    60dc:	30a3      	adds	r0, #163	; 0xa3
    60de:	2224      	movs	r2, #36	; 0x24
    60e0:	492e      	ldr	r1, [pc, #184]	; (619c <LORAReg_InitIN+0x1ec>)
    60e2:	47a8      	blx	r5
    60e4:	2006      	movs	r0, #6
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    60e6:	4926      	ldr	r1, [pc, #152]	; (6180 <LORAReg_InitIN+0x1d0>)
    60e8:	24ff      	movs	r4, #255	; 0xff
    60ea:	790b      	ldrb	r3, [r1, #4]
    60ec:	794a      	ldrb	r2, [r1, #5]
    60ee:	0212      	lsls	r2, r2, #8
    60f0:	431a      	orrs	r2, r3
    60f2:	798b      	ldrb	r3, [r1, #6]
    60f4:	041b      	lsls	r3, r3, #16
    60f6:	431a      	orrs	r2, r3
    60f8:	79cb      	ldrb	r3, [r1, #7]
    60fa:	061b      	lsls	r3, r3, #24
    60fc:	4313      	orrs	r3, r2
    60fe:	181b      	adds	r3, r3, r0
    6100:	705c      	strb	r4, [r3, #1]
    6102:	3002      	adds	r0, #2
    for (i = MIN_CHANNEL_INDEX_IN; i < MAX_CHANNELS_IN; i++)
    6104:	2820      	cmp	r0, #32
    6106:	d1f0      	bne.n	60ea <LORAReg_InitIN+0x13a>
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = MAX_EIRP_IN;
    6108:	4c1d      	ldr	r4, [pc, #116]	; (6180 <LORAReg_InitIN+0x1d0>)
    610a:	221e      	movs	r2, #30
    610c:	23c2      	movs	r3, #194	; 0xc2
    610e:	33ff      	adds	r3, #255	; 0xff
    6110:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsIN, sizeof(DefaultDrParamsIN) );
    6112:	7820      	ldrb	r0, [r4, #0]
    6114:	7863      	ldrb	r3, [r4, #1]
    6116:	021b      	lsls	r3, r3, #8
    6118:	4303      	orrs	r3, r0
    611a:	78a0      	ldrb	r0, [r4, #2]
    611c:	0400      	lsls	r0, r0, #16
    611e:	4303      	orrs	r3, r0
    6120:	78e0      	ldrb	r0, [r4, #3]
    6122:	0600      	lsls	r0, r0, #24
    6124:	4318      	orrs	r0, r3
    6126:	3222      	adds	r2, #34	; 0x22
    6128:	491d      	ldr	r1, [pc, #116]	; (61a0 <LORAReg_InitIN+0x1f0>)
    612a:	4b1b      	ldr	r3, [pc, #108]	; (6198 <LORAReg_InitIN+0x1e8>)
    612c:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_IND_07_IDX;
    612e:	2306      	movs	r3, #6
    6130:	2106      	movs	r1, #6
    6132:	4a1c      	ldr	r2, [pc, #112]	; (61a4 <LORAReg_InitIN+0x1f4>)
    6134:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_IND_CH_PARAM_1;
    6136:	2100      	movs	r1, #0
    6138:	4a1b      	ldr	r2, [pc, #108]	; (61a8 <LORAReg_InitIN+0x1f8>)
    613a:	54a1      	strb	r1, [r4, r2]
    613c:	18a2      	adds	r2, r4, r2
    613e:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_IND_CH_PARAM_2;
    6140:	3101      	adds	r1, #1
    6142:	2284      	movs	r2, #132	; 0x84
    6144:	0092      	lsls	r2, r2, #2
    6146:	54a1      	strb	r1, [r4, r2]
    6148:	18a2      	adds	r2, r4, r2
    614a:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    614c:	2200      	movs	r2, #0
    614e:	4b17      	ldr	r3, [pc, #92]	; (61ac <LORAReg_InitIN+0x1fc>)
    6150:	54e2      	strb	r2, [r4, r3]
    6152:	18e3      	adds	r3, r4, r3
    6154:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    6156:	2383      	movs	r3, #131	; 0x83
    6158:	009b      	lsls	r3, r3, #2
    615a:	54e2      	strb	r2, [r4, r3]
    615c:	469c      	mov	ip, r3
    615e:	4464      	add	r4, ip
    6160:	2300      	movs	r3, #0
    6162:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegIndPdsOps;
    6164:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_IND_MAX_VALUE & 0x00FF);
    6166:	3202      	adds	r2, #2
    6168:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_IND_Pds_Cb;
    616a:	4a11      	ldr	r2, [pc, #68]	; (61b0 <LORAReg_InitIN+0x200>)
		PDS_RegFile(PDS_FILE_REG_IND_07_IDX,filemarks);
    616c:	9200      	str	r2, [sp, #0]
    616e:	4911      	ldr	r1, [pc, #68]	; (61b4 <LORAReg_InitIN+0x204>)
    6170:	9a03      	ldr	r2, [sp, #12]
    6172:	4b11      	ldr	r3, [pc, #68]	; (61b8 <LORAReg_InitIN+0x208>)
    6174:	2006      	movs	r0, #6
    6176:	4c11      	ldr	r4, [pc, #68]	; (61bc <LORAReg_InitIN+0x20c>)
    6178:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    617a:	2408      	movs	r4, #8
    617c:	e79d      	b.n	60ba <LORAReg_InitIN+0x10a>
    617e:	46c0      	nop			; (mov r8, r8)
    6180:	20001b54 	.word	0x20001b54
    6184:	20001b50 	.word	0x20001b50
    6188:	0000a125 	.word	0x0000a125
    618c:	0000a695 	.word	0x0000a695
    6190:	0000a945 	.word	0x0000a945
    6194:	0001d9b0 	.word	0x0001d9b0
    6198:	00015f45 	.word	0x00015f45
    619c:	0001d98c 	.word	0x0001d98c
    61a0:	0001d9b8 	.word	0x0001d9b8
    61a4:	0000020b 	.word	0x0000020b
    61a8:	0000020e 	.word	0x0000020e
    61ac:	00000212 	.word	0x00000212
    61b0:	00005fad 	.word	0x00005fad
    61b4:	20001940 	.word	0x20001940
    61b8:	0001d9f8 	.word	0x0001d9f8
    61bc:	0000b185 	.word	0x0000b185

000061c0 <LorawanReg_JPN_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback function */
void LorawanReg_JPN_Pds_Cb(void)
{

}
    61c0:	4770      	bx	lr
	...

000061c4 <LORAReg_InitJP>:
{
    61c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    61c6:	46c6      	mov	lr, r8
    61c8:	b500      	push	{lr}
    61ca:	b086      	sub	sp, #24
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_JP;
    61cc:	4b95      	ldr	r3, [pc, #596]	; (6424 <LORAReg_InitJP+0x260>)
    61ce:	2103      	movs	r1, #3
    61d0:	2226      	movs	r2, #38	; 0x26
    61d2:	5499      	strb	r1, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_JP;
    61d4:	2410      	movs	r4, #16
    61d6:	3204      	adds	r2, #4
    61d8:	549c      	strb	r4, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_JP;
    61da:	3a29      	subs	r2, #41	; 0x29
    61dc:	3126      	adds	r1, #38	; 0x26
    61de:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_JP;
    61e0:	3902      	subs	r1, #2
    61e2:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    61e4:	001a      	movs	r2, r3
    61e6:	3283      	adds	r2, #131	; 0x83
    61e8:	2100      	movs	r1, #0
    61ea:	4688      	mov	r8, r1
    61ec:	711a      	strb	r2, [r3, #4]
    61ee:	0a15      	lsrs	r5, r2, #8
    61f0:	715d      	strb	r5, [r3, #5]
    61f2:	0c15      	lsrs	r5, r2, #16
    61f4:	719d      	strb	r5, [r3, #6]
    61f6:	0e12      	lsrs	r2, r2, #24
    61f8:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    61fa:	001a      	movs	r2, r3
    61fc:	3243      	adds	r2, #67	; 0x43
    61fe:	701a      	strb	r2, [r3, #0]
    6200:	0a15      	lsrs	r5, r2, #8
    6202:	705d      	strb	r5, [r3, #1]
    6204:	0c15      	lsrs	r5, r2, #16
    6206:	709d      	strb	r5, [r3, #2]
    6208:	0e12      	lsrs	r2, r2, #24
    620a:	70da      	strb	r2, [r3, #3]
	RegParams.pSubBandParams = &RegParams.cmnParams.paramsType2.SubBands[0];
    620c:	001a      	movs	r2, r3
    620e:	32c4      	adds	r2, #196	; 0xc4
    6210:	32ff      	adds	r2, #255	; 0xff
    6212:	731a      	strb	r2, [r3, #12]
    6214:	0a15      	lsrs	r5, r2, #8
    6216:	735d      	strb	r5, [r3, #13]
    6218:	0c15      	lsrs	r5, r2, #16
    621a:	739d      	strb	r5, [r3, #14]
    621c:	0e12      	lsrs	r2, r2, #24
    621e:	73da      	strb	r2, [r3, #15]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    6220:	001a      	movs	r2, r3
    6222:	32a3      	adds	r2, #163	; 0xa3
    6224:	721a      	strb	r2, [r3, #8]
    6226:	0a15      	lsrs	r5, r2, #8
    6228:	725d      	strb	r5, [r3, #9]
    622a:	0c15      	lsrs	r5, r2, #16
    622c:	729d      	strb	r5, [r3, #10]
    622e:	0e12      	lsrs	r2, r2, #24
    6230:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    6232:	001a      	movs	r2, r3
    6234:	3264      	adds	r2, #100	; 0x64
    6236:	32ff      	adds	r2, #255	; 0xff
    6238:	741a      	strb	r2, [r3, #16]
    623a:	0a15      	lsrs	r5, r2, #8
    623c:	745d      	strb	r5, [r3, #17]
    623e:	0c15      	lsrs	r5, r2, #16
    6240:	749d      	strb	r5, [r3, #18]
    6242:	0e12      	lsrs	r2, r2, #24
    6244:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    6246:	001a      	movs	r2, r3
    6248:	3234      	adds	r2, #52	; 0x34
    624a:	751a      	strb	r2, [r3, #20]
    624c:	0a15      	lsrs	r5, r2, #8
    624e:	755d      	strb	r5, [r3, #21]
    6250:	0c15      	lsrs	r5, r2, #16
    6252:	759d      	strb	r5, [r3, #22]
    6254:	0e12      	lsrs	r2, r2, #24
    6256:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    6258:	001a      	movs	r2, r3
    625a:	323d      	adds	r2, #61	; 0x3d
    625c:	761a      	strb	r2, [r3, #24]
    625e:	0a15      	lsrs	r5, r2, #8
    6260:	765d      	strb	r5, [r3, #25]
    6262:	0c15      	lsrs	r5, r2, #16
    6264:	769d      	strb	r5, [r3, #26]
    6266:	0e12      	lsrs	r2, r2, #24
    6268:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_JP;
    626a:	2202      	movs	r2, #2
    626c:	2522      	movs	r5, #34	; 0x22
    626e:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_JP;
    6270:	3501      	adds	r5, #1
    6272:	555a      	strb	r2, [r3, r5]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_JP;	
    6274:	2500      	movs	r5, #0
    6276:	771d      	strb	r5, [r3, #28]
    6278:	3d16      	subs	r5, #22
    627a:	775d      	strb	r5, [r3, #29]
    627c:	351c      	adds	r5, #28
    627e:	779d      	strb	r5, [r3, #30]
    6280:	3531      	adds	r5, #49	; 0x31
    6282:	77dd      	strb	r5, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_JP;
    6284:	3d16      	subs	r5, #22
    6286:	555a      	strb	r2, [r3, r5]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_JP;
    6288:	2634      	movs	r6, #52	; 0x34
    628a:	3d01      	subs	r5, #1
    628c:	555e      	strb	r6, [r3, r5]
	RegParams.minDataRate = MAC_DATARATE_MIN_JP;
    628e:	3d19      	subs	r5, #25
    6290:	3e10      	subs	r6, #16
    6292:	559d      	strb	r5, [r3, r6]
	RegParams.maxDataRate = MAC_DATARATE_MAX_JP;
    6294:	3601      	adds	r6, #1
    6296:	5599      	strb	r1, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_JP;
    6298:	3e20      	subs	r6, #32
    629a:	27be      	movs	r7, #190	; 0xbe
    629c:	37ff      	adds	r7, #255	; 0xff
    629e:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_JP;
    62a0:	3f0e      	subs	r7, #14
    62a2:	3fff      	subs	r7, #255	; 0xff
    62a4:	46bc      	mov	ip, r7
    62a6:	370f      	adds	r7, #15
    62a8:	37ff      	adds	r7, #255	; 0xff
    62aa:	4661      	mov	r1, ip
    62ac:	55d9      	strb	r1, [r3, r7]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_JP;
    62ae:	27c0      	movs	r7, #192	; 0xc0
    62b0:	37ff      	adds	r7, #255	; 0xff
    62b2:	55de      	strb	r6, [r3, r7]
	RegParams.cmnParams.paramsType2.minNonDefChId = 2;
    62b4:	36bc      	adds	r6, #188	; 0xbc
    62b6:	36ff      	adds	r6, #255	; 0xff
    62b8:	559a      	strb	r2, [r3, r6]
	RegParams.Rx1DrOffset = 7;
    62ba:	322a      	adds	r2, #42	; 0x2a
    62bc:	549d      	strb	r5, [r3, r2]
	RegParams.maxTxPwrIndx = 7;
    62be:	3201      	adds	r2, #1
    62c0:	549d      	strb	r5, [r3, r2]
	RegParams.maxTxPwr = 16;
    62c2:	3a05      	subs	r2, #5
    62c4:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    62c6:	4a58      	ldr	r2, [pc, #352]	; (6428 <LORAReg_InitJP+0x264>)
    62c8:	7815      	ldrb	r5, [r2, #0]
    62ca:	349d      	adds	r4, #157	; 0x9d
    62cc:	34ff      	adds	r4, #255	; 0xff
    62ce:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    62d0:	7855      	ldrb	r5, [r2, #1]
    62d2:	3c70      	subs	r4, #112	; 0x70
    62d4:	3cff      	subs	r4, #255	; 0xff
    62d6:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    62d8:	7894      	ldrb	r4, [r2, #2]
    62da:	223c      	movs	r2, #60	; 0x3c
    62dc:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    62de:	2400      	movs	r4, #0
    62e0:	3a04      	subs	r2, #4
    62e2:	549c      	strb	r4, [r3, r2]
    62e4:	3201      	adds	r2, #1
    62e6:	549c      	strb	r4, [r3, r2]
    62e8:	3201      	adds	r2, #1
    62ea:	549c      	strb	r4, [r3, r2]
    62ec:	3201      	adds	r2, #1
    62ee:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    62f0:	3207      	adds	r2, #7
    62f2:	4641      	mov	r1, r8
    62f4:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    62f6:	001a      	movs	r2, r3
    62f8:	323e      	adds	r2, #62	; 0x3e
    62fa:	2100      	movs	r1, #0
    62fc:	7011      	strb	r1, [r2, #0]
    62fe:	7051      	strb	r1, [r2, #1]
    6300:	7091      	strb	r1, [r2, #2]
    6302:	70d1      	strb	r1, [r2, #3]
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = 1;
    6304:	31c3      	adds	r1, #195	; 0xc3
    6306:	31ff      	adds	r1, #255	; 0xff
    6308:	5c5a      	ldrb	r2, [r3, r1]
    630a:	2401      	movs	r4, #1
    630c:	4322      	orrs	r2, r4
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = 1;
    630e:	2402      	movs	r4, #2
    6310:	4322      	orrs	r2, r4
    6312:	545a      	strb	r2, [r3, r1]
	RegParams.band = ismBand;
    6314:	222e      	movs	r2, #46	; 0x2e
    6316:	5498      	strb	r0, [r3, r2]
		result = LORAWAN_INVALID_PARAMETER;
    6318:	240a      	movs	r4, #10
	if(ismBand == ISM_JPN923)
    631a:	2805      	cmp	r0, #5
    631c:	d00a      	beq.n	6334 <LORAReg_InitJP+0x170>
    LORAREG_InitGetAttrFnPtrsJP();
    631e:	4b43      	ldr	r3, [pc, #268]	; (642c <LORAReg_InitJP+0x268>)
    6320:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsJP();
    6322:	4b43      	ldr	r3, [pc, #268]	; (6430 <LORAReg_InitJP+0x26c>)
    6324:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsJP();
    6326:	4b43      	ldr	r3, [pc, #268]	; (6434 <LORAReg_InitJP+0x270>)
    6328:	4798      	blx	r3
}
    632a:	0020      	movs	r0, r4
    632c:	b006      	add	sp, #24
    632e:	bc04      	pop	{r2}
    6330:	4690      	mov	r8, r2
    6332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels923JP, sizeof(DefaultChannels923JP) );
    6334:	001c      	movs	r4, r3
    6336:	0018      	movs	r0, r3
    6338:	3083      	adds	r0, #131	; 0x83
    633a:	3a2a      	subs	r2, #42	; 0x2a
    633c:	493e      	ldr	r1, [pc, #248]	; (6438 <LORAReg_InitJP+0x274>)
    633e:	4d3f      	ldr	r5, [pc, #252]	; (643c <LORAReg_InitJP+0x278>)
    6340:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels923JP, sizeof(AdvChannels923JP) );
    6342:	0020      	movs	r0, r4
    6344:	30a3      	adds	r0, #163	; 0xa3
    6346:	2218      	movs	r2, #24
    6348:	493d      	ldr	r1, [pc, #244]	; (6440 <LORAReg_InitJP+0x27c>)
    634a:	47a8      	blx	r5
	memcpy (RegParams.pSubBandParams, SubBandParamsJP923, sizeof(SubBandParamsJP923) );
    634c:	0020      	movs	r0, r4
    634e:	30c4      	adds	r0, #196	; 0xc4
    6350:	30ff      	adds	r0, #255	; 0xff
    6352:	220c      	movs	r2, #12
    6354:	493b      	ldr	r1, [pc, #236]	; (6444 <LORAReg_InitJP+0x280>)
    6356:	47a8      	blx	r5
	memcpy (RegParams.cmnParams.paramsType2.subBandDutyCycle,SubBandDutyCycleJP923,sizeof(SubBandDutyCycleJP923));
    6358:	0020      	movs	r0, r4
    635a:	30ae      	adds	r0, #174	; 0xae
    635c:	30ff      	adds	r0, #255	; 0xff
    635e:	2202      	movs	r2, #2
    6360:	4939      	ldr	r1, [pc, #228]	; (6448 <LORAReg_InitJP+0x284>)
    6362:	47a8      	blx	r5
    6364:	2302      	movs	r3, #2
    6366:	2202      	movs	r2, #2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6368:	492e      	ldr	r1, [pc, #184]	; (6424 <LORAReg_InitJP+0x260>)
    636a:	3fc0      	subs	r7, #192	; 0xc0
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    636c:	2500      	movs	r5, #0
    for (i = 2; i < RegParams.maxChannels; i++)
    636e:	3e97      	subs	r6, #151	; 0x97
    6370:	3eff      	subs	r6, #255	; 0xff
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    6372:	7908      	ldrb	r0, [r1, #4]
    6374:	794c      	ldrb	r4, [r1, #5]
    6376:	0224      	lsls	r4, r4, #8
    6378:	4304      	orrs	r4, r0
    637a:	7988      	ldrb	r0, [r1, #6]
    637c:	0400      	lsls	r0, r0, #16
    637e:	4304      	orrs	r4, r0
    6380:	79c8      	ldrb	r0, [r1, #7]
    6382:	0600      	lsls	r0, r0, #24
    6384:	4320      	orrs	r0, r4
    6386:	0054      	lsls	r4, r2, #1
    6388:	1820      	adds	r0, r4, r0
    638a:	7047      	strb	r7, [r0, #1]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    638c:	3358      	adds	r3, #88	; 0x58
    638e:	009b      	lsls	r3, r3, #2
    6390:	18cb      	adds	r3, r1, r3
    6392:	721d      	strb	r5, [r3, #8]
    6394:	725d      	strb	r5, [r3, #9]
    6396:	729d      	strb	r5, [r3, #10]
    6398:	72dd      	strb	r5, [r3, #11]
    for (i = 2; i < RegParams.maxChannels; i++)
    639a:	3201      	adds	r2, #1
    639c:	b2d2      	uxtb	r2, r2
    639e:	0013      	movs	r3, r2
    63a0:	5788      	ldrsb	r0, [r1, r6]
    63a2:	4282      	cmp	r2, r0
    63a4:	dbe5      	blt.n	6372 <LORAReg_InitJP+0x1ae>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    63a6:	4c1f      	ldr	r4, [pc, #124]	; (6424 <LORAReg_InitJP+0x260>)
    63a8:	22ff      	movs	r2, #255	; 0xff
    63aa:	232f      	movs	r3, #47	; 0x2f
    63ac:	54e2      	strb	r2, [r4, r3]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = DEFAULT_EIRP_JP;//MAX_EIRP_JP;
    63ae:	3aef      	subs	r2, #239	; 0xef
    63b0:	23c2      	movs	r3, #194	; 0xc2
    63b2:	33ff      	adds	r3, #255	; 0xff
    63b4:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsJP, sizeof(DefaultDrParamsJP) );
    63b6:	7820      	ldrb	r0, [r4, #0]
    63b8:	7863      	ldrb	r3, [r4, #1]
    63ba:	021b      	lsls	r3, r3, #8
    63bc:	4303      	orrs	r3, r0
    63be:	78a0      	ldrb	r0, [r4, #2]
    63c0:	0400      	lsls	r0, r0, #16
    63c2:	4303      	orrs	r3, r0
    63c4:	78e0      	ldrb	r0, [r4, #3]
    63c6:	0600      	lsls	r0, r0, #24
    63c8:	4318      	orrs	r0, r3
    63ca:	3230      	adds	r2, #48	; 0x30
    63cc:	491f      	ldr	r1, [pc, #124]	; (644c <LORAReg_InitJP+0x288>)
    63ce:	4b1b      	ldr	r3, [pc, #108]	; (643c <LORAReg_InitJP+0x278>)
    63d0:	4798      	blx	r3
		RegParams.regParamItems.fileid = PDS_FILE_REG_JPN_08_IDX;
    63d2:	2307      	movs	r3, #7
    63d4:	2107      	movs	r1, #7
    63d6:	4a1e      	ldr	r2, [pc, #120]	; (6450 <LORAReg_InitJP+0x28c>)
    63d8:	54a1      	strb	r1, [r4, r2]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_JPN_CH_PARAM_1;
    63da:	2100      	movs	r1, #0
    63dc:	4a1d      	ldr	r2, [pc, #116]	; (6454 <LORAReg_InitJP+0x290>)
    63de:	54a1      	strb	r1, [r4, r2]
    63e0:	18a2      	adds	r2, r4, r2
    63e2:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_JPN_CH_PARAM_2;
    63e4:	3101      	adds	r1, #1
    63e6:	2284      	movs	r2, #132	; 0x84
    63e8:	0092      	lsls	r2, r2, #2
    63ea:	54a1      	strb	r1, [r4, r2]
    63ec:	18a2      	adds	r2, r4, r2
    63ee:	7053      	strb	r3, [r2, #1]
		RegParams.regParamItems.band_item_id = 0;
    63f0:	2200      	movs	r2, #0
    63f2:	4b19      	ldr	r3, [pc, #100]	; (6458 <LORAReg_InitJP+0x294>)
    63f4:	54e2      	strb	r2, [r4, r3]
    63f6:	18e3      	adds	r3, r4, r3
    63f8:	705a      	strb	r2, [r3, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    63fa:	2383      	movs	r3, #131	; 0x83
    63fc:	009b      	lsls	r3, r3, #2
    63fe:	54e2      	strb	r2, [r4, r3]
    6400:	469c      	mov	ip, r3
    6402:	4464      	add	r4, ip
    6404:	2300      	movs	r3, #0
    6406:	7063      	strb	r3, [r4, #1]
		filemarks.fileMarkListAddr = aRegJpnFid1PdsOps;
    6408:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_JPN_FID1_MAX_VALUE & 0x00FF);
    640a:	3202      	adds	r2, #2
    640c:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_JPN_Pds_Cb;
    640e:	4a13      	ldr	r2, [pc, #76]	; (645c <LORAReg_InitJP+0x298>)
		PDS_RegFile(PDS_FILE_REG_JPN_08_IDX,filemarks);
    6410:	9200      	str	r2, [sp, #0]
    6412:	4913      	ldr	r1, [pc, #76]	; (6460 <LORAReg_InitJP+0x29c>)
    6414:	9a03      	ldr	r2, [sp, #12]
    6416:	4b13      	ldr	r3, [pc, #76]	; (6464 <LORAReg_InitJP+0x2a0>)
    6418:	2007      	movs	r0, #7
    641a:	4c13      	ldr	r4, [pc, #76]	; (6468 <LORAReg_InitJP+0x2a4>)
    641c:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    641e:	2408      	movs	r4, #8
    6420:	e77d      	b.n	631e <LORAReg_InitJP+0x15a>
    6422:	46c0      	nop			; (mov r8, r8)
    6424:	20001b54 	.word	0x20001b54
    6428:	20001b50 	.word	0x20001b50
    642c:	0000a259 	.word	0x0000a259
    6430:	0000a6fd 	.word	0x0000a6fd
    6434:	0000a9a1 	.word	0x0000a9a1
    6438:	0001da20 	.word	0x0001da20
    643c:	00015f45 	.word	0x00015f45
    6440:	0001da08 	.word	0x0001da08
    6444:	0001da68 	.word	0x0001da68
    6448:	0001da64 	.word	0x0001da64
    644c:	0001da24 	.word	0x0001da24
    6450:	0000020b 	.word	0x0000020b
    6454:	0000020e 	.word	0x0000020e
    6458:	00000212 	.word	0x00000212
    645c:	000061c1 	.word	0x000061c1
    6460:	20001944 	.word	0x20001944
    6464:	0001da74 	.word	0x0001da74
    6468:	0000b185 	.word	0x0000b185

0000646c <LorawanReg_KR_Pds_Cb>:
#if (ENABLE_PDS == 1)
/* PDS Callback */
void LorawanReg_KR_Pds_Cb(void)
{

}
    646c:	4770      	bx	lr
	...

00006470 <LORAReg_InitKR>:
{
    6470:	b5f0      	push	{r4, r5, r6, r7, lr}
    6472:	46de      	mov	lr, fp
    6474:	4657      	mov	r7, sl
    6476:	464e      	mov	r6, r9
    6478:	4645      	mov	r5, r8
    647a:	b5e0      	push	{r5, r6, r7, lr}
    647c:	b087      	sub	sp, #28
	RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_KR;
    647e:	4ba9      	ldr	r3, [pc, #676]	; (6724 <LORAReg_InitKR+0x2b4>)
    6480:	2403      	movs	r4, #3
    6482:	2226      	movs	r2, #38	; 0x26
    6484:	549c      	strb	r4, [r3, r2]
	RegParams.maxChannels = MAX_CHANNELS_KR;
    6486:	2110      	movs	r1, #16
    6488:	3204      	adds	r2, #4
    648a:	5499      	strb	r1, [r3, r2]
	RegParams.maxSubBands = MAX_NUM_SUBBANDS_KR;
    648c:	3a29      	subs	r2, #41	; 0x29
    648e:	3119      	adds	r1, #25
    6490:	545a      	strb	r2, [r3, r1]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_KR;
    6492:	3902      	subs	r1, #2
    6494:	545a      	strb	r2, [r3, r1]
	RegParams.pChParams = &RegParams.cmnParams.paramsType2.chParams[0];
    6496:	001a      	movs	r2, r3
    6498:	3283      	adds	r2, #131	; 0x83
    649a:	2100      	movs	r1, #0
    649c:	711a      	strb	r2, [r3, #4]
    649e:	0a15      	lsrs	r5, r2, #8
    64a0:	715d      	strb	r5, [r3, #5]
    64a2:	0c15      	lsrs	r5, r2, #16
    64a4:	719d      	strb	r5, [r3, #6]
    64a6:	0e12      	lsrs	r2, r2, #24
    64a8:	71da      	strb	r2, [r3, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType2.DRParams[0];
    64aa:	001a      	movs	r2, r3
    64ac:	3243      	adds	r2, #67	; 0x43
    64ae:	701a      	strb	r2, [r3, #0]
    64b0:	0a15      	lsrs	r5, r2, #8
    64b2:	705d      	strb	r5, [r3, #1]
    64b4:	0c15      	lsrs	r5, r2, #16
    64b6:	709d      	strb	r5, [r3, #2]
    64b8:	0e12      	lsrs	r2, r2, #24
    64ba:	70da      	strb	r2, [r3, #3]
	RegParams.pOtherChParams = &RegParams.cmnParams.paramsType2.othChParams[0];
    64bc:	001a      	movs	r2, r3
    64be:	32a3      	adds	r2, #163	; 0xa3
    64c0:	721a      	strb	r2, [r3, #8]
    64c2:	0a15      	lsrs	r5, r2, #8
    64c4:	725d      	strb	r5, [r3, #9]
    64c6:	0c15      	lsrs	r5, r2, #16
    64c8:	729d      	strb	r5, [r3, #10]
    64ca:	0e12      	lsrs	r2, r2, #24
    64cc:	72da      	strb	r2, [r3, #11]
	RegParams.pDutyCycleTimer = &RegParams.cmnParams.paramsType2.DutyCycleTimer;
    64ce:	001a      	movs	r2, r3
    64d0:	3264      	adds	r2, #100	; 0x64
    64d2:	32ff      	adds	r2, #255	; 0xff
    64d4:	741a      	strb	r2, [r3, #16]
    64d6:	0a15      	lsrs	r5, r2, #8
    64d8:	745d      	strb	r5, [r3, #17]
    64da:	0c15      	lsrs	r5, r2, #16
    64dc:	749d      	strb	r5, [r3, #18]
    64de:	0e12      	lsrs	r2, r2, #24
    64e0:	74da      	strb	r2, [r3, #19]
    RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    64e2:	001a      	movs	r2, r3
    64e4:	3234      	adds	r2, #52	; 0x34
    64e6:	751a      	strb	r2, [r3, #20]
    64e8:	0a15      	lsrs	r5, r2, #8
    64ea:	755d      	strb	r5, [r3, #21]
    64ec:	0c15      	lsrs	r5, r2, #16
    64ee:	759d      	strb	r5, [r3, #22]
    64f0:	0e12      	lsrs	r2, r2, #24
    64f2:	75da      	strb	r2, [r3, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    64f4:	001a      	movs	r2, r3
    64f6:	323d      	adds	r2, #61	; 0x3d
    64f8:	761a      	strb	r2, [r3, #24]
    64fa:	0a15      	lsrs	r5, r2, #8
    64fc:	765d      	strb	r5, [r3, #25]
    64fe:	0c15      	lsrs	r5, r2, #16
    6500:	769d      	strb	r5, [r3, #26]
    6502:	0e12      	lsrs	r2, r2, #24
    6504:	76da      	strb	r2, [r3, #27]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_KR;
    6506:	2222      	movs	r2, #34	; 0x22
    6508:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_KR;
    650a:	3201      	adds	r2, #1
    650c:	5499      	strb	r1, [r3, r2]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_KR;	
    650e:	3a43      	subs	r2, #67	; 0x43
    6510:	771a      	strb	r2, [r3, #28]
    6512:	3233      	adds	r2, #51	; 0x33
    6514:	775a      	strb	r2, [r3, #29]
    6516:	3a20      	subs	r2, #32
    6518:	779a      	strb	r2, [r3, #30]
    651a:	3243      	adds	r2, #67	; 0x43
    651c:	77da      	strb	r2, [r3, #31]
	RegParams.MinNewChIndex = MIN_CHANNEL_INDEX_KR;
    651e:	3a15      	subs	r2, #21
    6520:	549c      	strb	r4, [r3, r2]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_KR;
    6522:	2534      	movs	r5, #52	; 0x34
    6524:	3a01      	subs	r2, #1
    6526:	549d      	strb	r5, [r3, r2]
	RegParams.minDataRate = MAC_DATARATE_MIN_KR;
    6528:	3a1b      	subs	r2, #27
    652a:	3d10      	subs	r5, #16
    652c:	555a      	strb	r2, [r3, r5]
	RegParams.maxDataRate = MAC_DATARATE_MAX_KR;
    652e:	3501      	adds	r5, #1
    6530:	5559      	strb	r1, [r3, r5]
	RegParams.cmnParams.paramsType2.LBTScanPeriod = LBT_SCAN_PERIOD_KR;
    6532:	3d1b      	subs	r5, #27
    6534:	26be      	movs	r6, #190	; 0xbe
    6536:	36ff      	adds	r6, #255	; 0xff
    6538:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.LBTSignalThreshold = LBT_SIGNAL_THRESHOLD_KR;
    653a:	27bf      	movs	r7, #191	; 0xbf
    653c:	3601      	adds	r6, #1
    653e:	559f      	strb	r7, [r3, r6]
	RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount = LBT_RSSI_SAMPLES_COUNT_KR;
    6540:	26c0      	movs	r6, #192	; 0xc0
    6542:	36ff      	adds	r6, #255	; 0xff
    6544:	559d      	strb	r5, [r3, r6]
	RegParams.cmnParams.paramsType2.minNonDefChId = 3;
    6546:	35b7      	adds	r5, #183	; 0xb7
    6548:	35ff      	adds	r5, #255	; 0xff
    654a:	555c      	strb	r4, [r3, r5]
	RegParams.Rx1DrOffset = 5;
    654c:	3429      	adds	r4, #41	; 0x29
    654e:	551a      	strb	r2, [r3, r4]
	RegParams.maxTxPwrIndx = 7;
    6550:	3c25      	subs	r4, #37	; 0x25
    6552:	3228      	adds	r2, #40	; 0x28
    6554:	549c      	strb	r4, [r3, r2]
	RegParams.maxTxPwr = 14;
    6556:	3407      	adds	r4, #7
    6558:	3a05      	subs	r2, #5
    655a:	549c      	strb	r4, [r3, r2]
	RegParams.cmnParams.paramsType2.LBTTimer.timerId = regTimerId[0];
    655c:	4a72      	ldr	r2, [pc, #456]	; (6728 <LORAReg_InitKR+0x2b8>)
    655e:	7815      	ldrb	r5, [r2, #0]
    6560:	349f      	adds	r4, #159	; 0x9f
    6562:	34ff      	adds	r4, #255	; 0xff
    6564:	551d      	strb	r5, [r3, r4]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[1];
    6566:	7855      	ldrb	r5, [r2, #1]
    6568:	3c70      	subs	r4, #112	; 0x70
    656a:	3cff      	subs	r4, #255	; 0xff
    656c:	551d      	strb	r5, [r3, r4]
    RegParams.pJoinDutyCycleTimer->timerId = regTimerId[2];
    656e:	7894      	ldrb	r4, [r2, #2]
    6570:	223c      	movs	r2, #60	; 0x3c
    6572:	549c      	strb	r4, [r3, r2]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    6574:	2400      	movs	r4, #0
    6576:	3a04      	subs	r2, #4
    6578:	549c      	strb	r4, [r3, r2]
    657a:	3201      	adds	r2, #1
    657c:	549c      	strb	r4, [r3, r2]
    657e:	3201      	adds	r2, #1
    6580:	549c      	strb	r4, [r3, r2]
    6582:	3201      	adds	r2, #1
    6584:	549c      	strb	r4, [r3, r2]
	RegParams.joinbccount =0;
    6586:	3207      	adds	r2, #7
    6588:	5499      	strb	r1, [r3, r2]
	RegParams.joinDutyCycleTimeout =0;
    658a:	001a      	movs	r2, r3
    658c:	323e      	adds	r2, #62	; 0x3e
    658e:	7011      	strb	r1, [r2, #0]
    6590:	7051      	strb	r1, [r2, #1]
    6592:	7091      	strb	r1, [r2, #2]
    6594:	70d1      	strb	r1, [r2, #3]
	RegParams.band = ismBand;
    6596:	222e      	movs	r2, #46	; 0x2e
    6598:	5498      	strb	r0, [r3, r2]
		result = UNSUPPORTED_BAND;
    659a:	34c6      	adds	r4, #198	; 0xc6
	if(ismBand == ISM_KR920)
    659c:	2804      	cmp	r0, #4
    659e:	d00d      	beq.n	65bc <LORAReg_InitKR+0x14c>
    LORAREG_InitGetAttrFnPtrsKR();
    65a0:	4b62      	ldr	r3, [pc, #392]	; (672c <LORAReg_InitKR+0x2bc>)
    65a2:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsKR();
    65a4:	4b62      	ldr	r3, [pc, #392]	; (6730 <LORAReg_InitKR+0x2c0>)
    65a6:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsKR();
    65a8:	4b62      	ldr	r3, [pc, #392]	; (6734 <LORAReg_InitKR+0x2c4>)
    65aa:	4798      	blx	r3
}
    65ac:	0020      	movs	r0, r4
    65ae:	b007      	add	sp, #28
    65b0:	bc3c      	pop	{r2, r3, r4, r5}
    65b2:	4690      	mov	r8, r2
    65b4:	4699      	mov	r9, r3
    65b6:	46a2      	mov	sl, r4
    65b8:	46ab      	mov	fp, r5
    65ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    memcpy (RegParams.pChParams, DefaultChannels920KR, sizeof(DefaultChannels920KR) );
    65bc:	001c      	movs	r4, r3
    65be:	0018      	movs	r0, r3
    65c0:	3083      	adds	r0, #131	; 0x83
    65c2:	3a28      	subs	r2, #40	; 0x28
    65c4:	495c      	ldr	r1, [pc, #368]	; (6738 <LORAReg_InitKR+0x2c8>)
    65c6:	4d5d      	ldr	r5, [pc, #372]	; (673c <LORAReg_InitKR+0x2cc>)
    65c8:	47a8      	blx	r5
	memcpy (RegParams.pOtherChParams, AdvChannels920KR, sizeof(AdvChannels920KR) );
    65ca:	0020      	movs	r0, r4
    65cc:	30a3      	adds	r0, #163	; 0xa3
    65ce:	2224      	movs	r2, #36	; 0x24
    65d0:	495b      	ldr	r1, [pc, #364]	; (6740 <LORAReg_InitKR+0x2d0>)
    65d2:	47a8      	blx	r5
    65d4:	2103      	movs	r1, #3
    65d6:	2003      	movs	r0, #3
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    65d8:	4b52      	ldr	r3, [pc, #328]	; (6724 <LORAReg_InitKR+0x2b4>)
    65da:	22ff      	movs	r2, #255	; 0xff
    65dc:	4692      	mov	sl, r2
		RegParams.pChParams[i].status = DISABLED;
    65de:	2400      	movs	r4, #0
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    65e0:	22c2      	movs	r2, #194	; 0xc2
    65e2:	32ff      	adds	r2, #255	; 0xff
    65e4:	4694      	mov	ip, r2
    65e6:	4657      	mov	r7, sl
    for (i = 3; i < RegParams.maxChannels; i++)
    65e8:	3a98      	subs	r2, #152	; 0x98
    65ea:	3aff      	subs	r2, #255	; 0xff
    65ec:	4693      	mov	fp, r2
	    RegParams.pChParams[i].dataRange.value = UINT8_MAX;
    65ee:	0042      	lsls	r2, r0, #1
    65f0:	791e      	ldrb	r6, [r3, #4]
    65f2:	46b0      	mov	r8, r6
    65f4:	795e      	ldrb	r6, [r3, #5]
    65f6:	0236      	lsls	r6, r6, #8
    65f8:	46b1      	mov	r9, r6
    65fa:	4646      	mov	r6, r8
    65fc:	464d      	mov	r5, r9
    65fe:	432e      	orrs	r6, r5
    6600:	799d      	ldrb	r5, [r3, #6]
    6602:	042d      	lsls	r5, r5, #16
    6604:	432e      	orrs	r6, r5
    6606:	79dd      	ldrb	r5, [r3, #7]
    6608:	062d      	lsls	r5, r5, #24
    660a:	432e      	orrs	r6, r5
    660c:	46b0      	mov	r8, r6
    660e:	4490      	add	r8, r2
    6610:	4645      	mov	r5, r8
    6612:	4656      	mov	r6, sl
    6614:	706e      	strb	r6, [r5, #1]
		RegParams.pChParams[i].status = DISABLED;
    6616:	791d      	ldrb	r5, [r3, #4]
    6618:	46a8      	mov	r8, r5
    661a:	795d      	ldrb	r5, [r3, #5]
    661c:	022d      	lsls	r5, r5, #8
    661e:	4646      	mov	r6, r8
    6620:	432e      	orrs	r6, r5
    6622:	799d      	ldrb	r5, [r3, #6]
    6624:	042d      	lsls	r5, r5, #16
    6626:	432e      	orrs	r6, r5
    6628:	79dd      	ldrb	r5, [r3, #7]
    662a:	062d      	lsls	r5, r5, #24
    662c:	432e      	orrs	r6, r5
    662e:	54b4      	strb	r4, [r6, r2]
		RegParams.pOtherChParams[i].joinRequestChannel = DISABLED;
    6630:	7a1d      	ldrb	r5, [r3, #8]
    6632:	46a8      	mov	r8, r5
    6634:	7a5d      	ldrb	r5, [r3, #9]
    6636:	022d      	lsls	r5, r5, #8
    6638:	4646      	mov	r6, r8
    663a:	432e      	orrs	r6, r5
    663c:	7a9d      	ldrb	r5, [r3, #10]
    663e:	042d      	lsls	r5, r5, #16
    6640:	432e      	orrs	r6, r5
    6642:	7add      	ldrb	r5, [r3, #11]
    6644:	062d      	lsls	r5, r5, #24
    6646:	432e      	orrs	r6, r5
    6648:	46b0      	mov	r8, r6
    664a:	1812      	adds	r2, r2, r0
    664c:	0092      	lsls	r2, r2, #2
    664e:	4442      	add	r2, r8
    6650:	7254      	strb	r4, [r2, #9]
		RegParams.cmnParams.paramsType2.txParams.maxEIRP = UINT8_MAX;
    6652:	4662      	mov	r2, ip
    6654:	549f      	strb	r7, [r3, r2]
		RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    6656:	000a      	movs	r2, r1
    6658:	3258      	adds	r2, #88	; 0x58
    665a:	0092      	lsls	r2, r2, #2
    665c:	189a      	adds	r2, r3, r2
    665e:	7214      	strb	r4, [r2, #8]
    6660:	7254      	strb	r4, [r2, #9]
    6662:	7294      	strb	r4, [r2, #10]
    6664:	72d4      	strb	r4, [r2, #11]
    for (i = 3; i < RegParams.maxChannels; i++)
    6666:	3001      	adds	r0, #1
    6668:	b2c0      	uxtb	r0, r0
    666a:	0001      	movs	r1, r0
    666c:	465a      	mov	r2, fp
    666e:	569a      	ldrsb	r2, [r3, r2]
    6670:	4290      	cmp	r0, r2
    6672:	dbbc      	blt.n	65ee <LORAReg_InitKR+0x17e>
	RegParams.lastUsedChannelIndex = UINT8_MAX;
    6674:	4c2b      	ldr	r4, [pc, #172]	; (6724 <LORAReg_InitKR+0x2b4>)
    6676:	22ff      	movs	r2, #255	; 0xff
    6678:	232f      	movs	r3, #47	; 0x2f
    667a:	54e2      	strb	r2, [r4, r3]
		memcpy (RegParams.pDrParams, DefaultDrParamsKR, sizeof(DefaultDrParamsKR) );
    667c:	7820      	ldrb	r0, [r4, #0]
    667e:	7863      	ldrb	r3, [r4, #1]
    6680:	021b      	lsls	r3, r3, #8
    6682:	4303      	orrs	r3, r0
    6684:	78a0      	ldrb	r0, [r4, #2]
    6686:	0400      	lsls	r0, r0, #16
    6688:	4303      	orrs	r3, r0
    668a:	78e0      	ldrb	r0, [r4, #3]
    668c:	0600      	lsls	r0, r0, #24
    668e:	4318      	orrs	r0, r3
    6690:	3acf      	subs	r2, #207	; 0xcf
    6692:	492c      	ldr	r1, [pc, #176]	; (6744 <LORAReg_InitKR+0x2d4>)
    6694:	4b29      	ldr	r3, [pc, #164]	; (673c <LORAReg_InitKR+0x2cc>)
    6696:	4798      	blx	r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    6698:	2325      	movs	r3, #37	; 0x25
    669a:	5ce3      	ldrb	r3, [r4, r3]
    669c:	2b00      	cmp	r3, #0
    669e:	dd18      	ble.n	66d2 <LORAReg_InitKR+0x262>
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    66a0:	4a20      	ldr	r2, [pc, #128]	; (6724 <LORAReg_InitKR+0x2b4>)
    66a2:	7811      	ldrb	r1, [r2, #0]
    66a4:	7853      	ldrb	r3, [r2, #1]
    66a6:	021b      	lsls	r3, r3, #8
    66a8:	430b      	orrs	r3, r1
    66aa:	7891      	ldrb	r1, [r2, #2]
    66ac:	0409      	lsls	r1, r1, #16
    66ae:	430b      	orrs	r3, r1
    66b0:	78d1      	ldrb	r1, [r2, #3]
    66b2:	0609      	lsls	r1, r1, #24
    66b4:	4319      	orrs	r1, r3
    66b6:	2300      	movs	r3, #0
    66b8:	2601      	movs	r6, #1
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    66ba:	2507      	movs	r5, #7
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    66bc:	0014      	movs	r4, r2
    66be:	2025      	movs	r0, #37	; 0x25
			RegParams.pDrParams[dataRate].modulation = MODULATION_LORA;
    66c0:	00da      	lsls	r2, r3, #3
    66c2:	188a      	adds	r2, r1, r2
    66c4:	71d6      	strb	r6, [r2, #7]
			RegParams.pDrParams[dataRate].bandwidth = BW_125KHZ;
    66c6:	7195      	strb	r5, [r2, #6]
    66c8:	3301      	adds	r3, #1
    66ca:	b25b      	sxtb	r3, r3
		for(int8_t dataRate = 0; dataRate < RegParams.maxDataRate; dataRate++)
    66cc:	5c22      	ldrb	r2, [r4, r0]
    66ce:	4293      	cmp	r3, r2
    66d0:	dbf6      	blt.n	66c0 <LORAReg_InitKR+0x250>
		RegParams.regParamItems.fileid = PDS_FILE_REG_KR_06_IDX;
    66d2:	4b14      	ldr	r3, [pc, #80]	; (6724 <LORAReg_InitKR+0x2b4>)
    66d4:	2205      	movs	r2, #5
    66d6:	2005      	movs	r0, #5
    66d8:	491b      	ldr	r1, [pc, #108]	; (6748 <LORAReg_InitKR+0x2d8>)
    66da:	5458      	strb	r0, [r3, r1]
		RegParams.regParamItems.ch_param_1_item_id = PDS_REG_KR_CH_PARAM_1;
    66dc:	2000      	movs	r0, #0
    66de:	491b      	ldr	r1, [pc, #108]	; (674c <LORAReg_InitKR+0x2dc>)
    66e0:	5458      	strb	r0, [r3, r1]
    66e2:	1859      	adds	r1, r3, r1
    66e4:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.ch_param_2_item_id = PDS_REG_KR_CH_PARAM_2;
    66e6:	3001      	adds	r0, #1
    66e8:	2184      	movs	r1, #132	; 0x84
    66ea:	0089      	lsls	r1, r1, #2
    66ec:	5458      	strb	r0, [r3, r1]
    66ee:	1859      	adds	r1, r3, r1
    66f0:	704a      	strb	r2, [r1, #1]
		RegParams.regParamItems.band_item_id = 0;
    66f2:	2100      	movs	r1, #0
    66f4:	4a16      	ldr	r2, [pc, #88]	; (6750 <LORAReg_InitKR+0x2e0>)
    66f6:	5499      	strb	r1, [r3, r2]
    66f8:	189a      	adds	r2, r3, r2
    66fa:	7051      	strb	r1, [r2, #1]
		RegParams.regParamItems.lastUsedSB = 0;
    66fc:	2283      	movs	r2, #131	; 0x83
    66fe:	0092      	lsls	r2, r2, #2
    6700:	5499      	strb	r1, [r3, r2]
    6702:	4694      	mov	ip, r2
    6704:	4463      	add	r3, ip
    6706:	2200      	movs	r2, #0
    6708:	705a      	strb	r2, [r3, #1]
		filemarks.fileMarkListAddr = aRegKrFid1PdsOps;
    670a:	ab02      	add	r3, sp, #8
		filemarks.numItems =  (uint8_t)(PDS_REG_KR_FID1_MAX_VALUE & 0x00FF);
    670c:	3202      	adds	r2, #2
    670e:	711a      	strb	r2, [r3, #4]
		filemarks.fIDcb = LorawanReg_KR_Pds_Cb;
    6710:	4a10      	ldr	r2, [pc, #64]	; (6754 <LORAReg_InitKR+0x2e4>)
		PDS_RegFile(PDS_FILE_REG_KR_06_IDX,filemarks);
    6712:	9200      	str	r2, [sp, #0]
    6714:	4910      	ldr	r1, [pc, #64]	; (6758 <LORAReg_InitKR+0x2e8>)
    6716:	9a03      	ldr	r2, [sp, #12]
    6718:	4b10      	ldr	r3, [pc, #64]	; (675c <LORAReg_InitKR+0x2ec>)
    671a:	3004      	adds	r0, #4
    671c:	4c10      	ldr	r4, [pc, #64]	; (6760 <LORAReg_InitKR+0x2f0>)
    671e:	47a0      	blx	r4
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6720:	2408      	movs	r4, #8
    6722:	e73d      	b.n	65a0 <LORAReg_InitKR+0x130>
    6724:	20001b54 	.word	0x20001b54
    6728:	20001b50 	.word	0x20001b50
    672c:	0000a3a1 	.word	0x0000a3a1
    6730:	0000a769 	.word	0x0000a769
    6734:	0000aa0d 	.word	0x0000aa0d
    6738:	0001daa8 	.word	0x0001daa8
    673c:	00015f45 	.word	0x00015f45
    6740:	0001da84 	.word	0x0001da84
    6744:	0001dab0 	.word	0x0001dab0
    6748:	0000020b 	.word	0x0000020b
    674c:	0000020e 	.word	0x0000020e
    6750:	00000212 	.word	0x00000212
    6754:	0000646d 	.word	0x0000646d
    6758:	20001948 	.word	0x20001948
    675c:	0001dae0 	.word	0x0001dae0
    6760:	0000b185 	.word	0x0000b185

00006764 <LorawanReg_NA_Pds_Cb>:

#if (ENABLE_PDS == 1)
void LorawanReg_NA_Pds_Cb(void)
{
	
}
    6764:	4770      	bx	lr
	...

00006768 <LORAReg_InitNA>:
{
    6768:	b5f0      	push	{r4, r5, r6, r7, lr}
    676a:	46de      	mov	lr, fp
    676c:	4657      	mov	r7, sl
    676e:	464e      	mov	r6, r9
    6770:	4645      	mov	r5, r8
    6772:	b5e0      	push	{r5, r6, r7, lr}
    6774:	b089      	sub	sp, #36	; 0x24
    6776:	9003      	str	r0, [sp, #12]
    RegParams.TxCurDataRate = MAC_DEF_TX_CURRENT_DATARATE_NA;
    6778:	4c7d      	ldr	r4, [pc, #500]	; (6970 <LORAReg_InitNA+0x208>)
    677a:	2702      	movs	r7, #2
    677c:	2302      	movs	r3, #2
    677e:	469b      	mov	fp, r3
    6780:	2326      	movs	r3, #38	; 0x26
    6782:	54e7      	strb	r7, [r4, r3]
	RegParams.maxChannels = MAX_CHANNELS_T1;
    6784:	2248      	movs	r2, #72	; 0x48
    6786:	3304      	adds	r3, #4
    6788:	54e2      	strb	r2, [r4, r3]
	RegParams.MacTxPower = MAC_DEF_TX_POWER_NA;
    678a:	3a41      	subs	r2, #65	; 0x41
    678c:	3b03      	subs	r3, #3
    678e:	54e2      	strb	r2, [r4, r3]
	RegParams.maxTxPwr = MAX_TX_PWR_NA;
    6790:	3217      	adds	r2, #23
    6792:	3301      	adds	r3, #1
    6794:	54e2      	strb	r2, [r4, r3]
	RegParams.pChParams = &RegParams.cmnParams.paramsType1.chParams[0];
    6796:	0023      	movs	r3, r4
    6798:	33b3      	adds	r3, #179	; 0xb3
    679a:	0018      	movs	r0, r3
    679c:	2500      	movs	r5, #0
    679e:	7123      	strb	r3, [r4, #4]
    67a0:	0a1b      	lsrs	r3, r3, #8
    67a2:	7163      	strb	r3, [r4, #5]
    67a4:	0c03      	lsrs	r3, r0, #16
    67a6:	71a3      	strb	r3, [r4, #6]
    67a8:	0e03      	lsrs	r3, r0, #24
    67aa:	71e3      	strb	r3, [r4, #7]
	RegParams.pDrParams = &RegParams.cmnParams.paramsType1.DRParams[0];
    67ac:	0026      	movs	r6, r4
    67ae:	3643      	adds	r6, #67	; 0x43
    67b0:	7026      	strb	r6, [r4, #0]
    67b2:	0a33      	lsrs	r3, r6, #8
    67b4:	7063      	strb	r3, [r4, #1]
    67b6:	0c33      	lsrs	r3, r6, #16
    67b8:	70a3      	strb	r3, [r4, #2]
    67ba:	0e33      	lsrs	r3, r6, #24
    67bc:	70e3      	strb	r3, [r4, #3]
	RegParams.MinNewChIndex = 0xFF;
    67be:	2321      	movs	r3, #33	; 0x21
    67c0:	32e1      	adds	r2, #225	; 0xe1
    67c2:	54e2      	strb	r2, [r4, r3]
	RegParams.DefRx1DataRate = MAC_RX1_WINDOW_DATARATE_NA;
    67c4:	3add      	subs	r2, #221	; 0xdd
    67c6:	3b17      	subs	r3, #23
    67c8:	54a3      	strb	r3, [r4, r2]
	RegParams.DefRx2DataRate = MAC_RX2_WINDOW_DATARATE_NA;
    67ca:	3a1a      	subs	r2, #26
    67cc:	2108      	movs	r1, #8
    67ce:	468c      	mov	ip, r1
    67d0:	2123      	movs	r1, #35	; 0x23
    67d2:	5462      	strb	r2, [r4, r1]
	RegParams.DefRx2Freq = MAC_RX2_WINDOW_FREQ_NA;
    67d4:	3983      	subs	r1, #131	; 0x83
    67d6:	4688      	mov	r8, r1
    67d8:	7721      	strb	r1, [r4, #28]
    67da:	2170      	movs	r1, #112	; 0x70
    67dc:	7761      	strb	r1, [r4, #29]
    67de:	4661      	mov	r1, ip
    67e0:	77a1      	strb	r1, [r4, #30]
    67e2:	2137      	movs	r1, #55	; 0x37
    67e4:	77e1      	strb	r1, [r4, #31]
	RegParams.FeaturesSupport = FEATURES_SUPPORTED_NA;
    67e6:	3917      	subs	r1, #23
    67e8:	2338      	movs	r3, #56	; 0x38
    67ea:	5463      	strb	r3, [r4, r1]
	RegParams.minDataRate = MAC_DATARATE_MIN_NA;
    67ec:	391c      	subs	r1, #28
    67ee:	4689      	mov	r9, r1
    67f0:	3120      	adds	r1, #32
    67f2:	464b      	mov	r3, r9
    67f4:	5463      	strb	r3, [r4, r1]
	RegParams.maxDataRate = MAC_DATARATE_MAX_NA;
    67f6:	2325      	movs	r3, #37	; 0x25
    67f8:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_125khzChan = MAX_CHANNELS_BANDWIDTH_125_AU_NA;
    67fa:	2354      	movs	r3, #84	; 0x54
    67fc:	33ff      	adds	r3, #255	; 0xff
    67fe:	311c      	adds	r1, #28
    6800:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.Max_500khzChan = MAX_CHANNELS_BANDWIDTH_500_AU_NA;
    6802:	3301      	adds	r3, #1
    6804:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.minTxDR = DR0;
    6806:	2350      	movs	r3, #80	; 0x50
    6808:	33ff      	adds	r3, #255	; 0xff
    680a:	54e5      	strb	r5, [r4, r3]
	RegParams.cmnParams.paramsType1.maxTxDR = DR4;
    680c:	3301      	adds	r3, #1
    680e:	4649      	mov	r1, r9
    6810:	54e1      	strb	r1, [r4, r3]
	RegParams.cmnParams.paramsType1.minRxDR = DR8;
    6812:	2352      	movs	r3, #82	; 0x52
    6814:	33ff      	adds	r3, #255	; 0xff
    6816:	54e2      	strb	r2, [r4, r3]
	RegParams.cmnParams.paramsType1.maxRxDR = DR13;
    6818:	3b45      	subs	r3, #69	; 0x45
    681a:	3bff      	subs	r3, #255	; 0xff
    681c:	324b      	adds	r2, #75	; 0x4b
    681e:	32ff      	adds	r2, #255	; 0xff
    6820:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.RxParamWindowOffset1 = 10;
    6822:	2256      	movs	r2, #86	; 0x56
    6824:	32ff      	adds	r2, #255	; 0xff
    6826:	230a      	movs	r3, #10
    6828:	54a3      	strb	r3, [r4, r2]
	RegParams.pJoinDutyCycleTimer = &RegParams.joinDutyCycleTimer;
    682a:	0022      	movs	r2, r4
    682c:	3234      	adds	r2, #52	; 0x34
    682e:	7522      	strb	r2, [r4, #20]
    6830:	0a13      	lsrs	r3, r2, #8
    6832:	7563      	strb	r3, [r4, #21]
    6834:	0c13      	lsrs	r3, r2, #16
    6836:	75a3      	strb	r3, [r4, #22]
    6838:	0e12      	lsrs	r2, r2, #24
    683a:	75e2      	strb	r2, [r4, #23]
	RegParams.pJoinBackoffTimer = &RegParams.joinBackoffTimer;
    683c:	0022      	movs	r2, r4
    683e:	323d      	adds	r2, #61	; 0x3d
    6840:	7622      	strb	r2, [r4, #24]
    6842:	0a13      	lsrs	r3, r2, #8
    6844:	7663      	strb	r3, [r4, #25]
    6846:	0c13      	lsrs	r3, r2, #16
    6848:	76a3      	strb	r3, [r4, #26]
    684a:	0e12      	lsrs	r2, r2, #24
    684c:	76e2      	strb	r2, [r4, #27]
	RegParams.cmnParams.paramsType1.UpStreamCh0Freq = UPSTREAM_CH0_NA;
    684e:	2360      	movs	r3, #96	; 0x60
    6850:	2244      	movs	r2, #68	; 0x44
    6852:	32ff      	adds	r2, #255	; 0xff
    6854:	54a3      	strb	r3, [r4, r2]
    6856:	0022      	movs	r2, r4
    6858:	3244      	adds	r2, #68	; 0x44
    685a:	32ff      	adds	r2, #255	; 0xff
    685c:	2301      	movs	r3, #1
    685e:	7053      	strb	r3, [r2, #1]
    6860:	2338      	movs	r3, #56	; 0x38
    6862:	425b      	negs	r3, r3
    6864:	7093      	strb	r3, [r2, #2]
    6866:	2335      	movs	r3, #53	; 0x35
    6868:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.UpStreamCh64Freq = UPSTREAM_CH64_NA;
    686a:	2340      	movs	r3, #64	; 0x40
    686c:	425b      	negs	r3, r3
    686e:	2248      	movs	r2, #72	; 0x48
    6870:	32ff      	adds	r2, #255	; 0xff
    6872:	54a3      	strb	r3, [r4, r2]
    6874:	0022      	movs	r2, r4
    6876:	3248      	adds	r2, #72	; 0x48
    6878:	32ff      	adds	r2, #255	; 0xff
    687a:	2351      	movs	r3, #81	; 0x51
    687c:	425b      	negs	r3, r3
    687e:	7053      	strb	r3, [r2, #1]
    6880:	232e      	movs	r3, #46	; 0x2e
    6882:	425b      	negs	r3, r3
    6884:	7093      	strb	r3, [r2, #2]
    6886:	2335      	movs	r3, #53	; 0x35
    6888:	70d3      	strb	r3, [r2, #3]
	RegParams.cmnParams.paramsType1.DownStreamCh0Freq = DOWNSTREAM_CH0_NA;
    688a:	224c      	movs	r2, #76	; 0x4c
    688c:	32ff      	adds	r2, #255	; 0xff
    688e:	4643      	mov	r3, r8
    6890:	54a3      	strb	r3, [r4, r2]
    6892:	0022      	movs	r2, r4
    6894:	324c      	adds	r2, #76	; 0x4c
    6896:	32ff      	adds	r2, #255	; 0xff
    6898:	2370      	movs	r3, #112	; 0x70
    689a:	7053      	strb	r3, [r2, #1]
    689c:	4663      	mov	r3, ip
    689e:	7093      	strb	r3, [r2, #2]
    68a0:	2337      	movs	r3, #55	; 0x37
    68a2:	70d3      	strb	r3, [r2, #3]
	RegParams.Rx1DrOffset = 3;
    68a4:	2303      	movs	r3, #3
    68a6:	222c      	movs	r2, #44	; 0x2c
    68a8:	54a3      	strb	r3, [r4, r2]
	RegParams.maxTxPwrIndx = 10;
    68aa:	3201      	adds	r2, #1
    68ac:	230a      	movs	r3, #10
    68ae:	54a3      	strb	r3, [r4, r2]
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    68b0:	2358      	movs	r3, #88	; 0x58
    68b2:	33ff      	adds	r3, #255	; 0xff
    68b4:	54e5      	strb	r5, [r4, r3]
	RegParams.pJoinBackoffTimer->timerId = regTimerId[0];
    68b6:	4b2f      	ldr	r3, [pc, #188]	; (6974 <LORAReg_InitNA+0x20c>)
    68b8:	781a      	ldrb	r2, [r3, #0]
    68ba:	4694      	mov	ip, r2
    68bc:	223d      	movs	r2, #61	; 0x3d
    68be:	4661      	mov	r1, ip
    68c0:	54a1      	strb	r1, [r4, r2]
	RegParams.pJoinDutyCycleTimer->timerId = regTimerId[1];
    68c2:	785a      	ldrb	r2, [r3, #1]
    68c4:	233c      	movs	r3, #60	; 0x3c
    68c6:	54e2      	strb	r2, [r4, r3]
	RegParams.pJoinDutyCycleTimer->remainingtime =0;
    68c8:	2300      	movs	r3, #0
    68ca:	2238      	movs	r2, #56	; 0x38
    68cc:	54a3      	strb	r3, [r4, r2]
    68ce:	2200      	movs	r2, #0
    68d0:	3339      	adds	r3, #57	; 0x39
    68d2:	54e2      	strb	r2, [r4, r3]
    68d4:	3301      	adds	r3, #1
    68d6:	54e2      	strb	r2, [r4, r3]
    68d8:	3301      	adds	r3, #1
    68da:	54e2      	strb	r2, [r4, r3]
	RegParams.joinbccount =0;
    68dc:	3307      	adds	r3, #7
    68de:	54e5      	strb	r5, [r4, r3]
	RegParams.joinDutyCycleTimeout =0;
    68e0:	0023      	movs	r3, r4
    68e2:	333e      	adds	r3, #62	; 0x3e
    68e4:	701a      	strb	r2, [r3, #0]
    68e6:	705a      	strb	r2, [r3, #1]
    68e8:	709a      	strb	r2, [r3, #2]
    68ea:	70da      	strb	r2, [r3, #3]
	RegParams.band = ismBand;
    68ec:	232e      	movs	r3, #46	; 0x2e
    68ee:	466a      	mov	r2, sp
    68f0:	7b12      	ldrb	r2, [r2, #12]
    68f2:	54e2      	strb	r2, [r4, r3]
	memcpy (RegParams.pChParams, DefaultChannels915, sizeof(DefaultChannels915) );
    68f4:	2290      	movs	r2, #144	; 0x90
    68f6:	4920      	ldr	r1, [pc, #128]	; (6978 <LORAReg_InitNA+0x210>)
    68f8:	4b20      	ldr	r3, [pc, #128]	; (697c <LORAReg_InitNA+0x214>)
    68fa:	4698      	mov	r8, r3
    68fc:	4798      	blx	r3
	memcpy (RegParams.pDrParams, DefaultDrParamsNA, sizeof(DefaultDrParamsNA) );
    68fe:	2270      	movs	r2, #112	; 0x70
    6900:	491f      	ldr	r1, [pc, #124]	; (6980 <LORAReg_InitNA+0x218>)
    6902:	0030      	movs	r0, r6
    6904:	47c0      	blx	r8
	RegParams.cmnParams.paramsType1.alternativeChannel = 0;
    6906:	23ab      	movs	r3, #171	; 0xab
    6908:	005b      	lsls	r3, r3, #1
    690a:	54e5      	strb	r5, [r4, r3]
	RegParams.regParamItems.fileid = PDS_FILE_REG_NA_03_IDX;
    690c:	4b1d      	ldr	r3, [pc, #116]	; (6984 <LORAReg_InitNA+0x21c>)
    690e:	54e7      	strb	r7, [r4, r3]
	RegParams.regParamItems.ch_param_1_item_id = PDS_REG_NA_CH_PARAM;
    6910:	2200      	movs	r2, #0
    6912:	4b1d      	ldr	r3, [pc, #116]	; (6988 <LORAReg_InitNA+0x220>)
    6914:	54e2      	strb	r2, [r4, r3]
    6916:	18e3      	adds	r3, r4, r3
    6918:	465a      	mov	r2, fp
    691a:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.ch_param_2_item_id = 0;
    691c:	2200      	movs	r2, #0
    691e:	2384      	movs	r3, #132	; 0x84
    6920:	009b      	lsls	r3, r3, #2
    6922:	54e2      	strb	r2, [r4, r3]
    6924:	18e3      	adds	r3, r4, r3
    6926:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.band_item_id = 0;
    6928:	4b18      	ldr	r3, [pc, #96]	; (698c <LORAReg_InitNA+0x224>)
    692a:	54e2      	strb	r2, [r4, r3]
    692c:	18e3      	adds	r3, r4, r3
    692e:	705a      	strb	r2, [r3, #1]
	RegParams.regParamItems.lastUsedSB = PDS_REG_NA_LAST_USED_SB;
    6930:	2383      	movs	r3, #131	; 0x83
    6932:	009b      	lsls	r3, r3, #2
    6934:	2201      	movs	r2, #1
    6936:	54e2      	strb	r2, [r4, r3]
    6938:	469c      	mov	ip, r3
    693a:	4464      	add	r4, ip
    693c:	465b      	mov	r3, fp
    693e:	7063      	strb	r3, [r4, #1]
	filemarks.fileMarkListAddr = aRegNaPdsOps;
    6940:	ab04      	add	r3, sp, #16
	filemarks.numItems =  (uint8_t)(PDS_REG_NA_MAX_VALUE & 0x00FF);
    6942:	711f      	strb	r7, [r3, #4]
	filemarks.fIDcb = LorawanReg_NA_Pds_Cb;
    6944:	4a12      	ldr	r2, [pc, #72]	; (6990 <LORAReg_InitNA+0x228>)
	PDS_RegFile(PDS_FILE_REG_NA_03_IDX,filemarks);
    6946:	9200      	str	r2, [sp, #0]
    6948:	4912      	ldr	r1, [pc, #72]	; (6994 <LORAReg_InitNA+0x22c>)
    694a:	9a05      	ldr	r2, [sp, #20]
    694c:	4b12      	ldr	r3, [pc, #72]	; (6998 <LORAReg_InitNA+0x230>)
    694e:	2002      	movs	r0, #2
    6950:	4c12      	ldr	r4, [pc, #72]	; (699c <LORAReg_InitNA+0x234>)
    6952:	47a0      	blx	r4
    LORAREG_InitGetAttrFnPtrsNA();
    6954:	4b12      	ldr	r3, [pc, #72]	; (69a0 <LORAReg_InitNA+0x238>)
    6956:	4798      	blx	r3
	LORAREG_InitValidateAttrFnPtrsNA();
    6958:	4b12      	ldr	r3, [pc, #72]	; (69a4 <LORAReg_InitNA+0x23c>)
    695a:	4798      	blx	r3
	LORAREG_InitSetAttrFnPtrsNA();
    695c:	4b12      	ldr	r3, [pc, #72]	; (69a8 <LORAReg_InitNA+0x240>)
    695e:	4798      	blx	r3
}
    6960:	2008      	movs	r0, #8
    6962:	b009      	add	sp, #36	; 0x24
    6964:	bc3c      	pop	{r2, r3, r4, r5}
    6966:	4690      	mov	r8, r2
    6968:	4699      	mov	r9, r3
    696a:	46a2      	mov	sl, r4
    696c:	46ab      	mov	fp, r5
    696e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6970:	20001b54 	.word	0x20001b54
    6974:	20001b50 	.word	0x20001b50
    6978:	0001daf0 	.word	0x0001daf0
    697c:	00015f45 	.word	0x00015f45
    6980:	0001db80 	.word	0x0001db80
    6984:	0000020b 	.word	0x0000020b
    6988:	0000020e 	.word	0x0000020e
    698c:	00000212 	.word	0x00000212
    6990:	00006765 	.word	0x00006765
    6994:	2000194c 	.word	0x2000194c
    6998:	0001dbf0 	.word	0x0001dbf0
    699c:	0000b185 	.word	0x0000b185
    69a0:	00009c1d 	.word	0x00009c1d
    69a4:	0000a4e9 	.word	0x0000a4e9
    69a8:	0000a7d1 	.word	0x0000a7d1

000069ac <InValidGetAttr>:
/****************************** FUNCTIONS *************************************/

StackRetStatus_t InValidGetAttr(LorawanRegionalAttributes_t attr, void * attrInput, void * attrOutput)
{
	return LORAWAN_INVALID_REQUEST;
}
    69ac:	2015      	movs	r0, #21
    69ae:	4770      	bx	lr

000069b0 <InValidAttr>:

StackRetStatus_t InValidAttr(LorawanRegionalAttributes_t attr, void * attrInput)
{
	return LORAWAN_INVALID_REQUEST;
}
    69b0:	2015      	movs	r0, #21
    69b2:	4770      	bx	lr

000069b4 <LORAREG_GetAttr_MaxChannel>:
#endif


static StackRetStatus_t LORAREG_GetAttr_MaxChannel(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.maxChannels;
    69b4:	232a      	movs	r3, #42	; 0x2a
    69b6:	4902      	ldr	r1, [pc, #8]	; (69c0 <LORAREG_GetAttr_MaxChannel+0xc>)
    69b8:	5ccb      	ldrb	r3, [r1, r3]
    69ba:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    69bc:	2008      	movs	r0, #8
    69be:	4770      	bx	lr
    69c0:	20001b54 	.word	0x20001b54

000069c4 <LORAREG_GetAttr_MinNewChIndex>:


static StackRetStatus_t LORAREG_GetAttr_MinNewChIndex(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	*(uint8_t *)attrOutput = (uint8_t)RegParams.MinNewChIndex;
    69c4:	4905      	ldr	r1, [pc, #20]	; (69dc <LORAREG_GetAttr_MinNewChIndex+0x18>)
    69c6:	2321      	movs	r3, #33	; 0x21
    69c8:	5cc8      	ldrb	r0, [r1, r3]
    69ca:	7010      	strb	r0, [r2, #0]
	if(RegParams.MinNewChIndex == 0xFF)
    69cc:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    69ce:	2008      	movs	r0, #8
	if(RegParams.MinNewChIndex == 0xFF)
    69d0:	2bff      	cmp	r3, #255	; 0xff
    69d2:	d000      	beq.n	69d6 <LORAREG_GetAttr_MinNewChIndex+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	
	return result;
}
    69d4:	4770      	bx	lr
		result = LORAWAN_INVALID_PARAMETER;
    69d6:	3002      	adds	r0, #2
    69d8:	e7fc      	b.n	69d4 <LORAREG_GetAttr_MinNewChIndex+0x10>
    69da:	46c0      	nop			; (mov r8, r8)
    69dc:	20001b54 	.word	0x20001b54

000069e0 <LORAREG_GetAttr_DefRx1DataRate>:
}
#endif

static StackRetStatus_t LORAREG_GetAttr_DefRx1DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx1DataRate;
    69e0:	2322      	movs	r3, #34	; 0x22
    69e2:	4902      	ldr	r1, [pc, #8]	; (69ec <LORAREG_GetAttr_DefRx1DataRate+0xc>)
    69e4:	5ccb      	ldrb	r3, [r1, r3]
    69e6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    69e8:	2008      	movs	r0, #8
    69ea:	4770      	bx	lr
    69ec:	20001b54 	.word	0x20001b54

000069f0 <LORAREG_GetAttr_DefRx2DataRate>:

static StackRetStatus_t LORAREG_GetAttr_DefRx2DataRate(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.DefRx2DataRate;
    69f0:	2323      	movs	r3, #35	; 0x23
    69f2:	4902      	ldr	r1, [pc, #8]	; (69fc <LORAREG_GetAttr_DefRx2DataRate+0xc>)
    69f4:	5ccb      	ldrb	r3, [r1, r3]
    69f6:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    69f8:	2008      	movs	r0, #8
    69fa:	4770      	bx	lr
    69fc:	20001b54 	.word	0x20001b54

00006a00 <LORAREG_GetAttr_RegFeatures>:
	return LORAWAN_SUCCESS;
}

static StackRetStatus_t LORAREG_GetAttr_RegFeatures(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = RegParams.FeaturesSupport;
    6a00:	2320      	movs	r3, #32
    6a02:	4902      	ldr	r1, [pc, #8]	; (6a0c <LORAREG_GetAttr_RegFeatures+0xc>)
    6a04:	5ccb      	ldrb	r3, [r1, r3]
    6a06:	6013      	str	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6a08:	2008      	movs	r0, #8
    6a0a:	4770      	bx	lr
    6a0c:	20001b54 	.word	0x20001b54

00006a10 <LORAREG_GetAttr_DataRange>:

static StackRetStatus_t LORAREG_GetAttr_DataRange(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    6a10:	b530      	push	{r4, r5, lr}
    6a12:	b083      	sub	sp, #12
    6a14:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t  channelId;
	ValChId_t valChid;
	valChid.channelIndex = *(uint8_t *)attrInput;
    6a16:	780c      	ldrb	r4, [r1, #0]
    6a18:	a901      	add	r1, sp, #4
    6a1a:	700c      	strb	r4, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    6a1c:	2301      	movs	r3, #1
    6a1e:	704b      	strb	r3, [r1, #1]
	channelId = *(uint8_t *)attrInput;
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    6a20:	4b0d      	ldr	r3, [pc, #52]	; (6a58 <LORAREG_GetAttr_DataRange+0x48>)
    6a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6a24:	2015      	movs	r0, #21
    6a26:	4798      	blx	r3
    6a28:	2808      	cmp	r0, #8
    6a2a:	d004      	beq.n	6a36 <LORAREG_GetAttr_DataRange+0x26>
	{
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
	}
	else
	{
		*(uint8_t *)attrOutput = 0xFF;
    6a2c:	23ff      	movs	r3, #255	; 0xff
    6a2e:	702b      	strb	r3, [r5, #0]
	    result = LORAWAN_INVALID_PARAMETER;
    6a30:	200a      	movs	r0, #10
	}
	return result;
}
    6a32:	b003      	add	sp, #12
    6a34:	bd30      	pop	{r4, r5, pc}
	    *(uint8_t *)attrOutput = RegParams.pChParams[channelId].dataRange.value;
    6a36:	4909      	ldr	r1, [pc, #36]	; (6a5c <LORAREG_GetAttr_DataRange+0x4c>)
    6a38:	790b      	ldrb	r3, [r1, #4]
    6a3a:	794a      	ldrb	r2, [r1, #5]
    6a3c:	0212      	lsls	r2, r2, #8
    6a3e:	4313      	orrs	r3, r2
    6a40:	798a      	ldrb	r2, [r1, #6]
    6a42:	0412      	lsls	r2, r2, #16
    6a44:	431a      	orrs	r2, r3
    6a46:	79cb      	ldrb	r3, [r1, #7]
    6a48:	061b      	lsls	r3, r3, #24
    6a4a:	431a      	orrs	r2, r3
    6a4c:	0063      	lsls	r3, r4, #1
    6a4e:	189b      	adds	r3, r3, r2
    6a50:	785b      	ldrb	r3, [r3, #1]
    6a52:	702b      	strb	r3, [r5, #0]
    6a54:	e7ed      	b.n	6a32 <LORAREG_GetAttr_DataRange+0x22>
    6a56:	46c0      	nop			; (mov r8, r8)
    6a58:	20000d84 	.word	0x20000d84
    6a5c:	20001b54 	.word	0x20001b54

00006a60 <LORAREG_GetAttr_ChIdStatus>:
}
#endif


static StackRetStatus_t LORAREG_GetAttr_ChIdStatus(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
    6a60:	b530      	push	{r4, r5, lr}
    6a62:	b083      	sub	sp, #12
    6a64:	0015      	movs	r5, r2
	StackRetStatus_t result = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	uint8_t  channelId;
	channelId = *(uint8_t *)attrInput;
    6a66:	780c      	ldrb	r4, [r1, #0]
	val_chid.channelIndex = *(uint8_t *)attrInput;
    6a68:	a901      	add	r1, sp, #4
    6a6a:	700c      	strb	r4, [r1, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    6a6c:	2301      	movs	r3, #1
    6a6e:	704b      	strb	r3, [r1, #1]
	
	if (pValidateAttr[CHANNEL_ID](CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    6a70:	4b0c      	ldr	r3, [pc, #48]	; (6aa4 <LORAREG_GetAttr_ChIdStatus+0x44>)
    6a72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    6a74:	2015      	movs	r0, #21
    6a76:	4798      	blx	r3
    6a78:	2808      	cmp	r0, #8
    6a7a:	d004      	beq.n	6a86 <LORAREG_GetAttr_ChIdStatus+0x26>
	{
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
	}
	else
	{
		*(uint8_t *)attrOutput = DISABLED;
    6a7c:	2300      	movs	r3, #0
    6a7e:	702b      	strb	r3, [r5, #0]
		result = LORAWAN_INVALID_PARAMETER;
    6a80:	200a      	movs	r0, #10
	}
	return result;
}
    6a82:	b003      	add	sp, #12
    6a84:	bd30      	pop	{r4, r5, pc}
		*(uint8_t *)attrOutput = RegParams.pChParams[channelId].status;
    6a86:	4908      	ldr	r1, [pc, #32]	; (6aa8 <LORAREG_GetAttr_ChIdStatus+0x48>)
    6a88:	790a      	ldrb	r2, [r1, #4]
    6a8a:	794b      	ldrb	r3, [r1, #5]
    6a8c:	021b      	lsls	r3, r3, #8
    6a8e:	4313      	orrs	r3, r2
    6a90:	798a      	ldrb	r2, [r1, #6]
    6a92:	0412      	lsls	r2, r2, #16
    6a94:	4313      	orrs	r3, r2
    6a96:	79ca      	ldrb	r2, [r1, #7]
    6a98:	0612      	lsls	r2, r2, #24
    6a9a:	431a      	orrs	r2, r3
    6a9c:	0064      	lsls	r4, r4, #1
    6a9e:	5ca3      	ldrb	r3, [r4, r2]
    6aa0:	702b      	strb	r3, [r5, #0]
    6aa2:	e7ee      	b.n	6a82 <LORAREG_GetAttr_ChIdStatus+0x22>
    6aa4:	20000d84 	.word	0x20000d84
    6aa8:	20001b54 	.word	0x20001b54

00006aac <LORAREG_GetAttr_DutyCycleT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_DutyCycleT1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = UINT16_MAX;
    6aac:	2301      	movs	r3, #1
    6aae:	425b      	negs	r3, r3
    6ab0:	8013      	strh	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    6ab2:	200a      	movs	r0, #10
    6ab4:	4770      	bx	lr

00006ab6 <LORAREG_GetAttr_MinDutyCycleTimer>:
#endif

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t LORAREG_GetAttr_MinDutyCycleTimer(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint32_t *)attrOutput = UINT32_MAX;
    6ab6:	2301      	movs	r3, #1
    6ab8:	425b      	negs	r3, r3
    6aba:	6013      	str	r3, [r2, #0]
	return LORAWAN_INVALID_PARAMETER;
}
    6abc:	200a      	movs	r0, #10
    6abe:	4770      	bx	lr

00006ac0 <LORAREG_GetAttr_MacRecvDelay1>:
#endif

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY1;
    6ac0:	23fa      	movs	r3, #250	; 0xfa
    6ac2:	009b      	lsls	r3, r3, #2
    6ac4:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6ac6:	2008      	movs	r0, #8
    6ac8:	4770      	bx	lr

00006aca <LORAREG_GetAttr_MacRecvDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacRecvDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = RECEIVE_DELAY2;
    6aca:	23fa      	movs	r3, #250	; 0xfa
    6acc:	00db      	lsls	r3, r3, #3
    6ace:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6ad0:	2008      	movs	r0, #8
    6ad2:	4770      	bx	lr

00006ad4 <LORAREG_GetAttr_MacJoinAcptDelay1>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay1(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY1;
    6ad4:	4b01      	ldr	r3, [pc, #4]	; (6adc <LORAREG_GetAttr_MacJoinAcptDelay1+0x8>)
    6ad6:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6ad8:	2008      	movs	r0, #8
    6ada:	4770      	bx	lr
    6adc:	00001388 	.word	0x00001388

00006ae0 <LORAREG_GetAttr_MacJoinAcptDelay2>:

static StackRetStatus_t LORAREG_GetAttr_MacJoinAcptDelay2(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = JOIN_ACCEPT_DELAY2;
    6ae0:	4b01      	ldr	r3, [pc, #4]	; (6ae8 <LORAREG_GetAttr_MacJoinAcptDelay2+0x8>)
    6ae2:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6ae4:	2008      	movs	r0, #8
    6ae6:	4770      	bx	lr
    6ae8:	00001770 	.word	0x00001770

00006aec <LORAREG_GetAttr_MacAckTimeout>:

static StackRetStatus_t LORAREG_GetAttr_MacAckTimeout(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = ACK_TIMEOUT;
    6aec:	23fa      	movs	r3, #250	; 0xfa
    6aee:	00db      	lsls	r3, r3, #3
    6af0:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6af2:	2008      	movs	r0, #8
    6af4:	4770      	bx	lr

00006af6 <LORAREG_GetAttr_MacAdrAckDelay>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckDelay(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_DELAY;
    6af6:	2320      	movs	r3, #32
    6af8:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6afa:	2008      	movs	r0, #8
    6afc:	4770      	bx	lr

00006afe <LORAREG_GetAttr_MacAdrAckLimit>:

static StackRetStatus_t LORAREG_GetAttr_MacAdrAckLimit(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = ADR_ACK_LIMIT;
    6afe:	2340      	movs	r3, #64	; 0x40
    6b00:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6b02:	2008      	movs	r0, #8
    6b04:	4770      	bx	lr

00006b06 <LORAREG_GetAttr_MacMaxFcntGap>:

static StackRetStatus_t LORAREG_GetAttr_MacMaxFcntGap(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint16_t *)attrOutput = MAX_FCNT_GAP;
    6b06:	2380      	movs	r3, #128	; 0x80
    6b08:	01db      	lsls	r3, r3, #7
    6b0a:	8013      	strh	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6b0c:	2008      	movs	r0, #8
    6b0e:	4770      	bx	lr

00006b10 <LORAREG_GetAttr_RegDefTxPwr>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxPwr(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.MacTxPower;
    6b10:	2327      	movs	r3, #39	; 0x27
    6b12:	4902      	ldr	r1, [pc, #8]	; (6b1c <LORAREG_GetAttr_RegDefTxPwr+0xc>)
    6b14:	5ccb      	ldrb	r3, [r1, r3]
    6b16:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6b18:	2008      	movs	r0, #8
    6b1a:	4770      	bx	lr
    6b1c:	20001b54 	.word	0x20001b54

00006b20 <LORAREG_GetAttr_RegDefTxDR>:

static StackRetStatus_t LORAREG_GetAttr_RegDefTxDR(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.TxCurDataRate;
    6b20:	2326      	movs	r3, #38	; 0x26
    6b22:	4902      	ldr	r1, [pc, #8]	; (6b2c <LORAREG_GetAttr_RegDefTxDR+0xc>)
    6b24:	5ccb      	ldrb	r3, [r1, r3]
    6b26:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6b28:	2008      	movs	r0, #8
    6b2a:	4770      	bx	lr
    6b2c:	20001b54 	.word	0x20001b54

00006b30 <LORAREG_GetAttr_CurChIndx>:

static StackRetStatus_t LORAREG_GetAttr_CurChIndx(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	*(uint8_t *)attrOutput = RegParams.lastUsedChannelIndex;
    6b30:	232f      	movs	r3, #47	; 0x2f
    6b32:	4902      	ldr	r1, [pc, #8]	; (6b3c <LORAREG_GetAttr_CurChIndx+0xc>)
    6b34:	5ccb      	ldrb	r3, [r1, r3]
    6b36:	7013      	strb	r3, [r2, #0]
	return LORAWAN_SUCCESS;
}
    6b38:	2008      	movs	r0, #8
    6b3a:	4770      	bx	lr
    6b3c:	20001b54 	.word	0x20001b54

00006b40 <LORAREG_GetAttr_DefLBTParams>:
static StackRetStatus_t LORAREG_GetAttr_DefLBTParams(LorawanRegionalAttributes_t attr, void *attrInput, void *attrOutput)
{
	LorawanLBTParams_t* lorawanLBTParams;
	lorawanLBTParams = (LorawanLBTParams_t *)attrOutput;
			
	lorawanLBTParams->lbtNumOfSamples	= RegParams.cmnParams.paramsType2.LBT_RSSISamplesCount;
    6b40:	4b09      	ldr	r3, [pc, #36]	; (6b68 <LORAREG_GetAttr_DefLBTParams+0x28>)
    6b42:	21c0      	movs	r1, #192	; 0xc0
    6b44:	31ff      	adds	r1, #255	; 0xff
    6b46:	5c59      	ldrb	r1, [r3, r1]
    6b48:	7191      	strb	r1, [r2, #6]
	lorawanLBTParams->lbtScanPeriod		= RegParams.cmnParams.paramsType2.LBTScanPeriod;
    6b4a:	21be      	movs	r1, #190	; 0xbe
    6b4c:	31ff      	adds	r1, #255	; 0xff
    6b4e:	5c59      	ldrb	r1, [r3, r1]
    6b50:	8011      	strh	r1, [r2, #0]
	lorawanLBTParams->lbtThreshold		= RegParams.cmnParams.paramsType2.LBTSignalThreshold;
    6b52:	21df      	movs	r1, #223	; 0xdf
    6b54:	0049      	lsls	r1, r1, #1
    6b56:	565b      	ldrsb	r3, [r3, r1]
    6b58:	8053      	strh	r3, [r2, #2]
	lorawanLBTParams->lbtTransmitOn		= LBT_ENABLE;
    6b5a:	2301      	movs	r3, #1
    6b5c:	71d3      	strb	r3, [r2, #7]
	lorawanLBTParams->maxRetryChannels	= LBT_MAX_RETRY_CHANNELS;
    6b5e:	3304      	adds	r3, #4
    6b60:	8093      	strh	r3, [r2, #4]
	return 0;
}
    6b62:	2000      	movs	r0, #0
    6b64:	4770      	bx	lr
    6b66:	46c0      	nop			; (mov r8, r8)
    6b68:	20001b54 	.word	0x20001b54

00006b6c <LORAREG_GetAttr_FreqT1>:
{
    6b6c:	b530      	push	{r4, r5, lr}
	channelId = *(uint8_t *)attrInput;
    6b6e:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    6b70:	212a      	movs	r1, #42	; 0x2a
    6b72:	4820      	ldr	r0, [pc, #128]	; (6bf4 <LORAREG_GetAttr_FreqT1+0x88>)
    6b74:	5641      	ldrsb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    6b76:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    6b78:	428b      	cmp	r3, r1
    6b7a:	dc39      	bgt.n	6bf0 <LORAREG_GetAttr_FreqT1+0x84>
	if (channelId < RegParams.cmnParams.paramsType1.Max_125khzChan)
    6b7c:	2054      	movs	r0, #84	; 0x54
    6b7e:	30ff      	adds	r0, #255	; 0xff
    6b80:	4c1c      	ldr	r4, [pc, #112]	; (6bf4 <LORAREG_GetAttr_FreqT1+0x88>)
    6b82:	5c24      	ldrb	r4, [r4, r0]
    6b84:	42a3      	cmp	r3, r4
    6b86:	d31c      	bcc.n	6bc2 <LORAREG_GetAttr_FreqT1+0x56>
		result = LORAWAN_INVALID_PARAMETER;
    6b88:	200a      	movs	r0, #10
	else if ( (channelId < RegParams.maxChannels) && (channelId >= RegParams.cmnParams.paramsType1.Max_125khzChan) )
    6b8a:	428b      	cmp	r3, r1
    6b8c:	da30      	bge.n	6bf0 <LORAREG_GetAttr_FreqT1+0x84>
static uint32_t GenerateFrequency2 (uint8_t channelIndex)
{
    uint32_t channelFrequency;

    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    6b8e:	1b1b      	subs	r3, r3, r4
    6b90:	4919      	ldr	r1, [pc, #100]	; (6bf8 <LORAREG_GetAttr_FreqT1+0x8c>)
    6b92:	434b      	muls	r3, r1
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    6b94:	4c17      	ldr	r4, [pc, #92]	; (6bf4 <LORAREG_GetAttr_FreqT1+0x88>)
    6b96:	2148      	movs	r1, #72	; 0x48
    6b98:	31ff      	adds	r1, #255	; 0xff
    6b9a:	5c61      	ldrb	r1, [r4, r1]
    6b9c:	303f      	adds	r0, #63	; 0x3f
    6b9e:	30ff      	adds	r0, #255	; 0xff
    6ba0:	5c20      	ldrb	r0, [r4, r0]
    6ba2:	0200      	lsls	r0, r0, #8
    6ba4:	4301      	orrs	r1, r0
    6ba6:	204a      	movs	r0, #74	; 0x4a
    6ba8:	30ff      	adds	r0, #255	; 0xff
    6baa:	5c20      	ldrb	r0, [r4, r0]
    6bac:	0400      	lsls	r0, r0, #16
    6bae:	4308      	orrs	r0, r1
    6bb0:	21a5      	movs	r1, #165	; 0xa5
    6bb2:	0049      	lsls	r1, r1, #1
    6bb4:	5c61      	ldrb	r1, [r4, r1]
    6bb6:	0609      	lsls	r1, r1, #24
    6bb8:	4301      	orrs	r1, r0
    6bba:	1859      	adds	r1, r3, r1
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    6bbc:	6011      	str	r1, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6bbe:	2008      	movs	r0, #8
		*(uint32_t *)attrOutput = GenerateFrequency2 (channelId);
    6bc0:	e016      	b.n	6bf0 <LORAREG_GetAttr_FreqT1+0x84>
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    6bc2:	4c0c      	ldr	r4, [pc, #48]	; (6bf4 <LORAREG_GetAttr_FreqT1+0x88>)
    6bc4:	2144      	movs	r1, #68	; 0x44
    6bc6:	31ff      	adds	r1, #255	; 0xff
    6bc8:	5c61      	ldrb	r1, [r4, r1]
    6bca:	380f      	subs	r0, #15
    6bcc:	5c20      	ldrb	r0, [r4, r0]
    6bce:	0200      	lsls	r0, r0, #8
    6bd0:	4308      	orrs	r0, r1
    6bd2:	2146      	movs	r1, #70	; 0x46
    6bd4:	31ff      	adds	r1, #255	; 0xff
    6bd6:	5c61      	ldrb	r1, [r4, r1]
    6bd8:	0409      	lsls	r1, r1, #16
    6bda:	4308      	orrs	r0, r1
    6bdc:	21a3      	movs	r1, #163	; 0xa3
    6bde:	0049      	lsls	r1, r1, #1
    6be0:	5c61      	ldrb	r1, [r4, r1]
    6be2:	0609      	lsls	r1, r1, #24
    6be4:	4301      	orrs	r1, r0
    6be6:	4805      	ldr	r0, [pc, #20]	; (6bfc <LORAREG_GetAttr_FreqT1+0x90>)
    6be8:	4343      	muls	r3, r0
    6bea:	18cb      	adds	r3, r1, r3
		*(uint32_t *)attrOutput = GenerateFrequency1 (channelId);
    6bec:	6013      	str	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6bee:	2008      	movs	r0, #8
}
    6bf0:	bd30      	pop	{r4, r5, pc}
    6bf2:	46c0      	nop			; (mov r8, r8)
    6bf4:	20001b54 	.word	0x20001b54
    6bf8:	00186a00 	.word	0x00186a00
    6bfc:	00030d40 	.word	0x00030d40

00006c00 <ValidateDataRateTxT1>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    6c00:	780a      	ldrb	r2, [r1, #0]
    6c02:	23a8      	movs	r3, #168	; 0xa8
    6c04:	005b      	lsls	r3, r3, #1
    6c06:	4903      	ldr	r1, [pc, #12]	; (6c14 <ValidateDataRateTxT1+0x14>)
    6c08:	5ccb      	ldrb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6c0a:	2008      	movs	r0, #8
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    6c0c:	429a      	cmp	r2, r3
    6c0e:	d900      	bls.n	6c12 <ValidateDataRateTxT1+0x12>
	{
		result = LORAWAN_INVALID_PARAMETER;
    6c10:	3002      	adds	r0, #2
	}
	
	return result;
}
    6c12:	4770      	bx	lr
    6c14:	20001b54 	.word	0x20001b54

00006c18 <ValidateDataRateTxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateTxT2(LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    6c18:	780b      	ldrb	r3, [r1, #0]
	
	if(dataRate > RegParams.minDataRate ||
    6c1a:	2224      	movs	r2, #36	; 0x24
    6c1c:	4908      	ldr	r1, [pc, #32]	; (6c40 <ValidateDataRateTxT2+0x28>)
    6c1e:	5c8a      	ldrb	r2, [r1, r2]
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    6c20:	200a      	movs	r0, #10
	if(dataRate > RegParams.minDataRate ||
    6c22:	429a      	cmp	r2, r3
    6c24:	d30a      	bcc.n	6c3c <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    6c26:	22e1      	movs	r2, #225	; 0xe1
    6c28:	0052      	lsls	r2, r2, #1
    6c2a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6c2c:	3802      	subs	r0, #2
	if(dataRate > RegParams.minDataRate ||
    6c2e:	07d2      	lsls	r2, r2, #31
    6c30:	d504      	bpl.n	6c3c <ValidateDataRateTxT2+0x24>
	(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    6c32:	2222      	movs	r2, #34	; 0x22
    6c34:	5c8a      	ldrb	r2, [r1, r2]
    6c36:	429a      	cmp	r2, r3
    6c38:	d900      	bls.n	6c3c <ValidateDataRateTxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    6c3a:	3002      	adds	r0, #2
	}
	
	return result;
}
    6c3c:	4770      	bx	lr
    6c3e:	46c0      	nop			; (mov r8, r8)
    6c40:	20001b54 	.word	0x20001b54

00006c44 <ValidateDataRateRxT1>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    6c44:	780b      	ldrb	r3, [r1, #0]

	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    6c46:	22a9      	movs	r2, #169	; 0xa9
    6c48:	0052      	lsls	r2, r2, #1
    6c4a:	4906      	ldr	r1, [pc, #24]	; (6c64 <ValidateDataRateRxT1+0x20>)
    6c4c:	5c8a      	ldrb	r2, [r1, r2]
	{
		result = LORAWAN_INVALID_PARAMETER;
    6c4e:	200a      	movs	r0, #10
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    6c50:	429a      	cmp	r2, r3
    6c52:	d306      	bcc.n	6c62 <ValidateDataRateRxT1+0x1e>
    6c54:	2252      	movs	r2, #82	; 0x52
    6c56:	32ff      	adds	r2, #255	; 0xff
    6c58:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6c5a:	3802      	subs	r0, #2
	if((dataRate > RegParams.cmnParams.paramsType1.maxRxDR) || (dataRate < RegParams.cmnParams.paramsType1.minRxDR) )
    6c5c:	429a      	cmp	r2, r3
    6c5e:	d900      	bls.n	6c62 <ValidateDataRateRxT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    6c60:	3002      	adds	r0, #2
	}
	return result;
}
    6c62:	4770      	bx	lr
    6c64:	20001b54 	.word	0x20001b54

00006c68 <ValidateDataRateRxT2>:
#if (AS_BAND == 1 || JPN_BAND == 1)
static StackRetStatus_t ValidateDataRateRxT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;
    6c68:	780b      	ldrb	r3, [r1, #0]

    if(dataRate > RegParams.minDataRate || (
    6c6a:	2224      	movs	r2, #36	; 0x24
    6c6c:	4908      	ldr	r1, [pc, #32]	; (6c90 <ValidateDataRateRxT2+0x28>)
    6c6e:	5c8a      	ldrb	r2, [r1, r2]
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
	{
		result = LORAWAN_INVALID_PARAMETER;
    6c70:	200a      	movs	r0, #10
    if(dataRate > RegParams.minDataRate || (
    6c72:	429a      	cmp	r2, r3
    6c74:	d30a      	bcc.n	6c8c <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    6c76:	22e1      	movs	r2, #225	; 0xe1
    6c78:	0052      	lsls	r2, r2, #1
    6c7a:	5c8a      	ldrb	r2, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6c7c:	3802      	subs	r0, #2
    if(dataRate > RegParams.minDataRate || (
    6c7e:	0792      	lsls	r2, r2, #30
    6c80:	d504      	bpl.n	6c8c <ValidateDataRateRxT2+0x24>
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1 && dataRate < RegParams.DefRx1DataRate))
    6c82:	2222      	movs	r2, #34	; 0x22
    6c84:	5c8a      	ldrb	r2, [r1, r2]
    6c86:	429a      	cmp	r2, r3
    6c88:	d900      	bls.n	6c8c <ValidateDataRateRxT2+0x24>
		result = LORAWAN_INVALID_PARAMETER;
    6c8a:	3002      	adds	r0, #2
	}

	return result;
}
    6c8c:	4770      	bx	lr
    6c8e:	46c0      	nop			; (mov r8, r8)
    6c90:	20001b54 	.word	0x20001b54

00006c94 <ValidateChannelId>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
    uint8_t channelId = *(uint8_t *)attrInput;
	
    if (channelId >= RegParams.maxChannels)
    6c94:	780a      	ldrb	r2, [r1, #0]
    6c96:	232a      	movs	r3, #42	; 0x2a
    6c98:	4903      	ldr	r1, [pc, #12]	; (6ca8 <ValidateChannelId+0x14>)
    6c9a:	56cb      	ldrsb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    6c9c:	2008      	movs	r0, #8
    if (channelId >= RegParams.maxChannels)
    6c9e:	429a      	cmp	r2, r3
    6ca0:	db00      	blt.n	6ca4 <ValidateChannelId+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER ;
    6ca2:	3002      	adds	r0, #2
    }
	
    return result;
}
    6ca4:	4770      	bx	lr
    6ca6:	46c0      	nop			; (mov r8, r8)
    6ca8:	20001b54 	.word	0x20001b54

00006cac <ValidateChannelIdT2>:
static StackRetStatus_t ValidateChannelIdT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	ValChId_t val_chid;
	
	memcpy(&val_chid,attrInput,sizeof(ValChId_t));
    6cac:	780b      	ldrb	r3, [r1, #0]
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    6cae:	222a      	movs	r2, #42	; 0x2a
    6cb0:	4808      	ldr	r0, [pc, #32]	; (6cd4 <ValidateChannelIdT2+0x28>)
    6cb2:	5682      	ldrsb	r2, [r0, r2]
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
	 {
		 retVal = LORAWAN_INVALID_PARAMETER;
    6cb4:	200a      	movs	r0, #10
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    6cb6:	4293      	cmp	r3, r2
    6cb8:	da0a      	bge.n	6cd0 <ValidateChannelIdT2+0x24>
    6cba:	784a      	ldrb	r2, [r1, #1]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    6cbc:	3802      	subs	r0, #2
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    6cbe:	2a00      	cmp	r2, #0
    6cc0:	d106      	bne.n	6cd0 <ValidateChannelIdT2+0x24>
	 val_chid.channelIndex < RegParams.cmnParams.paramsType2.minNonDefChId))
    6cc2:	32c1      	adds	r2, #193	; 0xc1
    6cc4:	32ff      	adds	r2, #255	; 0xff
	if((val_chid.channelIndex >= RegParams.maxChannels) || (val_chid.allowedForDefaultChannels == WITHOUT_DEFAULT_CHANNELS &&
    6cc6:	4903      	ldr	r1, [pc, #12]	; (6cd4 <ValidateChannelIdT2+0x28>)
    6cc8:	5c8a      	ldrb	r2, [r1, r2]
    6cca:	429a      	cmp	r2, r3
    6ccc:	d900      	bls.n	6cd0 <ValidateChannelIdT2+0x24>
		 retVal = LORAWAN_INVALID_PARAMETER;
    6cce:	3002      	adds	r0, #2
	 }
	 return retVal;
}
    6cd0:	4770      	bx	lr
    6cd2:	46c0      	nop			; (mov r8, r8)
    6cd4:	20001b54 	.word	0x20001b54

00006cd8 <LORAREG_GetAttr_DutyCycleT2>:
{
    6cd8:	b530      	push	{r4, r5, lr}
    6cda:	b083      	sub	sp, #12
    6cdc:	0014      	movs	r4, r2
	valChid.channelIndex = *(uint8_t *)attrInput;
    6cde:	780d      	ldrb	r5, [r1, #0]
    6ce0:	a901      	add	r1, sp, #4
    6ce2:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    6ce4:	2301      	movs	r3, #1
    6ce6:	704b      	strb	r3, [r1, #1]
    if (ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    6ce8:	2015      	movs	r0, #21
    6cea:	4b0b      	ldr	r3, [pc, #44]	; (6d18 <LORAREG_GetAttr_DutyCycleT2+0x40>)
    6cec:	4798      	blx	r3
    6cee:	2808      	cmp	r0, #8
    6cf0:	d002      	beq.n	6cf8 <LORAREG_GetAttr_DutyCycleT2+0x20>
	    result = LORAWAN_INVALID_PARAMETER;
    6cf2:	200a      	movs	r0, #10
}
    6cf4:	b003      	add	sp, #12
    6cf6:	bd30      	pop	{r4, r5, pc}
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    6cf8:	4a08      	ldr	r2, [pc, #32]	; (6d1c <LORAREG_GetAttr_DutyCycleT2+0x44>)
	    subBandId = RegParams.cmnParams.paramsType2.othChParams[channelId].subBandId;
    6cfa:	006b      	lsls	r3, r5, #1
    6cfc:	195b      	adds	r3, r3, r5
    6cfe:	009b      	lsls	r3, r3, #2
    6d00:	18d3      	adds	r3, r2, r3
    6d02:	33ab      	adds	r3, #171	; 0xab
	    *(uint16_t *)attrOutput = RegParams.cmnParams.paramsType2.subBandDutyCycle[subBandId];
    6d04:	781b      	ldrb	r3, [r3, #0]
    6d06:	33d4      	adds	r3, #212	; 0xd4
    6d08:	005b      	lsls	r3, r3, #1
    6d0a:	18d2      	adds	r2, r2, r3
    6d0c:	7951      	ldrb	r1, [r2, #5]
    6d0e:	7993      	ldrb	r3, [r2, #6]
    6d10:	021b      	lsls	r3, r3, #8
    6d12:	430b      	orrs	r3, r1
    6d14:	8023      	strh	r3, [r4, #0]
    6d16:	e7ed      	b.n	6cf4 <LORAREG_GetAttr_DutyCycleT2+0x1c>
    6d18:	00006cad 	.word	0x00006cad
    6d1c:	20001b54 	.word	0x20001b54

00006d20 <LORAREG_GetAttr_MinMaxDr>:
{
    6d20:	b5f0      	push	{r4, r5, r6, r7, lr}
    6d22:	4694      	mov	ip, r2
{
	uint8_t i;
	
	// after updating the data range of a channel we need to check if the minimum dataRange has changed or not.
	// The user cannot set the current data rate outside the range of the data range
	uint8_t minDataRate = RegParams.minDataRate;
    6d24:	4b1b      	ldr	r3, [pc, #108]	; (6d94 <LORAREG_GetAttr_MinMaxDr+0x74>)
    6d26:	2124      	movs	r1, #36	; 0x24
    6d28:	5c5c      	ldrb	r4, [r3, r1]
	uint8_t maxDataRate = RegParams.maxDataRate;
    6d2a:	3101      	adds	r1, #1
    6d2c:	5c5f      	ldrb	r7, [r3, r1]

	for (i = 0; i < RegParams.maxChannels; i++)
    6d2e:	3105      	adds	r1, #5
    6d30:	565e      	ldrsb	r6, [r3, r1]
    6d32:	2e00      	cmp	r6, #0
    6d34:	dd28      	ble.n	6d88 <LORAREG_GetAttr_MinMaxDr+0x68>
	{
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    6d36:	0019      	movs	r1, r3
    6d38:	791d      	ldrb	r5, [r3, #4]
    6d3a:	795b      	ldrb	r3, [r3, #5]
    6d3c:	021b      	lsls	r3, r3, #8
    6d3e:	432b      	orrs	r3, r5
    6d40:	798d      	ldrb	r5, [r1, #6]
    6d42:	042d      	lsls	r5, r5, #16
    6d44:	432b      	orrs	r3, r5
    6d46:	79cd      	ldrb	r5, [r1, #7]
    6d48:	062d      	lsls	r5, r5, #24
    6d4a:	431d      	orrs	r5, r3
    6d4c:	2100      	movs	r1, #0
    6d4e:	e00b      	b.n	6d68 <LORAREG_GetAttr_MinMaxDr+0x48>
		{
			minDataRate = RegParams.pChParams[i].dataRange.min;
		}
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    6d50:	7843      	ldrb	r3, [r0, #1]
    6d52:	091b      	lsrs	r3, r3, #4
    6d54:	42bb      	cmp	r3, r7
    6d56:	dd03      	ble.n	6d60 <LORAREG_GetAttr_MinMaxDr+0x40>
    6d58:	7800      	ldrb	r0, [r0, #0]
    6d5a:	2800      	cmp	r0, #0
    6d5c:	d000      	beq.n	6d60 <LORAREG_GetAttr_MinMaxDr+0x40>
		{
			maxDataRate = RegParams.pChParams[i].dataRange.max;
    6d5e:	001f      	movs	r7, r3
	for (i = 0; i < RegParams.maxChannels; i++)
    6d60:	3101      	adds	r1, #1
    6d62:	b2c9      	uxtb	r1, r1
    6d64:	42b1      	cmp	r1, r6
    6d66:	da0f      	bge.n	6d88 <LORAREG_GetAttr_MinMaxDr+0x68>
		if ( (RegParams.pChParams[i].dataRange.min < minDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    6d68:	0048      	lsls	r0, r1, #1
    6d6a:	1828      	adds	r0, r5, r0
    6d6c:	7843      	ldrb	r3, [r0, #1]
    6d6e:	071b      	lsls	r3, r3, #28
    6d70:	0f1b      	lsrs	r3, r3, #28
    6d72:	42a3      	cmp	r3, r4
    6d74:	daec      	bge.n	6d50 <LORAREG_GetAttr_MinMaxDr+0x30>
    6d76:	7802      	ldrb	r2, [r0, #0]
    6d78:	2a00      	cmp	r2, #0
    6d7a:	d0f1      	beq.n	6d60 <LORAREG_GetAttr_MinMaxDr+0x40>
			minDataRate = RegParams.pChParams[i].dataRange.min;
    6d7c:	001c      	movs	r4, r3
		if ( (RegParams.pChParams[i].dataRange.max > maxDataRate) && (RegParams.pChParams[i].status == ENABLED) )
    6d7e:	7843      	ldrb	r3, [r0, #1]
    6d80:	091b      	lsrs	r3, r3, #4
    6d82:	42bb      	cmp	r3, r7
    6d84:	dceb      	bgt.n	6d5e <LORAREG_GetAttr_MinMaxDr+0x3e>
    6d86:	e7eb      	b.n	6d60 <LORAREG_GetAttr_MinMaxDr+0x40>
	memcpy(attrOutput,&minmaxDr,sizeof(MinMaxDr_t));
    6d88:	4663      	mov	r3, ip
    6d8a:	701c      	strb	r4, [r3, #0]
    6d8c:	705f      	strb	r7, [r3, #1]
}
    6d8e:	2008      	movs	r0, #8
    6d90:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6d92:	46c0      	nop			; (mov r8, r8)
    6d94:	20001b54 	.word	0x20001b54

00006d98 <ValidateChannelMaskCntl>:
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntl (LorawanRegionalAttributes_t attr, void *attrInput)
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t channelMaskCntl = *(uint8_t *)attrInput;
    6d98:	780b      	ldrb	r3, [r1, #0]

    // 5 is RFU for channel mask for US
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    6d9a:	2b05      	cmp	r3, #5
    6d9c:	d004      	beq.n	6da8 <ValidateChannelMaskCntl+0x10>
    StackRetStatus_t result = LORAWAN_SUCCESS;
    6d9e:	2008      	movs	r0, #8
    if ((channelMaskCntl == 5) || (channelMaskCntl > 7))
    6da0:	2b07      	cmp	r3, #7
    6da2:	d900      	bls.n	6da6 <ValidateChannelMaskCntl+0xe>
    {
        result = LORAWAN_INVALID_PARAMETER;
    6da4:	3002      	adds	r0, #2
    }

    return result;
}
    6da6:	4770      	bx	lr
        result = LORAWAN_INVALID_PARAMETER;
    6da8:	200a      	movs	r0, #10
    6daa:	e7fc      	b.n	6da6 <ValidateChannelMaskCntl+0xe>

00006dac <ValidateTxPower>:
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint8_t txPowerNew = *(uint8_t *)attrInput;
	
	//if ((txPowerNew < 5) || (txPowerNew > 10) || (txPowerNew == 6))
	if (txPowerNew > RegParams.maxTxPwrIndx)
    6dac:	780a      	ldrb	r2, [r1, #0]
    6dae:	232d      	movs	r3, #45	; 0x2d
    6db0:	4903      	ldr	r1, [pc, #12]	; (6dc0 <ValidateTxPower+0x14>)
    6db2:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6db4:	2008      	movs	r0, #8
	if (txPowerNew > RegParams.maxTxPwrIndx)
    6db6:	429a      	cmp	r2, r3
    6db8:	dd00      	ble.n	6dbc <ValidateTxPower+0x10>
	{
		result = LORAWAN_INVALID_PARAMETER;
    6dba:	3002      	adds	r0, #2
	}

	return result;
}
    6dbc:	4770      	bx	lr
    6dbe:	46c0      	nop			; (mov r8, r8)
    6dc0:	20001b54 	.word	0x20001b54

00006dc4 <ValidateChannelMask>:
 */
#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateChannelMask (LorawanRegionalAttributes_t attr, void *attrInput)
{
	return LORAWAN_SUCCESS;	
}
    6dc4:	2008      	movs	r0, #8
    6dc6:	4770      	bx	lr

00006dc8 <ValidateChannelMaskT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    6dc8:	b530      	push	{r4, r5, lr}
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
	
	uint16_t channelMask = * (uint16_t *)attrInput;
    6dca:	8809      	ldrh	r1, [r1, #0]
	
	if(channelMask != 0x0000U)
    6dcc:	2900      	cmp	r1, #0
    6dce:	d020      	beq.n	6e12 <ValidateChannelMaskT2+0x4a>
	{
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    6dd0:	232a      	movs	r3, #42	; 0x2a
    6dd2:	4a11      	ldr	r2, [pc, #68]	; (6e18 <ValidateChannelMaskT2+0x50>)
    6dd4:	56d0      	ldrsb	r0, [r2, r3]
    6dd6:	2800      	cmp	r0, #0
    6dd8:	dd1b      	ble.n	6e12 <ValidateChannelMaskT2+0x4a>
		{
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    6dda:	7a14      	ldrb	r4, [r2, #8]
    6ddc:	7a53      	ldrb	r3, [r2, #9]
    6dde:	021b      	lsls	r3, r3, #8
    6de0:	4323      	orrs	r3, r4
    6de2:	7a94      	ldrb	r4, [r2, #10]
    6de4:	0424      	lsls	r4, r4, #16
    6de6:	4323      	orrs	r3, r4
    6de8:	7ad4      	ldrb	r4, [r2, #11]
    6dea:	0624      	lsls	r4, r4, #24
    6dec:	431c      	orrs	r4, r3
    6dee:	2300      	movs	r3, #0
    6df0:	2503      	movs	r5, #3
    6df2:	e004      	b.n	6dfe <ValidateChannelMaskT2+0x36>
				retVal = LORAWAN_INVALID_PARAMETER;
				break;
			}
			else
			{
				channelMask = channelMask >> SHIFT1;
    6df4:	0849      	lsrs	r1, r1, #1
		for(uint8_t i = 0; i< RegParams.maxChannels;i++)
    6df6:	3301      	adds	r3, #1
    6df8:	b2db      	uxtb	r3, r3
    6dfa:	4283      	cmp	r3, r0
    6dfc:	da09      	bge.n	6e12 <ValidateChannelMaskT2+0x4a>
			if(((channelMask && BIT0) == BIT0) && ((RegParams.pOtherChParams[i].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) != (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)))
    6dfe:	2900      	cmp	r1, #0
    6e00:	d0f8      	beq.n	6df4 <ValidateChannelMaskT2+0x2c>
    6e02:	005a      	lsls	r2, r3, #1
    6e04:	18d2      	adds	r2, r2, r3
    6e06:	0092      	lsls	r2, r2, #2
    6e08:	18a2      	adds	r2, r4, r2
    6e0a:	7ad2      	ldrb	r2, [r2, #11]
    6e0c:	402a      	ands	r2, r5
    6e0e:	2a03      	cmp	r2, #3
    6e10:	d0f0      	beq.n	6df4 <ValidateChannelMaskT2+0x2c>
	else
	{
		////ChMask can be set to 0 if ChMaskCtrl is set to 6
		return retVal = LORAWAN_SUCCESS;
	}
}
    6e12:	2008      	movs	r0, #8
    6e14:	bd30      	pop	{r4, r5, pc}
    6e16:	46c0      	nop			; (mov r8, r8)
    6e18:	20001b54 	.word	0x20001b54

00006e1c <ValidateChannelMaskCntlT2>:
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t ValidateChannelMaskCntlT2 (LorawanRegionalAttributes_t attr, void *attrInput)
{
	uint8_t channelMaskCntl = * (uint16_t *)attrInput;
    6e1c:	780b      	ldrb	r3, [r1, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6e1e:	2008      	movs	r0, #8
	
    if ( (channelMaskCntl != 0) && (channelMaskCntl != 6) )
    6e20:	2b00      	cmp	r3, #0
    6e22:	d002      	beq.n	6e2a <ValidateChannelMaskCntlT2+0xe>
    6e24:	2b06      	cmp	r3, #6
    6e26:	d001      	beq.n	6e2c <ValidateChannelMaskCntlT2+0x10>
    {
	    result = LORAWAN_INVALID_PARAMETER;
    6e28:	3002      	adds	r0, #2
    }
	return result;
}
    6e2a:	4770      	bx	lr
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6e2c:	2008      	movs	r0, #8
    6e2e:	e7fc      	b.n	6e2a <ValidateChannelMaskCntlT2+0xe>

00006e30 <ValidateChMaskChCntlT2>:
{
    6e30:	b510      	push	{r4, lr}
    6e32:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    6e34:	ac01      	add	r4, sp, #4
    6e36:	2204      	movs	r2, #4
    6e38:	0020      	movs	r0, r4
    6e3a:	4b0f      	ldr	r3, [pc, #60]	; (6e78 <ValidateChMaskChCntlT2+0x48>)
    6e3c:	4798      	blx	r3
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    6e3e:	8863      	ldrh	r3, [r4, #2]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d104      	bne.n	6e4e <ValidateChMaskChCntlT2+0x1e>
    6e44:	ab01      	add	r3, sp, #4
    6e46:	781a      	ldrb	r2, [r3, #0]
		return LORAWAN_INVALID_PARAMETER;
    6e48:	230a      	movs	r3, #10
    if ( chMaskchCntl.chnlMask || chMaskchCntl.chnlMaskCntl )
    6e4a:	2a00      	cmp	r2, #0
    6e4c:	d007      	beq.n	6e5e <ValidateChMaskChCntlT2+0x2e>
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    6e4e:	466b      	mov	r3, sp
    6e50:	1d99      	adds	r1, r3, #6
    6e52:	201a      	movs	r0, #26
    6e54:	4b09      	ldr	r3, [pc, #36]	; (6e7c <ValidateChMaskChCntlT2+0x4c>)
    6e56:	4798      	blx	r3
			return LORAWAN_INVALID_PARAMETER;
    6e58:	230a      	movs	r3, #10
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    6e5a:	2808      	cmp	r0, #8
    6e5c:	d002      	beq.n	6e64 <ValidateChMaskChCntlT2+0x34>
}
    6e5e:	0018      	movs	r0, r3
    6e60:	b002      	add	sp, #8
    6e62:	bd10      	pop	{r4, pc}
		if(((ValidateChannelMaskT2(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) == LORAWAN_SUCCESS) && (ValidateChannelMaskCntlT2(CHANNEL_MASK_CNTL, (void *)&chMaskchCntl.chnlMaskCntl)) == LORAWAN_SUCCESS)
    6e64:	a901      	add	r1, sp, #4
    6e66:	3013      	adds	r0, #19
    6e68:	4b05      	ldr	r3, [pc, #20]	; (6e80 <ValidateChMaskChCntlT2+0x50>)
    6e6a:	4798      	blx	r3
    6e6c:	0003      	movs	r3, r0
    6e6e:	2808      	cmp	r0, #8
    6e70:	d0f5      	beq.n	6e5e <ValidateChMaskChCntlT2+0x2e>
			return LORAWAN_INVALID_PARAMETER;
    6e72:	230a      	movs	r3, #10
    6e74:	e7f3      	b.n	6e5e <ValidateChMaskChCntlT2+0x2e>
    6e76:	46c0      	nop			; (mov r8, r8)
    6e78:	00015f45 	.word	0x00015f45
    6e7c:	00006dc9 	.word	0x00006dc9
    6e80:	00006e1d 	.word	0x00006e1d

00006e84 <ValidateDataRate>:
{
    StackRetStatus_t result = LORAWAN_SUCCESS;
	
	uint8_t dataRate = *(uint8_t *)attrInput;

    if ( dataRate > RegParams.minDataRate )
    6e84:	780a      	ldrb	r2, [r1, #0]
    6e86:	2324      	movs	r3, #36	; 0x24
    6e88:	4903      	ldr	r1, [pc, #12]	; (6e98 <ValidateDataRate+0x14>)
    6e8a:	5ccb      	ldrb	r3, [r1, r3]
    StackRetStatus_t result = LORAWAN_SUCCESS;
    6e8c:	2008      	movs	r0, #8
    if ( dataRate > RegParams.minDataRate )
    6e8e:	429a      	cmp	r2, r3
    6e90:	d900      	bls.n	6e94 <ValidateDataRate+0x10>
    {
        result = LORAWAN_INVALID_PARAMETER;
    6e92:	3002      	adds	r0, #2
    }

    return result;
}
    6e94:	4770      	bx	lr
    6e96:	46c0      	nop			; (mov r8, r8)
    6e98:	20001b54 	.word	0x20001b54

00006e9c <ValidateSupportedDr>:
#endif

static StackRetStatus_t ValidateSupportedDr (LorawanRegionalAttributes_t attr, void *attrInput)
{
    6e9c:	b570      	push	{r4, r5, r6, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
	uint8_t  dataRate;
	dataRate = *(uint8_t *)attrInput;
    6e9e:	780d      	ldrb	r5, [r1, #0]
	
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    6ea0:	232a      	movs	r3, #42	; 0x2a
    6ea2:	4a14      	ldr	r2, [pc, #80]	; (6ef4 <ValidateSupportedDr+0x58>)
    6ea4:	56d4      	ldrsb	r4, [r2, r3]
    6ea6:	2c00      	cmp	r4, #0
    6ea8:	dd22      	ble.n	6ef0 <ValidateSupportedDr+0x54>
	{
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    6eaa:	7910      	ldrb	r0, [r2, #4]
    6eac:	7953      	ldrb	r3, [r2, #5]
    6eae:	021b      	lsls	r3, r3, #8
    6eb0:	4303      	orrs	r3, r0
    6eb2:	7990      	ldrb	r0, [r2, #6]
    6eb4:	0400      	lsls	r0, r0, #16
    6eb6:	4303      	orrs	r3, r0
    6eb8:	79d0      	ldrb	r0, [r2, #7]
    6eba:	0600      	lsls	r0, r0, #24
    6ebc:	4318      	orrs	r0, r3
    6ebe:	2300      	movs	r3, #0
    6ec0:	002e      	movs	r6, r5
    6ec2:	e003      	b.n	6ecc <ValidateSupportedDr+0x30>
	for(uint8_t i = 0; i <RegParams.maxChannels; i++)
    6ec4:	3301      	adds	r3, #1
    6ec6:	b2db      	uxtb	r3, r3
    6ec8:	42a3      	cmp	r3, r4
    6eca:	da0f      	bge.n	6eec <ValidateSupportedDr+0x50>
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    6ecc:	005a      	lsls	r2, r3, #1
    6ece:	1882      	adds	r2, r0, r2
    6ed0:	7811      	ldrb	r1, [r2, #0]
    6ed2:	2900      	cmp	r1, #0
    6ed4:	d0f6      	beq.n	6ec4 <ValidateSupportedDr+0x28>
    6ed6:	7851      	ldrb	r1, [r2, #1]
    6ed8:	0709      	lsls	r1, r1, #28
    6eda:	0f09      	lsrs	r1, r1, #28
    6edc:	428d      	cmp	r5, r1
    6ede:	dbf1      	blt.n	6ec4 <ValidateSupportedDr+0x28>
		   dataRate <= RegParams.pChParams[i].dataRange.max)
    6ee0:	7852      	ldrb	r2, [r2, #1]
    6ee2:	0912      	lsrs	r2, r2, #4
		if(RegParams.pChParams[i].status == ENABLED && dataRate >= RegParams.pChParams[i].dataRange.min &&
    6ee4:	4296      	cmp	r6, r2
    6ee6:	dced      	bgt.n	6ec4 <ValidateSupportedDr+0x28>
		{
			result = LORAWAN_SUCCESS;
    6ee8:	2008      	movs	r0, #8
    6eea:	e000      	b.n	6eee <ValidateSupportedDr+0x52>
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    6eec:	200a      	movs	r0, #10
			break;
		}
	}
	return result;	
}
    6eee:	bd70      	pop	{r4, r5, r6, pc}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    6ef0:	200a      	movs	r0, #10
    6ef2:	e7fc      	b.n	6eee <ValidateSupportedDr+0x52>
    6ef4:	20001b54 	.word	0x20001b54

00006ef8 <ValidateRxFreqT1>:

#if (NA_BAND == 1 || AU_BAND == 1)
static StackRetStatus_t ValidateRxFreqT1 (LorawanRegionalAttributes_t attr, void *attrInput)
{
    6ef8:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t FreqNew = *(uint32_t *)attrInput;
	
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    6efa:	6808      	ldr	r0, [r1, #0]
    6efc:	4b07      	ldr	r3, [pc, #28]	; (6f1c <ValidateRxFreqT1+0x24>)
    6efe:	469c      	mov	ip, r3
    6f00:	4460      	add	r0, ip
    6f02:	4a07      	ldr	r2, [pc, #28]	; (6f20 <ValidateRxFreqT1+0x28>)
	{
		result = LORAWAN_INVALID_PARAMETER;
    6f04:	230a      	movs	r3, #10
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    6f06:	4290      	cmp	r0, r2
    6f08:	d806      	bhi.n	6f18 <ValidateRxFreqT1+0x20>
    6f0a:	4906      	ldr	r1, [pc, #24]	; (6f24 <ValidateRxFreqT1+0x2c>)
    6f0c:	4b06      	ldr	r3, [pc, #24]	; (6f28 <ValidateRxFreqT1+0x30>)
    6f0e:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6f10:	2308      	movs	r3, #8
	if(FreqNew < FREQ_923300KHZ || FreqNew > FREQ_927500KHZ || (FreqNew - FREQ_923300KHZ) % FREQ_600KHZ != 0)
    6f12:	2900      	cmp	r1, #0
    6f14:	d000      	beq.n	6f18 <ValidateRxFreqT1+0x20>
		result = LORAWAN_INVALID_PARAMETER;
    6f16:	3302      	adds	r3, #2
	}
	return result;
}
    6f18:	0018      	movs	r0, r3
    6f1a:	bd10      	pop	{r4, pc}
    6f1c:	c8f78f60 	.word	0xc8f78f60
    6f20:	00401640 	.word	0x00401640
    6f24:	000927c0 	.word	0x000927c0
    6f28:	00012e1d 	.word	0x00012e1d

00006f2c <ValidateRx1DataRateOffset>:
{
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
	
	uint8_t rx1DrOffset = *(uint8_t *)attrInput;
	
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    6f2c:	780a      	ldrb	r2, [r1, #0]
    6f2e:	232c      	movs	r3, #44	; 0x2c
    6f30:	4903      	ldr	r1, [pc, #12]	; (6f40 <ValidateRx1DataRateOffset+0x14>)
    6f32:	56cb      	ldrsb	r3, [r1, r3]
	StackRetStatus_t retVal = LORAWAN_INVALID_PARAMETER;
    6f34:	200a      	movs	r0, #10
	if(rx1DrOffset <= RegParams.Rx1DrOffset)
    6f36:	429a      	cmp	r2, r3
    6f38:	dc00      	bgt.n	6f3c <ValidateRx1DataRateOffset+0x10>
	{
		retVal = LORAWAN_SUCCESS;
    6f3a:	3802      	subs	r0, #2
	}
	
	return retVal;
}
    6f3c:	4770      	bx	lr
    6f3e:	46c0      	nop			; (mov r8, r8)
    6f40:	20001b54 	.word	0x20001b54

00006f44 <getSubBandId>:
}
#endif

#if (EU_BAND == 1 || AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static uint8_t getSubBandId(uint32_t frequency)
{
    6f44:	b530      	push	{r4, r5, lr}
    6f46:	0004      	movs	r4, r0
	uint8_t subBandId = 0xFF;
#if (EU_BAND == 1)	
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    6f48:	2329      	movs	r3, #41	; 0x29
    6f4a:	4a19      	ldr	r2, [pc, #100]	; (6fb0 <getSubBandId+0x6c>)
    6f4c:	5cd5      	ldrb	r5, [r2, r3]
    6f4e:	2d00      	cmp	r5, #0
    6f50:	d02c      	beq.n	6fac <getSubBandId+0x68>
	{
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    6f52:	0011      	movs	r1, r2
    6f54:	7b13      	ldrb	r3, [r2, #12]
    6f56:	7b52      	ldrb	r2, [r2, #13]
    6f58:	0212      	lsls	r2, r2, #8
    6f5a:	431a      	orrs	r2, r3
    6f5c:	7b8b      	ldrb	r3, [r1, #14]
    6f5e:	041b      	lsls	r3, r3, #16
    6f60:	431a      	orrs	r2, r3
    6f62:	7bcb      	ldrb	r3, [r1, #15]
    6f64:	061b      	lsls	r3, r3, #24
    6f66:	4313      	orrs	r3, r2
    6f68:	2000      	movs	r0, #0
    6f6a:	e004      	b.n	6f76 <getSubBandId+0x32>
	for(uint8_t i = 0; i < RegParams.maxSubBands; i++)
    6f6c:	3001      	adds	r0, #1
    6f6e:	b2c0      	uxtb	r0, r0
    6f70:	330c      	adds	r3, #12
    6f72:	42a8      	cmp	r0, r5
    6f74:	d018      	beq.n	6fa8 <getSubBandId+0x64>
		if(frequency >= RegParams.pSubBandParams[i].freqMin && frequency <= RegParams.pSubBandParams[i].freqMax)
    6f76:	781a      	ldrb	r2, [r3, #0]
    6f78:	7859      	ldrb	r1, [r3, #1]
    6f7a:	0209      	lsls	r1, r1, #8
    6f7c:	4311      	orrs	r1, r2
    6f7e:	789a      	ldrb	r2, [r3, #2]
    6f80:	0412      	lsls	r2, r2, #16
    6f82:	4311      	orrs	r1, r2
    6f84:	78da      	ldrb	r2, [r3, #3]
    6f86:	0612      	lsls	r2, r2, #24
    6f88:	430a      	orrs	r2, r1
    6f8a:	42a2      	cmp	r2, r4
    6f8c:	d8ee      	bhi.n	6f6c <getSubBandId+0x28>
    6f8e:	791a      	ldrb	r2, [r3, #4]
    6f90:	7959      	ldrb	r1, [r3, #5]
    6f92:	0209      	lsls	r1, r1, #8
    6f94:	4311      	orrs	r1, r2
    6f96:	799a      	ldrb	r2, [r3, #6]
    6f98:	0412      	lsls	r2, r2, #16
    6f9a:	4311      	orrs	r1, r2
    6f9c:	79da      	ldrb	r2, [r3, #7]
    6f9e:	0612      	lsls	r2, r2, #24
    6fa0:	430a      	orrs	r2, r1
    6fa2:	4294      	cmp	r4, r2
    6fa4:	d8e2      	bhi.n	6f6c <getSubBandId+0x28>
    6fa6:	e000      	b.n	6faa <getSubBandId+0x66>
	uint8_t subBandId = 0xFF;
    6fa8:	20ff      	movs	r0, #255	; 0xff
#elif (AS_BAND == 1)
	// whole ASIA 923 spectrum is one band
	subBandId = 0;
#endif
	return subBandId;
}
    6faa:	bd30      	pop	{r4, r5, pc}
	uint8_t subBandId = 0xFF;
    6fac:	20ff      	movs	r0, #255	; 0xff
    6fae:	e7fc      	b.n	6faa <getSubBandId+0x66>
    6fb0:	20001b54 	.word	0x20001b54

00006fb4 <ValidateFreq>:
{
    6fb4:	b510      	push	{r4, lr}
    if(getSubBandId(frequencyNew) == 0xFF)
    6fb6:	6808      	ldr	r0, [r1, #0]
    6fb8:	4b04      	ldr	r3, [pc, #16]	; (6fcc <ValidateFreq+0x18>)
    6fba:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    6fbc:	2308      	movs	r3, #8
    if(getSubBandId(frequencyNew) == 0xFF)
    6fbe:	28ff      	cmp	r0, #255	; 0xff
    6fc0:	d001      	beq.n	6fc6 <ValidateFreq+0x12>
}
    6fc2:	0018      	movs	r0, r3
    6fc4:	bd10      	pop	{r4, pc}
		retVal = LORAWAN_INVALID_PARAMETER;
    6fc6:	3302      	adds	r3, #2
    6fc8:	e7fb      	b.n	6fc2 <ValidateFreq+0xe>
    6fca:	46c0      	nop			; (mov r8, r8)
    6fcc:	00006f45 	.word	0x00006f45

00006fd0 <ValidateFrequencyAS>:
 */
#if (AS_BAND == 1)
static StackRetStatus_t ValidateFrequencyAS (LorawanRegionalAttributes_t attr, void *attrInput)
{
	StackRetStatus_t result = LORAWAN_SUCCESS;
	uint32_t frequencyNew = * (uint32_t *)attrInput;
    6fd0:	680b      	ldr	r3, [r1, #0]

    /*Bands Supporting Freq 923-925MHz*/
    if(RegParams.band == ISM_BRN923 || RegParams.band == ISM_CMB923 || RegParams.band == ISM_INS923 || RegParams.band == ISM_LAOS923)
    6fd2:	222e      	movs	r2, #46	; 0x2e
    6fd4:	4919      	ldr	r1, [pc, #100]	; (703c <ValidateFrequencyAS+0x6c>)
    6fd6:	5c8a      	ldrb	r2, [r1, r2]
    6fd8:	1f91      	subs	r1, r2, #6
    6fda:	2903      	cmp	r1, #3
    6fdc:	d808      	bhi.n	6ff0 <ValidateFrequencyAS+0x20>
	{
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    6fde:	4a18      	ldr	r2, [pc, #96]	; (7040 <ValidateFrequencyAS+0x70>)
    6fe0:	4694      	mov	ip, r2
    6fe2:	4463      	add	r3, ip
    6fe4:	4a17      	ldr	r2, [pc, #92]	; (7044 <ValidateFrequencyAS+0x74>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    6fe6:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_923000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    6fe8:	4293      	cmp	r3, r2
    6fea:	d900      	bls.n	6fee <ValidateFrequencyAS+0x1e>
		{
			result = LORAWAN_INVALID_PARAMETER;
    6fec:	3002      	adds	r0, #2
	else
	{
		result = LORAWAN_INVALID_PARAMETER;
	}
	return result;
}
    6fee:	4770      	bx	lr
	else if(RegParams.band == ISM_NZ923)
    6ff0:	2a0a      	cmp	r2, #10
    6ff2:	d011      	beq.n	7018 <ValidateFrequencyAS+0x48>
	else if(RegParams.band == ISM_SP923 || RegParams.band == ISM_THAI923 || RegParams.band == ISM_VTM923)
    6ff4:	2a0b      	cmp	r2, #11
    6ff6:	d018      	beq.n	702a <ValidateFrequencyAS+0x5a>
    6ff8:	0011      	movs	r1, r2
    6ffa:	390d      	subs	r1, #13
    6ffc:	2901      	cmp	r1, #1
    6ffe:	d914      	bls.n	702a <ValidateFrequencyAS+0x5a>
		result = LORAWAN_INVALID_PARAMETER;
    7000:	200a      	movs	r0, #10
	else if(RegParams.band == ISM_TWN923)
    7002:	2a0c      	cmp	r2, #12
    7004:	d1f3      	bne.n	6fee <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7006:	4a10      	ldr	r2, [pc, #64]	; (7048 <ValidateFrequencyAS+0x78>)
    7008:	4694      	mov	ip, r2
    700a:	4463      	add	r3, ip
    700c:	4a0f      	ldr	r2, [pc, #60]	; (704c <ValidateFrequencyAS+0x7c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    700e:	3802      	subs	r0, #2
		if ( (frequencyNew < FREQ_922000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7010:	4293      	cmp	r3, r2
    7012:	d9ec      	bls.n	6fee <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    7014:	3002      	adds	r0, #2
    7016:	e7ea      	b.n	6fee <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7018:	4a0d      	ldr	r2, [pc, #52]	; (7050 <ValidateFrequencyAS+0x80>)
    701a:	4694      	mov	ip, r2
    701c:	4463      	add	r3, ip
    701e:	4a0d      	ldr	r2, [pc, #52]	; (7054 <ValidateFrequencyAS+0x84>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7020:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_915000KHZ) || (frequencyNew > FREQ_928000KHZ) )
    7022:	4293      	cmp	r3, r2
    7024:	d9e3      	bls.n	6fee <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    7026:	3002      	adds	r0, #2
    7028:	e7e1      	b.n	6fee <ValidateFrequencyAS+0x1e>
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    702a:	4a0b      	ldr	r2, [pc, #44]	; (7058 <ValidateFrequencyAS+0x88>)
    702c:	4694      	mov	ip, r2
    702e:	4463      	add	r3, ip
    7030:	4a0a      	ldr	r2, [pc, #40]	; (705c <ValidateFrequencyAS+0x8c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7032:	2008      	movs	r0, #8
		if ( (frequencyNew < FREQ_920000KHZ) || (frequencyNew > FREQ_925000KHZ) )
    7034:	4293      	cmp	r3, r2
    7036:	d9da      	bls.n	6fee <ValidateFrequencyAS+0x1e>
			result = LORAWAN_INVALID_PARAMETER;
    7038:	3002      	adds	r0, #2
    703a:	e7d8      	b.n	6fee <ValidateFrequencyAS+0x1e>
    703c:	20001b54 	.word	0x20001b54
    7040:	c8fc2340 	.word	0xc8fc2340
    7044:	001e8480 	.word	0x001e8480
    7048:	c90b6580 	.word	0xc90b6580
    704c:	005b8d80 	.word	0x005b8d80
    7050:	c9763540 	.word	0xc9763540
    7054:	00c65d40 	.word	0x00c65d40
    7058:	c929ea00 	.word	0xc929ea00
    705c:	004c4b40 	.word	0x004c4b40

00007060 <setTxParams>:
}
#endif

#if ( AS_BAND == 1 || IND_BAND == 1 || JPN_BAND == 1 || KR_BAND == 1)
static StackRetStatus_t setTxParams(LorawanRegionalAttributes_t attr, void *attrInput)
{
    7060:	b5f0      	push	{r4, r5, r6, r7, lr}
	TxParams_t updateTxParams;

	memcpy(&updateTxParams,attrInput,sizeof(TxParams_t));
    7062:	780d      	ldrb	r5, [r1, #0]
    7064:	7849      	ldrb	r1, [r1, #1]
    7066:	084a      	lsrs	r2, r1, #1
	
	RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime = updateTxParams.uplinkDwellTime;
    7068:	4809      	ldr	r0, [pc, #36]	; (7090 <setTxParams+0x30>)
    706a:	24e1      	movs	r4, #225	; 0xe1
    706c:	0064      	lsls	r4, r4, #1
    706e:	2601      	movs	r6, #1
    7070:	4031      	ands	r1, r6
    7072:	5d03      	ldrb	r3, [r0, r4]
    7074:	2701      	movs	r7, #1
    7076:	43bb      	bics	r3, r7
	RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime = updateTxParams.downlinkDwellTime;
    7078:	4032      	ands	r2, r6
    707a:	0052      	lsls	r2, r2, #1
    707c:	430b      	orrs	r3, r1
    707e:	2102      	movs	r1, #2
    7080:	438b      	bics	r3, r1
    7082:	4313      	orrs	r3, r2
    7084:	5503      	strb	r3, [r0, r4]
	RegParams.maxTxPwr = updateTxParams.maxEIRP;
    7086:	2328      	movs	r3, #40	; 0x28
    7088:	54c5      	strb	r5, [r0, r3]
	
	return LORAWAN_SUCCESS;
}
    708a:	2008      	movs	r0, #8
    708c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    708e:	46c0      	nop			; (mov r8, r8)
    7090:	20001b54 	.word	0x20001b54

00007094 <SearchAvailableChannel1>:
{
    7094:	b5f0      	push	{r4, r5, r6, r7, lr}
    7096:	46de      	mov	lr, fp
    7098:	4657      	mov	r7, sl
    709a:	464e      	mov	r6, r9
    709c:	4645      	mov	r5, r8
    709e:	b5e0      	push	{r5, r6, r7, lr}
    70a0:	b0af      	sub	sp, #188	; 0xbc
    70a2:	000d      	movs	r5, r1
    70a4:	0017      	movs	r7, r2
    70a6:	9309      	str	r3, [sp, #36]	; 0x24
	memset(ChList, 0, (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA) * 2);  
    70a8:	2290      	movs	r2, #144	; 0x90
    70aa:	2100      	movs	r1, #0
    70ac:	a80a      	add	r0, sp, #40	; 0x28
    70ae:	4b77      	ldr	r3, [pc, #476]	; (728c <SearchAvailableChannel1+0x1f8>)
    70b0:	4798      	blx	r3
	if(transmissionType == false)
    70b2:	2d00      	cmp	r5, #0
    70b4:	d01a      	beq.n	70ec <SearchAvailableChannel1+0x58>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    70b6:	4b76      	ldr	r3, [pc, #472]	; (7290 <SearchAvailableChannel1+0x1fc>)
    70b8:	222f      	movs	r2, #47	; 0x2f
    70ba:	5c9a      	ldrb	r2, [r3, r2]
    70bc:	4693      	mov	fp, r2
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    70be:	2258      	movs	r2, #88	; 0x58
    70c0:	32ff      	adds	r2, #255	; 0xff
    70c2:	5c9a      	ldrb	r2, [r3, r2]
    70c4:	9207      	str	r2, [sp, #28]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    70c6:	9208      	str	r2, [sp, #32]
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    70c8:	7919      	ldrb	r1, [r3, #4]
    70ca:	795a      	ldrb	r2, [r3, #5]
    70cc:	0212      	lsls	r2, r2, #8
    70ce:	4311      	orrs	r1, r2
    70d0:	799a      	ldrb	r2, [r3, #6]
    70d2:	0412      	lsls	r2, r2, #16
    70d4:	430a      	orrs	r2, r1
    70d6:	79db      	ldrb	r3, [r3, #7]
    70d8:	061b      	lsls	r3, r3, #24
    70da:	4313      	orrs	r3, r2
    70dc:	9302      	str	r3, [sp, #8]
					(RegParams.cmnParams.paramsType1.lastUsedSB == ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA))))
    70de:	9303      	str	r3, [sp, #12]
    70e0:	2100      	movs	r1, #0
    70e2:	2600      	movs	r6, #0
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    70e4:	46b9      	mov	r9, r7
    70e6:	46bc      	mov	ip, r7
    70e8:	0037      	movs	r7, r6
    70ea:	e03a      	b.n	7162 <SearchAvailableChannel1+0xce>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    70ec:	2320      	movs	r3, #32
    70ee:	4a68      	ldr	r2, [pc, #416]	; (7290 <SearchAvailableChannel1+0x1fc>)
    70f0:	5cd3      	ldrb	r3, [r2, r3]
    70f2:	069b      	lsls	r3, r3, #26
    70f4:	d5df      	bpl.n	70b6 <SearchAvailableChannel1+0x22>
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    70f6:	0011      	movs	r1, r2
    70f8:	7d13      	ldrb	r3, [r2, #20]
    70fa:	7d52      	ldrb	r2, [r2, #21]
    70fc:	0212      	lsls	r2, r2, #8
    70fe:	431a      	orrs	r2, r3
    7100:	7d8b      	ldrb	r3, [r1, #22]
    7102:	041b      	lsls	r3, r3, #16
    7104:	431a      	orrs	r2, r3
    7106:	7dcb      	ldrb	r3, [r1, #23]
    7108:	061b      	lsls	r3, r3, #24
    710a:	4313      	orrs	r3, r2
    710c:	7a18      	ldrb	r0, [r3, #8]
    710e:	4b61      	ldr	r3, [pc, #388]	; (7294 <SearchAvailableChannel1+0x200>)
    7110:	4798      	blx	r3
    7112:	0003      	movs	r3, r0
					return LORAWAN_NO_CHANNELS_FOUND;
    7114:	2010      	movs	r0, #16
			if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) 
    7116:	2b00      	cmp	r3, #0
    7118:	d0cd      	beq.n	70b6 <SearchAvailableChannel1+0x22>
    711a:	e053      	b.n	71c4 <SearchAvailableChannel1+0x130>
					((!transmissionType) &&((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))
    711c:	7806      	ldrb	r6, [r0, #0]
    711e:	2e00      	cmp	r6, #0
    7120:	d100      	bne.n	7124 <SearchAvailableChannel1+0x90>
    7122:	e088      	b.n	7236 <SearchAvailableChannel1+0x1a2>
    7124:	001e      	movs	r6, r3
    7126:	459b      	cmp	fp, r3
    7128:	d100      	bne.n	712c <SearchAvailableChannel1+0x98>
    712a:	e084      	b.n	7236 <SearchAvailableChannel1+0x1a2>
					&&
    712c:	2b3f      	cmp	r3, #63	; 0x3f
    712e:	dc02      	bgt.n	7136 <SearchAvailableChannel1+0xa2>
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    7130:	9f07      	ldr	r7, [sp, #28]
    7132:	4547      	cmp	r7, r8
    7134:	d06c      	beq.n	7210 <SearchAvailableChannel1+0x17c>
					|| 
    7136:	2e40      	cmp	r6, #64	; 0x40
    7138:	dc00      	bgt.n	713c <SearchAvailableChannel1+0xa8>
    713a:	e07c      	b.n	7236 <SearchAvailableChannel1+0x1a2>
					(((i+j) > MAX_CHANNELS_BANDWIDTH_125_AU_NA) && 
    713c:	001e      	movs	r6, r3
    713e:	3e40      	subs	r6, #64	; 0x40
    7140:	9f08      	ldr	r7, [sp, #32]
    7142:	42b7      	cmp	r7, r6
    7144:	d000      	beq.n	7148 <SearchAvailableChannel1+0xb4>
    7146:	e076      	b.n	7236 <SearchAvailableChannel1+0x1a2>
    7148:	e08d      	b.n	7266 <SearchAvailableChannel1+0x1d2>
    714a:	9f01      	ldr	r7, [sp, #4]
    714c:	9b00      	ldr	r3, [sp, #0]
    714e:	469c      	mov	ip, r3
    7150:	9b02      	ldr	r3, [sp, #8]
    7152:	3310      	adds	r3, #16
    7154:	9302      	str	r3, [sp, #8]
    7156:	9b03      	ldr	r3, [sp, #12]
    7158:	3310      	adds	r3, #16
    715a:	9303      	str	r3, [sp, #12]
    715c:	9904      	ldr	r1, [sp, #16]
	for (i = 0, k = 0; i < (MAX_CHANNELS_BANDWIDTH_125_AU_NA + MAX_CHANNELS_BANDWIDTH_500_AU_NA); i += 8, k++)
    715e:	2909      	cmp	r1, #9
    7160:	d00e      	beq.n	7180 <SearchAvailableChannel1+0xec>
    7162:	00cb      	lsls	r3, r1, #3
    7164:	1c4a      	adds	r2, r1, #1
    7166:	9204      	str	r2, [sp, #16]
    7168:	001c      	movs	r4, r3
    716a:	3408      	adds	r4, #8
{
    716c:	9803      	ldr	r0, [sp, #12]
    716e:	9a02      	ldr	r2, [sp, #8]
								ChList[num][1] = k + 1;    
    7170:	1c4e      	adds	r6, r1, #1
					((((i+j) < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (RegParams.cmnParams.paramsType1.lastUsedSB == k))
    7172:	b2c9      	uxtb	r1, r1
    7174:	9701      	str	r7, [sp, #4]
    7176:	9605      	str	r6, [sp, #20]
    7178:	4688      	mov	r8, r1
    717a:	4661      	mov	r1, ip
    717c:	9100      	str	r1, [sp, #0]
    717e:	e060      	b.n	7242 <SearchAvailableChannel1+0x1ae>
    7180:	1e3e      	subs	r6, r7, #0
    7182:	4667      	mov	r7, ip
	if(0 != num)
    7184:	d125      	bne.n	71d2 <SearchAvailableChannel1+0x13e>
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    7186:	4942      	ldr	r1, [pc, #264]	; (7290 <SearchAvailableChannel1+0x1fc>)
    7188:	232f      	movs	r3, #47	; 0x2f
    718a:	5ccc      	ldrb	r4, [r1, r3]
    718c:	790b      	ldrb	r3, [r1, #4]
    718e:	794a      	ldrb	r2, [r1, #5]
    7190:	0212      	lsls	r2, r2, #8
    7192:	431a      	orrs	r2, r3
    7194:	798b      	ldrb	r3, [r1, #6]
    7196:	041b      	lsls	r3, r3, #16
    7198:	431a      	orrs	r2, r3
    719a:	79cb      	ldrb	r3, [r1, #7]
    719c:	061b      	lsls	r3, r3, #24
    719e:	4313      	orrs	r3, r2
    71a0:	0062      	lsls	r2, r4, #1
    71a2:	189b      	adds	r3, r3, r2
    71a4:	781a      	ldrb	r2, [r3, #0]
			result = LORAWAN_NO_CHANNELS_FOUND;
    71a6:	2010      	movs	r0, #16
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    71a8:	2a00      	cmp	r2, #0
    71aa:	d00b      	beq.n	71c4 <SearchAvailableChannel1+0x130>
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    71ac:	785a      	ldrb	r2, [r3, #1]
    71ae:	0712      	lsls	r2, r2, #28
    71b0:	0f12      	lsrs	r2, r2, #28
		if ((RegParams.pChParams[RegParams.lastUsedChannelIndex].status == ENABLED) &&
    71b2:	4297      	cmp	r7, r2
    71b4:	db06      	blt.n	71c4 <SearchAvailableChannel1+0x130>
		(currDr <= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.max))
    71b6:	785b      	ldrb	r3, [r3, #1]
    71b8:	091b      	lsrs	r3, r3, #4
		(currDr >= RegParams.pChParams[RegParams.lastUsedChannelIndex].dataRange.min) &&
    71ba:	429f      	cmp	r7, r3
    71bc:	dc02      	bgt.n	71c4 <SearchAvailableChannel1+0x130>
			*channelIndex = RegParams.lastUsedChannelIndex;
    71be:	9b09      	ldr	r3, [sp, #36]	; 0x24
    71c0:	701c      	strb	r4, [r3, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    71c2:	3808      	subs	r0, #8
}
    71c4:	b02f      	add	sp, #188	; 0xbc
    71c6:	bc3c      	pop	{r2, r3, r4, r5}
    71c8:	4690      	mov	r8, r2
    71ca:	4699      	mov	r9, r3
    71cc:	46a2      	mov	sl, r4
    71ce:	46ab      	mov	fp, r5
    71d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    71d2:	4b31      	ldr	r3, [pc, #196]	; (7298 <SearchAvailableChannel1+0x204>)
    71d4:	4798      	blx	r3
    71d6:	0031      	movs	r1, r6
    71d8:	4b30      	ldr	r3, [pc, #192]	; (729c <SearchAvailableChannel1+0x208>)
    71da:	4798      	blx	r3
    71dc:	23ff      	movs	r3, #255	; 0xff
    71de:	400b      	ands	r3, r1
		*channelIndex = ChList[randomNumber][0];
    71e0:	005b      	lsls	r3, r3, #1
    71e2:	aa0a      	add	r2, sp, #40	; 0x28
    71e4:	5c9a      	ldrb	r2, [r3, r2]
    71e6:	9909      	ldr	r1, [sp, #36]	; 0x24
    71e8:	700a      	strb	r2, [r1, #0]
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    71ea:	aa0a      	add	r2, sp, #40	; 0x28
    71ec:	4694      	mov	ip, r2
    71ee:	4463      	add	r3, ip
    71f0:	785b      	ldrb	r3, [r3, #1]
		if(RegParams.cmnParams.paramsType1.lastUsedSB >= MAX_SUBBANDS)
    71f2:	2b07      	cmp	r3, #7
    71f4:	d805      	bhi.n	7202 <SearchAvailableChannel1+0x16e>
		RegParams.cmnParams.paramsType1.lastUsedSB = ChList[randomNumber][1];
    71f6:	2258      	movs	r2, #88	; 0x58
    71f8:	32ff      	adds	r2, #255	; 0xff
    71fa:	4925      	ldr	r1, [pc, #148]	; (7290 <SearchAvailableChannel1+0x1fc>)
    71fc:	548b      	strb	r3, [r1, r2]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    71fe:	2008      	movs	r0, #8
    7200:	e7e0      	b.n	71c4 <SearchAvailableChannel1+0x130>
				RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    7202:	2100      	movs	r1, #0
    7204:	2358      	movs	r3, #88	; 0x58
    7206:	33ff      	adds	r3, #255	; 0xff
    7208:	4a21      	ldr	r2, [pc, #132]	; (7290 <SearchAvailableChannel1+0x1fc>)
    720a:	54d1      	strb	r1, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    720c:	2008      	movs	r0, #8
    720e:	e7d9      	b.n	71c4 <SearchAvailableChannel1+0x130>
						ChList[num][0] = i+j;
    7210:	9901      	ldr	r1, [sp, #4]
    7212:	9106      	str	r1, [sp, #24]
    7214:	0049      	lsls	r1, r1, #1
    7216:	468c      	mov	ip, r1
    7218:	a90a      	add	r1, sp, #40	; 0x28
    721a:	4666      	mov	r6, ip
    721c:	5473      	strb	r3, [r6, r1]
								ChList[num][1] = k + 1;    
    721e:	9906      	ldr	r1, [sp, #24]
    7220:	004e      	lsls	r6, r1, #1
    7222:	a90a      	add	r1, sp, #40	; 0x28
    7224:	468c      	mov	ip, r1
    7226:	4466      	add	r6, ip
    7228:	4669      	mov	r1, sp
    722a:	7d09      	ldrb	r1, [r1, #20]
    722c:	7071      	strb	r1, [r6, #1]
						num++;
    722e:	9f01      	ldr	r7, [sp, #4]
    7230:	3701      	adds	r7, #1
    7232:	b2f9      	uxtb	r1, r7
    7234:	9101      	str	r1, [sp, #4]
    7236:	3202      	adds	r2, #2
    7238:	3002      	adds	r0, #2
    723a:	3301      	adds	r3, #1
			for (j = 0; j < NO_OF_CH_IN_SUBBAND; j++)
    723c:	42a3      	cmp	r3, r4
    723e:	d100      	bne.n	7242 <SearchAvailableChannel1+0x1ae>
    7240:	e783      	b.n	714a <SearchAvailableChannel1+0xb6>
				if (((transmissionType) && (currDr >= RegParams.pChParams[i + j].dataRange.min) && (currDr <= RegParams.pChParams[i + j].dataRange.max) 
    7242:	2d00      	cmp	r5, #0
    7244:	d100      	bne.n	7248 <SearchAvailableChannel1+0x1b4>
    7246:	e769      	b.n	711c <SearchAvailableChannel1+0x88>
    7248:	7856      	ldrb	r6, [r2, #1]
    724a:	0736      	lsls	r6, r6, #28
    724c:	0f36      	lsrs	r6, r6, #28
    724e:	9f00      	ldr	r7, [sp, #0]
    7250:	42b7      	cmp	r7, r6
    7252:	dbf0      	blt.n	7236 <SearchAvailableChannel1+0x1a2>
    7254:	7856      	ldrb	r6, [r2, #1]
    7256:	0936      	lsrs	r6, r6, #4
    7258:	45b1      	cmp	r9, r6
    725a:	dcec      	bgt.n	7236 <SearchAvailableChannel1+0x1a2>
					&& ((RegParams.pChParams[i + j].status == ENABLED) && ((i+j) != RegParams.lastUsedChannelIndex))) 
    725c:	7816      	ldrb	r6, [r2, #0]
    725e:	2e00      	cmp	r6, #0
    7260:	d0e9      	beq.n	7236 <SearchAvailableChannel1+0x1a2>
    7262:	459b      	cmp	fp, r3
    7264:	d0e7      	beq.n	7236 <SearchAvailableChannel1+0x1a2>
						ChList[num][0] = i+j;
    7266:	9901      	ldr	r1, [sp, #4]
    7268:	9106      	str	r1, [sp, #24]
    726a:	b2de      	uxtb	r6, r3
    726c:	46b4      	mov	ip, r6
    726e:	004e      	lsls	r6, r1, #1
    7270:	af0a      	add	r7, sp, #40	; 0x28
    7272:	4661      	mov	r1, ip
    7274:	55f1      	strb	r1, [r6, r7]
						if((i+j) >= MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    7276:	2b3f      	cmp	r3, #63	; 0x3f
    7278:	ddd1      	ble.n	721e <SearchAvailableChannel1+0x18a>
								ChList[num][1] = ((i + j) - MAX_CHANNELS_BANDWIDTH_125_AU_NA + 1);
    727a:	46ba      	mov	sl, r7
    727c:	4456      	add	r6, sl
    727e:	213f      	movs	r1, #63	; 0x3f
    7280:	4249      	negs	r1, r1
    7282:	468a      	mov	sl, r1
    7284:	44d4      	add	ip, sl
    7286:	4661      	mov	r1, ip
    7288:	7071      	strb	r1, [r6, #1]
    728a:	e7d0      	b.n	722e <SearchAvailableChannel1+0x19a>
    728c:	00015fc9 	.word	0x00015fc9
    7290:	20001b54 	.word	0x20001b54
    7294:	0000c0c1 	.word	0x0000c0c1
    7298:	00016149 	.word	0x00016149
    729c:	00012ff1 	.word	0x00012ff1

000072a0 <LORAREG_GetAttr_FreeChannel1>:
{
    72a0:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    72a2:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    72a4:	202a      	movs	r0, #42	; 0x2a
    72a6:	4d07      	ldr	r5, [pc, #28]	; (72c4 <LORAREG_GetAttr_FreeChannel1+0x24>)
    72a8:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    72aa:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    72ac:	42ac      	cmp	r4, r5
    72ae:	dd00      	ble.n	72b2 <LORAREG_GetAttr_FreeChannel1+0x12>
}
    72b0:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel1(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    72b2:	7888      	ldrb	r0, [r1, #2]
    72b4:	7809      	ldrb	r1, [r1, #0]
    72b6:	0013      	movs	r3, r2
    72b8:	0002      	movs	r2, r0
    72ba:	0020      	movs	r0, r4
    72bc:	4c02      	ldr	r4, [pc, #8]	; (72c8 <LORAREG_GetAttr_FreeChannel1+0x28>)
    72be:	47a0      	blx	r4
	return result;
    72c0:	e7f6      	b.n	72b0 <LORAREG_GetAttr_FreeChannel1+0x10>
    72c2:	46c0      	nop			; (mov r8, r8)
    72c4:	20001b54 	.word	0x20001b54
    72c8:	00007095 	.word	0x00007095

000072cc <setEnableAllChs>:
#endif
	return status;
}

static StackRetStatus_t setEnableAllChs(LorawanRegionalAttributes_t attr, void *attrInput)
{
    72cc:	b570      	push	{r4, r5, r6, lr}
    72ce:	2000      	movs	r0, #0
	StackRetStatus_t status = LORAWAN_SUCCESS;
#if (RANDOM_NW_ACQ == 1)		
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
	{
		RegParams.pChParams[i].status = ENABLED;	
    72d0:	4915      	ldr	r1, [pc, #84]	; (7328 <setEnableAllChs+0x5c>)
    72d2:	2401      	movs	r4, #1
    72d4:	790b      	ldrb	r3, [r1, #4]
    72d6:	794a      	ldrb	r2, [r1, #5]
    72d8:	0212      	lsls	r2, r2, #8
    72da:	431a      	orrs	r2, r3
    72dc:	798b      	ldrb	r3, [r1, #6]
    72de:	041b      	lsls	r3, r3, #16
    72e0:	431a      	orrs	r2, r3
    72e2:	79cb      	ldrb	r3, [r1, #7]
    72e4:	061b      	lsls	r3, r3, #24
    72e6:	4313      	orrs	r3, r2
    72e8:	541c      	strb	r4, [r3, r0]
    72ea:	3002      	adds	r0, #2
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    72ec:	2890      	cmp	r0, #144	; 0x90
    72ee:	d1f1      	bne.n	72d4 <setEnableAllChs+0x8>
	}
	RegParams.cmnParams.paramsType1.lastUsedSB = 0;
    72f0:	4c0d      	ldr	r4, [pc, #52]	; (7328 <setEnableAllChs+0x5c>)
    72f2:	2200      	movs	r2, #0
    72f4:	2358      	movs	r3, #88	; 0x58
    72f6:	33ff      	adds	r3, #255	; 0xff
    72f8:	54e2      	strb	r2, [r4, r3]
#if (ENABLE_PDS == 1)
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    72fa:	4b0c      	ldr	r3, [pc, #48]	; (732c <setEnableAllChs+0x60>)
    72fc:	5ce3      	ldrb	r3, [r4, r3]
    72fe:	4a0c      	ldr	r2, [pc, #48]	; (7330 <setEnableAllChs+0x64>)
    7300:	5ca0      	ldrb	r0, [r4, r2]
    7302:	0200      	lsls	r0, r0, #8
    7304:	4318      	orrs	r0, r3
    7306:	b2c1      	uxtb	r1, r0
    7308:	0a00      	lsrs	r0, r0, #8
    730a:	4d0a      	ldr	r5, [pc, #40]	; (7334 <setEnableAllChs+0x68>)
    730c:	47a8      	blx	r5
	PDS_STORE(RegParams.regParamItems.lastUsedSB);
    730e:	2383      	movs	r3, #131	; 0x83
    7310:	009b      	lsls	r3, r3, #2
    7312:	5ce3      	ldrb	r3, [r4, r3]
    7314:	4a08      	ldr	r2, [pc, #32]	; (7338 <setEnableAllChs+0x6c>)
    7316:	5ca0      	ldrb	r0, [r4, r2]
    7318:	0200      	lsls	r0, r0, #8
    731a:	4318      	orrs	r0, r3
    731c:	b2c1      	uxtb	r1, r0
    731e:	0a00      	lsrs	r0, r0, #8
    7320:	47a8      	blx	r5
#endif
#endif	
	return status;
}
    7322:	2008      	movs	r0, #8
    7324:	bd70      	pop	{r4, r5, r6, pc}
    7326:	46c0      	nop			; (mov r8, r8)
    7328:	20001b54 	.word	0x20001b54
    732c:	0000020e 	.word	0x0000020e
    7330:	0000020f 	.word	0x0000020f
    7334:	0000af89 	.word	0x0000af89
    7338:	0000020d 	.word	0x0000020d

0000733c <setJoinSuccess>:
{
    733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(RegParams.cmnParams.paramsType1.lastUsedSB == 0)
    733e:	2358      	movs	r3, #88	; 0x58
    7340:	33ff      	adds	r3, #255	; 0xff
    7342:	4a1a      	ldr	r2, [pc, #104]	; (73ac <setJoinSuccess+0x70>)
    7344:	5cd7      	ldrb	r7, [r2, r3]
    7346:	2f00      	cmp	r7, #0
    7348:	d100      	bne.n	734c <setJoinSuccess+0x10>
		lastUsedSB = 8;
    734a:	3708      	adds	r7, #8
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    734c:	1e7c      	subs	r4, r7, #1
    734e:	00e4      	lsls	r4, r4, #3
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    7350:	0026      	movs	r6, r4
    7352:	3608      	adds	r6, #8
    7354:	2300      	movs	r3, #0
			RegParams.pChParams[i].status = DISABLED;	
    7356:	4815      	ldr	r0, [pc, #84]	; (73ac <setJoinSuccess+0x70>)
    7358:	2500      	movs	r5, #0
			|| ((i >= MAX_CHANNELS_BANDWIDTH_125_AU_NA) && (i != lastUsedSB + MAX_CHANNELS_BANDWIDTH_125_AU_NA - 1)))
    735a:	373f      	adds	r7, #63	; 0x3f
    735c:	e010      	b.n	7380 <setJoinSuccess+0x44>
    735e:	429f      	cmp	r7, r3
    7360:	d00b      	beq.n	737a <setJoinSuccess+0x3e>
			RegParams.pChParams[i].status = DISABLED;	
    7362:	7902      	ldrb	r2, [r0, #4]
    7364:	7941      	ldrb	r1, [r0, #5]
    7366:	0209      	lsls	r1, r1, #8
    7368:	4311      	orrs	r1, r2
    736a:	7982      	ldrb	r2, [r0, #6]
    736c:	0412      	lsls	r2, r2, #16
    736e:	4311      	orrs	r1, r2
    7370:	79c2      	ldrb	r2, [r0, #7]
    7372:	0612      	lsls	r2, r2, #24
    7374:	430a      	orrs	r2, r1
    7376:	0059      	lsls	r1, r3, #1
    7378:	548d      	strb	r5, [r1, r2]
    737a:	3301      	adds	r3, #1
	for(uint8_t i = 0; i < (NO_OF_CH_IN_SUBBAND * (MAX_SUBBANDS + 1)); i++)
    737c:	2b48      	cmp	r3, #72	; 0x48
    737e:	d007      	beq.n	7390 <setJoinSuccess+0x54>
		if(((i < MAX_CHANNELS_BANDWIDTH_125_AU_NA) && ((i < ((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND)) 
    7380:	b2da      	uxtb	r2, r3
    7382:	2a3f      	cmp	r2, #63	; 0x3f
    7384:	d8eb      	bhi.n	735e <setJoinSuccess+0x22>
    7386:	429c      	cmp	r4, r3
    7388:	dceb      	bgt.n	7362 <setJoinSuccess+0x26>
			|| (i >= (((lastUsedSB - 1) * NO_OF_CH_IN_SUBBAND) + 8) )))
    738a:	429e      	cmp	r6, r3
    738c:	dde9      	ble.n	7362 <setJoinSuccess+0x26>
    738e:	e7f4      	b.n	737a <setJoinSuccess+0x3e>
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    7390:	4b06      	ldr	r3, [pc, #24]	; (73ac <setJoinSuccess+0x70>)
    7392:	4a07      	ldr	r2, [pc, #28]	; (73b0 <setJoinSuccess+0x74>)
    7394:	5c9a      	ldrb	r2, [r3, r2]
    7396:	4907      	ldr	r1, [pc, #28]	; (73b4 <setJoinSuccess+0x78>)
    7398:	5c58      	ldrb	r0, [r3, r1]
    739a:	0200      	lsls	r0, r0, #8
    739c:	4310      	orrs	r0, r2
    739e:	b2c1      	uxtb	r1, r0
    73a0:	0a00      	lsrs	r0, r0, #8
    73a2:	4b05      	ldr	r3, [pc, #20]	; (73b8 <setJoinSuccess+0x7c>)
    73a4:	4798      	blx	r3
}
    73a6:	2008      	movs	r0, #8
    73a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    73aa:	46c0      	nop			; (mov r8, r8)
    73ac:	20001b54 	.word	0x20001b54
    73b0:	0000020e 	.word	0x0000020e
    73b4:	0000020f 	.word	0x0000020f
    73b8:	0000af89 	.word	0x0000af89

000073bc <UpdateChannelIdStatus>:
{
    73bc:	b510      	push	{r4, lr}
	if(chid < RegParams.maxChannels || ((((1 << RegParams.band) & (ISM_NAAUBAND)) == 0) && chid >= RegParams.cmnParams.paramsType2.minNonDefChId))
    73be:	232a      	movs	r3, #42	; 0x2a
    73c0:	4a13      	ldr	r2, [pc, #76]	; (7410 <UpdateChannelIdStatus+0x54>)
    73c2:	56d3      	ldrsb	r3, [r2, r3]
    73c4:	4298      	cmp	r0, r3
    73c6:	db0b      	blt.n	73e0 <UpdateChannelIdStatus+0x24>
    73c8:	232e      	movs	r3, #46	; 0x2e
    73ca:	5cd2      	ldrb	r2, [r2, r3]
    73cc:	3b22      	subs	r3, #34	; 0x22
    73ce:	4113      	asrs	r3, r2
    73d0:	07db      	lsls	r3, r3, #31
    73d2:	d41c      	bmi.n	740e <UpdateChannelIdStatus+0x52>
    73d4:	23e0      	movs	r3, #224	; 0xe0
    73d6:	005b      	lsls	r3, r3, #1
    73d8:	4a0d      	ldr	r2, [pc, #52]	; (7410 <UpdateChannelIdStatus+0x54>)
    73da:	5cd3      	ldrb	r3, [r2, r3]
    73dc:	4283      	cmp	r3, r0
    73de:	d816      	bhi.n	740e <UpdateChannelIdStatus+0x52>
		RegParams.pChParams[chid].status = statusNew;
    73e0:	4b0b      	ldr	r3, [pc, #44]	; (7410 <UpdateChannelIdStatus+0x54>)
    73e2:	791a      	ldrb	r2, [r3, #4]
    73e4:	795c      	ldrb	r4, [r3, #5]
    73e6:	0224      	lsls	r4, r4, #8
    73e8:	4314      	orrs	r4, r2
    73ea:	799a      	ldrb	r2, [r3, #6]
    73ec:	0412      	lsls	r2, r2, #16
    73ee:	4314      	orrs	r4, r2
    73f0:	79da      	ldrb	r2, [r3, #7]
    73f2:	0612      	lsls	r2, r2, #24
    73f4:	4322      	orrs	r2, r4
    73f6:	0040      	lsls	r0, r0, #1
    73f8:	5481      	strb	r1, [r0, r2]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    73fa:	4a06      	ldr	r2, [pc, #24]	; (7414 <UpdateChannelIdStatus+0x58>)
    73fc:	5c9a      	ldrb	r2, [r3, r2]
    73fe:	4906      	ldr	r1, [pc, #24]	; (7418 <UpdateChannelIdStatus+0x5c>)
    7400:	5c58      	ldrb	r0, [r3, r1]
    7402:	0200      	lsls	r0, r0, #8
    7404:	4310      	orrs	r0, r2
    7406:	b2c1      	uxtb	r1, r0
    7408:	0a00      	lsrs	r0, r0, #8
    740a:	4b04      	ldr	r3, [pc, #16]	; (741c <UpdateChannelIdStatus+0x60>)
    740c:	4798      	blx	r3
}
    740e:	bd10      	pop	{r4, pc}
    7410:	20001b54 	.word	0x20001b54
    7414:	0000020e 	.word	0x0000020e
    7418:	0000020f 	.word	0x0000020f
    741c:	0000af89 	.word	0x0000af89

00007420 <EnableChannels2>:
{
    7420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7422:	46ce      	mov	lr, r9
    7424:	4647      	mov	r7, r8
    7426:	b580      	push	{r7, lr}
    7428:	0004      	movs	r4, r0
    742a:	000f      	movs	r7, r1
    742c:	0015      	movs	r5, r2
	for(i = startIndx; i <= endIndx; i++)
    742e:	4288      	cmp	r0, r1
    7430:	d812      	bhi.n	7458 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    7432:	2601      	movs	r6, #1
			UpdateChannelIdStatus(i, ENABLED);
    7434:	4b0a      	ldr	r3, [pc, #40]	; (7460 <EnableChannels2+0x40>)
    7436:	4699      	mov	r9, r3
			UpdateChannelIdStatus(i, DISABLED);
    7438:	4698      	mov	r8, r3
    743a:	e007      	b.n	744c <EnableChannels2+0x2c>
    743c:	2100      	movs	r1, #0
    743e:	0020      	movs	r0, r4
    7440:	47c0      	blx	r8
		chMask = chMask >> SHIFT1;
    7442:	086d      	lsrs	r5, r5, #1
	for(i = startIndx; i <= endIndx; i++)
    7444:	3401      	adds	r4, #1
    7446:	b2e4      	uxtb	r4, r4
    7448:	42a7      	cmp	r7, r4
    744a:	d305      	bcc.n	7458 <EnableChannels2+0x38>
		if((chMask & (0x0001)) == 0x0001)
    744c:	422e      	tst	r6, r5
    744e:	d0f5      	beq.n	743c <EnableChannels2+0x1c>
			UpdateChannelIdStatus(i, ENABLED);
    7450:	0031      	movs	r1, r6
    7452:	0020      	movs	r0, r4
    7454:	47c8      	blx	r9
    7456:	e7f4      	b.n	7442 <EnableChannels2+0x22>
}
    7458:	bc0c      	pop	{r2, r3}
    745a:	4690      	mov	r8, r2
    745c:	4699      	mov	r9, r3
    745e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7460:	000073bd 	.word	0x000073bd

00007464 <UpdateChannelIdStatusT2>:
{
    7464:	b570      	push	{r4, r5, r6, lr}
    7466:	000c      	movs	r4, r1
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    7468:	232a      	movs	r3, #42	; 0x2a
    746a:	4a3f      	ldr	r2, [pc, #252]	; (7568 <UpdateChannelIdStatusT2+0x104>)
    746c:	56d3      	ldrsb	r3, [r2, r3]
    746e:	4298      	cmp	r0, r3
    7470:	da17      	bge.n	74a2 <UpdateChannelIdStatusT2+0x3e>
    7472:	23e0      	movs	r3, #224	; 0xe0
    7474:	005b      	lsls	r3, r3, #1
    7476:	5cd3      	ldrb	r3, [r2, r3]
    7478:	4283      	cmp	r3, r0
    747a:	d812      	bhi.n	74a2 <UpdateChannelIdStatusT2+0x3e>
	   (RegParams.pOtherChParams[chid].parametersDefined & (FREQUENCY_DEFINED | DATA_RANGE_DEFINED)) == (FREQUENCY_DEFINED | DATA_RANGE_DEFINED))
    747c:	0045      	lsls	r5, r0, #1
    747e:	182d      	adds	r5, r5, r0
    7480:	00ad      	lsls	r5, r5, #2
    7482:	0011      	movs	r1, r2
    7484:	7a13      	ldrb	r3, [r2, #8]
    7486:	7a52      	ldrb	r2, [r2, #9]
    7488:	0212      	lsls	r2, r2, #8
    748a:	431a      	orrs	r2, r3
    748c:	7a8b      	ldrb	r3, [r1, #10]
    748e:	041b      	lsls	r3, r3, #16
    7490:	431a      	orrs	r2, r3
    7492:	7acb      	ldrb	r3, [r1, #11]
    7494:	061b      	lsls	r3, r3, #24
    7496:	4313      	orrs	r3, r2
    7498:	195b      	adds	r3, r3, r5
	if(chid < RegParams.maxChannels && chid >= RegParams.cmnParams.paramsType2.minNonDefChId &&
    749a:	7adb      	ldrb	r3, [r3, #11]
    749c:	43db      	mvns	r3, r3
    749e:	079b      	lsls	r3, r3, #30
    74a0:	d000      	beq.n	74a4 <UpdateChannelIdStatusT2+0x40>
}
    74a2:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.pChParams[chid].status = statusNew;
    74a4:	000e      	movs	r6, r1
    74a6:	790b      	ldrb	r3, [r1, #4]
    74a8:	794a      	ldrb	r2, [r1, #5]
    74aa:	0212      	lsls	r2, r2, #8
    74ac:	431a      	orrs	r2, r3
    74ae:	798b      	ldrb	r3, [r1, #6]
    74b0:	041b      	lsls	r3, r3, #16
    74b2:	431a      	orrs	r2, r3
    74b4:	79cb      	ldrb	r3, [r1, #7]
    74b6:	061b      	lsls	r3, r3, #24
    74b8:	4313      	orrs	r3, r2
    74ba:	0040      	lsls	r0, r0, #1
    74bc:	54c4      	strb	r4, [r0, r3]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    74be:	4b2b      	ldr	r3, [pc, #172]	; (756c <UpdateChannelIdStatusT2+0x108>)
    74c0:	5ccb      	ldrb	r3, [r1, r3]
    74c2:	4a2b      	ldr	r2, [pc, #172]	; (7570 <UpdateChannelIdStatusT2+0x10c>)
    74c4:	5c88      	ldrb	r0, [r1, r2]
    74c6:	0200      	lsls	r0, r0, #8
    74c8:	4318      	orrs	r0, r3
    74ca:	b2c1      	uxtb	r1, r0
    74cc:	0a00      	lsrs	r0, r0, #8
    74ce:	4b29      	ldr	r3, [pc, #164]	; (7574 <UpdateChannelIdStatusT2+0x110>)
    74d0:	4798      	blx	r3
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0 && statusNew == DISABLED)
    74d2:	232e      	movs	r3, #46	; 0x2e
    74d4:	5cf2      	ldrb	r2, [r6, r3]
    74d6:	3b2b      	subs	r3, #43	; 0x2b
    74d8:	4113      	asrs	r3, r2
    74da:	07db      	lsls	r3, r3, #31
    74dc:	d5e1      	bpl.n	74a2 <UpdateChannelIdStatusT2+0x3e>
    74de:	2c00      	cmp	r4, #0
    74e0:	d1df      	bne.n	74a2 <UpdateChannelIdStatusT2+0x3e>
			subBandId = RegParams.pOtherChParams[chid].subBandId;
    74e2:	4b21      	ldr	r3, [pc, #132]	; (7568 <UpdateChannelIdStatusT2+0x104>)
    74e4:	7a18      	ldrb	r0, [r3, #8]
    74e6:	7a5a      	ldrb	r2, [r3, #9]
    74e8:	0212      	lsls	r2, r2, #8
    74ea:	4302      	orrs	r2, r0
    74ec:	7a98      	ldrb	r0, [r3, #10]
    74ee:	0400      	lsls	r0, r0, #16
    74f0:	4302      	orrs	r2, r0
    74f2:	7ad8      	ldrb	r0, [r3, #11]
    74f4:	0600      	lsls	r0, r0, #24
    74f6:	4310      	orrs	r0, r2
    74f8:	1945      	adds	r5, r0, r5
    74fa:	7a2d      	ldrb	r5, [r5, #8]
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    74fc:	222a      	movs	r2, #42	; 0x2a
    74fe:	569c      	ldrsb	r4, [r3, r2]
    7500:	2c00      	cmp	r4, #0
    7502:	dd1c      	ble.n	753e <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    7504:	001a      	movs	r2, r3
    7506:	7919      	ldrb	r1, [r3, #4]
    7508:	795b      	ldrb	r3, [r3, #5]
    750a:	021b      	lsls	r3, r3, #8
    750c:	430b      	orrs	r3, r1
    750e:	7991      	ldrb	r1, [r2, #6]
    7510:	0409      	lsls	r1, r1, #16
    7512:	430b      	orrs	r3, r1
    7514:	79d1      	ldrb	r1, [r2, #7]
    7516:	0609      	lsls	r1, r1, #24
    7518:	4319      	orrs	r1, r3
    751a:	2300      	movs	r3, #0
    751c:	e003      	b.n	7526 <UpdateChannelIdStatusT2+0xc2>
			for(uint8_t i = 0; i < RegParams.maxChannels; i++)
    751e:	3301      	adds	r3, #1
    7520:	b2db      	uxtb	r3, r3
    7522:	42a3      	cmp	r3, r4
    7524:	da0b      	bge.n	753e <UpdateChannelIdStatusT2+0xda>
				if(RegParams.pChParams[i].status == ENABLED &&
    7526:	005a      	lsls	r2, r3, #1
    7528:	5c52      	ldrb	r2, [r2, r1]
    752a:	2a00      	cmp	r2, #0
    752c:	d0f7      	beq.n	751e <UpdateChannelIdStatusT2+0xba>
				 subBandId == RegParams.pOtherChParams[i].subBandId)
    752e:	005a      	lsls	r2, r3, #1
    7530:	18d2      	adds	r2, r2, r3
    7532:	0092      	lsls	r2, r2, #2
    7534:	1882      	adds	r2, r0, r2
				if(RegParams.pChParams[i].status == ENABLED &&
    7536:	7a12      	ldrb	r2, [r2, #8]
    7538:	42aa      	cmp	r2, r5
    753a:	d1f0      	bne.n	751e <UpdateChannelIdStatusT2+0xba>
    753c:	e7b1      	b.n	74a2 <UpdateChannelIdStatusT2+0x3e>
			RegParams.pSubBandParams[subBandId].subBandTimeout = 0;
    753e:	490a      	ldr	r1, [pc, #40]	; (7568 <UpdateChannelIdStatusT2+0x104>)
    7540:	7b0a      	ldrb	r2, [r1, #12]
    7542:	7b4b      	ldrb	r3, [r1, #13]
    7544:	021b      	lsls	r3, r3, #8
    7546:	4313      	orrs	r3, r2
    7548:	7b8a      	ldrb	r2, [r1, #14]
    754a:	0412      	lsls	r2, r2, #16
    754c:	4313      	orrs	r3, r2
    754e:	7bca      	ldrb	r2, [r1, #15]
    7550:	0612      	lsls	r2, r2, #24
    7552:	431a      	orrs	r2, r3
    7554:	006b      	lsls	r3, r5, #1
    7556:	195d      	adds	r5, r3, r5
    7558:	00ad      	lsls	r5, r5, #2
    755a:	18ad      	adds	r5, r5, r2
    755c:	2300      	movs	r3, #0
    755e:	722b      	strb	r3, [r5, #8]
    7560:	726b      	strb	r3, [r5, #9]
    7562:	72ab      	strb	r3, [r5, #10]
    7564:	72eb      	strb	r3, [r5, #11]
    7566:	e79c      	b.n	74a2 <UpdateChannelIdStatusT2+0x3e>
    7568:	20001b54 	.word	0x20001b54
    756c:	0000020e 	.word	0x0000020e
    7570:	0000020f 	.word	0x0000020f
    7574:	0000af89 	.word	0x0000af89

00007578 <setChannelIdStatusT2>:
{
    7578:	b570      	push	{r4, r5, r6, lr}
    757a:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    757c:	780d      	ldrb	r5, [r1, #0]
    757e:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    7580:	a901      	add	r1, sp, #4
    7582:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    7584:	2300      	movs	r3, #0
    7586:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    7588:	2015      	movs	r0, #21
    758a:	4b0c      	ldr	r3, [pc, #48]	; (75bc <setChannelIdStatusT2+0x44>)
    758c:	4798      	blx	r3
    758e:	0004      	movs	r4, r0
    7590:	2808      	cmp	r0, #8
    7592:	d003      	beq.n	759c <setChannelIdStatusT2+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    7594:	240a      	movs	r4, #10
}
    7596:	0020      	movs	r0, r4
    7598:	b002      	add	sp, #8
    759a:	bd70      	pop	{r4, r5, r6, pc}
		if(RegParams.band ==  ISM_IND865)
    759c:	232e      	movs	r3, #46	; 0x2e
    759e:	4a08      	ldr	r2, [pc, #32]	; (75c0 <setChannelIdStatusT2+0x48>)
    75a0:	5cd3      	ldrb	r3, [r2, r3]
    75a2:	2b0f      	cmp	r3, #15
    75a4:	d004      	beq.n	75b0 <setChannelIdStatusT2+0x38>
		    UpdateChannelIdStatusT2(updateChid.channelIndex,updateChid.statusNew);
    75a6:	0031      	movs	r1, r6
    75a8:	0028      	movs	r0, r5
    75aa:	4b06      	ldr	r3, [pc, #24]	; (75c4 <setChannelIdStatusT2+0x4c>)
    75ac:	4798      	blx	r3
    75ae:	e7f2      	b.n	7596 <setChannelIdStatusT2+0x1e>
			UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    75b0:	0031      	movs	r1, r6
    75b2:	0028      	movs	r0, r5
    75b4:	4b04      	ldr	r3, [pc, #16]	; (75c8 <setChannelIdStatusT2+0x50>)
    75b6:	4798      	blx	r3
    75b8:	e7ed      	b.n	7596 <setChannelIdStatusT2+0x1e>
    75ba:	46c0      	nop			; (mov r8, r8)
    75bc:	00006cad 	.word	0x00006cad
    75c0:	20001b54 	.word	0x20001b54
    75c4:	00007465 	.word	0x00007465
    75c8:	000073bd 	.word	0x000073bd

000075cc <UpdateChannelIdStatusT4>:
{
    75cc:	b570      	push	{r4, r5, r6, lr}
    75ce:	0004      	movs	r4, r0
    75d0:	000d      	movs	r5, r1
	RegParams.pChParams[chid].status = statusNew;
    75d2:	4923      	ldr	r1, [pc, #140]	; (7660 <UpdateChannelIdStatusT4+0x94>)
    75d4:	790b      	ldrb	r3, [r1, #4]
    75d6:	794a      	ldrb	r2, [r1, #5]
    75d8:	0212      	lsls	r2, r2, #8
    75da:	431a      	orrs	r2, r3
    75dc:	798b      	ldrb	r3, [r1, #6]
    75de:	041b      	lsls	r3, r3, #16
    75e0:	431a      	orrs	r2, r3
    75e2:	79cb      	ldrb	r3, [r1, #7]
    75e4:	061b      	lsls	r3, r3, #24
    75e6:	4313      	orrs	r3, r2
    75e8:	0042      	lsls	r2, r0, #1
    75ea:	54d5      	strb	r5, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    75ec:	4b1d      	ldr	r3, [pc, #116]	; (7664 <UpdateChannelIdStatusT4+0x98>)
    75ee:	5ccb      	ldrb	r3, [r1, r3]
    75f0:	4a1d      	ldr	r2, [pc, #116]	; (7668 <UpdateChannelIdStatusT4+0x9c>)
    75f2:	5c88      	ldrb	r0, [r1, r2]
    75f4:	0200      	lsls	r0, r0, #8
    75f6:	4318      	orrs	r0, r3
    75f8:	b2c1      	uxtb	r1, r0
    75fa:	0a00      	lsrs	r0, r0, #8
    75fc:	4b1b      	ldr	r3, [pc, #108]	; (766c <UpdateChannelIdStatusT4+0xa0>)
    75fe:	4798      	blx	r3
	if(statusNew == ENABLED)
    7600:	2d00      	cmp	r5, #0
    7602:	d029      	beq.n	7658 <UpdateChannelIdStatusT4+0x8c>
		if(RegParams.pOtherChParams[chid].ulfrequency < FREQ_922100KHZ)
    7604:	4a16      	ldr	r2, [pc, #88]	; (7660 <UpdateChannelIdStatusT4+0x94>)
    7606:	7a10      	ldrb	r0, [r2, #8]
    7608:	7a53      	ldrb	r3, [r2, #9]
    760a:	021b      	lsls	r3, r3, #8
    760c:	4303      	orrs	r3, r0
    760e:	7a90      	ldrb	r0, [r2, #10]
    7610:	0400      	lsls	r0, r0, #16
    7612:	4303      	orrs	r3, r0
    7614:	7ad0      	ldrb	r0, [r2, #11]
    7616:	0600      	lsls	r0, r0, #24
    7618:	4318      	orrs	r0, r3
    761a:	0063      	lsls	r3, r4, #1
    761c:	191c      	adds	r4, r3, r4
    761e:	00a4      	lsls	r4, r4, #2
    7620:	1900      	adds	r0, r0, r4
    7622:	7803      	ldrb	r3, [r0, #0]
    7624:	7842      	ldrb	r2, [r0, #1]
    7626:	0212      	lsls	r2, r2, #8
    7628:	431a      	orrs	r2, r3
    762a:	7883      	ldrb	r3, [r0, #2]
    762c:	041b      	lsls	r3, r3, #16
    762e:	431a      	orrs	r2, r3
    7630:	78c3      	ldrb	r3, [r0, #3]
    7632:	061b      	lsls	r3, r3, #24
    7634:	4313      	orrs	r3, r2
    7636:	4a0e      	ldr	r2, [pc, #56]	; (7670 <UpdateChannelIdStatusT4+0xa4>)
    7638:	4293      	cmp	r3, r2
    763a:	d80e      	bhi.n	765a <UpdateChannelIdStatusT4+0x8e>
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_LF;
    763c:	230a      	movs	r3, #10
    763e:	7283      	strb	r3, [r0, #10]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    7640:	4b07      	ldr	r3, [pc, #28]	; (7660 <UpdateChannelIdStatusT4+0x94>)
    7642:	2284      	movs	r2, #132	; 0x84
    7644:	0092      	lsls	r2, r2, #2
    7646:	5c9a      	ldrb	r2, [r3, r2]
    7648:	490a      	ldr	r1, [pc, #40]	; (7674 <UpdateChannelIdStatusT4+0xa8>)
    764a:	5c58      	ldrb	r0, [r3, r1]
    764c:	0200      	lsls	r0, r0, #8
    764e:	4310      	orrs	r0, r2
    7650:	b2c1      	uxtb	r1, r0
    7652:	0a00      	lsrs	r0, r0, #8
    7654:	4b05      	ldr	r3, [pc, #20]	; (766c <UpdateChannelIdStatusT4+0xa0>)
    7656:	4798      	blx	r3
}
    7658:	bd70      	pop	{r4, r5, r6, pc}
			RegParams.pOtherChParams[chid].maxEIRP = DEFAULT_EIRP_HF;
    765a:	230e      	movs	r3, #14
    765c:	7283      	strb	r3, [r0, #10]
    765e:	e7ef      	b.n	7640 <UpdateChannelIdStatusT4+0x74>
    7660:	20001b54 	.word	0x20001b54
    7664:	0000020e 	.word	0x0000020e
    7668:	0000020f 	.word	0x0000020f
    766c:	0000af89 	.word	0x0000af89
    7670:	36f6211f 	.word	0x36f6211f
    7674:	00000211 	.word	0x00000211

00007678 <UpdateChannelIdStatusT3>:
{
    7678:	b570      	push	{r4, r5, r6, lr}
    767a:	0005      	movs	r5, r0
	RegParams.pChParams[chid].status = statusNew;
    767c:	4c17      	ldr	r4, [pc, #92]	; (76dc <UpdateChannelIdStatusT3+0x64>)
    767e:	7923      	ldrb	r3, [r4, #4]
    7680:	7962      	ldrb	r2, [r4, #5]
    7682:	0212      	lsls	r2, r2, #8
    7684:	431a      	orrs	r2, r3
    7686:	79a3      	ldrb	r3, [r4, #6]
    7688:	041b      	lsls	r3, r3, #16
    768a:	431a      	orrs	r2, r3
    768c:	79e3      	ldrb	r3, [r4, #7]
    768e:	061b      	lsls	r3, r3, #24
    7690:	4313      	orrs	r3, r2
    7692:	0042      	lsls	r2, r0, #1
    7694:	54d1      	strb	r1, [r2, r3]
	PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    7696:	4b12      	ldr	r3, [pc, #72]	; (76e0 <UpdateChannelIdStatusT3+0x68>)
    7698:	5ce3      	ldrb	r3, [r4, r3]
    769a:	4a12      	ldr	r2, [pc, #72]	; (76e4 <UpdateChannelIdStatusT3+0x6c>)
    769c:	5ca0      	ldrb	r0, [r4, r2]
    769e:	0200      	lsls	r0, r0, #8
    76a0:	4318      	orrs	r0, r3
    76a2:	b2c1      	uxtb	r1, r0
    76a4:	0a00      	lsrs	r0, r0, #8
    76a6:	4e10      	ldr	r6, [pc, #64]	; (76e8 <UpdateChannelIdStatusT3+0x70>)
    76a8:	47b0      	blx	r6
	PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    76aa:	2384      	movs	r3, #132	; 0x84
    76ac:	009b      	lsls	r3, r3, #2
    76ae:	5ce3      	ldrb	r3, [r4, r3]
    76b0:	4a0e      	ldr	r2, [pc, #56]	; (76ec <UpdateChannelIdStatusT3+0x74>)
    76b2:	5ca0      	ldrb	r0, [r4, r2]
    76b4:	0200      	lsls	r0, r0, #8
    76b6:	4318      	orrs	r0, r3
    76b8:	b2c1      	uxtb	r1, r0
    76ba:	0a00      	lsrs	r0, r0, #8
    76bc:	47b0      	blx	r6
	if( RegParams.band == ISM_JPN923)
    76be:	232e      	movs	r3, #46	; 0x2e
    76c0:	5ce3      	ldrb	r3, [r4, r3]
    76c2:	2b05      	cmp	r3, #5
    76c4:	d000      	beq.n	76c8 <UpdateChannelIdStatusT3+0x50>
}
    76c6:	bd70      	pop	{r4, r5, r6, pc}
		RegParams.cmnParams.paramsType2.channelTimer[chid] = 0;
    76c8:	3558      	adds	r5, #88	; 0x58
    76ca:	00ad      	lsls	r5, r5, #2
    76cc:	4b03      	ldr	r3, [pc, #12]	; (76dc <UpdateChannelIdStatusT3+0x64>)
    76ce:	195d      	adds	r5, r3, r5
    76d0:	2300      	movs	r3, #0
    76d2:	722b      	strb	r3, [r5, #8]
    76d4:	726b      	strb	r3, [r5, #9]
    76d6:	72ab      	strb	r3, [r5, #10]
    76d8:	72eb      	strb	r3, [r5, #11]
}
    76da:	e7f4      	b.n	76c6 <UpdateChannelIdStatusT3+0x4e>
    76dc:	20001b54 	.word	0x20001b54
    76e0:	0000020e 	.word	0x0000020e
    76e4:	0000020f 	.word	0x0000020f
    76e8:	0000af89 	.word	0x0000af89
    76ec:	00000211 	.word	0x00000211

000076f0 <setChannelIdStatusT3>:
{
    76f0:	b570      	push	{r4, r5, r6, lr}
    76f2:	b082      	sub	sp, #8
	memcpy(&updateChid,attrInput,sizeof(UpdateChId_t));
    76f4:	780d      	ldrb	r5, [r1, #0]
    76f6:	784e      	ldrb	r6, [r1, #1]
	valChid.channelIndex = updateChid.channelIndex;
    76f8:	a901      	add	r1, sp, #4
    76fa:	700d      	strb	r5, [r1, #0]
	valChid.allowedForDefaultChannels = ALL_CHANNELS;
    76fc:	2301      	movs	r3, #1
    76fe:	704b      	strb	r3, [r1, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &valChid) == LORAWAN_SUCCESS)
    7700:	2015      	movs	r0, #21
    7702:	4b0c      	ldr	r3, [pc, #48]	; (7734 <setChannelIdStatusT3+0x44>)
    7704:	4798      	blx	r3
    7706:	0004      	movs	r4, r0
    7708:	2808      	cmp	r0, #8
    770a:	d003      	beq.n	7714 <setChannelIdStatusT3+0x24>
		retVal = LORAWAN_INVALID_PARAMETER;
    770c:	240a      	movs	r4, #10
}
    770e:	0020      	movs	r0, r4
    7710:	b002      	add	sp, #8
    7712:	bd70      	pop	{r4, r5, r6, pc}
		if( RegParams.band == ISM_KR920)
    7714:	232e      	movs	r3, #46	; 0x2e
    7716:	4a08      	ldr	r2, [pc, #32]	; (7738 <setChannelIdStatusT3+0x48>)
    7718:	5cd3      	ldrb	r3, [r2, r3]
    771a:	2b04      	cmp	r3, #4
    771c:	d004      	beq.n	7728 <setChannelIdStatusT3+0x38>
		    UpdateChannelIdStatusT3(updateChid.channelIndex,updateChid.statusNew);
    771e:	0031      	movs	r1, r6
    7720:	0028      	movs	r0, r5
    7722:	4b06      	ldr	r3, [pc, #24]	; (773c <setChannelIdStatusT3+0x4c>)
    7724:	4798      	blx	r3
    7726:	e7f2      	b.n	770e <setChannelIdStatusT3+0x1e>
			UpdateChannelIdStatusT4(updateChid.channelIndex,updateChid.statusNew);
    7728:	0031      	movs	r1, r6
    772a:	0028      	movs	r0, r5
    772c:	4b04      	ldr	r3, [pc, #16]	; (7740 <setChannelIdStatusT3+0x50>)
    772e:	4798      	blx	r3
    7730:	e7ed      	b.n	770e <setChannelIdStatusT3+0x1e>
    7732:	46c0      	nop			; (mov r8, r8)
    7734:	00006cad 	.word	0x00006cad
    7738:	20001b54 	.word	0x20001b54
    773c:	00007679 	.word	0x00007679
    7740:	000075cd 	.word	0x000075cd

00007744 <LORAREG_GetAttr_JoinDutyCycleRemainingTime>:
{
    7744:	b530      	push	{r4, r5, lr}
    7746:	b083      	sub	sp, #12
    7748:	0014      	movs	r4, r2
	uint32_t timeremaining =0;
    774a:	2300      	movs	r3, #0
    774c:	9301      	str	r3, [sp, #4]
	if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    774e:	4920      	ldr	r1, [pc, #128]	; (77d0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    7750:	7d0b      	ldrb	r3, [r1, #20]
    7752:	7d4a      	ldrb	r2, [r1, #21]
    7754:	0212      	lsls	r2, r2, #8
    7756:	431a      	orrs	r2, r3
    7758:	7d8b      	ldrb	r3, [r1, #22]
    775a:	041b      	lsls	r3, r3, #16
    775c:	431a      	orrs	r2, r3
    775e:	7dcb      	ldrb	r3, [r1, #23]
    7760:	061b      	lsls	r3, r3, #24
    7762:	4313      	orrs	r3, r2
    7764:	7a18      	ldrb	r0, [r3, #8]
    7766:	4b1b      	ldr	r3, [pc, #108]	; (77d4 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x90>)
    7768:	4798      	blx	r3
    776a:	2800      	cmp	r0, #0
    776c:	d107      	bne.n	777e <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x3a>
	memcpy(attrOutput,&timeremaining,sizeof(uint32_t));
    776e:	2204      	movs	r2, #4
    7770:	a901      	add	r1, sp, #4
    7772:	0020      	movs	r0, r4
    7774:	4b18      	ldr	r3, [pc, #96]	; (77d8 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x94>)
    7776:	4798      	blx	r3
}
    7778:	2008      	movs	r0, #8
    777a:	b003      	add	sp, #12
    777c:	bd30      	pop	{r4, r5, pc}
	timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    777e:	4d14      	ldr	r5, [pc, #80]	; (77d0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x8c>)
    7780:	7d2b      	ldrb	r3, [r5, #20]
    7782:	7d6a      	ldrb	r2, [r5, #21]
    7784:	0212      	lsls	r2, r2, #8
    7786:	431a      	orrs	r2, r3
    7788:	7dab      	ldrb	r3, [r5, #22]
    778a:	041b      	lsls	r3, r3, #16
    778c:	431a      	orrs	r2, r3
    778e:	7deb      	ldrb	r3, [r5, #23]
    7790:	061b      	lsls	r3, r3, #24
    7792:	4313      	orrs	r3, r2
    7794:	7a18      	ldrb	r0, [r3, #8]
    7796:	4b11      	ldr	r3, [pc, #68]	; (77dc <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x98>)
    7798:	4798      	blx	r3
	timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    779a:	7d2b      	ldrb	r3, [r5, #20]
    779c:	7d6a      	ldrb	r2, [r5, #21]
    779e:	0212      	lsls	r2, r2, #8
    77a0:	431a      	orrs	r2, r3
    77a2:	7dab      	ldrb	r3, [r5, #22]
    77a4:	041b      	lsls	r3, r3, #16
    77a6:	431a      	orrs	r2, r3
    77a8:	7deb      	ldrb	r3, [r5, #23]
    77aa:	061b      	lsls	r3, r3, #24
    77ac:	4313      	orrs	r3, r2
    77ae:	791d      	ldrb	r5, [r3, #4]
    77b0:	795a      	ldrb	r2, [r3, #5]
    77b2:	0212      	lsls	r2, r2, #8
    77b4:	432a      	orrs	r2, r5
    77b6:	799d      	ldrb	r5, [r3, #6]
    77b8:	042d      	lsls	r5, r5, #16
    77ba:	432a      	orrs	r2, r5
    77bc:	79dd      	ldrb	r5, [r3, #7]
    77be:	062d      	lsls	r5, r5, #24
    77c0:	4315      	orrs	r5, r2
	timeremaining = US_TO_MS(SwTimerReadValue (RegParams.pJoinDutyCycleTimer->timerId));
    77c2:	21fa      	movs	r1, #250	; 0xfa
    77c4:	0089      	lsls	r1, r1, #2
    77c6:	4b06      	ldr	r3, [pc, #24]	; (77e0 <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x9c>)
    77c8:	4798      	blx	r3
	timeremaining = timeremaining + RegParams.pJoinDutyCycleTimer->remainingtime;
    77ca:	182d      	adds	r5, r5, r0
    77cc:	9501      	str	r5, [sp, #4]
    77ce:	e7ce      	b.n	776e <LORAREG_GetAttr_JoinDutyCycleRemainingTime+0x2a>
    77d0:	20001b54 	.word	0x20001b54
    77d4:	0000c0c1 	.word	0x0000c0c1
    77d8:	00015f45 	.word	0x00015f45
    77dc:	0000c0d5 	.word	0x0000c0d5
    77e0:	00012d11 	.word	0x00012d11

000077e4 <LORAREG_GetAttr_Rx1WindowparamsType1>:
{
    77e4:	b510      	push	{r4, lr}
    77e6:	b082      	sub	sp, #8
    77e8:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    77ea:	784c      	ldrb	r4, [r1, #1]
    77ec:	788b      	ldrb	r3, [r1, #2]
	if(rx1WindowParamReq->joining)
    77ee:	780a      	ldrb	r2, [r1, #0]
    77f0:	2a00      	cmp	r2, #0
    77f2:	d007      	beq.n	7804 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		if (RegParams.lastUsedChannelIndex <= MAX_CHANNELS_BANDWIDTH_125_AU_NA) 
    77f4:	232f      	movs	r3, #47	; 0x2f
    77f6:	4a23      	ldr	r2, [pc, #140]	; (7884 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    77f8:	5cd3      	ldrb	r3, [r2, r3]
    77fa:	2b40      	cmp	r3, #64	; 0x40
    77fc:	d819      	bhi.n	7832 <LORAREG_GetAttr_Rx1WindowparamsType1+0x4e>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.minTxDR;
    77fe:	2350      	movs	r3, #80	; 0x50
    7800:	33ff      	adds	r3, #255	; 0xff
    7802:	5cd3      	ldrb	r3, [r2, r3]
		            RegParams.cmnParams.paramsType1.RxParamWindowOffset1 - rx1WindowParamReq->drOffset;
    7804:	491f      	ldr	r1, [pc, #124]	; (7884 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    7806:	2256      	movs	r2, #86	; 0x56
    7808:	32ff      	adds	r2, #255	; 0xff
    780a:	5c8a      	ldrb	r2, [r1, r2]
    780c:	1b12      	subs	r2, r2, r4
    780e:	189b      	adds	r3, r3, r2
    7810:	b2db      	uxtb	r3, r3
	rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr + 
    7812:	466a      	mov	r2, sp
    7814:	7113      	strb	r3, [r2, #4]
	if(rx1WindowParams->rx1Dr > RegParams.cmnParams.paramsType1.maxRxDR)
    7816:	22a9      	movs	r2, #169	; 0xa9
    7818:	0052      	lsls	r2, r2, #1
    781a:	5c8a      	ldrb	r2, [r1, r2]
    781c:	4293      	cmp	r3, r2
    781e:	d80d      	bhi.n	783c <LORAREG_GetAttr_Rx1WindowparamsType1+0x58>
	else if(rx1WindowParams->rx1Dr < RegParams.cmnParams.paramsType1.minRxDR)
    7820:	2252      	movs	r2, #82	; 0x52
    7822:	32ff      	adds	r2, #255	; 0xff
    7824:	4917      	ldr	r1, [pc, #92]	; (7884 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    7826:	5c8a      	ldrb	r2, [r1, r2]
    7828:	4293      	cmp	r3, r2
    782a:	d209      	bcs.n	7840 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.minRxDR;
    782c:	466b      	mov	r3, sp
    782e:	711a      	strb	r2, [r3, #4]
    7830:	e006      	b.n	7840 <LORAREG_GetAttr_Rx1WindowparamsType1+0x5c>
			rx1WindowParamReq->currDr = RegParams.cmnParams.paramsType1.maxTxDR;
    7832:	23a8      	movs	r3, #168	; 0xa8
    7834:	005b      	lsls	r3, r3, #1
    7836:	4a13      	ldr	r2, [pc, #76]	; (7884 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    7838:	5cd3      	ldrb	r3, [r2, r3]
    783a:	e7e3      	b.n	7804 <LORAREG_GetAttr_Rx1WindowparamsType1+0x20>
		rx1WindowParams->rx1Dr = RegParams.cmnParams.paramsType1.maxRxDR;
    783c:	466b      	mov	r3, sp
    783e:	711a      	strb	r2, [r3, #4]
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    7840:	4910      	ldr	r1, [pc, #64]	; (7884 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa0>)
    7842:	232f      	movs	r3, #47	; 0x2f
    7844:	5ccc      	ldrb	r4, [r1, r3]
	channelFrequency = RegParams.cmnParams.paramsType1.DownStreamCh0Freq + FREQ_600KHZ * channelIndex;
    7846:	3b28      	subs	r3, #40	; 0x28
    7848:	4023      	ands	r3, r4
    784a:	4c0f      	ldr	r4, [pc, #60]	; (7888 <LORAREG_GetAttr_Rx1WindowparamsType1+0xa4>)
    784c:	435c      	muls	r4, r3
    784e:	234c      	movs	r3, #76	; 0x4c
    7850:	33ff      	adds	r3, #255	; 0xff
    7852:	5ccb      	ldrb	r3, [r1, r3]
    7854:	22a6      	movs	r2, #166	; 0xa6
    7856:	0052      	lsls	r2, r2, #1
    7858:	5c8a      	ldrb	r2, [r1, r2]
    785a:	0212      	lsls	r2, r2, #8
    785c:	4313      	orrs	r3, r2
    785e:	224e      	movs	r2, #78	; 0x4e
    7860:	32ff      	adds	r2, #255	; 0xff
    7862:	5c8a      	ldrb	r2, [r1, r2]
    7864:	0412      	lsls	r2, r2, #16
    7866:	431a      	orrs	r2, r3
    7868:	23a7      	movs	r3, #167	; 0xa7
    786a:	005b      	lsls	r3, r3, #1
    786c:	5ccb      	ldrb	r3, [r1, r3]
    786e:	061b      	lsls	r3, r3, #24
    7870:	4313      	orrs	r3, r2
    7872:	18e3      	adds	r3, r4, r3
	rx1WindowParams->rx1Freq = GenerateFrequencyReception(RegParams.lastUsedChannelIndex % 8);
    7874:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    7876:	2208      	movs	r2, #8
    7878:	4669      	mov	r1, sp
    787a:	4b04      	ldr	r3, [pc, #16]	; (788c <LORAREG_GetAttr_Rx1WindowparamsType1+0xa8>)
    787c:	4798      	blx	r3
}
    787e:	2008      	movs	r0, #8
    7880:	b002      	add	sp, #8
    7882:	bd10      	pop	{r4, pc}
    7884:	20001b54 	.word	0x20001b54
    7888:	000927c0 	.word	0x000927c0
    788c:	00015f45 	.word	0x00015f45

00007890 <LORAREG_GetAttr_DRangeChBandT1>:
{
    7890:	b5f0      	push	{r4, r5, r6, r7, lr}
    7892:	46c6      	mov	lr, r8
    7894:	b500      	push	{lr}
    7896:	b084      	sub	sp, #16
    7898:	9201      	str	r2, [sp, #4]
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    789a:	2204      	movs	r2, #4
    789c:	a803      	add	r0, sp, #12
    789e:	4b43      	ldr	r3, [pc, #268]	; (79ac <LORAREG_GetAttr_DRangeChBandT1+0x11c>)
    78a0:	4798      	blx	r3
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, (void *)&bandDrReq.chnlMaskCntl)	!= LORAWAN_SUCCESS)
    78a2:	a903      	add	r1, sp, #12
    78a4:	201b      	movs	r0, #27
    78a6:	4b42      	ldr	r3, [pc, #264]	; (79b0 <LORAREG_GetAttr_DRangeChBandT1+0x120>)
    78a8:	4798      	blx	r3
    78aa:	2808      	cmp	r0, #8
    78ac:	d004      	beq.n	78b8 <LORAREG_GetAttr_DRangeChBandT1+0x28>
		result = LORAWAN_INVALID_PARAMETER;
    78ae:	200a      	movs	r0, #10
}
    78b0:	b004      	add	sp, #16
    78b2:	bc04      	pop	{r2}
    78b4:	4690      	mov	r8, r2
    78b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		chBandDr = getChBandDrT1(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    78b8:	aa03      	add	r2, sp, #12
    78ba:	7813      	ldrb	r3, [r2, #0]
    78bc:	8857      	ldrh	r7, [r2, #2]
	if( RegParams.band == ISM_AU915)
    78be:	222e      	movs	r2, #46	; 0x2e
    78c0:	493c      	ldr	r1, [pc, #240]	; (79b4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    78c2:	5c89      	ldrb	r1, [r1, r2]
		auxMinDataRate = DR6;
    78c4:	3903      	subs	r1, #3
    78c6:	1e4a      	subs	r2, r1, #1
    78c8:	4191      	sbcs	r1, r2
    78ca:	3106      	adds	r1, #6
	switch (chMaskCntl)
    78cc:	2b07      	cmp	r3, #7
    78ce:	d869      	bhi.n	79a4 <LORAREG_GetAttr_DRangeChBandT1+0x114>
    78d0:	009a      	lsls	r2, r3, #2
    78d2:	4d39      	ldr	r5, [pc, #228]	; (79b8 <LORAREG_GetAttr_DRangeChBandT1+0x128>)
    78d4:	58aa      	ldr	r2, [r5, r2]
    78d6:	4697      	mov	pc, r2
			startingIndex = chMaskCntl << SHIFT4;
    78d8:	011b      	lsls	r3, r3, #4
    78da:	b2db      	uxtb	r3, r3
			endingIndex = startingIndex + 16;
    78dc:	001a      	movs	r2, r3
    78de:	3210      	adds	r2, #16
    78e0:	b2d2      	uxtb	r2, r2
    78e2:	4690      	mov	r8, r2
			for (i = startingIndex; i < endingIndex; i++)
    78e4:	4293      	cmp	r3, r2
    78e6:	d25f      	bcs.n	79a8 <LORAREG_GetAttr_DRangeChBandT1+0x118>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    78e8:	4e32      	ldr	r6, [pc, #200]	; (79b4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    78ea:	7935      	ldrb	r5, [r6, #4]
    78ec:	7972      	ldrb	r2, [r6, #5]
    78ee:	0212      	lsls	r2, r2, #8
    78f0:	4315      	orrs	r5, r2
    78f2:	79b2      	ldrb	r2, [r6, #6]
    78f4:	0412      	lsls	r2, r2, #16
    78f6:	432a      	orrs	r2, r5
    78f8:	79f5      	ldrb	r5, [r6, #7]
    78fa:	062d      	lsls	r5, r5, #24
    78fc:	4315      	orrs	r5, r2
    78fe:	46ac      	mov	ip, r5
    7900:	2500      	movs	r5, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    7902:	2401      	movs	r4, #1
    7904:	e00c      	b.n	7920 <LORAREG_GetAttr_DRangeChBandT1+0x90>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    7906:	0011      	movs	r1, r2
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    7908:	7872      	ldrb	r2, [r6, #1]
    790a:	0912      	lsrs	r2, r2, #4
    790c:	42aa      	cmp	r2, r5
    790e:	dd02      	ble.n	7916 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    7910:	423c      	tst	r4, r7
    7912:	d011      	beq.n	7938 <LORAREG_GetAttr_DRangeChBandT1+0xa8>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    7914:	0015      	movs	r5, r2
				auxChannelMask = auxChannelMask >> SHIFT1;
    7916:	087f      	lsrs	r7, r7, #1
			for (i = startingIndex; i < endingIndex; i++)
    7918:	3301      	adds	r3, #1
    791a:	b2db      	uxtb	r3, r3
    791c:	4598      	cmp	r8, r3
    791e:	d013      	beq.n	7948 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    7920:	005e      	lsls	r6, r3, #1
    7922:	4466      	add	r6, ip
    7924:	7872      	ldrb	r2, [r6, #1]
    7926:	0712      	lsls	r2, r2, #28
    7928:	0f12      	lsrs	r2, r2, #28
    792a:	428a      	cmp	r2, r1
    792c:	daec      	bge.n	7908 <LORAREG_GetAttr_DRangeChBandT1+0x78>
    792e:	423c      	tst	r4, r7
    7930:	d1e9      	bne.n	7906 <LORAREG_GetAttr_DRangeChBandT1+0x76>
    7932:	2f00      	cmp	r7, #0
    7934:	d1ef      	bne.n	7916 <LORAREG_GetAttr_DRangeChBandT1+0x86>
    7936:	e7e6      	b.n	7906 <LORAREG_GetAttr_DRangeChBandT1+0x76>
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && (((auxChannelMask & 0x0001) == 0x0001) || (auxChannelMask == 0)))
    7938:	2f00      	cmp	r7, #0
    793a:	d0eb      	beq.n	7914 <LORAREG_GetAttr_DRangeChBandT1+0x84>
    793c:	e7eb      	b.n	7916 <LORAREG_GetAttr_DRangeChBandT1+0x86>
			auxMinDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    793e:	23a8      	movs	r3, #168	; 0xa8
    7940:	005b      	lsls	r3, r3, #1
    7942:	4a1c      	ldr	r2, [pc, #112]	; (79b4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    7944:	5cd1      	ldrb	r1, [r2, r3]
			auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    7946:	000d      	movs	r5, r1
    7948:	012d      	lsls	r5, r5, #4
    794a:	230f      	movs	r3, #15
    794c:	4019      	ands	r1, r3
    794e:	430d      	orrs	r5, r1
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    7950:	9b01      	ldr	r3, [sp, #4]
    7952:	701d      	strb	r5, [r3, #0]
    7954:	e7ac      	b.n	78b0 <LORAREG_GetAttr_DRangeChBandT1+0x20>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    7956:	4d17      	ldr	r5, [pc, #92]	; (79b4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    7958:	792b      	ldrb	r3, [r5, #4]
    795a:	796a      	ldrb	r2, [r5, #5]
    795c:	0212      	lsls	r2, r2, #8
    795e:	431a      	orrs	r2, r3
    7960:	79ab      	ldrb	r3, [r5, #6]
    7962:	041b      	lsls	r3, r3, #16
    7964:	431a      	orrs	r2, r3
    7966:	79eb      	ldrb	r3, [r5, #7]
    7968:	061b      	lsls	r3, r3, #24
    796a:	4313      	orrs	r3, r2
    796c:	001a      	movs	r2, r3
    796e:	3380      	adds	r3, #128	; 0x80
    7970:	001c      	movs	r4, r3
    7972:	2500      	movs	r5, #0
    7974:	e002      	b.n	797c <LORAREG_GetAttr_DRangeChBandT1+0xec>
    7976:	3202      	adds	r2, #2
			for (i = 0; i < 64; i++)
    7978:	42a2      	cmp	r2, r4
    797a:	d00c      	beq.n	7996 <LORAREG_GetAttr_DRangeChBandT1+0x106>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    797c:	0016      	movs	r6, r2
    797e:	7853      	ldrb	r3, [r2, #1]
    7980:	071b      	lsls	r3, r3, #28
    7982:	0f1b      	lsrs	r3, r3, #28
    7984:	428b      	cmp	r3, r1
    7986:	da00      	bge.n	798a <LORAREG_GetAttr_DRangeChBandT1+0xfa>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    7988:	0019      	movs	r1, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    798a:	7873      	ldrb	r3, [r6, #1]
    798c:	091b      	lsrs	r3, r3, #4
    798e:	42ab      	cmp	r3, r5
    7990:	ddf1      	ble.n	7976 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    7992:	001d      	movs	r5, r3
    7994:	e7ef      	b.n	7976 <LORAREG_GetAttr_DRangeChBandT1+0xe6>
			if (channelMask != 0)    // if there is at least one channel enabled with DR4
    7996:	2f00      	cmp	r7, #0
    7998:	d0d6      	beq.n	7948 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
				auxMaxDataRate = RegParams.cmnParams.paramsType1.maxTxDR;
    799a:	23a8      	movs	r3, #168	; 0xa8
    799c:	005b      	lsls	r3, r3, #1
    799e:	4a05      	ldr	r2, [pc, #20]	; (79b4 <LORAREG_GetAttr_DRangeChBandT1+0x124>)
    79a0:	5cd5      	ldrb	r5, [r2, r3]
    79a2:	e7d1      	b.n	7948 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
	uint8_t auxMinDataRate = DR7, auxMaxDataRate = DR0, i;
    79a4:	2500      	movs	r5, #0
    79a6:	e7cf      	b.n	7948 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    79a8:	2500      	movs	r5, #0
    79aa:	e7cd      	b.n	7948 <LORAREG_GetAttr_DRangeChBandT1+0xb8>
    79ac:	00015f45 	.word	0x00015f45
    79b0:	00006d99 	.word	0x00006d99
    79b4:	20001b54 	.word	0x20001b54
    79b8:	0001dc00 	.word	0x0001dc00

000079bc <LORAREG_GetAttr_DefRx2Freq>:
{
    79bc:	b510      	push	{r4, lr}
    79be:	0010      	movs	r0, r2
	memcpy(attrOutput,&RegParams.DefRx2Freq,sizeof(uint32_t));
    79c0:	2204      	movs	r2, #4
    79c2:	4902      	ldr	r1, [pc, #8]	; (79cc <LORAREG_GetAttr_DefRx2Freq+0x10>)
    79c4:	4b02      	ldr	r3, [pc, #8]	; (79d0 <LORAREG_GetAttr_DefRx2Freq+0x14>)
    79c6:	4798      	blx	r3
}
    79c8:	2008      	movs	r0, #8
    79ca:	bd10      	pop	{r4, pc}
    79cc:	20001b70 	.word	0x20001b70
    79d0:	00015f45 	.word	0x00015f45

000079d4 <LORAREG_GetAttr_DlFrequency>:
{
    79d4:	b510      	push	{r4, lr}
    79d6:	0013      	movs	r3, r2
	channelId = *(uint8_t *)attrInput;
    79d8:	780a      	ldrb	r2, [r1, #0]
	if (channelId > RegParams.maxChannels)
    79da:	212a      	movs	r1, #42	; 0x2a
    79dc:	480d      	ldr	r0, [pc, #52]	; (7a14 <LORAREG_GetAttr_DlFrequency+0x40>)
    79de:	5641      	ldrsb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    79e0:	200a      	movs	r0, #10
	if (channelId > RegParams.maxChannels)
    79e2:	428a      	cmp	r2, r1
    79e4:	dd00      	ble.n	79e8 <LORAREG_GetAttr_DlFrequency+0x14>
}
    79e6:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,&(RegParams.pOtherChParams[channelId].rx1Frequency),sizeof(uint32_t));
    79e8:	4c0a      	ldr	r4, [pc, #40]	; (7a14 <LORAREG_GetAttr_DlFrequency+0x40>)
    79ea:	7a21      	ldrb	r1, [r4, #8]
    79ec:	7a60      	ldrb	r0, [r4, #9]
    79ee:	0200      	lsls	r0, r0, #8
    79f0:	4308      	orrs	r0, r1
    79f2:	7aa1      	ldrb	r1, [r4, #10]
    79f4:	0409      	lsls	r1, r1, #16
    79f6:	4308      	orrs	r0, r1
    79f8:	7ae1      	ldrb	r1, [r4, #11]
    79fa:	0609      	lsls	r1, r1, #24
    79fc:	4301      	orrs	r1, r0
    79fe:	0050      	lsls	r0, r2, #1
    7a00:	1882      	adds	r2, r0, r2
    7a02:	0092      	lsls	r2, r2, #2
    7a04:	1889      	adds	r1, r1, r2
    7a06:	3104      	adds	r1, #4
    7a08:	2204      	movs	r2, #4
    7a0a:	0018      	movs	r0, r3
    7a0c:	4b02      	ldr	r3, [pc, #8]	; (7a18 <LORAREG_GetAttr_DlFrequency+0x44>)
    7a0e:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7a10:	2008      	movs	r0, #8
    7a12:	e7e8      	b.n	79e6 <LORAREG_GetAttr_DlFrequency+0x12>
    7a14:	20001b54 	.word	0x20001b54
    7a18:	00015f45 	.word	0x00015f45

00007a1c <LORAREG_GetAttr_DutyCycleTimer>:
{
    7a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7a1e:	46d6      	mov	lr, sl
    7a20:	464f      	mov	r7, r9
    7a22:	4646      	mov	r6, r8
    7a24:	b5c0      	push	{r6, r7, lr}
    7a26:	b084      	sub	sp, #16
    7a28:	9200      	str	r2, [sp, #0]
    currentDataRate = *(uint8_t *)attrInput;
    7a2a:	780b      	ldrb	r3, [r1, #0]
    7a2c:	469c      	mov	ip, r3
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    7a2e:	232a      	movs	r3, #42	; 0x2a
    7a30:	4a5b      	ldr	r2, [pc, #364]	; (7ba0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    7a32:	56d6      	ldrsb	r6, [r2, r3]
    7a34:	2e00      	cmp	r6, #0
    7a36:	dd66      	ble.n	7b06 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    7a38:	0013      	movs	r3, r2
    7a3a:	7910      	ldrb	r0, [r2, #4]
    7a3c:	7952      	ldrb	r2, [r2, #5]
    7a3e:	0212      	lsls	r2, r2, #8
    7a40:	4302      	orrs	r2, r0
    7a42:	7998      	ldrb	r0, [r3, #6]
    7a44:	0400      	lsls	r0, r0, #16
    7a46:	4302      	orrs	r2, r0
    7a48:	79d8      	ldrb	r0, [r3, #7]
    7a4a:	0600      	lsls	r0, r0, #24
    7a4c:	4310      	orrs	r0, r2
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    7a4e:	7b1f      	ldrb	r7, [r3, #12]
    7a50:	7b5a      	ldrb	r2, [r3, #13]
    7a52:	0212      	lsls	r2, r2, #8
    7a54:	433a      	orrs	r2, r7
    7a56:	7b9f      	ldrb	r7, [r3, #14]
    7a58:	043f      	lsls	r7, r7, #16
    7a5a:	433a      	orrs	r2, r7
    7a5c:	7bdf      	ldrb	r7, [r3, #15]
    7a5e:	063f      	lsls	r7, r7, #24
    7a60:	4317      	orrs	r7, r2
    7a62:	2500      	movs	r5, #0
    7a64:	2300      	movs	r3, #0
    7a66:	2201      	movs	r2, #1
    7a68:	4252      	negs	r2, r2
    7a6a:	4691      	mov	r9, r2
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    7a6c:	4a4c      	ldr	r2, [pc, #304]	; (7ba0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    7a6e:	4690      	mov	r8, r2
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    7a70:	4662      	mov	r2, ip
    7a72:	9201      	str	r2, [sp, #4]
    7a74:	e004      	b.n	7a80 <LORAREG_GetAttr_DutyCycleTimer+0x64>
    for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    7a76:	3301      	adds	r3, #1
    7a78:	b2db      	uxtb	r3, r3
    7a7a:	001d      	movs	r5, r3
    7a7c:	42b3      	cmp	r3, r6
    7a7e:	da27      	bge.n	7ad0 <LORAREG_GetAttr_DutyCycleTimer+0xb4>
	    if ( (RegParams.pChParams[i].status == ENABLED) )
    7a80:	0059      	lsls	r1, r3, #1
    7a82:	1841      	adds	r1, r0, r1
    7a84:	780a      	ldrb	r2, [r1, #0]
    7a86:	2a00      	cmp	r2, #0
    7a88:	d0f5      	beq.n	7a76 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
		    bandId = RegParams.cmnParams.paramsType2.othChParams[i].subBandId;
    7a8a:	006a      	lsls	r2, r5, #1
    7a8c:	1952      	adds	r2, r2, r5
    7a8e:	0092      	lsls	r2, r2, #2
    7a90:	4442      	add	r2, r8
    7a92:	32ab      	adds	r2, #171	; 0xab
		    if((RegParams.pSubBandParams[bandId].subBandTimeout != 0) && 
    7a94:	7815      	ldrb	r5, [r2, #0]
    7a96:	006a      	lsls	r2, r5, #1
    7a98:	1952      	adds	r2, r2, r5
    7a9a:	0092      	lsls	r2, r2, #2
    7a9c:	18ba      	adds	r2, r7, r2
    7a9e:	7a15      	ldrb	r5, [r2, #8]
    7aa0:	7a54      	ldrb	r4, [r2, #9]
    7aa2:	0224      	lsls	r4, r4, #8
    7aa4:	4325      	orrs	r5, r4
    7aa6:	7a94      	ldrb	r4, [r2, #10]
    7aa8:	0424      	lsls	r4, r4, #16
    7aaa:	4325      	orrs	r5, r4
    7aac:	7ad2      	ldrb	r2, [r2, #11]
    7aae:	0612      	lsls	r2, r2, #24
    7ab0:	432a      	orrs	r2, r5
    7ab2:	d0e0      	beq.n	7a76 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    7ab4:	454a      	cmp	r2, r9
    7ab6:	d8de      	bhi.n	7a76 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    7ab8:	784d      	ldrb	r5, [r1, #1]
    7aba:	072d      	lsls	r5, r5, #28
    7abc:	0f2d      	lsrs	r5, r5, #28
			   (RegParams.pSubBandParams[bandId].subBandTimeout <= minimSubBandTimer) && 
    7abe:	45ac      	cmp	ip, r5
    7ac0:	dbd9      	blt.n	7a76 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			   (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    7ac2:	7849      	ldrb	r1, [r1, #1]
    7ac4:	0909      	lsrs	r1, r1, #4
			   (currentDataRate >= RegParams.pChParams[i].dataRange.min) && 
    7ac6:	9c01      	ldr	r4, [sp, #4]
    7ac8:	428c      	cmp	r4, r1
    7aca:	dcd4      	bgt.n	7a76 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
			    minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    7acc:	4691      	mov	r9, r2
    7ace:	e7d2      	b.n	7a76 <LORAREG_GetAttr_DutyCycleTimer+0x5a>
    if((UINT32_MAX != minimSubBandTimer) && (minimSubBandTimer >= RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout))
    7ad0:	464b      	mov	r3, r9
    7ad2:	3301      	adds	r3, #1
    7ad4:	d017      	beq.n	7b06 <LORAREG_GetAttr_DutyCycleTimer+0xea>
    7ad6:	4932      	ldr	r1, [pc, #200]	; (7ba0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    7ad8:	23ba      	movs	r3, #186	; 0xba
    7ada:	33ff      	adds	r3, #255	; 0xff
    7adc:	5ccb      	ldrb	r3, [r1, r3]
    7ade:	22dd      	movs	r2, #221	; 0xdd
    7ae0:	0052      	lsls	r2, r2, #1
    7ae2:	5c8a      	ldrb	r2, [r1, r2]
    7ae4:	0212      	lsls	r2, r2, #8
    7ae6:	431a      	orrs	r2, r3
    7ae8:	23bc      	movs	r3, #188	; 0xbc
    7aea:	33ff      	adds	r3, #255	; 0xff
    7aec:	5ccb      	ldrb	r3, [r1, r3]
    7aee:	041b      	lsls	r3, r3, #16
    7af0:	431a      	orrs	r2, r3
    7af2:	23de      	movs	r3, #222	; 0xde
    7af4:	005b      	lsls	r3, r3, #1
    7af6:	5ccb      	ldrb	r3, [r1, r3]
    7af8:	061b      	lsls	r3, r3, #24
    7afa:	4313      	orrs	r3, r2
    7afc:	4599      	cmp	r9, r3
    7afe:	d302      	bcc.n	7b06 <LORAREG_GetAttr_DutyCycleTimer+0xea>
	    minDutyCycleTimer = minimSubBandTimer;
    7b00:	464b      	mov	r3, r9
    7b02:	9303      	str	r3, [sp, #12]
    7b04:	e013      	b.n	7b2e <LORAREG_GetAttr_DutyCycleTimer+0x112>
	    minDutyCycleTimer = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    7b06:	4926      	ldr	r1, [pc, #152]	; (7ba0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    7b08:	23ba      	movs	r3, #186	; 0xba
    7b0a:	33ff      	adds	r3, #255	; 0xff
    7b0c:	5ccb      	ldrb	r3, [r1, r3]
    7b0e:	22dd      	movs	r2, #221	; 0xdd
    7b10:	0052      	lsls	r2, r2, #1
    7b12:	5c8a      	ldrb	r2, [r1, r2]
    7b14:	0212      	lsls	r2, r2, #8
    7b16:	431a      	orrs	r2, r3
    7b18:	23bc      	movs	r3, #188	; 0xbc
    7b1a:	33ff      	adds	r3, #255	; 0xff
    7b1c:	5ccb      	ldrb	r3, [r1, r3]
    7b1e:	041b      	lsls	r3, r3, #16
    7b20:	431a      	orrs	r2, r3
    7b22:	23de      	movs	r3, #222	; 0xde
    7b24:	005b      	lsls	r3, r3, #1
    7b26:	5ccb      	ldrb	r3, [r1, r3]
    7b28:	061b      	lsls	r3, r3, #24
    7b2a:	4313      	orrs	r3, r2
    7b2c:	9303      	str	r3, [sp, #12]
    ticks = SwTimerReadValue (RegParams.pDutyCycleTimer->timerId);
    7b2e:	491c      	ldr	r1, [pc, #112]	; (7ba0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    7b30:	7c0b      	ldrb	r3, [r1, #16]
    7b32:	7c4a      	ldrb	r2, [r1, #17]
    7b34:	0212      	lsls	r2, r2, #8
    7b36:	431a      	orrs	r2, r3
    7b38:	7c8b      	ldrb	r3, [r1, #18]
    7b3a:	041b      	lsls	r3, r3, #16
    7b3c:	431a      	orrs	r2, r3
    7b3e:	7ccb      	ldrb	r3, [r1, #19]
    7b40:	061b      	lsls	r3, r3, #24
    7b42:	4313      	orrs	r3, r2
    7b44:	7918      	ldrb	r0, [r3, #4]
    7b46:	4b17      	ldr	r3, [pc, #92]	; (7ba4 <LORAREG_GetAttr_DutyCycleTimer+0x188>)
    7b48:	4798      	blx	r3
	if( minDutyCycleTimer != 0)
    7b4a:	9e03      	ldr	r6, [sp, #12]
    7b4c:	2e00      	cmp	r6, #0
    7b4e:	d01b      	beq.n	7b88 <LORAREG_GetAttr_DutyCycleTimer+0x16c>
    delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    7b50:	4913      	ldr	r1, [pc, #76]	; (7ba0 <LORAREG_GetAttr_DutyCycleTimer+0x184>)
    7b52:	7c0b      	ldrb	r3, [r1, #16]
    7b54:	7c4a      	ldrb	r2, [r1, #17]
    7b56:	0212      	lsls	r2, r2, #8
    7b58:	431a      	orrs	r2, r3
    7b5a:	7c8b      	ldrb	r3, [r1, #18]
    7b5c:	041b      	lsls	r3, r3, #16
    7b5e:	431a      	orrs	r2, r3
    7b60:	7ccb      	ldrb	r3, [r1, #19]
    7b62:	061b      	lsls	r3, r3, #24
    7b64:	4313      	orrs	r3, r2
    7b66:	781d      	ldrb	r5, [r3, #0]
    7b68:	785a      	ldrb	r2, [r3, #1]
    7b6a:	0212      	lsls	r2, r2, #8
    7b6c:	432a      	orrs	r2, r5
    7b6e:	789d      	ldrb	r5, [r3, #2]
    7b70:	042d      	lsls	r5, r5, #16
    7b72:	432a      	orrs	r2, r5
    7b74:	78dd      	ldrb	r5, [r3, #3]
    7b76:	062d      	lsls	r5, r5, #24
    7b78:	4315      	orrs	r5, r2
    7b7a:	21fa      	movs	r1, #250	; 0xfa
    7b7c:	0089      	lsls	r1, r1, #2
    7b7e:	4b0a      	ldr	r3, [pc, #40]	; (7ba8 <LORAREG_GetAttr_DutyCycleTimer+0x18c>)
    7b80:	4798      	blx	r3
    7b82:	1a2d      	subs	r5, r5, r0
		minDutyCycleTimer = minDutyCycleTimer - delta; //Logically delta will not be greater than minDcTimer
    7b84:	1b75      	subs	r5, r6, r5
    7b86:	9503      	str	r5, [sp, #12]
    memcpy(attrOutput,&minDutyCycleTimer,sizeof(uint32_t));
    7b88:	2204      	movs	r2, #4
    7b8a:	a903      	add	r1, sp, #12
    7b8c:	9800      	ldr	r0, [sp, #0]
    7b8e:	4b07      	ldr	r3, [pc, #28]	; (7bac <LORAREG_GetAttr_DutyCycleTimer+0x190>)
    7b90:	4798      	blx	r3
}
    7b92:	2008      	movs	r0, #8
    7b94:	b004      	add	sp, #16
    7b96:	bc1c      	pop	{r2, r3, r4}
    7b98:	4690      	mov	r8, r2
    7b9a:	4699      	mov	r9, r3
    7b9c:	46a2      	mov	sl, r4
    7b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7ba0:	20001b54 	.word	0x20001b54
    7ba4:	0000c0d5 	.word	0x0000c0d5
    7ba8:	00012d11 	.word	0x00012d11
    7bac:	00015f45 	.word	0x00015f45

00007bb0 <LORAREG_GetAttr_Rx1WindowparamsType2>:
{
    7bb0:	b500      	push	{lr}
    7bb2:	b083      	sub	sp, #12
    7bb4:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    7bb6:	784a      	ldrb	r2, [r1, #1]
    7bb8:	788b      	ldrb	r3, [r1, #2]
    if (rx1WindowParamReq->currDr >= rx1WindowParamReq->drOffset)
    7bba:	429a      	cmp	r2, r3
    7bbc:	d925      	bls.n	7c0a <LORAREG_GetAttr_Rx1WindowparamsType2+0x5a>
        rx1WindowParams->rx1Dr = DR0;
    7bbe:	2300      	movs	r3, #0
    7bc0:	466a      	mov	r2, sp
    7bc2:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    7bc4:	4913      	ldr	r1, [pc, #76]	; (7c14 <LORAREG_GetAttr_Rx1WindowparamsType2+0x64>)
    7bc6:	7a0b      	ldrb	r3, [r1, #8]
    7bc8:	7a4a      	ldrb	r2, [r1, #9]
    7bca:	0212      	lsls	r2, r2, #8
    7bcc:	4313      	orrs	r3, r2
    7bce:	7a8a      	ldrb	r2, [r1, #10]
    7bd0:	0412      	lsls	r2, r2, #16
    7bd2:	431a      	orrs	r2, r3
    7bd4:	7acb      	ldrb	r3, [r1, #11]
    7bd6:	061b      	lsls	r3, r3, #24
    7bd8:	431a      	orrs	r2, r3
    7bda:	232f      	movs	r3, #47	; 0x2f
    7bdc:	5cc9      	ldrb	r1, [r1, r3]
    7bde:	004b      	lsls	r3, r1, #1
    7be0:	185b      	adds	r3, r3, r1
    7be2:	009b      	lsls	r3, r3, #2
    7be4:	189b      	adds	r3, r3, r2
    7be6:	7919      	ldrb	r1, [r3, #4]
    7be8:	795a      	ldrb	r2, [r3, #5]
    7bea:	0212      	lsls	r2, r2, #8
    7bec:	4311      	orrs	r1, r2
    7bee:	799a      	ldrb	r2, [r3, #6]
    7bf0:	0412      	lsls	r2, r2, #16
    7bf2:	430a      	orrs	r2, r1
    7bf4:	79db      	ldrb	r3, [r3, #7]
    7bf6:	061b      	lsls	r3, r3, #24
    7bf8:	4313      	orrs	r3, r2
    7bfa:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    7bfc:	2208      	movs	r2, #8
    7bfe:	4669      	mov	r1, sp
    7c00:	4b05      	ldr	r3, [pc, #20]	; (7c18 <LORAREG_GetAttr_Rx1WindowparamsType2+0x68>)
    7c02:	4798      	blx	r3
}
    7c04:	2008      	movs	r0, #8
    7c06:	b003      	add	sp, #12
    7c08:	bd00      	pop	{pc}
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - rx1WindowParamReq->drOffset;
    7c0a:	1a9b      	subs	r3, r3, r2
    7c0c:	466a      	mov	r2, sp
    7c0e:	7113      	strb	r3, [r2, #4]
    7c10:	e7d8      	b.n	7bc4 <LORAREG_GetAttr_Rx1WindowparamsType2+0x14>
    7c12:	46c0      	nop			; (mov r8, r8)
    7c14:	20001b54 	.word	0x20001b54
    7c18:	00015f45 	.word	0x00015f45

00007c1c <LORAREG_GetAttr_DRangeChBandT2>:
{
    7c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
    7c1e:	46c6      	mov	lr, r8
    7c20:	b500      	push	{lr}
    7c22:	b082      	sub	sp, #8
    7c24:	4690      	mov	r8, r2
	memcpy(&bandDrReq,(BandDrReq_t *)attrInput,sizeof(BandDrReq_t));
    7c26:	ad01      	add	r5, sp, #4
    7c28:	2204      	movs	r2, #4
    7c2a:	0028      	movs	r0, r5
    7c2c:	4b38      	ldr	r3, [pc, #224]	; (7d10 <LORAREG_GetAttr_DRangeChBandT2+0xf4>)
    7c2e:	4798      	blx	r3
	switch (chMaskCntl)
    7c30:	782b      	ldrb	r3, [r5, #0]
    7c32:	2b00      	cmp	r3, #0
    7c34:	d017      	beq.n	7c66 <LORAREG_GetAttr_DRangeChBandT2+0x4a>
    7c36:	2b06      	cmp	r3, #6
    7c38:	d159      	bne.n	7cee <LORAREG_GetAttr_DRangeChBandT2+0xd2>
			for (i = 0; i < RegParams.maxChannels; i++)
    7c3a:	3324      	adds	r3, #36	; 0x24
    7c3c:	4a35      	ldr	r2, [pc, #212]	; (7d14 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    7c3e:	56d7      	ldrsb	r7, [r2, r3]
    7c40:	2000      	movs	r0, #0
    7c42:	2507      	movs	r5, #7
    7c44:	2f00      	cmp	r7, #0
    7c46:	dd54      	ble.n	7cf2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    7c48:	4a32      	ldr	r2, [pc, #200]	; (7d14 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    7c4a:	7916      	ldrb	r6, [r2, #4]
    7c4c:	7953      	ldrb	r3, [r2, #5]
    7c4e:	021b      	lsls	r3, r3, #8
    7c50:	4333      	orrs	r3, r6
    7c52:	7996      	ldrb	r6, [r2, #6]
    7c54:	0436      	lsls	r6, r6, #16
    7c56:	4333      	orrs	r3, r6
    7c58:	79d6      	ldrb	r6, [r2, #7]
    7c5a:	0636      	lsls	r6, r6, #24
    7c5c:	431e      	orrs	r6, r3
    7c5e:	2000      	movs	r0, #0
    7c60:	2507      	movs	r5, #7
    7c62:	2200      	movs	r2, #0
    7c64:	e035      	b.n	7cd2 <LORAREG_GetAttr_DRangeChBandT2+0xb6>
			for (i = 0; i < RegParams.maxChannels; i++)
    7c66:	232a      	movs	r3, #42	; 0x2a
    7c68:	4a2a      	ldr	r2, [pc, #168]	; (7d14 <LORAREG_GetAttr_DRangeChBandT2+0xf8>)
    7c6a:	56d3      	ldrsb	r3, [r2, r3]
    7c6c:	469c      	mov	ip, r3
    7c6e:	2b00      	cmp	r3, #0
    7c70:	dd4a      	ble.n	7d08 <LORAREG_GetAttr_DRangeChBandT2+0xec>
		chBandDr = getChBandDrT2(bandDrReq.chnlMaskCntl,bandDrReq.chnlMask);
    7c72:	ab01      	add	r3, sp, #4
    7c74:	885e      	ldrh	r6, [r3, #2]
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    7c76:	7917      	ldrb	r7, [r2, #4]
    7c78:	7953      	ldrb	r3, [r2, #5]
    7c7a:	021b      	lsls	r3, r3, #8
    7c7c:	433b      	orrs	r3, r7
    7c7e:	7997      	ldrb	r7, [r2, #6]
    7c80:	043f      	lsls	r7, r7, #16
    7c82:	433b      	orrs	r3, r7
    7c84:	79d7      	ldrb	r7, [r2, #7]
    7c86:	063f      	lsls	r7, r7, #24
    7c88:	431f      	orrs	r7, r3
    7c8a:	2000      	movs	r0, #0
    7c8c:	2507      	movs	r5, #7
    7c8e:	2200      	movs	r2, #0
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    7c90:	2401      	movs	r4, #1
    7c92:	e00b      	b.n	7cac <LORAREG_GetAttr_DRangeChBandT2+0x90>
    7c94:	784b      	ldrb	r3, [r1, #1]
    7c96:	091b      	lsrs	r3, r3, #4
    7c98:	4283      	cmp	r3, r0
    7c9a:	dd02      	ble.n	7ca2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
    7c9c:	4234      	tst	r4, r6
    7c9e:	d000      	beq.n	7ca2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    7ca0:	0018      	movs	r0, r3
				auxChannelMask = auxChannelMask >> SHIFT1;
    7ca2:	0876      	lsrs	r6, r6, #1
			for (i = 0; i < RegParams.maxChannels; i++)
    7ca4:	3201      	adds	r2, #1
    7ca6:	b2d2      	uxtb	r2, r2
    7ca8:	4562      	cmp	r2, ip
    7caa:	da22      	bge.n	7cf2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if ((RegParams.pChParams[i].dataRange.min < auxMinDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    7cac:	0051      	lsls	r1, r2, #1
    7cae:	1879      	adds	r1, r7, r1
    7cb0:	784b      	ldrb	r3, [r1, #1]
    7cb2:	071b      	lsls	r3, r3, #28
    7cb4:	0f1b      	lsrs	r3, r3, #28
    7cb6:	42ab      	cmp	r3, r5
    7cb8:	daec      	bge.n	7c94 <LORAREG_GetAttr_DRangeChBandT2+0x78>
    7cba:	4234      	tst	r4, r6
    7cbc:	d0f1      	beq.n	7ca2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    7cbe:	001d      	movs	r5, r3
				if ((RegParams.pChParams[i].dataRange.max > auxMaxDataRate) && ((auxChannelMask & 0x0001) == 0x0001))
    7cc0:	784b      	ldrb	r3, [r1, #1]
    7cc2:	091b      	lsrs	r3, r3, #4
    7cc4:	4298      	cmp	r0, r3
    7cc6:	dbeb      	blt.n	7ca0 <LORAREG_GetAttr_DRangeChBandT2+0x84>
    7cc8:	e7eb      	b.n	7ca2 <LORAREG_GetAttr_DRangeChBandT2+0x86>
			for (i = 0; i < RegParams.maxChannels; i++)
    7cca:	3201      	adds	r2, #1
    7ccc:	b2d2      	uxtb	r2, r2
    7cce:	42ba      	cmp	r2, r7
    7cd0:	da0f      	bge.n	7cf2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
				if (RegParams.pChParams[i].dataRange.min < auxMinDataRate)
    7cd2:	0051      	lsls	r1, r2, #1
    7cd4:	1871      	adds	r1, r6, r1
    7cd6:	784b      	ldrb	r3, [r1, #1]
    7cd8:	071b      	lsls	r3, r3, #28
    7cda:	0f1b      	lsrs	r3, r3, #28
    7cdc:	42ab      	cmp	r3, r5
    7cde:	da00      	bge.n	7ce2 <LORAREG_GetAttr_DRangeChBandT2+0xc6>
					auxMinDataRate = RegParams.pChParams[i].dataRange.min;
    7ce0:	001d      	movs	r5, r3
				if (RegParams.pChParams[i].dataRange.max > auxMaxDataRate)
    7ce2:	784b      	ldrb	r3, [r1, #1]
    7ce4:	091b      	lsrs	r3, r3, #4
    7ce6:	4283      	cmp	r3, r0
    7ce8:	ddef      	ble.n	7cca <LORAREG_GetAttr_DRangeChBandT2+0xae>
					auxMaxDataRate = RegParams.pChParams[i].dataRange.max;
    7cea:	0018      	movs	r0, r3
    7cec:	e7ed      	b.n	7cca <LORAREG_GetAttr_DRangeChBandT2+0xae>
			auxMaxDataRate = 0xFF;
    7cee:	20ff      	movs	r0, #255	; 0xff
			auxMinDataRate = 0xFF;
    7cf0:	25ff      	movs	r5, #255	; 0xff
    7cf2:	0100      	lsls	r0, r0, #4
    7cf4:	230f      	movs	r3, #15
    7cf6:	401d      	ands	r5, r3
    7cf8:	4328      	orrs	r0, r5
		memcpy(attrOutput,&chBandDr,sizeof(DataRange_t));
    7cfa:	4643      	mov	r3, r8
    7cfc:	7018      	strb	r0, [r3, #0]
}
    7cfe:	2008      	movs	r0, #8
    7d00:	b002      	add	sp, #8
    7d02:	bc04      	pop	{r2}
    7d04:	4690      	mov	r8, r2
    7d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
			for (i = 0; i < RegParams.maxChannels; i++)
    7d08:	2000      	movs	r0, #0
    7d0a:	2507      	movs	r5, #7
    7d0c:	e7f1      	b.n	7cf2 <LORAREG_GetAttr_DRangeChBandT2+0xd6>
    7d0e:	46c0      	nop			; (mov r8, r8)
    7d10:	00015f45 	.word	0x00015f45
    7d14:	20001b54 	.word	0x20001b54

00007d18 <LORAREG_GetAttr_FreqT2>:
{
    7d18:	b510      	push	{r4, lr}
    7d1a:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    7d1c:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels)
    7d1e:	222a      	movs	r2, #42	; 0x2a
    7d20:	490d      	ldr	r1, [pc, #52]	; (7d58 <LORAREG_GetAttr_FreqT2+0x40>)
    7d22:	568a      	ldrsb	r2, [r1, r2]
		return LORAWAN_INVALID_PARAMETER;
    7d24:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels)
    7d26:	4293      	cmp	r3, r2
    7d28:	dd00      	ble.n	7d2c <LORAREG_GetAttr_FreqT2+0x14>
}
    7d2a:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    7d2c:	0008      	movs	r0, r1
    7d2e:	7a09      	ldrb	r1, [r1, #8]
    7d30:	7a42      	ldrb	r2, [r0, #9]
    7d32:	0212      	lsls	r2, r2, #8
    7d34:	430a      	orrs	r2, r1
    7d36:	7a81      	ldrb	r1, [r0, #10]
    7d38:	0409      	lsls	r1, r1, #16
    7d3a:	430a      	orrs	r2, r1
    7d3c:	7ac1      	ldrb	r1, [r0, #11]
    7d3e:	0609      	lsls	r1, r1, #24
    7d40:	4311      	orrs	r1, r2
    7d42:	005a      	lsls	r2, r3, #1
    7d44:	18d3      	adds	r3, r2, r3
    7d46:	009b      	lsls	r3, r3, #2
    7d48:	18c9      	adds	r1, r1, r3
    7d4a:	2204      	movs	r2, #4
    7d4c:	0020      	movs	r0, r4
    7d4e:	4b03      	ldr	r3, [pc, #12]	; (7d5c <LORAREG_GetAttr_FreqT2+0x44>)
    7d50:	4798      	blx	r3
	return result;
    7d52:	2008      	movs	r0, #8
    7d54:	e7e9      	b.n	7d2a <LORAREG_GetAttr_FreqT2+0x12>
    7d56:	46c0      	nop			; (mov r8, r8)
    7d58:	20001b54 	.word	0x20001b54
    7d5c:	00015f45 	.word	0x00015f45

00007d60 <LORAREG_GetAttr_Rx1WindowparamsType4>:
{
    7d60:	b510      	push	{r4, lr}
    7d62:	b082      	sub	sp, #8
    7d64:	0010      	movs	r0, r2
	if((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923)) != 0) &&  rx1WindowParamReq->joining)
    7d66:	232e      	movs	r3, #46	; 0x2e
    7d68:	4a37      	ldr	r2, [pc, #220]	; (7e48 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    7d6a:	5cd2      	ldrb	r2, [r2, r3]
    7d6c:	4b37      	ldr	r3, [pc, #220]	; (7e4c <LORAREG_GetAttr_Rx1WindowparamsType4+0xec>)
    7d6e:	4113      	asrs	r3, r2
    7d70:	07db      	lsls	r3, r3, #31
    7d72:	d502      	bpl.n	7d7a <LORAREG_GetAttr_Rx1WindowparamsType4+0x1a>
    7d74:	780b      	ldrb	r3, [r1, #0]
    7d76:	2b00      	cmp	r3, #0
    7d78:	d116      	bne.n	7da8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x48>
	if(RegParams.cmnParams.paramsType2.txParams.downlinkDwellTime == 1)
    7d7a:	23e1      	movs	r3, #225	; 0xe1
    7d7c:	005b      	lsls	r3, r3, #1
    7d7e:	4a32      	ldr	r2, [pc, #200]	; (7e48 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    7d80:	5cd4      	ldrb	r4, [r2, r3]
		minDR = DR2;
    7d82:	3bc1      	subs	r3, #193	; 0xc1
    7d84:	3bff      	subs	r3, #255	; 0xff
    7d86:	401c      	ands	r4, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    7d88:	784b      	ldrb	r3, [r1, #1]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    7d8a:	2b05      	cmp	r3, #5
    7d8c:	d92c      	bls.n	7de8 <LORAREG_GetAttr_Rx1WindowparamsType4+0x88>
    7d8e:	2205      	movs	r2, #5
    7d90:	1ad3      	subs	r3, r2, r3
    7d92:	b25b      	sxtb	r3, r3
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    7d94:	788a      	ldrb	r2, [r1, #2]
	if (rx1WindowParamReq->currDr >= effectiveDROffset)
    7d96:	429a      	cmp	r2, r3
    7d98:	db31      	blt.n	7dfe <LORAREG_GetAttr_Rx1WindowparamsType4+0x9e>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    7d9a:	1ad3      	subs	r3, r2, r3
    7d9c:	b2db      	uxtb	r3, r3
		if(rx1WindowParams->rx1Dr < minDR)
    7d9e:	42a3      	cmp	r3, r4
    7da0:	d224      	bcs.n	7dec <LORAREG_GetAttr_Rx1WindowparamsType4+0x8c>
			rx1WindowParams->rx1Dr = minDR;
    7da2:	466b      	mov	r3, sp
    7da4:	711c      	strb	r4, [r3, #4]
    7da6:	e02c      	b.n	7e02 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = DR2;
    7da8:	2302      	movs	r3, #2
    7daa:	466a      	mov	r2, sp
    7dac:	7113      	strb	r3, [r2, #4]
		rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    7dae:	4926      	ldr	r1, [pc, #152]	; (7e48 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    7db0:	7a0b      	ldrb	r3, [r1, #8]
    7db2:	7a4a      	ldrb	r2, [r1, #9]
    7db4:	0212      	lsls	r2, r2, #8
    7db6:	4313      	orrs	r3, r2
    7db8:	7a8a      	ldrb	r2, [r1, #10]
    7dba:	0412      	lsls	r2, r2, #16
    7dbc:	431a      	orrs	r2, r3
    7dbe:	7acb      	ldrb	r3, [r1, #11]
    7dc0:	061b      	lsls	r3, r3, #24
    7dc2:	431a      	orrs	r2, r3
    7dc4:	232f      	movs	r3, #47	; 0x2f
    7dc6:	5cc9      	ldrb	r1, [r1, r3]
    7dc8:	004b      	lsls	r3, r1, #1
    7dca:	185b      	adds	r3, r3, r1
    7dcc:	009b      	lsls	r3, r3, #2
    7dce:	189b      	adds	r3, r3, r2
    7dd0:	7919      	ldrb	r1, [r3, #4]
    7dd2:	795a      	ldrb	r2, [r3, #5]
    7dd4:	0212      	lsls	r2, r2, #8
    7dd6:	4311      	orrs	r1, r2
    7dd8:	799a      	ldrb	r2, [r3, #6]
    7dda:	0412      	lsls	r2, r2, #16
    7ddc:	430a      	orrs	r2, r1
    7dde:	79db      	ldrb	r3, [r3, #7]
    7de0:	061b      	lsls	r3, r3, #24
    7de2:	4313      	orrs	r3, r2
    7de4:	9300      	str	r3, [sp, #0]
    7de6:	e028      	b.n	7e3a <LORAREG_GetAttr_Rx1WindowparamsType4+0xda>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    7de8:	b25b      	sxtb	r3, r3
    7dea:	e7d3      	b.n	7d94 <LORAREG_GetAttr_Rx1WindowparamsType4+0x34>
		else if(rx1WindowParams->rx1Dr > maxDR)
    7dec:	2b05      	cmp	r3, #5
    7dee:	d802      	bhi.n	7df6 <LORAREG_GetAttr_Rx1WindowparamsType4+0x96>
		rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    7df0:	466a      	mov	r2, sp
    7df2:	7113      	strb	r3, [r2, #4]
    7df4:	e005      	b.n	7e02 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
			rx1WindowParams->rx1Dr = maxDR;
    7df6:	2305      	movs	r3, #5
    7df8:	466a      	mov	r2, sp
    7dfa:	7113      	strb	r3, [r2, #4]
    7dfc:	e001      	b.n	7e02 <LORAREG_GetAttr_Rx1WindowparamsType4+0xa2>
		rx1WindowParams->rx1Dr = minDR;
    7dfe:	466b      	mov	r3, sp
    7e00:	711c      	strb	r4, [r3, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;
    7e02:	4911      	ldr	r1, [pc, #68]	; (7e48 <LORAREG_GetAttr_Rx1WindowparamsType4+0xe8>)
    7e04:	7a0b      	ldrb	r3, [r1, #8]
    7e06:	7a4a      	ldrb	r2, [r1, #9]
    7e08:	0212      	lsls	r2, r2, #8
    7e0a:	4313      	orrs	r3, r2
    7e0c:	7a8a      	ldrb	r2, [r1, #10]
    7e0e:	0412      	lsls	r2, r2, #16
    7e10:	431a      	orrs	r2, r3
    7e12:	7acb      	ldrb	r3, [r1, #11]
    7e14:	061b      	lsls	r3, r3, #24
    7e16:	431a      	orrs	r2, r3
    7e18:	232f      	movs	r3, #47	; 0x2f
    7e1a:	5cc9      	ldrb	r1, [r1, r3]
    7e1c:	004b      	lsls	r3, r1, #1
    7e1e:	185b      	adds	r3, r3, r1
    7e20:	009b      	lsls	r3, r3, #2
    7e22:	189b      	adds	r3, r3, r2
    7e24:	7919      	ldrb	r1, [r3, #4]
    7e26:	795a      	ldrb	r2, [r3, #5]
    7e28:	0212      	lsls	r2, r2, #8
    7e2a:	4311      	orrs	r1, r2
    7e2c:	799a      	ldrb	r2, [r3, #6]
    7e2e:	0412      	lsls	r2, r2, #16
    7e30:	430a      	orrs	r2, r1
    7e32:	79db      	ldrb	r3, [r3, #7]
    7e34:	061b      	lsls	r3, r3, #24
    7e36:	4313      	orrs	r3, r2
    7e38:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    7e3a:	2208      	movs	r2, #8
    7e3c:	4669      	mov	r1, sp
    7e3e:	4b04      	ldr	r3, [pc, #16]	; (7e50 <LORAREG_GetAttr_Rx1WindowparamsType4+0xf0>)
    7e40:	4798      	blx	r3
}
    7e42:	2008      	movs	r0, #8
    7e44:	b002      	add	sp, #8
    7e46:	bd10      	pop	{r4, pc}
    7e48:	20001b54 	.word	0x20001b54
    7e4c:	00007fe0 	.word	0x00007fe0
    7e50:	00015f45 	.word	0x00015f45

00007e54 <LORAREG_GetAttr_FreqT3>:
{
    7e54:	b510      	push	{r4, lr}
    7e56:	0014      	movs	r4, r2
	channelId = *(uint8_t *)attrInput;
    7e58:	780b      	ldrb	r3, [r1, #0]
	if(channelId > RegParams.maxChannels) 
    7e5a:	222a      	movs	r2, #42	; 0x2a
    7e5c:	490d      	ldr	r1, [pc, #52]	; (7e94 <LORAREG_GetAttr_FreqT3+0x40>)
    7e5e:	568a      	ldrsb	r2, [r1, r2]
		result = LORAWAN_INVALID_PARAMETER;
    7e60:	200a      	movs	r0, #10
	if(channelId > RegParams.maxChannels) 
    7e62:	4293      	cmp	r3, r2
    7e64:	dd00      	ble.n	7e68 <LORAREG_GetAttr_FreqT3+0x14>
}
    7e66:	bd10      	pop	{r4, pc}
		memcpy(attrOutput,(&RegParams.pOtherChParams[channelId].ulfrequency),sizeof(uint32_t));
    7e68:	0008      	movs	r0, r1
    7e6a:	7a09      	ldrb	r1, [r1, #8]
    7e6c:	7a42      	ldrb	r2, [r0, #9]
    7e6e:	0212      	lsls	r2, r2, #8
    7e70:	430a      	orrs	r2, r1
    7e72:	7a81      	ldrb	r1, [r0, #10]
    7e74:	0409      	lsls	r1, r1, #16
    7e76:	430a      	orrs	r2, r1
    7e78:	7ac1      	ldrb	r1, [r0, #11]
    7e7a:	0609      	lsls	r1, r1, #24
    7e7c:	4311      	orrs	r1, r2
    7e7e:	005a      	lsls	r2, r3, #1
    7e80:	18d3      	adds	r3, r2, r3
    7e82:	009b      	lsls	r3, r3, #2
    7e84:	18c9      	adds	r1, r1, r3
    7e86:	2204      	movs	r2, #4
    7e88:	0020      	movs	r0, r4
    7e8a:	4b03      	ldr	r3, [pc, #12]	; (7e98 <LORAREG_GetAttr_FreqT3+0x44>)
    7e8c:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    7e8e:	2008      	movs	r0, #8
    7e90:	e7e9      	b.n	7e66 <LORAREG_GetAttr_FreqT3+0x12>
    7e92:	46c0      	nop			; (mov r8, r8)
    7e94:	20001b54 	.word	0x20001b54
    7e98:	00015f45 	.word	0x00015f45

00007e9c <LORAREG_GetAttr_Rx1WindowparamsType3>:
{
    7e9c:	b500      	push	{lr}
    7e9e:	b083      	sub	sp, #12
    7ea0:	0010      	movs	r0, r2
	memcpy(&rx1WindowParamsReq,(Rx1WindowParamsReq_t *)attrInput,sizeof(Rx1WindowParamsReq_t));
    7ea2:	784b      	ldrb	r3, [r1, #1]
    7ea4:	788a      	ldrb	r2, [r1, #2]
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    7ea6:	2b05      	cmp	r3, #5
    7ea8:	d90b      	bls.n	7ec2 <LORAREG_GetAttr_Rx1WindowparamsType3+0x26>
    7eaa:	2105      	movs	r1, #5
    7eac:	1acb      	subs	r3, r1, r3
    7eae:	b25b      	sxtb	r3, r3
    if (rx1WindowParamReq->currDr >= effectiveDROffset)
    7eb0:	429a      	cmp	r2, r3
    7eb2:	db0c      	blt.n	7ece <LORAREG_GetAttr_Rx1WindowparamsType3+0x32>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    7eb4:	1ad3      	subs	r3, r2, r3
    7eb6:	b2db      	uxtb	r3, r3
		else if(rx1WindowParams->rx1Dr > maxDR)
    7eb8:	2b05      	cmp	r3, #5
    7eba:	d804      	bhi.n	7ec6 <LORAREG_GetAttr_Rx1WindowparamsType3+0x2a>
        rx1WindowParams->rx1Dr = rx1WindowParamReq->currDr - effectiveDROffset;
    7ebc:	466a      	mov	r2, sp
    7ebe:	7113      	strb	r3, [r2, #4]
    7ec0:	e008      	b.n	7ed4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
	effectiveDROffset = (rx1WindowParamReq->drOffset > maxDR) ? (maxDR - rx1WindowParamReq->drOffset) : (rx1WindowParamReq->drOffset);
    7ec2:	b25b      	sxtb	r3, r3
    7ec4:	e7f4      	b.n	7eb0 <LORAREG_GetAttr_Rx1WindowparamsType3+0x14>
			rx1WindowParams->rx1Dr = maxDR;
    7ec6:	2305      	movs	r3, #5
    7ec8:	466a      	mov	r2, sp
    7eca:	7113      	strb	r3, [r2, #4]
    7ecc:	e002      	b.n	7ed4 <LORAREG_GetAttr_Rx1WindowparamsType3+0x38>
        rx1WindowParams->rx1Dr = minDR;
    7ece:	2300      	movs	r3, #0
    7ed0:	466a      	mov	r2, sp
    7ed2:	7113      	strb	r3, [r2, #4]
	rx1WindowParams->rx1Freq = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].rx1Frequency;			
    7ed4:	4911      	ldr	r1, [pc, #68]	; (7f1c <LORAREG_GetAttr_Rx1WindowparamsType3+0x80>)
    7ed6:	7a0b      	ldrb	r3, [r1, #8]
    7ed8:	7a4a      	ldrb	r2, [r1, #9]
    7eda:	0212      	lsls	r2, r2, #8
    7edc:	4313      	orrs	r3, r2
    7ede:	7a8a      	ldrb	r2, [r1, #10]
    7ee0:	0412      	lsls	r2, r2, #16
    7ee2:	431a      	orrs	r2, r3
    7ee4:	7acb      	ldrb	r3, [r1, #11]
    7ee6:	061b      	lsls	r3, r3, #24
    7ee8:	431a      	orrs	r2, r3
    7eea:	232f      	movs	r3, #47	; 0x2f
    7eec:	5cc9      	ldrb	r1, [r1, r3]
    7eee:	004b      	lsls	r3, r1, #1
    7ef0:	185b      	adds	r3, r3, r1
    7ef2:	009b      	lsls	r3, r3, #2
    7ef4:	189b      	adds	r3, r3, r2
    7ef6:	7919      	ldrb	r1, [r3, #4]
    7ef8:	795a      	ldrb	r2, [r3, #5]
    7efa:	0212      	lsls	r2, r2, #8
    7efc:	4311      	orrs	r1, r2
    7efe:	799a      	ldrb	r2, [r3, #6]
    7f00:	0412      	lsls	r2, r2, #16
    7f02:	430a      	orrs	r2, r1
    7f04:	79db      	ldrb	r3, [r3, #7]
    7f06:	061b      	lsls	r3, r3, #24
    7f08:	4313      	orrs	r3, r2
    7f0a:	9300      	str	r3, [sp, #0]
	memcpy(attrOutput,&rx1WindowParamsResp,sizeof(Rx1WindowParams_t));
    7f0c:	2208      	movs	r2, #8
    7f0e:	4669      	mov	r1, sp
    7f10:	4b03      	ldr	r3, [pc, #12]	; (7f20 <LORAREG_GetAttr_Rx1WindowparamsType3+0x84>)
    7f12:	4798      	blx	r3
}
    7f14:	2008      	movs	r0, #8
    7f16:	b003      	add	sp, #12
    7f18:	bd00      	pop	{pc}
    7f1a:	46c0      	nop			; (mov r8, r8)
    7f1c:	20001b54 	.word	0x20001b54
    7f20:	00015f45 	.word	0x00015f45

00007f24 <LORAREG_GetAttr_minLBTChPauseTimer>:
{
    7f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    7f26:	46de      	mov	lr, fp
    7f28:	4657      	mov	r7, sl
    7f2a:	464e      	mov	r6, r9
    7f2c:	4645      	mov	r5, r8
    7f2e:	b5e0      	push	{r5, r6, r7, lr}
    7f30:	b085      	sub	sp, #20
    7f32:	9200      	str	r2, [sp, #0]
	uint32_t minim = UINT32_MAX;
    7f34:	2301      	movs	r3, #1
    7f36:	425b      	negs	r3, r3
    7f38:	9303      	str	r3, [sp, #12]
	currentDataRate = *(uint8_t *)attrInput;
    7f3a:	780b      	ldrb	r3, [r1, #0]
    7f3c:	4699      	mov	r9, r3
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    7f3e:	232a      	movs	r3, #42	; 0x2a
    7f40:	4a2a      	ldr	r2, [pc, #168]	; (7fec <LORAREG_GetAttr_minLBTChPauseTimer+0xc8>)
    7f42:	56d7      	ldrsb	r7, [r2, r3]
    7f44:	2f00      	cmp	r7, #0
    7f46:	dd40      	ble.n	7fca <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    7f48:	7916      	ldrb	r6, [r2, #4]
    7f4a:	7953      	ldrb	r3, [r2, #5]
    7f4c:	021b      	lsls	r3, r3, #8
    7f4e:	4333      	orrs	r3, r6
    7f50:	7996      	ldrb	r6, [r2, #6]
    7f52:	0436      	lsls	r6, r6, #16
    7f54:	4333      	orrs	r3, r6
    7f56:	79d6      	ldrb	r6, [r2, #7]
    7f58:	0636      	lsls	r6, r6, #24
    7f5a:	431e      	orrs	r6, r3
    7f5c:	2300      	movs	r3, #0
    7f5e:	469a      	mov	sl, r3
    7f60:	3b01      	subs	r3, #1
    7f62:	4698      	mov	r8, r3
    7f64:	2300      	movs	r3, #0
    7f66:	2100      	movs	r1, #0
    7f68:	4694      	mov	ip, r2
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    7f6a:	464a      	mov	r2, r9
    7f6c:	9201      	str	r2, [sp, #4]
    7f6e:	46c3      	mov	fp, r8
    7f70:	e004      	b.n	7f7c <LORAREG_GetAttr_minLBTChPauseTimer+0x58>
	for (uint8_t i = 0; i < RegParams.maxChannels; i++)
    7f72:	3101      	adds	r1, #1
    7f74:	b2c9      	uxtb	r1, r1
    7f76:	000b      	movs	r3, r1
    7f78:	42b9      	cmp	r1, r7
    7f7a:	da23      	bge.n	7fc4 <LORAREG_GetAttr_minLBTChPauseTimer+0xa0>
		if ( (RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) 
    7f7c:	004a      	lsls	r2, r1, #1
    7f7e:	18b2      	adds	r2, r6, r2
    7f80:	7814      	ldrb	r4, [r2, #0]
    7f82:	2c00      	cmp	r4, #0
    7f84:	d0f5      	beq.n	7f72 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    7f86:	3358      	adds	r3, #88	; 0x58
    7f88:	009b      	lsls	r3, r3, #2
    7f8a:	4463      	add	r3, ip
    7f8c:	7a18      	ldrb	r0, [r3, #8]
    7f8e:	4680      	mov	r8, r0
    7f90:	7a58      	ldrb	r0, [r3, #9]
    7f92:	0200      	lsls	r0, r0, #8
    7f94:	4645      	mov	r5, r8
    7f96:	4305      	orrs	r5, r0
    7f98:	7a98      	ldrb	r0, [r3, #10]
    7f9a:	0400      	lsls	r0, r0, #16
    7f9c:	4328      	orrs	r0, r5
    7f9e:	7adb      	ldrb	r3, [r3, #11]
    7fa0:	061b      	lsls	r3, r3, #24
    7fa2:	4303      	orrs	r3, r0
    7fa4:	d0e5      	beq.n	7f72 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
		     && (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) 
    7fa6:	459b      	cmp	fp, r3
    7fa8:	d3e3      	bcc.n	7f72 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate >= RegParams.pChParams[i].dataRange.min) 
    7faa:	7850      	ldrb	r0, [r2, #1]
    7fac:	0700      	lsls	r0, r0, #28
    7fae:	0f00      	lsrs	r0, r0, #28
    7fb0:	4581      	cmp	r9, r0
    7fb2:	dbde      	blt.n	7f72 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
			 && (currentDataRate <= RegParams.pChParams[i].dataRange.max) )
    7fb4:	7852      	ldrb	r2, [r2, #1]
    7fb6:	0912      	lsrs	r2, r2, #4
    7fb8:	9801      	ldr	r0, [sp, #4]
    7fba:	4290      	cmp	r0, r2
    7fbc:	dcd9      	bgt.n	7f72 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    7fbe:	46a2      	mov	sl, r4
			minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    7fc0:	469b      	mov	fp, r3
    7fc2:	e7d6      	b.n	7f72 <LORAREG_GetAttr_minLBTChPauseTimer+0x4e>
    7fc4:	4653      	mov	r3, sl
    7fc6:	2b00      	cmp	r3, #0
    7fc8:	d10c      	bne.n	7fe4 <LORAREG_GetAttr_minLBTChPauseTimer+0xc0>
	memcpy(attrOutput,&minim,sizeof(uint32_t));
    7fca:	2204      	movs	r2, #4
    7fcc:	a903      	add	r1, sp, #12
    7fce:	9800      	ldr	r0, [sp, #0]
    7fd0:	4b07      	ldr	r3, [pc, #28]	; (7ff0 <LORAREG_GetAttr_minLBTChPauseTimer+0xcc>)
    7fd2:	4798      	blx	r3
}
    7fd4:	2008      	movs	r0, #8
    7fd6:	b005      	add	sp, #20
    7fd8:	bc3c      	pop	{r2, r3, r4, r5}
    7fda:	4690      	mov	r8, r2
    7fdc:	4699      	mov	r9, r3
    7fde:	46a2      	mov	sl, r4
    7fe0:	46ab      	mov	fp, r5
    7fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7fe4:	465b      	mov	r3, fp
    7fe6:	9303      	str	r3, [sp, #12]
    7fe8:	e7ef      	b.n	7fca <LORAREG_GetAttr_minLBTChPauseTimer+0xa6>
    7fea:	46c0      	nop			; (mov r8, r8)
    7fec:	20001b54 	.word	0x20001b54
    7ff0:	00015f45 	.word	0x00015f45

00007ff4 <ValidateTxFreqT2>:
{
    7ff4:	b500      	push	{lr}
    7ff6:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    7ff8:	2208      	movs	r2, #8
    7ffa:	4668      	mov	r0, sp
    7ffc:	4b04      	ldr	r3, [pc, #16]	; (8010 <ValidateTxFreqT2+0x1c>)
    7ffe:	4798      	blx	r3
	retVal = pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,(void *)&val_freqTx.frequencyNew);
    8000:	4b04      	ldr	r3, [pc, #16]	; (8014 <ValidateTxFreqT2+0x20>)
    8002:	685b      	ldr	r3, [r3, #4]
    8004:	4669      	mov	r1, sp
    8006:	2001      	movs	r0, #1
    8008:	4798      	blx	r3
}
    800a:	b003      	add	sp, #12
    800c:	bd00      	pop	{pc}
    800e:	46c0      	nop			; (mov r8, r8)
    8010:	00015f45 	.word	0x00015f45
    8014:	20000d84 	.word	0x20000d84

00008018 <ValidateFreqIN>:
{
    8018:	b500      	push	{lr}
    801a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    801c:	2204      	movs	r2, #4
    801e:	a801      	add	r0, sp, #4
    8020:	4b06      	ldr	r3, [pc, #24]	; (803c <ValidateFreqIN+0x24>)
    8022:	4798      	blx	r3
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    8024:	9b01      	ldr	r3, [sp, #4]
    8026:	4a06      	ldr	r2, [pc, #24]	; (8040 <ValidateFreqIN+0x28>)
    8028:	4694      	mov	ip, r2
    802a:	4463      	add	r3, ip
    802c:	4a05      	ldr	r2, [pc, #20]	; (8044 <ValidateFreqIN+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    802e:	2008      	movs	r0, #8
	if(newFreq > FREQ_867000KHZ || newFreq < FREQ_865000KHZ)
    8030:	4293      	cmp	r3, r2
    8032:	d900      	bls.n	8036 <ValidateFreqIN+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8034:	3002      	adds	r0, #2
}
    8036:	b003      	add	sp, #12
    8038:	bd00      	pop	{pc}
    803a:	46c0      	nop			; (mov r8, r8)
    803c:	00015f45 	.word	0x00015f45
    8040:	cc7125c0 	.word	0xcc7125c0
    8044:	001e8480 	.word	0x001e8480

00008048 <ValidateFreqJP>:
{
    8048:	b500      	push	{lr}
    804a:	b083      	sub	sp, #12
	memcpy(&newFreq,attrInput,sizeof(uint32_t));
    804c:	2204      	movs	r2, #4
    804e:	a801      	add	r0, sp, #4
    8050:	4b06      	ldr	r3, [pc, #24]	; (806c <ValidateFreqJP+0x24>)
    8052:	4798      	blx	r3
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    8054:	9b01      	ldr	r3, [sp, #4]
    8056:	4a06      	ldr	r2, [pc, #24]	; (8070 <ValidateFreqJP+0x28>)
    8058:	4694      	mov	ip, r2
    805a:	4463      	add	r3, ip
    805c:	4a05      	ldr	r2, [pc, #20]	; (8074 <ValidateFreqJP+0x2c>)
	StackRetStatus_t result = LORAWAN_SUCCESS;
    805e:	2008      	movs	r0, #8
	if(newFreq > FREQ_928000KHZ || newFreq < FREQ_920000KHZ)
    8060:	4293      	cmp	r3, r2
    8062:	d900      	bls.n	8066 <ValidateFreqJP+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    8064:	3002      	adds	r0, #2
}
    8066:	b003      	add	sp, #12
    8068:	bd00      	pop	{pc}
    806a:	46c0      	nop			; (mov r8, r8)
    806c:	00015f45 	.word	0x00015f45
    8070:	c929ea00 	.word	0xc929ea00
    8074:	007a1200 	.word	0x007a1200

00008078 <ValidateFreqKR>:
{
    8078:	b500      	push	{lr}
    807a:	b083      	sub	sp, #12
	memcpy(&freqNew,attrInput,sizeof(uint32_t));
    807c:	2204      	movs	r2, #4
    807e:	a801      	add	r0, sp, #4
    8080:	4b0a      	ldr	r3, [pc, #40]	; (80ac <ValidateFreqKR+0x34>)
    8082:	4798      	blx	r3
		if(freq == freqNew)
    8084:	9a01      	ldr	r2, [sp, #4]
    8086:	4b0a      	ldr	r3, [pc, #40]	; (80b0 <ValidateFreqKR+0x38>)
    8088:	429a      	cmp	r2, r3
    808a:	d00b      	beq.n	80a4 <ValidateFreqKR+0x2c>
    808c:	4b09      	ldr	r3, [pc, #36]	; (80b4 <ValidateFreqKR+0x3c>)
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    808e:	490a      	ldr	r1, [pc, #40]	; (80b8 <ValidateFreqKR+0x40>)
		if(freq == freqNew)
    8090:	429a      	cmp	r2, r3
    8092:	d009      	beq.n	80a8 <ValidateFreqKR+0x30>
	for(freq = FREQ_920900KHZ; freq <= FREQ_923300KHZ; freq += freqwidth)
    8094:	4809      	ldr	r0, [pc, #36]	; (80bc <ValidateFreqKR+0x44>)
    8096:	4684      	mov	ip, r0
    8098:	4463      	add	r3, ip
    809a:	428b      	cmp	r3, r1
    809c:	d1f8      	bne.n	8090 <ValidateFreqKR+0x18>
    StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    809e:	200a      	movs	r0, #10
}
    80a0:	b003      	add	sp, #12
    80a2:	bd00      	pop	{pc}
			result = LORAWAN_SUCCESS;
    80a4:	2008      	movs	r0, #8
    80a6:	e7fb      	b.n	80a0 <ValidateFreqKR+0x28>
    80a8:	2008      	movs	r0, #8
    80aa:	e7f9      	b.n	80a0 <ValidateFreqKR+0x28>
    80ac:	00015f45 	.word	0x00015f45
    80b0:	36e3d1a0 	.word	0x36e3d1a0
    80b4:	36e6dee0 	.word	0x36e6dee0
    80b8:	370b7de0 	.word	0x370b7de0
    80bc:	00030d40 	.word	0x00030d40

000080c0 <setNewChannelsT1>:
{
    80c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    80c2:	b083      	sub	sp, #12
	memcpy(&updateNewCh,attrInput,sizeof(UpdateNewCh_t));
    80c4:	ac01      	add	r4, sp, #4
    80c6:	2204      	movs	r2, #4
    80c8:	0020      	movs	r0, r4
    80ca:	4b1f      	ldr	r3, [pc, #124]	; (8148 <setNewChannelsT1+0x88>)
    80cc:	4798      	blx	r3
	chMask = updateNewCh.channelMask;
    80ce:	8827      	ldrh	r7, [r4, #0]
	chMaskCtrl = updateNewCh.channelMaskCntl;
    80d0:	78a6      	ldrb	r6, [r4, #2]
    80d2:	466b      	mov	r3, sp
    80d4:	1cd9      	adds	r1, r3, #3
    80d6:	700e      	strb	r6, [r1, #0]
	if(ValidateChannelMaskCntl(CHANNEL_MASK_CNTL, &chMaskCtrl) == LORAWAN_SUCCESS)
    80d8:	201b      	movs	r0, #27
    80da:	4b1c      	ldr	r3, [pc, #112]	; (814c <setNewChannelsT1+0x8c>)
    80dc:	4798      	blx	r3
    80de:	0005      	movs	r5, r0
    80e0:	2808      	cmp	r0, #8
    80e2:	d003      	beq.n	80ec <setNewChannelsT1+0x2c>
		retVal = LORAWAN_INVALID_PARAMETER;
    80e4:	250a      	movs	r5, #10
}
    80e6:	0028      	movs	r0, r5
    80e8:	b003      	add	sp, #12
    80ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		switch(chMaskCtrl)
    80ec:	2e06      	cmp	r6, #6
    80ee:	d01c      	beq.n	812a <setNewChannelsT1+0x6a>
    80f0:	d80a      	bhi.n	8108 <setNewChannelsT1+0x48>
    80f2:	2e04      	cmp	r6, #4
    80f4:	d8f7      	bhi.n	80e6 <setNewChannelsT1+0x26>
		channel = chMaskCtrl << SHIFT4;
    80f6:	0136      	lsls	r6, r6, #4
    80f8:	b2f0      	uxtb	r0, r6
				EnableChannels2(channel, channel + 15, chMask);
    80fa:	0001      	movs	r1, r0
    80fc:	310f      	adds	r1, #15
    80fe:	b2c9      	uxtb	r1, r1
    8100:	003a      	movs	r2, r7
    8102:	4b13      	ldr	r3, [pc, #76]	; (8150 <setNewChannelsT1+0x90>)
    8104:	4798      	blx	r3
				break;
    8106:	e7ee      	b.n	80e6 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    8108:	2400      	movs	r4, #0
    810a:	2e07      	cmp	r6, #7
    810c:	d1eb      	bne.n	80e6 <setNewChannelsT1+0x26>
					UpdateChannelIdStatus(i, DISABLED);
    810e:	4e11      	ldr	r6, [pc, #68]	; (8154 <setNewChannelsT1+0x94>)
    8110:	2100      	movs	r1, #0
    8112:	0020      	movs	r0, r4
    8114:	47b0      	blx	r6
				for(i = 0; i< 63; i++)
    8116:	3401      	adds	r4, #1
    8118:	b2e4      	uxtb	r4, r4
    811a:	2c3f      	cmp	r4, #63	; 0x3f
    811c:	d1f8      	bne.n	8110 <setNewChannelsT1+0x50>
				EnableChannels2(64, 71, chMask);
    811e:	003a      	movs	r2, r7
    8120:	2147      	movs	r1, #71	; 0x47
    8122:	2040      	movs	r0, #64	; 0x40
    8124:	4b0a      	ldr	r3, [pc, #40]	; (8150 <setNewChannelsT1+0x90>)
    8126:	4798      	blx	r3
				break;
    8128:	e7dd      	b.n	80e6 <setNewChannelsT1+0x26>
		switch(chMaskCtrl)
    812a:	2400      	movs	r4, #0
					UpdateChannelIdStatus(i, ENABLED);
    812c:	4e09      	ldr	r6, [pc, #36]	; (8154 <setNewChannelsT1+0x94>)
    812e:	2101      	movs	r1, #1
    8130:	0020      	movs	r0, r4
    8132:	47b0      	blx	r6
				for(i = 0; i < 63; i++)
    8134:	3401      	adds	r4, #1
    8136:	b2e4      	uxtb	r4, r4
    8138:	2c3f      	cmp	r4, #63	; 0x3f
    813a:	d1f8      	bne.n	812e <setNewChannelsT1+0x6e>
				EnableChannels2(64, 71, chMask);
    813c:	003a      	movs	r2, r7
    813e:	2147      	movs	r1, #71	; 0x47
    8140:	2040      	movs	r0, #64	; 0x40
    8142:	4b03      	ldr	r3, [pc, #12]	; (8150 <setNewChannelsT1+0x90>)
    8144:	4798      	blx	r3
			    break;
    8146:	e7ce      	b.n	80e6 <setNewChannelsT1+0x26>
    8148:	00015f45 	.word	0x00015f45
    814c:	00006d99 	.word	0x00006d99
    8150:	00007421 	.word	0x00007421
    8154:	000073bd 	.word	0x000073bd

00008158 <setDlFrequency>:
{
    8158:	b530      	push	{r4, r5, lr}
    815a:	b085      	sub	sp, #20
	memcpy(&updateDlFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    815c:	ac02      	add	r4, sp, #8
    815e:	2208      	movs	r2, #8
    8160:	0020      	movs	r0, r4
    8162:	4b20      	ldr	r3, [pc, #128]	; (81e4 <setDlFrequency+0x8c>)
    8164:	4798      	blx	r3
	Chid.channelIndex = updateDlFreq.channelIndex;
    8166:	ab01      	add	r3, sp, #4
    8168:	7922      	ldrb	r2, [r4, #4]
    816a:	701a      	strb	r2, [r3, #0]
		Chid.allowedForDefaultChannels = ALL_CHANNELS;
    816c:	2201      	movs	r2, #1
    816e:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8170:	4b1d      	ldr	r3, [pc, #116]	; (81e8 <setDlFrequency+0x90>)
    8172:	685b      	ldr	r3, [r3, #4]
    8174:	0021      	movs	r1, r4
    8176:	2001      	movs	r0, #1
    8178:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    817a:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    817c:	2808      	cmp	r0, #8
    817e:	d002      	beq.n	8186 <setDlFrequency+0x2e>
}
    8180:	0020      	movs	r0, r4
    8182:	b005      	add	sp, #20
    8184:	bd30      	pop	{r4, r5, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY, &updateDlFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &Chid) != LORAWAN_SUCCESS)
    8186:	a901      	add	r1, sp, #4
    8188:	300d      	adds	r0, #13
    818a:	4b18      	ldr	r3, [pc, #96]	; (81ec <setDlFrequency+0x94>)
    818c:	4798      	blx	r3
    818e:	0004      	movs	r4, r0
    8190:	2808      	cmp	r0, #8
    8192:	d001      	beq.n	8198 <setDlFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    8194:	240a      	movs	r4, #10
    8196:	e7f3      	b.n	8180 <setDlFrequency+0x28>
		RegParams.pOtherChParams[updateDlFreq.channelIndex].rx1Frequency = updateDlFreq.frequencyNew;
    8198:	4a15      	ldr	r2, [pc, #84]	; (81f0 <setDlFrequency+0x98>)
    819a:	7a13      	ldrb	r3, [r2, #8]
    819c:	7a50      	ldrb	r0, [r2, #9]
    819e:	0200      	lsls	r0, r0, #8
    81a0:	4303      	orrs	r3, r0
    81a2:	7a90      	ldrb	r0, [r2, #10]
    81a4:	0400      	lsls	r0, r0, #16
    81a6:	4318      	orrs	r0, r3
    81a8:	7ad3      	ldrb	r3, [r2, #11]
    81aa:	061b      	lsls	r3, r3, #24
    81ac:	4318      	orrs	r0, r3
    81ae:	a902      	add	r1, sp, #8
    81b0:	790d      	ldrb	r5, [r1, #4]
    81b2:	006b      	lsls	r3, r5, #1
    81b4:	195b      	adds	r3, r3, r5
    81b6:	009b      	lsls	r3, r3, #2
    81b8:	181b      	adds	r3, r3, r0
    81ba:	7808      	ldrb	r0, [r1, #0]
    81bc:	7118      	strb	r0, [r3, #4]
    81be:	7848      	ldrb	r0, [r1, #1]
    81c0:	7158      	strb	r0, [r3, #5]
    81c2:	7888      	ldrb	r0, [r1, #2]
    81c4:	7198      	strb	r0, [r3, #6]
    81c6:	78c9      	ldrb	r1, [r1, #3]
    81c8:	71d9      	strb	r1, [r3, #7]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    81ca:	2384      	movs	r3, #132	; 0x84
    81cc:	009b      	lsls	r3, r3, #2
    81ce:	5cd3      	ldrb	r3, [r2, r3]
    81d0:	4908      	ldr	r1, [pc, #32]	; (81f4 <setDlFrequency+0x9c>)
    81d2:	5c50      	ldrb	r0, [r2, r1]
    81d4:	0200      	lsls	r0, r0, #8
    81d6:	4318      	orrs	r0, r3
    81d8:	b2c1      	uxtb	r1, r0
    81da:	0a00      	lsrs	r0, r0, #8
    81dc:	4b06      	ldr	r3, [pc, #24]	; (81f8 <setDlFrequency+0xa0>)
    81de:	4798      	blx	r3
    81e0:	e7ce      	b.n	8180 <setDlFrequency+0x28>
    81e2:	46c0      	nop			; (mov r8, r8)
    81e4:	00015f45 	.word	0x00015f45
    81e8:	20000d84 	.word	0x20000d84
    81ec:	00006cad 	.word	0x00006cad
    81f0:	20001b54 	.word	0x20001b54
    81f4:	00000211 	.word	0x00000211
    81f8:	0000af89 	.word	0x0000af89

000081fc <setFrequency>:
{
    81fc:	b570      	push	{r4, r5, r6, lr}
    81fe:	b084      	sub	sp, #16
	memcpy(&updateTxFreq,attrInput,sizeof(ValUpdateFreqTx_t));
    8200:	ac02      	add	r4, sp, #8
    8202:	2208      	movs	r2, #8
    8204:	0020      	movs	r0, r4
    8206:	4b3f      	ldr	r3, [pc, #252]	; (8304 <setFrequency+0x108>)
    8208:	4798      	blx	r3
	valChid.channelIndex = updateTxFreq.channelIndex;
    820a:	ab01      	add	r3, sp, #4
    820c:	7922      	ldrb	r2, [r4, #4]
    820e:	701a      	strb	r2, [r3, #0]
	valChid.allowedForDefaultChannels = WITHOUT_DEFAULT_CHANNELS;
    8210:	2200      	movs	r2, #0
    8212:	705a      	strb	r2, [r3, #1]
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    8214:	4b3c      	ldr	r3, [pc, #240]	; (8308 <setFrequency+0x10c>)
    8216:	685b      	ldr	r3, [r3, #4]
    8218:	0021      	movs	r1, r4
    821a:	2001      	movs	r0, #1
    821c:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    821e:	240a      	movs	r4, #10
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    8220:	2808      	cmp	r0, #8
    8222:	d002      	beq.n	822a <setFrequency+0x2e>
}
    8224:	0020      	movs	r0, r4
    8226:	b004      	add	sp, #16
    8228:	bd70      	pop	{r4, r5, r6, pc}
	if(pValidateAttr[RX_FREQUENCY](RX_FREQUENCY,&updateTxFreq.frequencyNew) != LORAWAN_SUCCESS || ValidateChannelIdT2(CHANNEL_ID, &valChid) != LORAWAN_SUCCESS)
    822a:	a901      	add	r1, sp, #4
    822c:	300d      	adds	r0, #13
    822e:	4b37      	ldr	r3, [pc, #220]	; (830c <setFrequency+0x110>)
    8230:	4798      	blx	r3
    8232:	0004      	movs	r4, r0
    8234:	2808      	cmp	r0, #8
    8236:	d001      	beq.n	823c <setFrequency+0x40>
		result = LORAWAN_INVALID_PARAMETER;
    8238:	240a      	movs	r4, #10
    823a:	e7f3      	b.n	8224 <setFrequency+0x28>
		uint8_t chIndx = updateTxFreq.channelIndex;
    823c:	ab02      	add	r3, sp, #8
    823e:	791d      	ldrb	r5, [r3, #4]
		if(((1 << RegParams.band) & (ISM_EUBAND)) != 0)
    8240:	232e      	movs	r3, #46	; 0x2e
    8242:	4a33      	ldr	r2, [pc, #204]	; (8310 <setFrequency+0x114>)
    8244:	5cd2      	ldrb	r2, [r2, r3]
    8246:	3b2b      	subs	r3, #43	; 0x2b
    8248:	4113      	asrs	r3, r2
    824a:	07db      	lsls	r3, r3, #31
    824c:	d445      	bmi.n	82da <setFrequency+0xde>
		RegParams.pOtherChParams[chIndx].ulfrequency = updateTxFreq.frequencyNew;
    824e:	006a      	lsls	r2, r5, #1
    8250:	1952      	adds	r2, r2, r5
    8252:	0090      	lsls	r0, r2, #2
    8254:	a902      	add	r1, sp, #8
    8256:	9d02      	ldr	r5, [sp, #8]
    8258:	4b2d      	ldr	r3, [pc, #180]	; (8310 <setFrequency+0x114>)
    825a:	7a1a      	ldrb	r2, [r3, #8]
    825c:	7a5e      	ldrb	r6, [r3, #9]
    825e:	0236      	lsls	r6, r6, #8
    8260:	4316      	orrs	r6, r2
    8262:	7a9a      	ldrb	r2, [r3, #10]
    8264:	0412      	lsls	r2, r2, #16
    8266:	4316      	orrs	r6, r2
    8268:	7ada      	ldrb	r2, [r3, #11]
    826a:	0612      	lsls	r2, r2, #24
    826c:	4332      	orrs	r2, r6
    826e:	5415      	strb	r5, [r2, r0]
    8270:	0a2e      	lsrs	r6, r5, #8
    8272:	1812      	adds	r2, r2, r0
    8274:	7056      	strb	r6, [r2, #1]
    8276:	0c2e      	lsrs	r6, r5, #16
    8278:	7096      	strb	r6, [r2, #2]
    827a:	0e2d      	lsrs	r5, r5, #24
    827c:	70d5      	strb	r5, [r2, #3]
		RegParams.pOtherChParams[chIndx].rx1Frequency = updateTxFreq.frequencyNew;
    827e:	7a1a      	ldrb	r2, [r3, #8]
    8280:	7a5d      	ldrb	r5, [r3, #9]
    8282:	022d      	lsls	r5, r5, #8
    8284:	4315      	orrs	r5, r2
    8286:	7a9a      	ldrb	r2, [r3, #10]
    8288:	0412      	lsls	r2, r2, #16
    828a:	4315      	orrs	r5, r2
    828c:	7ada      	ldrb	r2, [r3, #11]
    828e:	0612      	lsls	r2, r2, #24
    8290:	432a      	orrs	r2, r5
    8292:	1812      	adds	r2, r2, r0
    8294:	780d      	ldrb	r5, [r1, #0]
    8296:	7115      	strb	r5, [r2, #4]
    8298:	784d      	ldrb	r5, [r1, #1]
    829a:	7155      	strb	r5, [r2, #5]
    829c:	788d      	ldrb	r5, [r1, #2]
    829e:	7195      	strb	r5, [r2, #6]
    82a0:	78c9      	ldrb	r1, [r1, #3]
    82a2:	71d1      	strb	r1, [r2, #7]
		RegParams.pOtherChParams[chIndx].parametersDefined |= FREQUENCY_DEFINED;
    82a4:	7a1a      	ldrb	r2, [r3, #8]
    82a6:	7a59      	ldrb	r1, [r3, #9]
    82a8:	0209      	lsls	r1, r1, #8
    82aa:	4311      	orrs	r1, r2
    82ac:	7a9a      	ldrb	r2, [r3, #10]
    82ae:	0412      	lsls	r2, r2, #16
    82b0:	4311      	orrs	r1, r2
    82b2:	7ada      	ldrb	r2, [r3, #11]
    82b4:	0612      	lsls	r2, r2, #24
    82b6:	430a      	orrs	r2, r1
    82b8:	1812      	adds	r2, r2, r0
    82ba:	7ad1      	ldrb	r1, [r2, #11]
    82bc:	2001      	movs	r0, #1
    82be:	4301      	orrs	r1, r0
    82c0:	72d1      	strb	r1, [r2, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    82c2:	2284      	movs	r2, #132	; 0x84
    82c4:	0092      	lsls	r2, r2, #2
    82c6:	5c9a      	ldrb	r2, [r3, r2]
    82c8:	4912      	ldr	r1, [pc, #72]	; (8314 <setFrequency+0x118>)
    82ca:	5c58      	ldrb	r0, [r3, r1]
    82cc:	0200      	lsls	r0, r0, #8
    82ce:	4310      	orrs	r0, r2
    82d0:	b2c1      	uxtb	r1, r0
    82d2:	0a00      	lsrs	r0, r0, #8
    82d4:	4b10      	ldr	r3, [pc, #64]	; (8318 <setFrequency+0x11c>)
    82d6:	4798      	blx	r3
    82d8:	e7a4      	b.n	8224 <setFrequency+0x28>
		    RegParams.pOtherChParams[chIndx].subBandId = getSubBandId(updateTxFreq.frequencyNew);
    82da:	4a0d      	ldr	r2, [pc, #52]	; (8310 <setFrequency+0x114>)
    82dc:	7a16      	ldrb	r6, [r2, #8]
    82de:	7a53      	ldrb	r3, [r2, #9]
    82e0:	021b      	lsls	r3, r3, #8
    82e2:	4333      	orrs	r3, r6
    82e4:	7a96      	ldrb	r6, [r2, #10]
    82e6:	0436      	lsls	r6, r6, #16
    82e8:	4333      	orrs	r3, r6
    82ea:	7ad6      	ldrb	r6, [r2, #11]
    82ec:	0636      	lsls	r6, r6, #24
    82ee:	431e      	orrs	r6, r3
    82f0:	006b      	lsls	r3, r5, #1
    82f2:	195b      	adds	r3, r3, r5
    82f4:	009b      	lsls	r3, r3, #2
    82f6:	18f6      	adds	r6, r6, r3
    82f8:	9802      	ldr	r0, [sp, #8]
    82fa:	4b08      	ldr	r3, [pc, #32]	; (831c <setFrequency+0x120>)
    82fc:	4798      	blx	r3
    82fe:	7230      	strb	r0, [r6, #8]
    8300:	e7a5      	b.n	824e <setFrequency+0x52>
    8302:	46c0      	nop			; (mov r8, r8)
    8304:	00015f45 	.word	0x00015f45
    8308:	20000d84 	.word	0x20000d84
    830c:	00006cad 	.word	0x00006cad
    8310:	20001b54 	.word	0x20001b54
    8314:	00000211 	.word	0x00000211
    8318:	0000af89 	.word	0x0000af89
    831c:	00006f45 	.word	0x00006f45

00008320 <setDutyCycle>:
{
    8320:	b570      	push	{r4, r5, r6, lr}
    8322:	b082      	sub	sp, #8
    memcpy(&updateDCycle,attrInput,sizeof(UpdateDutyCycle_t));
    8324:	ac01      	add	r4, sp, #4
    8326:	2204      	movs	r2, #4
    8328:	0020      	movs	r0, r4
    832a:	4b2d      	ldr	r3, [pc, #180]	; (83e0 <setDutyCycle+0xc0>)
    832c:	4798      	blx	r3
	val_chid.channelIndex = updateDCycle.channelIndex;
    832e:	78a5      	ldrb	r5, [r4, #2]
    8330:	466b      	mov	r3, sp
    8332:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    8334:	2301      	movs	r3, #1
    8336:	466a      	mov	r2, sp
    8338:	7053      	strb	r3, [r2, #1]
	if(ValidateChannelIdT2(CHANNEL_ID, &val_chid) == LORAWAN_SUCCESS)
    833a:	4669      	mov	r1, sp
    833c:	2015      	movs	r0, #21
    833e:	4b29      	ldr	r3, [pc, #164]	; (83e4 <setDutyCycle+0xc4>)
    8340:	4798      	blx	r3
    8342:	0004      	movs	r4, r0
    8344:	2808      	cmp	r0, #8
    8346:	d003      	beq.n	8350 <setDutyCycle+0x30>
		result = LORAWAN_INVALID_PARAMETER;
    8348:	240a      	movs	r4, #10
}
    834a:	0020      	movs	r0, r4
    834c:	b002      	add	sp, #8
    834e:	bd70      	pop	{r4, r5, r6, pc}
		bandId = RegParams.pOtherChParams[updateDCycle.channelIndex].subBandId;
    8350:	0069      	lsls	r1, r5, #1
    8352:	1949      	adds	r1, r1, r5
    8354:	0089      	lsls	r1, r1, #2
    8356:	4b24      	ldr	r3, [pc, #144]	; (83e8 <setDutyCycle+0xc8>)
    8358:	7a1a      	ldrb	r2, [r3, #8]
    835a:	7a58      	ldrb	r0, [r3, #9]
    835c:	0200      	lsls	r0, r0, #8
    835e:	4310      	orrs	r0, r2
    8360:	7a9a      	ldrb	r2, [r3, #10]
    8362:	0412      	lsls	r2, r2, #16
    8364:	4310      	orrs	r0, r2
    8366:	7ada      	ldrb	r2, [r3, #11]
    8368:	0612      	lsls	r2, r2, #24
    836a:	4302      	orrs	r2, r0
    836c:	1852      	adds	r2, r2, r1
    836e:	7a15      	ldrb	r5, [r2, #8]
		RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] = updateDCycle.dutyCycleNew;
    8370:	0028      	movs	r0, r5
    8372:	30d4      	adds	r0, #212	; 0xd4
    8374:	0040      	lsls	r0, r0, #1
    8376:	aa01      	add	r2, sp, #4
    8378:	1818      	adds	r0, r3, r0
    837a:	7816      	ldrb	r6, [r2, #0]
    837c:	7146      	strb	r6, [r0, #5]
    837e:	7852      	ldrb	r2, [r2, #1]
    8380:	7182      	strb	r2, [r0, #6]
		RegParams.pSubBandParams[bandId].subBandTimeout = 0;
    8382:	7b18      	ldrb	r0, [r3, #12]
    8384:	7b5a      	ldrb	r2, [r3, #13]
    8386:	0212      	lsls	r2, r2, #8
    8388:	4302      	orrs	r2, r0
    838a:	7b98      	ldrb	r0, [r3, #14]
    838c:	0400      	lsls	r0, r0, #16
    838e:	4302      	orrs	r2, r0
    8390:	7bd8      	ldrb	r0, [r3, #15]
    8392:	0600      	lsls	r0, r0, #24
    8394:	4310      	orrs	r0, r2
    8396:	006a      	lsls	r2, r5, #1
    8398:	1952      	adds	r2, r2, r5
    839a:	0092      	lsls	r2, r2, #2
    839c:	1812      	adds	r2, r2, r0
    839e:	2000      	movs	r0, #0
    83a0:	7210      	strb	r0, [r2, #8]
    83a2:	7250      	strb	r0, [r2, #9]
    83a4:	7290      	strb	r0, [r2, #10]
    83a6:	72d0      	strb	r0, [r2, #11]
		RegParams.pOtherChParams[updateDCycle.channelIndex].parametersDefined |= DUTY_CYCLE_DEFINED;
    83a8:	7a1d      	ldrb	r5, [r3, #8]
    83aa:	7a5a      	ldrb	r2, [r3, #9]
    83ac:	0212      	lsls	r2, r2, #8
    83ae:	432a      	orrs	r2, r5
    83b0:	7a9d      	ldrb	r5, [r3, #10]
    83b2:	042d      	lsls	r5, r5, #16
    83b4:	432a      	orrs	r2, r5
    83b6:	7add      	ldrb	r5, [r3, #11]
    83b8:	062d      	lsls	r5, r5, #24
    83ba:	4315      	orrs	r5, r2
    83bc:	186d      	adds	r5, r5, r1
    83be:	7aea      	ldrb	r2, [r5, #11]
    83c0:	2104      	movs	r1, #4
    83c2:	430a      	orrs	r2, r1
    83c4:	72ea      	strb	r2, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    83c6:	2284      	movs	r2, #132	; 0x84
    83c8:	0092      	lsls	r2, r2, #2
    83ca:	5c9a      	ldrb	r2, [r3, r2]
    83cc:	4907      	ldr	r1, [pc, #28]	; (83ec <setDutyCycle+0xcc>)
    83ce:	5c58      	ldrb	r0, [r3, r1]
    83d0:	0200      	lsls	r0, r0, #8
    83d2:	4310      	orrs	r0, r2
    83d4:	b2c1      	uxtb	r1, r0
    83d6:	0a00      	lsrs	r0, r0, #8
    83d8:	4b05      	ldr	r3, [pc, #20]	; (83f0 <setDutyCycle+0xd0>)
    83da:	4798      	blx	r3
    83dc:	e7b5      	b.n	834a <setDutyCycle+0x2a>
    83de:	46c0      	nop			; (mov r8, r8)
    83e0:	00015f45 	.word	0x00015f45
    83e4:	00006cad 	.word	0x00006cad
    83e8:	20001b54 	.word	0x20001b54
    83ec:	00000211 	.word	0x00000211
    83f0:	0000af89 	.word	0x0000af89

000083f4 <SearchAvailableChannel2>:
{
    83f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    83f6:	46de      	mov	lr, fp
    83f8:	4657      	mov	r7, sl
    83fa:	464e      	mov	r6, r9
    83fc:	4645      	mov	r5, r8
    83fe:	b5e0      	push	{r5, r6, r7, lr}
    8400:	b087      	sub	sp, #28
    8402:	af00      	add	r7, sp, #0
    8404:	0004      	movs	r4, r0
    8406:	4688      	mov	r8, r1
    8408:	60f9      	str	r1, [r7, #12]
    840a:	0015      	movs	r5, r2
    840c:	607b      	str	r3, [r7, #4]
	uint8_t ChList[maxChannels];
    840e:	1dc3      	adds	r3, r0, #7
    8410:	08db      	lsrs	r3, r3, #3
    8412:	00db      	lsls	r3, r3, #3
    8414:	466a      	mov	r2, sp
    8416:	1ad3      	subs	r3, r2, r3
    8418:	469d      	mov	sp, r3
    841a:	613b      	str	r3, [r7, #16]
	memset(ChList, 0, sizeof(ChList));
    841c:	0002      	movs	r2, r0
    841e:	2100      	movs	r1, #0
    8420:	4668      	mov	r0, sp
    8422:	4b5c      	ldr	r3, [pc, #368]	; (8594 <SearchAvailableChannel2+0x1a0>)
    8424:	4798      	blx	r3
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    8426:	232e      	movs	r3, #46	; 0x2e
    8428:	4a5b      	ldr	r2, [pc, #364]	; (8598 <SearchAvailableChannel2+0x1a4>)
    842a:	5cd6      	ldrb	r6, [r2, r3]
    if(transmissionType == false)
    842c:	4643      	mov	r3, r8
    842e:	2b00      	cmp	r3, #0
    8430:	d148      	bne.n	84c4 <SearchAvailableChannel2+0xd0>
	    if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    8432:	3320      	adds	r3, #32
    8434:	5cd3      	ldrb	r3, [r2, r3]
    8436:	069b      	lsls	r3, r3, #26
    8438:	d431      	bmi.n	849e <SearchAvailableChannel2+0xaa>
		result = LORAWAN_NO_CHANNELS_FOUND;
    843a:	2010      	movs	r0, #16
	for (i = 0; i < maxChannels; i++)
    843c:	2c00      	cmp	r4, #0
    843e:	d100      	bne.n	8442 <SearchAvailableChannel2+0x4e>
    8440:	e093      	b.n	856a <SearchAvailableChannel2+0x176>
	bool bandWithoutDutyCycle = (((1 << RegParams.band) & (ISM_EUBAND | ISM_ASBAND | (1 << ISM_JPN923))) == 0);
    8442:	4b56      	ldr	r3, [pc, #344]	; (859c <SearchAvailableChannel2+0x1a8>)
    8444:	4133      	asrs	r3, r6
    8446:	2201      	movs	r2, #1
    8448:	401a      	ands	r2, r3
    844a:	4690      	mov	r8, r2
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    844c:	4b52      	ldr	r3, [pc, #328]	; (8598 <SearchAvailableChannel2+0x1a4>)
    844e:	7b19      	ldrb	r1, [r3, #12]
    8450:	7b5a      	ldrb	r2, [r3, #13]
    8452:	0212      	lsls	r2, r2, #8
    8454:	4311      	orrs	r1, r2
    8456:	7b9a      	ldrb	r2, [r3, #14]
    8458:	0412      	lsls	r2, r2, #16
    845a:	430a      	orrs	r2, r1
    845c:	7bd9      	ldrb	r1, [r3, #15]
    845e:	0609      	lsls	r1, r1, #24
    8460:	4311      	orrs	r1, r2
    8462:	468c      	mov	ip, r1
    8464:	7a18      	ldrb	r0, [r3, #8]
    8466:	7a5a      	ldrb	r2, [r3, #9]
    8468:	0212      	lsls	r2, r2, #8
    846a:	4302      	orrs	r2, r0
    846c:	7a98      	ldrb	r0, [r3, #10]
    846e:	0400      	lsls	r0, r0, #16
    8470:	4302      	orrs	r2, r0
    8472:	7ad8      	ldrb	r0, [r3, #11]
    8474:	0600      	lsls	r0, r0, #24
    8476:	4310      	orrs	r0, r2
			if ((RegParams.pChParams[i].status == ENABLED) &&
    8478:	791a      	ldrb	r2, [r3, #4]
    847a:	7959      	ldrb	r1, [r3, #5]
    847c:	0209      	lsls	r1, r1, #8
    847e:	4311      	orrs	r1, r2
    8480:	799a      	ldrb	r2, [r3, #6]
    8482:	0412      	lsls	r2, r2, #16
    8484:	4311      	orrs	r1, r2
    8486:	79da      	ldrb	r2, [r3, #7]
    8488:	0612      	lsls	r2, r2, #24
    848a:	430a      	orrs	r2, r1
    848c:	0006      	movs	r6, r0
    848e:	3608      	adds	r6, #8
    8490:	3009      	adds	r0, #9
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    8492:	2300      	movs	r3, #0
    8494:	617b      	str	r3, [r7, #20]
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    8496:	46aa      	mov	sl, r5
    8498:	46a9      	mov	r9, r5
    849a:	0025      	movs	r5, r4
    849c:	e036      	b.n	850c <SearchAvailableChannel2+0x118>
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    849e:	0011      	movs	r1, r2
    84a0:	7d13      	ldrb	r3, [r2, #20]
    84a2:	7d52      	ldrb	r2, [r2, #21]
    84a4:	0212      	lsls	r2, r2, #8
    84a6:	431a      	orrs	r2, r3
    84a8:	7d8b      	ldrb	r3, [r1, #22]
    84aa:	041b      	lsls	r3, r3, #16
    84ac:	431a      	orrs	r2, r3
    84ae:	7dcb      	ldrb	r3, [r1, #23]
    84b0:	061b      	lsls	r3, r3, #24
    84b2:	4313      	orrs	r3, r2
    84b4:	7a18      	ldrb	r0, [r3, #8]
    84b6:	4b3a      	ldr	r3, [pc, #232]	; (85a0 <SearchAvailableChannel2+0x1ac>)
    84b8:	4798      	blx	r3
    84ba:	0003      	movs	r3, r0
			    return LORAWAN_NO_CHANNELS_FOUND;
    84bc:	2010      	movs	r0, #16
		    if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId)) //check timerrunning
    84be:	2b00      	cmp	r3, #0
    84c0:	d0bb      	beq.n	843a <SearchAvailableChannel2+0x46>
    84c2:	e052      	b.n	856a <SearchAvailableChannel2+0x176>
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    84c4:	4934      	ldr	r1, [pc, #208]	; (8598 <SearchAvailableChannel2+0x1a4>)
    84c6:	23ba      	movs	r3, #186	; 0xba
    84c8:	33ff      	adds	r3, #255	; 0xff
    84ca:	5ccb      	ldrb	r3, [r1, r3]
    84cc:	22dd      	movs	r2, #221	; 0xdd
    84ce:	0052      	lsls	r2, r2, #1
    84d0:	5c8a      	ldrb	r2, [r1, r2]
    84d2:	0212      	lsls	r2, r2, #8
    84d4:	431a      	orrs	r2, r3
    84d6:	23bc      	movs	r3, #188	; 0xbc
    84d8:	33ff      	adds	r3, #255	; 0xff
    84da:	5ccb      	ldrb	r3, [r1, r3]
    84dc:	041b      	lsls	r3, r3, #16
    84de:	431a      	orrs	r2, r3
    84e0:	23de      	movs	r3, #222	; 0xde
    84e2:	005b      	lsls	r3, r3, #1
    84e4:	5ccb      	ldrb	r3, [r1, r3]
    84e6:	061b      	lsls	r3, r3, #24
    84e8:	4313      	orrs	r3, r2
		    return LORAWAN_NO_CHANNELS_FOUND;
    84ea:	2010      	movs	r0, #16
	    if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout)
    84ec:	2b00      	cmp	r3, #0
    84ee:	d0a4      	beq.n	843a <SearchAvailableChannel2+0x46>
    84f0:	e03b      	b.n	856a <SearchAvailableChannel2+0x176>
					ChList[num] = i;
    84f2:	693c      	ldr	r4, [r7, #16]
    84f4:	6979      	ldr	r1, [r7, #20]
    84f6:	5463      	strb	r3, [r4, r1]
					num++;
    84f8:	3101      	adds	r1, #1
    84fa:	b2c9      	uxtb	r1, r1
    84fc:	6179      	str	r1, [r7, #20]
	for (i = 0; i < maxChannels; i++)
    84fe:	3301      	adds	r3, #1
    8500:	b2db      	uxtb	r3, r3
    8502:	3202      	adds	r2, #2
    8504:	360c      	adds	r6, #12
    8506:	300c      	adds	r0, #12
    8508:	429d      	cmp	r5, r3
    850a:	d02a      	beq.n	8562 <SearchAvailableChannel2+0x16e>
			if ((RegParams.pChParams[i].status == ENABLED) &&
    850c:	7811      	ldrb	r1, [r2, #0]
    850e:	2900      	cmp	r1, #0
    8510:	d0f5      	beq.n	84fe <SearchAvailableChannel2+0x10a>
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    8512:	7851      	ldrb	r1, [r2, #1]
    8514:	0709      	lsls	r1, r1, #28
    8516:	0f09      	lsrs	r1, r1, #28
			if ((RegParams.pChParams[i].status == ENABLED) &&
    8518:	4589      	cmp	r9, r1
    851a:	dbf0      	blt.n	84fe <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    851c:	7851      	ldrb	r1, [r2, #1]
    851e:	0909      	lsrs	r1, r1, #4
				(currDr >= RegParams.pChParams[i].dataRange.min) &&
    8520:	458a      	cmp	sl, r1
    8522:	dcec      	bgt.n	84fe <SearchAvailableChannel2+0x10a>
				(currDr <= RegParams.pChParams[i].dataRange.max)&&
    8524:	4641      	mov	r1, r8
    8526:	2900      	cmp	r1, #0
    8528:	d014      	beq.n	8554 <SearchAvailableChannel2+0x160>
				(bandWithoutDutyCycle || RegParams.pSubBandParams[RegParams.pOtherChParams[i].subBandId].subBandTimeout == 0))
    852a:	7834      	ldrb	r4, [r6, #0]
    852c:	0061      	lsls	r1, r4, #1
    852e:	1909      	adds	r1, r1, r4
    8530:	0089      	lsls	r1, r1, #2
    8532:	4461      	add	r1, ip
    8534:	7a0c      	ldrb	r4, [r1, #8]
    8536:	46a3      	mov	fp, r4
    8538:	60b9      	str	r1, [r7, #8]
    853a:	7a4c      	ldrb	r4, [r1, #9]
    853c:	0224      	lsls	r4, r4, #8
    853e:	4659      	mov	r1, fp
    8540:	430c      	orrs	r4, r1
    8542:	68b9      	ldr	r1, [r7, #8]
    8544:	7a89      	ldrb	r1, [r1, #10]
    8546:	0409      	lsls	r1, r1, #16
    8548:	430c      	orrs	r4, r1
    854a:	68b9      	ldr	r1, [r7, #8]
    854c:	7ac9      	ldrb	r1, [r1, #11]
    854e:	0609      	lsls	r1, r1, #24
    8550:	4321      	orrs	r1, r4
    8552:	d1d4      	bne.n	84fe <SearchAvailableChannel2+0x10a>
				if(((transmissionType == 0)  && (RegParams.pOtherChParams[i].joinRequestChannel == 1)) || (transmissionType != 0)) 
    8554:	68f9      	ldr	r1, [r7, #12]
    8556:	2900      	cmp	r1, #0
    8558:	d1cb      	bne.n	84f2 <SearchAvailableChannel2+0xfe>
    855a:	7801      	ldrb	r1, [r0, #0]
    855c:	2900      	cmp	r1, #0
    855e:	d0ce      	beq.n	84fe <SearchAvailableChannel2+0x10a>
    8560:	e7c7      	b.n	84f2 <SearchAvailableChannel2+0xfe>
		result = LORAWAN_NO_CHANNELS_FOUND;
    8562:	2010      	movs	r0, #16
	if(0 != num)
    8564:	697c      	ldr	r4, [r7, #20]
    8566:	2c00      	cmp	r4, #0
    8568:	d107      	bne.n	857a <SearchAvailableChannel2+0x186>
}
    856a:	46bd      	mov	sp, r7
    856c:	b007      	add	sp, #28
    856e:	bc3c      	pop	{r2, r3, r4, r5}
    8570:	4690      	mov	r8, r2
    8572:	4699      	mov	r9, r3
    8574:	46a2      	mov	sl, r4
    8576:	46ab      	mov	fp, r5
    8578:	bdf0      	pop	{r4, r5, r6, r7, pc}
		randomNumber = rand() % num;
    857a:	4b0a      	ldr	r3, [pc, #40]	; (85a4 <SearchAvailableChannel2+0x1b0>)
    857c:	4798      	blx	r3
    857e:	0021      	movs	r1, r4
    8580:	4b09      	ldr	r3, [pc, #36]	; (85a8 <SearchAvailableChannel2+0x1b4>)
    8582:	4798      	blx	r3
		*channelIndex = ChList[randomNumber];
    8584:	23ff      	movs	r3, #255	; 0xff
    8586:	4019      	ands	r1, r3
    8588:	693b      	ldr	r3, [r7, #16]
    858a:	5c5b      	ldrb	r3, [r3, r1]
    858c:	687a      	ldr	r2, [r7, #4]
    858e:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    8590:	2008      	movs	r0, #8
    8592:	e7ea      	b.n	856a <SearchAvailableChannel2+0x176>
    8594:	00015fc9 	.word	0x00015fc9
    8598:	20001b54 	.word	0x20001b54
    859c:	00007fe3 	.word	0x00007fe3
    85a0:	0000c0c1 	.word	0x0000c0c1
    85a4:	00016149 	.word	0x00016149
    85a8:	00012ff1 	.word	0x00012ff1

000085ac <LORAREG_GetAttr_FreeChannel2>:
{
    85ac:	b570      	push	{r4, r5, r6, lr}
	memcpy(&newFreeChannelReq,(NewFreeChannelReq_t *)attrInput,sizeof(NewFreeChannelReq_t));
    85ae:	784c      	ldrb	r4, [r1, #1]
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    85b0:	202a      	movs	r0, #42	; 0x2a
    85b2:	4d07      	ldr	r5, [pc, #28]	; (85d0 <LORAREG_GetAttr_FreeChannel2+0x24>)
    85b4:	562d      	ldrsb	r5, [r5, r0]
		return LORAWAN_INVALID_PARAMETER;
    85b6:	3820      	subs	r0, #32
	if(newFreeChannelReq.maxChannels > RegParams.maxChannels)
    85b8:	42ac      	cmp	r4, r5
    85ba:	dd00      	ble.n	85be <LORAREG_GetAttr_FreeChannel2+0x12>
}
    85bc:	bd70      	pop	{r4, r5, r6, pc}
		result = SearchAvailableChannel2(newFreeChannelReq.maxChannels,newFreeChannelReq.transmissionType,newFreeChannelReq.currDr,(uint8_t*)attrOutput);
    85be:	7888      	ldrb	r0, [r1, #2]
    85c0:	7809      	ldrb	r1, [r1, #0]
    85c2:	0013      	movs	r3, r2
    85c4:	0002      	movs	r2, r0
    85c6:	0020      	movs	r0, r4
    85c8:	4c02      	ldr	r4, [pc, #8]	; (85d4 <LORAREG_GetAttr_FreeChannel2+0x28>)
    85ca:	47a0      	blx	r4
	return result;
    85cc:	e7f6      	b.n	85bc <LORAREG_GetAttr_FreeChannel2+0x10>
    85ce:	46c0      	nop			; (mov r8, r8)
    85d0:	20001b54 	.word	0x20001b54
    85d4:	000083f5 	.word	0x000083f5

000085d8 <setJoinBackoffCntl>:
{   
    85d8:	b500      	push	{lr}
    85da:	b083      	sub	sp, #12
	memcpy(&joinbackoffcntl,attrInput,sizeof(bool));
    85dc:	780b      	ldrb	r3, [r1, #0]
    85de:	466a      	mov	r2, sp
    85e0:	71d3      	strb	r3, [r2, #7]
	if(joinbackoffcntl == false)
    85e2:	2b00      	cmp	r3, #0
    85e4:	d145      	bne.n	8672 <setJoinBackoffCntl+0x9a>
		if(RegParams.FeaturesSupport & JOIN_BACKOFF_SUPPORT)
    85e6:	3320      	adds	r3, #32
    85e8:	4a26      	ldr	r2, [pc, #152]	; (8684 <setJoinBackoffCntl+0xac>)
    85ea:	5cd3      	ldrb	r3, [r2, r3]
    85ec:	069a      	lsls	r2, r3, #26
    85ee:	d546      	bpl.n	867e <setJoinBackoffCntl+0xa6>
			RegParams.FeaturesSupport &= ~JOIN_BACKOFF_SUPPORT;
    85f0:	4924      	ldr	r1, [pc, #144]	; (8684 <setJoinBackoffCntl+0xac>)
    85f2:	2220      	movs	r2, #32
    85f4:	4393      	bics	r3, r2
    85f6:	548b      	strb	r3, [r1, r2]
			if (SwTimerIsRunning(RegParams.pJoinBackoffTimer->timerId))
    85f8:	7e0b      	ldrb	r3, [r1, #24]
    85fa:	7e4a      	ldrb	r2, [r1, #25]
    85fc:	0212      	lsls	r2, r2, #8
    85fe:	431a      	orrs	r2, r3
    8600:	7e8b      	ldrb	r3, [r1, #26]
    8602:	041b      	lsls	r3, r3, #16
    8604:	431a      	orrs	r2, r3
    8606:	7ecb      	ldrb	r3, [r1, #27]
    8608:	061b      	lsls	r3, r3, #24
    860a:	4313      	orrs	r3, r2
    860c:	7818      	ldrb	r0, [r3, #0]
    860e:	4b1e      	ldr	r3, [pc, #120]	; (8688 <setJoinBackoffCntl+0xb0>)
    8610:	4798      	blx	r3
    8612:	2800      	cmp	r0, #0
    8614:	d11e      	bne.n	8654 <setJoinBackoffCntl+0x7c>
			if (SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    8616:	491b      	ldr	r1, [pc, #108]	; (8684 <setJoinBackoffCntl+0xac>)
    8618:	7d0b      	ldrb	r3, [r1, #20]
    861a:	7d4a      	ldrb	r2, [r1, #21]
    861c:	0212      	lsls	r2, r2, #8
    861e:	431a      	orrs	r2, r3
    8620:	7d8b      	ldrb	r3, [r1, #22]
    8622:	041b      	lsls	r3, r3, #16
    8624:	431a      	orrs	r2, r3
    8626:	7dcb      	ldrb	r3, [r1, #23]
    8628:	061b      	lsls	r3, r3, #24
    862a:	4313      	orrs	r3, r2
    862c:	7a18      	ldrb	r0, [r3, #8]
    862e:	4b16      	ldr	r3, [pc, #88]	; (8688 <setJoinBackoffCntl+0xb0>)
    8630:	4798      	blx	r3
    8632:	2800      	cmp	r0, #0
    8634:	d023      	beq.n	867e <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    8636:	4913      	ldr	r1, [pc, #76]	; (8684 <setJoinBackoffCntl+0xac>)
    8638:	7d0b      	ldrb	r3, [r1, #20]
    863a:	7d4a      	ldrb	r2, [r1, #21]
    863c:	0212      	lsls	r2, r2, #8
    863e:	431a      	orrs	r2, r3
    8640:	7d8b      	ldrb	r3, [r1, #22]
    8642:	041b      	lsls	r3, r3, #16
    8644:	431a      	orrs	r2, r3
    8646:	7dcb      	ldrb	r3, [r1, #23]
    8648:	061b      	lsls	r3, r3, #24
    864a:	4313      	orrs	r3, r2
    864c:	7a18      	ldrb	r0, [r3, #8]
    864e:	4b0f      	ldr	r3, [pc, #60]	; (868c <setJoinBackoffCntl+0xb4>)
    8650:	4798      	blx	r3
    8652:	e014      	b.n	867e <setJoinBackoffCntl+0xa6>
				SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    8654:	490b      	ldr	r1, [pc, #44]	; (8684 <setJoinBackoffCntl+0xac>)
    8656:	7e0b      	ldrb	r3, [r1, #24]
    8658:	7e4a      	ldrb	r2, [r1, #25]
    865a:	0212      	lsls	r2, r2, #8
    865c:	431a      	orrs	r2, r3
    865e:	7e8b      	ldrb	r3, [r1, #26]
    8660:	041b      	lsls	r3, r3, #16
    8662:	431a      	orrs	r2, r3
    8664:	7ecb      	ldrb	r3, [r1, #27]
    8666:	061b      	lsls	r3, r3, #24
    8668:	4313      	orrs	r3, r2
    866a:	7818      	ldrb	r0, [r3, #0]
    866c:	4b07      	ldr	r3, [pc, #28]	; (868c <setJoinBackoffCntl+0xb4>)
    866e:	4798      	blx	r3
    8670:	e7d1      	b.n	8616 <setJoinBackoffCntl+0x3e>
		RegParams.FeaturesSupport |= JOIN_BACKOFF_SUPPORT;
    8672:	4904      	ldr	r1, [pc, #16]	; (8684 <setJoinBackoffCntl+0xac>)
    8674:	2220      	movs	r2, #32
    8676:	5c8b      	ldrb	r3, [r1, r2]
    8678:	2020      	movs	r0, #32
    867a:	4303      	orrs	r3, r0
    867c:	548b      	strb	r3, [r1, r2]
}
    867e:	2008      	movs	r0, #8
    8680:	b003      	add	sp, #12
    8682:	bd00      	pop	{pc}
    8684:	20001b54 	.word	0x20001b54
    8688:	0000c0c1 	.word	0x0000c0c1
    868c:	0000c235 	.word	0x0000c235

00008690 <setJoinBackOffTimer>:
{
    8690:	b510      	push	{r4, lr}
    8692:	b084      	sub	sp, #16
	memcpy(&startJoinBackOffTimer,attrInput,sizeof(bool));
    8694:	780b      	ldrb	r3, [r1, #0]
    8696:	220f      	movs	r2, #15
    8698:	446a      	add	r2, sp
    869a:	7013      	strb	r3, [r2, #0]
	if(startJoinBackOffTimer == true)
    869c:	2b00      	cmp	r3, #0
    869e:	d113      	bne.n	86c8 <setJoinBackOffTimer+0x38>
		SwTimerStop(RegParams.pJoinBackoffTimer->timerId);
    86a0:	4c13      	ldr	r4, [pc, #76]	; (86f0 <setJoinBackOffTimer+0x60>)
    86a2:	7e23      	ldrb	r3, [r4, #24]
    86a4:	7e62      	ldrb	r2, [r4, #25]
    86a6:	0212      	lsls	r2, r2, #8
    86a8:	431a      	orrs	r2, r3
    86aa:	7ea3      	ldrb	r3, [r4, #26]
    86ac:	041b      	lsls	r3, r3, #16
    86ae:	431a      	orrs	r2, r3
    86b0:	7ee3      	ldrb	r3, [r4, #27]
    86b2:	061b      	lsls	r3, r3, #24
    86b4:	4313      	orrs	r3, r2
    86b6:	7818      	ldrb	r0, [r3, #0]
    86b8:	4b0e      	ldr	r3, [pc, #56]	; (86f4 <setJoinBackOffTimer+0x64>)
    86ba:	4798      	blx	r3
		RegParams.joinbccount = 0;
    86bc:	2200      	movs	r2, #0
    86be:	2342      	movs	r3, #66	; 0x42
    86c0:	54e2      	strb	r2, [r4, r3]
}
    86c2:	2008      	movs	r0, #8
    86c4:	b004      	add	sp, #16
    86c6:	bd10      	pop	{r4, pc}
		SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    86c8:	4909      	ldr	r1, [pc, #36]	; (86f0 <setJoinBackOffTimer+0x60>)
    86ca:	7e0b      	ldrb	r3, [r1, #24]
    86cc:	7e4a      	ldrb	r2, [r1, #25]
    86ce:	0212      	lsls	r2, r2, #8
    86d0:	431a      	orrs	r2, r3
    86d2:	7e8b      	ldrb	r3, [r1, #26]
    86d4:	041b      	lsls	r3, r3, #16
    86d6:	431a      	orrs	r2, r3
    86d8:	7ecb      	ldrb	r3, [r1, #27]
    86da:	061b      	lsls	r3, r3, #24
    86dc:	4313      	orrs	r3, r2
    86de:	7818      	ldrb	r0, [r3, #0]
    86e0:	2300      	movs	r3, #0
    86e2:	9300      	str	r3, [sp, #0]
    86e4:	4b04      	ldr	r3, [pc, #16]	; (86f8 <setJoinBackOffTimer+0x68>)
    86e6:	2200      	movs	r2, #0
    86e8:	4904      	ldr	r1, [pc, #16]	; (86fc <setJoinBackOffTimer+0x6c>)
    86ea:	4c05      	ldr	r4, [pc, #20]	; (8700 <setJoinBackOffTimer+0x70>)
    86ec:	47a0      	blx	r4
    86ee:	e7e8      	b.n	86c2 <setJoinBackOffTimer+0x32>
    86f0:	20001b54 	.word	0x20001b54
    86f4:	0000c235 	.word	0x0000c235
    86f8:	00009301 	.word	0x00009301
    86fc:	6b49d200 	.word	0x6b49d200
    8700:	0000bf29 	.word	0x0000bf29

00008704 <setJoinDutyCycleTimer>:
{
    8704:	b530      	push	{r4, r5, lr}
    8706:	b085      	sub	sp, #20
	memcpy(&UpdateJoinDutyCycleTimer,attrInput,sizeof(UpdateJoinDutyCycleTimer_t));
    8708:	ac02      	add	r4, sp, #8
    870a:	2208      	movs	r2, #8
    870c:	0020      	movs	r0, r4
    870e:	4b93      	ldr	r3, [pc, #588]	; (895c <setJoinDutyCycleTimer+0x258>)
    8710:	4798      	blx	r3
	if(UpdateJoinDutyCycleTimer.startJoinDutyCycleTimer == true)
    8712:	7923      	ldrb	r3, [r4, #4]
    8714:	2b00      	cmp	r3, #0
    8716:	d100      	bne.n	871a <setJoinDutyCycleTimer+0x16>
    8718:	e0f8      	b.n	890c <setJoinDutyCycleTimer+0x208>
			if(RegParams.joinbccount < AGGREGATEDTIME_1HR)
    871a:	2342      	movs	r3, #66	; 0x42
    871c:	4a90      	ldr	r2, [pc, #576]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    871e:	5cd3      	ldrb	r3, [r2, r3]
    8720:	2b01      	cmp	r3, #1
    8722:	d800      	bhi.n	8726 <setJoinDutyCycleTimer+0x22>
    8724:	e081      	b.n	882a <setJoinDutyCycleTimer+0x126>
			else if (RegParams.joinbccount < AGGREGATEDTIME_10HR)
    8726:	2b13      	cmp	r3, #19
    8728:	d900      	bls.n	872c <setJoinDutyCycleTimer+0x28>
    872a:	e08d      	b.n	8848 <setJoinDutyCycleTimer+0x144>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_10HR - 1);
    872c:	4b8d      	ldr	r3, [pc, #564]	; (8964 <setJoinDutyCycleTimer+0x260>)
    872e:	9a02      	ldr	r2, [sp, #8]
    8730:	4353      	muls	r3, r2
    8732:	4a8b      	ldr	r2, [pc, #556]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    8734:	323e      	adds	r2, #62	; 0x3e
    8736:	7013      	strb	r3, [r2, #0]
    8738:	0a19      	lsrs	r1, r3, #8
    873a:	7051      	strb	r1, [r2, #1]
    873c:	0c19      	lsrs	r1, r3, #16
    873e:	7091      	strb	r1, [r2, #2]
    8740:	0e1b      	lsrs	r3, r3, #24
    8742:	70d3      	strb	r3, [r2, #3]
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    8744:	4986      	ldr	r1, [pc, #536]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    8746:	7d0b      	ldrb	r3, [r1, #20]
    8748:	7d4a      	ldrb	r2, [r1, #21]
    874a:	0212      	lsls	r2, r2, #8
    874c:	431a      	orrs	r2, r3
    874e:	7d8b      	ldrb	r3, [r1, #22]
    8750:	041b      	lsls	r3, r3, #16
    8752:	431a      	orrs	r2, r3
    8754:	7dcb      	ldrb	r3, [r1, #23]
    8756:	061b      	lsls	r3, r3, #24
    8758:	4313      	orrs	r3, r2
    875a:	7a18      	ldrb	r0, [r3, #8]
    875c:	4b82      	ldr	r3, [pc, #520]	; (8968 <setJoinDutyCycleTimer+0x264>)
    875e:	4798      	blx	r3
	uint32_t delta = 0,ticks;
    8760:	2400      	movs	r4, #0
		if(SwTimerIsRunning(RegParams.pJoinDutyCycleTimer->timerId))
    8762:	2800      	cmp	r0, #0
    8764:	d17d      	bne.n	8862 <setJoinDutyCycleTimer+0x15e>
		if(RegParams.joinDutyCycleTimeout != 0)
    8766:	4b7e      	ldr	r3, [pc, #504]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    8768:	213e      	movs	r1, #62	; 0x3e
    876a:	5c59      	ldrb	r1, [r3, r1]
    876c:	203f      	movs	r0, #63	; 0x3f
    876e:	5c18      	ldrb	r0, [r3, r0]
    8770:	0200      	lsls	r0, r0, #8
    8772:	4308      	orrs	r0, r1
    8774:	2140      	movs	r1, #64	; 0x40
    8776:	5c59      	ldrb	r1, [r3, r1]
    8778:	0409      	lsls	r1, r1, #16
    877a:	4308      	orrs	r0, r1
    877c:	2141      	movs	r1, #65	; 0x41
    877e:	5c59      	ldrb	r1, [r3, r1]
    8780:	0609      	lsls	r1, r1, #24
    8782:	4301      	orrs	r1, r0
    8784:	d100      	bne.n	8788 <setJoinDutyCycleTimer+0x84>
    8786:	e0e5      	b.n	8954 <setJoinDutyCycleTimer+0x250>
			if(RegParams.joinDutyCycleTimeout > delta)
    8788:	428c      	cmp	r4, r1
    878a:	d300      	bcc.n	878e <setJoinDutyCycleTimer+0x8a>
    878c:	e0b6      	b.n	88fc <setJoinDutyCycleTimer+0x1f8>
				RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - delta;
    878e:	1b09      	subs	r1, r1, r4
    8790:	333e      	adds	r3, #62	; 0x3e
    8792:	7019      	strb	r1, [r3, #0]
    8794:	0a0a      	lsrs	r2, r1, #8
    8796:	705a      	strb	r2, [r3, #1]
    8798:	0c0a      	lsrs	r2, r1, #16
    879a:	709a      	strb	r2, [r3, #2]
    879c:	0e0a      	lsrs	r2, r1, #24
    879e:	70da      	strb	r2, [r3, #3]
				if(RegParams.joinDutyCycleTimeout > US_TO_MS(SWTIMER_MAX_TIMEOUT))
    87a0:	4b72      	ldr	r3, [pc, #456]	; (896c <setJoinDutyCycleTimer+0x268>)
    87a2:	4299      	cmp	r1, r3
    87a4:	d800      	bhi.n	87a8 <setJoinDutyCycleTimer+0xa4>
    87a6:	e093      	b.n	88d0 <setJoinDutyCycleTimer+0x1cc>
					RegParams.pJoinDutyCycleTimer->remainingtime =RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT)) ;
    87a8:	4c6d      	ldr	r4, [pc, #436]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    87aa:	7d23      	ldrb	r3, [r4, #20]
    87ac:	7d62      	ldrb	r2, [r4, #21]
    87ae:	0212      	lsls	r2, r2, #8
    87b0:	431a      	orrs	r2, r3
    87b2:	7da3      	ldrb	r3, [r4, #22]
    87b4:	041b      	lsls	r3, r3, #16
    87b6:	431a      	orrs	r2, r3
    87b8:	7de3      	ldrb	r3, [r4, #23]
    87ba:	061b      	lsls	r3, r3, #24
    87bc:	4313      	orrs	r3, r2
    87be:	4a6c      	ldr	r2, [pc, #432]	; (8970 <setJoinDutyCycleTimer+0x26c>)
    87c0:	4694      	mov	ip, r2
    87c2:	4461      	add	r1, ip
    87c4:	7119      	strb	r1, [r3, #4]
    87c6:	0a0a      	lsrs	r2, r1, #8
    87c8:	715a      	strb	r2, [r3, #5]
    87ca:	0c0a      	lsrs	r2, r1, #16
    87cc:	719a      	strb	r2, [r3, #6]
    87ce:	0e09      	lsrs	r1, r1, #24
    87d0:	71d9      	strb	r1, [r3, #7]
					SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    87d2:	7d23      	ldrb	r3, [r4, #20]
    87d4:	7d62      	ldrb	r2, [r4, #21]
    87d6:	0212      	lsls	r2, r2, #8
    87d8:	431a      	orrs	r2, r3
    87da:	7da3      	ldrb	r3, [r4, #22]
    87dc:	041b      	lsls	r3, r3, #16
    87de:	431a      	orrs	r2, r3
    87e0:	7de3      	ldrb	r3, [r4, #23]
    87e2:	061b      	lsls	r3, r3, #24
    87e4:	4313      	orrs	r3, r2
    87e6:	7a18      	ldrb	r0, [r3, #8]
    87e8:	2300      	movs	r3, #0
    87ea:	9300      	str	r3, [sp, #0]
    87ec:	4b61      	ldr	r3, [pc, #388]	; (8974 <setJoinDutyCycleTimer+0x270>)
    87ee:	2200      	movs	r2, #0
    87f0:	4961      	ldr	r1, [pc, #388]	; (8978 <setJoinDutyCycleTimer+0x274>)
    87f2:	4d62      	ldr	r5, [pc, #392]	; (897c <setJoinDutyCycleTimer+0x278>)
    87f4:	47a8      	blx	r5
					RegParams.joinDutyCycleTimeout = RegParams.joinDutyCycleTimeout - (US_TO_MS(SWTIMER_MAX_TIMEOUT));
    87f6:	233e      	movs	r3, #62	; 0x3e
    87f8:	5ce3      	ldrb	r3, [r4, r3]
    87fa:	223f      	movs	r2, #63	; 0x3f
    87fc:	5ca2      	ldrb	r2, [r4, r2]
    87fe:	0212      	lsls	r2, r2, #8
    8800:	431a      	orrs	r2, r3
    8802:	2340      	movs	r3, #64	; 0x40
    8804:	5ce3      	ldrb	r3, [r4, r3]
    8806:	041b      	lsls	r3, r3, #16
    8808:	431a      	orrs	r2, r3
    880a:	2341      	movs	r3, #65	; 0x41
    880c:	5ce3      	ldrb	r3, [r4, r3]
    880e:	061b      	lsls	r3, r3, #24
    8810:	4313      	orrs	r3, r2
    8812:	4a57      	ldr	r2, [pc, #348]	; (8970 <setJoinDutyCycleTimer+0x26c>)
    8814:	4694      	mov	ip, r2
    8816:	4463      	add	r3, ip
    8818:	343e      	adds	r4, #62	; 0x3e
    881a:	7023      	strb	r3, [r4, #0]
    881c:	0a1a      	lsrs	r2, r3, #8
    881e:	7062      	strb	r2, [r4, #1]
    8820:	0c1a      	lsrs	r2, r3, #16
    8822:	70a2      	strb	r2, [r4, #2]
    8824:	0e1b      	lsrs	r3, r3, #24
    8826:	70e3      	strb	r3, [r4, #3]
    8828:	e094      	b.n	8954 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_1HR - 1);
    882a:	9a02      	ldr	r2, [sp, #8]
    882c:	0053      	lsls	r3, r2, #1
    882e:	189b      	adds	r3, r3, r2
    8830:	015a      	lsls	r2, r3, #5
    8832:	189b      	adds	r3, r3, r2
    8834:	4a4a      	ldr	r2, [pc, #296]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    8836:	323e      	adds	r2, #62	; 0x3e
    8838:	7013      	strb	r3, [r2, #0]
    883a:	0a19      	lsrs	r1, r3, #8
    883c:	7051      	strb	r1, [r2, #1]
    883e:	0c19      	lsrs	r1, r3, #16
    8840:	7091      	strb	r1, [r2, #2]
    8842:	0e1b      	lsrs	r3, r3, #24
    8844:	70d3      	strb	r3, [r2, #3]
    8846:	e77d      	b.n	8744 <setJoinDutyCycleTimer+0x40>
				RegParams.joinDutyCycleTimeout = (uint32_t)UpdateJoinDutyCycleTimer.joinreqTimeonAir * (JOIN_BACKOFF_PRESCALAR_24HR - 1);
    8848:	4b4d      	ldr	r3, [pc, #308]	; (8980 <setJoinDutyCycleTimer+0x27c>)
    884a:	9a02      	ldr	r2, [sp, #8]
    884c:	4353      	muls	r3, r2
    884e:	4a44      	ldr	r2, [pc, #272]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    8850:	323e      	adds	r2, #62	; 0x3e
    8852:	7013      	strb	r3, [r2, #0]
    8854:	0a19      	lsrs	r1, r3, #8
    8856:	7051      	strb	r1, [r2, #1]
    8858:	0c19      	lsrs	r1, r3, #16
    885a:	7091      	strb	r1, [r2, #2]
    885c:	0e1b      	lsrs	r3, r3, #24
    885e:	70d3      	strb	r3, [r2, #3]
    8860:	e770      	b.n	8744 <setJoinDutyCycleTimer+0x40>
			ticks = SwTimerReadValue(RegParams.pJoinDutyCycleTimer->timerId);
    8862:	4c3f      	ldr	r4, [pc, #252]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    8864:	7d23      	ldrb	r3, [r4, #20]
    8866:	7d62      	ldrb	r2, [r4, #21]
    8868:	0212      	lsls	r2, r2, #8
    886a:	431a      	orrs	r2, r3
    886c:	7da3      	ldrb	r3, [r4, #22]
    886e:	041b      	lsls	r3, r3, #16
    8870:	431a      	orrs	r2, r3
    8872:	7de3      	ldrb	r3, [r4, #23]
    8874:	061b      	lsls	r3, r3, #24
    8876:	4313      	orrs	r3, r2
    8878:	7a18      	ldrb	r0, [r3, #8]
    887a:	4b42      	ldr	r3, [pc, #264]	; (8984 <setJoinDutyCycleTimer+0x280>)
    887c:	4798      	blx	r3
    887e:	0005      	movs	r5, r0
			SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    8880:	7d23      	ldrb	r3, [r4, #20]
    8882:	7d62      	ldrb	r2, [r4, #21]
    8884:	0212      	lsls	r2, r2, #8
    8886:	431a      	orrs	r2, r3
    8888:	7da3      	ldrb	r3, [r4, #22]
    888a:	041b      	lsls	r3, r3, #16
    888c:	431a      	orrs	r2, r3
    888e:	7de3      	ldrb	r3, [r4, #23]
    8890:	061b      	lsls	r3, r3, #24
    8892:	4313      	orrs	r3, r2
    8894:	7a18      	ldrb	r0, [r3, #8]
    8896:	4b3c      	ldr	r3, [pc, #240]	; (8988 <setJoinDutyCycleTimer+0x284>)
    8898:	4798      	blx	r3
			delta = RegParams.pJoinDutyCycleTimer->lastTimerInterval- US_TO_MS(ticks);
    889a:	7d23      	ldrb	r3, [r4, #20]
    889c:	7d62      	ldrb	r2, [r4, #21]
    889e:	0212      	lsls	r2, r2, #8
    88a0:	431a      	orrs	r2, r3
    88a2:	7da3      	ldrb	r3, [r4, #22]
    88a4:	041b      	lsls	r3, r3, #16
    88a6:	431a      	orrs	r2, r3
    88a8:	7de3      	ldrb	r3, [r4, #23]
    88aa:	061b      	lsls	r3, r3, #24
    88ac:	4313      	orrs	r3, r2
    88ae:	781a      	ldrb	r2, [r3, #0]
    88b0:	785c      	ldrb	r4, [r3, #1]
    88b2:	0224      	lsls	r4, r4, #8
    88b4:	4322      	orrs	r2, r4
    88b6:	789c      	ldrb	r4, [r3, #2]
    88b8:	0424      	lsls	r4, r4, #16
    88ba:	4314      	orrs	r4, r2
    88bc:	78da      	ldrb	r2, [r3, #3]
    88be:	0612      	lsls	r2, r2, #24
    88c0:	4314      	orrs	r4, r2
    88c2:	21fa      	movs	r1, #250	; 0xfa
    88c4:	0089      	lsls	r1, r1, #2
    88c6:	0028      	movs	r0, r5
    88c8:	4b30      	ldr	r3, [pc, #192]	; (898c <setJoinDutyCycleTimer+0x288>)
    88ca:	4798      	blx	r3
    88cc:	1a24      	subs	r4, r4, r0
    88ce:	e74a      	b.n	8766 <setJoinDutyCycleTimer+0x62>
				SwTimerStart (RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.joinDutyCycleTimeout), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    88d0:	20fa      	movs	r0, #250	; 0xfa
    88d2:	0080      	lsls	r0, r0, #2
    88d4:	4341      	muls	r1, r0
    88d6:	4c22      	ldr	r4, [pc, #136]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    88d8:	7d23      	ldrb	r3, [r4, #20]
    88da:	7d62      	ldrb	r2, [r4, #21]
    88dc:	0212      	lsls	r2, r2, #8
    88de:	431a      	orrs	r2, r3
    88e0:	7da3      	ldrb	r3, [r4, #22]
    88e2:	041b      	lsls	r3, r3, #16
    88e4:	431a      	orrs	r2, r3
    88e6:	7de3      	ldrb	r3, [r4, #23]
    88e8:	061b      	lsls	r3, r3, #24
    88ea:	4313      	orrs	r3, r2
    88ec:	7a18      	ldrb	r0, [r3, #8]
    88ee:	2300      	movs	r3, #0
    88f0:	9300      	str	r3, [sp, #0]
    88f2:	4b20      	ldr	r3, [pc, #128]	; (8974 <setJoinDutyCycleTimer+0x270>)
    88f4:	2200      	movs	r2, #0
    88f6:	4c21      	ldr	r4, [pc, #132]	; (897c <setJoinDutyCycleTimer+0x278>)
    88f8:	47a0      	blx	r4
    88fa:	e02b      	b.n	8954 <setJoinDutyCycleTimer+0x250>
				RegParams.joinDutyCycleTimeout = 0;
    88fc:	4b18      	ldr	r3, [pc, #96]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    88fe:	333e      	adds	r3, #62	; 0x3e
    8900:	2200      	movs	r2, #0
    8902:	701a      	strb	r2, [r3, #0]
    8904:	705a      	strb	r2, [r3, #1]
    8906:	709a      	strb	r2, [r3, #2]
    8908:	70da      	strb	r2, [r3, #3]
    890a:	e023      	b.n	8954 <setJoinDutyCycleTimer+0x250>
		SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    890c:	4c14      	ldr	r4, [pc, #80]	; (8960 <setJoinDutyCycleTimer+0x25c>)
    890e:	7d23      	ldrb	r3, [r4, #20]
    8910:	7d62      	ldrb	r2, [r4, #21]
    8912:	0212      	lsls	r2, r2, #8
    8914:	431a      	orrs	r2, r3
    8916:	7da3      	ldrb	r3, [r4, #22]
    8918:	041b      	lsls	r3, r3, #16
    891a:	431a      	orrs	r2, r3
    891c:	7de3      	ldrb	r3, [r4, #23]
    891e:	061b      	lsls	r3, r3, #24
    8920:	4313      	orrs	r3, r2
    8922:	7a18      	ldrb	r0, [r3, #8]
    8924:	4b18      	ldr	r3, [pc, #96]	; (8988 <setJoinDutyCycleTimer+0x284>)
    8926:	4798      	blx	r3
		RegParams.joinDutyCycleTimeout = 0;
    8928:	0023      	movs	r3, r4
    892a:	333e      	adds	r3, #62	; 0x3e
    892c:	2200      	movs	r2, #0
    892e:	701a      	strb	r2, [r3, #0]
    8930:	705a      	strb	r2, [r3, #1]
    8932:	709a      	strb	r2, [r3, #2]
    8934:	70da      	strb	r2, [r3, #3]
		RegParams.pJoinDutyCycleTimer->remainingtime =0;
    8936:	7d23      	ldrb	r3, [r4, #20]
    8938:	7d62      	ldrb	r2, [r4, #21]
    893a:	0212      	lsls	r2, r2, #8
    893c:	431a      	orrs	r2, r3
    893e:	7da3      	ldrb	r3, [r4, #22]
    8940:	041b      	lsls	r3, r3, #16
    8942:	431a      	orrs	r2, r3
    8944:	7de3      	ldrb	r3, [r4, #23]
    8946:	061b      	lsls	r3, r3, #24
    8948:	4313      	orrs	r3, r2
    894a:	2200      	movs	r2, #0
    894c:	711a      	strb	r2, [r3, #4]
    894e:	715a      	strb	r2, [r3, #5]
    8950:	719a      	strb	r2, [r3, #6]
    8952:	71da      	strb	r2, [r3, #7]
}
    8954:	2008      	movs	r0, #8
    8956:	b005      	add	sp, #20
    8958:	bd30      	pop	{r4, r5, pc}
    895a:	46c0      	nop			; (mov r8, r8)
    895c:	00015f45 	.word	0x00015f45
    8960:	20001b54 	.word	0x20001b54
    8964:	000003e7 	.word	0x000003e7
    8968:	0000c0c1 	.word	0x0000c0c1
    896c:	0020c49b 	.word	0x0020c49b
    8970:	ffdf3b65 	.word	0xffdf3b65
    8974:	00009225 	.word	0x00009225
    8978:	7fffffff 	.word	0x7fffffff
    897c:	0000bf29 	.word	0x0000bf29
    8980:	0000270f 	.word	0x0000270f
    8984:	0000c0d5 	.word	0x0000c0d5
    8988:	0000c235 	.word	0x0000c235
    898c:	00012d11 	.word	0x00012d11

00008990 <setDutyCycleTimer>:
{
    8990:	b5f0      	push	{r4, r5, r6, r7, lr}
    8992:	46de      	mov	lr, fp
    8994:	4657      	mov	r7, sl
    8996:	464e      	mov	r6, r9
    8998:	4645      	mov	r5, r8
    899a:	b5e0      	push	{r5, r6, r7, lr}
    899c:	b087      	sub	sp, #28
	memcpy(&updateDCTimer,attrInput,sizeof(UpdateDutyCycleTimer_t));
    899e:	ac04      	add	r4, sp, #16
    89a0:	2206      	movs	r2, #6
    89a2:	0020      	movs	r0, r4
    89a4:	4bc4      	ldr	r3, [pc, #784]	; (8cb8 <setDutyCycleTimer+0x328>)
    89a6:	4798      	blx	r3
    bandId = RegParams.pOtherChParams[RegParams.lastUsedChannelIndex].subBandId;
    89a8:	49c4      	ldr	r1, [pc, #784]	; (8cbc <setDutyCycleTimer+0x32c>)
    89aa:	7a0b      	ldrb	r3, [r1, #8]
    89ac:	7a4a      	ldrb	r2, [r1, #9]
    89ae:	0212      	lsls	r2, r2, #8
    89b0:	4313      	orrs	r3, r2
    89b2:	7a8a      	ldrb	r2, [r1, #10]
    89b4:	0412      	lsls	r2, r2, #16
    89b6:	431a      	orrs	r2, r3
    89b8:	7acb      	ldrb	r3, [r1, #11]
    89ba:	061b      	lsls	r3, r3, #24
    89bc:	431a      	orrs	r2, r3
    89be:	232f      	movs	r3, #47	; 0x2f
    89c0:	5cc9      	ldrb	r1, [r1, r3]
    89c2:	004b      	lsls	r3, r1, #1
    89c4:	185b      	adds	r3, r3, r1
    89c6:	009b      	lsls	r3, r3, #2
    89c8:	189b      	adds	r3, r3, r2
    89ca:	7a1f      	ldrb	r7, [r3, #8]
	if(updateDCTimer.joining != 1)
    89cc:	7923      	ldrb	r3, [r4, #4]
    89ce:	2b00      	cmp	r3, #0
    89d0:	d16a      	bne.n	8aa8 <setDutyCycleTimer+0x118>
		RegParams.pSubBandParams[bandId].subBandTimeout = ((uint32_t)updateDCTimer.timeOnAir * ((uint32_t)RegParams.cmnParams.paramsType2.subBandDutyCycle[bandId] - 1));
    89d2:	a904      	add	r1, sp, #16
    89d4:	880a      	ldrh	r2, [r1, #0]
    89d6:	48b9      	ldr	r0, [pc, #740]	; (8cbc <setDutyCycleTimer+0x32c>)
    89d8:	7b06      	ldrb	r6, [r0, #12]
    89da:	7b43      	ldrb	r3, [r0, #13]
    89dc:	021b      	lsls	r3, r3, #8
    89de:	4333      	orrs	r3, r6
    89e0:	7b86      	ldrb	r6, [r0, #14]
    89e2:	0436      	lsls	r6, r6, #16
    89e4:	431e      	orrs	r6, r3
    89e6:	7bc4      	ldrb	r4, [r0, #15]
    89e8:	0624      	lsls	r4, r4, #24
    89ea:	4326      	orrs	r6, r4
    89ec:	007c      	lsls	r4, r7, #1
    89ee:	19e4      	adds	r4, r4, r7
    89f0:	00a4      	lsls	r4, r4, #2
    89f2:	003d      	movs	r5, r7
    89f4:	35d4      	adds	r5, #212	; 0xd4
    89f6:	006d      	lsls	r5, r5, #1
    89f8:	1945      	adds	r5, r0, r5
    89fa:	796b      	ldrb	r3, [r5, #5]
    89fc:	469c      	mov	ip, r3
    89fe:	79ab      	ldrb	r3, [r5, #6]
    8a00:	021b      	lsls	r3, r3, #8
    8a02:	4665      	mov	r5, ip
    8a04:	432b      	orrs	r3, r5
    8a06:	3b01      	subs	r3, #1
    8a08:	4353      	muls	r3, r2
    8a0a:	19a4      	adds	r4, r4, r6
    8a0c:	7223      	strb	r3, [r4, #8]
    8a0e:	0a1d      	lsrs	r5, r3, #8
    8a10:	7265      	strb	r5, [r4, #9]
    8a12:	0c1d      	lsrs	r5, r3, #16
    8a14:	72a5      	strb	r5, [r4, #10]
    8a16:	0e1b      	lsrs	r3, r3, #24
    8a18:	72e3      	strb	r3, [r4, #11]
		RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    8a1a:	884b      	ldrh	r3, [r1, #2]
    8a1c:	3b01      	subs	r3, #1
    8a1e:	435a      	muls	r2, r3
    8a20:	23ba      	movs	r3, #186	; 0xba
    8a22:	33ff      	adds	r3, #255	; 0xff
    8a24:	54c2      	strb	r2, [r0, r3]
    8a26:	0a11      	lsrs	r1, r2, #8
    8a28:	18c0      	adds	r0, r0, r3
    8a2a:	7041      	strb	r1, [r0, #1]
    8a2c:	0c11      	lsrs	r1, r2, #16
    8a2e:	7081      	strb	r1, [r0, #2]
    8a30:	0e12      	lsrs	r2, r2, #24
    8a32:	70c2      	strb	r2, [r0, #3]
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    8a34:	49a1      	ldr	r1, [pc, #644]	; (8cbc <setDutyCycleTimer+0x32c>)
    8a36:	7c0b      	ldrb	r3, [r1, #16]
    8a38:	7c4a      	ldrb	r2, [r1, #17]
    8a3a:	0212      	lsls	r2, r2, #8
    8a3c:	431a      	orrs	r2, r3
    8a3e:	7c8b      	ldrb	r3, [r1, #18]
    8a40:	041b      	lsls	r3, r3, #16
    8a42:	431a      	orrs	r2, r3
    8a44:	7ccb      	ldrb	r3, [r1, #19]
    8a46:	061b      	lsls	r3, r3, #24
    8a48:	4313      	orrs	r3, r2
    8a4a:	7918      	ldrb	r0, [r3, #4]
    8a4c:	4b9c      	ldr	r3, [pc, #624]	; (8cc0 <setDutyCycleTimer+0x330>)
    8a4e:	4798      	blx	r3
    uint32_t delta = 0, minimSubBandTimer = UINT32_MAX, ticks,nextTimer;
    8a50:	2300      	movs	r3, #0
    8a52:	4699      	mov	r9, r3
	if(SwTimerIsRunning(RegParams.pDutyCycleTimer->timerId))
    8a54:	2800      	cmp	r0, #0
    8a56:	d136      	bne.n	8ac6 <setDutyCycleTimer+0x136>
	minimSubBandTimer = RegParams.pSubBandParams[bandId].subBandTimeout;
    8a58:	4a98      	ldr	r2, [pc, #608]	; (8cbc <setDutyCycleTimer+0x32c>)
    8a5a:	7b13      	ldrb	r3, [r2, #12]
    8a5c:	7b51      	ldrb	r1, [r2, #13]
    8a5e:	0209      	lsls	r1, r1, #8
    8a60:	430b      	orrs	r3, r1
    8a62:	7b91      	ldrb	r1, [r2, #14]
    8a64:	0409      	lsls	r1, r1, #16
    8a66:	4319      	orrs	r1, r3
    8a68:	7bd3      	ldrb	r3, [r2, #15]
    8a6a:	061b      	lsls	r3, r3, #24
    8a6c:	4319      	orrs	r1, r3
    8a6e:	007b      	lsls	r3, r7, #1
    8a70:	19db      	adds	r3, r3, r7
    8a72:	009b      	lsls	r3, r3, #2
    8a74:	185b      	adds	r3, r3, r1
    8a76:	7a18      	ldrb	r0, [r3, #8]
    8a78:	7a59      	ldrb	r1, [r3, #9]
    8a7a:	0209      	lsls	r1, r1, #8
    8a7c:	4301      	orrs	r1, r0
    8a7e:	7a98      	ldrb	r0, [r3, #10]
    8a80:	0400      	lsls	r0, r0, #16
    8a82:	4301      	orrs	r1, r0
    8a84:	7ad8      	ldrb	r0, [r3, #11]
    8a86:	0600      	lsls	r0, r0, #24
    8a88:	4308      	orrs	r0, r1
    8a8a:	9003      	str	r0, [sp, #12]
	for(i = 0; i < RegParams.maxSubBands; i++)
    8a8c:	2329      	movs	r3, #41	; 0x29
    8a8e:	5cd3      	ldrb	r3, [r2, r3]
    8a90:	2b00      	cmp	r3, #0
    8a92:	d100      	bne.n	8a96 <setDutyCycleTimer+0x106>
    8a94:	e09c      	b.n	8bd0 <setDutyCycleTimer+0x240>
    8a96:	2200      	movs	r2, #0
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    8a98:	4d88      	ldr	r5, [pc, #544]	; (8cbc <setDutyCycleTimer+0x32c>)
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    8a9a:	002e      	movs	r6, r5
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    8a9c:	2300      	movs	r3, #0
    8a9e:	469a      	mov	sl, r3
	for(i = 0; i < RegParams.maxSubBands; i++)
    8aa0:	46a8      	mov	r8, r5
    8aa2:	2329      	movs	r3, #41	; 0x29
    8aa4:	469c      	mov	ip, r3
    8aa6:	e051      	b.n	8b4c <setDutyCycleTimer+0x1bc>
		RegParams.joinDutyCycleTimeout = (uint32_t)updateDCTimer.timeOnAir * ((uint32_t) updateDCTimer.aggDutyCycle - 1);
    8aa8:	a904      	add	r1, sp, #16
    8aaa:	884a      	ldrh	r2, [r1, #2]
    8aac:	3a01      	subs	r2, #1
    8aae:	880b      	ldrh	r3, [r1, #0]
    8ab0:	4353      	muls	r3, r2
    8ab2:	4a82      	ldr	r2, [pc, #520]	; (8cbc <setDutyCycleTimer+0x32c>)
    8ab4:	323e      	adds	r2, #62	; 0x3e
    8ab6:	7013      	strb	r3, [r2, #0]
    8ab8:	0a19      	lsrs	r1, r3, #8
    8aba:	7051      	strb	r1, [r2, #1]
    8abc:	0c19      	lsrs	r1, r3, #16
    8abe:	7091      	strb	r1, [r2, #2]
    8ac0:	0e1b      	lsrs	r3, r3, #24
    8ac2:	70d3      	strb	r3, [r2, #3]
    8ac4:	e7b6      	b.n	8a34 <setDutyCycleTimer+0xa4>
		SwTimerStop(RegParams.pDutyCycleTimer->timerId);
    8ac6:	4c7d      	ldr	r4, [pc, #500]	; (8cbc <setDutyCycleTimer+0x32c>)
    8ac8:	7c23      	ldrb	r3, [r4, #16]
    8aca:	7c62      	ldrb	r2, [r4, #17]
    8acc:	0212      	lsls	r2, r2, #8
    8ace:	431a      	orrs	r2, r3
    8ad0:	7ca3      	ldrb	r3, [r4, #18]
    8ad2:	041b      	lsls	r3, r3, #16
    8ad4:	431a      	orrs	r2, r3
    8ad6:	7ce3      	ldrb	r3, [r4, #19]
    8ad8:	061b      	lsls	r3, r3, #24
    8ada:	4313      	orrs	r3, r2
    8adc:	7918      	ldrb	r0, [r3, #4]
    8ade:	4b79      	ldr	r3, [pc, #484]	; (8cc4 <setDutyCycleTimer+0x334>)
    8ae0:	4798      	blx	r3
		ticks = SwTimerReadValue(RegParams.pDutyCycleTimer->timerId);
    8ae2:	7c23      	ldrb	r3, [r4, #16]
    8ae4:	7c62      	ldrb	r2, [r4, #17]
    8ae6:	0212      	lsls	r2, r2, #8
    8ae8:	431a      	orrs	r2, r3
    8aea:	7ca3      	ldrb	r3, [r4, #18]
    8aec:	041b      	lsls	r3, r3, #16
    8aee:	431a      	orrs	r2, r3
    8af0:	7ce3      	ldrb	r3, [r4, #19]
    8af2:	061b      	lsls	r3, r3, #24
    8af4:	4313      	orrs	r3, r2
    8af6:	7918      	ldrb	r0, [r3, #4]
    8af8:	4b73      	ldr	r3, [pc, #460]	; (8cc8 <setDutyCycleTimer+0x338>)
    8afa:	4798      	blx	r3
		delta = RegParams.pDutyCycleTimer->lastTimerValue - US_TO_MS(ticks);
    8afc:	7c23      	ldrb	r3, [r4, #16]
    8afe:	7c62      	ldrb	r2, [r4, #17]
    8b00:	0212      	lsls	r2, r2, #8
    8b02:	431a      	orrs	r2, r3
    8b04:	7ca3      	ldrb	r3, [r4, #18]
    8b06:	041b      	lsls	r3, r3, #16
    8b08:	431a      	orrs	r2, r3
    8b0a:	7ce3      	ldrb	r3, [r4, #19]
    8b0c:	061b      	lsls	r3, r3, #24
    8b0e:	4313      	orrs	r3, r2
    8b10:	781c      	ldrb	r4, [r3, #0]
    8b12:	785a      	ldrb	r2, [r3, #1]
    8b14:	0212      	lsls	r2, r2, #8
    8b16:	4322      	orrs	r2, r4
    8b18:	789c      	ldrb	r4, [r3, #2]
    8b1a:	0424      	lsls	r4, r4, #16
    8b1c:	4322      	orrs	r2, r4
    8b1e:	78dc      	ldrb	r4, [r3, #3]
    8b20:	0624      	lsls	r4, r4, #24
    8b22:	4314      	orrs	r4, r2
    8b24:	21fa      	movs	r1, #250	; 0xfa
    8b26:	0089      	lsls	r1, r1, #2
    8b28:	4b68      	ldr	r3, [pc, #416]	; (8ccc <setDutyCycleTimer+0x33c>)
    8b2a:	4798      	blx	r3
    8b2c:	1a23      	subs	r3, r4, r0
    8b2e:	4699      	mov	r9, r3
    8b30:	e792      	b.n	8a58 <setDutyCycleTimer+0xc8>
				RegParams.pSubBandParams[i].subBandTimeout = 0;
    8b32:	4651      	mov	r1, sl
    8b34:	7219      	strb	r1, [r3, #8]
    8b36:	7259      	strb	r1, [r3, #9]
    8b38:	7299      	strb	r1, [r3, #10]
    8b3a:	72d9      	strb	r1, [r3, #11]
    8b3c:	e02c      	b.n	8b98 <setDutyCycleTimer+0x208>
	for(i = 0; i < RegParams.maxSubBands; i++)
    8b3e:	3201      	adds	r2, #1
    8b40:	b2d2      	uxtb	r2, r2
    8b42:	4643      	mov	r3, r8
    8b44:	4661      	mov	r1, ip
    8b46:	5c5b      	ldrb	r3, [r3, r1]
    8b48:	4293      	cmp	r3, r2
    8b4a:	d941      	bls.n	8bd0 <setDutyCycleTimer+0x240>
		if((i != bandId) && (RegParams.pSubBandParams[i].subBandTimeout != 0))
    8b4c:	4297      	cmp	r7, r2
    8b4e:	d0f6      	beq.n	8b3e <setDutyCycleTimer+0x1ae>
    8b50:	0054      	lsls	r4, r2, #1
    8b52:	18a4      	adds	r4, r4, r2
    8b54:	00a4      	lsls	r4, r4, #2
    8b56:	7b2b      	ldrb	r3, [r5, #12]
    8b58:	7b69      	ldrb	r1, [r5, #13]
    8b5a:	0209      	lsls	r1, r1, #8
    8b5c:	4319      	orrs	r1, r3
    8b5e:	7bab      	ldrb	r3, [r5, #14]
    8b60:	041b      	lsls	r3, r3, #16
    8b62:	4319      	orrs	r1, r3
    8b64:	7beb      	ldrb	r3, [r5, #15]
    8b66:	061b      	lsls	r3, r3, #24
    8b68:	430b      	orrs	r3, r1
    8b6a:	191b      	adds	r3, r3, r4
    8b6c:	7a18      	ldrb	r0, [r3, #8]
    8b6e:	7a59      	ldrb	r1, [r3, #9]
    8b70:	0209      	lsls	r1, r1, #8
    8b72:	4301      	orrs	r1, r0
    8b74:	7a98      	ldrb	r0, [r3, #10]
    8b76:	0400      	lsls	r0, r0, #16
    8b78:	4308      	orrs	r0, r1
    8b7a:	7ad9      	ldrb	r1, [r3, #11]
    8b7c:	0609      	lsls	r1, r1, #24
    8b7e:	4301      	orrs	r1, r0
    8b80:	d0dd      	beq.n	8b3e <setDutyCycleTimer+0x1ae>
			if(RegParams.pSubBandParams[i].subBandTimeout > delta)
    8b82:	4589      	cmp	r9, r1
    8b84:	d2d5      	bcs.n	8b32 <setDutyCycleTimer+0x1a2>
				          RegParams.pSubBandParams[i].subBandTimeout - delta;
    8b86:	4648      	mov	r0, r9
    8b88:	1a09      	subs	r1, r1, r0
				RegParams.pSubBandParams[i].subBandTimeout = 
    8b8a:	7219      	strb	r1, [r3, #8]
    8b8c:	0a08      	lsrs	r0, r1, #8
    8b8e:	7258      	strb	r0, [r3, #9]
    8b90:	0c08      	lsrs	r0, r1, #16
    8b92:	7298      	strb	r0, [r3, #10]
    8b94:	0e09      	lsrs	r1, r1, #24
    8b96:	72d9      	strb	r1, [r3, #11]
			if(RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer && RegParams.pSubBandParams[i].subBandTimeout != 0)
    8b98:	7b33      	ldrb	r3, [r6, #12]
    8b9a:	7b71      	ldrb	r1, [r6, #13]
    8b9c:	0209      	lsls	r1, r1, #8
    8b9e:	4319      	orrs	r1, r3
    8ba0:	7bb3      	ldrb	r3, [r6, #14]
    8ba2:	041b      	lsls	r3, r3, #16
    8ba4:	4319      	orrs	r1, r3
    8ba6:	7bf3      	ldrb	r3, [r6, #15]
    8ba8:	061b      	lsls	r3, r3, #24
    8baa:	430b      	orrs	r3, r1
    8bac:	191c      	adds	r4, r3, r4
    8bae:	7a23      	ldrb	r3, [r4, #8]
    8bb0:	7a61      	ldrb	r1, [r4, #9]
    8bb2:	0209      	lsls	r1, r1, #8
    8bb4:	4319      	orrs	r1, r3
    8bb6:	7aa3      	ldrb	r3, [r4, #10]
    8bb8:	041b      	lsls	r3, r3, #16
    8bba:	4319      	orrs	r1, r3
    8bbc:	7ae3      	ldrb	r3, [r4, #11]
    8bbe:	061b      	lsls	r3, r3, #24
    8bc0:	430b      	orrs	r3, r1
    8bc2:	9903      	ldr	r1, [sp, #12]
    8bc4:	428b      	cmp	r3, r1
    8bc6:	d8ba      	bhi.n	8b3e <setDutyCycleTimer+0x1ae>
    8bc8:	2b00      	cmp	r3, #0
    8bca:	d0b8      	beq.n	8b3e <setDutyCycleTimer+0x1ae>
				minimSubBandTimer = RegParams.pSubBandParams[i].subBandTimeout;
    8bcc:	9303      	str	r3, [sp, #12]
    8bce:	e7b6      	b.n	8b3e <setDutyCycleTimer+0x1ae>
	if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout != 0)
    8bd0:	493a      	ldr	r1, [pc, #232]	; (8cbc <setDutyCycleTimer+0x32c>)
    8bd2:	23ba      	movs	r3, #186	; 0xba
    8bd4:	33ff      	adds	r3, #255	; 0xff
    8bd6:	5ccb      	ldrb	r3, [r1, r3]
    8bd8:	22dd      	movs	r2, #221	; 0xdd
    8bda:	0052      	lsls	r2, r2, #1
    8bdc:	5c8a      	ldrb	r2, [r1, r2]
    8bde:	0212      	lsls	r2, r2, #8
    8be0:	431a      	orrs	r2, r3
    8be2:	23bc      	movs	r3, #188	; 0xbc
    8be4:	33ff      	adds	r3, #255	; 0xff
    8be6:	5ccb      	ldrb	r3, [r1, r3]
    8be8:	041b      	lsls	r3, r3, #16
    8bea:	431a      	orrs	r2, r3
    8bec:	23de      	movs	r3, #222	; 0xde
    8bee:	005b      	lsls	r3, r3, #1
    8bf0:	5ccb      	ldrb	r3, [r1, r3]
    8bf2:	061b      	lsls	r3, r3, #24
    8bf4:	4313      	orrs	r3, r2
    8bf6:	d00f      	beq.n	8c18 <setDutyCycleTimer+0x288>
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout > delta)
    8bf8:	4599      	cmp	r9, r3
    8bfa:	d251      	bcs.n	8ca0 <setDutyCycleTimer+0x310>
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout - delta;
    8bfc:	000a      	movs	r2, r1
    8bfe:	4649      	mov	r1, r9
    8c00:	1a5b      	subs	r3, r3, r1
    8c02:	21ba      	movs	r1, #186	; 0xba
    8c04:	31ff      	adds	r1, #255	; 0xff
    8c06:	5453      	strb	r3, [r2, r1]
    8c08:	0a19      	lsrs	r1, r3, #8
    8c0a:	32ba      	adds	r2, #186	; 0xba
    8c0c:	32ff      	adds	r2, #255	; 0xff
    8c0e:	7051      	strb	r1, [r2, #1]
    8c10:	0c19      	lsrs	r1, r3, #16
    8c12:	7091      	strb	r1, [r2, #2]
    8c14:	0e1b      	lsrs	r3, r3, #24
    8c16:	70d3      	strb	r3, [r2, #3]
		if(RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout >= minimSubBandTimer)
    8c18:	4a28      	ldr	r2, [pc, #160]	; (8cbc <setDutyCycleTimer+0x32c>)
    8c1a:	23ba      	movs	r3, #186	; 0xba
    8c1c:	33ff      	adds	r3, #255	; 0xff
    8c1e:	5cd1      	ldrb	r1, [r2, r3]
    8c20:	3301      	adds	r3, #1
    8c22:	5cd3      	ldrb	r3, [r2, r3]
    8c24:	021b      	lsls	r3, r3, #8
    8c26:	430b      	orrs	r3, r1
    8c28:	21bc      	movs	r1, #188	; 0xbc
    8c2a:	31ff      	adds	r1, #255	; 0xff
    8c2c:	5c51      	ldrb	r1, [r2, r1]
    8c2e:	0409      	lsls	r1, r1, #16
    8c30:	430b      	orrs	r3, r1
    8c32:	21de      	movs	r1, #222	; 0xde
    8c34:	0049      	lsls	r1, r1, #1
    8c36:	5c51      	ldrb	r1, [r2, r1]
    8c38:	0609      	lsls	r1, r1, #24
    8c3a:	4319      	orrs	r1, r3
    8c3c:	9a03      	ldr	r2, [sp, #12]
    8c3e:	4291      	cmp	r1, r2
    8c40:	d200      	bcs.n	8c44 <setDutyCycleTimer+0x2b4>
    8c42:	0011      	movs	r1, r2
		RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    8c44:	4b1d      	ldr	r3, [pc, #116]	; (8cbc <setDutyCycleTimer+0x32c>)
    8c46:	7c1a      	ldrb	r2, [r3, #16]
    8c48:	7c58      	ldrb	r0, [r3, #17]
    8c4a:	0200      	lsls	r0, r0, #8
    8c4c:	4310      	orrs	r0, r2
    8c4e:	7c9a      	ldrb	r2, [r3, #18]
    8c50:	0412      	lsls	r2, r2, #16
    8c52:	4310      	orrs	r0, r2
    8c54:	7cda      	ldrb	r2, [r3, #19]
    8c56:	0612      	lsls	r2, r2, #24
    8c58:	4302      	orrs	r2, r0
    8c5a:	7011      	strb	r1, [r2, #0]
    8c5c:	0a08      	lsrs	r0, r1, #8
    8c5e:	7050      	strb	r0, [r2, #1]
    8c60:	0c08      	lsrs	r0, r1, #16
    8c62:	7090      	strb	r0, [r2, #2]
    8c64:	0e08      	lsrs	r0, r1, #24
    8c66:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    8c68:	22fa      	movs	r2, #250	; 0xfa
    8c6a:	0092      	lsls	r2, r2, #2
    8c6c:	4351      	muls	r1, r2
    8c6e:	7c18      	ldrb	r0, [r3, #16]
    8c70:	7c5a      	ldrb	r2, [r3, #17]
    8c72:	0212      	lsls	r2, r2, #8
    8c74:	4310      	orrs	r0, r2
    8c76:	7c9a      	ldrb	r2, [r3, #18]
    8c78:	0412      	lsls	r2, r2, #16
    8c7a:	4302      	orrs	r2, r0
    8c7c:	7cdb      	ldrb	r3, [r3, #19]
    8c7e:	061b      	lsls	r3, r3, #24
    8c80:	4313      	orrs	r3, r2
    8c82:	7918      	ldrb	r0, [r3, #4]
    8c84:	2300      	movs	r3, #0
    8c86:	9300      	str	r3, [sp, #0]
    8c88:	4b11      	ldr	r3, [pc, #68]	; (8cd0 <setDutyCycleTimer+0x340>)
    8c8a:	2200      	movs	r2, #0
    8c8c:	4c11      	ldr	r4, [pc, #68]	; (8cd4 <setDutyCycleTimer+0x344>)
    8c8e:	47a0      	blx	r4
}
    8c90:	2008      	movs	r0, #8
    8c92:	b007      	add	sp, #28
    8c94:	bc3c      	pop	{r2, r3, r4, r5}
    8c96:	4690      	mov	r8, r2
    8c98:	4699      	mov	r9, r3
    8c9a:	46a2      	mov	sl, r4
    8c9c:	46ab      	mov	fp, r5
    8c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    8ca0:	4b06      	ldr	r3, [pc, #24]	; (8cbc <setDutyCycleTimer+0x32c>)
    8ca2:	2100      	movs	r1, #0
    8ca4:	22ba      	movs	r2, #186	; 0xba
    8ca6:	32ff      	adds	r2, #255	; 0xff
    8ca8:	5499      	strb	r1, [r3, r2]
    8caa:	189b      	adds	r3, r3, r2
    8cac:	2200      	movs	r2, #0
    8cae:	705a      	strb	r2, [r3, #1]
    8cb0:	709a      	strb	r2, [r3, #2]
    8cb2:	70da      	strb	r2, [r3, #3]
    8cb4:	e7b0      	b.n	8c18 <setDutyCycleTimer+0x288>
    8cb6:	46c0      	nop			; (mov r8, r8)
    8cb8:	00015f45 	.word	0x00015f45
    8cbc:	20001b54 	.word	0x20001b54
    8cc0:	0000c0c1 	.word	0x0000c0c1
    8cc4:	0000c235 	.word	0x0000c235
    8cc8:	0000c0d5 	.word	0x0000c0d5
    8ccc:	00012d11 	.word	0x00012d11
    8cd0:	00008cd9 	.word	0x00008cd9
    8cd4:	0000bf29 	.word	0x0000bf29

00008cd8 <DutyCycleCallback>:
{
    8cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cda:	46de      	mov	lr, fp
    8cdc:	4657      	mov	r7, sl
    8cde:	464e      	mov	r6, r9
    8ce0:	4645      	mov	r5, r8
    8ce2:	b5e0      	push	{r5, r6, r7, lr}
    8ce4:	b087      	sub	sp, #28
	uint32_t DutyCycleTimeout = RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout;
    8ce6:	4980      	ldr	r1, [pc, #512]	; (8ee8 <DutyCycleCallback+0x210>)
    8ce8:	23ba      	movs	r3, #186	; 0xba
    8cea:	33ff      	adds	r3, #255	; 0xff
    8cec:	5cca      	ldrb	r2, [r1, r3]
    8cee:	3301      	adds	r3, #1
    8cf0:	5ccb      	ldrb	r3, [r1, r3]
    8cf2:	021b      	lsls	r3, r3, #8
    8cf4:	431a      	orrs	r2, r3
    8cf6:	23bc      	movs	r3, #188	; 0xbc
    8cf8:	33ff      	adds	r3, #255	; 0xff
    8cfa:	5ccb      	ldrb	r3, [r1, r3]
    8cfc:	041b      	lsls	r3, r3, #16
    8cfe:	4313      	orrs	r3, r2
    8d00:	22de      	movs	r2, #222	; 0xde
    8d02:	0052      	lsls	r2, r2, #1
    8d04:	5c8a      	ldrb	r2, [r1, r2]
    8d06:	0612      	lsls	r2, r2, #24
    8d08:	431a      	orrs	r2, r3
    8d0a:	9205      	str	r2, [sp, #20]
    for (i=0; i < RegParams.maxSubBands; i++)
    8d0c:	2329      	movs	r3, #41	; 0x29
    8d0e:	5ccb      	ldrb	r3, [r1, r3]
    8d10:	2b00      	cmp	r3, #0
    8d12:	d100      	bne.n	8d16 <DutyCycleCallback+0x3e>
    8d14:	e0df      	b.n	8ed6 <DutyCycleCallback+0x1fe>
    8d16:	2600      	movs	r6, #0
    8d18:	2300      	movs	r3, #0
    8d1a:	9304      	str	r3, [sp, #16]
    8d1c:	3b01      	subs	r3, #1
    8d1e:	9303      	str	r3, [sp, #12]
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    8d20:	000f      	movs	r7, r1
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    8d22:	4688      	mov	r8, r1
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    8d24:	468c      	mov	ip, r1
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    8d26:	2300      	movs	r3, #0
    8d28:	469b      	mov	fp, r3
    for (i=0; i < RegParams.maxSubBands; i++)
    8d2a:	468a      	mov	sl, r1
    8d2c:	2329      	movs	r3, #41	; 0x29
    8d2e:	4699      	mov	r9, r3
    8d30:	e00c      	b.n	8d4c <DutyCycleCallback+0x74>
                RegParams.pSubBandParams[i].subBandTimeout = 0;
    8d32:	465a      	mov	r2, fp
    8d34:	721a      	strb	r2, [r3, #8]
    8d36:	725a      	strb	r2, [r3, #9]
    8d38:	729a      	strb	r2, [r3, #10]
    8d3a:	72da      	strb	r2, [r3, #11]
    8d3c:	e03f      	b.n	8dbe <DutyCycleCallback+0xe6>
    for (i=0; i < RegParams.maxSubBands; i++)
    8d3e:	3601      	adds	r6, #1
    8d40:	b2f6      	uxtb	r6, r6
    8d42:	4653      	mov	r3, sl
    8d44:	464a      	mov	r2, r9
    8d46:	5c9b      	ldrb	r3, [r3, r2]
    8d48:	42b3      	cmp	r3, r6
    8d4a:	d95a      	bls.n	8e02 <DutyCycleCallback+0x12a>
        if (( RegParams.pSubBandParams[i].subBandTimeout != 0 ))
    8d4c:	0071      	lsls	r1, r6, #1
    8d4e:	1989      	adds	r1, r1, r6
    8d50:	0089      	lsls	r1, r1, #2
    8d52:	7b3b      	ldrb	r3, [r7, #12]
    8d54:	7b7a      	ldrb	r2, [r7, #13]
    8d56:	0212      	lsls	r2, r2, #8
    8d58:	431a      	orrs	r2, r3
    8d5a:	7bbb      	ldrb	r3, [r7, #14]
    8d5c:	041b      	lsls	r3, r3, #16
    8d5e:	431a      	orrs	r2, r3
    8d60:	7bfb      	ldrb	r3, [r7, #15]
    8d62:	061b      	lsls	r3, r3, #24
    8d64:	4313      	orrs	r3, r2
    8d66:	185b      	adds	r3, r3, r1
    8d68:	7a1a      	ldrb	r2, [r3, #8]
    8d6a:	7a58      	ldrb	r0, [r3, #9]
    8d6c:	0200      	lsls	r0, r0, #8
    8d6e:	4310      	orrs	r0, r2
    8d70:	7a9a      	ldrb	r2, [r3, #10]
    8d72:	0412      	lsls	r2, r2, #16
    8d74:	4310      	orrs	r0, r2
    8d76:	7ada      	ldrb	r2, [r3, #11]
    8d78:	0612      	lsls	r2, r2, #24
    8d7a:	4302      	orrs	r2, r0
    8d7c:	d0df      	beq.n	8d3e <DutyCycleCallback+0x66>
            if ( RegParams.pSubBandParams[i].subBandTimeout > RegParams.pDutyCycleTimer->lastTimerValue )
    8d7e:	4640      	mov	r0, r8
    8d80:	7c05      	ldrb	r5, [r0, #16]
    8d82:	7c44      	ldrb	r4, [r0, #17]
    8d84:	0224      	lsls	r4, r4, #8
    8d86:	4325      	orrs	r5, r4
    8d88:	7c80      	ldrb	r0, [r0, #18]
    8d8a:	0400      	lsls	r0, r0, #16
    8d8c:	4305      	orrs	r5, r0
    8d8e:	4640      	mov	r0, r8
    8d90:	7cc0      	ldrb	r0, [r0, #19]
    8d92:	0600      	lsls	r0, r0, #24
    8d94:	4328      	orrs	r0, r5
    8d96:	7804      	ldrb	r4, [r0, #0]
    8d98:	7845      	ldrb	r5, [r0, #1]
    8d9a:	022d      	lsls	r5, r5, #8
    8d9c:	4325      	orrs	r5, r4
    8d9e:	7884      	ldrb	r4, [r0, #2]
    8da0:	0424      	lsls	r4, r4, #16
    8da2:	4325      	orrs	r5, r4
    8da4:	78c4      	ldrb	r4, [r0, #3]
    8da6:	0624      	lsls	r4, r4, #24
    8da8:	432c      	orrs	r4, r5
    8daa:	42a2      	cmp	r2, r4
    8dac:	d9c1      	bls.n	8d32 <DutyCycleCallback+0x5a>
                RegParams.pSubBandParams[i].subBandTimeout = RegParams.pSubBandParams[i].subBandTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    8dae:	1b12      	subs	r2, r2, r4
    8db0:	721a      	strb	r2, [r3, #8]
    8db2:	0a10      	lsrs	r0, r2, #8
    8db4:	7258      	strb	r0, [r3, #9]
    8db6:	0c10      	lsrs	r0, r2, #16
    8db8:	7298      	strb	r0, [r3, #10]
    8dba:	0e12      	lsrs	r2, r2, #24
    8dbc:	72da      	strb	r2, [r3, #11]
            if ( (RegParams.pSubBandParams[i].subBandTimeout <= minimSubBandTimer) && (RegParams.pSubBandParams[i].subBandTimeout != 0) )
    8dbe:	4663      	mov	r3, ip
    8dc0:	7b1b      	ldrb	r3, [r3, #12]
    8dc2:	4662      	mov	r2, ip
    8dc4:	7b52      	ldrb	r2, [r2, #13]
    8dc6:	0212      	lsls	r2, r2, #8
    8dc8:	431a      	orrs	r2, r3
    8dca:	4663      	mov	r3, ip
    8dcc:	7b9b      	ldrb	r3, [r3, #14]
    8dce:	041b      	lsls	r3, r3, #16
    8dd0:	431a      	orrs	r2, r3
    8dd2:	4663      	mov	r3, ip
    8dd4:	7bdb      	ldrb	r3, [r3, #15]
    8dd6:	061b      	lsls	r3, r3, #24
    8dd8:	4313      	orrs	r3, r2
    8dda:	1859      	adds	r1, r3, r1
    8ddc:	7a0b      	ldrb	r3, [r1, #8]
    8dde:	7a4a      	ldrb	r2, [r1, #9]
    8de0:	0212      	lsls	r2, r2, #8
    8de2:	431a      	orrs	r2, r3
    8de4:	7a8b      	ldrb	r3, [r1, #10]
    8de6:	041b      	lsls	r3, r3, #16
    8de8:	431a      	orrs	r2, r3
    8dea:	7acb      	ldrb	r3, [r1, #11]
    8dec:	061b      	lsls	r3, r3, #24
    8dee:	4313      	orrs	r3, r2
    8df0:	9a03      	ldr	r2, [sp, #12]
    8df2:	4293      	cmp	r3, r2
    8df4:	d8a3      	bhi.n	8d3e <DutyCycleCallback+0x66>
    8df6:	2b00      	cmp	r3, #0
    8df8:	d0a1      	beq.n	8d3e <DutyCycleCallback+0x66>
                minimSubBandTimer  = RegParams.pSubBandParams[i].subBandTimeout;
    8dfa:	9303      	str	r3, [sp, #12]
                found = 1;
    8dfc:	2301      	movs	r3, #1
    8dfe:	9304      	str	r3, [sp, #16]
    8e00:	e79d      	b.n	8d3e <DutyCycleCallback+0x66>
    if (( DutyCycleTimeout != 0 ))
    8e02:	9b05      	ldr	r3, [sp, #20]
    8e04:	2b00      	cmp	r3, #0
    8e06:	d031      	beq.n	8e6c <DutyCycleCallback+0x194>
	    if (DutyCycleTimeout > RegParams.pDutyCycleTimer->lastTimerValue)
    8e08:	4937      	ldr	r1, [pc, #220]	; (8ee8 <DutyCycleCallback+0x210>)
    8e0a:	7c0b      	ldrb	r3, [r1, #16]
    8e0c:	7c4a      	ldrb	r2, [r1, #17]
    8e0e:	0212      	lsls	r2, r2, #8
    8e10:	431a      	orrs	r2, r3
    8e12:	7c8b      	ldrb	r3, [r1, #18]
    8e14:	041b      	lsls	r3, r3, #16
    8e16:	431a      	orrs	r2, r3
    8e18:	7ccb      	ldrb	r3, [r1, #19]
    8e1a:	061b      	lsls	r3, r3, #24
    8e1c:	4313      	orrs	r3, r2
    8e1e:	7819      	ldrb	r1, [r3, #0]
    8e20:	785a      	ldrb	r2, [r3, #1]
    8e22:	0212      	lsls	r2, r2, #8
    8e24:	430a      	orrs	r2, r1
    8e26:	7899      	ldrb	r1, [r3, #2]
    8e28:	0409      	lsls	r1, r1, #16
    8e2a:	430a      	orrs	r2, r1
    8e2c:	78d9      	ldrb	r1, [r3, #3]
    8e2e:	0609      	lsls	r1, r1, #24
    8e30:	4311      	orrs	r1, r2
    8e32:	9a05      	ldr	r2, [sp, #20]
    8e34:	428a      	cmp	r2, r1
    8e36:	d90f      	bls.n	8e58 <DutyCycleCallback+0x180>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = DutyCycleTimeout - RegParams.pDutyCycleTimer->lastTimerValue;
    8e38:	1a51      	subs	r1, r2, r1
    8e3a:	4b2b      	ldr	r3, [pc, #172]	; (8ee8 <DutyCycleCallback+0x210>)
    8e3c:	22ba      	movs	r2, #186	; 0xba
    8e3e:	32ff      	adds	r2, #255	; 0xff
    8e40:	5499      	strb	r1, [r3, r2]
    8e42:	0a0a      	lsrs	r2, r1, #8
    8e44:	33ba      	adds	r3, #186	; 0xba
    8e46:	33ff      	adds	r3, #255	; 0xff
    8e48:	705a      	strb	r2, [r3, #1]
    8e4a:	0c0a      	lsrs	r2, r1, #16
    8e4c:	709a      	strb	r2, [r3, #2]
    8e4e:	0e0a      	lsrs	r2, r1, #24
    8e50:	70da      	strb	r2, [r3, #3]
		if(DutyCycleTimeout)
    8e52:	2900      	cmp	r1, #0
    8e54:	d10e      	bne.n	8e74 <DutyCycleCallback+0x19c>
    8e56:	e009      	b.n	8e6c <DutyCycleCallback+0x194>
		    RegParams.cmnParams.paramsType2.aggregatedDutyCycleTimeout = 0;
    8e58:	4b23      	ldr	r3, [pc, #140]	; (8ee8 <DutyCycleCallback+0x210>)
    8e5a:	2100      	movs	r1, #0
    8e5c:	22ba      	movs	r2, #186	; 0xba
    8e5e:	32ff      	adds	r2, #255	; 0xff
    8e60:	5499      	strb	r1, [r3, r2]
    8e62:	189b      	adds	r3, r3, r2
    8e64:	2200      	movs	r2, #0
    8e66:	705a      	strb	r2, [r3, #1]
    8e68:	709a      	strb	r2, [r3, #2]
    8e6a:	70da      	strb	r2, [r3, #3]
    if ( found == 1 )
    8e6c:	9b04      	ldr	r3, [sp, #16]
    8e6e:	2b00      	cmp	r3, #0
    8e70:	d02a      	beq.n	8ec8 <DutyCycleCallback+0x1f0>
    8e72:	2100      	movs	r1, #0
    8e74:	9a03      	ldr	r2, [sp, #12]
    8e76:	4291      	cmp	r1, r2
    8e78:	d200      	bcs.n	8e7c <DutyCycleCallback+0x1a4>
    8e7a:	0011      	movs	r1, r2
        RegParams.pDutyCycleTimer->lastTimerValue = nextTimer;
    8e7c:	4b1a      	ldr	r3, [pc, #104]	; (8ee8 <DutyCycleCallback+0x210>)
    8e7e:	7c1a      	ldrb	r2, [r3, #16]
    8e80:	7c58      	ldrb	r0, [r3, #17]
    8e82:	0200      	lsls	r0, r0, #8
    8e84:	4310      	orrs	r0, r2
    8e86:	7c9a      	ldrb	r2, [r3, #18]
    8e88:	0412      	lsls	r2, r2, #16
    8e8a:	4310      	orrs	r0, r2
    8e8c:	7cda      	ldrb	r2, [r3, #19]
    8e8e:	0612      	lsls	r2, r2, #24
    8e90:	4302      	orrs	r2, r0
    8e92:	7011      	strb	r1, [r2, #0]
    8e94:	0a08      	lsrs	r0, r1, #8
    8e96:	7050      	strb	r0, [r2, #1]
    8e98:	0c08      	lsrs	r0, r1, #16
    8e9a:	7090      	strb	r0, [r2, #2]
    8e9c:	0e08      	lsrs	r0, r1, #24
    8e9e:	70d0      	strb	r0, [r2, #3]
		SwTimerStart (RegParams.pDutyCycleTimer->timerId, MS_TO_US(nextTimer), SW_TIMEOUT_RELATIVE, (void *)DutyCycleCallback, NULL);
    8ea0:	22fa      	movs	r2, #250	; 0xfa
    8ea2:	0092      	lsls	r2, r2, #2
    8ea4:	4351      	muls	r1, r2
    8ea6:	7c18      	ldrb	r0, [r3, #16]
    8ea8:	7c5a      	ldrb	r2, [r3, #17]
    8eaa:	0212      	lsls	r2, r2, #8
    8eac:	4310      	orrs	r0, r2
    8eae:	7c9a      	ldrb	r2, [r3, #18]
    8eb0:	0412      	lsls	r2, r2, #16
    8eb2:	4302      	orrs	r2, r0
    8eb4:	7cdb      	ldrb	r3, [r3, #19]
    8eb6:	061b      	lsls	r3, r3, #24
    8eb8:	4313      	orrs	r3, r2
    8eba:	7918      	ldrb	r0, [r3, #4]
    8ebc:	2300      	movs	r3, #0
    8ebe:	9300      	str	r3, [sp, #0]
    8ec0:	4b0a      	ldr	r3, [pc, #40]	; (8eec <DutyCycleCallback+0x214>)
    8ec2:	2200      	movs	r2, #0
    8ec4:	4c0a      	ldr	r4, [pc, #40]	; (8ef0 <DutyCycleCallback+0x218>)
    8ec6:	47a0      	blx	r4
}
    8ec8:	b007      	add	sp, #28
    8eca:	bc3c      	pop	{r2, r3, r4, r5}
    8ecc:	4690      	mov	r8, r2
    8ece:	4699      	mov	r9, r3
    8ed0:	46a2      	mov	sl, r4
    8ed2:	46ab      	mov	fp, r5
    8ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (( DutyCycleTimeout != 0 ))
    8ed6:	9b05      	ldr	r3, [sp, #20]
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d0f5      	beq.n	8ec8 <DutyCycleCallback+0x1f0>
    bool found = 0;
    8edc:	2300      	movs	r3, #0
    8ede:	9304      	str	r3, [sp, #16]
    uint32_t minimSubBandTimer = UINT32_MAX;
    8ee0:	3b01      	subs	r3, #1
    8ee2:	9303      	str	r3, [sp, #12]
    8ee4:	e790      	b.n	8e08 <DutyCycleCallback+0x130>
    8ee6:	46c0      	nop			; (mov r8, r8)
    8ee8:	20001b54 	.word	0x20001b54
    8eec:	00008cd9 	.word	0x00008cd9
    8ef0:	0000bf29 	.word	0x0000bf29

00008ef4 <setLBTTimer>:
{
    8ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
    8ef6:	46de      	mov	lr, fp
    8ef8:	4657      	mov	r7, sl
    8efa:	464e      	mov	r6, r9
    8efc:	4645      	mov	r5, r8
    8efe:	b5e0      	push	{r5, r6, r7, lr}
    8f00:	b085      	sub	sp, #20
    i = RegParams.lastUsedChannelIndex;
    8f02:	4a70      	ldr	r2, [pc, #448]	; (90c4 <setLBTTimer+0x1d0>)
    8f04:	232f      	movs	r3, #47	; 0x2f
	RegParams.cmnParams.paramsType2.channelTimer[i] = LBT_TRANSMIT_CHANNEL_PAUSE_DURATION;
    8f06:	5cd4      	ldrb	r4, [r2, r3]
    8f08:	0023      	movs	r3, r4
    8f0a:	3358      	adds	r3, #88	; 0x58
    8f0c:	009b      	lsls	r3, r3, #2
    8f0e:	18d3      	adds	r3, r2, r3
    8f10:	2132      	movs	r1, #50	; 0x32
    8f12:	7219      	strb	r1, [r3, #8]
    8f14:	2100      	movs	r1, #0
    8f16:	7259      	strb	r1, [r3, #9]
    8f18:	7299      	strb	r1, [r3, #10]
    8f1a:	72d9      	strb	r1, [r3, #11]
	if(SwTimerIsRunning(pLBTTimer->timerId))
    8f1c:	23d6      	movs	r3, #214	; 0xd6
    8f1e:	005b      	lsls	r3, r3, #1
    8f20:	5cd0      	ldrb	r0, [r2, r3]
    8f22:	4b69      	ldr	r3, [pc, #420]	; (90c8 <setLBTTimer+0x1d4>)
    8f24:	4798      	blx	r3
    8f26:	2800      	cmp	r0, #0
    8f28:	d12f      	bne.n	8f8a <setLBTTimer+0x96>
		minim = RegParams.cmnParams.paramsType2.channelTimer[i];
    8f2a:	4866      	ldr	r0, [pc, #408]	; (90c4 <setLBTTimer+0x1d0>)
    8f2c:	0023      	movs	r3, r4
    8f2e:	3358      	adds	r3, #88	; 0x58
    8f30:	009b      	lsls	r3, r3, #2
    8f32:	18c3      	adds	r3, r0, r3
    8f34:	7a19      	ldrb	r1, [r3, #8]
    8f36:	7a5a      	ldrb	r2, [r3, #9]
    8f38:	0212      	lsls	r2, r2, #8
    8f3a:	4311      	orrs	r1, r2
    8f3c:	7a9a      	ldrb	r2, [r3, #10]
    8f3e:	0412      	lsls	r2, r2, #16
    8f40:	430a      	orrs	r2, r1
    8f42:	7ad9      	ldrb	r1, [r3, #11]
    8f44:	0609      	lsls	r1, r1, #24
    8f46:	4311      	orrs	r1, r2
    8f48:	4689      	mov	r9, r1
	for(i = 0; i < RegParams.maxChannels; i++)
    8f4a:	232a      	movs	r3, #42	; 0x2a
    8f4c:	56c3      	ldrsb	r3, [r0, r3]
    8f4e:	4698      	mov	r8, r3
    8f50:	2b00      	cmp	r3, #0
    8f52:	dc00      	bgt.n	8f56 <setLBTTimer+0x62>
    8f54:	e08b      	b.n	906e <setLBTTimer+0x17a>
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    8f56:	2300      	movs	r3, #0
    8f58:	469a      	mov	sl, r3
		found = 1;
    8f5a:	3301      	adds	r3, #1
    8f5c:	9303      	str	r3, [sp, #12]
		if(i != RegParams.lastUsedChannelIndex)
    8f5e:	4a59      	ldr	r2, [pc, #356]	; (90c4 <setLBTTimer+0x1d0>)
    8f60:	232f      	movs	r3, #47	; 0x2f
    8f62:	5cd0      	ldrb	r0, [r2, r3]
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    8f64:	7911      	ldrb	r1, [r2, #4]
    8f66:	7953      	ldrb	r3, [r2, #5]
    8f68:	021b      	lsls	r3, r3, #8
    8f6a:	430b      	orrs	r3, r1
    8f6c:	7991      	ldrb	r1, [r2, #6]
    8f6e:	0409      	lsls	r1, r1, #16
    8f70:	430b      	orrs	r3, r1
    8f72:	79d1      	ldrb	r1, [r2, #7]
    8f74:	0609      	lsls	r1, r1, #24
    8f76:	4319      	orrs	r1, r3
    8f78:	2600      	movs	r6, #0
    8f7a:	2200      	movs	r2, #0
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    8f7c:	2300      	movs	r3, #0
    8f7e:	469c      	mov	ip, r3
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    8f80:	4653      	mov	r3, sl
    8f82:	9302      	str	r3, [sp, #8]
    8f84:	468b      	mov	fp, r1
    8f86:	4645      	mov	r5, r8
    8f88:	e03b      	b.n	9002 <setLBTTimer+0x10e>
		SwTimerStop(pLBTTimer->timerId);
    8f8a:	4c4e      	ldr	r4, [pc, #312]	; (90c4 <setLBTTimer+0x1d0>)
    8f8c:	25d6      	movs	r5, #214	; 0xd6
    8f8e:	006d      	lsls	r5, r5, #1
    8f90:	5d60      	ldrb	r0, [r4, r5]
    8f92:	4b4e      	ldr	r3, [pc, #312]	; (90cc <setLBTTimer+0x1d8>)
    8f94:	4798      	blx	r3
		ticks = SwTimerReadValue(pLBTTimer->timerId);
    8f96:	5d60      	ldrb	r0, [r4, r5]
    8f98:	4b4d      	ldr	r3, [pc, #308]	; (90d0 <setLBTTimer+0x1dc>)
    8f9a:	4798      	blx	r3
	for(i = 0; i < RegParams.maxChannels; i++)
    8f9c:	232a      	movs	r3, #42	; 0x2a
    8f9e:	56e3      	ldrsb	r3, [r4, r3]
    8fa0:	4698      	mov	r8, r3
    8fa2:	2b00      	cmp	r3, #0
    8fa4:	dd66      	ble.n	9074 <setLBTTimer+0x180>
		delta = pLBTTimer->lastTimerValue - US_TO_MS(ticks);
    8fa6:	4a47      	ldr	r2, [pc, #284]	; (90c4 <setLBTTimer+0x1d0>)
    8fa8:	23d4      	movs	r3, #212	; 0xd4
    8faa:	005b      	lsls	r3, r3, #1
    8fac:	5cd4      	ldrb	r4, [r2, r3]
    8fae:	23aa      	movs	r3, #170	; 0xaa
    8fb0:	33ff      	adds	r3, #255	; 0xff
    8fb2:	5cd3      	ldrb	r3, [r2, r3]
    8fb4:	021b      	lsls	r3, r3, #8
    8fb6:	4323      	orrs	r3, r4
    8fb8:	21d5      	movs	r1, #213	; 0xd5
    8fba:	0049      	lsls	r1, r1, #1
    8fbc:	5c54      	ldrb	r4, [r2, r1]
    8fbe:	0424      	lsls	r4, r4, #16
    8fc0:	4323      	orrs	r3, r4
    8fc2:	21ac      	movs	r1, #172	; 0xac
    8fc4:	31ff      	adds	r1, #255	; 0xff
    8fc6:	5c54      	ldrb	r4, [r2, r1]
    8fc8:	0624      	lsls	r4, r4, #24
    8fca:	431c      	orrs	r4, r3
    8fcc:	21fa      	movs	r1, #250	; 0xfa
    8fce:	0089      	lsls	r1, r1, #2
    8fd0:	4b40      	ldr	r3, [pc, #256]	; (90d4 <setLBTTimer+0x1e0>)
    8fd2:	4798      	blx	r3
    8fd4:	1a23      	subs	r3, r4, r0
    8fd6:	469a      	mov	sl, r3
    uint32_t delta = 0, minim = UINT32_MAX, ticks;
    8fd8:	2301      	movs	r3, #1
    8fda:	425b      	negs	r3, r3
    8fdc:	4699      	mov	r9, r3
    bool found = 0;
    8fde:	2300      	movs	r3, #0
    8fe0:	9303      	str	r3, [sp, #12]
    8fe2:	e7bc      	b.n	8f5e <setLBTTimer+0x6a>
					RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    8fe4:	3658      	adds	r6, #88	; 0x58
    8fe6:	00b6      	lsls	r6, r6, #2
    8fe8:	4b36      	ldr	r3, [pc, #216]	; (90c4 <setLBTTimer+0x1d0>)
    8fea:	4698      	mov	r8, r3
    8fec:	4446      	add	r6, r8
    8fee:	4663      	mov	r3, ip
    8ff0:	7233      	strb	r3, [r6, #8]
    8ff2:	7273      	strb	r3, [r6, #9]
    8ff4:	72b3      	strb	r3, [r6, #10]
    8ff6:	72f3      	strb	r3, [r6, #11]
	for(i = 0; i < RegParams.maxChannels; i++)
    8ff8:	3201      	adds	r2, #1
    8ffa:	b2d2      	uxtb	r2, r2
    8ffc:	0016      	movs	r6, r2
    8ffe:	42aa      	cmp	r2, r5
    9000:	da32      	bge.n	9068 <setLBTTimer+0x174>
		if(i != RegParams.lastUsedChannelIndex)
    9002:	4290      	cmp	r0, r2
    9004:	d0f8      	beq.n	8ff8 <setLBTTimer+0x104>
			if((RegParams.pChParams[i].status == ENABLED) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    9006:	0053      	lsls	r3, r2, #1
    9008:	4659      	mov	r1, fp
    900a:	5c5c      	ldrb	r4, [r3, r1]
    900c:	2c00      	cmp	r4, #0
    900e:	d0f3      	beq.n	8ff8 <setLBTTimer+0x104>
    9010:	0033      	movs	r3, r6
    9012:	3358      	adds	r3, #88	; 0x58
    9014:	009b      	lsls	r3, r3, #2
    9016:	4f2b      	ldr	r7, [pc, #172]	; (90c4 <setLBTTimer+0x1d0>)
    9018:	46b8      	mov	r8, r7
    901a:	4443      	add	r3, r8
    901c:	7a1f      	ldrb	r7, [r3, #8]
    901e:	46ba      	mov	sl, r7
    9020:	7a5f      	ldrb	r7, [r3, #9]
    9022:	023f      	lsls	r7, r7, #8
    9024:	46b8      	mov	r8, r7
    9026:	4657      	mov	r7, sl
    9028:	4641      	mov	r1, r8
    902a:	430f      	orrs	r7, r1
    902c:	7a99      	ldrb	r1, [r3, #10]
    902e:	0409      	lsls	r1, r1, #16
    9030:	430f      	orrs	r7, r1
    9032:	7adb      	ldrb	r3, [r3, #11]
    9034:	061b      	lsls	r3, r3, #24
    9036:	433b      	orrs	r3, r7
    9038:	d0de      	beq.n	8ff8 <setLBTTimer+0x104>
				if(RegParams.cmnParams.paramsType2.channelTimer[i] > delta)
    903a:	9f02      	ldr	r7, [sp, #8]
    903c:	42bb      	cmp	r3, r7
    903e:	d9d1      	bls.n	8fe4 <setLBTTimer+0xf0>
					RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - delta;
    9040:	1bdb      	subs	r3, r3, r7
    9042:	3658      	adds	r6, #88	; 0x58
    9044:	00b6      	lsls	r6, r6, #2
    9046:	491f      	ldr	r1, [pc, #124]	; (90c4 <setLBTTimer+0x1d0>)
    9048:	4688      	mov	r8, r1
    904a:	4446      	add	r6, r8
    904c:	7233      	strb	r3, [r6, #8]
    904e:	0a19      	lsrs	r1, r3, #8
    9050:	7271      	strb	r1, [r6, #9]
    9052:	0c19      	lsrs	r1, r3, #16
    9054:	72b1      	strb	r1, [r6, #10]
    9056:	0e19      	lsrs	r1, r3, #24
    9058:	72f1      	strb	r1, [r6, #11]
				if((RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0))
    905a:	454b      	cmp	r3, r9
    905c:	d8cc      	bhi.n	8ff8 <setLBTTimer+0x104>
    905e:	2b00      	cmp	r3, #0
    9060:	d0ca      	beq.n	8ff8 <setLBTTimer+0x104>
    9062:	4699      	mov	r9, r3
					found = 1;
    9064:	9403      	str	r4, [sp, #12]
    9066:	e7c7      	b.n	8ff8 <setLBTTimer+0x104>
	if((found == 1) && minim)
    9068:	9b03      	ldr	r3, [sp, #12]
    906a:	2b00      	cmp	r3, #0
    906c:	d002      	beq.n	9074 <setLBTTimer+0x180>
    906e:	464b      	mov	r3, r9
    9070:	2b00      	cmp	r3, #0
    9072:	d107      	bne.n	9084 <setLBTTimer+0x190>
}
    9074:	2008      	movs	r0, #8
    9076:	b005      	add	sp, #20
    9078:	bc3c      	pop	{r2, r3, r4, r5}
    907a:	4690      	mov	r8, r2
    907c:	4699      	mov	r9, r3
    907e:	46a2      	mov	sl, r4
    9080:	46ab      	mov	fp, r5
    9082:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pLBTTimer->lastTimerValue = minim;
    9084:	4b0f      	ldr	r3, [pc, #60]	; (90c4 <setLBTTimer+0x1d0>)
    9086:	22d4      	movs	r2, #212	; 0xd4
    9088:	0052      	lsls	r2, r2, #1
    908a:	4649      	mov	r1, r9
    908c:	5499      	strb	r1, [r3, r2]
    908e:	464a      	mov	r2, r9
    9090:	0a11      	lsrs	r1, r2, #8
    9092:	001a      	movs	r2, r3
    9094:	32a9      	adds	r2, #169	; 0xa9
    9096:	32ff      	adds	r2, #255	; 0xff
    9098:	7051      	strb	r1, [r2, #1]
    909a:	4649      	mov	r1, r9
    909c:	0c09      	lsrs	r1, r1, #16
    909e:	7091      	strb	r1, [r2, #2]
    90a0:	4649      	mov	r1, r9
    90a2:	0e09      	lsrs	r1, r1, #24
    90a4:	70d1      	strb	r1, [r2, #3]
		SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    90a6:	21fa      	movs	r1, #250	; 0xfa
    90a8:	0089      	lsls	r1, r1, #2
    90aa:	464a      	mov	r2, r9
    90ac:	4351      	muls	r1, r2
    90ae:	22d6      	movs	r2, #214	; 0xd6
    90b0:	0052      	lsls	r2, r2, #1
    90b2:	5c98      	ldrb	r0, [r3, r2]
    90b4:	2300      	movs	r3, #0
    90b6:	9300      	str	r3, [sp, #0]
    90b8:	4b07      	ldr	r3, [pc, #28]	; (90d8 <setLBTTimer+0x1e4>)
    90ba:	2200      	movs	r2, #0
    90bc:	4c07      	ldr	r4, [pc, #28]	; (90dc <setLBTTimer+0x1e8>)
    90be:	47a0      	blx	r4
    90c0:	e7d8      	b.n	9074 <setLBTTimer+0x180>
    90c2:	46c0      	nop			; (mov r8, r8)
    90c4:	20001b54 	.word	0x20001b54
    90c8:	0000c0c1 	.word	0x0000c0c1
    90cc:	0000c235 	.word	0x0000c235
    90d0:	0000c0d5 	.word	0x0000c0d5
    90d4:	00012d11 	.word	0x00012d11
    90d8:	000090e1 	.word	0x000090e1
    90dc:	0000bf29 	.word	0x0000bf29

000090e0 <LBTChannelPauseCallback>:
{
    90e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    90e2:	46de      	mov	lr, fp
    90e4:	4657      	mov	r7, sl
    90e6:	464e      	mov	r6, r9
    90e8:	4645      	mov	r5, r8
    90ea:	b5e0      	push	{r5, r6, r7, lr}
    90ec:	b085      	sub	sp, #20
    for (i=0; i < RegParams.maxChannels; i++)
    90ee:	232a      	movs	r3, #42	; 0x2a
    90f0:	4a49      	ldr	r2, [pc, #292]	; (9218 <LBTChannelPauseCallback+0x138>)
    90f2:	56d6      	ldrsb	r6, [r2, r3]
    90f4:	2e00      	cmp	r6, #0
    90f6:	dd68      	ble.n	91ca <LBTChannelPauseCallback+0xea>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    90f8:	0013      	movs	r3, r2
    90fa:	7915      	ldrb	r5, [r2, #4]
    90fc:	7952      	ldrb	r2, [r2, #5]
    90fe:	0212      	lsls	r2, r2, #8
    9100:	432a      	orrs	r2, r5
    9102:	799d      	ldrb	r5, [r3, #6]
    9104:	042d      	lsls	r5, r5, #16
    9106:	432a      	orrs	r2, r5
    9108:	79dd      	ldrb	r5, [r3, #7]
    910a:	062d      	lsls	r5, r5, #24
    910c:	4315      	orrs	r5, r2
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    910e:	22d4      	movs	r2, #212	; 0xd4
    9110:	0052      	lsls	r2, r2, #1
    9112:	5c9f      	ldrb	r7, [r3, r2]
    9114:	22aa      	movs	r2, #170	; 0xaa
    9116:	32ff      	adds	r2, #255	; 0xff
    9118:	5c9a      	ldrb	r2, [r3, r2]
    911a:	0212      	lsls	r2, r2, #8
    911c:	433a      	orrs	r2, r7
    911e:	21d5      	movs	r1, #213	; 0xd5
    9120:	0049      	lsls	r1, r1, #1
    9122:	5c5f      	ldrb	r7, [r3, r1]
    9124:	043f      	lsls	r7, r7, #16
    9126:	433a      	orrs	r2, r7
    9128:	21ac      	movs	r1, #172	; 0xac
    912a:	31ff      	adds	r1, #255	; 0xff
    912c:	5c5f      	ldrb	r7, [r3, r1]
    912e:	063f      	lsls	r7, r7, #24
    9130:	4317      	orrs	r7, r2
    9132:	9703      	str	r7, [sp, #12]
    9134:	2000      	movs	r0, #0
    9136:	2300      	movs	r3, #0
    9138:	2200      	movs	r2, #0
    913a:	4691      	mov	r9, r2
    913c:	3a01      	subs	r2, #1
    913e:	4690      	mov	r8, r2
                RegParams.cmnParams.paramsType2.channelTimer[i] = 0;
    9140:	2200      	movs	r2, #0
    9142:	4694      	mov	ip, r2
    9144:	e00e      	b.n	9164 <LBTChannelPauseCallback+0x84>
    9146:	3058      	adds	r0, #88	; 0x58
    9148:	0080      	lsls	r0, r0, #2
    914a:	4a33      	ldr	r2, [pc, #204]	; (9218 <LBTChannelPauseCallback+0x138>)
    914c:	4692      	mov	sl, r2
    914e:	4450      	add	r0, sl
    9150:	4662      	mov	r2, ip
    9152:	7202      	strb	r2, [r0, #8]
    9154:	7242      	strb	r2, [r0, #9]
    9156:	7282      	strb	r2, [r0, #10]
    9158:	72c2      	strb	r2, [r0, #11]
    for (i=0; i < RegParams.maxChannels; i++)
    915a:	3301      	adds	r3, #1
    915c:	b2db      	uxtb	r3, r3
    915e:	0018      	movs	r0, r3
    9160:	42b3      	cmp	r3, r6
    9162:	da2f      	bge.n	91c4 <LBTChannelPauseCallback+0xe4>
        if ((RegParams.pChParams[i].status == ENABLED) && ( RegParams.cmnParams.paramsType2.channelTimer[i] != 0 ))
    9164:	005a      	lsls	r2, r3, #1
    9166:	5d54      	ldrb	r4, [r2, r5]
    9168:	2c00      	cmp	r4, #0
    916a:	d0f6      	beq.n	915a <LBTChannelPauseCallback+0x7a>
    916c:	0002      	movs	r2, r0
    916e:	3258      	adds	r2, #88	; 0x58
    9170:	0092      	lsls	r2, r2, #2
    9172:	4929      	ldr	r1, [pc, #164]	; (9218 <LBTChannelPauseCallback+0x138>)
    9174:	468a      	mov	sl, r1
    9176:	4452      	add	r2, sl
    9178:	7a17      	ldrb	r7, [r2, #8]
    917a:	46bb      	mov	fp, r7
    917c:	7a57      	ldrb	r7, [r2, #9]
    917e:	023f      	lsls	r7, r7, #8
    9180:	46ba      	mov	sl, r7
    9182:	465f      	mov	r7, fp
    9184:	4651      	mov	r1, sl
    9186:	430f      	orrs	r7, r1
    9188:	7a91      	ldrb	r1, [r2, #10]
    918a:	0409      	lsls	r1, r1, #16
    918c:	430f      	orrs	r7, r1
    918e:	7ad2      	ldrb	r2, [r2, #11]
    9190:	0612      	lsls	r2, r2, #24
    9192:	433a      	orrs	r2, r7
    9194:	d0e1      	beq.n	915a <LBTChannelPauseCallback+0x7a>
            if ( RegParams.cmnParams.paramsType2.channelTimer[i] > pLBTTimer->lastTimerValue)
    9196:	9f03      	ldr	r7, [sp, #12]
    9198:	42ba      	cmp	r2, r7
    919a:	d9d4      	bls.n	9146 <LBTChannelPauseCallback+0x66>
                RegParams.cmnParams.paramsType2.channelTimer[i] = RegParams.cmnParams.paramsType2.channelTimer[i] - pLBTTimer->lastTimerValue;
    919c:	1bd2      	subs	r2, r2, r7
    919e:	3058      	adds	r0, #88	; 0x58
    91a0:	0080      	lsls	r0, r0, #2
    91a2:	491d      	ldr	r1, [pc, #116]	; (9218 <LBTChannelPauseCallback+0x138>)
    91a4:	468a      	mov	sl, r1
    91a6:	4450      	add	r0, sl
    91a8:	7202      	strb	r2, [r0, #8]
    91aa:	0a11      	lsrs	r1, r2, #8
    91ac:	7241      	strb	r1, [r0, #9]
    91ae:	0c11      	lsrs	r1, r2, #16
    91b0:	7281      	strb	r1, [r0, #10]
    91b2:	0e11      	lsrs	r1, r2, #24
    91b4:	72c1      	strb	r1, [r0, #11]
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    91b6:	4542      	cmp	r2, r8
    91b8:	d8cf      	bhi.n	915a <LBTChannelPauseCallback+0x7a>
    91ba:	2a00      	cmp	r2, #0
    91bc:	d0cd      	beq.n	915a <LBTChannelPauseCallback+0x7a>
                found = 1;
    91be:	46a1      	mov	r9, r4
            if ( (RegParams.cmnParams.paramsType2.channelTimer[i] <= minim) && (RegParams.cmnParams.paramsType2.channelTimer[i] != 0) )
    91c0:	4690      	mov	r8, r2
    91c2:	e7ca      	b.n	915a <LBTChannelPauseCallback+0x7a>
    if ( found == 1 )
    91c4:	464b      	mov	r3, r9
    91c6:	2b00      	cmp	r3, #0
    91c8:	d106      	bne.n	91d8 <LBTChannelPauseCallback+0xf8>
}
    91ca:	b005      	add	sp, #20
    91cc:	bc3c      	pop	{r2, r3, r4, r5}
    91ce:	4690      	mov	r8, r2
    91d0:	4699      	mov	r9, r3
    91d2:	46a2      	mov	sl, r4
    91d4:	46ab      	mov	fp, r5
    91d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        pLBTTimer->lastTimerValue = minim;
    91d8:	4b0f      	ldr	r3, [pc, #60]	; (9218 <LBTChannelPauseCallback+0x138>)
    91da:	22d4      	movs	r2, #212	; 0xd4
    91dc:	0052      	lsls	r2, r2, #1
    91de:	4641      	mov	r1, r8
    91e0:	5499      	strb	r1, [r3, r2]
    91e2:	4642      	mov	r2, r8
    91e4:	0a11      	lsrs	r1, r2, #8
    91e6:	001a      	movs	r2, r3
    91e8:	32a9      	adds	r2, #169	; 0xa9
    91ea:	32ff      	adds	r2, #255	; 0xff
    91ec:	7051      	strb	r1, [r2, #1]
    91ee:	4641      	mov	r1, r8
    91f0:	0c09      	lsrs	r1, r1, #16
    91f2:	7091      	strb	r1, [r2, #2]
    91f4:	4641      	mov	r1, r8
    91f6:	0e09      	lsrs	r1, r1, #24
    91f8:	70d1      	strb	r1, [r2, #3]
        SwTimerStart (pLBTTimer->timerId, MS_TO_US(minim), SW_TIMEOUT_RELATIVE, (void *)LBTChannelPauseCallback, NULL);
    91fa:	21fa      	movs	r1, #250	; 0xfa
    91fc:	0089      	lsls	r1, r1, #2
    91fe:	4642      	mov	r2, r8
    9200:	4351      	muls	r1, r2
    9202:	22d6      	movs	r2, #214	; 0xd6
    9204:	0052      	lsls	r2, r2, #1
    9206:	5c98      	ldrb	r0, [r3, r2]
    9208:	2300      	movs	r3, #0
    920a:	9300      	str	r3, [sp, #0]
    920c:	4b03      	ldr	r3, [pc, #12]	; (921c <LBTChannelPauseCallback+0x13c>)
    920e:	2200      	movs	r2, #0
    9210:	4c03      	ldr	r4, [pc, #12]	; (9220 <LBTChannelPauseCallback+0x140>)
    9212:	47a0      	blx	r4
}
    9214:	e7d9      	b.n	91ca <LBTChannelPauseCallback+0xea>
    9216:	46c0      	nop			; (mov r8, r8)
    9218:	20001b54 	.word	0x20001b54
    921c:	000090e1 	.word	0x000090e1
    9220:	0000bf29 	.word	0x0000bf29

00009224 <JoinDutyCycleCallback>:
{   
    9224:	b510      	push	{r4, lr}
    9226:	b082      	sub	sp, #8
	if(RegParams.pJoinDutyCycleTimer->remainingtime!=0)
    9228:	492e      	ldr	r1, [pc, #184]	; (92e4 <JoinDutyCycleCallback+0xc0>)
    922a:	7d0b      	ldrb	r3, [r1, #20]
    922c:	7d4a      	ldrb	r2, [r1, #21]
    922e:	0212      	lsls	r2, r2, #8
    9230:	431a      	orrs	r2, r3
    9232:	7d8b      	ldrb	r3, [r1, #22]
    9234:	041b      	lsls	r3, r3, #16
    9236:	431a      	orrs	r2, r3
    9238:	7dcb      	ldrb	r3, [r1, #23]
    923a:	061b      	lsls	r3, r3, #24
    923c:	4313      	orrs	r3, r2
    923e:	7919      	ldrb	r1, [r3, #4]
    9240:	795a      	ldrb	r2, [r3, #5]
    9242:	0212      	lsls	r2, r2, #8
    9244:	430a      	orrs	r2, r1
    9246:	7999      	ldrb	r1, [r3, #6]
    9248:	0409      	lsls	r1, r1, #16
    924a:	430a      	orrs	r2, r1
    924c:	79d9      	ldrb	r1, [r3, #7]
    924e:	0609      	lsls	r1, r1, #24
    9250:	4311      	orrs	r1, r2
    9252:	d03c      	beq.n	92ce <JoinDutyCycleCallback+0xaa>
		if(RegParams.pJoinDutyCycleTimer->remainingtime>US_TO_MS(SWTIMER_MAX_TIMEOUT))
    9254:	4a24      	ldr	r2, [pc, #144]	; (92e8 <JoinDutyCycleCallback+0xc4>)
    9256:	4291      	cmp	r1, r2
    9258:	d91e      	bls.n	9298 <JoinDutyCycleCallback+0x74>
			RegParams.pJoinDutyCycleTimer->remainingtime = RegParams.pJoinDutyCycleTimer->remainingtime-(US_TO_MS(SWTIMER_MAX_TIMEOUT));
    925a:	4a24      	ldr	r2, [pc, #144]	; (92ec <JoinDutyCycleCallback+0xc8>)
    925c:	4694      	mov	ip, r2
    925e:	4461      	add	r1, ip
    9260:	7119      	strb	r1, [r3, #4]
    9262:	0a0a      	lsrs	r2, r1, #8
    9264:	715a      	strb	r2, [r3, #5]
    9266:	0c0a      	lsrs	r2, r1, #16
    9268:	719a      	strb	r2, [r3, #6]
    926a:	0e09      	lsrs	r1, r1, #24
    926c:	71d9      	strb	r1, [r3, #7]
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, SWTIMER_MAX_TIMEOUT, SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    926e:	491d      	ldr	r1, [pc, #116]	; (92e4 <JoinDutyCycleCallback+0xc0>)
    9270:	7d0b      	ldrb	r3, [r1, #20]
    9272:	7d4a      	ldrb	r2, [r1, #21]
    9274:	0212      	lsls	r2, r2, #8
    9276:	431a      	orrs	r2, r3
    9278:	7d8b      	ldrb	r3, [r1, #22]
    927a:	041b      	lsls	r3, r3, #16
    927c:	431a      	orrs	r2, r3
    927e:	7dcb      	ldrb	r3, [r1, #23]
    9280:	061b      	lsls	r3, r3, #24
    9282:	4313      	orrs	r3, r2
    9284:	7a18      	ldrb	r0, [r3, #8]
    9286:	2300      	movs	r3, #0
    9288:	9300      	str	r3, [sp, #0]
    928a:	4b19      	ldr	r3, [pc, #100]	; (92f0 <JoinDutyCycleCallback+0xcc>)
    928c:	2200      	movs	r2, #0
    928e:	4919      	ldr	r1, [pc, #100]	; (92f4 <JoinDutyCycleCallback+0xd0>)
    9290:	4c19      	ldr	r4, [pc, #100]	; (92f8 <JoinDutyCycleCallback+0xd4>)
    9292:	47a0      	blx	r4
}
    9294:	b002      	add	sp, #8
    9296:	bd10      	pop	{r4, pc}
			SwTimerStart(RegParams.pJoinDutyCycleTimer->timerId, MS_TO_US(RegParams.pJoinDutyCycleTimer->remainingtime), SW_TIMEOUT_RELATIVE, (void *)JoinDutyCycleCallback, NULL);
    9298:	22fa      	movs	r2, #250	; 0xfa
    929a:	0092      	lsls	r2, r2, #2
    929c:	4351      	muls	r1, r2
    929e:	7a18      	ldrb	r0, [r3, #8]
    92a0:	2300      	movs	r3, #0
    92a2:	9300      	str	r3, [sp, #0]
    92a4:	4b12      	ldr	r3, [pc, #72]	; (92f0 <JoinDutyCycleCallback+0xcc>)
    92a6:	2200      	movs	r2, #0
    92a8:	4c13      	ldr	r4, [pc, #76]	; (92f8 <JoinDutyCycleCallback+0xd4>)
    92aa:	47a0      	blx	r4
			RegParams.pJoinDutyCycleTimer->remainingtime =0;
    92ac:	490d      	ldr	r1, [pc, #52]	; (92e4 <JoinDutyCycleCallback+0xc0>)
    92ae:	7d0b      	ldrb	r3, [r1, #20]
    92b0:	7d4a      	ldrb	r2, [r1, #21]
    92b2:	0212      	lsls	r2, r2, #8
    92b4:	431a      	orrs	r2, r3
    92b6:	7d8b      	ldrb	r3, [r1, #22]
    92b8:	041b      	lsls	r3, r3, #16
    92ba:	431a      	orrs	r2, r3
    92bc:	7dcb      	ldrb	r3, [r1, #23]
    92be:	061b      	lsls	r3, r3, #24
    92c0:	4313      	orrs	r3, r2
    92c2:	2200      	movs	r2, #0
    92c4:	711a      	strb	r2, [r3, #4]
    92c6:	715a      	strb	r2, [r3, #5]
    92c8:	719a      	strb	r2, [r3, #6]
    92ca:	71da      	strb	r2, [r3, #7]
    92cc:	e7e2      	b.n	9294 <JoinDutyCycleCallback+0x70>
	SwTimerStop(RegParams.pJoinDutyCycleTimer->timerId);
    92ce:	7a18      	ldrb	r0, [r3, #8]
    92d0:	4b0a      	ldr	r3, [pc, #40]	; (92fc <JoinDutyCycleCallback+0xd8>)
    92d2:	4798      	blx	r3
	RegParams.joinDutyCycleTimeout = 0;
    92d4:	4b03      	ldr	r3, [pc, #12]	; (92e4 <JoinDutyCycleCallback+0xc0>)
    92d6:	333e      	adds	r3, #62	; 0x3e
    92d8:	2200      	movs	r2, #0
    92da:	701a      	strb	r2, [r3, #0]
    92dc:	705a      	strb	r2, [r3, #1]
    92de:	709a      	strb	r2, [r3, #2]
    92e0:	70da      	strb	r2, [r3, #3]
}
    92e2:	e7d7      	b.n	9294 <JoinDutyCycleCallback+0x70>
    92e4:	20001b54 	.word	0x20001b54
    92e8:	0020c49b 	.word	0x0020c49b
    92ec:	ffdf3b65 	.word	0xffdf3b65
    92f0:	00009225 	.word	0x00009225
    92f4:	7fffffff 	.word	0x7fffffff
    92f8:	0000bf29 	.word	0x0000bf29
    92fc:	0000c235 	.word	0x0000c235

00009300 <JoinBackoffCallback>:
{
    9300:	b510      	push	{r4, lr}
    9302:	b082      	sub	sp, #8
	RegParams.joinbccount ++;
    9304:	4b0c      	ldr	r3, [pc, #48]	; (9338 <JoinBackoffCallback+0x38>)
    9306:	2142      	movs	r1, #66	; 0x42
    9308:	5c5a      	ldrb	r2, [r3, r1]
    930a:	3201      	adds	r2, #1
    930c:	545a      	strb	r2, [r3, r1]
	SwTimerStart (RegParams.pJoinBackoffTimer->timerId, MS_TO_US(BACKOFF_BASE_TIME_IN_MS), SW_TIMEOUT_RELATIVE, (void *)JoinBackoffCallback, NULL);
    930e:	7e19      	ldrb	r1, [r3, #24]
    9310:	7e5a      	ldrb	r2, [r3, #25]
    9312:	0212      	lsls	r2, r2, #8
    9314:	4311      	orrs	r1, r2
    9316:	7e9a      	ldrb	r2, [r3, #26]
    9318:	0412      	lsls	r2, r2, #16
    931a:	430a      	orrs	r2, r1
    931c:	7edb      	ldrb	r3, [r3, #27]
    931e:	061b      	lsls	r3, r3, #24
    9320:	4313      	orrs	r3, r2
    9322:	7818      	ldrb	r0, [r3, #0]
    9324:	2300      	movs	r3, #0
    9326:	9300      	str	r3, [sp, #0]
    9328:	4b04      	ldr	r3, [pc, #16]	; (933c <JoinBackoffCallback+0x3c>)
    932a:	2200      	movs	r2, #0
    932c:	4904      	ldr	r1, [pc, #16]	; (9340 <JoinBackoffCallback+0x40>)
    932e:	4c05      	ldr	r4, [pc, #20]	; (9344 <JoinBackoffCallback+0x44>)
    9330:	47a0      	blx	r4
}
    9332:	b002      	add	sp, #8
    9334:	bd10      	pop	{r4, pc}
    9336:	46c0      	nop			; (mov r8, r8)
    9338:	20001b54 	.word	0x20001b54
    933c:	00009301 	.word	0x00009301
    9340:	6b49d200 	.word	0x6b49d200
    9344:	0000bf29 	.word	0x0000bf29

00009348 <ValidateDataRangeT2>:
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    9348:	784a      	ldrb	r2, [r1, #1]
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    934a:	230f      	movs	r3, #15
    934c:	4013      	ands	r3, r2
    if ( dataRate > RegParams.minDataRate )
    934e:	2124      	movs	r1, #36	; 0x24
    9350:	4807      	ldr	r0, [pc, #28]	; (9370 <ValidateDataRangeT2+0x28>)
    9352:	5c41      	ldrb	r1, [r0, r1]
		retVal = LORAWAN_INVALID_PARAMETER;
    9354:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9356:	428b      	cmp	r3, r1
    9358:	d900      	bls.n	935c <ValidateDataRangeT2+0x14>
}
    935a:	4770      	bx	lr
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    935c:	0912      	lsrs	r2, r2, #4
		retVal = LORAWAN_INVALID_PARAMETER;
    935e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9360:	428a      	cmp	r2, r1
    9362:	d8fa      	bhi.n	935a <ValidateDataRangeT2+0x12>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9364:	3802      	subs	r0, #2
	   || (dataRateMax < dataRateMin) )
    9366:	4293      	cmp	r3, r2
    9368:	d9f7      	bls.n	935a <ValidateDataRangeT2+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    936a:	3002      	adds	r0, #2
	return retVal;
    936c:	e7f5      	b.n	935a <ValidateDataRangeT2+0x12>
    936e:	46c0      	nop			; (mov r8, r8)
    9370:	20001b54 	.word	0x20001b54

00009374 <setDataRangeT2>:
{
    9374:	b5f0      	push	{r4, r5, r6, r7, lr}
    9376:	46c6      	mov	lr, r8
    9378:	b500      	push	{lr}
    937a:	b082      	sub	sp, #8
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    937c:	780d      	ldrb	r5, [r1, #0]
    937e:	784e      	ldrb	r6, [r1, #1]
	val_chid.channelIndex = update_dr.channelIndex;
    9380:	ab01      	add	r3, sp, #4
    9382:	701d      	strb	r5, [r3, #0]
	val_chid.allowedForDefaultChannels = ALL_CHANNELS;
    9384:	2201      	movs	r2, #1
    9386:	705a      	strb	r2, [r3, #1]
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    9388:	2012      	movs	r0, #18
    938a:	4b24      	ldr	r3, [pc, #144]	; (941c <setDataRangeT2+0xa8>)
    938c:	4798      	blx	r3
		retVal = LORAWAN_INVALID_PARAMETER;
    938e:	240a      	movs	r4, #10
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    9390:	2808      	cmp	r0, #8
    9392:	d004      	beq.n	939e <setDataRangeT2+0x2a>
}
    9394:	0020      	movs	r0, r4
    9396:	b002      	add	sp, #8
    9398:	bc04      	pop	{r2}
    939a:	4690      	mov	r8, r2
    939c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if((ValidateDataRangeT2(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelIdT2(CHANNEL_ID, &val_chid) != LORAWAN_SUCCESS))
    939e:	a901      	add	r1, sp, #4
    93a0:	300d      	adds	r0, #13
    93a2:	4b1f      	ldr	r3, [pc, #124]	; (9420 <setDataRangeT2+0xac>)
    93a4:	4798      	blx	r3
    93a6:	0004      	movs	r4, r0
    93a8:	2808      	cmp	r0, #8
    93aa:	d001      	beq.n	93b0 <setDataRangeT2+0x3c>
		retVal = LORAWAN_INVALID_PARAMETER;
    93ac:	240a      	movs	r4, #10
    93ae:	e7f1      	b.n	9394 <setDataRangeT2+0x20>
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    93b0:	4f1c      	ldr	r7, [pc, #112]	; (9424 <setDataRangeT2+0xb0>)
    93b2:	793b      	ldrb	r3, [r7, #4]
    93b4:	797a      	ldrb	r2, [r7, #5]
    93b6:	0212      	lsls	r2, r2, #8
    93b8:	431a      	orrs	r2, r3
    93ba:	79bb      	ldrb	r3, [r7, #6]
    93bc:	041b      	lsls	r3, r3, #16
    93be:	431a      	orrs	r2, r3
    93c0:	79fb      	ldrb	r3, [r7, #7]
    93c2:	061b      	lsls	r3, r3, #24
    93c4:	4313      	orrs	r3, r2
    93c6:	006a      	lsls	r2, r5, #1
    93c8:	4690      	mov	r8, r2
    93ca:	4443      	add	r3, r8
    93cc:	705e      	strb	r6, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    93ce:	4b16      	ldr	r3, [pc, #88]	; (9428 <setDataRangeT2+0xb4>)
    93d0:	5cfb      	ldrb	r3, [r7, r3]
    93d2:	4a16      	ldr	r2, [pc, #88]	; (942c <setDataRangeT2+0xb8>)
    93d4:	5cb8      	ldrb	r0, [r7, r2]
    93d6:	0200      	lsls	r0, r0, #8
    93d8:	4318      	orrs	r0, r3
    93da:	b2c1      	uxtb	r1, r0
    93dc:	0a00      	lsrs	r0, r0, #8
    93de:	4e14      	ldr	r6, [pc, #80]	; (9430 <setDataRangeT2+0xbc>)
    93e0:	47b0      	blx	r6
		RegParams.pOtherChParams[update_dr.channelIndex].parametersDefined |= DATA_RANGE_DEFINED;
    93e2:	7a3b      	ldrb	r3, [r7, #8]
    93e4:	7a7a      	ldrb	r2, [r7, #9]
    93e6:	0212      	lsls	r2, r2, #8
    93e8:	431a      	orrs	r2, r3
    93ea:	7abb      	ldrb	r3, [r7, #10]
    93ec:	041b      	lsls	r3, r3, #16
    93ee:	431a      	orrs	r2, r3
    93f0:	7afb      	ldrb	r3, [r7, #11]
    93f2:	061b      	lsls	r3, r3, #24
    93f4:	4313      	orrs	r3, r2
    93f6:	4445      	add	r5, r8
    93f8:	00ad      	lsls	r5, r5, #2
    93fa:	195d      	adds	r5, r3, r5
    93fc:	7aeb      	ldrb	r3, [r5, #11]
    93fe:	2202      	movs	r2, #2
    9400:	4313      	orrs	r3, r2
    9402:	72eb      	strb	r3, [r5, #11]
		PDS_STORE(RegParams.regParamItems.ch_param_2_item_id);
    9404:	2384      	movs	r3, #132	; 0x84
    9406:	009b      	lsls	r3, r3, #2
    9408:	5cfb      	ldrb	r3, [r7, r3]
    940a:	4a0a      	ldr	r2, [pc, #40]	; (9434 <setDataRangeT2+0xc0>)
    940c:	5cb8      	ldrb	r0, [r7, r2]
    940e:	0200      	lsls	r0, r0, #8
    9410:	4318      	orrs	r0, r3
    9412:	b2c1      	uxtb	r1, r0
    9414:	0a00      	lsrs	r0, r0, #8
    9416:	47b0      	blx	r6
    9418:	e7bc      	b.n	9394 <setDataRangeT2+0x20>
    941a:	46c0      	nop			; (mov r8, r8)
    941c:	00009349 	.word	0x00009349
    9420:	00006cad 	.word	0x00006cad
    9424:	20001b54 	.word	0x20001b54
    9428:	0000020e 	.word	0x0000020e
    942c:	0000020f 	.word	0x0000020f
    9430:	0000af89 	.word	0x0000af89
    9434:	00000211 	.word	0x00000211

00009438 <LORAREG_GetAttr_MaxPayloadT3>:
{
    9438:	b530      	push	{r4, r5, lr}
	dataRate = *(uint8_t *)attrInput;
    943a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    943c:	2124      	movs	r1, #36	; 0x24
    943e:	4816      	ldr	r0, [pc, #88]	; (9498 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    9440:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    9442:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9444:	4299      	cmp	r1, r3
    9446:	d215      	bcs.n	9474 <LORAREG_GetAttr_MaxPayloadT3+0x3c>
	if(RegParams.cmnParams.paramsType2.txParams.uplinkDwellTime == 1)
    9448:	21e1      	movs	r1, #225	; 0xe1
    944a:	0049      	lsls	r1, r1, #1
    944c:	4c12      	ldr	r4, [pc, #72]	; (9498 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    944e:	5c61      	ldrb	r1, [r4, r1]
    9450:	07c9      	lsls	r1, r1, #31
    9452:	d411      	bmi.n	9478 <LORAREG_GetAttr_MaxPayloadT3+0x40>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    9454:	4d10      	ldr	r5, [pc, #64]	; (9498 <LORAREG_GetAttr_MaxPayloadT3+0x60>)
    9456:	7829      	ldrb	r1, [r5, #0]
    9458:	786c      	ldrb	r4, [r5, #1]
    945a:	0224      	lsls	r4, r4, #8
    945c:	430c      	orrs	r4, r1
    945e:	78a9      	ldrb	r1, [r5, #2]
    9460:	0409      	lsls	r1, r1, #16
    9462:	430c      	orrs	r4, r1
    9464:	78e9      	ldrb	r1, [r5, #3]
    9466:	0609      	lsls	r1, r1, #24
    9468:	4321      	orrs	r1, r4
    946a:	00db      	lsls	r3, r3, #3
    946c:	185b      	adds	r3, r3, r1
    946e:	789b      	ldrb	r3, [r3, #2]
    9470:	7013      	strb	r3, [r2, #0]
}
    9472:	bd30      	pop	{r4, r5, pc}
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9474:	3802      	subs	r0, #2
    9476:	e7e7      	b.n	9448 <LORAREG_GetAttr_MaxPayloadT3+0x10>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt1;
    9478:	0025      	movs	r5, r4
    947a:	7821      	ldrb	r1, [r4, #0]
    947c:	7864      	ldrb	r4, [r4, #1]
    947e:	0224      	lsls	r4, r4, #8
    9480:	430c      	orrs	r4, r1
    9482:	78a9      	ldrb	r1, [r5, #2]
    9484:	0409      	lsls	r1, r1, #16
    9486:	430c      	orrs	r4, r1
    9488:	78e9      	ldrb	r1, [r5, #3]
    948a:	0609      	lsls	r1, r1, #24
    948c:	4321      	orrs	r1, r4
    948e:	00db      	lsls	r3, r3, #3
    9490:	1859      	adds	r1, r3, r1
    9492:	78cb      	ldrb	r3, [r1, #3]
    9494:	7013      	strb	r3, [r2, #0]
    9496:	e7ec      	b.n	9472 <LORAREG_GetAttr_MaxPayloadT3+0x3a>
    9498:	20001b54 	.word	0x20001b54

0000949c <LORAREG_GetAttr_RxWindowSizeT2>:
{
    949c:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    949e:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    94a0:	2124      	movs	r1, #36	; 0x24
    94a2:	480d      	ldr	r0, [pc, #52]	; (94d8 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    94a4:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    94a6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    94a8:	4299      	cmp	r1, r3
    94aa:	d200      	bcs.n	94ae <LORAREG_GetAttr_RxWindowSizeT2+0x12>
}
    94ac:	bd10      	pop	{r4, pc}
		*(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;
    94ae:	4c0a      	ldr	r4, [pc, #40]	; (94d8 <LORAREG_GetAttr_RxWindowSizeT2+0x3c>)
    94b0:	7821      	ldrb	r1, [r4, #0]
    94b2:	7860      	ldrb	r0, [r4, #1]
    94b4:	0200      	lsls	r0, r0, #8
    94b6:	4308      	orrs	r0, r1
    94b8:	78a1      	ldrb	r1, [r4, #2]
    94ba:	0409      	lsls	r1, r1, #16
    94bc:	4308      	orrs	r0, r1
    94be:	78e1      	ldrb	r1, [r4, #3]
    94c0:	0609      	lsls	r1, r1, #24
    94c2:	4301      	orrs	r1, r0
    94c4:	00db      	lsls	r3, r3, #3
    94c6:	5c58      	ldrb	r0, [r3, r1]
    94c8:	185b      	adds	r3, r3, r1
    94ca:	785b      	ldrb	r3, [r3, #1]
    94cc:	021b      	lsls	r3, r3, #8
    94ce:	4303      	orrs	r3, r0
    94d0:	8013      	strh	r3, [r2, #0]
	return result;
    94d2:	2008      	movs	r0, #8
    94d4:	e7ea      	b.n	94ac <LORAREG_GetAttr_RxWindowSizeT2+0x10>
    94d6:	46c0      	nop			; (mov r8, r8)
    94d8:	20001b54 	.word	0x20001b54

000094dc <LORAREG_GetAttr_RxWindowOffsetT2>:
{
    94dc:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    94de:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    94e0:	2124      	movs	r1, #36	; 0x24
    94e2:	480c      	ldr	r0, [pc, #48]	; (9514 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    94e4:	5c41      	ldrb	r1, [r0, r1]
		return LORAWAN_INVALID_PARAMETER;
    94e6:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    94e8:	4299      	cmp	r1, r3
    94ea:	d200      	bcs.n	94ee <LORAREG_GetAttr_RxWindowOffsetT2+0x12>
}
    94ec:	bd10      	pop	{r4, pc}
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    94ee:	4c09      	ldr	r4, [pc, #36]	; (9514 <LORAREG_GetAttr_RxWindowOffsetT2+0x38>)
    94f0:	7821      	ldrb	r1, [r4, #0]
    94f2:	7860      	ldrb	r0, [r4, #1]
    94f4:	0200      	lsls	r0, r0, #8
    94f6:	4308      	orrs	r0, r1
    94f8:	78a1      	ldrb	r1, [r4, #2]
    94fa:	0409      	lsls	r1, r1, #16
    94fc:	4308      	orrs	r0, r1
    94fe:	78e1      	ldrb	r1, [r4, #3]
    9500:	0609      	lsls	r1, r1, #24
    9502:	4301      	orrs	r1, r0
    9504:	00db      	lsls	r3, r3, #3
    9506:	185b      	adds	r3, r3, r1
    9508:	791b      	ldrb	r3, [r3, #4]
    950a:	b25b      	sxtb	r3, r3
    950c:	7013      	strb	r3, [r2, #0]
	return result;
    950e:	2008      	movs	r0, #8
    9510:	e7ec      	b.n	94ec <LORAREG_GetAttr_RxWindowOffsetT2+0x10>
    9512:	46c0      	nop			; (mov r8, r8)
    9514:	20001b54 	.word	0x20001b54

00009518 <LORAREG_GetAttr_MaxPayloadT2>:
{
    9518:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    951a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    951c:	2124      	movs	r1, #36	; 0x24
    951e:	480b      	ldr	r0, [pc, #44]	; (954c <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    9520:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    9522:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9524:	4299      	cmp	r1, r3
    9526:	d200      	bcs.n	952a <LORAREG_GetAttr_MaxPayloadT2+0x12>
}
    9528:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    952a:	4c08      	ldr	r4, [pc, #32]	; (954c <LORAREG_GetAttr_MaxPayloadT2+0x34>)
    952c:	7821      	ldrb	r1, [r4, #0]
    952e:	7860      	ldrb	r0, [r4, #1]
    9530:	0200      	lsls	r0, r0, #8
    9532:	4308      	orrs	r0, r1
    9534:	78a1      	ldrb	r1, [r4, #2]
    9536:	0409      	lsls	r1, r1, #16
    9538:	4308      	orrs	r0, r1
    953a:	78e1      	ldrb	r1, [r4, #3]
    953c:	0609      	lsls	r1, r1, #24
    953e:	4301      	orrs	r1, r0
    9540:	00db      	lsls	r3, r3, #3
    9542:	185b      	adds	r3, r3, r1
    9544:	789b      	ldrb	r3, [r3, #2]
    9546:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9548:	2008      	movs	r0, #8
	return result;
    954a:	e7ed      	b.n	9528 <LORAREG_GetAttr_MaxPayloadT2+0x10>
    954c:	20001b54 	.word	0x20001b54

00009550 <LORAREG_GetAttr_ModulationAttrT2>:
{
    9550:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    9552:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    9554:	2124      	movs	r1, #36	; 0x24
    9556:	480b      	ldr	r0, [pc, #44]	; (9584 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    9558:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    955a:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    955c:	4299      	cmp	r1, r3
    955e:	d200      	bcs.n	9562 <LORAREG_GetAttr_ModulationAttrT2+0x12>
}
    9560:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    9562:	4c08      	ldr	r4, [pc, #32]	; (9584 <LORAREG_GetAttr_ModulationAttrT2+0x34>)
    9564:	7821      	ldrb	r1, [r4, #0]
    9566:	7860      	ldrb	r0, [r4, #1]
    9568:	0200      	lsls	r0, r0, #8
    956a:	4308      	orrs	r0, r1
    956c:	78a1      	ldrb	r1, [r4, #2]
    956e:	0409      	lsls	r1, r1, #16
    9570:	4308      	orrs	r0, r1
    9572:	78e1      	ldrb	r1, [r4, #3]
    9574:	0609      	lsls	r1, r1, #24
    9576:	4301      	orrs	r1, r0
    9578:	00db      	lsls	r3, r3, #3
    957a:	185b      	adds	r3, r3, r1
    957c:	79db      	ldrb	r3, [r3, #7]
    957e:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9580:	2008      	movs	r0, #8
	return result;
    9582:	e7ed      	b.n	9560 <LORAREG_GetAttr_ModulationAttrT2+0x10>
    9584:	20001b54 	.word	0x20001b54

00009588 <LORAREG_GetAttr_BandwidthAttrT2>:
{
    9588:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    958a:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    958c:	2124      	movs	r1, #36	; 0x24
    958e:	480b      	ldr	r0, [pc, #44]	; (95bc <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    9590:	5c41      	ldrb	r1, [r0, r1]
		result = LORAWAN_INVALID_PARAMETER;
    9592:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9594:	4299      	cmp	r1, r3
    9596:	d200      	bcs.n	959a <LORAREG_GetAttr_BandwidthAttrT2+0x12>
}
    9598:	bd10      	pop	{r4, pc}
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    959a:	4c08      	ldr	r4, [pc, #32]	; (95bc <LORAREG_GetAttr_BandwidthAttrT2+0x34>)
    959c:	7821      	ldrb	r1, [r4, #0]
    959e:	7860      	ldrb	r0, [r4, #1]
    95a0:	0200      	lsls	r0, r0, #8
    95a2:	4308      	orrs	r0, r1
    95a4:	78a1      	ldrb	r1, [r4, #2]
    95a6:	0409      	lsls	r1, r1, #16
    95a8:	4308      	orrs	r0, r1
    95aa:	78e1      	ldrb	r1, [r4, #3]
    95ac:	0609      	lsls	r1, r1, #24
    95ae:	4301      	orrs	r1, r0
    95b0:	00db      	lsls	r3, r3, #3
    95b2:	185b      	adds	r3, r3, r1
    95b4:	799b      	ldrb	r3, [r3, #6]
    95b6:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    95b8:	2008      	movs	r0, #8
	return result;
    95ba:	e7ed      	b.n	9598 <LORAREG_GetAttr_BandwidthAttrT2+0x10>
    95bc:	20001b54 	.word	0x20001b54

000095c0 <LORAREG_GetAttr_SpreadFactorT2>:
{
    95c0:	b510      	push	{r4, lr}
	dataRate = *(uint8_t *)attrInput;
    95c2:	780b      	ldrb	r3, [r1, #0]
    if ( dataRate > RegParams.minDataRate )
    95c4:	2124      	movs	r1, #36	; 0x24
    95c6:	480b      	ldr	r0, [pc, #44]	; (95f4 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    95c8:	5c41      	ldrb	r1, [r0, r1]
		result =  LORAWAN_INVALID_PARAMETER;
    95ca:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    95cc:	4299      	cmp	r1, r3
    95ce:	d200      	bcs.n	95d2 <LORAREG_GetAttr_SpreadFactorT2+0x12>
}
    95d0:	bd10      	pop	{r4, pc}
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    95d2:	4c08      	ldr	r4, [pc, #32]	; (95f4 <LORAREG_GetAttr_SpreadFactorT2+0x34>)
    95d4:	7821      	ldrb	r1, [r4, #0]
    95d6:	7860      	ldrb	r0, [r4, #1]
    95d8:	0200      	lsls	r0, r0, #8
    95da:	4308      	orrs	r0, r1
    95dc:	78a1      	ldrb	r1, [r4, #2]
    95de:	0409      	lsls	r1, r1, #16
    95e0:	4308      	orrs	r0, r1
    95e2:	78e1      	ldrb	r1, [r4, #3]
    95e4:	0609      	lsls	r1, r1, #24
    95e6:	4301      	orrs	r1, r0
    95e8:	00db      	lsls	r3, r3, #3
    95ea:	185b      	adds	r3, r3, r1
    95ec:	795b      	ldrb	r3, [r3, #5]
    95ee:	7013      	strb	r3, [r2, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    95f0:	2008      	movs	r0, #8
	return result;
    95f2:	e7ed      	b.n	95d0 <LORAREG_GetAttr_SpreadFactorT2+0x10>
    95f4:	20001b54 	.word	0x20001b54

000095f8 <ValidateChMaskChCntl>:
{
    95f8:	b510      	push	{r4, lr}
    95fa:	b082      	sub	sp, #8
	ValChMaskCntl_t chMaskchCntl = * (ValChMaskCntl_t *)attrInput;
    95fc:	ac01      	add	r4, sp, #4
    95fe:	2204      	movs	r2, #4
    9600:	0020      	movs	r0, r4
    9602:	4b09      	ldr	r3, [pc, #36]	; (9628 <ValidateChMaskChCntl+0x30>)
    9604:	4798      	blx	r3
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    9606:	8863      	ldrh	r3, [r4, #2]
    9608:	2b00      	cmp	r3, #0
    960a:	d104      	bne.n	9616 <ValidateChMaskChCntl+0x1e>
    960c:	ab01      	add	r3, sp, #4
    960e:	781b      	ldrb	r3, [r3, #0]
        result = LORAWAN_INVALID_PARAMETER;
    9610:	200a      	movs	r0, #10
    if(chMaskchCntl.chnlMask == 0 && chMaskchCntl.chnlMaskCntl == 7)
    9612:	2b07      	cmp	r3, #7
    9614:	d006      	beq.n	9624 <ValidateChMaskChCntl+0x2c>
		result = ((ValidateChannelMask(CHANNEL_MASK, (void *)&chMaskchCntl.chnlMask)) | (ValidateChannelMaskCntl(CHANNEL_MASK_CNTL,  (void *)&chMaskchCntl.chnlMaskCntl)));
    9616:	a901      	add	r1, sp, #4
    9618:	201b      	movs	r0, #27
    961a:	4b04      	ldr	r3, [pc, #16]	; (962c <ValidateChMaskChCntl+0x34>)
    961c:	4798      	blx	r3
    961e:	2308      	movs	r3, #8
    9620:	4318      	orrs	r0, r3
    9622:	b2c0      	uxtb	r0, r0
}
    9624:	b002      	add	sp, #8
    9626:	bd10      	pop	{r4, pc}
    9628:	00015f45 	.word	0x00015f45
    962c:	00006d99 	.word	0x00006d99

00009630 <LORAREG_GetAttr_NewTxChConfigT2>:
{
    9630:	b5f0      	push	{r4, r5, r6, r7, lr}
    9632:	b083      	sub	sp, #12
    9634:	0015      	movs	r5, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9636:	788c      	ldrb	r4, [r1, #2]
    if ( dataRate > RegParams.minDataRate )
    9638:	2324      	movs	r3, #36	; 0x24
    963a:	4a2e      	ldr	r2, [pc, #184]	; (96f4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    963c:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    963e:	200a      	movs	r0, #10
    if ( dataRate > RegParams.minDataRate )
    9640:	42a3      	cmp	r3, r4
    9642:	d205      	bcs.n	9650 <LORAREG_GetAttr_NewTxChConfigT2+0x20>
}
    9644:	b003      	add	sp, #12
    9646:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    9648:	2900      	cmp	r1, #0
    964a:	d10f      	bne.n	966c <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
		currDr = DR2;
    964c:	2402      	movs	r4, #2
    964e:	e00d      	b.n	966c <LORAREG_GetAttr_NewTxChConfigT2+0x3c>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9650:	784e      	ldrb	r6, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9652:	232d      	movs	r3, #45	; 0x2d
    9654:	4a27      	ldr	r2, [pc, #156]	; (96f4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    9656:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    9658:	200a      	movs	r0, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    965a:	429e      	cmp	r6, r3
    965c:	dcf2      	bgt.n	9644 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		result = GetTxChannelConfig2(newTxChannelReq.transmissionType,newTxChannelReq.txPwr,newTxChannelReq.currDr,(radioConfig_t*)attrOutput);
    965e:	7809      	ldrb	r1, [r1, #0]
	if(((((1 << RegParams.band) & (ISM_ASBAND)) || ((1 << RegParams.band) & (1 << ISM_JPN923))) != 0) && (transmissionType == 0))
    9660:	232e      	movs	r3, #46	; 0x2e
    9662:	5cd2      	ldrb	r2, [r2, r3]
    9664:	4b24      	ldr	r3, [pc, #144]	; (96f8 <LORAREG_GetAttr_NewTxChConfigT2+0xc8>)
    9666:	4113      	asrs	r3, r2
    9668:	07db      	lsls	r3, r3, #31
    966a:	d4ed      	bmi.n	9648 <LORAREG_GetAttr_NewTxChConfigT2+0x18>
	result = SearchAvailableChannel2 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    966c:	232a      	movs	r3, #42	; 0x2a
    966e:	4a21      	ldr	r2, [pc, #132]	; (96f4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    9670:	5cd0      	ldrb	r0, [r2, r3]
    9672:	466b      	mov	r3, sp
    9674:	3307      	adds	r3, #7
    9676:	0022      	movs	r2, r4
    9678:	4f20      	ldr	r7, [pc, #128]	; (96fc <LORAREG_GetAttr_NewTxChConfigT2+0xcc>)
    967a:	47b8      	blx	r7
	if (result == LORAWAN_SUCCESS)
    967c:	2808      	cmp	r0, #8
    967e:	d1e1      	bne.n	9644 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
		RegParams.lastUsedChannelIndex = channelIndex;
    9680:	466b      	mov	r3, sp
    9682:	79df      	ldrb	r7, [r3, #7]
    9684:	4b1b      	ldr	r3, [pc, #108]	; (96f4 <LORAREG_GetAttr_NewTxChConfigT2+0xc4>)
    9686:	222f      	movs	r2, #47	; 0x2f
    9688:	549f      	strb	r7, [r3, r2]
		radioConfig->frequency = RegParams.pOtherChParams[channelIndex].ulfrequency;
    968a:	7a19      	ldrb	r1, [r3, #8]
    968c:	7a5a      	ldrb	r2, [r3, #9]
    968e:	0212      	lsls	r2, r2, #8
    9690:	430a      	orrs	r2, r1
    9692:	7a99      	ldrb	r1, [r3, #10]
    9694:	0409      	lsls	r1, r1, #16
    9696:	430a      	orrs	r2, r1
    9698:	7ad9      	ldrb	r1, [r3, #11]
    969a:	0609      	lsls	r1, r1, #24
    969c:	4311      	orrs	r1, r2
    969e:	007a      	lsls	r2, r7, #1
    96a0:	19d2      	adds	r2, r2, r7
    96a2:	0092      	lsls	r2, r2, #2
    96a4:	5c57      	ldrb	r7, [r2, r1]
    96a6:	1852      	adds	r2, r2, r1
    96a8:	7851      	ldrb	r1, [r2, #1]
    96aa:	0209      	lsls	r1, r1, #8
    96ac:	430f      	orrs	r7, r1
    96ae:	7891      	ldrb	r1, [r2, #2]
    96b0:	0409      	lsls	r1, r1, #16
    96b2:	4339      	orrs	r1, r7
    96b4:	78d2      	ldrb	r2, [r2, #3]
    96b6:	0612      	lsls	r2, r2, #24
    96b8:	430a      	orrs	r2, r1
    96ba:	602a      	str	r2, [r5, #0]
		radioConfig->txPower = RegParams.maxTxPwr - 2 *txPwrIndx;
    96bc:	0076      	lsls	r6, r6, #1
    96be:	2228      	movs	r2, #40	; 0x28
    96c0:	5c9a      	ldrb	r2, [r3, r2]
    96c2:	1b96      	subs	r6, r2, r6
    96c4:	722e      	strb	r6, [r5, #8]
		radioConfig->freq_hop_period = DISABLED ;
    96c6:	2200      	movs	r2, #0
    96c8:	80aa      	strh	r2, [r5, #4]
		radioConfig->modulation = RegParams.pDrParams[currDr].modulation;
    96ca:	7819      	ldrb	r1, [r3, #0]
    96cc:	785a      	ldrb	r2, [r3, #1]
    96ce:	0212      	lsls	r2, r2, #8
    96d0:	4311      	orrs	r1, r2
    96d2:	789a      	ldrb	r2, [r3, #2]
    96d4:	0412      	lsls	r2, r2, #16
    96d6:	430a      	orrs	r2, r1
    96d8:	78db      	ldrb	r3, [r3, #3]
    96da:	061b      	lsls	r3, r3, #24
    96dc:	4313      	orrs	r3, r2
    96de:	00e4      	lsls	r4, r4, #3
    96e0:	191c      	adds	r4, r3, r4
    96e2:	79e3      	ldrb	r3, [r4, #7]
    96e4:	726b      	strb	r3, [r5, #9]
		radioConfig->bandwidth = RegParams.pDrParams[currDr].bandwidth;
    96e6:	79a3      	ldrb	r3, [r4, #6]
    96e8:	72ab      	strb	r3, [r5, #10]
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    96ea:	7963      	ldrb	r3, [r4, #5]
    96ec:	72eb      	strb	r3, [r5, #11]
		radioConfig->ecrConfig.override = false;
    96ee:	2300      	movs	r3, #0
    96f0:	71eb      	strb	r3, [r5, #7]
    96f2:	e7a7      	b.n	9644 <LORAREG_GetAttr_NewTxChConfigT2+0x14>
    96f4:	20001b54 	.word	0x20001b54
    96f8:	00007fe0 	.word	0x00007fe0
    96fc:	000083f5 	.word	0x000083f5

00009700 <setChannelIdStatus>:
{
    9700:	b510      	push	{r4, lr}
    uint8_t channelId = *(uint8_t *)attrInput;
    9702:	7808      	ldrb	r0, [r1, #0]
    if (channelId >= RegParams.maxChannels)
    9704:	232a      	movs	r3, #42	; 0x2a
    9706:	4a05      	ldr	r2, [pc, #20]	; (971c <setChannelIdStatus+0x1c>)
    9708:	56d3      	ldrsb	r3, [r2, r3]
    970a:	4298      	cmp	r0, r3
    970c:	db01      	blt.n	9712 <setChannelIdStatus+0x12>
		retVal = LORAWAN_INVALID_PARAMETER;
    970e:	200a      	movs	r0, #10
}
    9710:	bd10      	pop	{r4, pc}
		UpdateChannelIdStatus(updateChid.channelIndex,updateChid.statusNew);
    9712:	7849      	ldrb	r1, [r1, #1]
    9714:	4b02      	ldr	r3, [pc, #8]	; (9720 <setChannelIdStatus+0x20>)
    9716:	4798      	blx	r3
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9718:	2008      	movs	r0, #8
	return retVal;
    971a:	e7f9      	b.n	9710 <setChannelIdStatus+0x10>
    971c:	20001b54 	.word	0x20001b54
    9720:	000073bd 	.word	0x000073bd

00009724 <ValidateDataRange>:
{
    9724:	b530      	push	{r4, r5, lr}
	uint8_t maxTxDR = RegParams.cmnParams.paramsType1.maxTxDR;
    9726:	23a8      	movs	r3, #168	; 0xa8
    9728:	005b      	lsls	r3, r3, #1
    972a:	4a17      	ldr	r2, [pc, #92]	; (9788 <ValidateDataRange+0x64>)
    972c:	5cd3      	ldrb	r3, [r2, r3]
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    972e:	784a      	ldrb	r2, [r1, #1]
	dataRateMax = (val_drange.dataRangeNew & FIRST_NIBBLE) >> SHIFT4;
    9730:	0914      	lsrs	r4, r2, #4
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    9732:	200a      	movs	r0, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9734:	42a3      	cmp	r3, r4
    9736:	d213      	bcs.n	9760 <ValidateDataRange+0x3c>
}
    9738:	bd30      	pop	{r4, r5, pc}
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    973a:	202a      	movs	r0, #42	; 0x2a
    973c:	4d12      	ldr	r5, [pc, #72]	; (9788 <ValidateDataRange+0x64>)
    973e:	562d      	ldrsb	r5, [r5, r0]
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9740:	3822      	subs	r0, #34	; 0x22
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    9742:	42a9      	cmp	r1, r5
    9744:	daf8      	bge.n	9738 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    9746:	3002      	adds	r0, #2
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMin != maxTxDR)) ||
    9748:	4293      	cmp	r3, r2
    974a:	d1f5      	bne.n	9738 <ValidateDataRange+0x14>
	   ((chId >= RegParams.cmnParams.paramsType1.Max_125khzChan) && (chId < RegParams.maxChannels) && (dataRateMax != maxTxDR)))
    974c:	42a3      	cmp	r3, r4
    974e:	d005      	beq.n	975c <ValidateDataRange+0x38>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    9750:	200a      	movs	r0, #10
	return retVal;
    9752:	e7f1      	b.n	9738 <ValidateDataRange+0x14>
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    9754:	200a      	movs	r0, #10
    9756:	e7ef      	b.n	9738 <ValidateDataRange+0x14>
    9758:	200a      	movs	r0, #10
    975a:	e7ed      	b.n	9738 <ValidateDataRange+0x14>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    975c:	2008      	movs	r0, #8
    975e:	e7eb      	b.n	9738 <ValidateDataRange+0x14>
	dataRateMin = val_drange.dataRangeNew & LAST_NIBBLE;
    9760:	200f      	movs	r0, #15
    9762:	4002      	ands	r2, r0
	    retVal = LORAWAN_INVALID_PARAMETER;	   
    9764:	3805      	subs	r0, #5
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9766:	4293      	cmp	r3, r2
    9768:	d3e6      	bcc.n	9738 <ValidateDataRange+0x14>
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    976a:	42a2      	cmp	r2, r4
    976c:	d8e4      	bhi.n	9738 <ValidateDataRange+0x14>
	memcpy(&val_drange,attrInput,sizeof(ValUpdateDrange_t));
    976e:	7809      	ldrb	r1, [r1, #0]
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    9770:	2054      	movs	r0, #84	; 0x54
    9772:	30ff      	adds	r0, #255	; 0xff
	if((ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMax) != LORAWAN_SUCCESS ) || (ValidateDataRateTxT1(TX_DATARATE, (void *)&dataRateMin) != LORAWAN_SUCCESS ) || dataRateMax < dataRateMin || 
    9774:	4d04      	ldr	r5, [pc, #16]	; (9788 <ValidateDataRange+0x64>)
    9776:	5c28      	ldrb	r0, [r5, r0]
    9778:	4288      	cmp	r0, r1
    977a:	d9de      	bls.n	973a <ValidateDataRange+0x16>
	   ((chId < RegParams.cmnParams.paramsType1.Max_125khzChan) && ((dataRateMin == maxTxDR) || (dataRateMax == maxTxDR))) || 
    977c:	4293      	cmp	r3, r2
    977e:	d0e9      	beq.n	9754 <ValidateDataRange+0x30>
    9780:	42a3      	cmp	r3, r4
    9782:	d0e9      	beq.n	9758 <ValidateDataRange+0x34>
	StackRetStatus_t retVal = LORAWAN_SUCCESS;
    9784:	2008      	movs	r0, #8
    9786:	e7d7      	b.n	9738 <ValidateDataRange+0x14>
    9788:	20001b54 	.word	0x20001b54

0000978c <setDataRange>:
{
    978c:	b570      	push	{r4, r5, r6, lr}
    978e:	000d      	movs	r5, r1
	if((ValidateDataRange(DATA_RANGE, attrInput) != LORAWAN_SUCCESS) || (ValidateChannelId(CHANNEL_ID, &update_dr.channelIndex) != LORAWAN_SUCCESS))
    9790:	2012      	movs	r0, #18
    9792:	4b15      	ldr	r3, [pc, #84]	; (97e8 <setDataRange+0x5c>)
    9794:	4798      	blx	r3
    9796:	0004      	movs	r4, r0
    9798:	2808      	cmp	r0, #8
    979a:	d002      	beq.n	97a2 <setDataRange+0x16>
		retVal = LORAWAN_INVALID_PARAMETER;
    979c:	240a      	movs	r4, #10
}
    979e:	0020      	movs	r0, r4
    97a0:	bd70      	pop	{r4, r5, r6, pc}
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    97a2:	782b      	ldrb	r3, [r5, #0]
    if (channelId >= RegParams.maxChannels)
    97a4:	222a      	movs	r2, #42	; 0x2a
    97a6:	4911      	ldr	r1, [pc, #68]	; (97ec <setDataRange+0x60>)
    97a8:	568a      	ldrsb	r2, [r1, r2]
    97aa:	4293      	cmp	r3, r2
    97ac:	db01      	blt.n	97b2 <setDataRange+0x26>
		retVal = LORAWAN_INVALID_PARAMETER;
    97ae:	3402      	adds	r4, #2
    97b0:	e7f5      	b.n	979e <setDataRange+0x12>
	memcpy((void *)&update_dr,attrInput,sizeof(ValUpdateDrange_t));
    97b2:	786d      	ldrb	r5, [r5, #1]
		RegParams.pChParams[update_dr.channelIndex].dataRange.value = update_dr.dataRangeNew;
    97b4:	4a0d      	ldr	r2, [pc, #52]	; (97ec <setDataRange+0x60>)
    97b6:	7911      	ldrb	r1, [r2, #4]
    97b8:	7950      	ldrb	r0, [r2, #5]
    97ba:	0200      	lsls	r0, r0, #8
    97bc:	4308      	orrs	r0, r1
    97be:	7991      	ldrb	r1, [r2, #6]
    97c0:	0409      	lsls	r1, r1, #16
    97c2:	4308      	orrs	r0, r1
    97c4:	79d1      	ldrb	r1, [r2, #7]
    97c6:	0609      	lsls	r1, r1, #24
    97c8:	4301      	orrs	r1, r0
    97ca:	005b      	lsls	r3, r3, #1
    97cc:	185b      	adds	r3, r3, r1
    97ce:	705d      	strb	r5, [r3, #1]
		PDS_STORE(RegParams.regParamItems.ch_param_1_item_id);
    97d0:	4b07      	ldr	r3, [pc, #28]	; (97f0 <setDataRange+0x64>)
    97d2:	5cd3      	ldrb	r3, [r2, r3]
    97d4:	4907      	ldr	r1, [pc, #28]	; (97f4 <setDataRange+0x68>)
    97d6:	5c50      	ldrb	r0, [r2, r1]
    97d8:	0200      	lsls	r0, r0, #8
    97da:	4318      	orrs	r0, r3
    97dc:	b2c1      	uxtb	r1, r0
    97de:	0a00      	lsrs	r0, r0, #8
    97e0:	4b05      	ldr	r3, [pc, #20]	; (97f8 <setDataRange+0x6c>)
    97e2:	4798      	blx	r3
	return retVal;
    97e4:	e7db      	b.n	979e <setDataRange+0x12>
    97e6:	46c0      	nop			; (mov r8, r8)
    97e8:	00009725 	.word	0x00009725
    97ec:	20001b54 	.word	0x20001b54
    97f0:	0000020e 	.word	0x0000020e
    97f4:	0000020f 	.word	0x0000020f
    97f8:	0000af89 	.word	0x0000af89

000097fc <LORAREG_GetAttr_RxWindowSizeT1>:
{
    97fc:	b570      	push	{r4, r5, r6, lr}
    97fe:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    9800:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9802:	23a8      	movs	r3, #168	; 0xa8
    9804:	005b      	lsls	r3, r3, #1
    9806:	4a0f      	ldr	r2, [pc, #60]	; (9844 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    9808:	5cd3      	ldrb	r3, [r2, r3]
    980a:	42a3      	cmp	r3, r4
    980c:	d205      	bcs.n	981a <LORAREG_GetAttr_RxWindowSizeT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    980e:	200f      	movs	r0, #15
    9810:	4b0d      	ldr	r3, [pc, #52]	; (9848 <LORAREG_GetAttr_RxWindowSizeT1+0x4c>)
    9812:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    9814:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    9816:	2808      	cmp	r0, #8
    9818:	d112      	bne.n	9840 <LORAREG_GetAttr_RxWindowSizeT1+0x44>
	    *(uint16_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowSize;	
    981a:	490a      	ldr	r1, [pc, #40]	; (9844 <LORAREG_GetAttr_RxWindowSizeT1+0x48>)
    981c:	780b      	ldrb	r3, [r1, #0]
    981e:	784a      	ldrb	r2, [r1, #1]
    9820:	0212      	lsls	r2, r2, #8
    9822:	431a      	orrs	r2, r3
    9824:	788b      	ldrb	r3, [r1, #2]
    9826:	041b      	lsls	r3, r3, #16
    9828:	431a      	orrs	r2, r3
    982a:	78cb      	ldrb	r3, [r1, #3]
    982c:	061b      	lsls	r3, r3, #24
    982e:	4313      	orrs	r3, r2
    9830:	00e4      	lsls	r4, r4, #3
    9832:	5ce2      	ldrb	r2, [r4, r3]
    9834:	18e4      	adds	r4, r4, r3
    9836:	7863      	ldrb	r3, [r4, #1]
    9838:	021b      	lsls	r3, r3, #8
    983a:	4313      	orrs	r3, r2
    983c:	802b      	strh	r3, [r5, #0]
	return result;
    983e:	2308      	movs	r3, #8
}
    9840:	0018      	movs	r0, r3
    9842:	bd70      	pop	{r4, r5, r6, pc}
    9844:	20001b54 	.word	0x20001b54
    9848:	00006c45 	.word	0x00006c45

0000984c <LORAREG_GetAttr_RxWindowOffsetT1>:
{
    984c:	b570      	push	{r4, r5, r6, lr}
    984e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    9850:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9852:	23a8      	movs	r3, #168	; 0xa8
    9854:	005b      	lsls	r3, r3, #1
    9856:	4a0e      	ldr	r2, [pc, #56]	; (9890 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    9858:	5cd3      	ldrb	r3, [r2, r3]
    985a:	42a3      	cmp	r3, r4
    985c:	d205      	bcs.n	986a <LORAREG_GetAttr_RxWindowOffsetT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    985e:	200f      	movs	r0, #15
    9860:	4b0c      	ldr	r3, [pc, #48]	; (9894 <LORAREG_GetAttr_RxWindowOffsetT1+0x48>)
    9862:	4798      	blx	r3
		return LORAWAN_INVALID_PARAMETER;
    9864:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    9866:	2808      	cmp	r0, #8
    9868:	d110      	bne.n	988c <LORAREG_GetAttr_RxWindowOffsetT1+0x40>
		*(int8_t *)attrOutput = RegParams.pDrParams[dataRate].rxWindowOffset;
    986a:	4909      	ldr	r1, [pc, #36]	; (9890 <LORAREG_GetAttr_RxWindowOffsetT1+0x44>)
    986c:	780b      	ldrb	r3, [r1, #0]
    986e:	784a      	ldrb	r2, [r1, #1]
    9870:	0212      	lsls	r2, r2, #8
    9872:	431a      	orrs	r2, r3
    9874:	788b      	ldrb	r3, [r1, #2]
    9876:	041b      	lsls	r3, r3, #16
    9878:	431a      	orrs	r2, r3
    987a:	78cb      	ldrb	r3, [r1, #3]
    987c:	061b      	lsls	r3, r3, #24
    987e:	4313      	orrs	r3, r2
    9880:	00e4      	lsls	r4, r4, #3
    9882:	18e3      	adds	r3, r4, r3
    9884:	791b      	ldrb	r3, [r3, #4]
    9886:	b25b      	sxtb	r3, r3
    9888:	702b      	strb	r3, [r5, #0]
	return result;
    988a:	2308      	movs	r3, #8
}
    988c:	0018      	movs	r0, r3
    988e:	bd70      	pop	{r4, r5, r6, pc}
    9890:	20001b54 	.word	0x20001b54
    9894:	00006c45 	.word	0x00006c45

00009898 <LORAREG_GetAttr_MaxPayloadT1>:
{
    9898:	b570      	push	{r4, r5, r6, lr}
    989a:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    989c:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    989e:	23a8      	movs	r3, #168	; 0xa8
    98a0:	005b      	lsls	r3, r3, #1
    98a2:	4a0e      	ldr	r2, [pc, #56]	; (98dc <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    98a4:	5cd3      	ldrb	r3, [r2, r3]
    98a6:	42a3      	cmp	r3, r4
    98a8:	d205      	bcs.n	98b6 <LORAREG_GetAttr_MaxPayloadT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    98aa:	200f      	movs	r0, #15
    98ac:	4b0c      	ldr	r3, [pc, #48]	; (98e0 <LORAREG_GetAttr_MaxPayloadT1+0x48>)
    98ae:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    98b0:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    98b2:	2808      	cmp	r0, #8
    98b4:	d10f      	bne.n	98d6 <LORAREG_GetAttr_MaxPayloadT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].maxPayloadSizeDt0;
    98b6:	4909      	ldr	r1, [pc, #36]	; (98dc <LORAREG_GetAttr_MaxPayloadT1+0x44>)
    98b8:	780b      	ldrb	r3, [r1, #0]
    98ba:	784a      	ldrb	r2, [r1, #1]
    98bc:	0212      	lsls	r2, r2, #8
    98be:	431a      	orrs	r2, r3
    98c0:	788b      	ldrb	r3, [r1, #2]
    98c2:	041b      	lsls	r3, r3, #16
    98c4:	431a      	orrs	r2, r3
    98c6:	78cb      	ldrb	r3, [r1, #3]
    98c8:	061b      	lsls	r3, r3, #24
    98ca:	4313      	orrs	r3, r2
    98cc:	00e4      	lsls	r4, r4, #3
    98ce:	18e3      	adds	r3, r4, r3
    98d0:	789b      	ldrb	r3, [r3, #2]
    98d2:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    98d4:	2308      	movs	r3, #8
}
    98d6:	0018      	movs	r0, r3
    98d8:	bd70      	pop	{r4, r5, r6, pc}
    98da:	46c0      	nop			; (mov r8, r8)
    98dc:	20001b54 	.word	0x20001b54
    98e0:	00006c45 	.word	0x00006c45

000098e4 <LORAREG_GetAttr_ModulationAttrT1>:
{
    98e4:	b570      	push	{r4, r5, r6, lr}
    98e6:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    98e8:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    98ea:	23a8      	movs	r3, #168	; 0xa8
    98ec:	005b      	lsls	r3, r3, #1
    98ee:	4a0e      	ldr	r2, [pc, #56]	; (9928 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    98f0:	5cd3      	ldrb	r3, [r2, r3]
    98f2:	42a3      	cmp	r3, r4
    98f4:	d205      	bcs.n	9902 <LORAREG_GetAttr_ModulationAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    98f6:	200f      	movs	r0, #15
    98f8:	4b0c      	ldr	r3, [pc, #48]	; (992c <LORAREG_GetAttr_ModulationAttrT1+0x48>)
    98fa:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    98fc:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    98fe:	2808      	cmp	r0, #8
    9900:	d10f      	bne.n	9922 <LORAREG_GetAttr_ModulationAttrT1+0x3e>
	    *(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].modulation;
    9902:	4909      	ldr	r1, [pc, #36]	; (9928 <LORAREG_GetAttr_ModulationAttrT1+0x44>)
    9904:	780b      	ldrb	r3, [r1, #0]
    9906:	784a      	ldrb	r2, [r1, #1]
    9908:	0212      	lsls	r2, r2, #8
    990a:	431a      	orrs	r2, r3
    990c:	788b      	ldrb	r3, [r1, #2]
    990e:	041b      	lsls	r3, r3, #16
    9910:	431a      	orrs	r2, r3
    9912:	78cb      	ldrb	r3, [r1, #3]
    9914:	061b      	lsls	r3, r3, #24
    9916:	4313      	orrs	r3, r2
    9918:	00e4      	lsls	r4, r4, #3
    991a:	18e3      	adds	r3, r4, r3
    991c:	79db      	ldrb	r3, [r3, #7]
    991e:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    9920:	2308      	movs	r3, #8
}
    9922:	0018      	movs	r0, r3
    9924:	bd70      	pop	{r4, r5, r6, pc}
    9926:	46c0      	nop			; (mov r8, r8)
    9928:	20001b54 	.word	0x20001b54
    992c:	00006c45 	.word	0x00006c45

00009930 <LORAREG_GetAttr_BandwidthAttrT1>:
{
    9930:	b570      	push	{r4, r5, r6, lr}
    9932:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    9934:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9936:	23a8      	movs	r3, #168	; 0xa8
    9938:	005b      	lsls	r3, r3, #1
    993a:	4a0e      	ldr	r2, [pc, #56]	; (9974 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    993c:	5cd3      	ldrb	r3, [r2, r3]
    993e:	42a3      	cmp	r3, r4
    9940:	d205      	bcs.n	994e <LORAREG_GetAttr_BandwidthAttrT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    9942:	200f      	movs	r0, #15
    9944:	4b0c      	ldr	r3, [pc, #48]	; (9978 <LORAREG_GetAttr_BandwidthAttrT1+0x48>)
    9946:	4798      	blx	r3
		result = LORAWAN_INVALID_PARAMETER;
    9948:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    994a:	2808      	cmp	r0, #8
    994c:	d10f      	bne.n	996e <LORAREG_GetAttr_BandwidthAttrT1+0x3e>
		*(uint8_t *)attrOutput = RegParams.pDrParams[dataRate].bandwidth;
    994e:	4909      	ldr	r1, [pc, #36]	; (9974 <LORAREG_GetAttr_BandwidthAttrT1+0x44>)
    9950:	780b      	ldrb	r3, [r1, #0]
    9952:	784a      	ldrb	r2, [r1, #1]
    9954:	0212      	lsls	r2, r2, #8
    9956:	431a      	orrs	r2, r3
    9958:	788b      	ldrb	r3, [r1, #2]
    995a:	041b      	lsls	r3, r3, #16
    995c:	431a      	orrs	r2, r3
    995e:	78cb      	ldrb	r3, [r1, #3]
    9960:	061b      	lsls	r3, r3, #24
    9962:	4313      	orrs	r3, r2
    9964:	00e4      	lsls	r4, r4, #3
    9966:	18e3      	adds	r3, r4, r3
    9968:	799b      	ldrb	r3, [r3, #6]
    996a:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    996c:	2308      	movs	r3, #8
}
    996e:	0018      	movs	r0, r3
    9970:	bd70      	pop	{r4, r5, r6, pc}
    9972:	46c0      	nop			; (mov r8, r8)
    9974:	20001b54 	.word	0x20001b54
    9978:	00006c45 	.word	0x00006c45

0000997c <LORAREG_GetAttr_SpreadFactorT1>:
{
    997c:	b570      	push	{r4, r5, r6, lr}
    997e:	0015      	movs	r5, r2
	dataRate = *(uint8_t *)attrInput;
    9980:	780c      	ldrb	r4, [r1, #0]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9982:	23a8      	movs	r3, #168	; 0xa8
    9984:	005b      	lsls	r3, r3, #1
    9986:	4a0e      	ldr	r2, [pc, #56]	; (99c0 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    9988:	5cd3      	ldrb	r3, [r2, r3]
    998a:	42a3      	cmp	r3, r4
    998c:	d205      	bcs.n	999a <LORAREG_GetAttr_SpreadFactorT1+0x1e>
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    998e:	200f      	movs	r0, #15
    9990:	4b0c      	ldr	r3, [pc, #48]	; (99c4 <LORAREG_GetAttr_SpreadFactorT1+0x48>)
    9992:	4798      	blx	r3
		result =  LORAWAN_INVALID_PARAMETER;
    9994:	230a      	movs	r3, #10
	if((ValidateDataRateTxT1(TX_DATARATE, attrInput) != LORAWAN_SUCCESS) && (ValidateDataRateRxT1(RX_DATARATE, attrInput) != LORAWAN_SUCCESS))
    9996:	2808      	cmp	r0, #8
    9998:	d10f      	bne.n	99ba <LORAREG_GetAttr_SpreadFactorT1+0x3e>
		*(RadioDataRate_t *)attrOutput = RegParams.pDrParams[dataRate].spreadingFactor;
    999a:	4909      	ldr	r1, [pc, #36]	; (99c0 <LORAREG_GetAttr_SpreadFactorT1+0x44>)
    999c:	780b      	ldrb	r3, [r1, #0]
    999e:	784a      	ldrb	r2, [r1, #1]
    99a0:	0212      	lsls	r2, r2, #8
    99a2:	431a      	orrs	r2, r3
    99a4:	788b      	ldrb	r3, [r1, #2]
    99a6:	041b      	lsls	r3, r3, #16
    99a8:	431a      	orrs	r2, r3
    99aa:	78cb      	ldrb	r3, [r1, #3]
    99ac:	061b      	lsls	r3, r3, #24
    99ae:	4313      	orrs	r3, r2
    99b0:	00e4      	lsls	r4, r4, #3
    99b2:	18e3      	adds	r3, r4, r3
    99b4:	795b      	ldrb	r3, [r3, #5]
    99b6:	702b      	strb	r3, [r5, #0]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    99b8:	2308      	movs	r3, #8
}
    99ba:	0018      	movs	r0, r3
    99bc:	bd70      	pop	{r4, r5, r6, pc}
    99be:	46c0      	nop			; (mov r8, r8)
    99c0:	20001b54 	.word	0x20001b54
    99c4:	00006c45 	.word	0x00006c45

000099c8 <ValidateTxFreqT1>:
{
    99c8:	b530      	push	{r4, r5, lr}
    99ca:	b083      	sub	sp, #12
	memcpy(&val_freqTx,attrInput,sizeof(ValUpdateFreqTx_t));
    99cc:	2208      	movs	r2, #8
    99ce:	4668      	mov	r0, sp
    99d0:	4b20      	ldr	r3, [pc, #128]	; (9a54 <ValidateTxFreqT1+0x8c>)
    99d2:	4798      	blx	r3
	if(ChIndex > RegParams.maxChannels)
    99d4:	466b      	mov	r3, sp
    99d6:	7919      	ldrb	r1, [r3, #4]
    99d8:	232a      	movs	r3, #42	; 0x2a
    99da:	4a1f      	ldr	r2, [pc, #124]	; (9a58 <ValidateTxFreqT1+0x90>)
    99dc:	56d3      	ldrsb	r3, [r2, r3]
	StackRetStatus_t result = LORAWAN_SUCCESS;
    99de:	2008      	movs	r0, #8
	if(ChIndex > RegParams.maxChannels)
    99e0:	4299      	cmp	r1, r3
    99e2:	dd00      	ble.n	99e6 <ValidateTxFreqT1+0x1e>
		result = LORAWAN_INVALID_PARAMETER;
    99e4:	3002      	adds	r0, #2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    99e6:	9c00      	ldr	r4, [sp, #0]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    99e8:	4d1b      	ldr	r5, [pc, #108]	; (9a58 <ValidateTxFreqT1+0x90>)
    99ea:	2344      	movs	r3, #68	; 0x44
    99ec:	33ff      	adds	r3, #255	; 0xff
    99ee:	5ceb      	ldrb	r3, [r5, r3]
    99f0:	22a2      	movs	r2, #162	; 0xa2
    99f2:	0052      	lsls	r2, r2, #1
    99f4:	5caa      	ldrb	r2, [r5, r2]
    99f6:	0212      	lsls	r2, r2, #8
    99f8:	431a      	orrs	r2, r3
    99fa:	2346      	movs	r3, #70	; 0x46
    99fc:	33ff      	adds	r3, #255	; 0xff
    99fe:	5ceb      	ldrb	r3, [r5, r3]
    9a00:	041b      	lsls	r3, r3, #16
    9a02:	431a      	orrs	r2, r3
    9a04:	23a3      	movs	r3, #163	; 0xa3
    9a06:	005b      	lsls	r3, r3, #1
    9a08:	5ceb      	ldrb	r3, [r5, r3]
    9a0a:	061b      	lsls	r3, r3, #24
    9a0c:	4313      	orrs	r3, r2
    9a0e:	4a13      	ldr	r2, [pc, #76]	; (9a5c <ValidateTxFreqT1+0x94>)
    9a10:	434a      	muls	r2, r1
    9a12:	189b      	adds	r3, r3, r2
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    9a14:	429c      	cmp	r4, r3
    9a16:	d01b      	beq.n	9a50 <ValidateTxFreqT1+0x88>
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    9a18:	2354      	movs	r3, #84	; 0x54
    9a1a:	33ff      	adds	r3, #255	; 0xff
    9a1c:	5ceb      	ldrb	r3, [r5, r3]
    9a1e:	1ac9      	subs	r1, r1, r3
    9a20:	4b0f      	ldr	r3, [pc, #60]	; (9a60 <ValidateTxFreqT1+0x98>)
    9a22:	4359      	muls	r1, r3
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    9a24:	2348      	movs	r3, #72	; 0x48
    9a26:	33ff      	adds	r3, #255	; 0xff
    9a28:	5ceb      	ldrb	r3, [r5, r3]
    9a2a:	22a4      	movs	r2, #164	; 0xa4
    9a2c:	0052      	lsls	r2, r2, #1
    9a2e:	5caa      	ldrb	r2, [r5, r2]
    9a30:	0212      	lsls	r2, r2, #8
    9a32:	4313      	orrs	r3, r2
    9a34:	224a      	movs	r2, #74	; 0x4a
    9a36:	32ff      	adds	r2, #255	; 0xff
    9a38:	5caa      	ldrb	r2, [r5, r2]
    9a3a:	0412      	lsls	r2, r2, #16
    9a3c:	431a      	orrs	r2, r3
    9a3e:	23a5      	movs	r3, #165	; 0xa5
    9a40:	005b      	lsls	r3, r3, #1
    9a42:	5ceb      	ldrb	r3, [r5, r3]
    9a44:	061b      	lsls	r3, r3, #24
    9a46:	4313      	orrs	r3, r2
    9a48:	18cb      	adds	r3, r1, r3
	if(val_freqTx.frequencyNew != GenerateFrequency1(ChIndex) && 
    9a4a:	429c      	cmp	r4, r3
    9a4c:	d000      	beq.n	9a50 <ValidateTxFreqT1+0x88>
		result = LORAWAN_INVALID_PARAMETER;
    9a4e:	200a      	movs	r0, #10
}
    9a50:	b003      	add	sp, #12
    9a52:	bd30      	pop	{r4, r5, pc}
    9a54:	00015f45 	.word	0x00015f45
    9a58:	20001b54 	.word	0x20001b54
    9a5c:	00030d40 	.word	0x00030d40
    9a60:	00186a00 	.word	0x00186a00

00009a64 <LORAREG_GetAttr_NewTxChConfigT1>:
{
    9a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a66:	46ce      	mov	lr, r9
    9a68:	4647      	mov	r7, r8
    9a6a:	b580      	push	{r7, lr}
    9a6c:	b083      	sub	sp, #12
    9a6e:	0016      	movs	r6, r2
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9a70:	788d      	ldrb	r5, [r1, #2]
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9a72:	23a8      	movs	r3, #168	; 0xa8
    9a74:	005b      	lsls	r3, r3, #1
    9a76:	4a63      	ldr	r2, [pc, #396]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9a78:	5cd3      	ldrb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    9a7a:	240a      	movs	r4, #10
	if (dataRate > RegParams.cmnParams.paramsType1.maxTxDR)
    9a7c:	42ab      	cmp	r3, r5
    9a7e:	d300      	bcc.n	9a82 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
    9a80:	e09a      	b.n	9bb8 <LORAREG_GetAttr_NewTxChConfigT1+0x154>
}
    9a82:	0020      	movs	r0, r4
    9a84:	b003      	add	sp, #12
    9a86:	bc0c      	pop	{r2, r3}
    9a88:	4690      	mov	r8, r2
    9a8a:	4699      	mov	r9, r3
    9a8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		result = SearchAvailableChannel1 (RegParams.maxChannels, transmissionType,currDr, &channelIndex);
    9a8e:	4b5d      	ldr	r3, [pc, #372]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9a90:	4699      	mov	r9, r3
    9a92:	232a      	movs	r3, #42	; 0x2a
    9a94:	464a      	mov	r2, r9
    9a96:	5cd0      	ldrb	r0, [r2, r3]
    9a98:	466b      	mov	r3, sp
    9a9a:	3307      	adds	r3, #7
    9a9c:	002a      	movs	r2, r5
    9a9e:	2101      	movs	r1, #1
    9aa0:	4c59      	ldr	r4, [pc, #356]	; (9c08 <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    9aa2:	47a0      	blx	r4
    9aa4:	0004      	movs	r4, r0
		radioConfig->sf = RegParams.pDrParams[currDr].spreadingFactor;
    9aa6:	464b      	mov	r3, r9
    9aa8:	781b      	ldrb	r3, [r3, #0]
    9aaa:	464a      	mov	r2, r9
    9aac:	7852      	ldrb	r2, [r2, #1]
    9aae:	0212      	lsls	r2, r2, #8
    9ab0:	431a      	orrs	r2, r3
    9ab2:	464b      	mov	r3, r9
    9ab4:	789b      	ldrb	r3, [r3, #2]
    9ab6:	041b      	lsls	r3, r3, #16
    9ab8:	431a      	orrs	r2, r3
    9aba:	464b      	mov	r3, r9
    9abc:	78db      	ldrb	r3, [r3, #3]
    9abe:	061b      	lsls	r3, r3, #24
    9ac0:	4313      	orrs	r3, r2
    9ac2:	00ed      	lsls	r5, r5, #3
    9ac4:	18eb      	adds	r3, r5, r3
    9ac6:	795b      	ldrb	r3, [r3, #5]
    9ac8:	72f3      	strb	r3, [r6, #11]
	if (result == LORAWAN_SUCCESS)
    9aca:	2c08      	cmp	r4, #8
    9acc:	d1d9      	bne.n	9a82 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    9ace:	007f      	lsls	r7, r7, #1
    9ad0:	4643      	mov	r3, r8
    9ad2:	1bdb      	subs	r3, r3, r7
    9ad4:	b2db      	uxtb	r3, r3
		if (channelIndex < RegParams.cmnParams.paramsType1.Max_125khzChan)
    9ad6:	466a      	mov	r2, sp
    9ad8:	3207      	adds	r2, #7
    9ada:	7812      	ldrb	r2, [r2, #0]
    9adc:	2154      	movs	r1, #84	; 0x54
    9ade:	31ff      	adds	r1, #255	; 0xff
    9ae0:	4848      	ldr	r0, [pc, #288]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9ae2:	5c41      	ldrb	r1, [r0, r1]
    9ae4:	4291      	cmp	r1, r2
    9ae6:	d93c      	bls.n	9b62 <LORAREG_GetAttr_NewTxChConfigT1+0xfe>
			radioConfig->bandwidth = BW_125KHZ;
    9ae8:	2107      	movs	r1, #7
    9aea:	72b1      	strb	r1, [r6, #10]
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh0Freq + FREQ_200KHZ * channelIndex;
    9aec:	2144      	movs	r1, #68	; 0x44
    9aee:	31ff      	adds	r1, #255	; 0xff
    9af0:	5c41      	ldrb	r1, [r0, r1]
    9af2:	25a2      	movs	r5, #162	; 0xa2
    9af4:	006d      	lsls	r5, r5, #1
    9af6:	5d45      	ldrb	r5, [r0, r5]
    9af8:	022d      	lsls	r5, r5, #8
    9afa:	430d      	orrs	r5, r1
    9afc:	2146      	movs	r1, #70	; 0x46
    9afe:	31ff      	adds	r1, #255	; 0xff
    9b00:	5c41      	ldrb	r1, [r0, r1]
    9b02:	0409      	lsls	r1, r1, #16
    9b04:	430d      	orrs	r5, r1
    9b06:	21a3      	movs	r1, #163	; 0xa3
    9b08:	0049      	lsls	r1, r1, #1
    9b0a:	5c41      	ldrb	r1, [r0, r1]
    9b0c:	0609      	lsls	r1, r1, #24
    9b0e:	4329      	orrs	r1, r5
    9b10:	4d3e      	ldr	r5, [pc, #248]	; (9c0c <LORAREG_GetAttr_NewTxChConfigT1+0x1a8>)
    9b12:	436a      	muls	r2, r5
    9b14:	188a      	adds	r2, r1, r2
			radioConfig->frequency = GenerateFrequency1 (channelIndex);
    9b16:	6032      	str	r2, [r6, #0]
			radioConfig->txPower = txPower;
    9b18:	7233      	strb	r3, [r6, #8]
			if(RegParams.band == ISM_NA915)
    9b1a:	232e      	movs	r3, #46	; 0x2e
    9b1c:	5cc3      	ldrb	r3, [r0, r3]
    9b1e:	2b02      	cmp	r3, #2
    9b20:	d01b      	beq.n	9b5a <LORAREG_GetAttr_NewTxChConfigT1+0xf6>
		radioConfig->freq_hop_period = DISABLED;
    9b22:	2300      	movs	r3, #0
    9b24:	80b3      	strh	r3, [r6, #4]
		radioConfig->modulation = MODULATION_LORA;
    9b26:	3301      	adds	r3, #1
    9b28:	7273      	strb	r3, [r6, #9]
		RegParams.lastUsedChannelIndex = channelIndex;
    9b2a:	466b      	mov	r3, sp
    9b2c:	79d9      	ldrb	r1, [r3, #7]
    9b2e:	232f      	movs	r3, #47	; 0x2f
    9b30:	4a34      	ldr	r2, [pc, #208]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9b32:	54d1      	strb	r1, [r2, r3]
    9b34:	e7a5      	b.n	9a82 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
				radioConfig->sf = SF_10;
    9b36:	3308      	adds	r3, #8
    9b38:	72f3      	strb	r3, [r6, #11]
    9b3a:	e001      	b.n	9b40 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
			radioConfig->sf = SF_8;
    9b3c:	2308      	movs	r3, #8
    9b3e:	72f3      	strb	r3, [r6, #11]
		PDS_STORE(RegParams.regParamItems.lastUsedSB);
    9b40:	4b30      	ldr	r3, [pc, #192]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9b42:	2283      	movs	r2, #131	; 0x83
    9b44:	0092      	lsls	r2, r2, #2
    9b46:	5c9a      	ldrb	r2, [r3, r2]
    9b48:	4931      	ldr	r1, [pc, #196]	; (9c10 <LORAREG_GetAttr_NewTxChConfigT1+0x1ac>)
    9b4a:	5c58      	ldrb	r0, [r3, r1]
    9b4c:	0200      	lsls	r0, r0, #8
    9b4e:	4310      	orrs	r0, r2
    9b50:	b2c1      	uxtb	r1, r0
    9b52:	0a00      	lsrs	r0, r0, #8
    9b54:	4b2f      	ldr	r3, [pc, #188]	; (9c14 <LORAREG_GetAttr_NewTxChConfigT1+0x1b0>)
    9b56:	4798      	blx	r3
    9b58:	e7b7      	b.n	9aca <LORAREG_GetAttr_NewTxChConfigT1+0x66>
    			radioConfig->ecrConfig.override = true;
    9b5a:	3b01      	subs	r3, #1
    9b5c:	71f3      	strb	r3, [r6, #7]
			    radioConfig->ecrConfig.ecr = CR_4_5;	 
    9b5e:	71b3      	strb	r3, [r6, #6]
    9b60:	e7df      	b.n	9b22 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			radioConfig->bandwidth = BW_500KHZ;
    9b62:	2109      	movs	r1, #9
    9b64:	72b1      	strb	r1, [r6, #10]
	                   FREQ_1600KHZ * (channelIndex - RegParams.cmnParams.paramsType1.Max_125khzChan);
    9b66:	4927      	ldr	r1, [pc, #156]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9b68:	2054      	movs	r0, #84	; 0x54
    9b6a:	30ff      	adds	r0, #255	; 0xff
    9b6c:	5c08      	ldrb	r0, [r1, r0]
    9b6e:	1a12      	subs	r2, r2, r0
    9b70:	4829      	ldr	r0, [pc, #164]	; (9c18 <LORAREG_GetAttr_NewTxChConfigT1+0x1b4>)
    9b72:	4342      	muls	r2, r0
    channelFrequency = RegParams.cmnParams.paramsType1.UpStreamCh64Freq + 
    9b74:	2048      	movs	r0, #72	; 0x48
    9b76:	30ff      	adds	r0, #255	; 0xff
    9b78:	5c08      	ldrb	r0, [r1, r0]
    9b7a:	25a4      	movs	r5, #164	; 0xa4
    9b7c:	006d      	lsls	r5, r5, #1
    9b7e:	5d4d      	ldrb	r5, [r1, r5]
    9b80:	022d      	lsls	r5, r5, #8
    9b82:	4305      	orrs	r5, r0
    9b84:	204a      	movs	r0, #74	; 0x4a
    9b86:	30ff      	adds	r0, #255	; 0xff
    9b88:	5c08      	ldrb	r0, [r1, r0]
    9b8a:	0400      	lsls	r0, r0, #16
    9b8c:	4305      	orrs	r5, r0
    9b8e:	20a5      	movs	r0, #165	; 0xa5
    9b90:	0040      	lsls	r0, r0, #1
    9b92:	5c08      	ldrb	r0, [r1, r0]
    9b94:	0600      	lsls	r0, r0, #24
    9b96:	4328      	orrs	r0, r5
    9b98:	1812      	adds	r2, r2, r0
			radioConfig->frequency = GenerateFrequency2 (channelIndex);
    9b9a:	6032      	str	r2, [r6, #0]
			if( RegParams.band == ISM_NA915)
    9b9c:	222e      	movs	r2, #46	; 0x2e
    9b9e:	5c8a      	ldrb	r2, [r1, r2]
    9ba0:	2a02      	cmp	r2, #2
    9ba2:	d003      	beq.n	9bac <LORAREG_GetAttr_NewTxChConfigT1+0x148>
			if (txPower <= 26)
    9ba4:	2b1a      	cmp	r3, #26
    9ba6:	d804      	bhi.n	9bb2 <LORAREG_GetAttr_NewTxChConfigT1+0x14e>
				radioConfig->txPower = txPower;
    9ba8:	7233      	strb	r3, [r6, #8]
    9baa:	e7ba      	b.n	9b22 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
			    radioConfig->ecrConfig.override = false;
    9bac:	2200      	movs	r2, #0
    9bae:	71f2      	strb	r2, [r6, #7]
    9bb0:	e7f8      	b.n	9ba4 <LORAREG_GetAttr_NewTxChConfigT1+0x140>
				radioConfig->txPower = 26;
    9bb2:	231a      	movs	r3, #26
    9bb4:	7233      	strb	r3, [r6, #8]
    9bb6:	e7b4      	b.n	9b22 <LORAREG_GetAttr_NewTxChConfigT1+0xbe>
	memcpy(&newTxChannelReq,(NewTxChannelReq_t *)attrInput,sizeof(NewTxChannelReq_t));
    9bb8:	784f      	ldrb	r7, [r1, #1]
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9bba:	232d      	movs	r3, #45	; 0x2d
    9bbc:	4a11      	ldr	r2, [pc, #68]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9bbe:	56d3      	ldrsb	r3, [r2, r3]
		result = LORAWAN_INVALID_PARAMETER;
    9bc0:	240a      	movs	r4, #10
	if (txPowerNew > RegParams.maxTxPwrIndx)
    9bc2:	429f      	cmp	r7, r3
    9bc4:	dd00      	ble.n	9bc8 <LORAREG_GetAttr_NewTxChConfigT1+0x164>
    9bc6:	e75c      	b.n	9a82 <LORAREG_GetAttr_NewTxChConfigT1+0x1e>
	uint8_t txPower = RegParams.maxTxPwr - 2 * txPwrIndx;
    9bc8:	2328      	movs	r3, #40	; 0x28
    9bca:	5cd3      	ldrb	r3, [r2, r3]
    9bcc:	4698      	mov	r8, r3
	if (transmissionType == 1) // data message (not join request), it should search in all
    9bce:	780b      	ldrb	r3, [r1, #0]
    9bd0:	2b00      	cmp	r3, #0
    9bd2:	d000      	beq.n	9bd6 <LORAREG_GetAttr_NewTxChConfigT1+0x172>
    9bd4:	e75b      	b.n	9a8e <LORAREG_GetAttr_NewTxChConfigT1+0x2a>
		result = SearchAvailableChannel1 (RegParams.cmnParams.paramsType1.Max_125khzChan, transmissionType,DR0, &channelIndex);
    9bd6:	466b      	mov	r3, sp
    9bd8:	1ddd      	adds	r5, r3, #7
    9bda:	2354      	movs	r3, #84	; 0x54
    9bdc:	33ff      	adds	r3, #255	; 0xff
    9bde:	4a09      	ldr	r2, [pc, #36]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9be0:	5cd0      	ldrb	r0, [r2, r3]
    9be2:	002b      	movs	r3, r5
    9be4:	2200      	movs	r2, #0
    9be6:	2100      	movs	r1, #0
    9be8:	4c07      	ldr	r4, [pc, #28]	; (9c08 <LORAREG_GetAttr_NewTxChConfigT1+0x1a4>)
    9bea:	47a0      	blx	r4
    9bec:	0004      	movs	r4, r0
		if(channelIndex < MAX_CHANNELS_BANDWIDTH_125_AU_NA)
    9bee:	782b      	ldrb	r3, [r5, #0]
    9bf0:	2b3f      	cmp	r3, #63	; 0x3f
    9bf2:	d8a3      	bhi.n	9b3c <LORAREG_GetAttr_NewTxChConfigT1+0xd8>
			if( RegParams.band == ISM_NA915)
    9bf4:	232e      	movs	r3, #46	; 0x2e
    9bf6:	4a03      	ldr	r2, [pc, #12]	; (9c04 <LORAREG_GetAttr_NewTxChConfigT1+0x1a0>)
    9bf8:	5cd3      	ldrb	r3, [r2, r3]
    9bfa:	2b02      	cmp	r3, #2
    9bfc:	d09b      	beq.n	9b36 <LORAREG_GetAttr_NewTxChConfigT1+0xd2>
				radioConfig->sf = SF_12;
    9bfe:	230c      	movs	r3, #12
    9c00:	72f3      	strb	r3, [r6, #11]
    9c02:	e79d      	b.n	9b40 <LORAREG_GetAttr_NewTxChConfigT1+0xdc>
    9c04:	20001b54 	.word	0x20001b54
    9c08:	00007095 	.word	0x00007095
    9c0c:	00030d40 	.word	0x00030d40
    9c10:	0000020d 	.word	0x0000020d
    9c14:	0000af89 	.word	0x0000af89
    9c18:	00186a00 	.word	0x00186a00

00009c1c <LORAREG_InitGetAttrFnPtrsNA>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    9c1c:	4b2b      	ldr	r3, [pc, #172]	; (9ccc <LORAREG_InitGetAttrFnPtrsNA+0xb0>)
    9c1e:	4a2c      	ldr	r2, [pc, #176]	; (9cd0 <LORAREG_InitGetAttrFnPtrsNA+0xb4>)
    9c20:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    9c22:	4a2c      	ldr	r2, [pc, #176]	; (9cd4 <LORAREG_InitGetAttrFnPtrsNA+0xb8>)
    9c24:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    9c26:	4a2c      	ldr	r2, [pc, #176]	; (9cd8 <LORAREG_InitGetAttrFnPtrsNA+0xbc>)
    9c28:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    9c2a:	4a2c      	ldr	r2, [pc, #176]	; (9cdc <LORAREG_InitGetAttrFnPtrsNA+0xc0>)
    9c2c:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    9c2e:	4a2c      	ldr	r2, [pc, #176]	; (9ce0 <LORAREG_InitGetAttrFnPtrsNA+0xc4>)
    9c30:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    9c32:	4a2c      	ldr	r2, [pc, #176]	; (9ce4 <LORAREG_InitGetAttrFnPtrsNA+0xc8>)
    9c34:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    9c36:	4a2c      	ldr	r2, [pc, #176]	; (9ce8 <LORAREG_InitGetAttrFnPtrsNA+0xcc>)
    9c38:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    9c3a:	4a2c      	ldr	r2, [pc, #176]	; (9cec <LORAREG_InitGetAttrFnPtrsNA+0xd0>)
    9c3c:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    9c3e:	4a2c      	ldr	r2, [pc, #176]	; (9cf0 <LORAREG_InitGetAttrFnPtrsNA+0xd4>)
    9c40:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    9c42:	4a2c      	ldr	r2, [pc, #176]	; (9cf4 <LORAREG_InitGetAttrFnPtrsNA+0xd8>)
    9c44:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    9c46:	4a2c      	ldr	r2, [pc, #176]	; (9cf8 <LORAREG_InitGetAttrFnPtrsNA+0xdc>)
    9c48:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    9c4a:	4a2c      	ldr	r2, [pc, #176]	; (9cfc <LORAREG_InitGetAttrFnPtrsNA+0xe0>)
    9c4c:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    9c4e:	4a2c      	ldr	r2, [pc, #176]	; (9d00 <LORAREG_InitGetAttrFnPtrsNA+0xe4>)
    9c50:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    9c52:	4a2c      	ldr	r2, [pc, #176]	; (9d04 <LORAREG_InitGetAttrFnPtrsNA+0xe8>)
    9c54:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    9c56:	4a2c      	ldr	r2, [pc, #176]	; (9d08 <LORAREG_InitGetAttrFnPtrsNA+0xec>)
    9c58:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    9c5a:	492c      	ldr	r1, [pc, #176]	; (9d0c <LORAREG_InitGetAttrFnPtrsNA+0xf0>)
    9c5c:	2280      	movs	r2, #128	; 0x80
    9c5e:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    9c60:	4a2b      	ldr	r2, [pc, #172]	; (9d10 <LORAREG_InitGetAttrFnPtrsNA+0xf4>)
    9c62:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    9c64:	492b      	ldr	r1, [pc, #172]	; (9d14 <LORAREG_InitGetAttrFnPtrsNA+0xf8>)
    9c66:	228c      	movs	r2, #140	; 0x8c
    9c68:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    9c6a:	492b      	ldr	r1, [pc, #172]	; (9d18 <LORAREG_InitGetAttrFnPtrsNA+0xfc>)
    9c6c:	3204      	adds	r2, #4
    9c6e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    9c70:	492a      	ldr	r1, [pc, #168]	; (9d1c <LORAREG_InitGetAttrFnPtrsNA+0x100>)
    9c72:	3204      	adds	r2, #4
    9c74:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;
    9c76:	492a      	ldr	r1, [pc, #168]	; (9d20 <LORAREG_InitGetAttrFnPtrsNA+0x104>)
    9c78:	3204      	adds	r2, #4
    9c7a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    9c7c:	4929      	ldr	r1, [pc, #164]	; (9d24 <LORAREG_InitGetAttrFnPtrsNA+0x108>)
    9c7e:	3204      	adds	r2, #4
    9c80:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    9c82:	4929      	ldr	r1, [pc, #164]	; (9d28 <LORAREG_InitGetAttrFnPtrsNA+0x10c>)
    9c84:	3204      	adds	r2, #4
    9c86:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    9c88:	4928      	ldr	r1, [pc, #160]	; (9d2c <LORAREG_InitGetAttrFnPtrsNA+0x110>)
    9c8a:	3204      	adds	r2, #4
    9c8c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    9c8e:	4928      	ldr	r1, [pc, #160]	; (9d30 <LORAREG_InitGetAttrFnPtrsNA+0x114>)
    9c90:	3204      	adds	r2, #4
    9c92:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    9c94:	4927      	ldr	r1, [pc, #156]	; (9d34 <LORAREG_InitGetAttrFnPtrsNA+0x118>)
    9c96:	3204      	adds	r2, #4
    9c98:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    9c9a:	4927      	ldr	r1, [pc, #156]	; (9d38 <LORAREG_InitGetAttrFnPtrsNA+0x11c>)
    9c9c:	3204      	adds	r2, #4
    9c9e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    9ca0:	4926      	ldr	r1, [pc, #152]	; (9d3c <LORAREG_InitGetAttrFnPtrsNA+0x120>)
    9ca2:	3204      	adds	r2, #4
    9ca4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    9ca6:	4926      	ldr	r1, [pc, #152]	; (9d40 <LORAREG_InitGetAttrFnPtrsNA+0x124>)
    9ca8:	3204      	adds	r2, #4
    9caa:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    9cac:	4925      	ldr	r1, [pc, #148]	; (9d44 <LORAREG_InitGetAttrFnPtrsNA+0x128>)
    9cae:	3204      	adds	r2, #4
    9cb0:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    9cb2:	4925      	ldr	r1, [pc, #148]	; (9d48 <LORAREG_InitGetAttrFnPtrsNA+0x12c>)
    9cb4:	3204      	adds	r2, #4
    9cb6:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    9cb8:	4924      	ldr	r1, [pc, #144]	; (9d4c <LORAREG_InitGetAttrFnPtrsNA+0x130>)
    9cba:	3204      	adds	r2, #4
    9cbc:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    9cbe:	4924      	ldr	r1, [pc, #144]	; (9d50 <LORAREG_InitGetAttrFnPtrsNA+0x134>)
    9cc0:	3214      	adds	r2, #20
    9cc2:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    9cc4:	4923      	ldr	r1, [pc, #140]	; (9d54 <LORAREG_InitGetAttrFnPtrsNA+0x138>)
    9cc6:	3204      	adds	r2, #4
    9cc8:	5099      	str	r1, [r3, r2]
}
    9cca:	4770      	bx	lr
    9ccc:	20000ba4 	.word	0x20000ba4
    9cd0:	00006b6d 	.word	0x00006b6d
    9cd4:	000097fd 	.word	0x000097fd
    9cd8:	0000984d 	.word	0x0000984d
    9cdc:	00009899 	.word	0x00009899
    9ce0:	000069b5 	.word	0x000069b5
    9ce4:	000069c5 	.word	0x000069c5
    9ce8:	000069e1 	.word	0x000069e1
    9cec:	000069f1 	.word	0x000069f1
    9cf0:	000079bd 	.word	0x000079bd
    9cf4:	00006a01 	.word	0x00006a01
    9cf8:	00006a11 	.word	0x00006a11
    9cfc:	00007891 	.word	0x00007891
    9d00:	00006d21 	.word	0x00006d21
    9d04:	00006a61 	.word	0x00006a61
    9d08:	000077e5 	.word	0x000077e5
    9d0c:	00007745 	.word	0x00007745
    9d10:	00006aad 	.word	0x00006aad
    9d14:	000098e5 	.word	0x000098e5
    9d18:	00009931 	.word	0x00009931
    9d1c:	0000997d 	.word	0x0000997d
    9d20:	00006ab7 	.word	0x00006ab7
    9d24:	00006ac1 	.word	0x00006ac1
    9d28:	00006acb 	.word	0x00006acb
    9d2c:	00006ad5 	.word	0x00006ad5
    9d30:	00006ae1 	.word	0x00006ae1
    9d34:	00006aed 	.word	0x00006aed
    9d38:	00006af7 	.word	0x00006af7
    9d3c:	00006aff 	.word	0x00006aff
    9d40:	00006b07 	.word	0x00006b07
    9d44:	00009a65 	.word	0x00009a65
    9d48:	000072a1 	.word	0x000072a1
    9d4c:	00006b31 	.word	0x00006b31
    9d50:	00006b11 	.word	0x00006b11
    9d54:	00006b21 	.word	0x00006b21

00009d58 <LORAREG_InitGetAttrFnPtrsEU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    9d58:	4b2d      	ldr	r3, [pc, #180]	; (9e10 <LORAREG_InitGetAttrFnPtrsEU+0xb8>)
    9d5a:	4a2e      	ldr	r2, [pc, #184]	; (9e14 <LORAREG_InitGetAttrFnPtrsEU+0xbc>)
    9d5c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    9d5e:	4a2e      	ldr	r2, [pc, #184]	; (9e18 <LORAREG_InitGetAttrFnPtrsEU+0xc0>)
    9d60:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    9d62:	4a2e      	ldr	r2, [pc, #184]	; (9e1c <LORAREG_InitGetAttrFnPtrsEU+0xc4>)
    9d64:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    9d66:	4a2e      	ldr	r2, [pc, #184]	; (9e20 <LORAREG_InitGetAttrFnPtrsEU+0xc8>)
    9d68:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    9d6a:	4a2e      	ldr	r2, [pc, #184]	; (9e24 <LORAREG_InitGetAttrFnPtrsEU+0xcc>)
    9d6c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    9d6e:	4a2e      	ldr	r2, [pc, #184]	; (9e28 <LORAREG_InitGetAttrFnPtrsEU+0xd0>)
    9d70:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    9d72:	4a2e      	ldr	r2, [pc, #184]	; (9e2c <LORAREG_InitGetAttrFnPtrsEU+0xd4>)
    9d74:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    9d76:	4a2e      	ldr	r2, [pc, #184]	; (9e30 <LORAREG_InitGetAttrFnPtrsEU+0xd8>)
    9d78:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    9d7a:	4a2e      	ldr	r2, [pc, #184]	; (9e34 <LORAREG_InitGetAttrFnPtrsEU+0xdc>)
    9d7c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    9d7e:	4a2e      	ldr	r2, [pc, #184]	; (9e38 <LORAREG_InitGetAttrFnPtrsEU+0xe0>)
    9d80:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    9d82:	4a2e      	ldr	r2, [pc, #184]	; (9e3c <LORAREG_InitGetAttrFnPtrsEU+0xe4>)
    9d84:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    9d86:	4a2e      	ldr	r2, [pc, #184]	; (9e40 <LORAREG_InitGetAttrFnPtrsEU+0xe8>)
    9d88:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    9d8a:	4a2e      	ldr	r2, [pc, #184]	; (9e44 <LORAREG_InitGetAttrFnPtrsEU+0xec>)
    9d8c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    9d8e:	4a2e      	ldr	r2, [pc, #184]	; (9e48 <LORAREG_InitGetAttrFnPtrsEU+0xf0>)
    9d90:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    9d92:	4a2e      	ldr	r2, [pc, #184]	; (9e4c <LORAREG_InitGetAttrFnPtrsEU+0xf4>)
    9d94:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    9d96:	492e      	ldr	r1, [pc, #184]	; (9e50 <LORAREG_InitGetAttrFnPtrsEU+0xf8>)
    9d98:	2280      	movs	r2, #128	; 0x80
    9d9a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    9d9c:	4a2d      	ldr	r2, [pc, #180]	; (9e54 <LORAREG_InitGetAttrFnPtrsEU+0xfc>)
    9d9e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    9da0:	492d      	ldr	r1, [pc, #180]	; (9e58 <LORAREG_InitGetAttrFnPtrsEU+0x100>)
    9da2:	228c      	movs	r2, #140	; 0x8c
    9da4:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    9da6:	492d      	ldr	r1, [pc, #180]	; (9e5c <LORAREG_InitGetAttrFnPtrsEU+0x104>)
    9da8:	3204      	adds	r2, #4
    9daa:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    9dac:	492c      	ldr	r1, [pc, #176]	; (9e60 <LORAREG_InitGetAttrFnPtrsEU+0x108>)
    9dae:	3204      	adds	r2, #4
    9db0:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    9db2:	492c      	ldr	r1, [pc, #176]	; (9e64 <LORAREG_InitGetAttrFnPtrsEU+0x10c>)
    9db4:	3204      	adds	r2, #4
    9db6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    9db8:	492b      	ldr	r1, [pc, #172]	; (9e68 <LORAREG_InitGetAttrFnPtrsEU+0x110>)
    9dba:	3204      	adds	r2, #4
    9dbc:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    9dbe:	492b      	ldr	r1, [pc, #172]	; (9e6c <LORAREG_InitGetAttrFnPtrsEU+0x114>)
    9dc0:	3204      	adds	r2, #4
    9dc2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    9dc4:	492a      	ldr	r1, [pc, #168]	; (9e70 <LORAREG_InitGetAttrFnPtrsEU+0x118>)
    9dc6:	3204      	adds	r2, #4
    9dc8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    9dca:	492a      	ldr	r1, [pc, #168]	; (9e74 <LORAREG_InitGetAttrFnPtrsEU+0x11c>)
    9dcc:	3204      	adds	r2, #4
    9dce:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    9dd0:	4929      	ldr	r1, [pc, #164]	; (9e78 <LORAREG_InitGetAttrFnPtrsEU+0x120>)
    9dd2:	3204      	adds	r2, #4
    9dd4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    9dd6:	4929      	ldr	r1, [pc, #164]	; (9e7c <LORAREG_InitGetAttrFnPtrsEU+0x124>)
    9dd8:	3204      	adds	r2, #4
    9dda:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    9ddc:	4928      	ldr	r1, [pc, #160]	; (9e80 <LORAREG_InitGetAttrFnPtrsEU+0x128>)
    9dde:	3204      	adds	r2, #4
    9de0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    9de2:	4928      	ldr	r1, [pc, #160]	; (9e84 <LORAREG_InitGetAttrFnPtrsEU+0x12c>)
    9de4:	3204      	adds	r2, #4
    9de6:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    9de8:	4927      	ldr	r1, [pc, #156]	; (9e88 <LORAREG_InitGetAttrFnPtrsEU+0x130>)
    9dea:	3204      	adds	r2, #4
    9dec:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    9dee:	4927      	ldr	r1, [pc, #156]	; (9e8c <LORAREG_InitGetAttrFnPtrsEU+0x134>)
    9df0:	3204      	adds	r2, #4
    9df2:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    9df4:	4926      	ldr	r1, [pc, #152]	; (9e90 <LORAREG_InitGetAttrFnPtrsEU+0x138>)
    9df6:	3204      	adds	r2, #4
    9df8:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    9dfa:	4926      	ldr	r1, [pc, #152]	; (9e94 <LORAREG_InitGetAttrFnPtrsEU+0x13c>)
    9dfc:	320c      	adds	r2, #12
    9dfe:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    9e00:	4925      	ldr	r1, [pc, #148]	; (9e98 <LORAREG_InitGetAttrFnPtrsEU+0x140>)
    9e02:	3208      	adds	r2, #8
    9e04:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    9e06:	4925      	ldr	r1, [pc, #148]	; (9e9c <LORAREG_InitGetAttrFnPtrsEU+0x144>)
    9e08:	3204      	adds	r2, #4
    9e0a:	5099      	str	r1, [r3, r2]
}
    9e0c:	4770      	bx	lr
    9e0e:	46c0      	nop			; (mov r8, r8)
    9e10:	20000ba4 	.word	0x20000ba4
    9e14:	00007d19 	.word	0x00007d19
    9e18:	0000949d 	.word	0x0000949d
    9e1c:	000094dd 	.word	0x000094dd
    9e20:	00009519 	.word	0x00009519
    9e24:	000069b5 	.word	0x000069b5
    9e28:	000069c5 	.word	0x000069c5
    9e2c:	000069e1 	.word	0x000069e1
    9e30:	000069f1 	.word	0x000069f1
    9e34:	000079bd 	.word	0x000079bd
    9e38:	00006a01 	.word	0x00006a01
    9e3c:	00006a11 	.word	0x00006a11
    9e40:	00007c1d 	.word	0x00007c1d
    9e44:	00006d21 	.word	0x00006d21
    9e48:	00006a61 	.word	0x00006a61
    9e4c:	00007bb1 	.word	0x00007bb1
    9e50:	00007745 	.word	0x00007745
    9e54:	00006cd9 	.word	0x00006cd9
    9e58:	00009551 	.word	0x00009551
    9e5c:	00009589 	.word	0x00009589
    9e60:	000095c1 	.word	0x000095c1
    9e64:	00007a1d 	.word	0x00007a1d
    9e68:	00006ac1 	.word	0x00006ac1
    9e6c:	00006acb 	.word	0x00006acb
    9e70:	00006ad5 	.word	0x00006ad5
    9e74:	00006ae1 	.word	0x00006ae1
    9e78:	00006aed 	.word	0x00006aed
    9e7c:	00006af7 	.word	0x00006af7
    9e80:	00006aff 	.word	0x00006aff
    9e84:	00006b07 	.word	0x00006b07
    9e88:	00009631 	.word	0x00009631
    9e8c:	000085ad 	.word	0x000085ad
    9e90:	00006b31 	.word	0x00006b31
    9e94:	000079d5 	.word	0x000079d5
    9e98:	00006b11 	.word	0x00006b11
    9e9c:	00006b21 	.word	0x00006b21

00009ea0 <LORAREG_InitGetAttrFnPtrsAS>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    9ea0:	4b2d      	ldr	r3, [pc, #180]	; (9f58 <LORAREG_InitGetAttrFnPtrsAS+0xb8>)
    9ea2:	4a2e      	ldr	r2, [pc, #184]	; (9f5c <LORAREG_InitGetAttrFnPtrsAS+0xbc>)
    9ea4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    9ea6:	4a2e      	ldr	r2, [pc, #184]	; (9f60 <LORAREG_InitGetAttrFnPtrsAS+0xc0>)
    9ea8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    9eaa:	4a2e      	ldr	r2, [pc, #184]	; (9f64 <LORAREG_InitGetAttrFnPtrsAS+0xc4>)
    9eac:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    9eae:	4a2e      	ldr	r2, [pc, #184]	; (9f68 <LORAREG_InitGetAttrFnPtrsAS+0xc8>)
    9eb0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    9eb2:	4a2e      	ldr	r2, [pc, #184]	; (9f6c <LORAREG_InitGetAttrFnPtrsAS+0xcc>)
    9eb4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    9eb6:	4a2e      	ldr	r2, [pc, #184]	; (9f70 <LORAREG_InitGetAttrFnPtrsAS+0xd0>)
    9eb8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    9eba:	4a2e      	ldr	r2, [pc, #184]	; (9f74 <LORAREG_InitGetAttrFnPtrsAS+0xd4>)
    9ebc:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    9ebe:	4a2e      	ldr	r2, [pc, #184]	; (9f78 <LORAREG_InitGetAttrFnPtrsAS+0xd8>)
    9ec0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    9ec2:	4a2e      	ldr	r2, [pc, #184]	; (9f7c <LORAREG_InitGetAttrFnPtrsAS+0xdc>)
    9ec4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    9ec6:	4a2e      	ldr	r2, [pc, #184]	; (9f80 <LORAREG_InitGetAttrFnPtrsAS+0xe0>)
    9ec8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    9eca:	4a2e      	ldr	r2, [pc, #184]	; (9f84 <LORAREG_InitGetAttrFnPtrsAS+0xe4>)
    9ecc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    9ece:	4a2e      	ldr	r2, [pc, #184]	; (9f88 <LORAREG_InitGetAttrFnPtrsAS+0xe8>)
    9ed0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    9ed2:	4a2e      	ldr	r2, [pc, #184]	; (9f8c <LORAREG_InitGetAttrFnPtrsAS+0xec>)
    9ed4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    9ed6:	4a2e      	ldr	r2, [pc, #184]	; (9f90 <LORAREG_InitGetAttrFnPtrsAS+0xf0>)
    9ed8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    9eda:	4a2e      	ldr	r2, [pc, #184]	; (9f94 <LORAREG_InitGetAttrFnPtrsAS+0xf4>)
    9edc:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    9ede:	492e      	ldr	r1, [pc, #184]	; (9f98 <LORAREG_InitGetAttrFnPtrsAS+0xf8>)
    9ee0:	2280      	movs	r2, #128	; 0x80
    9ee2:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    9ee4:	492d      	ldr	r1, [pc, #180]	; (9f9c <LORAREG_InitGetAttrFnPtrsAS+0xfc>)
    9ee6:	320c      	adds	r2, #12
    9ee8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    9eea:	492d      	ldr	r1, [pc, #180]	; (9fa0 <LORAREG_InitGetAttrFnPtrsAS+0x100>)
    9eec:	3204      	adds	r2, #4
    9eee:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    9ef0:	492c      	ldr	r1, [pc, #176]	; (9fa4 <LORAREG_InitGetAttrFnPtrsAS+0x104>)
    9ef2:	3204      	adds	r2, #4
    9ef4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    9ef6:	492c      	ldr	r1, [pc, #176]	; (9fa8 <LORAREG_InitGetAttrFnPtrsAS+0x108>)
    9ef8:	3208      	adds	r2, #8
    9efa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    9efc:	492b      	ldr	r1, [pc, #172]	; (9fac <LORAREG_InitGetAttrFnPtrsAS+0x10c>)
    9efe:	3204      	adds	r2, #4
    9f00:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    9f02:	492b      	ldr	r1, [pc, #172]	; (9fb0 <LORAREG_InitGetAttrFnPtrsAS+0x110>)
    9f04:	3204      	adds	r2, #4
    9f06:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    9f08:	492a      	ldr	r1, [pc, #168]	; (9fb4 <LORAREG_InitGetAttrFnPtrsAS+0x114>)
    9f0a:	3204      	adds	r2, #4
    9f0c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    9f0e:	492a      	ldr	r1, [pc, #168]	; (9fb8 <LORAREG_InitGetAttrFnPtrsAS+0x118>)
    9f10:	3204      	adds	r2, #4
    9f12:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    9f14:	4929      	ldr	r1, [pc, #164]	; (9fbc <LORAREG_InitGetAttrFnPtrsAS+0x11c>)
    9f16:	3204      	adds	r2, #4
    9f18:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    9f1a:	4929      	ldr	r1, [pc, #164]	; (9fc0 <LORAREG_InitGetAttrFnPtrsAS+0x120>)
    9f1c:	3204      	adds	r2, #4
    9f1e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    9f20:	4928      	ldr	r1, [pc, #160]	; (9fc4 <LORAREG_InitGetAttrFnPtrsAS+0x124>)
    9f22:	3204      	adds	r2, #4
    9f24:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    9f26:	4928      	ldr	r1, [pc, #160]	; (9fc8 <LORAREG_InitGetAttrFnPtrsAS+0x128>)
    9f28:	3204      	adds	r2, #4
    9f2a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    9f2c:	4927      	ldr	r1, [pc, #156]	; (9fcc <LORAREG_InitGetAttrFnPtrsAS+0x12c>)
    9f2e:	3204      	adds	r2, #4
    9f30:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    9f32:	4927      	ldr	r1, [pc, #156]	; (9fd0 <LORAREG_InitGetAttrFnPtrsAS+0x130>)
    9f34:	3204      	adds	r2, #4
    9f36:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    9f38:	4926      	ldr	r1, [pc, #152]	; (9fd4 <LORAREG_InitGetAttrFnPtrsAS+0x134>)
    9f3a:	320c      	adds	r2, #12
    9f3c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    9f3e:	4926      	ldr	r1, [pc, #152]	; (9fd8 <LORAREG_InitGetAttrFnPtrsAS+0x138>)
    9f40:	3208      	adds	r2, #8
    9f42:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    9f44:	4925      	ldr	r1, [pc, #148]	; (9fdc <LORAREG_InitGetAttrFnPtrsAS+0x13c>)
    9f46:	3204      	adds	r2, #4
    9f48:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT2;
    9f4a:	4a25      	ldr	r2, [pc, #148]	; (9fe0 <LORAREG_InitGetAttrFnPtrsAS+0x140>)
    9f4c:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[MIN_DUTY_CYCLE_TIMER] = LORAREG_GetAttr_DutyCycleTimer;
    9f4e:	4925      	ldr	r1, [pc, #148]	; (9fe4 <LORAREG_InitGetAttrFnPtrsAS+0x144>)
    9f50:	2298      	movs	r2, #152	; 0x98
    9f52:	5099      	str	r1, [r3, r2]
}
    9f54:	4770      	bx	lr
    9f56:	46c0      	nop			; (mov r8, r8)
    9f58:	20000ba4 	.word	0x20000ba4
    9f5c:	00007e55 	.word	0x00007e55
    9f60:	0000949d 	.word	0x0000949d
    9f64:	000094dd 	.word	0x000094dd
    9f68:	00009439 	.word	0x00009439
    9f6c:	000069b5 	.word	0x000069b5
    9f70:	000069c5 	.word	0x000069c5
    9f74:	000069e1 	.word	0x000069e1
    9f78:	000069f1 	.word	0x000069f1
    9f7c:	000079bd 	.word	0x000079bd
    9f80:	00006a01 	.word	0x00006a01
    9f84:	00006a11 	.word	0x00006a11
    9f88:	00007c1d 	.word	0x00007c1d
    9f8c:	00006d21 	.word	0x00006d21
    9f90:	00006a61 	.word	0x00006a61
    9f94:	00007d61 	.word	0x00007d61
    9f98:	00007745 	.word	0x00007745
    9f9c:	00009551 	.word	0x00009551
    9fa0:	00009589 	.word	0x00009589
    9fa4:	000095c1 	.word	0x000095c1
    9fa8:	00006ac1 	.word	0x00006ac1
    9fac:	00006acb 	.word	0x00006acb
    9fb0:	00006ad5 	.word	0x00006ad5
    9fb4:	00006ae1 	.word	0x00006ae1
    9fb8:	00006aed 	.word	0x00006aed
    9fbc:	00006af7 	.word	0x00006af7
    9fc0:	00006aff 	.word	0x00006aff
    9fc4:	00006b07 	.word	0x00006b07
    9fc8:	00009631 	.word	0x00009631
    9fcc:	000085ad 	.word	0x000085ad
    9fd0:	00006b31 	.word	0x00006b31
    9fd4:	000079d5 	.word	0x000079d5
    9fd8:	00006b11 	.word	0x00006b11
    9fdc:	00006b21 	.word	0x00006b21
    9fe0:	00006cd9 	.word	0x00006cd9
    9fe4:	00007a1d 	.word	0x00007a1d

00009fe8 <LORAREG_InitGetAttrFnPtrsAU>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT1;
    9fe8:	4b2b      	ldr	r3, [pc, #172]	; (a098 <LORAREG_InitGetAttrFnPtrsAU+0xb0>)
    9fea:	4a2c      	ldr	r2, [pc, #176]	; (a09c <LORAREG_InitGetAttrFnPtrsAU+0xb4>)
    9fec:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT1;
    9fee:	4a2c      	ldr	r2, [pc, #176]	; (a0a0 <LORAREG_InitGetAttrFnPtrsAU+0xb8>)
    9ff0:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT1;
    9ff2:	4a2c      	ldr	r2, [pc, #176]	; (a0a4 <LORAREG_InitGetAttrFnPtrsAU+0xbc>)
    9ff4:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT1;
    9ff6:	4a2c      	ldr	r2, [pc, #176]	; (a0a8 <LORAREG_InitGetAttrFnPtrsAU+0xc0>)
    9ff8:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    9ffa:	4a2c      	ldr	r2, [pc, #176]	; (a0ac <LORAREG_InitGetAttrFnPtrsAU+0xc4>)
    9ffc:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    9ffe:	4a2c      	ldr	r2, [pc, #176]	; (a0b0 <LORAREG_InitGetAttrFnPtrsAU+0xc8>)
    a000:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a002:	4a2c      	ldr	r2, [pc, #176]	; (a0b4 <LORAREG_InitGetAttrFnPtrsAU+0xcc>)
    a004:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a006:	4a2c      	ldr	r2, [pc, #176]	; (a0b8 <LORAREG_InitGetAttrFnPtrsAU+0xd0>)
    a008:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a00a:	4a2c      	ldr	r2, [pc, #176]	; (a0bc <LORAREG_InitGetAttrFnPtrsAU+0xd4>)
    a00c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a00e:	4a2c      	ldr	r2, [pc, #176]	; (a0c0 <LORAREG_InitGetAttrFnPtrsAU+0xd8>)
    a010:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a012:	4a2c      	ldr	r2, [pc, #176]	; (a0c4 <LORAREG_InitGetAttrFnPtrsAU+0xdc>)
    a014:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT1;
    a016:	4a2c      	ldr	r2, [pc, #176]	; (a0c8 <LORAREG_InitGetAttrFnPtrsAU+0xe0>)
    a018:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a01a:	4a2c      	ldr	r2, [pc, #176]	; (a0cc <LORAREG_InitGetAttrFnPtrsAU+0xe4>)
    a01c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a01e:	4a2c      	ldr	r2, [pc, #176]	; (a0d0 <LORAREG_InitGetAttrFnPtrsAU+0xe8>)
    a020:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType1;
    a022:	4a2c      	ldr	r2, [pc, #176]	; (a0d4 <LORAREG_InitGetAttrFnPtrsAU+0xec>)
    a024:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a026:	492c      	ldr	r1, [pc, #176]	; (a0d8 <LORAREG_InitGetAttrFnPtrsAU+0xf0>)
    a028:	2280      	movs	r2, #128	; 0x80
    a02a:	5099      	str	r1, [r3, r2]
    pGetAttr[DUTY_CYCLE] = LORAREG_GetAttr_DutyCycleT1;
    a02c:	4a2b      	ldr	r2, [pc, #172]	; (a0dc <LORAREG_InitGetAttrFnPtrsAU+0xf4>)
    a02e:	679a      	str	r2, [r3, #120]	; 0x78
    pGetAttr[DUTY_CYCLE_TIMER] = LORAREG_GetAttr_MinDutyCycleTimer;	
    a030:	4a2b      	ldr	r2, [pc, #172]	; (a0e0 <LORAREG_InitGetAttrFnPtrsAU+0xf8>)
    a032:	67da      	str	r2, [r3, #124]	; 0x7c
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT1;
    a034:	492b      	ldr	r1, [pc, #172]	; (a0e4 <LORAREG_InitGetAttrFnPtrsAU+0xfc>)
    a036:	228c      	movs	r2, #140	; 0x8c
    a038:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT1;
    a03a:	492b      	ldr	r1, [pc, #172]	; (a0e8 <LORAREG_InitGetAttrFnPtrsAU+0x100>)
    a03c:	3204      	adds	r2, #4
    a03e:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT1;
    a040:	492a      	ldr	r1, [pc, #168]	; (a0ec <LORAREG_InitGetAttrFnPtrsAU+0x104>)
    a042:	3204      	adds	r2, #4
    a044:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a046:	492a      	ldr	r1, [pc, #168]	; (a0f0 <LORAREG_InitGetAttrFnPtrsAU+0x108>)
    a048:	3208      	adds	r2, #8
    a04a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a04c:	4929      	ldr	r1, [pc, #164]	; (a0f4 <LORAREG_InitGetAttrFnPtrsAU+0x10c>)
    a04e:	3204      	adds	r2, #4
    a050:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a052:	4929      	ldr	r1, [pc, #164]	; (a0f8 <LORAREG_InitGetAttrFnPtrsAU+0x110>)
    a054:	3204      	adds	r2, #4
    a056:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a058:	4928      	ldr	r1, [pc, #160]	; (a0fc <LORAREG_InitGetAttrFnPtrsAU+0x114>)
    a05a:	3204      	adds	r2, #4
    a05c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a05e:	4928      	ldr	r1, [pc, #160]	; (a100 <LORAREG_InitGetAttrFnPtrsAU+0x118>)
    a060:	3204      	adds	r2, #4
    a062:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a064:	4927      	ldr	r1, [pc, #156]	; (a104 <LORAREG_InitGetAttrFnPtrsAU+0x11c>)
    a066:	3204      	adds	r2, #4
    a068:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a06a:	4927      	ldr	r1, [pc, #156]	; (a108 <LORAREG_InitGetAttrFnPtrsAU+0x120>)
    a06c:	3204      	adds	r2, #4
    a06e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a070:	4926      	ldr	r1, [pc, #152]	; (a10c <LORAREG_InitGetAttrFnPtrsAU+0x124>)
    a072:	3204      	adds	r2, #4
    a074:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT1;
    a076:	4926      	ldr	r1, [pc, #152]	; (a110 <LORAREG_InitGetAttrFnPtrsAU+0x128>)
    a078:	3204      	adds	r2, #4
    a07a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel1;
    a07c:	4925      	ldr	r1, [pc, #148]	; (a114 <LORAREG_InitGetAttrFnPtrsAU+0x12c>)
    a07e:	3204      	adds	r2, #4
    a080:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a082:	4925      	ldr	r1, [pc, #148]	; (a118 <LORAREG_InitGetAttrFnPtrsAU+0x130>)
    a084:	3204      	adds	r2, #4
    a086:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a088:	4924      	ldr	r1, [pc, #144]	; (a11c <LORAREG_InitGetAttrFnPtrsAU+0x134>)
    a08a:	3214      	adds	r2, #20
    a08c:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a08e:	4924      	ldr	r1, [pc, #144]	; (a120 <LORAREG_InitGetAttrFnPtrsAU+0x138>)
    a090:	3204      	adds	r2, #4
    a092:	5099      	str	r1, [r3, r2]
}
    a094:	4770      	bx	lr
    a096:	46c0      	nop			; (mov r8, r8)
    a098:	20000ba4 	.word	0x20000ba4
    a09c:	00006b6d 	.word	0x00006b6d
    a0a0:	000097fd 	.word	0x000097fd
    a0a4:	0000984d 	.word	0x0000984d
    a0a8:	00009899 	.word	0x00009899
    a0ac:	000069b5 	.word	0x000069b5
    a0b0:	000069c5 	.word	0x000069c5
    a0b4:	000069e1 	.word	0x000069e1
    a0b8:	000069f1 	.word	0x000069f1
    a0bc:	000079bd 	.word	0x000079bd
    a0c0:	00006a01 	.word	0x00006a01
    a0c4:	00006a11 	.word	0x00006a11
    a0c8:	00007891 	.word	0x00007891
    a0cc:	00006d21 	.word	0x00006d21
    a0d0:	00006a61 	.word	0x00006a61
    a0d4:	000077e5 	.word	0x000077e5
    a0d8:	00007745 	.word	0x00007745
    a0dc:	00006aad 	.word	0x00006aad
    a0e0:	00006ab7 	.word	0x00006ab7
    a0e4:	000098e5 	.word	0x000098e5
    a0e8:	00009931 	.word	0x00009931
    a0ec:	0000997d 	.word	0x0000997d
    a0f0:	00006ac1 	.word	0x00006ac1
    a0f4:	00006acb 	.word	0x00006acb
    a0f8:	00006ad5 	.word	0x00006ad5
    a0fc:	00006ae1 	.word	0x00006ae1
    a100:	00006aed 	.word	0x00006aed
    a104:	00006af7 	.word	0x00006af7
    a108:	00006aff 	.word	0x00006aff
    a10c:	00006b07 	.word	0x00006b07
    a110:	00009a65 	.word	0x00009a65
    a114:	000072a1 	.word	0x000072a1
    a118:	00006b31 	.word	0x00006b31
    a11c:	00006b11 	.word	0x00006b11
    a120:	00006b21 	.word	0x00006b21

0000a124 <LORAREG_InitGetAttrFnPtrsIN>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    a124:	4b2a      	ldr	r3, [pc, #168]	; (a1d0 <LORAREG_InitGetAttrFnPtrsIN+0xac>)
    a126:	4a2b      	ldr	r2, [pc, #172]	; (a1d4 <LORAREG_InitGetAttrFnPtrsIN+0xb0>)
    a128:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    a12a:	4a2b      	ldr	r2, [pc, #172]	; (a1d8 <LORAREG_InitGetAttrFnPtrsIN+0xb4>)
    a12c:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    a12e:	4a2b      	ldr	r2, [pc, #172]	; (a1dc <LORAREG_InitGetAttrFnPtrsIN+0xb8>)
    a130:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    a132:	4a2b      	ldr	r2, [pc, #172]	; (a1e0 <LORAREG_InitGetAttrFnPtrsIN+0xbc>)
    a134:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a136:	4a2b      	ldr	r2, [pc, #172]	; (a1e4 <LORAREG_InitGetAttrFnPtrsIN+0xc0>)
    a138:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a13a:	4a2b      	ldr	r2, [pc, #172]	; (a1e8 <LORAREG_InitGetAttrFnPtrsIN+0xc4>)
    a13c:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a13e:	4a2b      	ldr	r2, [pc, #172]	; (a1ec <LORAREG_InitGetAttrFnPtrsIN+0xc8>)
    a140:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a142:	4a2b      	ldr	r2, [pc, #172]	; (a1f0 <LORAREG_InitGetAttrFnPtrsIN+0xcc>)
    a144:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a146:	4a2b      	ldr	r2, [pc, #172]	; (a1f4 <LORAREG_InitGetAttrFnPtrsIN+0xd0>)
    a148:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a14a:	4a2b      	ldr	r2, [pc, #172]	; (a1f8 <LORAREG_InitGetAttrFnPtrsIN+0xd4>)
    a14c:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a14e:	4a2b      	ldr	r2, [pc, #172]	; (a1fc <LORAREG_InitGetAttrFnPtrsIN+0xd8>)
    a150:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    a152:	4a2b      	ldr	r2, [pc, #172]	; (a200 <LORAREG_InitGetAttrFnPtrsIN+0xdc>)
    a154:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a156:	4a2b      	ldr	r2, [pc, #172]	; (a204 <LORAREG_InitGetAttrFnPtrsIN+0xe0>)
    a158:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a15a:	4a2b      	ldr	r2, [pc, #172]	; (a208 <LORAREG_InitGetAttrFnPtrsIN+0xe4>)
    a15c:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType3;
    a15e:	4a2b      	ldr	r2, [pc, #172]	; (a20c <LORAREG_InitGetAttrFnPtrsIN+0xe8>)
    a160:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a162:	492b      	ldr	r1, [pc, #172]	; (a210 <LORAREG_InitGetAttrFnPtrsIN+0xec>)
    a164:	2280      	movs	r2, #128	; 0x80
    a166:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    a168:	492a      	ldr	r1, [pc, #168]	; (a214 <LORAREG_InitGetAttrFnPtrsIN+0xf0>)
    a16a:	320c      	adds	r2, #12
    a16c:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    a16e:	492a      	ldr	r1, [pc, #168]	; (a218 <LORAREG_InitGetAttrFnPtrsIN+0xf4>)
    a170:	3204      	adds	r2, #4
    a172:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    a174:	4929      	ldr	r1, [pc, #164]	; (a21c <LORAREG_InitGetAttrFnPtrsIN+0xf8>)
    a176:	3204      	adds	r2, #4
    a178:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a17a:	4929      	ldr	r1, [pc, #164]	; (a220 <LORAREG_InitGetAttrFnPtrsIN+0xfc>)
    a17c:	3208      	adds	r2, #8
    a17e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a180:	4928      	ldr	r1, [pc, #160]	; (a224 <LORAREG_InitGetAttrFnPtrsIN+0x100>)
    a182:	3204      	adds	r2, #4
    a184:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a186:	4928      	ldr	r1, [pc, #160]	; (a228 <LORAREG_InitGetAttrFnPtrsIN+0x104>)
    a188:	3204      	adds	r2, #4
    a18a:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a18c:	4927      	ldr	r1, [pc, #156]	; (a22c <LORAREG_InitGetAttrFnPtrsIN+0x108>)
    a18e:	3204      	adds	r2, #4
    a190:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a192:	4927      	ldr	r1, [pc, #156]	; (a230 <LORAREG_InitGetAttrFnPtrsIN+0x10c>)
    a194:	3204      	adds	r2, #4
    a196:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a198:	4926      	ldr	r1, [pc, #152]	; (a234 <LORAREG_InitGetAttrFnPtrsIN+0x110>)
    a19a:	3204      	adds	r2, #4
    a19c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a19e:	4926      	ldr	r1, [pc, #152]	; (a238 <LORAREG_InitGetAttrFnPtrsIN+0x114>)
    a1a0:	3204      	adds	r2, #4
    a1a2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a1a4:	4925      	ldr	r1, [pc, #148]	; (a23c <LORAREG_InitGetAttrFnPtrsIN+0x118>)
    a1a6:	3204      	adds	r2, #4
    a1a8:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    a1aa:	4925      	ldr	r1, [pc, #148]	; (a240 <LORAREG_InitGetAttrFnPtrsIN+0x11c>)
    a1ac:	3204      	adds	r2, #4
    a1ae:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    a1b0:	4924      	ldr	r1, [pc, #144]	; (a244 <LORAREG_InitGetAttrFnPtrsIN+0x120>)
    a1b2:	3204      	adds	r2, #4
    a1b4:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a1b6:	4924      	ldr	r1, [pc, #144]	; (a248 <LORAREG_InitGetAttrFnPtrsIN+0x124>)
    a1b8:	3204      	adds	r2, #4
    a1ba:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    a1bc:	4923      	ldr	r1, [pc, #140]	; (a24c <LORAREG_InitGetAttrFnPtrsIN+0x128>)
    a1be:	320c      	adds	r2, #12
    a1c0:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a1c2:	4923      	ldr	r1, [pc, #140]	; (a250 <LORAREG_InitGetAttrFnPtrsIN+0x12c>)
    a1c4:	3208      	adds	r2, #8
    a1c6:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a1c8:	4922      	ldr	r1, [pc, #136]	; (a254 <LORAREG_InitGetAttrFnPtrsIN+0x130>)
    a1ca:	3204      	adds	r2, #4
    a1cc:	5099      	str	r1, [r3, r2]
}
    a1ce:	4770      	bx	lr
    a1d0:	20000ba4 	.word	0x20000ba4
    a1d4:	00007d19 	.word	0x00007d19
    a1d8:	0000949d 	.word	0x0000949d
    a1dc:	000094dd 	.word	0x000094dd
    a1e0:	00009519 	.word	0x00009519
    a1e4:	000069b5 	.word	0x000069b5
    a1e8:	000069c5 	.word	0x000069c5
    a1ec:	000069e1 	.word	0x000069e1
    a1f0:	000069f1 	.word	0x000069f1
    a1f4:	000079bd 	.word	0x000079bd
    a1f8:	00006a01 	.word	0x00006a01
    a1fc:	00006a11 	.word	0x00006a11
    a200:	00007c1d 	.word	0x00007c1d
    a204:	00006d21 	.word	0x00006d21
    a208:	00006a61 	.word	0x00006a61
    a20c:	00007e9d 	.word	0x00007e9d
    a210:	00007745 	.word	0x00007745
    a214:	00009551 	.word	0x00009551
    a218:	00009589 	.word	0x00009589
    a21c:	000095c1 	.word	0x000095c1
    a220:	00006ac1 	.word	0x00006ac1
    a224:	00006acb 	.word	0x00006acb
    a228:	00006ad5 	.word	0x00006ad5
    a22c:	00006ae1 	.word	0x00006ae1
    a230:	00006aed 	.word	0x00006aed
    a234:	00006af7 	.word	0x00006af7
    a238:	00006aff 	.word	0x00006aff
    a23c:	00006b07 	.word	0x00006b07
    a240:	00009631 	.word	0x00009631
    a244:	000085ad 	.word	0x000085ad
    a248:	00006b31 	.word	0x00006b31
    a24c:	000079d5 	.word	0x000079d5
    a250:	00006b11 	.word	0x00006b11
    a254:	00006b21 	.word	0x00006b21

0000a258 <LORAREG_InitGetAttrFnPtrsJP>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT3;
    a258:	4b2d      	ldr	r3, [pc, #180]	; (a310 <LORAREG_InitGetAttrFnPtrsJP+0xb8>)
    a25a:	4a2e      	ldr	r2, [pc, #184]	; (a314 <LORAREG_InitGetAttrFnPtrsJP+0xbc>)
    a25c:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    a25e:	4a2e      	ldr	r2, [pc, #184]	; (a318 <LORAREG_InitGetAttrFnPtrsJP+0xc0>)
    a260:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    a262:	4a2e      	ldr	r2, [pc, #184]	; (a31c <LORAREG_InitGetAttrFnPtrsJP+0xc4>)
    a264:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT3;
    a266:	4a2e      	ldr	r2, [pc, #184]	; (a320 <LORAREG_InitGetAttrFnPtrsJP+0xc8>)
    a268:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a26a:	4a2e      	ldr	r2, [pc, #184]	; (a324 <LORAREG_InitGetAttrFnPtrsJP+0xcc>)
    a26c:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a26e:	4a2e      	ldr	r2, [pc, #184]	; (a328 <LORAREG_InitGetAttrFnPtrsJP+0xd0>)
    a270:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a272:	4a2e      	ldr	r2, [pc, #184]	; (a32c <LORAREG_InitGetAttrFnPtrsJP+0xd4>)
    a274:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a276:	4a2e      	ldr	r2, [pc, #184]	; (a330 <LORAREG_InitGetAttrFnPtrsJP+0xd8>)
    a278:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a27a:	4a2e      	ldr	r2, [pc, #184]	; (a334 <LORAREG_InitGetAttrFnPtrsJP+0xdc>)
    a27c:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a27e:	4a2e      	ldr	r2, [pc, #184]	; (a338 <LORAREG_InitGetAttrFnPtrsJP+0xe0>)
    a280:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a282:	4a2e      	ldr	r2, [pc, #184]	; (a33c <LORAREG_InitGetAttrFnPtrsJP+0xe4>)
    a284:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    a286:	4a2e      	ldr	r2, [pc, #184]	; (a340 <LORAREG_InitGetAttrFnPtrsJP+0xe8>)
    a288:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a28a:	4a2e      	ldr	r2, [pc, #184]	; (a344 <LORAREG_InitGetAttrFnPtrsJP+0xec>)
    a28c:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a28e:	4a2e      	ldr	r2, [pc, #184]	; (a348 <LORAREG_InitGetAttrFnPtrsJP+0xf0>)
    a290:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType4;
    a292:	4a2e      	ldr	r2, [pc, #184]	; (a34c <LORAREG_InitGetAttrFnPtrsJP+0xf4>)
    a294:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]= LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a296:	492e      	ldr	r1, [pc, #184]	; (a350 <LORAREG_InitGetAttrFnPtrsJP+0xf8>)
    a298:	2280      	movs	r2, #128	; 0x80
    a29a:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    a29c:	492d      	ldr	r1, [pc, #180]	; (a354 <LORAREG_InitGetAttrFnPtrsJP+0xfc>)
    a29e:	320c      	adds	r2, #12
    a2a0:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    a2a2:	492d      	ldr	r1, [pc, #180]	; (a358 <LORAREG_InitGetAttrFnPtrsJP+0x100>)
    a2a4:	3204      	adds	r2, #4
    a2a6:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    a2a8:	492c      	ldr	r1, [pc, #176]	; (a35c <LORAREG_InitGetAttrFnPtrsJP+0x104>)
    a2aa:	3204      	adds	r2, #4
    a2ac:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a2ae:	492c      	ldr	r1, [pc, #176]	; (a360 <LORAREG_InitGetAttrFnPtrsJP+0x108>)
    a2b0:	3208      	adds	r2, #8
    a2b2:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a2b4:	492b      	ldr	r1, [pc, #172]	; (a364 <LORAREG_InitGetAttrFnPtrsJP+0x10c>)
    a2b6:	3204      	adds	r2, #4
    a2b8:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a2ba:	492b      	ldr	r1, [pc, #172]	; (a368 <LORAREG_InitGetAttrFnPtrsJP+0x110>)
    a2bc:	3204      	adds	r2, #4
    a2be:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a2c0:	492a      	ldr	r1, [pc, #168]	; (a36c <LORAREG_InitGetAttrFnPtrsJP+0x114>)
    a2c2:	3204      	adds	r2, #4
    a2c4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a2c6:	492a      	ldr	r1, [pc, #168]	; (a370 <LORAREG_InitGetAttrFnPtrsJP+0x118>)
    a2c8:	3204      	adds	r2, #4
    a2ca:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a2cc:	4929      	ldr	r1, [pc, #164]	; (a374 <LORAREG_InitGetAttrFnPtrsJP+0x11c>)
    a2ce:	3204      	adds	r2, #4
    a2d0:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a2d2:	4929      	ldr	r1, [pc, #164]	; (a378 <LORAREG_InitGetAttrFnPtrsJP+0x120>)
    a2d4:	3204      	adds	r2, #4
    a2d6:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a2d8:	4928      	ldr	r1, [pc, #160]	; (a37c <LORAREG_InitGetAttrFnPtrsJP+0x124>)
    a2da:	3204      	adds	r2, #4
    a2dc:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    a2de:	4928      	ldr	r1, [pc, #160]	; (a380 <LORAREG_InitGetAttrFnPtrsJP+0x128>)
    a2e0:	3204      	adds	r2, #4
    a2e2:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    a2e4:	4927      	ldr	r1, [pc, #156]	; (a384 <LORAREG_InitGetAttrFnPtrsJP+0x12c>)
    a2e6:	3204      	adds	r2, #4
    a2e8:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a2ea:	4927      	ldr	r1, [pc, #156]	; (a388 <LORAREG_InitGetAttrFnPtrsJP+0x130>)
    a2ec:	3204      	adds	r2, #4
    a2ee:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    a2f0:	4926      	ldr	r1, [pc, #152]	; (a38c <LORAREG_InitGetAttrFnPtrsJP+0x134>)
    a2f2:	3204      	adds	r2, #4
    a2f4:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    a2f6:	4926      	ldr	r1, [pc, #152]	; (a390 <LORAREG_InitGetAttrFnPtrsJP+0x138>)
    a2f8:	3204      	adds	r2, #4
    a2fa:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    a2fc:	4925      	ldr	r1, [pc, #148]	; (a394 <LORAREG_InitGetAttrFnPtrsJP+0x13c>)
    a2fe:	3204      	adds	r2, #4
    a300:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a302:	4925      	ldr	r1, [pc, #148]	; (a398 <LORAREG_InitGetAttrFnPtrsJP+0x140>)
    a304:	3208      	adds	r2, #8
    a306:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a308:	4924      	ldr	r1, [pc, #144]	; (a39c <LORAREG_InitGetAttrFnPtrsJP+0x144>)
    a30a:	3204      	adds	r2, #4
    a30c:	5099      	str	r1, [r3, r2]
}
    a30e:	4770      	bx	lr
    a310:	20000ba4 	.word	0x20000ba4
    a314:	00007e55 	.word	0x00007e55
    a318:	0000949d 	.word	0x0000949d
    a31c:	000094dd 	.word	0x000094dd
    a320:	00009439 	.word	0x00009439
    a324:	000069b5 	.word	0x000069b5
    a328:	000069c5 	.word	0x000069c5
    a32c:	000069e1 	.word	0x000069e1
    a330:	000069f1 	.word	0x000069f1
    a334:	000079bd 	.word	0x000079bd
    a338:	00006a01 	.word	0x00006a01
    a33c:	00006a11 	.word	0x00006a11
    a340:	00007c1d 	.word	0x00007c1d
    a344:	00006d21 	.word	0x00006d21
    a348:	00006a61 	.word	0x00006a61
    a34c:	00007d61 	.word	0x00007d61
    a350:	00007745 	.word	0x00007745
    a354:	00009551 	.word	0x00009551
    a358:	00009589 	.word	0x00009589
    a35c:	000095c1 	.word	0x000095c1
    a360:	00006ac1 	.word	0x00006ac1
    a364:	00006acb 	.word	0x00006acb
    a368:	00006ad5 	.word	0x00006ad5
    a36c:	00006ae1 	.word	0x00006ae1
    a370:	00006aed 	.word	0x00006aed
    a374:	00006af7 	.word	0x00006af7
    a378:	00006aff 	.word	0x00006aff
    a37c:	00006b07 	.word	0x00006b07
    a380:	00009631 	.word	0x00009631
    a384:	000085ad 	.word	0x000085ad
    a388:	00006b31 	.word	0x00006b31
    a38c:	00006b41 	.word	0x00006b41
    a390:	00007f25 	.word	0x00007f25
    a394:	000079d5 	.word	0x000079d5
    a398:	00006b11 	.word	0x00006b11
    a39c:	00006b21 	.word	0x00006b21

0000a3a0 <LORAREG_InitGetAttrFnPtrsKR>:
    pGetAttr[FREQUENCY] = LORAREG_GetAttr_FreqT2;
    a3a0:	4b2d      	ldr	r3, [pc, #180]	; (a458 <LORAREG_InitGetAttrFnPtrsKR+0xb8>)
    a3a2:	4a2e      	ldr	r2, [pc, #184]	; (a45c <LORAREG_InitGetAttrFnPtrsKR+0xbc>)
    a3a4:	601a      	str	r2, [r3, #0]
    pGetAttr[RX_WINDOW_SIZE] = LORAREG_GetAttr_RxWindowSizeT2;
    a3a6:	4a2e      	ldr	r2, [pc, #184]	; (a460 <LORAREG_InitGetAttrFnPtrsKR+0xc0>)
    a3a8:	60da      	str	r2, [r3, #12]
    pGetAttr[RX_WINDOW_OFFSET] = LORAREG_GetAttr_RxWindowOffsetT2;
    a3aa:	4a2e      	ldr	r2, [pc, #184]	; (a464 <LORAREG_InitGetAttrFnPtrsKR+0xc4>)
    a3ac:	611a      	str	r2, [r3, #16]
    pGetAttr[MAX_PAYLOAD_SIZE] = LORAREG_GetAttr_MaxPayloadT2;
    a3ae:	4a2e      	ldr	r2, [pc, #184]	; (a468 <LORAREG_InitGetAttrFnPtrsKR+0xc8>)
    a3b0:	615a      	str	r2, [r3, #20]
    pGetAttr[MAX_CHANNELS] = LORAREG_GetAttr_MaxChannel;
    a3b2:	4a2e      	ldr	r2, [pc, #184]	; (a46c <LORAREG_InitGetAttrFnPtrsKR+0xcc>)
    a3b4:	619a      	str	r2, [r3, #24]
    pGetAttr[MIN_NEW_CH_INDEX] = LORAREG_GetAttr_MinNewChIndex;
    a3b6:	4a2e      	ldr	r2, [pc, #184]	; (a470 <LORAREG_InitGetAttrFnPtrsKR+0xd0>)
    a3b8:	61da      	str	r2, [r3, #28]
    pGetAttr[DEFAULT_RX1_DATA_RATE] = LORAREG_GetAttr_DefRx1DataRate;
    a3ba:	4a2e      	ldr	r2, [pc, #184]	; (a474 <LORAREG_InitGetAttrFnPtrsKR+0xd4>)
    a3bc:	621a      	str	r2, [r3, #32]
    pGetAttr[DEFAULT_RX2_DATA_RATE] = LORAREG_GetAttr_DefRx2DataRate;
    a3be:	4a2e      	ldr	r2, [pc, #184]	; (a478 <LORAREG_InitGetAttrFnPtrsKR+0xd8>)
    a3c0:	625a      	str	r2, [r3, #36]	; 0x24
    pGetAttr[DEFAULT_RX2_FREQUENCY] = LORAREG_GetAttr_DefRx2Freq;
    a3c2:	4a2e      	ldr	r2, [pc, #184]	; (a47c <LORAREG_InitGetAttrFnPtrsKR+0xdc>)
    a3c4:	629a      	str	r2, [r3, #40]	; 0x28
    pGetAttr[SUPPORTED_REGIONAL_FEATURES] = LORAREG_GetAttr_RegFeatures;
    a3c6:	4a2e      	ldr	r2, [pc, #184]	; (a480 <LORAREG_InitGetAttrFnPtrsKR+0xe0>)
    a3c8:	639a      	str	r2, [r3, #56]	; 0x38
    pGetAttr[DATA_RANGE] = LORAREG_GetAttr_DataRange;
    a3ca:	4a2e      	ldr	r2, [pc, #184]	; (a484 <LORAREG_InitGetAttrFnPtrsKR+0xe4>)
    a3cc:	649a      	str	r2, [r3, #72]	; 0x48
    pGetAttr[DATA_RANGE_CH_BAND] = LORAREG_GetAttr_DRangeChBandT2;
    a3ce:	4a2e      	ldr	r2, [pc, #184]	; (a488 <LORAREG_InitGetAttrFnPtrsKR+0xe8>)
    a3d0:	64da      	str	r2, [r3, #76]	; 0x4c
    pGetAttr[MIN_MAX_DR] = LORAREG_GetAttr_MinMaxDr;
    a3d2:	4a2e      	ldr	r2, [pc, #184]	; (a48c <LORAREG_InitGetAttrFnPtrsKR+0xec>)
    a3d4:	651a      	str	r2, [r3, #80]	; 0x50
    pGetAttr[CHANNEL_ID_STATUS] = LORAREG_GetAttr_ChIdStatus;
    a3d6:	4a2e      	ldr	r2, [pc, #184]	; (a490 <LORAREG_InitGetAttrFnPtrsKR+0xf0>)
    a3d8:	659a      	str	r2, [r3, #88]	; 0x58
    pGetAttr[RX1_WINDOW_PARAMS] = LORAREG_GetAttr_Rx1WindowparamsType2;
    a3da:	4a2e      	ldr	r2, [pc, #184]	; (a494 <LORAREG_InitGetAttrFnPtrsKR+0xf4>)
    a3dc:	665a      	str	r2, [r3, #100]	; 0x64
	pGetAttr[JOIN_DUTY_CYCLE_TIMER]=LORAREG_GetAttr_JoinDutyCycleRemainingTime;
    a3de:	492e      	ldr	r1, [pc, #184]	; (a498 <LORAREG_InitGetAttrFnPtrsKR+0xf8>)
    a3e0:	2280      	movs	r2, #128	; 0x80
    a3e2:	5099      	str	r1, [r3, r2]
    pGetAttr[MODULATION_ATTR] = LORAREG_GetAttr_ModulationAttrT2;
    a3e4:	492d      	ldr	r1, [pc, #180]	; (a49c <LORAREG_InitGetAttrFnPtrsKR+0xfc>)
    a3e6:	320c      	adds	r2, #12
    a3e8:	5099      	str	r1, [r3, r2]
    pGetAttr[BANDWIDTH_ATTR] = LORAREG_GetAttr_BandwidthAttrT2;
    a3ea:	492d      	ldr	r1, [pc, #180]	; (a4a0 <LORAREG_InitGetAttrFnPtrsKR+0x100>)
    a3ec:	3204      	adds	r2, #4
    a3ee:	5099      	str	r1, [r3, r2]
    pGetAttr[SPREADING_FACTOR_ATTR] = LORAREG_GetAttr_SpreadFactorT2;
    a3f0:	492c      	ldr	r1, [pc, #176]	; (a4a4 <LORAREG_InitGetAttrFnPtrsKR+0x104>)
    a3f2:	3204      	adds	r2, #4
    a3f4:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY1] = LORAREG_GetAttr_MacRecvDelay1;
    a3f6:	492c      	ldr	r1, [pc, #176]	; (a4a8 <LORAREG_InitGetAttrFnPtrsKR+0x108>)
    a3f8:	3208      	adds	r2, #8
    a3fa:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_RECEIVE_DELAY2] = LORAREG_GetAttr_MacRecvDelay2;
    a3fc:	492b      	ldr	r1, [pc, #172]	; (a4ac <LORAREG_InitGetAttrFnPtrsKR+0x10c>)
    a3fe:	3204      	adds	r2, #4
    a400:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY1] = LORAREG_GetAttr_MacJoinAcptDelay1;
    a402:	492b      	ldr	r1, [pc, #172]	; (a4b0 <LORAREG_InitGetAttrFnPtrsKR+0x110>)
    a404:	3204      	adds	r2, #4
    a406:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_JOIN_ACCEPT_DELAY2] = LORAREG_GetAttr_MacJoinAcptDelay2;
    a408:	492a      	ldr	r1, [pc, #168]	; (a4b4 <LORAREG_InitGetAttrFnPtrsKR+0x114>)
    a40a:	3204      	adds	r2, #4
    a40c:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ACK_TIMEOUT] = LORAREG_GetAttr_MacAckTimeout;
    a40e:	492a      	ldr	r1, [pc, #168]	; (a4b8 <LORAREG_InitGetAttrFnPtrsKR+0x118>)
    a410:	3204      	adds	r2, #4
    a412:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_DELAY] = LORAREG_GetAttr_MacAdrAckDelay;
    a414:	4929      	ldr	r1, [pc, #164]	; (a4bc <LORAREG_InitGetAttrFnPtrsKR+0x11c>)
    a416:	3204      	adds	r2, #4
    a418:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_ADR_ACK_LIMIT] = LORAREG_GetAttr_MacAdrAckLimit;
    a41a:	4929      	ldr	r1, [pc, #164]	; (a4c0 <LORAREG_InitGetAttrFnPtrsKR+0x120>)
    a41c:	3204      	adds	r2, #4
    a41e:	5099      	str	r1, [r3, r2]
    pGetAttr[MAC_MAX_FCNT_GAP] = LORAREG_GetAttr_MacMaxFcntGap;
    a420:	4928      	ldr	r1, [pc, #160]	; (a4c4 <LORAREG_InitGetAttrFnPtrsKR+0x124>)
    a422:	3204      	adds	r2, #4
    a424:	5099      	str	r1, [r3, r2]
    pGetAttr[NEW_TX_CHANNEL_CONFIG] = LORAREG_GetAttr_NewTxChConfigT2;
    a426:	4928      	ldr	r1, [pc, #160]	; (a4c8 <LORAREG_InitGetAttrFnPtrsKR+0x128>)
    a428:	3204      	adds	r2, #4
    a42a:	5099      	str	r1, [r3, r2]
    pGetAttr[FREE_CHANNEL] = LORAREG_GetAttr_FreeChannel2;
    a42c:	4927      	ldr	r1, [pc, #156]	; (a4cc <LORAREG_InitGetAttrFnPtrsKR+0x12c>)
    a42e:	3204      	adds	r2, #4
    a430:	5099      	str	r1, [r3, r2]
    pGetAttr[CURRENT_CHANNEL_INDEX] = LORAREG_GetAttr_CurChIndx;
    a432:	4927      	ldr	r1, [pc, #156]	; (a4d0 <LORAREG_InitGetAttrFnPtrsKR+0x130>)
    a434:	3204      	adds	r2, #4
    a436:	5099      	str	r1, [r3, r2]
    pGetAttr[DEFAULT_LBT_PARAMS] = LORAREG_GetAttr_DefLBTParams;
    a438:	4926      	ldr	r1, [pc, #152]	; (a4d4 <LORAREG_InitGetAttrFnPtrsKR+0x134>)
    a43a:	3204      	adds	r2, #4
    a43c:	5099      	str	r1, [r3, r2]
    pGetAttr[MIN_LBT_CHANNEL_PAUSE_TIMER] = LORAREG_GetAttr_minLBTChPauseTimer;
    a43e:	4926      	ldr	r1, [pc, #152]	; (a4d8 <LORAREG_InitGetAttrFnPtrsKR+0x138>)
    a440:	3204      	adds	r2, #4
    a442:	5099      	str	r1, [r3, r2]
    pGetAttr[DL_FREQUENCY] = LORAREG_GetAttr_DlFrequency;
    a444:	4925      	ldr	r1, [pc, #148]	; (a4dc <LORAREG_InitGetAttrFnPtrsKR+0x13c>)
    a446:	3204      	adds	r2, #4
    a448:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_POWER] = LORAREG_GetAttr_RegDefTxPwr;
    a44a:	4925      	ldr	r1, [pc, #148]	; (a4e0 <LORAREG_InitGetAttrFnPtrsKR+0x140>)
    a44c:	3208      	adds	r2, #8
    a44e:	5099      	str	r1, [r3, r2]
    pGetAttr[REG_DEF_TX_DATARATE] = LORAREG_GetAttr_RegDefTxDR;
    a450:	4924      	ldr	r1, [pc, #144]	; (a4e4 <LORAREG_InitGetAttrFnPtrsKR+0x144>)
    a452:	3204      	adds	r2, #4
    a454:	5099      	str	r1, [r3, r2]
}
    a456:	4770      	bx	lr
    a458:	20000ba4 	.word	0x20000ba4
    a45c:	00007d19 	.word	0x00007d19
    a460:	0000949d 	.word	0x0000949d
    a464:	000094dd 	.word	0x000094dd
    a468:	00009519 	.word	0x00009519
    a46c:	000069b5 	.word	0x000069b5
    a470:	000069c5 	.word	0x000069c5
    a474:	000069e1 	.word	0x000069e1
    a478:	000069f1 	.word	0x000069f1
    a47c:	000079bd 	.word	0x000079bd
    a480:	00006a01 	.word	0x00006a01
    a484:	00006a11 	.word	0x00006a11
    a488:	00007c1d 	.word	0x00007c1d
    a48c:	00006d21 	.word	0x00006d21
    a490:	00006a61 	.word	0x00006a61
    a494:	00007bb1 	.word	0x00007bb1
    a498:	00007745 	.word	0x00007745
    a49c:	00009551 	.word	0x00009551
    a4a0:	00009589 	.word	0x00009589
    a4a4:	000095c1 	.word	0x000095c1
    a4a8:	00006ac1 	.word	0x00006ac1
    a4ac:	00006acb 	.word	0x00006acb
    a4b0:	00006ad5 	.word	0x00006ad5
    a4b4:	00006ae1 	.word	0x00006ae1
    a4b8:	00006aed 	.word	0x00006aed
    a4bc:	00006af7 	.word	0x00006af7
    a4c0:	00006aff 	.word	0x00006aff
    a4c4:	00006b07 	.word	0x00006b07
    a4c8:	00009631 	.word	0x00009631
    a4cc:	000085ad 	.word	0x000085ad
    a4d0:	00006b31 	.word	0x00006b31
    a4d4:	00006b41 	.word	0x00006b41
    a4d8:	00007f25 	.word	0x00007f25
    a4dc:	000079d5 	.word	0x000079d5
    a4e0:	00006b11 	.word	0x00006b11
    a4e4:	00006b21 	.word	0x00006b21

0000a4e8 <LORAREG_InitValidateAttrFnPtrsNA>:
    pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    a4e8:	4b0d      	ldr	r3, [pc, #52]	; (a520 <LORAREG_InitValidateAttrFnPtrsNA+0x38>)
    a4ea:	4a0e      	ldr	r2, [pc, #56]	; (a524 <LORAREG_InitValidateAttrFnPtrsNA+0x3c>)
    a4ec:	605a      	str	r2, [r3, #4]
    pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    a4ee:	4a0e      	ldr	r2, [pc, #56]	; (a528 <LORAREG_InitValidateAttrFnPtrsNA+0x40>)
    a4f0:	609a      	str	r2, [r3, #8]
    pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    a4f2:	4a0e      	ldr	r2, [pc, #56]	; (a52c <LORAREG_InitValidateAttrFnPtrsNA+0x44>)
    a4f4:	63da      	str	r2, [r3, #60]	; 0x3c
    pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    a4f6:	490e      	ldr	r1, [pc, #56]	; (a530 <LORAREG_InitValidateAttrFnPtrsNA+0x48>)
    a4f8:	6419      	str	r1, [r3, #64]	; 0x40
    pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a4fa:	490e      	ldr	r1, [pc, #56]	; (a534 <LORAREG_InitValidateAttrFnPtrsNA+0x4c>)
    a4fc:	6459      	str	r1, [r3, #68]	; 0x44
    pValidateAttr[DATA_RANGE] = ValidateDataRange;
    a4fe:	490e      	ldr	r1, [pc, #56]	; (a538 <LORAREG_InitValidateAttrFnPtrsNA+0x50>)
    a500:	6499      	str	r1, [r3, #72]	; 0x48
    pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    a502:	490e      	ldr	r1, [pc, #56]	; (a53c <LORAREG_InitValidateAttrFnPtrsNA+0x54>)
    a504:	6559      	str	r1, [r3, #84]	; 0x54
    pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    a506:	65da      	str	r2, [r3, #92]	; 0x5c
    pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a508:	4a0d      	ldr	r2, [pc, #52]	; (a540 <LORAREG_InitValidateAttrFnPtrsNA+0x58>)
    a50a:	661a      	str	r2, [r3, #96]	; 0x60
    pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    a50c:	4a0d      	ldr	r2, [pc, #52]	; (a544 <LORAREG_InitValidateAttrFnPtrsNA+0x5c>)
    a50e:	669a      	str	r2, [r3, #104]	; 0x68
    pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    a510:	4a0d      	ldr	r2, [pc, #52]	; (a548 <LORAREG_InitValidateAttrFnPtrsNA+0x60>)
    a512:	66da      	str	r2, [r3, #108]	; 0x6c
    pValidateAttr[TX_PWR] = ValidateTxPower;
    a514:	4a0d      	ldr	r2, [pc, #52]	; (a54c <LORAREG_InitValidateAttrFnPtrsNA+0x64>)
    a516:	675a      	str	r2, [r3, #116]	; 0x74
    pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    a518:	490d      	ldr	r1, [pc, #52]	; (a550 <LORAREG_InitValidateAttrFnPtrsNA+0x68>)
    a51a:	22e0      	movs	r2, #224	; 0xe0
    a51c:	5099      	str	r1, [r3, r2]
}
    a51e:	4770      	bx	lr
    a520:	20000d84 	.word	0x20000d84
    a524:	00006ef9 	.word	0x00006ef9
    a528:	000099c9 	.word	0x000099c9
    a52c:	00006c45 	.word	0x00006c45
    a530:	00006c01 	.word	0x00006c01
    a534:	00006e9d 	.word	0x00006e9d
    a538:	00009725 	.word	0x00009725
    a53c:	00006c95 	.word	0x00006c95
    a540:	00006f2d 	.word	0x00006f2d
    a544:	00006dc5 	.word	0x00006dc5
    a548:	00006d99 	.word	0x00006d99
    a54c:	00006dad 	.word	0x00006dad
    a550:	000095f9 	.word	0x000095f9

0000a554 <LORAREG_InitValidateAttrFnPtrsEU>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreq;
    a554:	4b0d      	ldr	r3, [pc, #52]	; (a58c <LORAREG_InitValidateAttrFnPtrsEU+0x38>)
    a556:	4a0e      	ldr	r2, [pc, #56]	; (a590 <LORAREG_InitValidateAttrFnPtrsEU+0x3c>)
    a558:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    a55a:	4a0e      	ldr	r2, [pc, #56]	; (a594 <LORAREG_InitValidateAttrFnPtrsEU+0x40>)
    a55c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    a55e:	4a0e      	ldr	r2, [pc, #56]	; (a598 <LORAREG_InitValidateAttrFnPtrsEU+0x44>)
    a560:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    a562:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a564:	490d      	ldr	r1, [pc, #52]	; (a59c <LORAREG_InitValidateAttrFnPtrsEU+0x48>)
    a566:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    a568:	490d      	ldr	r1, [pc, #52]	; (a5a0 <LORAREG_InitValidateAttrFnPtrsEU+0x4c>)
    a56a:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    a56c:	490d      	ldr	r1, [pc, #52]	; (a5a4 <LORAREG_InitValidateAttrFnPtrsEU+0x50>)
    a56e:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    a570:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a572:	4a0d      	ldr	r2, [pc, #52]	; (a5a8 <LORAREG_InitValidateAttrFnPtrsEU+0x54>)
    a574:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    a576:	4a0d      	ldr	r2, [pc, #52]	; (a5ac <LORAREG_InitValidateAttrFnPtrsEU+0x58>)
    a578:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    a57a:	4a0d      	ldr	r2, [pc, #52]	; (a5b0 <LORAREG_InitValidateAttrFnPtrsEU+0x5c>)
    a57c:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    a57e:	4a0d      	ldr	r2, [pc, #52]	; (a5b4 <LORAREG_InitValidateAttrFnPtrsEU+0x60>)
    a580:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    a582:	490d      	ldr	r1, [pc, #52]	; (a5b8 <LORAREG_InitValidateAttrFnPtrsEU+0x64>)
    a584:	22e0      	movs	r2, #224	; 0xe0
    a586:	5099      	str	r1, [r3, r2]
}
    a588:	4770      	bx	lr
    a58a:	46c0      	nop			; (mov r8, r8)
    a58c:	20000d84 	.word	0x20000d84
    a590:	00006fb5 	.word	0x00006fb5
    a594:	00007ff5 	.word	0x00007ff5
    a598:	00006e85 	.word	0x00006e85
    a59c:	00006e9d 	.word	0x00006e9d
    a5a0:	00009349 	.word	0x00009349
    a5a4:	00006cad 	.word	0x00006cad
    a5a8:	00006f2d 	.word	0x00006f2d
    a5ac:	00006dc9 	.word	0x00006dc9
    a5b0:	00006e1d 	.word	0x00006e1d
    a5b4:	00006dad 	.word	0x00006dad
    a5b8:	00006e31 	.word	0x00006e31

0000a5bc <LORAREG_InitValidateAttrFnPtrsAS>:
	pValidateAttr[RX_FREQUENCY] = ValidateFrequencyAS;
    a5bc:	4b0d      	ldr	r3, [pc, #52]	; (a5f4 <LORAREG_InitValidateAttrFnPtrsAS+0x38>)
    a5be:	4a0e      	ldr	r2, [pc, #56]	; (a5f8 <LORAREG_InitValidateAttrFnPtrsAS+0x3c>)
    a5c0:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    a5c2:	4a0e      	ldr	r2, [pc, #56]	; (a5fc <LORAREG_InitValidateAttrFnPtrsAS+0x40>)
    a5c4:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    a5c6:	4a0e      	ldr	r2, [pc, #56]	; (a600 <LORAREG_InitValidateAttrFnPtrsAS+0x44>)
    a5c8:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    a5ca:	490e      	ldr	r1, [pc, #56]	; (a604 <LORAREG_InitValidateAttrFnPtrsAS+0x48>)
    a5cc:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a5ce:	490e      	ldr	r1, [pc, #56]	; (a608 <LORAREG_InitValidateAttrFnPtrsAS+0x4c>)
    a5d0:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    a5d2:	490e      	ldr	r1, [pc, #56]	; (a60c <LORAREG_InitValidateAttrFnPtrsAS+0x50>)
    a5d4:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    a5d6:	490e      	ldr	r1, [pc, #56]	; (a610 <LORAREG_InitValidateAttrFnPtrsAS+0x54>)
    a5d8:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    a5da:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a5dc:	4a0d      	ldr	r2, [pc, #52]	; (a614 <LORAREG_InitValidateAttrFnPtrsAS+0x58>)
    a5de:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    a5e0:	4a0d      	ldr	r2, [pc, #52]	; (a618 <LORAREG_InitValidateAttrFnPtrsAS+0x5c>)
    a5e2:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    a5e4:	4a0d      	ldr	r2, [pc, #52]	; (a61c <LORAREG_InitValidateAttrFnPtrsAS+0x60>)
    a5e6:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    a5e8:	4a0d      	ldr	r2, [pc, #52]	; (a620 <LORAREG_InitValidateAttrFnPtrsAS+0x64>)
    a5ea:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    a5ec:	490d      	ldr	r1, [pc, #52]	; (a624 <LORAREG_InitValidateAttrFnPtrsAS+0x68>)
    a5ee:	22e0      	movs	r2, #224	; 0xe0
    a5f0:	5099      	str	r1, [r3, r2]
}
    a5f2:	4770      	bx	lr
    a5f4:	20000d84 	.word	0x20000d84
    a5f8:	00006fd1 	.word	0x00006fd1
    a5fc:	00007ff5 	.word	0x00007ff5
    a600:	00006c69 	.word	0x00006c69
    a604:	00006c19 	.word	0x00006c19
    a608:	00006e9d 	.word	0x00006e9d
    a60c:	00009349 	.word	0x00009349
    a610:	00006cad 	.word	0x00006cad
    a614:	00006f2d 	.word	0x00006f2d
    a618:	00006dc9 	.word	0x00006dc9
    a61c:	00006e1d 	.word	0x00006e1d
    a620:	00006dad 	.word	0x00006dad
    a624:	00006e31 	.word	0x00006e31

0000a628 <LORAREG_InitValidateAttrFnPtrsAU>:
	pValidateAttr[RX_FREQUENCY] = ValidateRxFreqT1;
    a628:	4b0d      	ldr	r3, [pc, #52]	; (a660 <LORAREG_InitValidateAttrFnPtrsAU+0x38>)
    a62a:	4a0e      	ldr	r2, [pc, #56]	; (a664 <LORAREG_InitValidateAttrFnPtrsAU+0x3c>)
    a62c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT1;
    a62e:	4a0e      	ldr	r2, [pc, #56]	; (a668 <LORAREG_InitValidateAttrFnPtrsAU+0x40>)
    a630:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT1;
    a632:	4a0e      	ldr	r2, [pc, #56]	; (a66c <LORAREG_InitValidateAttrFnPtrsAU+0x44>)
    a634:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT1;
    a636:	490e      	ldr	r1, [pc, #56]	; (a670 <LORAREG_InitValidateAttrFnPtrsAU+0x48>)
    a638:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a63a:	490e      	ldr	r1, [pc, #56]	; (a674 <LORAREG_InitValidateAttrFnPtrsAU+0x4c>)
    a63c:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRange;
    a63e:	490e      	ldr	r1, [pc, #56]	; (a678 <LORAREG_InitValidateAttrFnPtrsAU+0x50>)
    a640:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelId;
    a642:	490e      	ldr	r1, [pc, #56]	; (a67c <LORAREG_InitValidateAttrFnPtrsAU+0x54>)
    a644:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT1;
    a646:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a648:	4a0d      	ldr	r2, [pc, #52]	; (a680 <LORAREG_InitValidateAttrFnPtrsAU+0x58>)
    a64a:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMask;
    a64c:	4a0d      	ldr	r2, [pc, #52]	; (a684 <LORAREG_InitValidateAttrFnPtrsAU+0x5c>)
    a64e:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntl;
    a650:	4a0d      	ldr	r2, [pc, #52]	; (a688 <LORAREG_InitValidateAttrFnPtrsAU+0x60>)
    a652:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    a654:	4a0d      	ldr	r2, [pc, #52]	; (a68c <LORAREG_InitValidateAttrFnPtrsAU+0x64>)
    a656:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntl;
    a658:	490d      	ldr	r1, [pc, #52]	; (a690 <LORAREG_InitValidateAttrFnPtrsAU+0x68>)
    a65a:	22e0      	movs	r2, #224	; 0xe0
    a65c:	5099      	str	r1, [r3, r2]
}
    a65e:	4770      	bx	lr
    a660:	20000d84 	.word	0x20000d84
    a664:	00006ef9 	.word	0x00006ef9
    a668:	000099c9 	.word	0x000099c9
    a66c:	00006c45 	.word	0x00006c45
    a670:	00006c01 	.word	0x00006c01
    a674:	00006e9d 	.word	0x00006e9d
    a678:	00009725 	.word	0x00009725
    a67c:	00006c95 	.word	0x00006c95
    a680:	00006f2d 	.word	0x00006f2d
    a684:	00006dc5 	.word	0x00006dc5
    a688:	00006d99 	.word	0x00006d99
    a68c:	00006dad 	.word	0x00006dad
    a690:	000095f9 	.word	0x000095f9

0000a694 <LORAREG_InitValidateAttrFnPtrsIN>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqIN;
    a694:	4b0d      	ldr	r3, [pc, #52]	; (a6cc <LORAREG_InitValidateAttrFnPtrsIN+0x38>)
    a696:	4a0e      	ldr	r2, [pc, #56]	; (a6d0 <LORAREG_InitValidateAttrFnPtrsIN+0x3c>)
    a698:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    a69a:	4a0e      	ldr	r2, [pc, #56]	; (a6d4 <LORAREG_InitValidateAttrFnPtrsIN+0x40>)
    a69c:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    a69e:	4a0e      	ldr	r2, [pc, #56]	; (a6d8 <LORAREG_InitValidateAttrFnPtrsIN+0x44>)
    a6a0:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    a6a2:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a6a4:	490d      	ldr	r1, [pc, #52]	; (a6dc <LORAREG_InitValidateAttrFnPtrsIN+0x48>)
    a6a6:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    a6a8:	490d      	ldr	r1, [pc, #52]	; (a6e0 <LORAREG_InitValidateAttrFnPtrsIN+0x4c>)
    a6aa:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    a6ac:	490d      	ldr	r1, [pc, #52]	; (a6e4 <LORAREG_InitValidateAttrFnPtrsIN+0x50>)
    a6ae:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    a6b0:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a6b2:	4a0d      	ldr	r2, [pc, #52]	; (a6e8 <LORAREG_InitValidateAttrFnPtrsIN+0x54>)
    a6b4:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    a6b6:	4a0d      	ldr	r2, [pc, #52]	; (a6ec <LORAREG_InitValidateAttrFnPtrsIN+0x58>)
    a6b8:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    a6ba:	4a0d      	ldr	r2, [pc, #52]	; (a6f0 <LORAREG_InitValidateAttrFnPtrsIN+0x5c>)
    a6bc:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    a6be:	4a0d      	ldr	r2, [pc, #52]	; (a6f4 <LORAREG_InitValidateAttrFnPtrsIN+0x60>)
    a6c0:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    a6c2:	490d      	ldr	r1, [pc, #52]	; (a6f8 <LORAREG_InitValidateAttrFnPtrsIN+0x64>)
    a6c4:	22e0      	movs	r2, #224	; 0xe0
    a6c6:	5099      	str	r1, [r3, r2]
}
    a6c8:	4770      	bx	lr
    a6ca:	46c0      	nop			; (mov r8, r8)
    a6cc:	20000d84 	.word	0x20000d84
    a6d0:	00008019 	.word	0x00008019
    a6d4:	00007ff5 	.word	0x00007ff5
    a6d8:	00006e85 	.word	0x00006e85
    a6dc:	00006e9d 	.word	0x00006e9d
    a6e0:	00009349 	.word	0x00009349
    a6e4:	00006cad 	.word	0x00006cad
    a6e8:	00006f2d 	.word	0x00006f2d
    a6ec:	00006dc9 	.word	0x00006dc9
    a6f0:	00006e1d 	.word	0x00006e1d
    a6f4:	00006dad 	.word	0x00006dad
    a6f8:	00006e31 	.word	0x00006e31

0000a6fc <LORAREG_InitValidateAttrFnPtrsJP>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqJP;
    a6fc:	4b0d      	ldr	r3, [pc, #52]	; (a734 <LORAREG_InitValidateAttrFnPtrsJP+0x38>)
    a6fe:	4a0e      	ldr	r2, [pc, #56]	; (a738 <LORAREG_InitValidateAttrFnPtrsJP+0x3c>)
    a700:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    a702:	4a0e      	ldr	r2, [pc, #56]	; (a73c <LORAREG_InitValidateAttrFnPtrsJP+0x40>)
    a704:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRateRxT2;
    a706:	4a0e      	ldr	r2, [pc, #56]	; (a740 <LORAREG_InitValidateAttrFnPtrsJP+0x44>)
    a708:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRateTxT2;
    a70a:	490e      	ldr	r1, [pc, #56]	; (a744 <LORAREG_InitValidateAttrFnPtrsJP+0x48>)
    a70c:	6419      	str	r1, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a70e:	490e      	ldr	r1, [pc, #56]	; (a748 <LORAREG_InitValidateAttrFnPtrsJP+0x4c>)
    a710:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    a712:	490e      	ldr	r1, [pc, #56]	; (a74c <LORAREG_InitValidateAttrFnPtrsJP+0x50>)
    a714:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    a716:	490e      	ldr	r1, [pc, #56]	; (a750 <LORAREG_InitValidateAttrFnPtrsJP+0x54>)
    a718:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRateRxT2;
    a71a:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a71c:	4a0d      	ldr	r2, [pc, #52]	; (a754 <LORAREG_InitValidateAttrFnPtrsJP+0x58>)
    a71e:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    a720:	4a0d      	ldr	r2, [pc, #52]	; (a758 <LORAREG_InitValidateAttrFnPtrsJP+0x5c>)
    a722:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    a724:	4a0d      	ldr	r2, [pc, #52]	; (a75c <LORAREG_InitValidateAttrFnPtrsJP+0x60>)
    a726:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    a728:	4a0d      	ldr	r2, [pc, #52]	; (a760 <LORAREG_InitValidateAttrFnPtrsJP+0x64>)
    a72a:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    a72c:	490d      	ldr	r1, [pc, #52]	; (a764 <LORAREG_InitValidateAttrFnPtrsJP+0x68>)
    a72e:	22e0      	movs	r2, #224	; 0xe0
    a730:	5099      	str	r1, [r3, r2]
}
    a732:	4770      	bx	lr
    a734:	20000d84 	.word	0x20000d84
    a738:	00008049 	.word	0x00008049
    a73c:	00007ff5 	.word	0x00007ff5
    a740:	00006c69 	.word	0x00006c69
    a744:	00006c19 	.word	0x00006c19
    a748:	00006e9d 	.word	0x00006e9d
    a74c:	00009349 	.word	0x00009349
    a750:	00006cad 	.word	0x00006cad
    a754:	00006f2d 	.word	0x00006f2d
    a758:	00006dc9 	.word	0x00006dc9
    a75c:	00006e1d 	.word	0x00006e1d
    a760:	00006dad 	.word	0x00006dad
    a764:	00006e31 	.word	0x00006e31

0000a768 <LORAREG_InitValidateAttrFnPtrsKR>:
	pValidateAttr[RX_FREQUENCY] = ValidateFreqKR;
    a768:	4b0d      	ldr	r3, [pc, #52]	; (a7a0 <LORAREG_InitValidateAttrFnPtrsKR+0x38>)
    a76a:	4a0e      	ldr	r2, [pc, #56]	; (a7a4 <LORAREG_InitValidateAttrFnPtrsKR+0x3c>)
    a76c:	605a      	str	r2, [r3, #4]
	pValidateAttr[TX_FREQUENCY] = ValidateTxFreqT2;
    a76e:	4a0e      	ldr	r2, [pc, #56]	; (a7a8 <LORAREG_InitValidateAttrFnPtrsKR+0x40>)
    a770:	609a      	str	r2, [r3, #8]
	pValidateAttr[RX_DATARATE] = ValidateDataRate;
    a772:	4a0e      	ldr	r2, [pc, #56]	; (a7ac <LORAREG_InitValidateAttrFnPtrsKR+0x44>)
    a774:	63da      	str	r2, [r3, #60]	; 0x3c
	pValidateAttr[TX_DATARATE] = ValidateDataRate;
    a776:	641a      	str	r2, [r3, #64]	; 0x40
	pValidateAttr[SUPPORTED_DR] = ValidateSupportedDr;
    a778:	490d      	ldr	r1, [pc, #52]	; (a7b0 <LORAREG_InitValidateAttrFnPtrsKR+0x48>)
    a77a:	6459      	str	r1, [r3, #68]	; 0x44
	pValidateAttr[DATA_RANGE] = ValidateDataRangeT2;
    a77c:	490d      	ldr	r1, [pc, #52]	; (a7b4 <LORAREG_InitValidateAttrFnPtrsKR+0x4c>)
    a77e:	6499      	str	r1, [r3, #72]	; 0x48
	pValidateAttr[CHANNEL_ID] = ValidateChannelIdT2;
    a780:	490d      	ldr	r1, [pc, #52]	; (a7b8 <LORAREG_InitValidateAttrFnPtrsKR+0x50>)
    a782:	6559      	str	r1, [r3, #84]	; 0x54
	pValidateAttr[RX2_DATARATE] = ValidateDataRate;
    a784:	65da      	str	r2, [r3, #92]	; 0x5c
	pValidateAttr[RX1_DATARATE_OFFSET] = ValidateRx1DataRateOffset;
    a786:	4a0d      	ldr	r2, [pc, #52]	; (a7bc <LORAREG_InitValidateAttrFnPtrsKR+0x54>)
    a788:	661a      	str	r2, [r3, #96]	; 0x60
	pValidateAttr[CHANNEL_MASK] = ValidateChannelMaskT2;
    a78a:	4a0d      	ldr	r2, [pc, #52]	; (a7c0 <LORAREG_InitValidateAttrFnPtrsKR+0x58>)
    a78c:	669a      	str	r2, [r3, #104]	; 0x68
	pValidateAttr[CHANNEL_MASK_CNTL] = ValidateChannelMaskCntlT2;
    a78e:	4a0d      	ldr	r2, [pc, #52]	; (a7c4 <LORAREG_InitValidateAttrFnPtrsKR+0x5c>)
    a790:	66da      	str	r2, [r3, #108]	; 0x6c
	pValidateAttr[TX_PWR] = ValidateTxPower;
    a792:	4a0d      	ldr	r2, [pc, #52]	; (a7c8 <LORAREG_InitValidateAttrFnPtrsKR+0x60>)
    a794:	675a      	str	r2, [r3, #116]	; 0x74
	pValidateAttr[CHMASK_CHCNTL] = ValidateChMaskChCntlT2;
    a796:	490d      	ldr	r1, [pc, #52]	; (a7cc <LORAREG_InitValidateAttrFnPtrsKR+0x64>)
    a798:	22e0      	movs	r2, #224	; 0xe0
    a79a:	5099      	str	r1, [r3, r2]
}
    a79c:	4770      	bx	lr
    a79e:	46c0      	nop			; (mov r8, r8)
    a7a0:	20000d84 	.word	0x20000d84
    a7a4:	00008079 	.word	0x00008079
    a7a8:	00007ff5 	.word	0x00007ff5
    a7ac:	00006e85 	.word	0x00006e85
    a7b0:	00006e9d 	.word	0x00006e9d
    a7b4:	00009349 	.word	0x00009349
    a7b8:	00006cad 	.word	0x00006cad
    a7bc:	00006f2d 	.word	0x00006f2d
    a7c0:	00006dc9 	.word	0x00006dc9
    a7c4:	00006e1d 	.word	0x00006e1d
    a7c8:	00006dad 	.word	0x00006dad
    a7cc:	00006e31 	.word	0x00006e31

0000a7d0 <LORAREG_InitSetAttrFnPtrsNA>:
	pSetAttr[DATA_RANGE] = setDataRange;
    a7d0:	4b0b      	ldr	r3, [pc, #44]	; (a800 <LORAREG_InitSetAttrFnPtrsNA+0x30>)
    a7d2:	4a0c      	ldr	r2, [pc, #48]	; (a804 <LORAREG_InitSetAttrFnPtrsNA+0x34>)
    a7d4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    a7d6:	4a0c      	ldr	r2, [pc, #48]	; (a808 <LORAREG_InitSetAttrFnPtrsNA+0x38>)
    a7d8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    a7da:	4a0c      	ldr	r2, [pc, #48]	; (a80c <LORAREG_InitSetAttrFnPtrsNA+0x3c>)
    a7dc:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    a7de:	490c      	ldr	r1, [pc, #48]	; (a810 <LORAREG_InitSetAttrFnPtrsNA+0x40>)
    a7e0:	22e8      	movs	r2, #232	; 0xe8
    a7e2:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    a7e4:	490b      	ldr	r1, [pc, #44]	; (a814 <LORAREG_InitSetAttrFnPtrsNA+0x44>)
    a7e6:	3204      	adds	r2, #4
    a7e8:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    a7ea:	490b      	ldr	r1, [pc, #44]	; (a818 <LORAREG_InitSetAttrFnPtrsNA+0x48>)
    a7ec:	3a6c      	subs	r2, #108	; 0x6c
    a7ee:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    a7f0:	490a      	ldr	r1, [pc, #40]	; (a81c <LORAREG_InitSetAttrFnPtrsNA+0x4c>)
    a7f2:	3204      	adds	r2, #4
    a7f4:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    a7f6:	490a      	ldr	r1, [pc, #40]	; (a820 <LORAREG_InitSetAttrFnPtrsNA+0x50>)
    a7f8:	3260      	adds	r2, #96	; 0x60
    a7fa:	5099      	str	r1, [r3, r2]
}
    a7fc:	4770      	bx	lr
    a7fe:	46c0      	nop			; (mov r8, r8)
    a800:	20000c94 	.word	0x20000c94
    a804:	0000978d 	.word	0x0000978d
    a808:	00009701 	.word	0x00009701
    a80c:	000080c1 	.word	0x000080c1
    a810:	0000733d 	.word	0x0000733d
    a814:	000072cd 	.word	0x000072cd
    a818:	00008705 	.word	0x00008705
    a81c:	00008691 	.word	0x00008691
    a820:	000085d9 	.word	0x000085d9

0000a824 <LORAREG_InitSetAttrFnPtrsEU>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    a824:	4b0c      	ldr	r3, [pc, #48]	; (a858 <LORAREG_InitSetAttrFnPtrsEU+0x34>)
    a826:	4a0d      	ldr	r2, [pc, #52]	; (a85c <LORAREG_InitSetAttrFnPtrsEU+0x38>)
    a828:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    a82a:	4a0d      	ldr	r2, [pc, #52]	; (a860 <LORAREG_InitSetAttrFnPtrsEU+0x3c>)
    a82c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    a82e:	4a0d      	ldr	r2, [pc, #52]	; (a864 <LORAREG_InitSetAttrFnPtrsEU+0x40>)
    a830:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    a832:	4a0d      	ldr	r2, [pc, #52]	; (a868 <LORAREG_InitSetAttrFnPtrsEU+0x44>)
    a834:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[FREQUENCY] = setFrequency;
    a836:	4a0d      	ldr	r2, [pc, #52]	; (a86c <LORAREG_InitSetAttrFnPtrsEU+0x48>)
    a838:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    a83a:	4a0d      	ldr	r2, [pc, #52]	; (a870 <LORAREG_InitSetAttrFnPtrsEU+0x4c>)
    a83c:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    a83e:	490d      	ldr	r1, [pc, #52]	; (a874 <LORAREG_InitSetAttrFnPtrsEU+0x50>)
    a840:	2280      	movs	r2, #128	; 0x80
    a842:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    a844:	490c      	ldr	r1, [pc, #48]	; (a878 <LORAREG_InitSetAttrFnPtrsEU+0x54>)
    a846:	3204      	adds	r2, #4
    a848:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    a84a:	490c      	ldr	r1, [pc, #48]	; (a87c <LORAREG_InitSetAttrFnPtrsEU+0x58>)
    a84c:	324c      	adds	r2, #76	; 0x4c
    a84e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    a850:	490b      	ldr	r1, [pc, #44]	; (a880 <LORAREG_InitSetAttrFnPtrsEU+0x5c>)
    a852:	3214      	adds	r2, #20
    a854:	5099      	str	r1, [r3, r2]
}
    a856:	4770      	bx	lr
    a858:	20000c94 	.word	0x20000c94
    a85c:	00009375 	.word	0x00009375
    a860:	00007579 	.word	0x00007579
    a864:	00008321 	.word	0x00008321
    a868:	00008991 	.word	0x00008991
    a86c:	000081fd 	.word	0x000081fd
    a870:	0000aaa9 	.word	0x0000aaa9
    a874:	00008705 	.word	0x00008705
    a878:	00008691 	.word	0x00008691
    a87c:	00008159 	.word	0x00008159
    a880:	000085d9 	.word	0x000085d9

0000a884 <LORAREG_InitSetAttrFnPtrsAS>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    a884:	4b0e      	ldr	r3, [pc, #56]	; (a8c0 <LORAREG_InitSetAttrFnPtrsAS+0x3c>)
    a886:	4a0f      	ldr	r2, [pc, #60]	; (a8c4 <LORAREG_InitSetAttrFnPtrsAS+0x40>)
    a888:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    a88a:	4a0f      	ldr	r2, [pc, #60]	; (a8c8 <LORAREG_InitSetAttrFnPtrsAS+0x44>)
    a88c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    a88e:	4a0f      	ldr	r2, [pc, #60]	; (a8cc <LORAREG_InitSetAttrFnPtrsAS+0x48>)
    a890:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    a892:	490f      	ldr	r1, [pc, #60]	; (a8d0 <LORAREG_InitSetAttrFnPtrsAS+0x4c>)
    a894:	22d0      	movs	r2, #208	; 0xd0
    a896:	5099      	str	r1, [r3, r2]
    pSetAttr[NEW_CHANNELS] = setNewChannel;
    a898:	4a0e      	ldr	r2, [pc, #56]	; (a8d4 <LORAREG_InitSetAttrFnPtrsAS+0x50>)
    a89a:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER] = setJoinDutyCycleTimer;
    a89c:	490e      	ldr	r1, [pc, #56]	; (a8d8 <LORAREG_InitSetAttrFnPtrsAS+0x54>)
    a89e:	2280      	movs	r2, #128	; 0x80
    a8a0:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    a8a2:	490e      	ldr	r1, [pc, #56]	; (a8dc <LORAREG_InitSetAttrFnPtrsAS+0x58>)
    a8a4:	3204      	adds	r2, #4
    a8a6:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    a8a8:	490d      	ldr	r1, [pc, #52]	; (a8e0 <LORAREG_InitSetAttrFnPtrsAS+0x5c>)
    a8aa:	3250      	adds	r2, #80	; 0x50
    a8ac:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = setDutyCycle;
    a8ae:	4a0d      	ldr	r2, [pc, #52]	; (a8e4 <LORAREG_InitSetAttrFnPtrsAS+0x60>)
    a8b0:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = setDutyCycleTimer;
    a8b2:	4a0d      	ldr	r2, [pc, #52]	; (a8e8 <LORAREG_InitSetAttrFnPtrsAS+0x64>)
    a8b4:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    a8b6:	490d      	ldr	r1, [pc, #52]	; (a8ec <LORAREG_InitSetAttrFnPtrsAS+0x68>)
    a8b8:	22e4      	movs	r2, #228	; 0xe4
    a8ba:	5099      	str	r1, [r3, r2]
}
    a8bc:	4770      	bx	lr
    a8be:	46c0      	nop			; (mov r8, r8)
    a8c0:	20000c94 	.word	0x20000c94
    a8c4:	00009375 	.word	0x00009375
    a8c8:	000076f1 	.word	0x000076f1
    a8cc:	000081fd 	.word	0x000081fd
    a8d0:	00008159 	.word	0x00008159
    a8d4:	0000aaa9 	.word	0x0000aaa9
    a8d8:	00008705 	.word	0x00008705
    a8dc:	00008691 	.word	0x00008691
    a8e0:	00007061 	.word	0x00007061
    a8e4:	00008321 	.word	0x00008321
    a8e8:	00008991 	.word	0x00008991
    a8ec:	000085d9 	.word	0x000085d9

0000a8f0 <LORAREG_InitSetAttrFnPtrsAU>:
	pSetAttr[DATA_RANGE] = setDataRange;
    a8f0:	4b0b      	ldr	r3, [pc, #44]	; (a920 <LORAREG_InitSetAttrFnPtrsAU+0x30>)
    a8f2:	4a0c      	ldr	r2, [pc, #48]	; (a924 <LORAREG_InitSetAttrFnPtrsAU+0x34>)
    a8f4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatus;
    a8f6:	4a0c      	ldr	r2, [pc, #48]	; (a928 <LORAREG_InitSetAttrFnPtrsAU+0x38>)
    a8f8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[NEW_CHANNELS] = setNewChannelsT1;
    a8fa:	4a0c      	ldr	r2, [pc, #48]	; (a92c <LORAREG_InitSetAttrFnPtrsAU+0x3c>)
    a8fc:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[REG_JOIN_SUCCESS] = setJoinSuccess;
    a8fe:	490c      	ldr	r1, [pc, #48]	; (a930 <LORAREG_InitSetAttrFnPtrsAU+0x40>)
    a900:	22e8      	movs	r2, #232	; 0xe8
    a902:	5099      	str	r1, [r3, r2]
	pSetAttr[REG_JOIN_ENABLE_ALL] = setEnableAllChs;
    a904:	490b      	ldr	r1, [pc, #44]	; (a934 <LORAREG_InitSetAttrFnPtrsAU+0x44>)
    a906:	3204      	adds	r2, #4
    a908:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    a90a:	490b      	ldr	r1, [pc, #44]	; (a938 <LORAREG_InitSetAttrFnPtrsAU+0x48>)
    a90c:	3a6c      	subs	r2, #108	; 0x6c
    a90e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    a910:	490a      	ldr	r1, [pc, #40]	; (a93c <LORAREG_InitSetAttrFnPtrsAU+0x4c>)
    a912:	3204      	adds	r2, #4
    a914:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    a916:	490a      	ldr	r1, [pc, #40]	; (a940 <LORAREG_InitSetAttrFnPtrsAU+0x50>)
    a918:	3260      	adds	r2, #96	; 0x60
    a91a:	5099      	str	r1, [r3, r2]
}
    a91c:	4770      	bx	lr
    a91e:	46c0      	nop			; (mov r8, r8)
    a920:	20000c94 	.word	0x20000c94
    a924:	0000978d 	.word	0x0000978d
    a928:	00009701 	.word	0x00009701
    a92c:	000080c1 	.word	0x000080c1
    a930:	0000733d 	.word	0x0000733d
    a934:	000072cd 	.word	0x000072cd
    a938:	00008705 	.word	0x00008705
    a93c:	00008691 	.word	0x00008691
    a940:	000085d9 	.word	0x000085d9

0000a944 <LORAREG_InitSetAttrFnPtrsIN>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    a944:	4b0c      	ldr	r3, [pc, #48]	; (a978 <LORAREG_InitSetAttrFnPtrsIN+0x34>)
    a946:	4a0d      	ldr	r2, [pc, #52]	; (a97c <LORAREG_InitSetAttrFnPtrsIN+0x38>)
    a948:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT2;
    a94a:	4a0d      	ldr	r2, [pc, #52]	; (a980 <LORAREG_InitSetAttrFnPtrsIN+0x3c>)
    a94c:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[FREQUENCY] = setFrequency;
    a94e:	4a0d      	ldr	r2, [pc, #52]	; (a984 <LORAREG_InitSetAttrFnPtrsIN+0x40>)
    a950:	601a      	str	r2, [r3, #0]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    a952:	4a0d      	ldr	r2, [pc, #52]	; (a988 <LORAREG_InitSetAttrFnPtrsIN+0x44>)
    a954:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    a956:	490d      	ldr	r1, [pc, #52]	; (a98c <LORAREG_InitSetAttrFnPtrsIN+0x48>)
    a958:	2280      	movs	r2, #128	; 0x80
    a95a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    a95c:	490c      	ldr	r1, [pc, #48]	; (a990 <LORAREG_InitSetAttrFnPtrsIN+0x4c>)
    a95e:	3204      	adds	r2, #4
    a960:	5099      	str	r1, [r3, r2]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    a962:	490c      	ldr	r1, [pc, #48]	; (a994 <LORAREG_InitSetAttrFnPtrsIN+0x50>)
    a964:	324c      	adds	r2, #76	; 0x4c
    a966:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    a968:	490b      	ldr	r1, [pc, #44]	; (a998 <LORAREG_InitSetAttrFnPtrsIN+0x54>)
    a96a:	3204      	adds	r2, #4
    a96c:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    a96e:	490b      	ldr	r1, [pc, #44]	; (a99c <LORAREG_InitSetAttrFnPtrsIN+0x58>)
    a970:	3210      	adds	r2, #16
    a972:	5099      	str	r1, [r3, r2]
}
    a974:	4770      	bx	lr
    a976:	46c0      	nop			; (mov r8, r8)
    a978:	20000c94 	.word	0x20000c94
    a97c:	00009375 	.word	0x00009375
    a980:	00007579 	.word	0x00007579
    a984:	000081fd 	.word	0x000081fd
    a988:	0000aaa9 	.word	0x0000aaa9
    a98c:	00008705 	.word	0x00008705
    a990:	00008691 	.word	0x00008691
    a994:	00008159 	.word	0x00008159
    a998:	00007061 	.word	0x00007061
    a99c:	000085d9 	.word	0x000085d9

0000a9a0 <LORAREG_InitSetAttrFnPtrsJP>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    a9a0:	4b0f      	ldr	r3, [pc, #60]	; (a9e0 <LORAREG_InitSetAttrFnPtrsJP+0x40>)
    a9a2:	4a10      	ldr	r2, [pc, #64]	; (a9e4 <LORAREG_InitSetAttrFnPtrsJP+0x44>)
    a9a4:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    a9a6:	4a10      	ldr	r2, [pc, #64]	; (a9e8 <LORAREG_InitSetAttrFnPtrsJP+0x48>)
    a9a8:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    a9aa:	4910      	ldr	r1, [pc, #64]	; (a9ec <LORAREG_InitSetAttrFnPtrsJP+0x4c>)
    a9ac:	2288      	movs	r2, #136	; 0x88
    a9ae:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    a9b0:	4a0f      	ldr	r2, [pc, #60]	; (a9f0 <LORAREG_InitSetAttrFnPtrsJP+0x50>)
    a9b2:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    a9b4:	490f      	ldr	r1, [pc, #60]	; (a9f4 <LORAREG_InitSetAttrFnPtrsJP+0x54>)
    a9b6:	22d0      	movs	r2, #208	; 0xd0
    a9b8:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    a9ba:	4a0f      	ldr	r2, [pc, #60]	; (a9f8 <LORAREG_InitSetAttrFnPtrsJP+0x58>)
    a9bc:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    a9be:	490f      	ldr	r1, [pc, #60]	; (a9fc <LORAREG_InitSetAttrFnPtrsJP+0x5c>)
    a9c0:	2280      	movs	r2, #128	; 0x80
    a9c2:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    a9c4:	490e      	ldr	r1, [pc, #56]	; (aa00 <LORAREG_InitSetAttrFnPtrsJP+0x60>)
    a9c6:	3204      	adds	r2, #4
    a9c8:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    a9ca:	490e      	ldr	r1, [pc, #56]	; (aa04 <LORAREG_InitSetAttrFnPtrsJP+0x64>)
    a9cc:	3250      	adds	r2, #80	; 0x50
    a9ce:	5099      	str	r1, [r3, r2]
	pSetAttr[DUTY_CYCLE] = NULL;
    a9d0:	2200      	movs	r2, #0
    a9d2:	679a      	str	r2, [r3, #120]	; 0x78
	pSetAttr[DUTY_CYCLE_TIMER] = NULL;
    a9d4:	67da      	str	r2, [r3, #124]	; 0x7c
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    a9d6:	490c      	ldr	r1, [pc, #48]	; (aa08 <LORAREG_InitSetAttrFnPtrsJP+0x68>)
    a9d8:	32e4      	adds	r2, #228	; 0xe4
    a9da:	5099      	str	r1, [r3, r2]
}
    a9dc:	4770      	bx	lr
    a9de:	46c0      	nop			; (mov r8, r8)
    a9e0:	20000c94 	.word	0x20000c94
    a9e4:	00009375 	.word	0x00009375
    a9e8:	000076f1 	.word	0x000076f1
    a9ec:	00008ef5 	.word	0x00008ef5
    a9f0:	000081fd 	.word	0x000081fd
    a9f4:	00008159 	.word	0x00008159
    a9f8:	0000aaa9 	.word	0x0000aaa9
    a9fc:	00008705 	.word	0x00008705
    aa00:	00008691 	.word	0x00008691
    aa04:	00007061 	.word	0x00007061
    aa08:	000085d9 	.word	0x000085d9

0000aa0c <LORAREG_InitSetAttrFnPtrsKR>:
	pSetAttr[DATA_RANGE] = setDataRangeT2;
    aa0c:	4b0d      	ldr	r3, [pc, #52]	; (aa44 <LORAREG_InitSetAttrFnPtrsKR+0x38>)
    aa0e:	4a0e      	ldr	r2, [pc, #56]	; (aa48 <LORAREG_InitSetAttrFnPtrsKR+0x3c>)
    aa10:	649a      	str	r2, [r3, #72]	; 0x48
	pSetAttr[CHANNEL_ID_STATUS] = setChannelIdStatusT3;
    aa12:	4a0e      	ldr	r2, [pc, #56]	; (aa4c <LORAREG_InitSetAttrFnPtrsKR+0x40>)
    aa14:	659a      	str	r2, [r3, #88]	; 0x58
	pSetAttr[LBT_TIMER] = setLBTTimer;
    aa16:	490e      	ldr	r1, [pc, #56]	; (aa50 <LORAREG_InitSetAttrFnPtrsKR+0x44>)
    aa18:	2288      	movs	r2, #136	; 0x88
    aa1a:	5099      	str	r1, [r3, r2]
	pSetAttr[FREQUENCY] = setFrequency;
    aa1c:	4a0d      	ldr	r2, [pc, #52]	; (aa54 <LORAREG_InitSetAttrFnPtrsKR+0x48>)
    aa1e:	601a      	str	r2, [r3, #0]
	pSetAttr[DL_FREQUENCY] = setDlFrequency;
    aa20:	490d      	ldr	r1, [pc, #52]	; (aa58 <LORAREG_InitSetAttrFnPtrsKR+0x4c>)
    aa22:	22d0      	movs	r2, #208	; 0xd0
    aa24:	5099      	str	r1, [r3, r2]
	pSetAttr[NEW_CHANNELS] = setNewChannel;
    aa26:	4a0d      	ldr	r2, [pc, #52]	; (aa5c <LORAREG_InitSetAttrFnPtrsKR+0x50>)
    aa28:	671a      	str	r2, [r3, #112]	; 0x70
	pSetAttr[JOIN_DUTY_CYCLE_TIMER]= setJoinDutyCycleTimer;
    aa2a:	490d      	ldr	r1, [pc, #52]	; (aa60 <LORAREG_InitSetAttrFnPtrsKR+0x54>)
    aa2c:	2280      	movs	r2, #128	; 0x80
    aa2e:	5099      	str	r1, [r3, r2]
	pSetAttr[JOIN_BACK_OFF_TIMER] = setJoinBackOffTimer;
    aa30:	490c      	ldr	r1, [pc, #48]	; (aa64 <LORAREG_InitSetAttrFnPtrsKR+0x58>)
    aa32:	3204      	adds	r2, #4
    aa34:	5099      	str	r1, [r3, r2]
	pSetAttr[TX_PARAMS] = setTxParams;
    aa36:	490c      	ldr	r1, [pc, #48]	; (aa68 <LORAREG_InitSetAttrFnPtrsKR+0x5c>)
    aa38:	3250      	adds	r2, #80	; 0x50
    aa3a:	5099      	str	r1, [r3, r2]
	pSetAttr[JOINBACKOFF_CNTL] = setJoinBackoffCntl;
    aa3c:	490b      	ldr	r1, [pc, #44]	; (aa6c <LORAREG_InitSetAttrFnPtrsKR+0x60>)
    aa3e:	3210      	adds	r2, #16
    aa40:	5099      	str	r1, [r3, r2]
}
    aa42:	4770      	bx	lr
    aa44:	20000c94 	.word	0x20000c94
    aa48:	00009375 	.word	0x00009375
    aa4c:	000076f1 	.word	0x000076f1
    aa50:	00008ef5 	.word	0x00008ef5
    aa54:	000081fd 	.word	0x000081fd
    aa58:	00008159 	.word	0x00008159
    aa5c:	0000aaa9 	.word	0x0000aaa9
    aa60:	00008705 	.word	0x00008705
    aa64:	00008691 	.word	0x00008691
    aa68:	00007061 	.word	0x00007061
    aa6c:	000085d9 	.word	0x000085d9

0000aa70 <LORAREG_GetAttr>:
{
    aa70:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    aa72:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    aa74:	283b      	cmp	r0, #59	; 0x3b
    aa76:	d901      	bls.n	aa7c <LORAREG_GetAttr+0xc>
}
    aa78:	0018      	movs	r0, r3
    aa7a:	bd10      	pop	{r4, pc}
	    result = pGetAttr[attrType](attrType, attrInput,attrOutput);	
    aa7c:	0084      	lsls	r4, r0, #2
    aa7e:	4b02      	ldr	r3, [pc, #8]	; (aa88 <LORAREG_GetAttr+0x18>)
    aa80:	58e3      	ldr	r3, [r4, r3]
    aa82:	4798      	blx	r3
    aa84:	0003      	movs	r3, r0
    aa86:	e7f7      	b.n	aa78 <LORAREG_GetAttr+0x8>
    aa88:	20000ba4 	.word	0x20000ba4

0000aa8c <LORAREG_ValidateAttr>:
{
    aa8c:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    aa8e:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    aa90:	283b      	cmp	r0, #59	; 0x3b
    aa92:	d901      	bls.n	aa98 <LORAREG_ValidateAttr+0xc>
}
    aa94:	0018      	movs	r0, r3
    aa96:	bd10      	pop	{r4, pc}
	    result = pValidateAttr[attrType](attrType, attrInput);		
    aa98:	0082      	lsls	r2, r0, #2
    aa9a:	4b02      	ldr	r3, [pc, #8]	; (aaa4 <LORAREG_ValidateAttr+0x18>)
    aa9c:	58d3      	ldr	r3, [r2, r3]
    aa9e:	4798      	blx	r3
    aaa0:	0003      	movs	r3, r0
    aaa2:	e7f7      	b.n	aa94 <LORAREG_ValidateAttr+0x8>
    aaa4:	20000d84 	.word	0x20000d84

0000aaa8 <setNewChannel>:
{
    aaa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    aaaa:	46d6      	mov	lr, sl
    aaac:	464f      	mov	r7, r9
    aaae:	b580      	push	{r7, lr}
    aab0:	b085      	sub	sp, #20
	if(((ISM_ASBAND) & (1 << RegParams.band)) != 0 || ((ISM_JPN923) == RegParams.band))
    aab2:	232e      	movs	r3, #46	; 0x2e
    aab4:	4a30      	ldr	r2, [pc, #192]	; (ab78 <setNewChannel+0xd0>)
    aab6:	5cd2      	ldrb	r2, [r2, r3]
    aab8:	4b30      	ldr	r3, [pc, #192]	; (ab7c <setNewChannel+0xd4>)
    aaba:	4113      	asrs	r3, r2
    aabc:	07db      	lsls	r3, r3, #31
    aabe:	d407      	bmi.n	aad0 <setNewChannel+0x28>
    aac0:	2a05      	cmp	r2, #5
    aac2:	d020      	beq.n	ab06 <setNewChannel+0x5e>
	else if( ISM_KR920 == RegParams.band)
    aac4:	2a04      	cmp	r2, #4
    aac6:	d020      	beq.n	ab0a <setNewChannel+0x62>
	else if( ISM_IND865 == RegParams.band)
    aac8:	2a0f      	cmp	r2, #15
    aaca:	d020      	beq.n	ab0e <setNewChannel+0x66>
		pUpdateChidStatus = UpdateChannelIdStatusT2;
    aacc:	4e2c      	ldr	r6, [pc, #176]	; (ab80 <setNewChannel+0xd8>)
    aace:	e000      	b.n	aad2 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    aad0:	4e2c      	ldr	r6, [pc, #176]	; (ab84 <setNewChannel+0xdc>)
	memcpy(&newCh, attrInput,sizeof(UpdateNewCh_t));
    aad2:	ac03      	add	r4, sp, #12
    aad4:	2204      	movs	r2, #4
    aad6:	0020      	movs	r0, r4
    aad8:	4b2b      	ldr	r3, [pc, #172]	; (ab88 <setNewChannel+0xe0>)
    aada:	4798      	blx	r3
	valchMaskCntl.chnlMask = newCh.channelMask;
    aadc:	8823      	ldrh	r3, [r4, #0]
    aade:	aa02      	add	r2, sp, #8
    aae0:	8053      	strh	r3, [r2, #2]
	valchMaskCntl.chnlMaskCntl = newCh.channelMaskCntl;
    aae2:	78a4      	ldrb	r4, [r4, #2]
    aae4:	7014      	strb	r4, [r2, #0]
	if(LORAREG_ValidateAttr(CHMASK_CHCNTL,&valchMaskCntl) != LORAWAN_SUCCESS)
    aae6:	0011      	movs	r1, r2
    aae8:	2038      	movs	r0, #56	; 0x38
    aaea:	4b28      	ldr	r3, [pc, #160]	; (ab8c <setNewChannel+0xe4>)
    aaec:	4798      	blx	r3
    aaee:	0003      	movs	r3, r0
    aaf0:	9001      	str	r0, [sp, #4]
    aaf2:	2808      	cmp	r0, #8
    aaf4:	d00d      	beq.n	ab12 <setNewChannel+0x6a>
		result = LORAWAN_INVALID_PARAMETER;
    aaf6:	230a      	movs	r3, #10
    aaf8:	9301      	str	r3, [sp, #4]
}
    aafa:	9801      	ldr	r0, [sp, #4]
    aafc:	b005      	add	sp, #20
    aafe:	bc0c      	pop	{r2, r3}
    ab00:	4691      	mov	r9, r2
    ab02:	469a      	mov	sl, r3
    ab04:	bdf0      	pop	{r4, r5, r6, r7, pc}
		pUpdateChidStatus = UpdateChannelIdStatusT3;
    ab06:	4e1f      	ldr	r6, [pc, #124]	; (ab84 <setNewChannel+0xdc>)
    ab08:	e7e3      	b.n	aad2 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatusT4;
    ab0a:	4e21      	ldr	r6, [pc, #132]	; (ab90 <setNewChannel+0xe8>)
    ab0c:	e7e1      	b.n	aad2 <setNewChannel+0x2a>
		pUpdateChidStatus = UpdateChannelIdStatus;
    ab0e:	4e21      	ldr	r6, [pc, #132]	; (ab94 <setNewChannel+0xec>)
    ab10:	e7df      	b.n	aad2 <setNewChannel+0x2a>
		if(newCh.channelMaskCntl == 6)
    ab12:	2c06      	cmp	r4, #6
    ab14:	d00b      	beq.n	ab2e <setNewChannel+0x86>
		else if(newCh.channelMaskCntl == 0)
    ab16:	2c00      	cmp	r4, #0
    ab18:	d1ef      	bne.n	aafa <setNewChannel+0x52>
			for(i = 0; i < RegParams.maxChannels; i++)
    ab1a:	232a      	movs	r3, #42	; 0x2a
    ab1c:	4a16      	ldr	r2, [pc, #88]	; (ab78 <setNewChannel+0xd0>)
    ab1e:	56d3      	ldrsb	r3, [r2, r3]
    ab20:	2b00      	cmp	r3, #0
    ab22:	ddea      	ble.n	aafa <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    ab24:	af03      	add	r7, sp, #12
    ab26:	2301      	movs	r3, #1
    ab28:	4699      	mov	r9, r3
			for(i = 0; i < RegParams.maxChannels; i++)
    ab2a:	4692      	mov	sl, r2
    ab2c:	e01c      	b.n	ab68 <setNewChannel+0xc0>
			for(i = 0; i < RegParams.maxChannels; i++)
    ab2e:	3322      	adds	r3, #34	; 0x22
    ab30:	4a11      	ldr	r2, [pc, #68]	; (ab78 <setNewChannel+0xd0>)
    ab32:	56d3      	ldrsb	r3, [r2, r3]
    ab34:	2b00      	cmp	r3, #0
    ab36:	dde0      	ble.n	aafa <setNewChannel+0x52>
    ab38:	2400      	movs	r4, #0
    ab3a:	0017      	movs	r7, r2
    ab3c:	252a      	movs	r5, #42	; 0x2a
				pUpdateChidStatus(i,ENABLED);
    ab3e:	2101      	movs	r1, #1
    ab40:	0020      	movs	r0, r4
    ab42:	47b0      	blx	r6
			for(i = 0; i < RegParams.maxChannels; i++)
    ab44:	3401      	adds	r4, #1
    ab46:	b2e4      	uxtb	r4, r4
    ab48:	577b      	ldrsb	r3, [r7, r5]
    ab4a:	429c      	cmp	r4, r3
    ab4c:	dbf7      	blt.n	ab3e <setNewChannel+0x96>
    ab4e:	e7d4      	b.n	aafa <setNewChannel+0x52>
					pUpdateChidStatus(i,DISABLED);
    ab50:	2100      	movs	r1, #0
    ab52:	0020      	movs	r0, r4
    ab54:	47b0      	blx	r6
				newCh.channelMask = newCh.channelMask >> SHIFT1;
    ab56:	086d      	lsrs	r5, r5, #1
    ab58:	803d      	strh	r5, [r7, #0]
			for(i = 0; i < RegParams.maxChannels; i++)
    ab5a:	3401      	adds	r4, #1
    ab5c:	b2e4      	uxtb	r4, r4
    ab5e:	232a      	movs	r3, #42	; 0x2a
    ab60:	4652      	mov	r2, sl
    ab62:	56d3      	ldrsb	r3, [r2, r3]
    ab64:	429c      	cmp	r4, r3
    ab66:	dac8      	bge.n	aafa <setNewChannel+0x52>
				if((newCh.channelMask & BIT0) == BIT0)
    ab68:	883d      	ldrh	r5, [r7, #0]
    ab6a:	464b      	mov	r3, r9
    ab6c:	422b      	tst	r3, r5
    ab6e:	d0ef      	beq.n	ab50 <setNewChannel+0xa8>
					pUpdateChidStatus(i, ENABLED);
    ab70:	4649      	mov	r1, r9
    ab72:	0020      	movs	r0, r4
    ab74:	47b0      	blx	r6
    ab76:	e7ee      	b.n	ab56 <setNewChannel+0xae>
    ab78:	20001b54 	.word	0x20001b54
    ab7c:	00007fc0 	.word	0x00007fc0
    ab80:	00007465 	.word	0x00007465
    ab84:	00007679 	.word	0x00007679
    ab88:	00015f45 	.word	0x00015f45
    ab8c:	0000aa8d 	.word	0x0000aa8d
    ab90:	000075cd 	.word	0x000075cd
    ab94:	000073bd 	.word	0x000073bd

0000ab98 <LORAREG_SetAttr>:
{
    ab98:	b510      	push	{r4, lr}
	StackRetStatus_t result = LORAWAN_INVALID_PARAMETER;
    ab9a:	230a      	movs	r3, #10
	if(attrType < REG_NUM_ATTRIBUTES)
    ab9c:	283b      	cmp	r0, #59	; 0x3b
    ab9e:	d901      	bls.n	aba4 <LORAREG_SetAttr+0xc>
}
    aba0:	0018      	movs	r0, r3
    aba2:	bd10      	pop	{r4, pc}
	    result = pSetAttr[attrType](attrType, attrInput);		
    aba4:	0082      	lsls	r2, r0, #2
    aba6:	4b02      	ldr	r3, [pc, #8]	; (abb0 <LORAREG_SetAttr+0x18>)
    aba8:	58d3      	ldr	r3, [r2, r3]
    abaa:	4798      	blx	r3
    abac:	0003      	movs	r3, r0
    abae:	e7f7      	b.n	aba0 <LORAREG_SetAttr+0x8>
    abb0:	20000c94 	.word	0x20000c94

0000abb4 <CreateAllRegSoftwareTimers>:
{
    abb4:	b510      	push	{r4, lr}
			status = SwTimerCreate(&regTimerId[i]);
    abb6:	4807      	ldr	r0, [pc, #28]	; (abd4 <CreateAllRegSoftwareTimers+0x20>)
    abb8:	4b07      	ldr	r3, [pc, #28]	; (abd8 <CreateAllRegSoftwareTimers+0x24>)
    abba:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    abbc:	2808      	cmp	r0, #8
    abbe:	d107      	bne.n	abd0 <CreateAllRegSoftwareTimers+0x1c>
			status = SwTimerCreate(&regTimerId[i]);
    abc0:	4806      	ldr	r0, [pc, #24]	; (abdc <CreateAllRegSoftwareTimers+0x28>)
    abc2:	4b05      	ldr	r3, [pc, #20]	; (abd8 <CreateAllRegSoftwareTimers+0x24>)
    abc4:	4798      	blx	r3
		if(LORAWAN_SUCCESS == status)
    abc6:	2808      	cmp	r0, #8
    abc8:	d102      	bne.n	abd0 <CreateAllRegSoftwareTimers+0x1c>
			status = SwTimerCreate(&regTimerId[i]);
    abca:	4805      	ldr	r0, [pc, #20]	; (abe0 <CreateAllRegSoftwareTimers+0x2c>)
    abcc:	4b02      	ldr	r3, [pc, #8]	; (abd8 <CreateAllRegSoftwareTimers+0x24>)
    abce:	4798      	blx	r3
}
    abd0:	bd10      	pop	{r4, pc}
    abd2:	46c0      	nop			; (mov r8, r8)
    abd4:	20001b50 	.word	0x20001b50
    abd8:	0000bef5 	.word	0x0000bef5
    abdc:	20001b51 	.word	0x20001b51
    abe0:	20001b52 	.word	0x20001b52

0000abe4 <StopAllRegSoftwareTimers>:
{
    abe4:	b570      	push	{r4, r5, r6, lr}
		SwTimerStop(regTimerId[i]);
    abe6:	4d04      	ldr	r5, [pc, #16]	; (abf8 <StopAllRegSoftwareTimers+0x14>)
    abe8:	7828      	ldrb	r0, [r5, #0]
    abea:	4c04      	ldr	r4, [pc, #16]	; (abfc <StopAllRegSoftwareTimers+0x18>)
    abec:	47a0      	blx	r4
    abee:	7868      	ldrb	r0, [r5, #1]
    abf0:	47a0      	blx	r4
    abf2:	78a8      	ldrb	r0, [r5, #2]
    abf4:	47a0      	blx	r4
}
    abf6:	bd70      	pop	{r4, r5, r6, pc}
    abf8:	20001b50 	.word	0x20001b50
    abfc:	0000c235 	.word	0x0000c235

0000ac00 <LORAREG_Init>:
{	
    ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac02:	0007      	movs	r7, r0
	if(!initialized)
    ac04:	4b24      	ldr	r3, [pc, #144]	; (ac98 <LORAREG_Init+0x98>)
    ac06:	781b      	ldrb	r3, [r3, #0]
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d109      	bne.n	ac20 <LORAREG_Init+0x20>
		if (LORAWAN_SUCCESS == CreateAllRegSoftwareTimers())
    ac0c:	4b23      	ldr	r3, [pc, #140]	; (ac9c <LORAREG_Init+0x9c>)
    ac0e:	4798      	blx	r3
    ac10:	2808      	cmp	r0, #8
    ac12:	d001      	beq.n	ac18 <LORAREG_Init+0x18>
			result = LORAWAN_RESOURCE_UNAVAILABLE;
    ac14:	2014      	movs	r0, #20
    ac16:	e006      	b.n	ac26 <LORAREG_Init+0x26>
			initialized = true;
    ac18:	2201      	movs	r2, #1
    ac1a:	4b1f      	ldr	r3, [pc, #124]	; (ac98 <LORAREG_Init+0x98>)
    ac1c:	701a      	strb	r2, [r3, #0]
    ac1e:	e002      	b.n	ac26 <LORAREG_Init+0x26>
		StopAllRegSoftwareTimers();	
    ac20:	4b1f      	ldr	r3, [pc, #124]	; (aca0 <LORAREG_Init+0xa0>)
    ac22:	4798      	blx	r3
	StackRetStatus_t result = LORAWAN_SUCCESS;
    ac24:	2008      	movs	r0, #8
    ac26:	2300      	movs	r3, #0
		pGetAttr[i] = InValidGetAttr;
    ac28:	4e1e      	ldr	r6, [pc, #120]	; (aca4 <LORAREG_Init+0xa4>)
    ac2a:	4d1f      	ldr	r5, [pc, #124]	; (aca8 <LORAREG_Init+0xa8>)
		pValidateAttr[i] = InValidAttr;
    ac2c:	4c1f      	ldr	r4, [pc, #124]	; (acac <LORAREG_Init+0xac>)
    ac2e:	4a20      	ldr	r2, [pc, #128]	; (acb0 <LORAREG_Init+0xb0>)
		pSetAttr[i] = InValidAttr;
    ac30:	4920      	ldr	r1, [pc, #128]	; (acb4 <LORAREG_Init+0xb4>)
		pGetAttr[i] = InValidGetAttr;
    ac32:	519d      	str	r5, [r3, r6]
		pValidateAttr[i] = InValidAttr;
    ac34:	511a      	str	r2, [r3, r4]
		pSetAttr[i] = InValidAttr;
    ac36:	505a      	str	r2, [r3, r1]
    ac38:	3304      	adds	r3, #4
	for(int i = 0; i < REG_NUM_ATTRIBUTES; i++)
    ac3a:	2bf0      	cmp	r3, #240	; 0xf0
    ac3c:	d1f9      	bne.n	ac32 <LORAREG_Init+0x32>
	if(ismBand == ISM_NA915)
    ac3e:	2f02      	cmp	r7, #2
    ac40:	d00d      	beq.n	ac5e <LORAREG_Init+0x5e>
	else if(ismBand == ISM_EU868 || ismBand == ISM_EU433)
    ac42:	2f01      	cmp	r7, #1
    ac44:	d90f      	bls.n	ac66 <LORAREG_Init+0x66>
	else if(ismBand >= ISM_BRN923 && ismBand <= ISM_VTM923)
    ac46:	1fbb      	subs	r3, r7, #6
    ac48:	2b08      	cmp	r3, #8
    ac4a:	d910      	bls.n	ac6e <LORAREG_Init+0x6e>
	else if(ismBand == ISM_AU915)
    ac4c:	2f03      	cmp	r7, #3
    ac4e:	d012      	beq.n	ac76 <LORAREG_Init+0x76>
	else if(ismBand == ISM_IND865)
    ac50:	2f0f      	cmp	r7, #15
    ac52:	d014      	beq.n	ac7e <LORAREG_Init+0x7e>
	else if(ismBand == ISM_JPN923)
    ac54:	2f05      	cmp	r7, #5
    ac56:	d016      	beq.n	ac86 <LORAREG_Init+0x86>
	else if(ismBand == ISM_KR920)
    ac58:	2f04      	cmp	r7, #4
    ac5a:	d018      	beq.n	ac8e <LORAREG_Init+0x8e>
}
    ac5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    result = LORAReg_InitNA(ismBand);
    ac5e:	2002      	movs	r0, #2
    ac60:	4b15      	ldr	r3, [pc, #84]	; (acb8 <LORAREG_Init+0xb8>)
    ac62:	4798      	blx	r3
    ac64:	e7fa      	b.n	ac5c <LORAREG_Init+0x5c>
	    result = LORAReg_InitEU(ismBand);		
    ac66:	0038      	movs	r0, r7
    ac68:	4b14      	ldr	r3, [pc, #80]	; (acbc <LORAREG_Init+0xbc>)
    ac6a:	4798      	blx	r3
    ac6c:	e7f6      	b.n	ac5c <LORAREG_Init+0x5c>
		result = LORAReg_InitAS(ismBand);
    ac6e:	0038      	movs	r0, r7
    ac70:	4b13      	ldr	r3, [pc, #76]	; (acc0 <LORAREG_Init+0xc0>)
    ac72:	4798      	blx	r3
    ac74:	e7f2      	b.n	ac5c <LORAREG_Init+0x5c>
		result = LORAReg_InitAU(ismBand);
    ac76:	2003      	movs	r0, #3
    ac78:	4b12      	ldr	r3, [pc, #72]	; (acc4 <LORAREG_Init+0xc4>)
    ac7a:	4798      	blx	r3
    ac7c:	e7ee      	b.n	ac5c <LORAREG_Init+0x5c>
		result = LORAReg_InitIN(ismBand);
    ac7e:	200f      	movs	r0, #15
    ac80:	4b11      	ldr	r3, [pc, #68]	; (acc8 <LORAREG_Init+0xc8>)
    ac82:	4798      	blx	r3
    ac84:	e7ea      	b.n	ac5c <LORAREG_Init+0x5c>
		result = LORAReg_InitJP(ismBand);
    ac86:	2005      	movs	r0, #5
    ac88:	4b10      	ldr	r3, [pc, #64]	; (accc <LORAREG_Init+0xcc>)
    ac8a:	4798      	blx	r3
    ac8c:	e7e6      	b.n	ac5c <LORAREG_Init+0x5c>
		result = LORAReg_InitKR(ismBand);
    ac8e:	2004      	movs	r0, #4
    ac90:	4b0f      	ldr	r3, [pc, #60]	; (acd0 <LORAREG_Init+0xd0>)
    ac92:	4798      	blx	r3
    ac94:	e7e2      	b.n	ac5c <LORAREG_Init+0x5c>
    ac96:	46c0      	nop			; (mov r8, r8)
    ac98:	20000ba1 	.word	0x20000ba1
    ac9c:	0000abb5 	.word	0x0000abb5
    aca0:	0000abe5 	.word	0x0000abe5
    aca4:	20000ba4 	.word	0x20000ba4
    aca8:	000069ad 	.word	0x000069ad
    acac:	20000d84 	.word	0x20000d84
    acb0:	000069b1 	.word	0x000069b1
    acb4:	20000c94 	.word	0x20000c94
    acb8:	00006769 	.word	0x00006769
    acbc:	00005cc1 	.word	0x00005cc1
    acc0:	000057c9 	.word	0x000057c9
    acc4:	00005a61 	.word	0x00005a61
    acc8:	00005fb1 	.word	0x00005fb1
    accc:	000061c5 	.word	0x000061c5
    acd0:	00006471 	.word	0x00006471

0000acd4 <LORAREG_SupportedBands>:
	*bands = value;
    acd4:	2301      	movs	r3, #1
    acd6:	425b      	negs	r3, r3
    acd8:	8003      	strh	r3, [r0, #0]
}
    acda:	2008      	movs	r0, #8
    acdc:	4770      	bx	lr
	...

0000ace0 <LORAREG_UnInit>:
{
    ace0:	b510      	push	{r4, lr}
	StopAllRegSoftwareTimers();
    ace2:	4b0d      	ldr	r3, [pc, #52]	; (ad18 <LORAREG_UnInit+0x38>)
    ace4:	4798      	blx	r3
	if(RegParams.regParamItems.fileid)
    ace6:	4b0d      	ldr	r3, [pc, #52]	; (ad1c <LORAREG_UnInit+0x3c>)
    ace8:	4a0d      	ldr	r2, [pc, #52]	; (ad20 <LORAREG_UnInit+0x40>)
    acea:	5cd0      	ldrb	r0, [r2, r3]
    acec:	2800      	cmp	r0, #0
    acee:	d107      	bne.n	ad00 <LORAREG_UnInit+0x20>
	memset(&RegParams,0,sizeof(RegParams_t));
    acf0:	2285      	movs	r2, #133	; 0x85
    acf2:	0092      	lsls	r2, r2, #2
    acf4:	2100      	movs	r1, #0
    acf6:	480a      	ldr	r0, [pc, #40]	; (ad20 <LORAREG_UnInit+0x40>)
    acf8:	4b0a      	ldr	r3, [pc, #40]	; (ad24 <LORAREG_UnInit+0x44>)
    acfa:	4798      	blx	r3
}
    acfc:	200a      	movs	r0, #10
    acfe:	bd10      	pop	{r4, pc}
	    PDS_UnRegFile(RegParams.regParamItems.fileid);
    ad00:	4b09      	ldr	r3, [pc, #36]	; (ad28 <LORAREG_UnInit+0x48>)
    ad02:	4798      	blx	r3
		if(RegParams.band == ISM_EU868)
    ad04:	232e      	movs	r3, #46	; 0x2e
    ad06:	4a06      	ldr	r2, [pc, #24]	; (ad20 <LORAREG_UnInit+0x40>)
    ad08:	5cd3      	ldrb	r3, [r2, r3]
    ad0a:	2b00      	cmp	r3, #0
    ad0c:	d1f0      	bne.n	acf0 <LORAREG_UnInit+0x10>
			PDS_UnRegFile(PDS_FILE_REG_EU868_12_IDX);
    ad0e:	200b      	movs	r0, #11
    ad10:	4b05      	ldr	r3, [pc, #20]	; (ad28 <LORAREG_UnInit+0x48>)
    ad12:	4798      	blx	r3
    ad14:	e7ec      	b.n	acf0 <LORAREG_UnInit+0x10>
    ad16:	46c0      	nop			; (mov r8, r8)
    ad18:	0000abe5 	.word	0x0000abe5
    ad1c:	0000020b 	.word	0x0000020b
    ad20:	20001b54 	.word	0x20001b54
    ad24:	00015fc9 	.word	0x00015fc9
    ad28:	0000b1c5 	.word	0x0000b1c5

0000ad2c <AESEncode>:
 * \brief Encrypts the given block of data
 * \param[in,out] block Block of input data to be encrypted
 * \param[in] key Cryptographic key to be used in AES encryption
 */
void AESEncode(unsigned char* block, unsigned char* masterKey)
{
    ad2c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ad2e:	b083      	sub	sp, #12
    ad30:	0004      	movs	r4, r0
    ad32:	000e      	movs	r6, r1
#ifndef UT	
	
	/* Configure the AES. */
	g_aes_cfg.encrypt_mode = AES_ENCRYPTION;
    ad34:	4a2b      	ldr	r2, [pc, #172]	; (ade4 <AESEncode+0xb8>)
    ad36:	2101      	movs	r1, #1
    ad38:	7011      	strb	r1, [r2, #0]
	g_aes_cfg.key_size = AES_KEY_SIZE_128;
    ad3a:	2300      	movs	r3, #0
    ad3c:	7053      	strb	r3, [r2, #1]
	g_aes_cfg.start_mode = AES_AUTO_START;
    ad3e:	7091      	strb	r1, [r2, #2]
	g_aes_cfg.opmode = AES_ECB_MODE;
    ad40:	70d3      	strb	r3, [r2, #3]
	g_aes_cfg.cfb_size = AES_CFB_SIZE_128;
    ad42:	7113      	strb	r3, [r2, #4]
	g_aes_cfg.lod = false;
    ad44:	7213      	strb	r3, [r2, #8]
	aes_set_config(&aes_instance,AES, &g_aes_cfg);
    ad46:	4928      	ldr	r1, [pc, #160]	; (ade8 <AESEncode+0xbc>)
    ad48:	4828      	ldr	r0, [pc, #160]	; (adec <AESEncode+0xc0>)
    ad4a:	4b29      	ldr	r3, [pc, #164]	; (adf0 <AESEncode+0xc4>)
    ad4c:	4798      	blx	r3
    ad4e:	2100      	movs	r1, #0
		uint8_t u8[4];
	}long_addr;
	uint8_t index;
	for (index = 0; index < 4; index++)
	{
		long_addr.u8[index] = *data++;
    ad50:	ad01      	add	r5, sp, #4
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(masterKey+(i*(sizeof(uint32_t))));
    ad52:	4f28      	ldr	r7, [pc, #160]	; (adf4 <AESEncode+0xc8>)
    ad54:	1870      	adds	r0, r6, r1
    ad56:	2300      	movs	r3, #0
    ad58:	5cc2      	ldrb	r2, [r0, r3]
    ad5a:	555a      	strb	r2, [r3, r5]
    ad5c:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    ad5e:	2b04      	cmp	r3, #4
    ad60:	d1fa      	bne.n	ad58 <AESEncode+0x2c>
    ad62:	9b01      	ldr	r3, [sp, #4]
    ad64:	51cb      	str	r3, [r1, r7]
    ad66:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    ad68:	2910      	cmp	r1, #16
    ad6a:	d1f3      	bne.n	ad54 <AESEncode+0x28>
	}
	
	/* Set the cryptographic key. */
	aes_write_key(&aes_instance, io_data);
    ad6c:	4d1f      	ldr	r5, [pc, #124]	; (adec <AESEncode+0xc0>)
    ad6e:	4921      	ldr	r1, [pc, #132]	; (adf4 <AESEncode+0xc8>)
    ad70:	0028      	movs	r0, r5
    ad72:	4b21      	ldr	r3, [pc, #132]	; (adf8 <AESEncode+0xcc>)
    ad74:	4798      	blx	r3
 */
static inline void aes_set_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg |= AES_CTRLB_NEWMSG;
    ad76:	682a      	ldr	r2, [r5, #0]
    ad78:	7913      	ldrb	r3, [r2, #4]
    ad7a:	2102      	movs	r1, #2
    ad7c:	430b      	orrs	r3, r1
    ad7e:	7113      	strb	r3, [r2, #4]
    ad80:	2100      	movs	r1, #0
		long_addr.u8[index] = *data++;
    ad82:	ad01      	add	r5, sp, #4
	
	aes_set_new_message(&aes_instance);
	
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
	{
		io_data[i] = convert_byte_array_to_32_bit(block+(i*(sizeof(uint32_t))));			
    ad84:	4e1b      	ldr	r6, [pc, #108]	; (adf4 <AESEncode+0xc8>)
    ad86:	1860      	adds	r0, r4, r1
    ad88:	2300      	movs	r3, #0
    ad8a:	5cc2      	ldrb	r2, [r0, r3]
    ad8c:	555a      	strb	r2, [r3, r5]
    ad8e:	3301      	adds	r3, #1
	for (index = 0; index < 4; index++)
    ad90:	2b04      	cmp	r3, #4
    ad92:	d1fa      	bne.n	ad8a <AESEncode+0x5e>
    ad94:	9b01      	ldr	r3, [sp, #4]
    ad96:	518b      	str	r3, [r1, r6]
    ad98:	3104      	adds	r1, #4
	for(uint8_t i=0;i<SUB_BLOCK_COUNT;i++)
    ad9a:	2910      	cmp	r1, #16
    ad9c:	d1f3      	bne.n	ad86 <AESEncode+0x5a>
	}
		
	/* Write the data to be ciphered to the input data registers. */
	aes_write_input_data(&aes_instance, io_data);
    ad9e:	4d13      	ldr	r5, [pc, #76]	; (adec <AESEncode+0xc0>)
    ada0:	4914      	ldr	r1, [pc, #80]	; (adf4 <AESEncode+0xc8>)
    ada2:	0028      	movs	r0, r5
    ada4:	4b15      	ldr	r3, [pc, #84]	; (adfc <AESEncode+0xd0>)
    ada6:	4798      	blx	r3
 */
static inline void aes_clear_new_message(struct aes_module *const module)
{
	Assert(module);
	Assert(module->hw);
	module->hw->CTRLB.reg &= ~AES_CTRLB_NEWMSG;
    ada8:	682d      	ldr	r5, [r5, #0]
    adaa:	792b      	ldrb	r3, [r5, #4]
    adac:	2202      	movs	r2, #2
    adae:	4393      	bics	r3, r2
    adb0:	712b      	strb	r3, [r5, #4]
	Assert(module->hw);

	uint32_t int_flags = module->hw->INTFLAG.reg;
	uint32_t status_flags = 0;

	if (int_flags & AES_INTFLAG_ENCCMP) {
    adb2:	2101      	movs	r1, #1
		status_flags |= AES_ENCRYPTION_COMPLETE;
	}

	if (int_flags & AES_INTFLAG_GFMCMP) {
    adb4:	2002      	movs	r0, #2
    adb6:	e001      	b.n	adbc <AESEncode+0x90>
	aes_clear_new_message(&aes_instance);
	/* Wait for the end of the encryption process. */
	while (!(aes_get_status(&aes_instance) & AES_ENCRYPTION_COMPLETE)) {
    adb8:	4211      	tst	r1, r2
    adba:	d107      	bne.n	adcc <AESEncode+0xa0>
	uint32_t int_flags = module->hw->INTFLAG.reg;
    adbc:	79eb      	ldrb	r3, [r5, #7]
    adbe:	b2db      	uxtb	r3, r3
	if (int_flags & AES_INTFLAG_ENCCMP) {
    adc0:	000a      	movs	r2, r1
    adc2:	401a      	ands	r2, r3
	if (int_flags & AES_INTFLAG_GFMCMP) {
    adc4:	4218      	tst	r0, r3
    adc6:	d0f7      	beq.n	adb8 <AESEncode+0x8c>
		status_flags |= AES_GF_MULTI_COMPLETE;
    adc8:	4302      	orrs	r2, r0
    adca:	e7f5      	b.n	adb8 <AESEncode+0x8c>
	}
	aes_read_output_data(&aes_instance,io_data);
    adcc:	4d09      	ldr	r5, [pc, #36]	; (adf4 <AESEncode+0xc8>)
    adce:	0029      	movs	r1, r5
    add0:	4806      	ldr	r0, [pc, #24]	; (adec <AESEncode+0xc0>)
    add2:	4b0b      	ldr	r3, [pc, #44]	; (ae00 <AESEncode+0xd4>)
    add4:	4798      	blx	r3
	
	memcpy(block,io_data,BLOCKSIZE);
    add6:	2210      	movs	r2, #16
    add8:	0029      	movs	r1, r5
    adda:	0020      	movs	r0, r4
    addc:	4b09      	ldr	r3, [pc, #36]	; (ae04 <AESEncode+0xd8>)
    adde:	4798      	blx	r3
#endif	
}
    ade0:	b003      	add	sp, #12
    ade2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ade4:	20001d68 	.word	0x20001d68
    ade8:	42003400 	.word	0x42003400
    adec:	20001d74 	.word	0x20001d74
    adf0:	000009c9 	.word	0x000009c9
    adf4:	20000e74 	.word	0x20000e74
    adf8:	00000a5d 	.word	0x00000a5d
    adfc:	00000a91 	.word	0x00000a91
    ae00:	00000ae1 	.word	0x00000ae1
    ae04:	00015f45 	.word	0x00015f45

0000ae08 <AESInit>:

/**
 * \brief Initializes the AES Engine.
 */
void AESInit(void)
{
    ae08:	b570      	push	{r4, r5, r6, lr}
#ifndef UT	
	//! [setup_config]
	aes_get_config_defaults(&g_aes_cfg);
    ae0a:	4d07      	ldr	r5, [pc, #28]	; (ae28 <AESInit+0x20>)
    ae0c:	0028      	movs	r0, r5
    ae0e:	4b07      	ldr	r3, [pc, #28]	; (ae2c <AESInit+0x24>)
    ae10:	4798      	blx	r3
	//! [setup_config]

	//! [setup_config_defaults]
	aes_init(&aes_instance,AES, &g_aes_cfg);
    ae12:	4c07      	ldr	r4, [pc, #28]	; (ae30 <AESInit+0x28>)
    ae14:	002a      	movs	r2, r5
    ae16:	4907      	ldr	r1, [pc, #28]	; (ae34 <AESInit+0x2c>)
    ae18:	0020      	movs	r0, r4
    ae1a:	4b07      	ldr	r3, [pc, #28]	; (ae38 <AESInit+0x30>)
    ae1c:	4798      	blx	r3
	//! [setup_config_defaults]
	//! [module_enable]
	aes_enable(&aes_instance);
    ae1e:	0020      	movs	r0, r4
    ae20:	4b06      	ldr	r3, [pc, #24]	; (ae3c <AESInit+0x34>)
    ae22:	4798      	blx	r3
#endif	
}
    ae24:	bd70      	pop	{r4, r5, r6, pc}
    ae26:	46c0      	nop			; (mov r8, r8)
    ae28:	20001d68 	.word	0x20001d68
    ae2c:	0000098d 	.word	0x0000098d
    ae30:	20001d74 	.word	0x20001d74
    ae34:	42003400 	.word	0x42003400
    ae38:	00000a3d 	.word	0x00000a3d
    ae3c:	000009a7 	.word	0x000009a7

0000ae40 <edbg_eui_read_eui64>:
/*********************************************************************//**
\brief		Reads back the device MAC address stored in User page of EDBG
\param[in]  eui - Device EUI read back from EDBG(8 bytes)
*************************************************************************/
 void edbg_eui_read_eui64(uint8_t *eui)
{
    ae40:	b5f0      	push	{r4, r5, r6, r7, lr}
    ae42:	b091      	sub	sp, #68	; 0x44
    ae44:	9001      	str	r0, [sp, #4]
	config->baud_rate        = I2C_MASTER_BAUD_RATE_100KHZ;
    ae46:	aa03      	add	r2, sp, #12
    ae48:	2364      	movs	r3, #100	; 0x64
    ae4a:	9303      	str	r3, [sp, #12]
	config->baud_rate_high_speed = I2C_MASTER_BAUD_RATE_3400KHZ;
    ae4c:	4b39      	ldr	r3, [pc, #228]	; (af34 <edbg_eui_read_eui64+0xf4>)
    ae4e:	6053      	str	r3, [r2, #4]
	config->transfer_speed       = I2C_MASTER_SPEED_STANDARD_AND_FAST;
    ae50:	2300      	movs	r3, #0
    ae52:	6093      	str	r3, [r2, #8]
	config->generator_source = GCLK_GENERATOR_0;
    ae54:	7313      	strb	r3, [r2, #12]
	config->run_in_standby   = false;
    ae56:	7613      	strb	r3, [r2, #24]
	config->start_hold_time  = I2C_MASTER_START_HOLD_TIME_300NS_600NS;
    ae58:	2180      	movs	r1, #128	; 0x80
    ae5a:	0389      	lsls	r1, r1, #14
    ae5c:	6111      	str	r1, [r2, #16]
	config->buffer_timeout   = 65535;
    ae5e:	2101      	movs	r1, #1
    ae60:	4249      	negs	r1, r1
    ae62:	82d1      	strh	r1, [r2, #22]
	config->unknown_bus_state_timeout = 65535;
    ae64:	8291      	strh	r1, [r2, #20]
	config->scl_low_timeout  = false;
    ae66:	3125      	adds	r1, #37	; 0x25
    ae68:	5453      	strb	r3, [r2, r1]
	config->inactive_timeout = I2C_MASTER_INACTIVE_TIMEOUT_DISABLED;
    ae6a:	6293      	str	r3, [r2, #40]	; 0x28
	config->scl_stretch_only_after_ack_bit = false;
    ae6c:	3108      	adds	r1, #8
    ae6e:	5453      	strb	r3, [r2, r1]
	config->slave_scl_low_extend_timeout   = false;
    ae70:	3101      	adds	r1, #1
    ae72:	5453      	strb	r3, [r2, r1]
	config->master_scl_low_extend_timeout  = false;
    ae74:	3101      	adds	r1, #1
    ae76:	5453      	strb	r3, [r2, r1]
	config->sda_scl_rise_time_ns = 215;
    ae78:	33d7      	adds	r3, #215	; 0xd7
    ae7a:	8613      	strh	r3, [r2, #48]	; 0x30
	config_i2c.pinmux_pad0  = EDBG_I2C_SERCOM_PINMUX_PAD0;
    ae7c:	4b2e      	ldr	r3, [pc, #184]	; (af38 <edbg_eui_read_eui64+0xf8>)
    ae7e:	61d3      	str	r3, [r2, #28]
	config_i2c.pinmux_pad1  = EDBG_I2C_SERCOM_PINMUX_PAD1;
    ae80:	4b2e      	ldr	r3, [pc, #184]	; (af3c <edbg_eui_read_eui64+0xfc>)
    ae82:	6213      	str	r3, [r2, #32]
	i2c_master_init(&i2c_master_instance, EDBG_I2C_MODULE, &config_i2c);
    ae84:	4c2e      	ldr	r4, [pc, #184]	; (af40 <edbg_eui_read_eui64+0x100>)
    ae86:	492f      	ldr	r1, [pc, #188]	; (af44 <edbg_eui_read_eui64+0x104>)
    ae88:	0020      	movs	r0, r4
    ae8a:	4b2f      	ldr	r3, [pc, #188]	; (af48 <edbg_eui_read_eui64+0x108>)
    ae8c:	4798      	blx	r3
	SercomI2cm *const i2c_module = &(module->hw->I2CM);
    ae8e:	6824      	ldr	r4, [r4, #0]
	return (i2c_hw->SYNCBUSY.reg & SERCOM_I2CM_SYNCBUSY_MASK);
    ae90:	2207      	movs	r2, #7
    ae92:	69e3      	ldr	r3, [r4, #28]
	while (i2c_master_is_syncing(module)) {
    ae94:	421a      	tst	r2, r3
    ae96:	d1fc      	bne.n	ae92 <edbg_eui_read_eui64+0x52>
	i2c_module->CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    ae98:	6823      	ldr	r3, [r4, #0]
    ae9a:	2202      	movs	r2, #2
    ae9c:	4313      	orrs	r3, r2
    ae9e:	6023      	str	r3, [r4, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    aea0:	4d27      	ldr	r5, [pc, #156]	; (af40 <edbg_eui_read_eui64+0x100>)
    aea2:	6828      	ldr	r0, [r5, #0]
    aea4:	4b29      	ldr	r3, [pc, #164]	; (af4c <edbg_eui_read_eui64+0x10c>)
    aea6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    aea8:	231f      	movs	r3, #31
    aeaa:	4018      	ands	r0, r3
    aeac:	3b1e      	subs	r3, #30
    aeae:	4083      	lsls	r3, r0
    aeb0:	4a27      	ldr	r2, [pc, #156]	; (af50 <edbg_eui_read_eui64+0x110>)
    aeb2:	6013      	str	r3, [r2, #0]
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    aeb4:	88e8      	ldrh	r0, [r5, #6]
	uint32_t timeout_counter = 0;
    aeb6:	2300      	movs	r3, #0
	while (!(i2c_module->STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE(1))) {
    aeb8:	2110      	movs	r1, #16
    aeba:	8b62      	ldrh	r2, [r4, #26]
    aebc:	420a      	tst	r2, r1
    aebe:	d104      	bne.n	aeca <edbg_eui_read_eui64+0x8a>
		timeout_counter++;
    aec0:	3301      	adds	r3, #1
		if(timeout_counter >= (module->unknown_bus_state_timeout)) {
    aec2:	4283      	cmp	r3, r0
    aec4:	d3f9      	bcc.n	aeba <edbg_eui_read_eui64+0x7a>
			i2c_module->STATUS.reg = SERCOM_I2CM_STATUS_BUSSTATE(1);
    aec6:	2310      	movs	r3, #16
    aec8:	8363      	strh	r3, [r4, #26]
	configure_i2c_master();
	uint32_t timeout = 0;
	
	/** Send the request token */
	master_packet.address         = SLAVE_ADDRESS;
    aeca:	4b22      	ldr	r3, [pc, #136]	; (af54 <edbg_eui_read_eui64+0x114>)
    aecc:	2228      	movs	r2, #40	; 0x28
    aece:	801a      	strh	r2, [r3, #0]
	master_packet.data_length     = sizeof(write_buffer);
    aed0:	3a26      	subs	r2, #38	; 0x26
    aed2:	805a      	strh	r2, [r3, #2]
	master_packet.data            = write_buffer;
    aed4:	4a20      	ldr	r2, [pc, #128]	; (af58 <edbg_eui_read_eui64+0x118>)
    aed6:	605a      	str	r2, [r3, #4]
	master_packet.ten_bit_address = false;
    aed8:	2200      	movs	r2, #0
    aeda:	721a      	strb	r2, [r3, #8]
	master_packet.high_speed      = false;
    aedc:	725a      	strb	r2, [r3, #9]
	master_packet.hs_master_code  = 0x0;
    aede:	729a      	strb	r2, [r3, #10]
	uint32_t timeout = 0;
    aee0:	2400      	movs	r4, #0
	while (i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &master_packet) !=
    aee2:	001e      	movs	r6, r3
    aee4:	4d16      	ldr	r5, [pc, #88]	; (af40 <edbg_eui_read_eui64+0x100>)
    aee6:	4f1d      	ldr	r7, [pc, #116]	; (af5c <edbg_eui_read_eui64+0x11c>)
    aee8:	0031      	movs	r1, r6
    aeea:	0028      	movs	r0, r5
    aeec:	47b8      	blx	r7
    aeee:	2800      	cmp	r0, #0
    aef0:	d004      	beq.n	aefc <edbg_eui_read_eui64+0xbc>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    aef2:	3401      	adds	r4, #1
    aef4:	4b1a      	ldr	r3, [pc, #104]	; (af60 <edbg_eui_read_eui64+0x120>)
    aef6:	429c      	cmp	r4, r3
    aef8:	d1f6      	bne.n	aee8 <edbg_eui_read_eui64+0xa8>
    aefa:	e019      	b.n	af30 <edbg_eui_read_eui64+0xf0>
			return;
		}
	}

	/** Get the extension boards info */
	master_packet.data_length     = 256;
    aefc:	4b15      	ldr	r3, [pc, #84]	; (af54 <edbg_eui_read_eui64+0x114>)
    aefe:	2280      	movs	r2, #128	; 0x80
    af00:	0052      	lsls	r2, r2, #1
    af02:	805a      	strh	r2, [r3, #2]
	master_packet.data            = kit_data;
    af04:	4a17      	ldr	r2, [pc, #92]	; (af64 <edbg_eui_read_eui64+0x124>)
    af06:	605a      	str	r2, [r3, #4]
	while (i2c_master_read_packet_wait(&i2c_master_instance, &master_packet) !=
    af08:	001e      	movs	r6, r3
    af0a:	4d0d      	ldr	r5, [pc, #52]	; (af40 <edbg_eui_read_eui64+0x100>)
    af0c:	4f16      	ldr	r7, [pc, #88]	; (af68 <edbg_eui_read_eui64+0x128>)
    af0e:	0031      	movs	r1, r6
    af10:	0028      	movs	r0, r5
    af12:	47b8      	blx	r7
    af14:	2800      	cmp	r0, #0
    af16:	d006      	beq.n	af26 <edbg_eui_read_eui64+0xe6>
			STATUS_OK) {
		/* Increment timeout counter and check if timed out. */
		if (timeout++ == TIMEOUT) {
    af18:	1c62      	adds	r2, r4, #1
    af1a:	23fa      	movs	r3, #250	; 0xfa
    af1c:	009b      	lsls	r3, r3, #2
    af1e:	429c      	cmp	r4, r3
    af20:	d006      	beq.n	af30 <edbg_eui_read_eui64+0xf0>
    af22:	0014      	movs	r4, r2
    af24:	e7f3      	b.n	af0e <edbg_eui_read_eui64+0xce>
			return;
		}
	}
   
    // First 8bytes value is MAC Address
	memcpy(eui, kit_data, MAC_ADDR_LEN);
    af26:	2208      	movs	r2, #8
    af28:	490e      	ldr	r1, [pc, #56]	; (af64 <edbg_eui_read_eui64+0x124>)
    af2a:	9801      	ldr	r0, [sp, #4]
    af2c:	4b0f      	ldr	r3, [pc, #60]	; (af6c <edbg_eui_read_eui64+0x12c>)
    af2e:	4798      	blx	r3
}
    af30:	b011      	add	sp, #68	; 0x44
    af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
    af34:	00000d48 	.word	0x00000d48
    af38:	00100002 	.word	0x00100002
    af3c:	00110002 	.word	0x00110002
    af40:	20001f88 	.word	0x20001f88
    af44:	42000400 	.word	0x42000400
    af48:	00001469 	.word	0x00001469
    af4c:	00002121 	.word	0x00002121
    af50:	e000e100 	.word	0xe000e100
    af54:	20001f7c 	.word	0x20001f7c
    af58:	20000064 	.word	0x20000064
    af5c:	00001aa9 	.word	0x00001aa9
    af60:	000003e9 	.word	0x000003e9
    af64:	20001e7c 	.word	0x20001e7c
    af68:	00001a85 	.word	0x00001a85
    af6c:	00015f45 	.word	0x00015f45

0000af70 <PDS_Init>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Init(void)
{
    af70:	b510      	push	{r4, lr}
#if (ENABLE_PDS == 1)	
	PdsStatus_t status = pdsWlInit();
    af72:	4b03      	ldr	r3, [pc, #12]	; (af80 <PDS_Init+0x10>)
    af74:	4798      	blx	r3
	pdsUnInitFlag = false;
    af76:	2200      	movs	r2, #0
    af78:	4b02      	ldr	r3, [pc, #8]	; (af84 <PDS_Init+0x14>)
    af7a:	701a      	strb	r2, [r3, #0]
	return status;
#else
	return PDS_OK;
#endif
}
    af7c:	bd10      	pop	{r4, pc}
    af7e:	46c0      	nop			; (mov r8, r8)
    af80:	0000b685 	.word	0x0000b685
    af84:	20000e84 	.word	0x20000e84

0000af88 <PDS_Store>:
\param[in] pdsFileItemIdx - The file id to register file to PDS.
\param[in] item - The item id of the item in PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_Store(PdsFileItemIdx_t pdsFileItemIdx, uint8_t item)
{
    af88:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    af8a:	4b14      	ldr	r3, [pc, #80]	; (afdc <PDS_Store+0x54>)
    af8c:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    af8e:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    af90:	2a00      	cmp	r2, #0
    af92:	d106      	bne.n	afa2 <PDS_Store+0x1a>
	{
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    af94:	0102      	lsls	r2, r0, #4
    af96:	4b12      	ldr	r3, [pc, #72]	; (afe0 <PDS_Store+0x58>)
    af98:	189b      	adds	r3, r3, r2
    af9a:	791a      	ldrb	r2, [r3, #4]
				status = PDS_INVLIAD_FILE_IDX;
			}
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    af9c:	2305      	movs	r3, #5
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    af9e:	2a00      	cmp	r2, #0
    afa0:	d101      	bne.n	afa6 <PDS_Store+0x1e>
		}
	}
#endif	
	return status; 
}
    afa2:	0018      	movs	r0, r3
    afa4:	bd10      	pop	{r4, pc}
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    afa6:	0103      	lsls	r3, r0, #4
    afa8:	4a0d      	ldr	r2, [pc, #52]	; (afe0 <PDS_Store+0x58>)
    afaa:	589c      	ldr	r4, [r3, r2]
		if ((0 != fileMarks[pdsFileItemIdx].numItems) && 				\
    afac:	2c00      	cmp	r4, #0
    afae:	d011      	beq.n	afd4 <PDS_Store+0x4c>
				(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    afb0:	001a      	movs	r2, r3
    afb2:	4b0b      	ldr	r3, [pc, #44]	; (afe0 <PDS_Store+0x58>)
    afb4:	189b      	adds	r3, r3, r2
				(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    afb6:	689b      	ldr	r3, [r3, #8]
    afb8:	2b00      	cmp	r3, #0
    afba:	d00d      	beq.n	afd8 <PDS_Store+0x50>
				status = PDS_INVLIAD_FILE_IDX;
    afbc:	2305      	movs	r3, #5
			if (PDS_MAX_FILE_IDX > pdsFileItemIdx)
    afbe:	280b      	cmp	r0, #11
    afc0:	d8ef      	bhi.n	afa2 <PDS_Store+0x1a>
				*((fileMarks[pdsFileItemIdx].fileMarkListAddr) + item) = PDS_OP_STORE;
    afc2:	3b04      	subs	r3, #4
    afc4:	5463      	strb	r3, [r4, r1]
				isFileSet[pdsFileItemIdx] = true;
    afc6:	4a07      	ldr	r2, [pc, #28]	; (afe4 <PDS_Store+0x5c>)
    afc8:	5413      	strb	r3, [r2, r0]
				pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    afca:	2001      	movs	r0, #1
    afcc:	4b06      	ldr	r3, [pc, #24]	; (afe8 <PDS_Store+0x60>)
    afce:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    afd0:	2300      	movs	r3, #0
    afd2:	e7e6      	b.n	afa2 <PDS_Store+0x1a>
			status = PDS_INVLIAD_FILE_IDX;
    afd4:	2305      	movs	r3, #5
    afd6:	e7e4      	b.n	afa2 <PDS_Store+0x1a>
    afd8:	2305      	movs	r3, #5
    afda:	e7e2      	b.n	afa2 <PDS_Store+0x1a>
    afdc:	20000e84 	.word	0x20000e84
    afe0:	20001fbc 	.word	0x20001fbc
    afe4:	20001fb0 	.word	0x20001fb0
    afe8:	0000b35d 	.word	0x0000b35d

0000afec <PDS_IsRestorable>:
\brief	This function checks if all the registered files are restorable.

\param[out] status - The return status of the function's operation.
******************************************************************************/
bool PDS_IsRestorable(void)
{
    afec:	b570      	push	{r4, r5, r6, lr}
	bool return_status = false;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    afee:	4b0e      	ldr	r3, [pc, #56]	; (b028 <PDS_IsRestorable+0x3c>)
    aff0:	7818      	ldrb	r0, [r3, #0]
    aff2:	2800      	cmp	r0, #0
    aff4:	d117      	bne.n	b026 <PDS_IsRestorable+0x3a>
    aff6:	4d0d      	ldr	r5, [pc, #52]	; (b02c <PDS_IsRestorable+0x40>)
    aff8:	2400      	movs	r4, #0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				if ( !(isFileFound(pdsFileItemIdx)) )
    affa:	4e0d      	ldr	r6, [pc, #52]	; (b030 <PDS_IsRestorable+0x44>)
    affc:	e004      	b.n	b008 <PDS_IsRestorable+0x1c>
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    affe:	3401      	adds	r4, #1
    b000:	b2e4      	uxtb	r4, r4
    b002:	3510      	adds	r5, #16
    b004:	2c0c      	cmp	r4, #12
    b006:	d00d      	beq.n	b024 <PDS_IsRestorable+0x38>
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    b008:	792b      	ldrb	r3, [r5, #4]
    b00a:	2b00      	cmp	r3, #0
    b00c:	d0f7      	beq.n	affe <PDS_IsRestorable+0x12>
    b00e:	682b      	ldr	r3, [r5, #0]
    b010:	2b00      	cmp	r3, #0
    b012:	d0f4      	beq.n	affe <PDS_IsRestorable+0x12>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b014:	68ab      	ldr	r3, [r5, #8]
    b016:	2b00      	cmp	r3, #0
    b018:	d0f1      	beq.n	affe <PDS_IsRestorable+0x12>
				if ( !(isFileFound(pdsFileItemIdx)) )
    b01a:	0020      	movs	r0, r4
    b01c:	47b0      	blx	r6
    b01e:	2800      	cmp	r0, #0
    b020:	d1ed      	bne.n	affe <PDS_IsRestorable+0x12>
    b022:	e000      	b.n	b026 <PDS_IsRestorable+0x3a>
			}
		}
	}
	return_status = true;
#endif
	return return_status;
    b024:	2001      	movs	r0, #1
}
    b026:	bd70      	pop	{r4, r5, r6, pc}
    b028:	20000e84 	.word	0x20000e84
    b02c:	20001fbc 	.word	0x20001fbc
    b030:	0000b84d 	.word	0x0000b84d

0000b034 <PDS_RestoreAll>:
		from all registered files.

\param[out] status - The return status of the function's operation.
******************************************************************************/
PdsStatus_t PDS_RestoreAll(void)
{
    b034:	b5f0      	push	{r4, r5, r6, r7, lr}
    b036:	46ce      	mov	lr, r9
    b038:	4647      	mov	r7, r8
    b03a:	b580      	push	{r7, lr}
    b03c:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b03e:	4b32      	ldr	r3, [pc, #200]	; (b108 <PDS_RestoreAll+0xd4>)
    b040:	781b      	ldrb	r3, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b042:	2000      	movs	r0, #0
	if (false == pdsUnInitFlag)
    b044:	2b00      	cmp	r3, #0
    b046:	d159      	bne.n	b0fc <PDS_RestoreAll+0xc8>
    b048:	4e30      	ldr	r6, [pc, #192]	; (b10c <PDS_RestoreAll+0xd8>)
    b04a:	2700      	movs	r7, #0
					ptr += itemInfo.itemOffset;
					memcpy((void *)(&itemHeader), (void *)(ptr), sizeof(ItemHeader_t));
					ptr += sizeof(ItemHeader_t);
					if (false == itemHeader.delete)
					{
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    b04c:	4b30      	ldr	r3, [pc, #192]	; (b110 <PDS_RestoreAll+0xdc>)
    b04e:	4698      	mov	r8, r3
    b050:	e026      	b.n	b0a0 <PDS_RestoreAll+0x6c>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b052:	3401      	adds	r4, #1
    b054:	b2e4      	uxtb	r4, r4
    b056:	792b      	ldrb	r3, [r5, #4]
    b058:	42a3      	cmp	r3, r4
    b05a:	d918      	bls.n	b08e <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    b05c:	00e1      	lsls	r1, r4, #3
    b05e:	68ab      	ldr	r3, [r5, #8]
    b060:	469c      	mov	ip, r3
    b062:	4461      	add	r1, ip
    b064:	2208      	movs	r2, #8
    b066:	a802      	add	r0, sp, #8
    b068:	47c8      	blx	r9
					ptr += itemInfo.itemOffset;
    b06a:	ab02      	add	r3, sp, #8
    b06c:	79d9      	ldrb	r1, [r3, #7]
    b06e:	2315      	movs	r3, #21
    b070:	aa02      	add	r2, sp, #8
    b072:	4694      	mov	ip, r2
    b074:	4463      	add	r3, ip
    b076:	469c      	mov	ip, r3
    b078:	4461      	add	r1, ip
					if (false == itemHeader.delete)
    b07a:	790b      	ldrb	r3, [r1, #4]
    b07c:	2b00      	cmp	r3, #0
    b07e:	d1e8      	bne.n	b052 <PDS_RestoreAll+0x1e>
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    b080:	9b02      	ldr	r3, [sp, #8]
    b082:	9301      	str	r3, [sp, #4]
    b084:	788a      	ldrb	r2, [r1, #2]
					ptr += sizeof(ItemHeader_t);
    b086:	3105      	adds	r1, #5
						memcpy((void *)(itemInfo.ramAddress), (void *)(ptr), itemHeader.size);
    b088:	0018      	movs	r0, r3
    b08a:	47c0      	blx	r8
    b08c:	e7e1      	b.n	b052 <PDS_RestoreAll+0x1e>
					}
				}
				if(fileMarks[pdsFileItemIdx].fIDcb != NULL)
    b08e:	68eb      	ldr	r3, [r5, #12]
    b090:	2b00      	cmp	r3, #0
    b092:	d000      	beq.n	b096 <PDS_RestoreAll+0x62>
				{
					fileMarks[pdsFileItemIdx].fIDcb();
    b094:	4798      	blx	r3
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    b096:	3701      	adds	r7, #1
    b098:	b2ff      	uxtb	r7, r7
    b09a:	3610      	adds	r6, #16
    b09c:	2f0c      	cmp	r7, #12
    b09e:	d02c      	beq.n	b0fa <PDS_RestoreAll+0xc6>
    b0a0:	0035      	movs	r5, r6
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    b0a2:	7934      	ldrb	r4, [r6, #4]
    b0a4:	2c00      	cmp	r4, #0
    b0a6:	d0f6      	beq.n	b096 <PDS_RestoreAll+0x62>
    b0a8:	6833      	ldr	r3, [r6, #0]
    b0aa:	2b00      	cmp	r3, #0
    b0ac:	d0f3      	beq.n	b096 <PDS_RestoreAll+0x62>
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
    b0ae:	68b3      	ldr	r3, [r6, #8]
    b0b0:	4699      	mov	r9, r3
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b0b2:	2b00      	cmp	r3, #0
    b0b4:	d0ef      	beq.n	b096 <PDS_RestoreAll+0x62>
				memset(&buffer, 0, sizeof(PdsMem_t));
    b0b6:	2280      	movs	r2, #128	; 0x80
    b0b8:	0052      	lsls	r2, r2, #1
    b0ba:	2100      	movs	r1, #0
    b0bc:	a804      	add	r0, sp, #16
    b0be:	4b15      	ldr	r3, [pc, #84]	; (b114 <PDS_RestoreAll+0xe0>)
    b0c0:	4798      	blx	r3
				memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    b0c2:	4b15      	ldr	r3, [pc, #84]	; (b118 <PDS_RestoreAll+0xe4>)
    b0c4:	469c      	mov	ip, r3
    b0c6:	4464      	add	r4, ip
    b0c8:	00e4      	lsls	r4, r4, #3
    b0ca:	0021      	movs	r1, r4
    b0cc:	4449      	add	r1, r9
    b0ce:	2208      	movs	r2, #8
    b0d0:	a802      	add	r0, sp, #8
    b0d2:	4b0f      	ldr	r3, [pc, #60]	; (b110 <PDS_RestoreAll+0xdc>)
    b0d4:	4798      	blx	r3
				size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    b0d6:	ab02      	add	r3, sp, #8
    b0d8:	79da      	ldrb	r2, [r3, #7]
    b0da:	799b      	ldrb	r3, [r3, #6]
    b0dc:	18d2      	adds	r2, r2, r3
				status = pdsWlRead(pdsFileItemIdx, &buffer, size);
    b0de:	3205      	adds	r2, #5
    b0e0:	a904      	add	r1, sp, #16
    b0e2:	0038      	movs	r0, r7
    b0e4:	4b0d      	ldr	r3, [pc, #52]	; (b11c <PDS_RestoreAll+0xe8>)
    b0e6:	4798      	blx	r3
				if (status != PDS_OK)
    b0e8:	2800      	cmp	r0, #0
    b0ea:	d107      	bne.n	b0fc <PDS_RestoreAll+0xc8>
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b0ec:	7933      	ldrb	r3, [r6, #4]
    b0ee:	2400      	movs	r4, #0
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d0cc      	beq.n	b08e <PDS_RestoreAll+0x5a>
					memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + itemIdx), sizeof(ItemMap_t));
    b0f4:	4b06      	ldr	r3, [pc, #24]	; (b110 <PDS_RestoreAll+0xdc>)
    b0f6:	4699      	mov	r9, r3
    b0f8:	e7b0      	b.n	b05c <PDS_RestoreAll+0x28>
    b0fa:	2000      	movs	r0, #0
			}
		}
	}
#endif	
	return status;
}
    b0fc:	b045      	add	sp, #276	; 0x114
    b0fe:	bc0c      	pop	{r2, r3}
    b100:	4690      	mov	r8, r2
    b102:	4699      	mov	r9, r3
    b104:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b106:	46c0      	nop			; (mov r8, r8)
    b108:	20000e84 	.word	0x20000e84
    b10c:	20001fbc 	.word	0x20001fbc
    b110:	00015f45 	.word	0x00015f45
    b114:	00015fc9 	.word	0x00015fc9
    b118:	1fffffff 	.word	0x1fffffff
    b11c:	0000b821 	.word	0x0000b821

0000b120 <PDS_StoreAll>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_StoreAll(void)
{
    b120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b122:	4b14      	ldr	r3, [pc, #80]	; (b174 <PDS_StoreAll+0x54>)
    b124:	781b      	ldrb	r3, [r3, #0]
    b126:	2b00      	cmp	r3, #0
    b128:	d121      	bne.n	b16e <PDS_StoreAll+0x4e>
    b12a:	4813      	ldr	r0, [pc, #76]	; (b178 <PDS_StoreAll+0x58>)
    b12c:	4d13      	ldr	r5, [pc, #76]	; (b17c <PDS_StoreAll+0x5c>)
    b12e:	0007      	movs	r7, r0
    b130:	37c0      	adds	r7, #192	; 0xc0
    b132:	2600      	movs	r6, #0
			(0 != fileMarks[pdsFileItemIdx].itemListAddr)			\
			)
			{
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
				{
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    b134:	2401      	movs	r4, #1
    b136:	e004      	b.n	b142 <PDS_StoreAll+0x22>
				}
				isFileSet[pdsFileItemIdx] = true;
    b138:	702c      	strb	r4, [r5, #0]
    b13a:	3010      	adds	r0, #16
    b13c:	3501      	adds	r5, #1
		for (uint8_t pdsFileItemIdx = 0; pdsFileItemIdx < PDS_MAX_FILE_IDX; pdsFileItemIdx++)
    b13e:	4287      	cmp	r7, r0
    b140:	d012      	beq.n	b168 <PDS_StoreAll+0x48>
    b142:	0002      	movs	r2, r0
			if ((0 != fileMarks[pdsFileItemIdx].numItems) && 			\
    b144:	7903      	ldrb	r3, [r0, #4]
    b146:	2b00      	cmp	r3, #0
    b148:	d0f7      	beq.n	b13a <PDS_StoreAll+0x1a>
    b14a:	6803      	ldr	r3, [r0, #0]
    b14c:	2b00      	cmp	r3, #0
    b14e:	d0f4      	beq.n	b13a <PDS_StoreAll+0x1a>
			(0 != fileMarks[pdsFileItemIdx].fileMarkListAddr) &&	\
    b150:	6883      	ldr	r3, [r0, #8]
    b152:	2b00      	cmp	r3, #0
    b154:	d0f1      	beq.n	b13a <PDS_StoreAll+0x1a>
    b156:	0033      	movs	r3, r6
					*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_STORE;
    b158:	6811      	ldr	r1, [r2, #0]
    b15a:	54cc      	strb	r4, [r1, r3]
				for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b15c:	3301      	adds	r3, #1
    b15e:	b2db      	uxtb	r3, r3
    b160:	7911      	ldrb	r1, [r2, #4]
    b162:	4299      	cmp	r1, r3
    b164:	d8f8      	bhi.n	b158 <PDS_StoreAll+0x38>
    b166:	e7e7      	b.n	b138 <PDS_StoreAll+0x18>
			}
		}
		pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    b168:	2001      	movs	r0, #1
    b16a:	4b05      	ldr	r3, [pc, #20]	; (b180 <PDS_StoreAll+0x60>)
    b16c:	4798      	blx	r3
	}
#endif	
	return PDS_OK;
}
    b16e:	2000      	movs	r0, #0
    b170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b172:	46c0      	nop			; (mov r8, r8)
    b174:	20000e84 	.word	0x20000e84
    b178:	20001fbc 	.word	0x20001fbc
    b17c:	20001fb0 	.word	0x20001fb0
    b180:	0000b35d 	.word	0x0000b35d

0000b184 <PDS_RegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_RegFile(PdsFileItemIdx_t argFileId, PdsFileMarks_t argFileMarks)
{
    b184:	b084      	sub	sp, #16
    b186:	b510      	push	{r4, lr}
    b188:	9103      	str	r1, [sp, #12]
    b18a:	9204      	str	r2, [sp, #16]
    b18c:	9305      	str	r3, [sp, #20]
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b18e:	4b0b      	ldr	r3, [pc, #44]	; (b1bc <PDS_RegFile+0x38>)
    b190:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b192:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    b194:	2a00      	cmp	r2, #0
    b196:	d102      	bne.n	b19e <PDS_RegFile+0x1a>
		{
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    b198:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    b19a:	280b      	cmp	r0, #11
    b19c:	d904      	bls.n	b1a8 <PDS_RegFile+0x24>
		}
	}
#endif	
	return status;
}
    b19e:	0018      	movs	r0, r3
    b1a0:	bc10      	pop	{r4}
    b1a2:	bc08      	pop	{r3}
    b1a4:	b004      	add	sp, #16
    b1a6:	4718      	bx	r3
			memcpy(&fileMarks[argFileId], &argFileMarks, sizeof(PdsFileMarks_t));
    b1a8:	0100      	lsls	r0, r0, #4
    b1aa:	aa03      	add	r2, sp, #12
    b1ac:	4b04      	ldr	r3, [pc, #16]	; (b1c0 <PDS_RegFile+0x3c>)
    b1ae:	1818      	adds	r0, r3, r0
    b1b0:	ca1a      	ldmia	r2!, {r1, r3, r4}
    b1b2:	c01a      	stmia	r0!, {r1, r3, r4}
    b1b4:	6813      	ldr	r3, [r2, #0]
    b1b6:	6003      	str	r3, [r0, #0]
	PdsStatus_t status = PDS_OK;
    b1b8:	2300      	movs	r3, #0
    b1ba:	e7f0      	b.n	b19e <PDS_RegFile+0x1a>
    b1bc:	20000e84 	.word	0x20000e84
    b1c0:	20001fbc 	.word	0x20001fbc

0000b1c4 <PDS_UnRegFile>:

\param[in] argFileId - The file id to register file to PDS.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t PDS_UnRegFile(PdsFileItemIdx_t argFileId)
{
    b1c4:	b510      	push	{r4, lr}
	PdsStatus_t status = PDS_OK;
#if (ENABLE_PDS == 1)
	if (false == pdsUnInitFlag)
    b1c6:	4b09      	ldr	r3, [pc, #36]	; (b1ec <PDS_UnRegFile+0x28>)
    b1c8:	781a      	ldrb	r2, [r3, #0]
	PdsStatus_t status = PDS_OK;
    b1ca:	2300      	movs	r3, #0
	if (false == pdsUnInitFlag)
    b1cc:	2a00      	cmp	r2, #0
    b1ce:	d102      	bne.n	b1d6 <PDS_UnRegFile+0x12>
		{
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
		}
		else
		{
			status = PDS_INVLIAD_FILE_IDX;
    b1d0:	3305      	adds	r3, #5
		if (PDS_MAX_FILE_IDX > argFileId)
    b1d2:	280b      	cmp	r0, #11
    b1d4:	d901      	bls.n	b1da <PDS_UnRegFile+0x16>
		}
	}
#endif
	return status;
}
    b1d6:	0018      	movs	r0, r3
    b1d8:	bd10      	pop	{r4, pc}
			memset(&fileMarks[argFileId], 0, sizeof(PdsFileMarks_t));
    b1da:	0100      	lsls	r0, r0, #4
    b1dc:	4b04      	ldr	r3, [pc, #16]	; (b1f0 <PDS_UnRegFile+0x2c>)
    b1de:	18c0      	adds	r0, r0, r3
    b1e0:	3210      	adds	r2, #16
    b1e2:	2100      	movs	r1, #0
    b1e4:	4b03      	ldr	r3, [pc, #12]	; (b1f4 <PDS_UnRegFile+0x30>)
    b1e6:	4798      	blx	r3
	PdsStatus_t status = PDS_OK;
    b1e8:	2300      	movs	r3, #0
    b1ea:	e7f4      	b.n	b1d6 <PDS_UnRegFile+0x12>
    b1ec:	20000e84 	.word	0x20000e84
    b1f0:	20001fbc 	.word	0x20001fbc
    b1f4:	00015fc9 	.word	0x00015fc9

0000b1f8 <pdsNvmInit>:

\param[in] none
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmInit(void)
{
    b1f8:	b500      	push	{lr}
    b1fa:	b085      	sub	sp, #20
	PdsStatus_t status = PDS_OK;
	status_code_t statusCode;
	struct nvm_parameters parameters;

	nvm_get_parameters(&parameters);
    b1fc:	4668      	mov	r0, sp
    b1fe:	4b0b      	ldr	r3, [pc, #44]	; (b22c <pdsNvmInit+0x34>)
    b200:	4798      	blx	r3
	
	statusCode = nvm_init(INT_FLASH);
    b202:	2000      	movs	r0, #0
    b204:	4b0a      	ldr	r3, [pc, #40]	; (b230 <pdsNvmInit+0x38>)
    b206:	4798      	blx	r3
	if (STATUS_OK != (status_code_genare_t) statusCode)
	{
		return PDS_ERROR;
    b208:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    b20a:	2800      	cmp	r0, #0
    b20c:	d002      	beq.n	b214 <pdsNvmInit+0x1c>
	{
		return PDS_NOT_ENOUGH_MEMORY;
	}
	
	return status;
}
    b20e:	0018      	movs	r0, r3
    b210:	b005      	add	sp, #20
    b212:	bd00      	pop	{pc}
	if (EEPROM_SIZE > ( (parameters.rww_eeprom_number_of_pages/NVMCTRL_ROW_PAGES) * NVMCTRL_ROW_SIZE) )
    b214:	466b      	mov	r3, sp
    b216:	899a      	ldrh	r2, [r3, #12]
    b218:	0892      	lsrs	r2, r2, #2
    b21a:	0212      	lsls	r2, r2, #8
    b21c:	4905      	ldr	r1, [pc, #20]	; (b234 <pdsNvmInit+0x3c>)
	return status;
    b21e:	0fd3      	lsrs	r3, r2, #31
    b220:	17c8      	asrs	r0, r1, #31
    b222:	4291      	cmp	r1, r2
    b224:	4143      	adcs	r3, r0
    b226:	009b      	lsls	r3, r3, #2
    b228:	e7f1      	b.n	b20e <pdsNvmInit+0x16>
    b22a:	46c0      	nop			; (mov r8, r8)
    b22c:	0000102d 	.word	0x0000102d
    b230:	0000caf9 	.word	0x0000caf9
    b234:	00001fff 	.word	0x00001fff

0000b238 <pdsNvmRead>:
\param[in] 	buffer - The buffer containing data to be read.
\param[in] 	size - The size of the data in the buffer.
\param[out] status - The return status of the function's operation of type PdsStatus_t.
******************************************************************************/
PdsStatus_t pdsNvmRead(uint16_t rowId, PdsMem_t *buffer, uint16_t size)
{
    b238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b23a:	000c      	movs	r4, r1
\param[out] uint16_t - The calculated 16 bit CRC.
******************************************************************************/
static uint32_t nvmLogicalRowToPhysicalAddr(uint16_t logicalRow)
{
	//return (NVMCTRL_RWW_EEPROM_ADDR + (NVMCTRL_ROW_SIZE * logicalRow)); // PRVN
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    b23c:	2380      	movs	r3, #128	; 0x80
    b23e:	01db      	lsls	r3, r3, #7
    b240:	469c      	mov	ip, r3
    b242:	4460      	add	r0, ip
    b244:	0205      	lsls	r5, r0, #8
	if (EEPROM_ROW_SIZE == size)
    b246:	2380      	movs	r3, #128	; 0x80
    b248:	005b      	lsls	r3, r3, #1
    b24a:	429a      	cmp	r2, r3
    b24c:	d00e      	beq.n	b26c <pdsNvmRead+0x34>
		size += sizeof(PdsNvmHeader_t);
    b24e:	3204      	adds	r2, #4
    b250:	b296      	uxth	r6, r2
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    b252:	4f1e      	ldr	r7, [pc, #120]	; (b2cc <pdsNvmRead+0x94>)
    b254:	0033      	movs	r3, r6
    b256:	0022      	movs	r2, r4
    b258:	0029      	movs	r1, r5
    b25a:	2000      	movs	r0, #0
    b25c:	47b8      	blx	r7
    b25e:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);		
    b260:	2b05      	cmp	r3, #5
    b262:	d0f7      	beq.n	b254 <pdsNvmRead+0x1c>
		return PDS_ERROR;
    b264:	2002      	movs	r0, #2
	if (STATUS_OK != statusCode)
    b266:	2b00      	cmp	r3, #0
    b268:	d00b      	beq.n	b282 <pdsNvmRead+0x4a>
}
    b26a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			statusCode = nvm_read(INT_FLASH, addr, (uint8_t *const)buffer, size);
    b26c:	001e      	movs	r6, r3
    b26e:	4f17      	ldr	r7, [pc, #92]	; (b2cc <pdsNvmRead+0x94>)
    b270:	0033      	movs	r3, r6
    b272:	0022      	movs	r2, r4
    b274:	0029      	movs	r1, r5
    b276:	2000      	movs	r0, #0
    b278:	47b8      	blx	r7
    b27a:	b2c3      	uxtb	r3, r0
		} while (statusCode == STATUS_BUSY);
    b27c:	2b05      	cmp	r3, #5
    b27e:	d0f7      	beq.n	b270 <pdsNvmRead+0x38>
    b280:	e7f0      	b.n	b264 <pdsNvmRead+0x2c>
	crc = buffer->NVM_Struct.pdsNvmHeader.crc;
    b282:	7823      	ldrb	r3, [r4, #0]
    b284:	7860      	ldrb	r0, [r4, #1]
    b286:	0200      	lsls	r0, r0, #8
    b288:	4318      	orrs	r0, r3
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    b28a:	78a6      	ldrb	r6, [r4, #2]
    b28c:	3404      	adds	r4, #4
  for (uint16_t i = 0; i < length; i++)
    b28e:	2e00      	cmp	r6, #0
    b290:	d017      	beq.n	b2c2 <pdsNvmRead+0x8a>
    b292:	0025      	movs	r5, r4
    b294:	3e01      	subs	r6, #1
    b296:	b2b6      	uxth	r6, r6
    b298:	3601      	adds	r6, #1
    b29a:	19a4      	adds	r4, r4, r6
    b29c:	2600      	movs	r6, #0
  byte ^= initValue & 0xffU;
    b29e:	782b      	ldrb	r3, [r5, #0]
    b2a0:	4073      	eors	r3, r6
    b2a2:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    b2a4:	010b      	lsls	r3, r1, #4
    b2a6:	404b      	eors	r3, r1
    b2a8:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    b2aa:	b29a      	uxth	r2, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    b2ac:	091b      	lsrs	r3, r3, #4
    b2ae:	00d1      	lsls	r1, r2, #3
    b2b0:	404b      	eors	r3, r1
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    b2b2:	0212      	lsls	r2, r2, #8
    b2b4:	0a36      	lsrs	r6, r6, #8
    b2b6:	4332      	orrs	r2, r6
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    b2b8:	4053      	eors	r3, r2
    b2ba:	b29e      	uxth	r6, r3
    b2bc:	3501      	adds	r5, #1
  for (uint16_t i = 0; i < length; i++)
    b2be:	42a5      	cmp	r5, r4
    b2c0:	d1ed      	bne.n	b29e <pdsNvmRead+0x66>
	if (crc != calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)&(buffer->NVM_Struct.pdsNvmData))) 
    b2c2:	1b80      	subs	r0, r0, r6
    b2c4:	1e46      	subs	r6, r0, #1
    b2c6:	41b0      	sbcs	r0, r6
		return PDS_ERROR;
    b2c8:	b2c0      	uxtb	r0, r0
    b2ca:	e7ce      	b.n	b26a <pdsNvmRead+0x32>
    b2cc:	0000c989 	.word	0x0000c989

0000b2d0 <pdsNvmWrite>:
{
    b2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2d2:	46c6      	mov	lr, r8
    b2d4:	b500      	push	{lr}
    b2d6:	4680      	mov	r8, r0
    b2d8:	000c      	movs	r4, r1
	buffer->NVM_Struct.pdsNvmHeader.version = PDS_NVM_VERSION;
    b2da:	2301      	movs	r3, #1
    b2dc:	70cb      	strb	r3, [r1, #3]
	buffer->NVM_Struct.pdsNvmHeader.size = size;
    b2de:	708a      	strb	r2, [r1, #2]
    b2e0:	27ff      	movs	r7, #255	; 0xff
    b2e2:	4017      	ands	r7, r2
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    b2e4:	1d0e      	adds	r6, r1, #4
  for (uint16_t i = 0; i < length; i++)
    b2e6:	2f00      	cmp	r7, #0
    b2e8:	d017      	beq.n	b31a <pdsNvmWrite+0x4a>
    b2ea:	0030      	movs	r0, r6
    b2ec:	3f01      	subs	r7, #1
    b2ee:	b2bf      	uxth	r7, r7
    b2f0:	3701      	adds	r7, #1
    b2f2:	19f6      	adds	r6, r6, r7
    b2f4:	2700      	movs	r7, #0
  byte ^= initValue & 0xffU;
    b2f6:	7803      	ldrb	r3, [r0, #0]
    b2f8:	407b      	eors	r3, r7
    b2fa:	b2d9      	uxtb	r1, r3
  byte ^= byte << 4U;
    b2fc:	010b      	lsls	r3, r1, #4
    b2fe:	404b      	eors	r3, r1
    b300:	b2db      	uxtb	r3, r3
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    b302:	b299      	uxth	r1, r3
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    b304:	091b      	lsrs	r3, r3, #4
    b306:	00cd      	lsls	r5, r1, #3
    b308:	406b      	eors	r3, r5
  return ((((uint16_t)byte << 8) | ((initValue & 0xff00U) >> 8))
    b30a:	0209      	lsls	r1, r1, #8
    b30c:	0a3f      	lsrs	r7, r7, #8
    b30e:	4339      	orrs	r1, r7
          ^ (uint8_t)(byte >> 4) ^ ((uint16_t)byte << 3));
    b310:	404b      	eors	r3, r1
    b312:	b29f      	uxth	r7, r3
    b314:	3001      	adds	r0, #1
  for (uint16_t i = 0; i < length; i++)
    b316:	42b0      	cmp	r0, r6
    b318:	d1ed      	bne.n	b2f6 <pdsNvmWrite+0x26>
	buffer->NVM_Struct.pdsNvmHeader.crc = calculate_crc(buffer->NVM_Struct.pdsNvmHeader.size, (uint8_t *)(&(buffer->NVM_Struct.pdsNvmData)));
    b31a:	7027      	strb	r7, [r4, #0]
    b31c:	0a3f      	lsrs	r7, r7, #8
    b31e:	7067      	strb	r7, [r4, #1]
	size += sizeof(PdsNvmHeader_t);
    b320:	3204      	adds	r2, #4
    b322:	b296      	uxth	r6, r2
	 return (PDS_FLASH_START_ADDRESS + (NVMCTRL_ROW_SIZE * logicalRow));
    b324:	2180      	movs	r1, #128	; 0x80
    b326:	01c9      	lsls	r1, r1, #7
    b328:	4441      	add	r1, r8
    b32a:	0209      	lsls	r1, r1, #8
	statusCode = nvm_write(INT_FLASH, addr, (uint8_t *const)buffer, size);
    b32c:	0033      	movs	r3, r6
    b32e:	0022      	movs	r2, r4
    b330:	2000      	movs	r0, #0
    b332:	4f08      	ldr	r7, [pc, #32]	; (b354 <pdsNvmWrite+0x84>)
    b334:	47b8      	blx	r7
		return PDS_ERROR;
    b336:	2302      	movs	r3, #2
	if (STATUS_OK != (status_code_genare_t) statusCode)
    b338:	2800      	cmp	r0, #0
    b33a:	d003      	beq.n	b344 <pdsNvmWrite+0x74>
}
    b33c:	0018      	movs	r0, r3
    b33e:	bc04      	pop	{r2}
    b340:	4690      	mov	r8, r2
    b342:	bdf0      	pop	{r4, r5, r6, r7, pc}
	status = pdsNvmRead(rowId, (PdsMem_t *const)buffer, size);
    b344:	0032      	movs	r2, r6
    b346:	0021      	movs	r1, r4
    b348:	4640      	mov	r0, r8
    b34a:	4b03      	ldr	r3, [pc, #12]	; (b358 <pdsNvmWrite+0x88>)
    b34c:	4798      	blx	r3
    b34e:	0003      	movs	r3, r0
	return status;
    b350:	e7f4      	b.n	b33c <pdsNvmWrite+0x6c>
    b352:	46c0      	nop			; (mov r8, r8)
    b354:	0000c9e5 	.word	0x0000c9e5
    b358:	0000b239 	.word	0x0000b239

0000b35c <pdsPostTask>:
\brief Set task for PDS task manager.

\param[in] id - a single value from the type PdsTaskIds_t
******************************************************************************/
void pdsPostTask(PdsTaskIds_t id)
{
    b35c:	b510      	push	{r4, lr}
    b35e:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    b360:	4b05      	ldr	r3, [pc, #20]	; (b378 <pdsPostTask+0x1c>)
    b362:	4798      	blx	r3
    pdsTaskFlags |= id;
    b364:	4b05      	ldr	r3, [pc, #20]	; (b37c <pdsPostTask+0x20>)
    b366:	7818      	ldrb	r0, [r3, #0]
    b368:	4320      	orrs	r0, r4
    b36a:	7018      	strb	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    b36c:	4b04      	ldr	r3, [pc, #16]	; (b380 <pdsPostTask+0x24>)
    b36e:	4798      	blx	r3

    /* Also post a PDS task to the system */
    SYSTEM_PostTask(PDS_TASK_ID);
    b370:	2008      	movs	r0, #8
    b372:	4b04      	ldr	r3, [pc, #16]	; (b384 <pdsPostTask+0x28>)
    b374:	4798      	blx	r3
}
    b376:	bd10      	pop	{r4, pc}
    b378:	00005615 	.word	0x00005615
    b37c:	20000e85 	.word	0x20000e85
    b380:	00005621 	.word	0x00005621
    b384:	0000c555 	.word	0x0000c555

0000b388 <pdsStoreDeleteHandler>:
		initiate store/delete operation.

\param[out] status - The return status of the function's operation.
******************************************************************************/
static SYSTEM_TaskStatus_t pdsStoreDeleteHandler(void)
{
    b388:	b5f0      	push	{r4, r5, r6, r7, lr}
    b38a:	46de      	mov	lr, fp
    b38c:	4657      	mov	r7, sl
    b38e:	464e      	mov	r6, r9
    b390:	4645      	mov	r5, r8
    b392:	b5e0      	push	{r5, r6, r7, lr}
    b394:	b0c5      	sub	sp, #276	; 0x114
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;

	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
	PdsMem_t buffer;

	memset(&buffer, 0, sizeof(PdsMem_t));
    b396:	2280      	movs	r2, #128	; 0x80
    b398:	0052      	lsls	r2, r2, #1
    b39a:	2100      	movs	r1, #0
    b39c:	a804      	add	r0, sp, #16
    b39e:	4b54      	ldr	r3, [pc, #336]	; (b4f0 <pdsStoreDeleteHandler+0x168>)
    b3a0:	4798      	blx	r3
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
	{
		if (true == isFileSet[fileId])
    b3a2:	4b54      	ldr	r3, [pc, #336]	; (b4f4 <pdsStoreDeleteHandler+0x16c>)
    b3a4:	781b      	ldrb	r3, [r3, #0]
    b3a6:	2b00      	cmp	r3, #0
    b3a8:	d112      	bne.n	b3d0 <pdsStoreDeleteHandler+0x48>
    b3aa:	2401      	movs	r4, #1
    b3ac:	4a51      	ldr	r2, [pc, #324]	; (b4f4 <pdsStoreDeleteHandler+0x16c>)
    b3ae:	9400      	str	r4, [sp, #0]
    b3b0:	5d13      	ldrb	r3, [r2, r4]
    b3b2:	2b00      	cmp	r3, #0
    b3b4:	d10f      	bne.n	b3d6 <pdsStoreDeleteHandler+0x4e>
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    b3b6:	3401      	adds	r4, #1
    b3b8:	b2e4      	uxtb	r4, r4
    b3ba:	2c0b      	cmp	r4, #11
    b3bc:	d9f7      	bls.n	b3ae <pdsStoreDeleteHandler+0x26>
	PdsStatus_t status = SYSTEM_TASK_SUCCESS;
    b3be:	2500      	movs	r5, #0
			break;
		}
	}

	return status;
}
    b3c0:	0028      	movs	r0, r5
    b3c2:	b045      	add	sp, #276	; 0x114
    b3c4:	bc3c      	pop	{r2, r3, r4, r5}
    b3c6:	4690      	mov	r8, r2
    b3c8:	4699      	mov	r9, r3
    b3ca:	46a2      	mov	sl, r4
    b3cc:	46ab      	mov	fp, r5
    b3ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (true == isFileSet[fileId])
    b3d0:	2300      	movs	r3, #0
    b3d2:	9300      	str	r3, [sp, #0]
	PdsFileItemIdx_t fileId = PDS_FILE_MAC_01_IDX;
    b3d4:	2400      	movs	r4, #0
	uint8_t *ptr;
	ItemMap_t itemInfo;
	ItemHeader_t itemHeader;
	uint16_t size;

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + (fileMarks[pdsFileItemIdx].numItems - 1)), sizeof(ItemMap_t));
    b3d6:	9b00      	ldr	r3, [sp, #0]
    b3d8:	011a      	lsls	r2, r3, #4
    b3da:	4b47      	ldr	r3, [pc, #284]	; (b4f8 <pdsStoreDeleteHandler+0x170>)
    b3dc:	189b      	adds	r3, r3, r2
    b3de:	7919      	ldrb	r1, [r3, #4]
    b3e0:	4a46      	ldr	r2, [pc, #280]	; (b4fc <pdsStoreDeleteHandler+0x174>)
    b3e2:	4694      	mov	ip, r2
    b3e4:	4461      	add	r1, ip
    b3e6:	00c9      	lsls	r1, r1, #3
    b3e8:	689b      	ldr	r3, [r3, #8]
    b3ea:	1859      	adds	r1, r3, r1
    b3ec:	2208      	movs	r2, #8
    b3ee:	a802      	add	r0, sp, #8
    b3f0:	4b43      	ldr	r3, [pc, #268]	; (b500 <pdsStoreDeleteHandler+0x178>)
    b3f2:	4798      	blx	r3
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
    b3f4:	ab02      	add	r3, sp, #8
    b3f6:	79da      	ldrb	r2, [r3, #7]
    b3f8:	799b      	ldrb	r3, [r3, #6]
    b3fa:	18d2      	adds	r2, r2, r3
	status = pdsWlRead(pdsFileItemIdx, (PdsMem_t *)buffer, size);
    b3fc:	3205      	adds	r2, #5
    b3fe:	a904      	add	r1, sp, #16
    b400:	0020      	movs	r0, r4
    b402:	4b40      	ldr	r3, [pc, #256]	; (b504 <pdsStoreDeleteHandler+0x17c>)
    b404:	4798      	blx	r3
    b406:	1e05      	subs	r5, r0, #0

	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    b408:	d111      	bne.n	b42e <pdsStoreDeleteHandler+0xa6>
	}

	itemHeader.magic = PDS_MAGIC;
	itemHeader.version = PDS_FILES_VERSION;

	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b40a:	9b00      	ldr	r3, [sp, #0]
    b40c:	011a      	lsls	r2, r3, #4
    b40e:	4b3a      	ldr	r3, [pc, #232]	; (b4f8 <pdsStoreDeleteHandler+0x170>)
    b410:	189b      	adds	r3, r3, r2
    b412:	791b      	ldrb	r3, [r3, #4]
    b414:	2500      	movs	r5, #0
    b416:	2b00      	cmp	r3, #0
    b418:	d04a      	beq.n	b4b0 <pdsStoreDeleteHandler+0x128>
	{

		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    b41a:	4b37      	ldr	r3, [pc, #220]	; (b4f8 <pdsStoreDeleteHandler+0x170>)
    b41c:	4699      	mov	r9, r3
    b41e:	9b00      	ldr	r3, [sp, #0]
    b420:	011e      	lsls	r6, r3, #4
    b422:	46b3      	mov	fp, r6
    b424:	44cb      	add	fp, r9
    b426:	4b36      	ldr	r3, [pc, #216]	; (b500 <pdsStoreDeleteHandler+0x178>)
    b428:	469a      	mov	sl, r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b42a:	465f      	mov	r7, fp
    b42c:	e01b      	b.n	b466 <pdsStoreDeleteHandler+0xde>
	if ((PDS_OK != status) && (PDS_NOT_FOUND != status))
    b42e:	2803      	cmp	r0, #3
    b430:	d144      	bne.n	b4bc <pdsStoreDeleteHandler+0x134>
    b432:	e7ea      	b.n	b40a <pdsStoreDeleteHandler+0x82>
		ptr = (uint8_t *)(&(((PdsMem_t *)(buffer))->NVM_Struct.pdsNvmData.WL_Struct.pdsWlData));
		ptr += itemInfo.itemOffset;

		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    b434:	2100      	movs	r1, #0
    b436:	7019      	strb	r1, [r3, #0]
			itemHeader.size = itemInfo.size;
    b438:	ab02      	add	r3, sp, #8
    b43a:	799a      	ldrb	r2, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    b43c:	795b      	ldrb	r3, [r3, #5]
    b43e:	4698      	mov	r8, r3
			itemHeader.delete = false;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    b440:	23a5      	movs	r3, #165	; 0xa5
    b442:	7003      	strb	r3, [r0, #0]
    b444:	2301      	movs	r3, #1
    b446:	7043      	strb	r3, [r0, #1]
    b448:	7082      	strb	r2, [r0, #2]
    b44a:	4643      	mov	r3, r8
    b44c:	70c3      	strb	r3, [r0, #3]
    b44e:	7101      	strb	r1, [r0, #4]
			ptr += sizeof(ItemHeader_t);
    b450:	3005      	adds	r0, #5
			memcpy((void *)(ptr), (void *)itemInfo.ramAddress, itemInfo.size);
    b452:	9b02      	ldr	r3, [sp, #8]
    b454:	9301      	str	r3, [sp, #4]
    b456:	0019      	movs	r1, r3
    b458:	4b29      	ldr	r3, [pc, #164]	; (b500 <pdsStoreDeleteHandler+0x178>)
    b45a:	4798      	blx	r3
	for (uint8_t itemIdx = 0; itemIdx < fileMarks[pdsFileItemIdx].numItems; itemIdx++)
    b45c:	3501      	adds	r5, #1
    b45e:	b2ed      	uxtb	r5, r5
    b460:	793b      	ldrb	r3, [r7, #4]
    b462:	42ab      	cmp	r3, r5
    b464:	d924      	bls.n	b4b0 <pdsStoreDeleteHandler+0x128>
		memcpy((void *)&itemInfo, (fileMarks[pdsFileItemIdx].itemListAddr) + itemIdx, sizeof(ItemMap_t));
    b466:	00e9      	lsls	r1, r5, #3
    b468:	465b      	mov	r3, fp
    b46a:	689b      	ldr	r3, [r3, #8]
    b46c:	469c      	mov	ip, r3
    b46e:	4461      	add	r1, ip
    b470:	2208      	movs	r2, #8
    b472:	a802      	add	r0, sp, #8
    b474:	47d0      	blx	sl
		ptr += itemInfo.itemOffset;
    b476:	ab02      	add	r3, sp, #8
    b478:	79d8      	ldrb	r0, [r3, #7]
    b47a:	2315      	movs	r3, #21
    b47c:	aa02      	add	r2, sp, #8
    b47e:	4694      	mov	ip, r2
    b480:	4463      	add	r3, ip
    b482:	469c      	mov	ip, r3
    b484:	4460      	add	r0, ip
		if (PDS_OP_STORE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    b486:	464b      	mov	r3, r9
    b488:	58f3      	ldr	r3, [r6, r3]
    b48a:	195b      	adds	r3, r3, r5
    b48c:	781a      	ldrb	r2, [r3, #0]
    b48e:	2a01      	cmp	r2, #1
    b490:	d0d0      	beq.n	b434 <pdsStoreDeleteHandler+0xac>
		}
		else if (PDS_OP_DELETE == *(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx))
    b492:	2a02      	cmp	r2, #2
    b494:	d1e2      	bne.n	b45c <pdsStoreDeleteHandler+0xd4>
		{
			*(fileMarks[pdsFileItemIdx].fileMarkListAddr + itemIdx) = PDS_OP_NONE;
    b496:	2200      	movs	r2, #0
    b498:	701a      	strb	r2, [r3, #0]
			itemHeader.size = itemInfo.size;
    b49a:	ab02      	add	r3, sp, #8
    b49c:	7999      	ldrb	r1, [r3, #6]
			itemHeader.itemId = itemInfo.itemId;
    b49e:	795a      	ldrb	r2, [r3, #5]
			itemHeader.delete = true;
			memcpy((void *)(ptr), (void *)&itemHeader, sizeof(ItemHeader_t));
    b4a0:	23a5      	movs	r3, #165	; 0xa5
    b4a2:	7003      	strb	r3, [r0, #0]
    b4a4:	3ba4      	subs	r3, #164	; 0xa4
    b4a6:	7043      	strb	r3, [r0, #1]
    b4a8:	7081      	strb	r1, [r0, #2]
    b4aa:	70c2      	strb	r2, [r0, #3]
    b4ac:	7103      	strb	r3, [r0, #4]
    b4ae:	e7d5      	b.n	b45c <pdsStoreDeleteHandler+0xd4>
		}
	}

	memcpy((void *)&itemInfo, (void *)(fileMarks[pdsFileItemIdx].itemListAddr + fileMarks[pdsFileItemIdx].numItems), sizeof(ItemMap_t));
	size = itemInfo.itemOffset + itemInfo.size + sizeof(ItemHeader_t);
	status = pdsWlWrite(pdsFileItemIdx, (PdsMem_t *)buffer, PDS_WL_DATA_SIZE);
    b4b0:	22f3      	movs	r2, #243	; 0xf3
    b4b2:	a904      	add	r1, sp, #16
    b4b4:	0020      	movs	r0, r4
    b4b6:	4b14      	ldr	r3, [pc, #80]	; (b508 <pdsStoreDeleteHandler+0x180>)
    b4b8:	4798      	blx	r3
    b4ba:	0005      	movs	r5, r0
			isFileSet[fileId] = false;
    b4bc:	2200      	movs	r2, #0
    b4be:	4b0d      	ldr	r3, [pc, #52]	; (b4f4 <pdsStoreDeleteHandler+0x16c>)
    b4c0:	9900      	ldr	r1, [sp, #0]
    b4c2:	545a      	strb	r2, [r3, r1]
			fileId++;
    b4c4:	3401      	adds	r4, #1
    b4c6:	b2e3      	uxtb	r3, r4
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    b4c8:	2b0b      	cmp	r3, #11
    b4ca:	d900      	bls.n	b4ce <pdsStoreDeleteHandler+0x146>
    b4cc:	e778      	b.n	b3c0 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    b4ce:	4a09      	ldr	r2, [pc, #36]	; (b4f4 <pdsStoreDeleteHandler+0x16c>)
    b4d0:	5cd2      	ldrb	r2, [r2, r3]
    b4d2:	2a00      	cmp	r2, #0
    b4d4:	d108      	bne.n	b4e8 <pdsStoreDeleteHandler+0x160>
    b4d6:	4907      	ldr	r1, [pc, #28]	; (b4f4 <pdsStoreDeleteHandler+0x16c>)
	for (; fileId < PDS_MAX_FILE_IDX; fileId++)
    b4d8:	3301      	adds	r3, #1
    b4da:	b2db      	uxtb	r3, r3
    b4dc:	2b0b      	cmp	r3, #11
    b4de:	d900      	bls.n	b4e2 <pdsStoreDeleteHandler+0x15a>
    b4e0:	e76e      	b.n	b3c0 <pdsStoreDeleteHandler+0x38>
		if (isFileSet[fileId])
    b4e2:	5cca      	ldrb	r2, [r1, r3]
    b4e4:	2a00      	cmp	r2, #0
    b4e6:	d0f7      	beq.n	b4d8 <pdsStoreDeleteHandler+0x150>
			pdsPostTask(PDS_STORE_DELETE_TASK_ID);
    b4e8:	2001      	movs	r0, #1
    b4ea:	4b08      	ldr	r3, [pc, #32]	; (b50c <pdsStoreDeleteHandler+0x184>)
    b4ec:	4798      	blx	r3
			break;
    b4ee:	e767      	b.n	b3c0 <pdsStoreDeleteHandler+0x38>
    b4f0:	00015fc9 	.word	0x00015fc9
    b4f4:	20001fb0 	.word	0x20001fb0
    b4f8:	20001fbc 	.word	0x20001fbc
    b4fc:	1fffffff 	.word	0x1fffffff
    b500:	00015f45 	.word	0x00015f45
    b504:	0000b821 	.word	0x0000b821
    b508:	0000b731 	.word	0x0000b731
    b50c:	0000b35d 	.word	0x0000b35d

0000b510 <PDS_TaskHandler>:
{
    b510:	b510      	push	{r4, lr}
    if (pdsTaskFlags)
    b512:	4b0e      	ldr	r3, [pc, #56]	; (b54c <PDS_TaskHandler+0x3c>)
    b514:	781b      	ldrb	r3, [r3, #0]
    b516:	2b00      	cmp	r3, #0
    b518:	d003      	beq.n	b522 <PDS_TaskHandler+0x12>
            if ((1 << taskId) & (pdsTaskFlags))
    b51a:	4b0c      	ldr	r3, [pc, #48]	; (b54c <PDS_TaskHandler+0x3c>)
    b51c:	781b      	ldrb	r3, [r3, #0]
    b51e:	07db      	lsls	r3, r3, #31
    b520:	d401      	bmi.n	b526 <PDS_TaskHandler+0x16>
}
    b522:	2000      	movs	r0, #0
    b524:	bd10      	pop	{r4, pc}
                ATOMIC_SECTION_ENTER
    b526:	4b0a      	ldr	r3, [pc, #40]	; (b550 <PDS_TaskHandler+0x40>)
    b528:	4798      	blx	r3
                pdsTaskFlags &= ~(1 << taskId);
    b52a:	4c08      	ldr	r4, [pc, #32]	; (b54c <PDS_TaskHandler+0x3c>)
    b52c:	7823      	ldrb	r3, [r4, #0]
    b52e:	2201      	movs	r2, #1
    b530:	4393      	bics	r3, r2
    b532:	7023      	strb	r3, [r4, #0]
                ATOMIC_SECTION_EXIT
    b534:	4b07      	ldr	r3, [pc, #28]	; (b554 <PDS_TaskHandler+0x44>)
    b536:	4798      	blx	r3
                pdsTaskHandlers[taskId]();
    b538:	4b07      	ldr	r3, [pc, #28]	; (b558 <PDS_TaskHandler+0x48>)
    b53a:	4798      	blx	r3
				if (pdsTaskFlags)
    b53c:	7823      	ldrb	r3, [r4, #0]
    b53e:	2b00      	cmp	r3, #0
    b540:	d0ef      	beq.n	b522 <PDS_TaskHandler+0x12>
                    SYSTEM_PostTask(PDS_TASK_ID);
    b542:	2008      	movs	r0, #8
    b544:	4b05      	ldr	r3, [pc, #20]	; (b55c <PDS_TaskHandler+0x4c>)
    b546:	4798      	blx	r3
    b548:	e7eb      	b.n	b522 <PDS_TaskHandler+0x12>
    b54a:	46c0      	nop			; (mov r8, r8)
    b54c:	20000e85 	.word	0x20000e85
    b550:	00005615 	.word	0x00005615
    b554:	00005621 	.word	0x00005621
    b558:	0000b389 	.word	0x0000b389
    b55c:	0000c555 	.word	0x0000c555

0000b560 <pdsUpdateRowMap>:
		in the row map.

\param[in] - return none
******************************************************************************/
static void pdsUpdateRowMap()
{
    b560:	b5f0      	push	{r4, r5, r6, r7, lr}
    b562:	4e12      	ldr	r6, [pc, #72]	; (b5ac <pdsUpdateRowMap+0x4c>)
    b564:	0037      	movs	r7, r6
    b566:	3718      	adds	r7, #24
	uint16_t rowIdx = USHRT_MAX;
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    {
		
        // make all the previous indexes of the max_counter_row_idx invalid by writing 0xFF
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    b568:	4d11      	ldr	r5, [pc, #68]	; (b5b0 <pdsUpdateRowMap+0x50>)
		{
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    b56a:	4b12      	ldr	r3, [pc, #72]	; (b5b4 <pdsUpdateRowMap+0x54>)
    b56c:	469c      	mov	ip, r3
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    b56e:	2101      	movs	r1, #1
    b570:	4249      	negs	r1, r1
			while(rowIdx != USHRT_MAX)
			{
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    b572:	0018      	movs	r0, r3
    b574:	e002      	b.n	b57c <pdsUpdateRowMap+0x1c>
    b576:	3602      	adds	r6, #2
    for(uint16_t memId = 0, rowIdxLocal = 0 ; memId < PDS_MAX_FILE_IDX; memId++)
    b578:	42be      	cmp	r6, r7
    b57a:	d015      	beq.n	b5a8 <pdsUpdateRowMap+0x48>
		if(USHRT_MAX != fileMap[memId].maxCounterRowIdx)
    b57c:	8833      	ldrh	r3, [r6, #0]
    b57e:	42ab      	cmp	r3, r5
    b580:	d0f9      	beq.n	b576 <pdsUpdateRowMap+0x16>
			rowIdx = rowMap[fileMap[memId].maxCounterRowIdx].previousIdx;
    b582:	00db      	lsls	r3, r3, #3
    b584:	4463      	add	r3, ip
    b586:	001a      	movs	r2, r3
    b588:	88db      	ldrh	r3, [r3, #6]
			rowMap[fileMap[memId].maxCounterRowIdx].previousIdx = USHRT_MAX;
    b58a:	80d1      	strh	r1, [r2, #6]
			while(rowIdx != USHRT_MAX)
    b58c:	42ab      	cmp	r3, r5
    b58e:	d0f2      	beq.n	b576 <pdsUpdateRowMap+0x16>
				rowIdxLocal = rowMap[rowIdx].previousIdx;
    b590:	001a      	movs	r2, r3
    b592:	00db      	lsls	r3, r3, #3
    b594:	18c3      	adds	r3, r0, r3
    b596:	88db      	ldrh	r3, [r3, #6]
				rowMap[rowIdx].previousIdx = USHRT_MAX;
    b598:	00d2      	lsls	r2, r2, #3
    b59a:	1884      	adds	r4, r0, r2
    b59c:	80e1      	strh	r1, [r4, #6]
				rowMap[rowIdx].counter = UINT_MAX;
    b59e:	5011      	str	r1, [r2, r0]
				rowMap[rowIdx].memId = USHRT_MAX;
    b5a0:	80a1      	strh	r1, [r4, #4]
			while(rowIdx != USHRT_MAX)
    b5a2:	42ab      	cmp	r3, r5
    b5a4:	d1f4      	bne.n	b590 <pdsUpdateRowMap+0x30>
    b5a6:	e7e6      	b.n	b576 <pdsUpdateRowMap+0x16>
				rowIdx = rowIdxLocal;
			}
		}
    }
}
    b5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b5aa:	46c0      	nop			; (mov r8, r8)
    b5ac:	20000e88 	.word	0x20000e88
    b5b0:	0000ffff 	.word	0x0000ffff
    b5b4:	20000ea0 	.word	0x20000ea0

0000b5b8 <pdsUpdateFileMap>:
\brief Updates the file map so that it points to the latest row index for a file id.

\param[out] - returns none
******************************************************************************/
static void pdsUpdateFileMap(UpdateFileMap_t *updateFileMap)
{
    b5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b5ba:	46c6      	mov	lr, r8
    b5bc:	b500      	push	{lr}
    b5be:	b082      	sub	sp, #8
    b5c0:	4684      	mov	ip, r0
    uint16_t *presentRowIdx;
    uint16_t *previousRowIdx;
    uint16_t *lastRowIdx;
    uint16_t prevTemp;
    if(USHRT_MAX == fileMap[updateFileMap->memId].maxCounterRowIdx)
    b5c2:	8881      	ldrh	r1, [r0, #4]
    b5c4:	004a      	lsls	r2, r1, #1
    b5c6:	4b2c      	ldr	r3, [pc, #176]	; (b678 <pdsUpdateFileMap+0xc0>)
    b5c8:	5ad3      	ldrh	r3, [r2, r3]
    b5ca:	4a2c      	ldr	r2, [pc, #176]	; (b67c <pdsUpdateFileMap+0xc4>)
    b5cc:	4293      	cmp	r3, r2
    b5ce:	d02c      	beq.n	b62a <pdsUpdateFileMap+0x72>
    {   
		/* If there is no entry in filemap update current rowidx as maxcounteridx*/
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
    else if(rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter < rowMap[updateFileMap->rowIdx].counter)
    b5d0:	4a2b      	ldr	r2, [pc, #172]	; (b680 <pdsUpdateFileMap+0xc8>)
    b5d2:	00d8      	lsls	r0, r3, #3
    b5d4:	5880      	ldr	r0, [r0, r2]
    b5d6:	4664      	mov	r4, ip
    b5d8:	88e4      	ldrh	r4, [r4, #6]
    b5da:	46a0      	mov	r8, r4
    b5dc:	00e4      	lsls	r4, r4, #3
    b5de:	58a6      	ldr	r6, [r4, r2]
    b5e0:	42b0      	cmp	r0, r6
    b5e2:	d327      	bcc.n	b634 <pdsUpdateFileMap+0x7c>
		// update the max counter rowIdx of the memId as previous_idx in the present row
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;

    }
	else if (rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].counter == rowMap[updateFileMap->rowIdx].counter)
    b5e4:	d02f      	beq.n	b646 <pdsUpdateFileMap+0x8e>

		return;
	}
    else
    {
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    b5e6:	4a26      	ldr	r2, [pc, #152]	; (b680 <pdsUpdateFileMap+0xc8>)
    b5e8:	00dd      	lsls	r5, r3, #3
    b5ea:	3506      	adds	r5, #6
    b5ec:	1950      	adds	r0, r2, r5
    b5ee:	9001      	str	r0, [sp, #4]
    b5f0:	00db      	lsls	r3, r3, #3
    b5f2:	18d3      	adds	r3, r2, r3
    b5f4:	88da      	ldrh	r2, [r3, #6]
        presentRowIdx = &updateFileMap->rowIdx;
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
		do
		{
			if (USHRT_MAX == *previousRowIdx)
    b5f6:	4b21      	ldr	r3, [pc, #132]	; (b67c <pdsUpdateFileMap+0xc4>)
    b5f8:	429a      	cmp	r2, r3
    b5fa:	d028      	beq.n	b64e <pdsUpdateFileMap+0x96>
			{
				*previousRowIdx = *presentRowIdx;
				break;
			}
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    b5fc:	0013      	movs	r3, r2
    b5fe:	00d0      	lsls	r0, r2, #3
    b600:	4c1f      	ldr	r4, [pc, #124]	; (b680 <pdsUpdateFileMap+0xc8>)
    b602:	5900      	ldr	r0, [r0, r4]
    b604:	4286      	cmp	r6, r0
    b606:	d226      	bcs.n	b656 <pdsUpdateFileMap+0x9e>
			{
				lastRowIdx = previousRowIdx;
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    b608:	4c1d      	ldr	r4, [pc, #116]	; (b680 <pdsUpdateFileMap+0xc8>)
			if (USHRT_MAX == *previousRowIdx)
    b60a:	4f1c      	ldr	r7, [pc, #112]	; (b67c <pdsUpdateFileMap+0xc4>)
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    b60c:	0020      	movs	r0, r4
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    b60e:	00db      	lsls	r3, r3, #3
    b610:	1d99      	adds	r1, r3, #6
    b612:	1861      	adds	r1, r4, r1
    b614:	18e3      	adds	r3, r4, r3
    b616:	88da      	ldrh	r2, [r3, #6]
			if (USHRT_MAX == *previousRowIdx)
    b618:	42ba      	cmp	r2, r7
    b61a:	d019      	beq.n	b650 <pdsUpdateFileMap+0x98>
			if (rowMap[*previousRowIdx].counter > rowMap[*presentRowIdx].counter)
    b61c:	0013      	movs	r3, r2
    b61e:	00d5      	lsls	r5, r2, #3
    b620:	582d      	ldr	r5, [r5, r0]
    b622:	42ae      	cmp	r6, r5
    b624:	d21b      	bcs.n	b65e <pdsUpdateFileMap+0xa6>
				previousRowIdx = &rowMap[*previousRowIdx].previousIdx;
    b626:	9101      	str	r1, [sp, #4]
    b628:	e7f1      	b.n	b60e <pdsUpdateFileMap+0x56>
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    b62a:	88c2      	ldrh	r2, [r0, #6]
    b62c:	0049      	lsls	r1, r1, #1
    b62e:	4b12      	ldr	r3, [pc, #72]	; (b678 <pdsUpdateFileMap+0xc0>)
    b630:	52ca      	strh	r2, [r1, r3]
    b632:	e008      	b.n	b646 <pdsUpdateFileMap+0x8e>
        rowMap[updateFileMap->rowIdx].previousIdx = fileMap[updateFileMap->memId].maxCounterRowIdx;
    b634:	4a12      	ldr	r2, [pc, #72]	; (b680 <pdsUpdateFileMap+0xc8>)
    b636:	1912      	adds	r2, r2, r4
    b638:	80d3      	strh	r3, [r2, #6]
        fileMap[updateFileMap->memId].maxCounterRowIdx = updateFileMap->rowIdx;
    b63a:	4663      	mov	r3, ip
    b63c:	88d9      	ldrh	r1, [r3, #6]
    b63e:	889b      	ldrh	r3, [r3, #4]
    b640:	005b      	lsls	r3, r3, #1
    b642:	4a0d      	ldr	r2, [pc, #52]	; (b678 <pdsUpdateFileMap+0xc0>)
    b644:	5299      	strh	r1, [r3, r2]
				break;
			}
		} while(true);

    }
}
    b646:	b002      	add	sp, #8
    b648:	bc04      	pop	{r2}
    b64a:	4690      	mov	r8, r2
    b64c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        previousRowIdx = &rowMap[fileMap[updateFileMap->memId].maxCounterRowIdx].previousIdx;
    b64e:	9901      	ldr	r1, [sp, #4]
				*previousRowIdx = *presentRowIdx;
    b650:	4643      	mov	r3, r8
    b652:	800b      	strh	r3, [r1, #0]
				break;
    b654:	e7f7      	b.n	b646 <pdsUpdateFileMap+0x8e>
        lastRowIdx = &fileMap[updateFileMap->memId].maxCounterRowIdx;
    b656:	0049      	lsls	r1, r1, #1
    b658:	4d07      	ldr	r5, [pc, #28]	; (b678 <pdsUpdateFileMap+0xc0>)
    b65a:	186b      	adds	r3, r5, r1
    b65c:	9301      	str	r3, [sp, #4]
				rowMap[*lastRowIdx].previousIdx = *presentRowIdx;
    b65e:	4908      	ldr	r1, [pc, #32]	; (b680 <pdsUpdateFileMap+0xc8>)
    b660:	9b01      	ldr	r3, [sp, #4]
    b662:	881b      	ldrh	r3, [r3, #0]
    b664:	00db      	lsls	r3, r3, #3
    b666:	18cb      	adds	r3, r1, r3
    b668:	4640      	mov	r0, r8
    b66a:	80d8      	strh	r0, [r3, #6]
				rowMap[*presentRowIdx].previousIdx = prevTemp;
    b66c:	4663      	mov	r3, ip
    b66e:	88db      	ldrh	r3, [r3, #6]
    b670:	00db      	lsls	r3, r3, #3
    b672:	18c9      	adds	r1, r1, r3
    b674:	80ca      	strh	r2, [r1, #6]
				break;
    b676:	e7e6      	b.n	b646 <pdsUpdateFileMap+0x8e>
    b678:	20000e88 	.word	0x20000e88
    b67c:	0000ffff 	.word	0x0000ffff
    b680:	20000ea0 	.word	0x20000ea0

0000b684 <pdsWlInit>:
{
    b684:	b5f0      	push	{r4, r5, r6, r7, lr}
    b686:	46c6      	mov	lr, r8
    b688:	b500      	push	{lr}
    b68a:	b0c4      	sub	sp, #272	; 0x110
	PdsStatus_t status = pdsNvmInit();
    b68c:	4b21      	ldr	r3, [pc, #132]	; (b714 <pdsWlInit+0x90>)
    b68e:	4798      	blx	r3
    b690:	9001      	str	r0, [sp, #4]
	if (PDS_OK != status)
    b692:	2800      	cmp	r0, #0
    b694:	d004      	beq.n	b6a0 <pdsWlInit+0x1c>
}
    b696:	9801      	ldr	r0, [sp, #4]
    b698:	b044      	add	sp, #272	; 0x110
    b69a:	bc04      	pop	{r2}
    b69c:	4690      	mov	r8, r2
    b69e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memset(&rowMap, UCHAR_MAX, EEPROM_NUM_ROWS * sizeof(RowMap_t));
    b6a0:	2680      	movs	r6, #128	; 0x80
    b6a2:	0076      	lsls	r6, r6, #1
    b6a4:	4d1c      	ldr	r5, [pc, #112]	; (b718 <pdsWlInit+0x94>)
    b6a6:	0032      	movs	r2, r6
    b6a8:	21ff      	movs	r1, #255	; 0xff
    b6aa:	0028      	movs	r0, r5
    b6ac:	4c1b      	ldr	r4, [pc, #108]	; (b71c <pdsWlInit+0x98>)
    b6ae:	47a0      	blx	r4
    memset(&fileMap, UCHAR_MAX, PDS_MAX_FILE_IDX * sizeof(FileMap_t));
    b6b0:	2218      	movs	r2, #24
    b6b2:	21ff      	movs	r1, #255	; 0xff
    b6b4:	481a      	ldr	r0, [pc, #104]	; (b720 <pdsWlInit+0x9c>)
    b6b6:	47a0      	blx	r4
	memset(&buffer, 0, sizeof(PdsMem_t));
    b6b8:	0032      	movs	r2, r6
    b6ba:	2100      	movs	r1, #0
    b6bc:	a804      	add	r0, sp, #16
    b6be:	47a0      	blx	r4
    b6c0:	2400      	movs	r4, #0
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    b6c2:	4e18      	ldr	r6, [pc, #96]	; (b724 <pdsWlInit+0xa0>)
            pdsUpdateFileMap(&updateFileMap);
    b6c4:	4b18      	ldr	r3, [pc, #96]	; (b728 <pdsWlInit+0xa4>)
    b6c6:	4698      	mov	r8, r3
    b6c8:	e003      	b.n	b6d2 <pdsWlInit+0x4e>
    b6ca:	3401      	adds	r4, #1
    b6cc:	3508      	adds	r5, #8
    for(uint8_t rowIdx = 0; rowIdx< EEPROM_NUM_ROWS; rowIdx++)
    b6ce:	2c20      	cmp	r4, #32
    b6d0:	d01d      	beq.n	b70e <pdsWlInit+0x8a>
		status = pdsNvmRead(rowIdx, &buffer, EEPROM_ROW_SIZE);
    b6d2:	b2a7      	uxth	r7, r4
    b6d4:	2280      	movs	r2, #128	; 0x80
    b6d6:	0052      	lsls	r2, r2, #1
    b6d8:	a904      	add	r1, sp, #16
    b6da:	0038      	movs	r0, r7
    b6dc:	47b0      	blx	r6
		if (PDS_OK == status)
    b6de:	2800      	cmp	r0, #0
    b6e0:	d1f3      	bne.n	b6ca <pdsWlInit+0x46>
			rowMap[rowIdx].counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    b6e2:	a904      	add	r1, sp, #16
    b6e4:	9b06      	ldr	r3, [sp, #24]
    b6e6:	0a1b      	lsrs	r3, r3, #8
    b6e8:	7b0a      	ldrb	r2, [r1, #12]
    b6ea:	0612      	lsls	r2, r2, #24
    b6ec:	431a      	orrs	r2, r3
    b6ee:	602a      	str	r2, [r5, #0]
            rowMap[rowIdx].memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    b6f0:	79c8      	ldrb	r0, [r1, #7]
    b6f2:	7a0b      	ldrb	r3, [r1, #8]
    b6f4:	021b      	lsls	r3, r3, #8
    b6f6:	4303      	orrs	r3, r0
    b6f8:	80ab      	strh	r3, [r5, #4]
            rowMap[rowIdx].previousIdx = USHRT_MAX;
    b6fa:	2101      	movs	r1, #1
    b6fc:	4249      	negs	r1, r1
    b6fe:	80e9      	strh	r1, [r5, #6]
            updateFileMap.counter = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter;
    b700:	9202      	str	r2, [sp, #8]
            updateFileMap.memId = buffer.NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId;
    b702:	aa02      	add	r2, sp, #8
    b704:	8093      	strh	r3, [r2, #4]
            updateFileMap.rowIdx = rowIdx;
    b706:	80d7      	strh	r7, [r2, #6]
            pdsUpdateFileMap(&updateFileMap);
    b708:	0010      	movs	r0, r2
    b70a:	47c0      	blx	r8
    b70c:	e7dd      	b.n	b6ca <pdsWlInit+0x46>
    pdsUpdateRowMap();
    b70e:	4b07      	ldr	r3, [pc, #28]	; (b72c <pdsWlInit+0xa8>)
    b710:	4798      	blx	r3
	return PDS_OK;
    b712:	e7c0      	b.n	b696 <pdsWlInit+0x12>
    b714:	0000b1f9 	.word	0x0000b1f9
    b718:	20000ea0 	.word	0x20000ea0
    b71c:	00015fc9 	.word	0x00015fc9
    b720:	20000e88 	.word	0x20000e88
    b724:	0000b239 	.word	0x0000b239
    b728:	0000b5b9 	.word	0x0000b5b9
    b72c:	0000b561 	.word	0x0000b561

0000b730 <pdsWlWrite>:
{
    b730:	b5f0      	push	{r4, r5, r6, r7, lr}
    b732:	46ce      	mov	lr, r9
    b734:	4647      	mov	r7, r8
    b736:	b580      	push	{r7, lr}
    b738:	b083      	sub	sp, #12
    b73a:	0005      	movs	r5, r0
    b73c:	000f      	movs	r7, r1
    b73e:	4690      	mov	r8, r2
    b740:	4e32      	ldr	r6, [pc, #200]	; (b80c <pdsWlWrite+0xdc>)
    b742:	0033      	movs	r3, r6
******************************************************************************/
static uint16_t pdsReturnFreeRowIdx(void)
{
    uint8_t rowIdx;
    bool found = 0;
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    b744:	2400      	movs	r4, #0
    {
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    b746:	4832      	ldr	r0, [pc, #200]	; (b810 <pdsWlWrite+0xe0>)
    b748:	e004      	b.n	b754 <pdsWlWrite+0x24>
    for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    b74a:	3401      	adds	r4, #1
    b74c:	b2e4      	uxtb	r4, r4
    b74e:	3308      	adds	r3, #8
    b750:	2c20      	cmp	r4, #32
    b752:	d055      	beq.n	b800 <pdsWlWrite+0xd0>
        if( (UINT_MAX == rowMap[rowIdx].counter) &&
    b754:	6819      	ldr	r1, [r3, #0]
    b756:	3101      	adds	r1, #1
    b758:	d1f7      	bne.n	b74a <pdsWlWrite+0x1a>
    b75a:	88d9      	ldrh	r1, [r3, #6]
    b75c:	4281      	cmp	r1, r0
    b75e:	d1f4      	bne.n	b74a <pdsWlWrite+0x1a>
            (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    b760:	889a      	ldrh	r2, [r3, #4]
    b762:	4282      	cmp	r2, r0
    b764:	d1f1      	bne.n	b74a <pdsWlWrite+0x1a>
            {
                break;
            }
        }
    }
	return rowIdx;
    b766:	b2a3      	uxth	r3, r4
    b768:	4699      	mov	r9, r3
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.counter++;
    b76a:	7a7e      	ldrb	r6, [r7, #9]
    b76c:	7abb      	ldrb	r3, [r7, #10]
    b76e:	021b      	lsls	r3, r3, #8
    b770:	4333      	orrs	r3, r6
    b772:	7afe      	ldrb	r6, [r7, #11]
    b774:	0436      	lsls	r6, r6, #16
    b776:	4333      	orrs	r3, r6
    b778:	7b3e      	ldrb	r6, [r7, #12]
    b77a:	0636      	lsls	r6, r6, #24
    b77c:	431e      	orrs	r6, r3
    b77e:	3601      	adds	r6, #1
    b780:	727e      	strb	r6, [r7, #9]
    b782:	0a32      	lsrs	r2, r6, #8
    b784:	72ba      	strb	r2, [r7, #10]
    b786:	0c32      	lsrs	r2, r6, #16
    b788:	72fa      	strb	r2, [r7, #11]
    b78a:	0e32      	lsrs	r2, r6, #24
    b78c:	733a      	strb	r2, [r7, #12]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.memId = pdsFileItemIdx;
    b78e:	b2ad      	uxth	r5, r5
    b790:	71fd      	strb	r5, [r7, #7]
    b792:	2200      	movs	r2, #0
    b794:	723a      	strb	r2, [r7, #8]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.magicNo = PDS_MAGIC;
    b796:	23a5      	movs	r3, #165	; 0xa5
    b798:	713b      	strb	r3, [r7, #4]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.version = PDS_WL_VERSION;
    b79a:	3ba4      	subs	r3, #164	; 0xa4
    b79c:	717b      	strb	r3, [r7, #5]
	buffer->NVM_Struct.pdsNvmData.WL_Struct.pdsWlHeader.size = size;
    b79e:	4643      	mov	r3, r8
    b7a0:	71bb      	strb	r3, [r7, #6]
	size += sizeof(PdsWlHeader_t);
    b7a2:	4642      	mov	r2, r8
    b7a4:	3209      	adds	r2, #9
	status = pdsNvmWrite(rowIdx, buffer, size);
    b7a6:	b292      	uxth	r2, r2
    b7a8:	0039      	movs	r1, r7
    b7aa:	4648      	mov	r0, r9
    b7ac:	4b19      	ldr	r3, [pc, #100]	; (b814 <pdsWlWrite+0xe4>)
    b7ae:	4798      	blx	r3
    b7b0:	1e07      	subs	r7, r0, #0
	if (PDS_OK == status)
    b7b2:	d014      	beq.n	b7de <pdsWlWrite+0xae>
}
    b7b4:	0038      	movs	r0, r7
    b7b6:	b003      	add	sp, #12
    b7b8:	bc0c      	pop	{r2, r3}
    b7ba:	4690      	mov	r8, r2
    b7bc:	4699      	mov	r9, r3
    b7be:	bdf0      	pop	{r4, r5, r6, r7, pc}
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    b7c0:	3401      	adds	r4, #1
    b7c2:	b2e4      	uxtb	r4, r4
    b7c4:	3608      	adds	r6, #8
    b7c6:	2c20      	cmp	r4, #32
    b7c8:	d0cd      	beq.n	b766 <pdsWlWrite+0x36>
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    b7ca:	6832      	ldr	r2, [r6, #0]
    b7cc:	3201      	adds	r2, #1
    b7ce:	d1f7      	bne.n	b7c0 <pdsWlWrite+0x90>
    b7d0:	88f2      	ldrh	r2, [r6, #6]
    b7d2:	428a      	cmp	r2, r1
    b7d4:	d1f4      	bne.n	b7c0 <pdsWlWrite+0x90>
                (USHRT_MAX == rowMap[rowIdx].previousIdx) &&
    b7d6:	88b3      	ldrh	r3, [r6, #4]
    b7d8:	428b      	cmp	r3, r1
    b7da:	d1f1      	bne.n	b7c0 <pdsWlWrite+0x90>
    b7dc:	e7c3      	b.n	b766 <pdsWlWrite+0x36>
		rowMap[rowIdx].counter = counter;
    b7de:	4b0b      	ldr	r3, [pc, #44]	; (b80c <pdsWlWrite+0xdc>)
    b7e0:	00e4      	lsls	r4, r4, #3
    b7e2:	50e6      	str	r6, [r4, r3]
		rowMap[rowIdx].memId = pdsFileItemIdx;
    b7e4:	191c      	adds	r4, r3, r4
    b7e6:	80a5      	strh	r5, [r4, #4]
		rowMap[rowIdx].previousIdx = USHRT_MAX;
    b7e8:	2301      	movs	r3, #1
    b7ea:	425b      	negs	r3, r3
    b7ec:	80e3      	strh	r3, [r4, #6]
		updateFileMap.counter = rowMap[rowIdx].counter;
    b7ee:	9600      	str	r6, [sp, #0]
		updateFileMap.memId = rowMap[rowIdx].memId;
    b7f0:	466b      	mov	r3, sp
    b7f2:	809d      	strh	r5, [r3, #4]
		updateFileMap.rowIdx = rowIdx;
    b7f4:	464a      	mov	r2, r9
    b7f6:	80da      	strh	r2, [r3, #6]
		pdsUpdateFileMap(&updateFileMap);
    b7f8:	4668      	mov	r0, sp
    b7fa:	4b07      	ldr	r3, [pc, #28]	; (b818 <pdsWlWrite+0xe8>)
    b7fc:	4798      	blx	r3
	return status;
    b7fe:	e7d9      	b.n	b7b4 <pdsWlWrite+0x84>
        pdsUpdateRowMap();
    b800:	4b06      	ldr	r3, [pc, #24]	; (b81c <pdsWlWrite+0xec>)
    b802:	4798      	blx	r3
        for(rowIdx = 0; rowIdx < EEPROM_NUM_ROWS; rowIdx++)
    b804:	2400      	movs	r4, #0
            if( (UINT_MAX == rowMap[rowIdx].counter) &&
    b806:	4902      	ldr	r1, [pc, #8]	; (b810 <pdsWlWrite+0xe0>)
    b808:	e7df      	b.n	b7ca <pdsWlWrite+0x9a>
    b80a:	46c0      	nop			; (mov r8, r8)
    b80c:	20000ea0 	.word	0x20000ea0
    b810:	0000ffff 	.word	0x0000ffff
    b814:	0000b2d1 	.word	0x0000b2d1
    b818:	0000b5b9 	.word	0x0000b5b9
    b81c:	0000b561 	.word	0x0000b561

0000b820 <pdsWlRead>:
{
    b820:	b510      	push	{r4, lr}
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    b822:	0040      	lsls	r0, r0, #1
    b824:	4b06      	ldr	r3, [pc, #24]	; (b840 <pdsWlRead+0x20>)
    b826:	5ac3      	ldrh	r3, [r0, r3]
	if (USHRT_MAX == rowIdx)
    b828:	4c06      	ldr	r4, [pc, #24]	; (b844 <pdsWlRead+0x24>)
		return PDS_NOT_FOUND;
    b82a:	2003      	movs	r0, #3
	if (USHRT_MAX == rowIdx)
    b82c:	42a3      	cmp	r3, r4
    b82e:	d100      	bne.n	b832 <pdsWlRead+0x12>
}
    b830:	bd10      	pop	{r4, pc}
	size += sizeof(PdsWlHeader_t);
    b832:	3209      	adds	r2, #9
	status = pdsNvmRead(rowIdx, buffer, size);
    b834:	b292      	uxth	r2, r2
    b836:	0018      	movs	r0, r3
    b838:	4b03      	ldr	r3, [pc, #12]	; (b848 <pdsWlRead+0x28>)
    b83a:	4798      	blx	r3
	return status;
    b83c:	e7f8      	b.n	b830 <pdsWlRead+0x10>
    b83e:	46c0      	nop			; (mov r8, r8)
    b840:	20000e88 	.word	0x20000e88
    b844:	0000ffff 	.word	0x0000ffff
    b848:	0000b239 	.word	0x0000b239

0000b84c <isFileFound>:

\param[out] - return true or false
******************************************************************************/
bool isFileFound(PdsFileItemIdx_t pdsFileItemIdx)
{
	uint16_t rowIdx = fileMap[pdsFileItemIdx].maxCounterRowIdx;
    b84c:	0040      	lsls	r0, r0, #1
	if (USHRT_MAX == rowIdx)
    b84e:	4b04      	ldr	r3, [pc, #16]	; (b860 <isFileFound+0x14>)
    b850:	5ac0      	ldrh	r0, [r0, r3]
    b852:	4b04      	ldr	r3, [pc, #16]	; (b864 <isFileFound+0x18>)
    b854:	469c      	mov	ip, r3
    b856:	4460      	add	r0, ip
    b858:	1e43      	subs	r3, r0, #1
    b85a:	4198      	sbcs	r0, r3
    b85c:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
    b85e:	4770      	bx	lr
    b860:	20000e88 	.word	0x20000e88
    b864:	ffff0001 	.word	0xffff0001

0000b868 <set_LED_data>:

int32_t set_LED_data(const uint8_t resrc,const uint8_t * data)
{
    int8_t status = 0;
    int8_t ledPin = -1;
    uint8_t value = *data;
    b868:	780b      	ldrb	r3, [r1, #0]

#if (AMBER_LED == 1)
    if(resrc == LED_AMBER)
    b86a:	2802      	cmp	r0, #2
    b86c:	d020      	beq.n	b8b0 <set_LED_data+0x48>
        ledPin = LED_0_PIN;
    }
    else
#endif
#if (GREEN_LED == 1)
    if(resrc == LED_GREEN)
    b86e:	2803      	cmp	r0, #3
    b870:	d010      	beq.n	b894 <set_LED_data+0x2c>
            LED_Toggle(ledPin);
            break;
        }
        default:
        {
            status = UNSUPPORTED_RESOURCE;
    b872:	2001      	movs	r0, #1
    b874:	4240      	negs	r0, r0
            break;
        }
    }

    return status;
}
    b876:	4770      	bx	lr
            LED_Off(ledPin);
    b878:	2212      	movs	r2, #18
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b87a:	2301      	movs	r3, #1
    b87c:	4093      	lsls	r3, r2
		port_base->OUTSET.reg = pin_mask;
    b87e:	4a15      	ldr	r2, [pc, #84]	; (b8d4 <set_LED_data+0x6c>)
    b880:	6193      	str	r3, [r2, #24]
    int8_t status = 0;
    b882:	2000      	movs	r0, #0
    b884:	e7f7      	b.n	b876 <set_LED_data+0xe>
            LED_Off(ledPin);
    b886:	2213      	movs	r2, #19
    b888:	e7f7      	b.n	b87a <set_LED_data+0x12>
            LED_On(ledPin);
    b88a:	2212      	movs	r2, #18
    b88c:	e013      	b.n	b8b6 <set_LED_data+0x4e>
            status = UNSUPPORTED_RESOURCE;
    b88e:	2001      	movs	r0, #1
    b890:	4240      	negs	r0, r0
    b892:	e7f0      	b.n	b876 <set_LED_data+0xe>
    switch(value)
    b894:	2b01      	cmp	r3, #1
    b896:	d0f8      	beq.n	b88a <set_LED_data+0x22>
    b898:	2b00      	cmp	r3, #0
    b89a:	d0ed      	beq.n	b878 <set_LED_data+0x10>
        ledPin = LED_1_PIN;
    b89c:	2112      	movs	r1, #18
    switch(value)
    b89e:	2b02      	cmp	r3, #2
    b8a0:	d1f5      	bne.n	b88e <set_LED_data+0x26>
            LED_Toggle(ledPin);
    b8a2:	b2c9      	uxtb	r1, r1
    b8a4:	4b0b      	ldr	r3, [pc, #44]	; (b8d4 <set_LED_data+0x6c>)
 */
static inline void port_pin_toggle_output_level(
		const uint8_t gpio_pin)
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b8a6:	2201      	movs	r2, #1
    b8a8:	408a      	lsls	r2, r1

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
    b8aa:	61da      	str	r2, [r3, #28]
    int8_t status = 0;
    b8ac:	2000      	movs	r0, #0
    b8ae:	e7e2      	b.n	b876 <set_LED_data+0xe>
            LED_On(ledPin);
    b8b0:	2213      	movs	r2, #19
    switch(value)
    b8b2:	2b01      	cmp	r3, #1
    b8b4:	d105      	bne.n	b8c2 <set_LED_data+0x5a>
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));
    b8b6:	2301      	movs	r3, #1
    b8b8:	4093      	lsls	r3, r2
		port_base->OUTCLR.reg = pin_mask;
    b8ba:	4a06      	ldr	r2, [pc, #24]	; (b8d4 <set_LED_data+0x6c>)
    b8bc:	6153      	str	r3, [r2, #20]
    int8_t status = 0;
    b8be:	2000      	movs	r0, #0
    b8c0:	e7d9      	b.n	b876 <set_LED_data+0xe>
    switch(value)
    b8c2:	2b00      	cmp	r3, #0
    b8c4:	d0df      	beq.n	b886 <set_LED_data+0x1e>
        ledPin = LED_0_PIN;
    b8c6:	2113      	movs	r1, #19
    switch(value)
    b8c8:	2b02      	cmp	r3, #2
    b8ca:	d0ea      	beq.n	b8a2 <set_LED_data+0x3a>
            status = UNSUPPORTED_RESOURCE;
    b8cc:	2001      	movs	r0, #1
    b8ce:	4240      	negs	r0, r0
    return status;
    b8d0:	e7d1      	b.n	b876 <set_LED_data+0xe>
    b8d2:	46c0      	nop			; (mov r8, r8)
    b8d4:	40002800 	.word	0x40002800

0000b8d8 <get_resource_data>:
 \brief      Function to get different resource data
 \param[in]  resource - Type of resource (Motor, Light, Temperature)
 \param[out] *data    - Pointer to the data from different resource
*************************************************************************/
void get_resource_data(const resourceType_t resource,uint8_t * data)
{
    b8d8:	b510      	push	{r4, lr}

    switch(resource)
    b8da:	2801      	cmp	r0, #1
    b8dc:	d002      	beq.n	b8e4 <get_resource_data+0xc>
            get_temp_sensor_data(data);
            break;
        }
        default:
        {
            *data = UNSUPPORTED_RESOURCE;
    b8de:	23ff      	movs	r3, #255	; 0xff
    b8e0:	700b      	strb	r3, [r1, #0]
            break;
        }
    }
}
    b8e2:	bd10      	pop	{r4, pc}
            get_temp_sensor_data(data);
    b8e4:	0008      	movs	r0, r1
    b8e6:	4b01      	ldr	r3, [pc, #4]	; (b8ec <get_resource_data+0x14>)
    b8e8:	4798      	blx	r3
            break;
    b8ea:	e7fa      	b.n	b8e2 <get_resource_data+0xa>
    b8ec:	0000b9d1 	.word	0x0000b9d1

0000b8f0 <resource_init>:
}
/*********************************************************************//**
 \brief      Function to initialize different resources
*************************************************************************/
void resource_init(void)
{
    b8f0:	b510      	push	{r4, lr}
    temp_sensor_init();
    b8f2:	4b01      	ldr	r3, [pc, #4]	; (b8f8 <resource_init+0x8>)
    b8f4:	4798      	blx	r3
    //LED_init();
}
    b8f6:	bd10      	pop	{r4, pc}
    b8f8:	0000b941 	.word	0x0000b941

0000b8fc <convert_dec_to_frac>:
*               This function converts the decimal value into fractional
*               and return the fractional value for temperature calculation
* \param[out]   Fraction value of Decimal
*/
static float convert_dec_to_frac(uint8_t val)
{
    b8fc:	b510      	push	{r4, lr}
	if (val < 10)
    b8fe:	2809      	cmp	r0, #9
    b900:	d907      	bls.n	b912 <convert_dec_to_frac+0x16>
	{
		return ((float)val/10.0);
	}
	
	else if (val <100)
    b902:	2863      	cmp	r0, #99	; 0x63
    b904:	d90b      	bls.n	b91e <convert_dec_to_frac+0x22>
		return ((float)val/100.0);
	}
	
	else
	{
		return ((float)val/1000.0);
    b906:	4b09      	ldr	r3, [pc, #36]	; (b92c <convert_dec_to_frac+0x30>)
    b908:	4798      	blx	r3
    b90a:	4909      	ldr	r1, [pc, #36]	; (b930 <convert_dec_to_frac+0x34>)
    b90c:	4b09      	ldr	r3, [pc, #36]	; (b934 <convert_dec_to_frac+0x38>)
    b90e:	4798      	blx	r3
    b910:	e004      	b.n	b91c <convert_dec_to_frac+0x20>
		return ((float)val/10.0);
    b912:	4b06      	ldr	r3, [pc, #24]	; (b92c <convert_dec_to_frac+0x30>)
    b914:	4798      	blx	r3
    b916:	4908      	ldr	r1, [pc, #32]	; (b938 <convert_dec_to_frac+0x3c>)
    b918:	4b06      	ldr	r3, [pc, #24]	; (b934 <convert_dec_to_frac+0x38>)
    b91a:	4798      	blx	r3
	}
}
    b91c:	bd10      	pop	{r4, pc}
		return ((float)val/100.0);
    b91e:	4b03      	ldr	r3, [pc, #12]	; (b92c <convert_dec_to_frac+0x30>)
    b920:	4798      	blx	r3
    b922:	4906      	ldr	r1, [pc, #24]	; (b93c <convert_dec_to_frac+0x40>)
    b924:	4b03      	ldr	r3, [pc, #12]	; (b934 <convert_dec_to_frac+0x38>)
    b926:	4798      	blx	r3
    b928:	e7f8      	b.n	b91c <convert_dec_to_frac+0x20>
    b92a:	46c0      	nop			; (mov r8, r8)
    b92c:	00014051 	.word	0x00014051
    b930:	447a0000 	.word	0x447a0000
    b934:	00013619 	.word	0x00013619
    b938:	41200000 	.word	0x41200000
    b93c:	42c80000 	.word	0x42c80000

0000b940 <temp_sensor_init>:
{
    b940:	b5f0      	push	{r4, r5, r6, r7, lr}
    b942:	b08d      	sub	sp, #52	; 0x34
	adc_get_config_defaults(&conf_adc);
    b944:	ac01      	add	r4, sp, #4
    b946:	0020      	movs	r0, r4
    b948:	4b1b      	ldr	r3, [pc, #108]	; (b9b8 <temp_sensor_init+0x78>)
    b94a:	4798      	blx	r3
	conf_adc.clock_source = GCLK_GENERATOR_2;
    b94c:	2602      	movs	r6, #2
    b94e:	7026      	strb	r6, [r4, #0]
	conf_adc.clock_prescaler = ADC_CLOCK_PRESCALER_DIV2;
    b950:	2300      	movs	r3, #0
    b952:	70a3      	strb	r3, [r4, #2]
	conf_adc.reference = ADC_REFCTRL_REFSEL_INTREF;
    b954:	7063      	strb	r3, [r4, #1]
	conf_adc.positive_input = ADC_POSITIVE_INPUT_TEMP;
    b956:	3318      	adds	r3, #24
    b958:	7123      	strb	r3, [r4, #4]
	conf_adc.negative_input = ADC_NEGATIVE_INPUT_GND;
    b95a:	23c0      	movs	r3, #192	; 0xc0
    b95c:	015b      	lsls	r3, r3, #5
    b95e:	80e3      	strh	r3, [r4, #6]
	conf_adc.sample_length = ADC_TEMP_SAMPLE_LENGTH;
    b960:	233f      	movs	r3, #63	; 0x3f
    b962:	7563      	strb	r3, [r4, #21]
	adc_init(&adc_instance, ADC, &conf_adc);
    b964:	4f15      	ldr	r7, [pc, #84]	; (b9bc <temp_sensor_init+0x7c>)
    b966:	4d16      	ldr	r5, [pc, #88]	; (b9c0 <temp_sensor_init+0x80>)
    b968:	0022      	movs	r2, r4
    b96a:	0039      	movs	r1, r7
    b96c:	0028      	movs	r0, r5
    b96e:	4b15      	ldr	r3, [pc, #84]	; (b9c4 <temp_sensor_init+0x84>)
    b970:	4798      	blx	r3
	ADC->AVGCTRL.reg = ADC_AVGCTRL_ADJRES(2) | ADC_AVGCTRL_SAMPLENUM_4;
    b972:	2322      	movs	r3, #34	; 0x22
    b974:	733b      	strb	r3, [r7, #12]
			SUPC->VREF.reg |= SUPC_VREF_TSEN;
    b976:	4b14      	ldr	r3, [pc, #80]	; (b9c8 <temp_sensor_init+0x88>)
    b978:	69da      	ldr	r2, [r3, #28]
    b97a:	4332      	orrs	r2, r6
    b97c:	61da      	str	r2, [r3, #28]
			SUPC->VREF.reg &= ~SUPC_VREF_VREFOE;
    b97e:	69da      	ldr	r2, [r3, #28]
    b980:	2104      	movs	r1, #4
    b982:	438a      	bics	r2, r1
    b984:	61da      	str	r2, [r3, #28]
	Adc *const adc_module = module_inst->hw;
    b986:	682a      	ldr	r2, [r5, #0]
    b988:	8c13      	ldrh	r3, [r2, #32]
    b98a:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    b98c:	2b00      	cmp	r3, #0
    b98e:	d1fb      	bne.n	b988 <temp_sensor_init+0x48>
    b990:	2180      	movs	r1, #128	; 0x80
    b992:	03c9      	lsls	r1, r1, #15
    b994:	4b0d      	ldr	r3, [pc, #52]	; (b9cc <temp_sensor_init+0x8c>)
    b996:	6019      	str	r1, [r3, #0]
	adc_module->INTENCLR.reg = ADC_INTENCLR_MASK;
    b998:	2307      	movs	r3, #7
    b99a:	7113      	strb	r3, [r2, #4]
	adc_module->INTFLAG.reg = ADC_INTFLAG_MASK;
    b99c:	7193      	strb	r3, [r2, #6]
	adc_module->CTRLA.reg |= ADC_CTRLA_ENABLE;
    b99e:	7813      	ldrb	r3, [r2, #0]
    b9a0:	2102      	movs	r1, #2
    b9a2:	430b      	orrs	r3, r1
    b9a4:	7013      	strb	r3, [r2, #0]
	Adc *const adc_module = module_inst->hw;
    b9a6:	4b06      	ldr	r3, [pc, #24]	; (b9c0 <temp_sensor_init+0x80>)
    b9a8:	681a      	ldr	r2, [r3, #0]
	if (adc_module->SYNCBUSY.reg) {
    b9aa:	8c13      	ldrh	r3, [r2, #32]
    b9ac:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d1fb      	bne.n	b9aa <temp_sensor_init+0x6a>
}
    b9b2:	b00d      	add	sp, #52	; 0x34
    b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b9b6:	46c0      	nop			; (mov r8, r8)
    b9b8:	0000043d 	.word	0x0000043d
    b9bc:	43000c00 	.word	0x43000c00
    b9c0:	200018d4 	.word	0x200018d4
    b9c4:	00000481 	.word	0x00000481
    b9c8:	40001400 	.word	0x40001400
    b9cc:	e000e100 	.word	0xe000e100

0000b9d0 <get_temp_sensor_data>:
	
	return fine_temp;
}

void get_temp_sensor_data(uint8_t *data)
{
    b9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b9d2:	46de      	mov	lr, fp
    b9d4:	4657      	mov	r7, sl
    b9d6:	464e      	mov	r6, r9
    b9d8:	4645      	mov	r5, r8
    b9da:	b5e0      	push	{r5, r6, r7, lr}
    b9dc:	b08f      	sub	sp, #60	; 0x3c
    b9de:	9008      	str	r0, [sp, #32]
	val1 = *temp_log_row_ptr;
    b9e0:	4b7a      	ldr	r3, [pc, #488]	; (bbcc <get_temp_sensor_data+0x1fc>)
    b9e2:	681b      	ldr	r3, [r3, #0]
    b9e4:	930b      	str	r3, [sp, #44]	; 0x2c
	val2 = *temp_log_row_ptr;
    b9e6:	4b7a      	ldr	r3, [pc, #488]	; (bbd0 <get_temp_sensor_data+0x200>)
    b9e8:	681b      	ldr	r3, [r3, #0]
    b9ea:	930c      	str	r3, [sp, #48]	; 0x30
	room_temp_val_int = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_INT_Msk) >> FUSES_ROOM_TEMP_VAL_INT_Pos);
    b9ec:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	room_temp_val_dec = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_DEC_Msk) >> FUSES_ROOM_TEMP_VAL_DEC_Pos);
    b9ee:	980b      	ldr	r0, [sp, #44]	; 0x2c
	hot_temp_val_int = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_INT_Msk) >> FUSES_HOT_TEMP_VAL_INT_Pos);
    b9f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b9f2:	4698      	mov	r8, r3
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
    b9f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    b9f6:	4699      	mov	r9, r3
	room_int1v_val = (int8_t)((val1 & FUSES_ROOM_INT1V_VAL_Msk) >> FUSES_ROOM_INT1V_VAL_Pos);
    b9f8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
	hot_int1v_val = (int8_t)((val2 & FUSES_HOT_INT1V_VAL_Msk) >> FUSES_HOT_INT1V_VAL_Pos);
    b9fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b9fc:	9303      	str	r3, [sp, #12]
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
    b9fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    ba00:	9204      	str	r2, [sp, #16]
	ADCH = (uint16_t)((val2 & FUSES_HOT_ADC_VAL_Msk) >> FUSES_HOT_ADC_VAL_Pos);
    ba02:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba04:	9105      	str	r1, [sp, #20]
	room_temp_val_dec = (uint8_t)((val1 & FUSES_ROOM_TEMP_VAL_DEC_Msk) >> FUSES_ROOM_TEMP_VAL_DEC_Pos);
    ba06:	0a00      	lsrs	r0, r0, #8
    ba08:	260f      	movs	r6, #15
	tempR = room_temp_val_int + convert_dec_to_frac(room_temp_val_dec);
    ba0a:	4030      	ands	r0, r6
    ba0c:	4d71      	ldr	r5, [pc, #452]	; (bbd4 <get_temp_sensor_data+0x204>)
    ba0e:	46ab      	mov	fp, r5
    ba10:	47a8      	blx	r5
    ba12:	9001      	str	r0, [sp, #4]
    ba14:	25ff      	movs	r5, #255	; 0xff
    ba16:	402c      	ands	r4, r5
    ba18:	0020      	movs	r0, r4
    ba1a:	4c6f      	ldr	r4, [pc, #444]	; (bbd8 <get_temp_sensor_data+0x208>)
    ba1c:	47a0      	blx	r4
    ba1e:	4a6f      	ldr	r2, [pc, #444]	; (bbdc <get_temp_sensor_data+0x20c>)
    ba20:	4692      	mov	sl, r2
    ba22:	9901      	ldr	r1, [sp, #4]
    ba24:	4790      	blx	r2
    ba26:	9001      	str	r0, [sp, #4]
    ba28:	4b6d      	ldr	r3, [pc, #436]	; (bbe0 <get_temp_sensor_data+0x210>)
    ba2a:	6018      	str	r0, [r3, #0]
	hot_temp_val_dec = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_DEC_Msk) >> FUSES_HOT_TEMP_VAL_DEC_Pos);
    ba2c:	4648      	mov	r0, r9
    ba2e:	0d00      	lsrs	r0, r0, #20
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    ba30:	4030      	ands	r0, r6
    ba32:	47d8      	blx	fp
    ba34:	1c06      	adds	r6, r0, #0
	hot_temp_val_int = (uint8_t)((val1 & FUSES_HOT_TEMP_VAL_INT_Msk) >> FUSES_HOT_TEMP_VAL_INT_Pos);
    ba36:	4640      	mov	r0, r8
    ba38:	0b00      	lsrs	r0, r0, #12
	tempH = hot_temp_val_int + convert_dec_to_frac(hot_temp_val_dec);
    ba3a:	4028      	ands	r0, r5
    ba3c:	47a0      	blx	r4
    ba3e:	1c31      	adds	r1, r6, #0
    ba40:	47d0      	blx	sl
    ba42:	9006      	str	r0, [sp, #24]
    ba44:	4b67      	ldr	r3, [pc, #412]	; (bbe4 <get_temp_sensor_data+0x214>)
    ba46:	6018      	str	r0, [r3, #0]
	INT1VR = 1 - ((float)room_int1v_val/INT1V_DIVIDER_1000);
    ba48:	1638      	asrs	r0, r7, #24
    ba4a:	47a0      	blx	r4
    ba4c:	4d66      	ldr	r5, [pc, #408]	; (bbe8 <get_temp_sensor_data+0x218>)
    ba4e:	46a9      	mov	r9, r5
    ba50:	47a8      	blx	r5
    ba52:	4d66      	ldr	r5, [pc, #408]	; (bbec <get_temp_sensor_data+0x21c>)
    ba54:	2200      	movs	r2, #0
    ba56:	4b66      	ldr	r3, [pc, #408]	; (bbf0 <get_temp_sensor_data+0x220>)
    ba58:	47a8      	blx	r5
    ba5a:	0002      	movs	r2, r0
    ba5c:	000b      	movs	r3, r1
    ba5e:	4f65      	ldr	r7, [pc, #404]	; (bbf4 <get_temp_sensor_data+0x224>)
    ba60:	2000      	movs	r0, #0
    ba62:	4965      	ldr	r1, [pc, #404]	; (bbf8 <get_temp_sensor_data+0x228>)
    ba64:	47b8      	blx	r7
    ba66:	4e65      	ldr	r6, [pc, #404]	; (bbfc <get_temp_sensor_data+0x22c>)
    ba68:	47b0      	blx	r6
    ba6a:	4b65      	ldr	r3, [pc, #404]	; (bc00 <get_temp_sensor_data+0x230>)
    ba6c:	9002      	str	r0, [sp, #8]
    ba6e:	6018      	str	r0, [r3, #0]
	INT1VH = 1 - ((float)hot_int1v_val/INT1V_DIVIDER_1000);
    ba70:	466b      	mov	r3, sp
    ba72:	200c      	movs	r0, #12
    ba74:	5618      	ldrsb	r0, [r3, r0]
    ba76:	47a0      	blx	r4
    ba78:	47c8      	blx	r9
    ba7a:	2200      	movs	r2, #0
    ba7c:	4b5c      	ldr	r3, [pc, #368]	; (bbf0 <get_temp_sensor_data+0x220>)
    ba7e:	47a8      	blx	r5
    ba80:	0002      	movs	r2, r0
    ba82:	000b      	movs	r3, r1
    ba84:	2000      	movs	r0, #0
    ba86:	495c      	ldr	r1, [pc, #368]	; (bbf8 <get_temp_sensor_data+0x228>)
    ba88:	47b8      	blx	r7
    ba8a:	47b0      	blx	r6
    ba8c:	1c05      	adds	r5, r0, #0
    ba8e:	9007      	str	r0, [sp, #28]
    ba90:	4b5c      	ldr	r3, [pc, #368]	; (bc04 <get_temp_sensor_data+0x234>)
    ba92:	6018      	str	r0, [r3, #0]
	ADCR = (uint16_t)((val2 & FUSES_ROOM_ADC_VAL_Msk) >> FUSES_ROOM_ADC_VAL_Pos);
    ba94:	9b04      	ldr	r3, [sp, #16]
    ba96:	0318      	lsls	r0, r3, #12
	VADCR = ((float)ADCR * INT1VR)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    ba98:	0d00      	lsrs	r0, r0, #20
    ba9a:	4e5b      	ldr	r6, [pc, #364]	; (bc08 <get_temp_sensor_data+0x238>)
    ba9c:	47b0      	blx	r6
    ba9e:	4c5b      	ldr	r4, [pc, #364]	; (bc0c <get_temp_sensor_data+0x23c>)
    baa0:	9902      	ldr	r1, [sp, #8]
    baa2:	47a0      	blx	r4
    baa4:	4f5a      	ldr	r7, [pc, #360]	; (bc10 <get_temp_sensor_data+0x240>)
    baa6:	495b      	ldr	r1, [pc, #364]	; (bc14 <get_temp_sensor_data+0x244>)
    baa8:	47b8      	blx	r7
    baaa:	9003      	str	r0, [sp, #12]
    baac:	4b5a      	ldr	r3, [pc, #360]	; (bc18 <get_temp_sensor_data+0x248>)
    baae:	6018      	str	r0, [r3, #0]
	VADCH = ((float)ADCH * INT1VH)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    bab0:	9905      	ldr	r1, [sp, #20]
    bab2:	0d08      	lsrs	r0, r1, #20
    bab4:	47b0      	blx	r6
    bab6:	1c29      	adds	r1, r5, #0
    bab8:	47a0      	blx	r4
    baba:	4956      	ldr	r1, [pc, #344]	; (bc14 <get_temp_sensor_data+0x244>)
    babc:	47b8      	blx	r7
    babe:	1c07      	adds	r7, r0, #0
    bac0:	4b56      	ldr	r3, [pc, #344]	; (bc1c <get_temp_sensor_data+0x24c>)
    bac2:	6018      	str	r0, [r3, #0]
	Adc *const adc_module = module_inst->hw;
    bac4:	4b56      	ldr	r3, [pc, #344]	; (bc20 <get_temp_sensor_data+0x250>)
    bac6:	6818      	ldr	r0, [r3, #0]
    bac8:	8c03      	ldrh	r3, [r0, #32]
    baca:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    bacc:	2b00      	cmp	r3, #0
    bace:	d1fb      	bne.n	bac8 <get_temp_sensor_data+0xf8>
	adc_module->SWTRIG.reg |= ADC_SWTRIG_START;
    bad0:	7e03      	ldrb	r3, [r0, #24]
    bad2:	2202      	movs	r2, #2
    bad4:	4313      	orrs	r3, r2
    bad6:	7603      	strb	r3, [r0, #24]
    bad8:	8c03      	ldrh	r3, [r0, #32]
    bada:	b29b      	uxth	r3, r3
	while (adc_is_syncing(module_inst)) {
    badc:	2b00      	cmp	r3, #0
    bade:	d1fb      	bne.n	bad8 <get_temp_sensor_data+0x108>
	if (int_flags & ADC_INTFLAG_RESRDY) {
    bae0:	2101      	movs	r1, #1
	if (int_flags & ADC_INTFLAG_WINMON) {
    bae2:	2604      	movs	r6, #4
		status_flags |= ADC_STATUS_WINDOW;
    bae4:	2402      	movs	r4, #2
    bae6:	e001      	b.n	baec <get_temp_sensor_data+0x11c>
	while((adc_get_status(&adc_instance) & ADC_STATUS_RESULT_READY) != 1);
    bae8:	4211      	tst	r1, r2
    baea:	d10a      	bne.n	bb02 <get_temp_sensor_data+0x132>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    baec:	7983      	ldrb	r3, [r0, #6]
    baee:	b2db      	uxtb	r3, r3
	if (int_flags & ADC_INTFLAG_RESRDY) {
    baf0:	000a      	movs	r2, r1
    baf2:	401a      	ands	r2, r3
	if (int_flags & ADC_INTFLAG_WINMON) {
    baf4:	421e      	tst	r6, r3
    baf6:	d000      	beq.n	bafa <get_temp_sensor_data+0x12a>
		status_flags |= ADC_STATUS_WINDOW;
    baf8:	4322      	orrs	r2, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    bafa:	421c      	tst	r4, r3
    bafc:	d0f4      	beq.n	bae8 <get_temp_sensor_data+0x118>
		status_flags |= ADC_STATUS_OVERRUN;
    bafe:	4332      	orrs	r2, r6
    bb00:	e7f2      	b.n	bae8 <get_temp_sensor_data+0x118>
	uint32_t int_flags = adc_module->INTFLAG.reg;
    bb02:	7982      	ldrb	r2, [r0, #6]
    bb04:	b2d2      	uxtb	r2, r2
	if (int_flags & ADC_INTFLAG_RESRDY) {
    bb06:	2301      	movs	r3, #1
    bb08:	4013      	ands	r3, r2
	if (int_flags & ADC_INTFLAG_WINMON) {
    bb0a:	0751      	lsls	r1, r2, #29
    bb0c:	d501      	bpl.n	bb12 <get_temp_sensor_data+0x142>
		status_flags |= ADC_STATUS_WINDOW;
    bb0e:	2102      	movs	r1, #2
    bb10:	430b      	orrs	r3, r1
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    bb12:	0792      	lsls	r2, r2, #30
    bb14:	d501      	bpl.n	bb1a <get_temp_sensor_data+0x14a>
		status_flags |= ADC_STATUS_OVERRUN;
    bb16:	2204      	movs	r2, #4
    bb18:	4313      	orrs	r3, r2
	uint16_t adc_result = 0;
    bb1a:	2200      	movs	r2, #0
	if (!(adc_get_status(module_inst) & ADC_STATUS_RESULT_READY)) {
    bb1c:	07db      	lsls	r3, r3, #31
    bb1e:	d441      	bmi.n	bba4 <get_temp_sensor_data+0x1d4>
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    bb20:	0010      	movs	r0, r2
    bb22:	4b39      	ldr	r3, [pc, #228]	; (bc08 <get_temp_sensor_data+0x238>)
    bb24:	4798      	blx	r3
    bb26:	9004      	str	r0, [sp, #16]
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    bb28:	4e3e      	ldr	r6, [pc, #248]	; (bc24 <get_temp_sensor_data+0x254>)
    bb2a:	9901      	ldr	r1, [sp, #4]
    bb2c:	9806      	ldr	r0, [sp, #24]
    bb2e:	47b0      	blx	r6
    bb30:	9005      	str	r0, [sp, #20]
    bb32:	9d03      	ldr	r5, [sp, #12]
    bb34:	1c29      	adds	r1, r5, #0
    bb36:	1c38      	adds	r0, r7, #0
    bb38:	47b0      	blx	r6
    bb3a:	1c01      	adds	r1, r0, #0
    bb3c:	4c34      	ldr	r4, [pc, #208]	; (bc10 <get_temp_sensor_data+0x240>)
    bb3e:	9805      	ldr	r0, [sp, #20]
    bb40:	47a0      	blx	r4
    bb42:	9006      	str	r0, [sp, #24]
	VADC = ((float)raw_code * INT1V_VALUE_FLOAT)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    bb44:	4933      	ldr	r1, [pc, #204]	; (bc14 <get_temp_sensor_data+0x244>)
    bb46:	9804      	ldr	r0, [sp, #16]
    bb48:	47a0      	blx	r4
	coarse_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADC - VADCR));
    bb4a:	9503      	str	r5, [sp, #12]
    bb4c:	1c29      	adds	r1, r5, #0
    bb4e:	47b0      	blx	r6
    bb50:	4f2e      	ldr	r7, [pc, #184]	; (bc0c <get_temp_sensor_data+0x23c>)
    bb52:	9906      	ldr	r1, [sp, #24]
    bb54:	47b8      	blx	r7
    bb56:	4d21      	ldr	r5, [pc, #132]	; (bbdc <get_temp_sensor_data+0x20c>)
    bb58:	9901      	ldr	r1, [sp, #4]
    bb5a:	47a8      	blx	r5
	INT1VM = INT1VR + (((INT1VH - INT1VR) * (coarse_temp - tempR))/(tempH - tempR));
    bb5c:	9901      	ldr	r1, [sp, #4]
    bb5e:	47b0      	blx	r6
    bb60:	9009      	str	r0, [sp, #36]	; 0x24
    bb62:	9902      	ldr	r1, [sp, #8]
    bb64:	9807      	ldr	r0, [sp, #28]
    bb66:	47b0      	blx	r6
    bb68:	1c01      	adds	r1, r0, #0
    bb6a:	9809      	ldr	r0, [sp, #36]	; 0x24
    bb6c:	47b8      	blx	r7
    bb6e:	9905      	ldr	r1, [sp, #20]
    bb70:	47a0      	blx	r4
    bb72:	9902      	ldr	r1, [sp, #8]
    bb74:	47a8      	blx	r5
	VADCM = ((float)raw_code * INT1VM)/ADC_12BIT_FULL_SCALE_VALUE_FLOAT;
    bb76:	9904      	ldr	r1, [sp, #16]
    bb78:	47b8      	blx	r7
    bb7a:	4926      	ldr	r1, [pc, #152]	; (bc14 <get_temp_sensor_data+0x244>)
    bb7c:	47a0      	blx	r4
	fine_temp = tempR + (((tempH - tempR)/(VADCH - VADCR)) * (VADCM - VADCR));
    bb7e:	9903      	ldr	r1, [sp, #12]
    bb80:	47b0      	blx	r6
    bb82:	9906      	ldr	r1, [sp, #24]
    bb84:	47b8      	blx	r7
    bb86:	9901      	ldr	r1, [sp, #4]
    bb88:	47a8      	blx	r5
	float local_temp = 0;
	local_temp = temp_sensor_value(0);
    bb8a:	900d      	str	r0, [sp, #52]	; 0x34
	memcpy(data,(uint8_t *)&local_temp,sizeof(local_temp));	
    bb8c:	2204      	movs	r2, #4
    bb8e:	a90d      	add	r1, sp, #52	; 0x34
    bb90:	9808      	ldr	r0, [sp, #32]
    bb92:	4b25      	ldr	r3, [pc, #148]	; (bc28 <get_temp_sensor_data+0x258>)
    bb94:	4798      	blx	r3
}
    bb96:	b00f      	add	sp, #60	; 0x3c
    bb98:	bc3c      	pop	{r2, r3, r4, r5}
    bb9a:	4690      	mov	r8, r2
    bb9c:	4699      	mov	r9, r3
    bb9e:	46a2      	mov	sl, r4
    bba0:	46ab      	mov	fp, r5
    bba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*result = adc_module->RESULT.reg;
    bba4:	8c82      	ldrh	r2, [r0, #36]	; 0x24
    bba6:	b292      	uxth	r2, r2
	adc_module->INTFLAG.reg = int_flags;
    bba8:	2301      	movs	r3, #1
    bbaa:	7183      	strb	r3, [r0, #6]
	uint32_t int_flags = adc_module->INTFLAG.reg;
    bbac:	7981      	ldrb	r1, [r0, #6]
    bbae:	b2c9      	uxtb	r1, r1
	if (int_flags & ADC_INTFLAG_RESRDY) {
    bbb0:	400b      	ands	r3, r1
	if (int_flags & ADC_INTFLAG_WINMON) {
    bbb2:	074c      	lsls	r4, r1, #29
    bbb4:	d501      	bpl.n	bbba <get_temp_sensor_data+0x1ea>
		status_flags |= ADC_STATUS_WINDOW;
    bbb6:	2402      	movs	r4, #2
    bbb8:	4323      	orrs	r3, r4
	if (int_flags & ADC_INTFLAG_OVERRUN) {
    bbba:	0789      	lsls	r1, r1, #30
    bbbc:	d501      	bpl.n	bbc2 <get_temp_sensor_data+0x1f2>
		status_flags |= ADC_STATUS_OVERRUN;
    bbbe:	2104      	movs	r1, #4
    bbc0:	430b      	orrs	r3, r1
	if (adc_get_status(module_inst) & ADC_STATUS_OVERRUN) {
    bbc2:	075b      	lsls	r3, r3, #29
    bbc4:	d5ac      	bpl.n	bb20 <get_temp_sensor_data+0x150>
	adc_module->INTFLAG.reg = int_flags;
    bbc6:	2302      	movs	r3, #2
    bbc8:	7183      	strb	r3, [r0, #6]
    bbca:	e7a9      	b.n	bb20 <get_temp_sensor_data+0x150>
    bbcc:	00806030 	.word	0x00806030
    bbd0:	00806034 	.word	0x00806034
    bbd4:	0000b8fd 	.word	0x0000b8fd
    bbd8:	00013fb1 	.word	0x00013fb1
    bbdc:	000132f5 	.word	0x000132f5
    bbe0:	20000fb4 	.word	0x20000fb4
    bbe4:	20000fb0 	.word	0x20000fb0
    bbe8:	000159ed 	.word	0x000159ed
    bbec:	000146fd 	.word	0x000146fd
    bbf0:	408f4000 	.word	0x408f4000
    bbf4:	00015265 	.word	0x00015265
    bbf8:	3ff00000 	.word	0x3ff00000
    bbfc:	00015a91 	.word	0x00015a91
    bc00:	20000fa4 	.word	0x20000fa4
    bc04:	20000fa0 	.word	0x20000fa0
    bc08:	00014051 	.word	0x00014051
    bc0c:	000139f9 	.word	0x000139f9
    bc10:	00013619 	.word	0x00013619
    bc14:	457ff000 	.word	0x457ff000
    bc18:	20000fac 	.word	0x20000fac
    bc1c:	20000fa8 	.word	0x20000fa8
    bc20:	200018d4 	.word	0x200018d4
    bc24:	00013c39 	.word	0x00013c39
    bc28:	00015f45 	.word	0x00015f45

0000bc2c <hwTimerExpiryCallback>:
    swtimerProcessOverflow();
}

/* ISR to handle CC0 interrupt from TC0 */
static void hwTimerExpiryCallback(void)
{
    bc2c:	b510      	push	{r4, lr}
    if (0 < runningTimers)
    bc2e:	4b06      	ldr	r3, [pc, #24]	; (bc48 <hwTimerExpiryCallback+0x1c>)
    bc30:	781b      	ldrb	r3, [r3, #0]
    bc32:	2b00      	cmp	r3, #0
    bc34:	d100      	bne.n	bc38 <hwTimerExpiryCallback+0xc>
    {
        isTimerTriggered = true;
        SYSTEM_PostTask(TIMER_TASK_ID);
    }
}
    bc36:	bd10      	pop	{r4, pc}
        isTimerTriggered = true;
    bc38:	2201      	movs	r2, #1
    bc3a:	4b04      	ldr	r3, [pc, #16]	; (bc4c <hwTimerExpiryCallback+0x20>)
    bc3c:	701a      	strb	r2, [r3, #0]
        SYSTEM_PostTask(TIMER_TASK_ID);
    bc3e:	2001      	movs	r0, #1
    bc40:	4b03      	ldr	r3, [pc, #12]	; (bc50 <hwTimerExpiryCallback+0x24>)
    bc42:	4798      	blx	r3
}
    bc44:	e7f7      	b.n	bc36 <hwTimerExpiryCallback+0xa>
    bc46:	46c0      	nop			; (mov r8, r8)
    bc48:	20000fc8 	.word	0x20000fc8
    bc4c:	2000220e 	.word	0x2000220e
    bc50:	0000c555 	.word	0x0000c555

0000bc54 <hwTimerOverflowCallback>:
{
    bc54:	b510      	push	{r4, lr}
    bc56:	b082      	sub	sp, #8
    uint16_t temp = sysTime;
    bc58:	4924      	ldr	r1, [pc, #144]	; (bcec <hwTimerOverflowCallback+0x98>)
    bc5a:	880a      	ldrh	r2, [r1, #0]
    bc5c:	b292      	uxth	r2, r2
    if (++sysTime < temp)
    bc5e:	880b      	ldrh	r3, [r1, #0]
    bc60:	3301      	adds	r3, #1
    bc62:	b29b      	uxth	r3, r3
    bc64:	800b      	strh	r3, [r1, #0]
    bc66:	429a      	cmp	r2, r3
    bc68:	d903      	bls.n	bc72 <hwTimerOverflowCallback+0x1e>
        sysTimeOvf++;
    bc6a:	4a21      	ldr	r2, [pc, #132]	; (bcf0 <hwTimerOverflowCallback+0x9c>)
    bc6c:	6813      	ldr	r3, [r2, #0]
    bc6e:	3301      	adds	r3, #1
    bc70:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    bc72:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
    bc76:	425a      	negs	r2, r3
    bc78:	4153      	adcs	r3, r2
    bc7a:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    bc7c:	b672      	cpsid	i
  __ASM volatile ("dmb");
    bc7e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    bc82:	2200      	movs	r2, #0
    bc84:	4b1b      	ldr	r3, [pc, #108]	; (bcf4 <hwTimerOverflowCallback+0xa0>)
    bc86:	701a      	strb	r2, [r3, #0]
	return flags;
    bc88:	9c01      	ldr	r4, [sp, #4]
{
    uint32_t tmo32;
    uint16_t tmoHigh16, tmoLow16;
    uint8_t flags = cpu_irq_save();

    if (SWTIMER_INVALID != runningTimerQueueHead && !swTimers[runningTimerQueueHead].loaded)
    bc8a:	4b1b      	ldr	r3, [pc, #108]	; (bcf8 <hwTimerOverflowCallback+0xa4>)
    bc8c:	681b      	ldr	r3, [r3, #0]
    bc8e:	2bff      	cmp	r3, #255	; 0xff
    bc90:	d00d      	beq.n	bcae <hwTimerOverflowCallback+0x5a>
    bc92:	0119      	lsls	r1, r3, #4
    bc94:	4a19      	ldr	r2, [pc, #100]	; (bcfc <hwTimerOverflowCallback+0xa8>)
    bc96:	1852      	adds	r2, r2, r1
    bc98:	7b52      	ldrb	r2, [r2, #13]
    bc9a:	2a00      	cmp	r2, #0
    bc9c:	d107      	bne.n	bcae <hwTimerOverflowCallback+0x5a>
    {
        tmo32 = swTimers[runningTimerQueueHead].absoluteExpiryTime;
    bc9e:	4a17      	ldr	r2, [pc, #92]	; (bcfc <hwTimerOverflowCallback+0xa8>)
    bca0:	5888      	ldr	r0, [r1, r2]
        tmoHigh16 = (uint16_t)(tmo32 >> SWTIMER_SYSTIME_SHIFTMASK);

        if (tmoHigh16 == sysTime)
    bca2:	4b12      	ldr	r3, [pc, #72]	; (bcec <hwTimerOverflowCallback+0x98>)
    bca4:	881b      	ldrh	r3, [r3, #0]
    bca6:	b29b      	uxth	r3, r3
    bca8:	0c02      	lsrs	r2, r0, #16
    bcaa:	429a      	cmp	r2, r3
    bcac:	d00a      	beq.n	bcc4 <hwTimerOverflowCallback+0x70>
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
    bcae:	23ff      	movs	r3, #255	; 0xff
    bcb0:	4223      	tst	r3, r4
    bcb2:	d005      	beq.n	bcc0 <hwTimerOverflowCallback+0x6c>
		cpu_irq_enable();
    bcb4:	2201      	movs	r2, #1
    bcb6:	4b0f      	ldr	r3, [pc, #60]	; (bcf4 <hwTimerOverflowCallback+0xa0>)
    bcb8:	701a      	strb	r2, [r3, #0]
    bcba:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    bcbe:	b662      	cpsie	i
}
    bcc0:	b002      	add	sp, #8
    bcc2:	bd10      	pop	{r4, pc}
        {
            tmoLow16 = (uint16_t)(tmo32 & SWTIMER_HWTIME_MASK);
    bcc4:	b280      	uxth	r0, r0
            if (SWTIMER_MIN_TIMEOUT < tmoLow16)
    bcc6:	28ff      	cmp	r0, #255	; 0xff
    bcc8:	d909      	bls.n	bcde <hwTimerOverflowCallback+0x8a>
            {
                common_tc_delay(tmoLow16);
    bcca:	4b0d      	ldr	r3, [pc, #52]	; (bd00 <hwTimerOverflowCallback+0xac>)
    bccc:	4798      	blx	r3
                swTimers[runningTimerQueueHead].loaded = true;
    bcce:	4b0a      	ldr	r3, [pc, #40]	; (bcf8 <hwTimerOverflowCallback+0xa4>)
    bcd0:	681a      	ldr	r2, [r3, #0]
    bcd2:	0112      	lsls	r2, r2, #4
    bcd4:	4b09      	ldr	r3, [pc, #36]	; (bcfc <hwTimerOverflowCallback+0xa8>)
    bcd6:	189b      	adds	r3, r3, r2
    bcd8:	2201      	movs	r2, #1
    bcda:	735a      	strb	r2, [r3, #13]
    bcdc:	e7e7      	b.n	bcae <hwTimerOverflowCallback+0x5a>
            }
            else
            {
                isTimerTriggered = true;
    bcde:	2201      	movs	r2, #1
    bce0:	4b08      	ldr	r3, [pc, #32]	; (bd04 <hwTimerOverflowCallback+0xb0>)
    bce2:	701a      	strb	r2, [r3, #0]
                SYSTEM_PostTask(TIMER_TASK_ID);
    bce4:	2001      	movs	r0, #1
    bce6:	4b08      	ldr	r3, [pc, #32]	; (bd08 <hwTimerOverflowCallback+0xb4>)
    bce8:	4798      	blx	r3
    bcea:	e7e0      	b.n	bcae <hwTimerOverflowCallback+0x5a>
    bcec:	2000220c 	.word	0x2000220c
    bcf0:	20002210 	.word	0x20002210
    bcf4:	20000008 	.word	0x20000008
    bcf8:	20000fc4 	.word	0x20000fc4
    bcfc:	2000207c 	.word	0x2000207c
    bd00:	00012bcd 	.word	0x00012bcd
    bd04:	2000220e 	.word	0x2000220e
    bd08:	0000c555 	.word	0x0000c555

0000bd0c <loadHwTimer>:
{
    bd0c:	b570      	push	{r4, r5, r6, lr}
    bd0e:	0004      	movs	r4, r0
    if (SWTIMER_INVALID != timerId)
    bd10:	28ff      	cmp	r0, #255	; 0xff
    bd12:	d030      	beq.n	bd76 <loadHwTimer+0x6a>
    time |= ((uint64_t) sysTimeOvf) << 32;
    bd14:	4b19      	ldr	r3, [pc, #100]	; (bd7c <loadHwTimer+0x70>)
    bd16:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    bd18:	4b19      	ldr	r3, [pc, #100]	; (bd80 <loadHwTimer+0x74>)
    bd1a:	881d      	ldrh	r5, [r3, #0]
    bd1c:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    bd1e:	4b19      	ldr	r3, [pc, #100]	; (bd84 <loadHwTimer+0x78>)
    bd20:	4798      	blx	r3
        uint32_t expiryTime = swTimers[timerId].absoluteExpiryTime;
    bd22:	0123      	lsls	r3, r4, #4
    time |= (uint64_t) common_tc_read_count();
    bd24:	4328      	orrs	r0, r5
    return ((t2 - t1) < INT32_MAX);
    bd26:	4a18      	ldr	r2, [pc, #96]	; (bd88 <loadHwTimer+0x7c>)
    bd28:	589b      	ldr	r3, [r3, r2]
    bd2a:	1a18      	subs	r0, r3, r0
        if (swtimerCompareTime(now, expiryTime))
    bd2c:	4b17      	ldr	r3, [pc, #92]	; (bd8c <loadHwTimer+0x80>)
    bd2e:	4298      	cmp	r0, r3
    bd30:	d81a      	bhi.n	bd68 <loadHwTimer+0x5c>
            if (!swTimers[timerId].loaded)
    bd32:	0122      	lsls	r2, r4, #4
    bd34:	4b14      	ldr	r3, [pc, #80]	; (bd88 <loadHwTimer+0x7c>)
    bd36:	189b      	adds	r3, r3, r2
    bd38:	7b5b      	ldrb	r3, [r3, #13]
    bd3a:	2b00      	cmp	r3, #0
    bd3c:	d11d      	bne.n	bd7a <loadHwTimer+0x6e>
                if (SWTIMER_MIN_TIMEOUT >= timeDiff)
    bd3e:	28ff      	cmp	r0, #255	; 0xff
    bd40:	d90b      	bls.n	bd5a <loadHwTimer+0x4e>
                else  if ((uint32_t)TIMER_PERIOD >= timeDiff)
    bd42:	4b13      	ldr	r3, [pc, #76]	; (bd90 <loadHwTimer+0x84>)
    bd44:	4298      	cmp	r0, r3
    bd46:	d818      	bhi.n	bd7a <loadHwTimer+0x6e>
                    common_tc_delay((uint16_t)timeDiff);
    bd48:	b280      	uxth	r0, r0
    bd4a:	4b12      	ldr	r3, [pc, #72]	; (bd94 <loadHwTimer+0x88>)
    bd4c:	4798      	blx	r3
                    swTimers[timerId].loaded = true;
    bd4e:	0124      	lsls	r4, r4, #4
    bd50:	4b0d      	ldr	r3, [pc, #52]	; (bd88 <loadHwTimer+0x7c>)
    bd52:	191c      	adds	r4, r3, r4
    bd54:	2301      	movs	r3, #1
    bd56:	7363      	strb	r3, [r4, #13]
    bd58:	e00f      	b.n	bd7a <loadHwTimer+0x6e>
                    isTimerTriggered = true;
    bd5a:	2201      	movs	r2, #1
    bd5c:	4b0e      	ldr	r3, [pc, #56]	; (bd98 <loadHwTimer+0x8c>)
    bd5e:	701a      	strb	r2, [r3, #0]
                    SYSTEM_PostTask(TIMER_TASK_ID);
    bd60:	2001      	movs	r0, #1
    bd62:	4b0e      	ldr	r3, [pc, #56]	; (bd9c <loadHwTimer+0x90>)
    bd64:	4798      	blx	r3
    bd66:	e008      	b.n	bd7a <loadHwTimer+0x6e>
            isTimerTriggered = true;
    bd68:	2201      	movs	r2, #1
    bd6a:	4b0b      	ldr	r3, [pc, #44]	; (bd98 <loadHwTimer+0x8c>)
    bd6c:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    bd6e:	2001      	movs	r0, #1
    bd70:	4b0a      	ldr	r3, [pc, #40]	; (bd9c <loadHwTimer+0x90>)
    bd72:	4798      	blx	r3
    bd74:	e001      	b.n	bd7a <loadHwTimer+0x6e>
        common_tc_compare_stop();
    bd76:	4b0a      	ldr	r3, [pc, #40]	; (bda0 <loadHwTimer+0x94>)
    bd78:	4798      	blx	r3
}
    bd7a:	bd70      	pop	{r4, r5, r6, pc}
    bd7c:	20002210 	.word	0x20002210
    bd80:	2000220c 	.word	0x2000220c
    bd84:	00012b25 	.word	0x00012b25
    bd88:	2000207c 	.word	0x2000207c
    bd8c:	7ffffffe 	.word	0x7ffffffe
    bd90:	0000ffff 	.word	0x0000ffff
    bd94:	00012bcd 	.word	0x00012bcd
    bd98:	2000220e 	.word	0x2000220e
    bd9c:	0000c555 	.word	0x0000c555
    bda0:	00012b71 	.word	0x00012b71

0000bda4 <swtimerInternalHandler>:

/**************************************************************************//**
\brief Internal handler for the timer trigger
******************************************************************************/
static void swtimerInternalHandler(void)
{
    bda4:	b510      	push	{r4, lr}
    if (isTimerTriggered)
    bda6:	4b1d      	ldr	r3, [pc, #116]	; (be1c <swtimerInternalHandler+0x78>)
    bda8:	781b      	ldrb	r3, [r3, #0]
    bdaa:	2b00      	cmp	r3, #0
    bdac:	d027      	beq.n	bdfe <swtimerInternalHandler+0x5a>
    {
        isTimerTriggered = false;
    bdae:	2200      	movs	r2, #0
    bdb0:	4b1a      	ldr	r3, [pc, #104]	; (be1c <swtimerInternalHandler+0x78>)
    bdb2:	701a      	strb	r2, [r3, #0]

        if (0 < runningTimers)
    bdb4:	4b1a      	ldr	r3, [pc, #104]	; (be20 <swtimerInternalHandler+0x7c>)
    bdb6:	781b      	ldrb	r3, [r3, #0]
    bdb8:	2b00      	cmp	r3, #0
    bdba:	d020      	beq.n	bdfe <swtimerInternalHandler+0x5a>
        { /* Holds the number of running timers */
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    bdbc:	4b19      	ldr	r3, [pc, #100]	; (be24 <swtimerInternalHandler+0x80>)
    bdbe:	681b      	ldr	r3, [r3, #0]
    bdc0:	2bff      	cmp	r3, #255	; 0xff
    bdc2:	d01d      	beq.n	be00 <swtimerInternalHandler+0x5c>
                expiredTimerQueueHead = runningTimerQueueHead;
                expiredTimerQueueTail = runningTimerQueueHead;
            }
            else
            { /* there were already some timers expired before this one */
                swTimers[expiredTimerQueueTail].nextTimer = runningTimerQueueHead;
    bdc4:	4b18      	ldr	r3, [pc, #96]	; (be28 <swtimerInternalHandler+0x84>)
    bdc6:	6818      	ldr	r0, [r3, #0]
    bdc8:	4918      	ldr	r1, [pc, #96]	; (be2c <swtimerInternalHandler+0x88>)
    bdca:	680b      	ldr	r3, [r1, #0]
    bdcc:	011a      	lsls	r2, r3, #4
    bdce:	4b18      	ldr	r3, [pc, #96]	; (be30 <swtimerInternalHandler+0x8c>)
    bdd0:	189b      	adds	r3, r3, r2
    bdd2:	7318      	strb	r0, [r3, #12]
                expiredTimerQueueTail = runningTimerQueueHead;
    bdd4:	6008      	str	r0, [r1, #0]
            }

            runningTimerQueueHead = swTimers[runningTimerQueueHead].nextTimer;
    bdd6:	4a16      	ldr	r2, [pc, #88]	; (be30 <swtimerInternalHandler+0x8c>)
    bdd8:	4913      	ldr	r1, [pc, #76]	; (be28 <swtimerInternalHandler+0x84>)
    bdda:	680b      	ldr	r3, [r1, #0]
    bddc:	011b      	lsls	r3, r3, #4
    bdde:	18d3      	adds	r3, r2, r3
    bde0:	7b18      	ldrb	r0, [r3, #12]
    bde2:	6008      	str	r0, [r1, #0]

            swTimers[expiredTimerQueueTail].nextTimer = SWTIMER_INVALID;
    bde4:	4b11      	ldr	r3, [pc, #68]	; (be2c <swtimerInternalHandler+0x88>)
    bde6:	681b      	ldr	r3, [r3, #0]
    bde8:	011b      	lsls	r3, r3, #4
    bdea:	18d2      	adds	r2, r2, r3
    bdec:	23ff      	movs	r3, #255	; 0xff
    bdee:	7313      	strb	r3, [r2, #12]

            if ((--runningTimers) > 0)
    bdf0:	4a0b      	ldr	r2, [pc, #44]	; (be20 <swtimerInternalHandler+0x7c>)
    bdf2:	7813      	ldrb	r3, [r2, #0]
    bdf4:	3b01      	subs	r3, #1
    bdf6:	b2db      	uxtb	r3, r3
    bdf8:	7013      	strb	r3, [r2, #0]
    bdfa:	2b00      	cmp	r3, #0
    bdfc:	d10b      	bne.n	be16 <swtimerInternalHandler+0x72>
            { /* keep the ball rolling! load the next head timer from the queue */
                loadHwTimer(runningTimerQueueHead);
            }
        }
    }
}
    bdfe:	bd10      	pop	{r4, pc}
                (expiredTimerQueueTail == SWTIMER_INVALID))
    be00:	4b0a      	ldr	r3, [pc, #40]	; (be2c <swtimerInternalHandler+0x88>)
            if ((expiredTimerQueueHead == SWTIMER_INVALID) && \
    be02:	681b      	ldr	r3, [r3, #0]
    be04:	2bff      	cmp	r3, #255	; 0xff
    be06:	d1dd      	bne.n	bdc4 <swtimerInternalHandler+0x20>
                expiredTimerQueueHead = runningTimerQueueHead;
    be08:	4b07      	ldr	r3, [pc, #28]	; (be28 <swtimerInternalHandler+0x84>)
    be0a:	681b      	ldr	r3, [r3, #0]
    be0c:	4a05      	ldr	r2, [pc, #20]	; (be24 <swtimerInternalHandler+0x80>)
    be0e:	6013      	str	r3, [r2, #0]
                expiredTimerQueueTail = runningTimerQueueHead;
    be10:	4a06      	ldr	r2, [pc, #24]	; (be2c <swtimerInternalHandler+0x88>)
    be12:	6013      	str	r3, [r2, #0]
    be14:	e7df      	b.n	bdd6 <swtimerInternalHandler+0x32>
                loadHwTimer(runningTimerQueueHead);
    be16:	4b07      	ldr	r3, [pc, #28]	; (be34 <swtimerInternalHandler+0x90>)
    be18:	4798      	blx	r3
}
    be1a:	e7f0      	b.n	bdfe <swtimerInternalHandler+0x5a>
    be1c:	2000220e 	.word	0x2000220e
    be20:	20000fc8 	.word	0x20000fc8
    be24:	20000fbc 	.word	0x20000fbc
    be28:	20000fc4 	.word	0x20000fc4
    be2c:	20000fc0 	.word	0x20000fc0
    be30:	2000207c 	.word	0x2000207c
    be34:	0000bd0d 	.word	0x0000bd0d

0000be38 <SwTimerReset>:
    /*
    * Initialize the timer resources like timer arrays queues, timer registers
    */
    uint8_t index;

    runningTimers = 0u;
    be38:	2300      	movs	r3, #0
    be3a:	4a0d      	ldr	r2, [pc, #52]	; (be70 <SwTimerReset+0x38>)
    be3c:	7013      	strb	r3, [r2, #0]
    isTimerTriggered = false;
    be3e:	4a0d      	ldr	r2, [pc, #52]	; (be74 <SwTimerReset+0x3c>)
    be40:	7013      	strb	r3, [r2, #0]

    runningTimerQueueHead = SWTIMER_INVALID;
    be42:	33ff      	adds	r3, #255	; 0xff
    be44:	4a0c      	ldr	r2, [pc, #48]	; (be78 <SwTimerReset+0x40>)
    be46:	6013      	str	r3, [r2, #0]
    expiredTimerQueueHead = SWTIMER_INVALID;
    be48:	4a0c      	ldr	r2, [pc, #48]	; (be7c <SwTimerReset+0x44>)
    be4a:	6013      	str	r3, [r2, #0]
    expiredTimerQueueTail = SWTIMER_INVALID;
    be4c:	4a0c      	ldr	r2, [pc, #48]	; (be80 <SwTimerReset+0x48>)
    be4e:	6013      	str	r3, [r2, #0]
    be50:	4b0c      	ldr	r3, [pc, #48]	; (be84 <SwTimerReset+0x4c>)
    be52:	0018      	movs	r0, r3
    be54:	3091      	adds	r0, #145	; 0x91
    be56:	30ff      	adds	r0, #255	; 0xff

    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    {
        swTimers[index].nextTimer = SWTIMER_INVALID;
    be58:	21ff      	movs	r1, #255	; 0xff
        swTimers[index].timerCb = NULL;
    be5a:	2200      	movs	r2, #0
        swTimers[index].nextTimer = SWTIMER_INVALID;
    be5c:	7219      	strb	r1, [r3, #8]
        swTimers[index].timerCb = NULL;
    be5e:	601a      	str	r2, [r3, #0]
    be60:	3310      	adds	r3, #16
    for (index = 0; index < TOTAL_NUMBER_OF_SW_TIMERS; index++)
    be62:	4283      	cmp	r3, r0
    be64:	d1fa      	bne.n	be5c <SwTimerReset+0x24>
    }

    allocatedTimerId = 0u;
    be66:	2200      	movs	r2, #0
    be68:	4b07      	ldr	r3, [pc, #28]	; (be88 <SwTimerReset+0x50>)
    be6a:	701a      	strb	r2, [r3, #0]
}
    be6c:	4770      	bx	lr
    be6e:	46c0      	nop			; (mov r8, r8)
    be70:	20000fc8 	.word	0x20000fc8
    be74:	2000220e 	.word	0x2000220e
    be78:	20000fc4 	.word	0x20000fc4
    be7c:	20000fbc 	.word	0x20000fbc
    be80:	20000fc0 	.word	0x20000fc0
    be84:	20002080 	.word	0x20002080
    be88:	20000fb8 	.word	0x20000fb8

0000be8c <SystemTimerInit>:

/**************************************************************************//**
\brief Initializes the Software Timer module
******************************************************************************/
void SystemTimerInit(void)
{
    be8c:	b510      	push	{r4, lr}
    SwTimerReset();
    be8e:	4b08      	ldr	r3, [pc, #32]	; (beb0 <SystemTimerInit+0x24>)
    be90:	4798      	blx	r3

    /* initialize system time parameters */
    sysTimeOvf = sysTime = 0u;
    be92:	2300      	movs	r3, #0
    be94:	4a07      	ldr	r2, [pc, #28]	; (beb4 <SystemTimerInit+0x28>)
    be96:	8013      	strh	r3, [r2, #0]
    be98:	4a07      	ldr	r2, [pc, #28]	; (beb8 <SystemTimerInit+0x2c>)
    be9a:	6013      	str	r3, [r2, #0]

    common_tc_init();
    be9c:	4b07      	ldr	r3, [pc, #28]	; (bebc <SystemTimerInit+0x30>)
    be9e:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    bea0:	4807      	ldr	r0, [pc, #28]	; (bec0 <SystemTimerInit+0x34>)
    bea2:	4b08      	ldr	r3, [pc, #32]	; (bec4 <SystemTimerInit+0x38>)
    bea4:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    bea6:	4808      	ldr	r0, [pc, #32]	; (bec8 <SystemTimerInit+0x3c>)
    bea8:	4b08      	ldr	r3, [pc, #32]	; (becc <SystemTimerInit+0x40>)
    beaa:	4798      	blx	r3
}
    beac:	bd10      	pop	{r4, pc}
    beae:	46c0      	nop			; (mov r8, r8)
    beb0:	0000be39 	.word	0x0000be39
    beb4:	2000220c 	.word	0x2000220c
    beb8:	20002210 	.word	0x20002210
    bebc:	00012c39 	.word	0x00012c39
    bec0:	0000bc55 	.word	0x0000bc55
    bec4:	00012cbd 	.word	0x00012cbd
    bec8:	0000bc2d 	.word	0x0000bc2d
    becc:	00012cc9 	.word	0x00012cc9

0000bed0 <SwTimerGetTime>:
/**************************************************************************//**
\brief Get current system time.
\return Returns current system time in microseconds
******************************************************************************/
uint64_t SwTimerGetTime(void)
{
    bed0:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    bed2:	4b05      	ldr	r3, [pc, #20]	; (bee8 <SwTimerGetTime+0x18>)
    bed4:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    bed6:	4b05      	ldr	r3, [pc, #20]	; (beec <SwTimerGetTime+0x1c>)
    bed8:	881d      	ldrh	r5, [r3, #0]
    beda:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    bedc:	4b04      	ldr	r3, [pc, #16]	; (bef0 <SwTimerGetTime+0x20>)
    bede:	4798      	blx	r3
    bee0:	4328      	orrs	r0, r5
    return gettime();
}
    bee2:	0021      	movs	r1, r4
    bee4:	bd70      	pop	{r4, r5, r6, pc}
    bee6:	46c0      	nop			; (mov r8, r8)
    bee8:	20002210 	.word	0x20002210
    beec:	2000220c 	.word	0x2000220c
    bef0:	00012b25 	.word	0x00012b25

0000bef4 <SwTimerCreate>:

\return LORAWAN_SUCCESS if new timerId is allocated
        LORAWAN_RESOURCE_UNAVAILABLE if there is no more timerId to allocate
******************************************************************************/
StackRetStatus_t SwTimerCreate(uint8_t *timerId)
{
    bef4:	b510      	push	{r4, lr}
    bef6:	0004      	movs	r4, r0
    StackRetStatus_t retVal = LORAWAN_SUCCESS;

    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    bef8:	4b08      	ldr	r3, [pc, #32]	; (bf1c <SwTimerCreate+0x28>)
    befa:	781b      	ldrb	r3, [r3, #0]
        * If you reach this spot it means the TOTAL_NUMBER_OF_SW_TIMERS
        * is #defined to a lower value than the number of timers that have
        * been SwTimerCreate()
        */
        SYS_ASSERT_FATAL(ASSERT_HAL_TIMERID_EXHAUSTED);
        retVal = LORAWAN_RESOURCE_UNAVAILABLE;
    befc:	2014      	movs	r0, #20
    if (allocatedTimerId < TOTAL_NUMBER_OF_SW_TIMERS)
    befe:	2b18      	cmp	r3, #24
    bf00:	d900      	bls.n	bf04 <SwTimerCreate+0x10>
    }

    return retVal;
}
    bf02:	bd10      	pop	{r4, pc}
        ATOMIC_SECTION_ENTER
    bf04:	4b06      	ldr	r3, [pc, #24]	; (bf20 <SwTimerCreate+0x2c>)
    bf06:	4798      	blx	r3
        *timerId = allocatedTimerId;
    bf08:	4a04      	ldr	r2, [pc, #16]	; (bf1c <SwTimerCreate+0x28>)
    bf0a:	7813      	ldrb	r3, [r2, #0]
    bf0c:	7023      	strb	r3, [r4, #0]
        allocatedTimerId++;
    bf0e:	3301      	adds	r3, #1
    bf10:	7013      	strb	r3, [r2, #0]
        ATOMIC_SECTION_EXIT
    bf12:	4b04      	ldr	r3, [pc, #16]	; (bf24 <SwTimerCreate+0x30>)
    bf14:	4798      	blx	r3
    StackRetStatus_t retVal = LORAWAN_SUCCESS;
    bf16:	2008      	movs	r0, #8
    bf18:	e7f3      	b.n	bf02 <SwTimerCreate+0xe>
    bf1a:	46c0      	nop			; (mov r8, r8)
    bf1c:	20000fb8 	.word	0x20000fb8
    bf20:	00005615 	.word	0x00005615
    bf24:	00005621 	.word	0x00005621

0000bf28 <SwTimerStart>:
        LORAWAN_INVALID_REQUEST if \timerId is already running
        LORAWAN_SUCCESS if \timerId is successfully queued for running
******************************************************************************/
StackRetStatus_t SwTimerStart(uint8_t timerId, uint32_t timerCount,
    SwTimeoutType_t timeoutType, void *timerCb, void *paramCb)
{
    bf28:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf2a:	46d6      	mov	lr, sl
    bf2c:	464f      	mov	r7, r9
    bf2e:	4646      	mov	r6, r8
    bf30:	b5c0      	push	{r6, r7, lr}
    bf32:	b084      	sub	sp, #16
    bf34:	0007      	movs	r7, r0
    bf36:	000d      	movs	r5, r1
    bf38:	0016      	movs	r6, r2
    bf3a:	001c      	movs	r4, r3
    uint32_t pointInTime;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    bf3c:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId || NULL == timerCb)
    bf3e:	2f18      	cmp	r7, #24
    bf40:	d809      	bhi.n	bf56 <SwTimerStart+0x2e>
    bf42:	2b00      	cmp	r3, #0
    bf44:	d100      	bne.n	bf48 <SwTimerStart+0x20>
    bf46:	e08c      	b.n	c062 <SwTimerStart+0x13a>
    }

    if (NULL != swTimers[timerId].timerCb)
    bf48:	013a      	lsls	r2, r7, #4
    bf4a:	4b52      	ldr	r3, [pc, #328]	; (c094 <SwTimerStart+0x16c>)
    bf4c:	189b      	adds	r3, r3, r2
    bf4e:	685b      	ldr	r3, [r3, #4]
        /*
        * Timer is already running if the callback function of the
        * corresponding timer index in the timer array is not NULL.
        */
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_START_FAILURE);
        return LORAWAN_INVALID_REQUEST;
    bf50:	300b      	adds	r0, #11
    if (NULL != swTimers[timerId].timerCb)
    bf52:	2b00      	cmp	r3, #0
    bf54:	d005      	beq.n	bf62 <SwTimerStart+0x3a>
        }
    }

    swtimerStartAbsoluteTimer(timerId, pointInTime, timerCb, paramCb);
    return LORAWAN_SUCCESS;
}
    bf56:	b004      	add	sp, #16
    bf58:	bc1c      	pop	{r2, r3, r4}
    bf5a:	4690      	mov	r8, r2
    bf5c:	4699      	mov	r9, r3
    bf5e:	46a2      	mov	sl, r4
    bf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
    time |= ((uint64_t) sysTimeOvf) << 32;
    bf62:	4b4d      	ldr	r3, [pc, #308]	; (c098 <SwTimerStart+0x170>)
    bf64:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    bf66:	4b4d      	ldr	r3, [pc, #308]	; (c09c <SwTimerStart+0x174>)
    bf68:	8818      	ldrh	r0, [r3, #0]
    bf6a:	0403      	lsls	r3, r0, #16
    bf6c:	4698      	mov	r8, r3
    time |= (uint64_t) common_tc_read_count();
    bf6e:	4b4c      	ldr	r3, [pc, #304]	; (c0a0 <SwTimerStart+0x178>)
    bf70:	4798      	blx	r3
    bf72:	4643      	mov	r3, r8
    bf74:	4303      	orrs	r3, r0
    switch (timeoutType)
    bf76:	2e00      	cmp	r6, #0
    bf78:	d003      	beq.n	bf82 <SwTimerStart+0x5a>
    bf7a:	2e01      	cmp	r6, #1
    bf7c:	d038      	beq.n	bff0 <SwTimerStart+0xc8>
            return LORAWAN_INVALID_PARAMETER;
    bf7e:	200a      	movs	r0, #10
    bf80:	e7e9      	b.n	bf56 <SwTimerStart+0x2e>
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    bf82:	4948      	ldr	r1, [pc, #288]	; (c0a4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    bf84:	200a      	movs	r0, #10
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    bf86:	002a      	movs	r2, r5
    bf88:	3aff      	subs	r2, #255	; 0xff
            pointInTime = ADD_TIME(timerCount, now);
    bf8a:	18ed      	adds	r5, r5, r3
            if ((timerCount > SWTIMER_MAX_TIMEOUT) || \
    bf8c:	428a      	cmp	r2, r1
    bf8e:	d8e2      	bhi.n	bf56 <SwTimerStart+0x2e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    bf90:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    bf94:	425a      	negs	r2, r3
    bf96:	4153      	adcs	r3, r2
    bf98:	9303      	str	r3, [sp, #12]
  __ASM volatile ("cpsid i" : : : "memory");
    bf9a:	b672      	cpsid	i
    bf9c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    bfa0:	2600      	movs	r6, #0
    bfa2:	4b41      	ldr	r3, [pc, #260]	; (c0a8 <SwTimerStart+0x180>)
    bfa4:	701e      	strb	r6, [r3, #0]
	return flags;
    bfa6:	9b03      	ldr	r3, [sp, #12]
    bfa8:	4699      	mov	r9, r3
    swtimerInternalHandler();
    bfaa:	4b40      	ldr	r3, [pc, #256]	; (c0ac <SwTimerStart+0x184>)
    bfac:	4798      	blx	r3
    swTimers[timerId].absoluteExpiryTime = pointInTime;
    bfae:	4b39      	ldr	r3, [pc, #228]	; (c094 <SwTimerStart+0x16c>)
    bfb0:	013a      	lsls	r2, r7, #4
    bfb2:	50d5      	str	r5, [r2, r3]
    swTimers[timerId].timerCb = (void (*)(void*))handlerCb;
    bfb4:	189b      	adds	r3, r3, r2
    bfb6:	605c      	str	r4, [r3, #4]
    swTimers[timerId].paramCb = parameter;
    bfb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bfba:	609a      	str	r2, [r3, #8]
    swTimers[timerId].loaded = false;
    bfbc:	735e      	strb	r6, [r3, #13]
    runningTimers++;
    bfbe:	4a3c      	ldr	r2, [pc, #240]	; (c0b0 <SwTimerStart+0x188>)
    bfc0:	7813      	ldrb	r3, [r2, #0]
    bfc2:	3301      	adds	r3, #1
    bfc4:	b2db      	uxtb	r3, r3
    bfc6:	7013      	strb	r3, [r2, #0]
    if (SWTIMER_INVALID == runningTimerQueueHead)
    bfc8:	4b3a      	ldr	r3, [pc, #232]	; (c0b4 <SwTimerStart+0x18c>)
    bfca:	681b      	ldr	r3, [r3, #0]
    bfcc:	469a      	mov	sl, r3
    bfce:	2bff      	cmp	r3, #255	; 0xff
    bfd0:	d016      	beq.n	c000 <SwTimerStart+0xd8>
        uint8_t currIndex = runningTimerQueueHead;
    bfd2:	466a      	mov	r2, sp
    bfd4:	7013      	strb	r3, [r2, #0]
    bfd6:	7812      	ldrb	r2, [r2, #0]
        for (index = 0; index < runningTimers; index++)
    bfd8:	4b35      	ldr	r3, [pc, #212]	; (c0b0 <SwTimerStart+0x188>)
    bfda:	781b      	ldrb	r3, [r3, #0]
    bfdc:	2b00      	cmp	r3, #0
    bfde:	d042      	beq.n	c066 <SwTimerStart+0x13e>
    bfe0:	9200      	str	r2, [sp, #0]
    bfe2:	2300      	movs	r3, #0
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    bfe4:	492b      	ldr	r1, [pc, #172]	; (c094 <SwTimerStart+0x16c>)
    bfe6:	4688      	mov	r8, r1
    bfe8:	4833      	ldr	r0, [pc, #204]	; (c0b8 <SwTimerStart+0x190>)
                    currIndex = swTimers[currIndex].nextTimer;
    bfea:	468c      	mov	ip, r1
        for (index = 0; index < runningTimers; index++)
    bfec:	4c30      	ldr	r4, [pc, #192]	; (c0b0 <SwTimerStart+0x188>)
    bfee:	e02a      	b.n	c046 <SwTimerStart+0x11e>
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    bff0:	0028      	movs	r0, r5
    bff2:	38ff      	subs	r0, #255	; 0xff
    bff4:	1ac3      	subs	r3, r0, r3
    bff6:	4a2b      	ldr	r2, [pc, #172]	; (c0a4 <SwTimerStart+0x17c>)
                return LORAWAN_INVALID_PARAMETER;
    bff8:	200a      	movs	r0, #10
            if ((timeout > SWTIMER_MAX_TIMEOUT) || \
    bffa:	4293      	cmp	r3, r2
    bffc:	d9c8      	bls.n	bf90 <SwTimerStart+0x68>
    bffe:	e7aa      	b.n	bf56 <SwTimerStart+0x2e>
        runningTimerQueueHead = timerId;
    c000:	4b2c      	ldr	r3, [pc, #176]	; (c0b4 <SwTimerStart+0x18c>)
    c002:	601f      	str	r7, [r3, #0]
        loadHwTimer(runningTimerQueueHead);
    c004:	0038      	movs	r0, r7
    c006:	4b2d      	ldr	r3, [pc, #180]	; (c0bc <SwTimerStart+0x194>)
    c008:	4798      	blx	r3
    c00a:	e036      	b.n	c07a <SwTimerStart+0x152>
                    swTimers[timerId].nextTimer = currIndex;
    c00c:	4b21      	ldr	r3, [pc, #132]	; (c094 <SwTimerStart+0x16c>)
    c00e:	013c      	lsls	r4, r7, #4
    c010:	191c      	adds	r4, r3, r4
    c012:	7322      	strb	r2, [r4, #12]
                    swTimers[currIndex].loaded = false;
    c014:	9901      	ldr	r1, [sp, #4]
    c016:	0109      	lsls	r1, r1, #4
    c018:	1859      	adds	r1, r3, r1
    c01a:	2300      	movs	r3, #0
    c01c:	734b      	strb	r3, [r1, #13]
                    if (runningTimerQueueHead == currIndex)
    c01e:	4592      	cmp	sl, r2
    c020:	d005      	beq.n	c02e <SwTimerStart+0x106>
                        swTimers[prevIndex].nextTimer = timerId;
    c022:	9b00      	ldr	r3, [sp, #0]
    c024:	0118      	lsls	r0, r3, #4
    c026:	4b1b      	ldr	r3, [pc, #108]	; (c094 <SwTimerStart+0x16c>)
    c028:	1818      	adds	r0, r3, r0
    c02a:	7307      	strb	r7, [r0, #12]
    c02c:	e025      	b.n	c07a <SwTimerStart+0x152>
                        runningTimerQueueHead = timerId;
    c02e:	4b21      	ldr	r3, [pc, #132]	; (c0b4 <SwTimerStart+0x18c>)
    c030:	601f      	str	r7, [r3, #0]
                        loadHwTimer(runningTimerQueueHead);
    c032:	0038      	movs	r0, r7
    c034:	4b21      	ldr	r3, [pc, #132]	; (c0bc <SwTimerStart+0x194>)
    c036:	4798      	blx	r3
    c038:	e01f      	b.n	c07a <SwTimerStart+0x152>
        for (index = 0; index < runningTimers; index++)
    c03a:	3301      	adds	r3, #1
    c03c:	b2db      	uxtb	r3, r3
    c03e:	7821      	ldrb	r1, [r4, #0]
    c040:	b2c9      	uxtb	r1, r1
    c042:	428b      	cmp	r3, r1
    c044:	d210      	bcs.n	c068 <SwTimerStart+0x140>
            if (SWTIMER_INVALID != currIndex)
    c046:	2aff      	cmp	r2, #255	; 0xff
    c048:	d0f7      	beq.n	c03a <SwTimerStart+0x112>
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c04a:	9201      	str	r2, [sp, #4]
    c04c:	0111      	lsls	r1, r2, #4
    return ((t2 - t1) < INT32_MAX);
    c04e:	4646      	mov	r6, r8
    c050:	5989      	ldr	r1, [r1, r6]
    c052:	1a69      	subs	r1, r5, r1
                if (swtimerCompareTime(swTimers[currIndex].absoluteExpiryTime,
    c054:	4281      	cmp	r1, r0
    c056:	d8d9      	bhi.n	c00c <SwTimerStart+0xe4>
                    currIndex = swTimers[currIndex].nextTimer;
    c058:	0111      	lsls	r1, r2, #4
    c05a:	4461      	add	r1, ip
    c05c:	9200      	str	r2, [sp, #0]
    c05e:	7b0a      	ldrb	r2, [r1, #12]
    c060:	e7eb      	b.n	c03a <SwTimerStart+0x112>
        return LORAWAN_INVALID_PARAMETER;
    c062:	200a      	movs	r0, #10
    c064:	e777      	b.n	bf56 <SwTimerStart+0x2e>
        uint8_t prevIndex = runningTimerQueueHead;
    c066:	9200      	str	r2, [sp, #0]
            swTimers[prevIndex].nextTimer = timerId;
    c068:	4b0a      	ldr	r3, [pc, #40]	; (c094 <SwTimerStart+0x16c>)
    c06a:	9a00      	ldr	r2, [sp, #0]
    c06c:	0110      	lsls	r0, r2, #4
    c06e:	1818      	adds	r0, r3, r0
    c070:	7307      	strb	r7, [r0, #12]
            swTimers[timerId].nextTimer = SWTIMER_INVALID;
    c072:	013f      	lsls	r7, r7, #4
    c074:	19df      	adds	r7, r3, r7
    c076:	23ff      	movs	r3, #255	; 0xff
    c078:	733b      	strb	r3, [r7, #12]
	if (cpu_irq_is_enabled_flags(flags))
    c07a:	23ff      	movs	r3, #255	; 0xff
    return LORAWAN_SUCCESS;
    c07c:	2008      	movs	r0, #8
    c07e:	464a      	mov	r2, r9
    c080:	4213      	tst	r3, r2
    c082:	d100      	bne.n	c086 <SwTimerStart+0x15e>
    c084:	e767      	b.n	bf56 <SwTimerStart+0x2e>
		cpu_irq_enable();
    c086:	2201      	movs	r2, #1
    c088:	4b07      	ldr	r3, [pc, #28]	; (c0a8 <SwTimerStart+0x180>)
    c08a:	701a      	strb	r2, [r3, #0]
    c08c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c090:	b662      	cpsie	i
    c092:	e760      	b.n	bf56 <SwTimerStart+0x2e>
    c094:	2000207c 	.word	0x2000207c
    c098:	20002210 	.word	0x20002210
    c09c:	2000220c 	.word	0x2000220c
    c0a0:	00012b25 	.word	0x00012b25
    c0a4:	7fffff00 	.word	0x7fffff00
    c0a8:	20000008 	.word	0x20000008
    c0ac:	0000bda5 	.word	0x0000bda5
    c0b0:	20000fc8 	.word	0x20000fc8
    c0b4:	20000fc4 	.word	0x20000fc4
    c0b8:	7ffffffe 	.word	0x7ffffffe
    c0bc:	0000bd0d 	.word	0x0000bd0d

0000c0c0 <SwTimerIsRunning>:
\param[in] timerId Timer ID to be checked for running
\return True if the timer is running else False
******************************************************************************/
bool SwTimerIsRunning(uint8_t timerId)
{
    if (NULL == swTimers[timerId].timerCb)
    c0c0:	0103      	lsls	r3, r0, #4
    c0c2:	4803      	ldr	r0, [pc, #12]	; (c0d0 <SwTimerIsRunning+0x10>)
    c0c4:	18c0      	adds	r0, r0, r3
    c0c6:	6840      	ldr	r0, [r0, #4]
    c0c8:	1e43      	subs	r3, r0, #1
    c0ca:	4198      	sbcs	r0, r3
    c0cc:	b2c0      	uxtb	r0, r0
    {
        return false;
    }

    return true;
}
    c0ce:	4770      	bx	lr
    c0d0:	2000207c 	.word	0x2000207c

0000c0d4 <SwTimerReadValue>:
\brief Returns the remaining timeout for the given timerId
\param[in] timerId Timer ID to get the remaining time
\return Remaining time until expiry in microseconds
******************************************************************************/
uint32_t SwTimerReadValue(uint8_t timerId)
{
    c0d4:	b570      	push	{r4, r5, r6, lr}
    uint32_t remainingTime = 0u;
    uint32_t timerExpiryTime = 0u;
    uint32_t currentSysTime = 0u;
    
    if ( NULL != swTimers[timerId].timerCb )
    c0d6:	0102      	lsls	r2, r0, #4
    c0d8:	4b0b      	ldr	r3, [pc, #44]	; (c108 <SwTimerReadValue+0x34>)
    c0da:	189b      	adds	r3, r3, r2
    c0dc:	685b      	ldr	r3, [r3, #4]
    c0de:	2b00      	cmp	r3, #0
    c0e0:	d010      	beq.n	c104 <SwTimerReadValue+0x30>
    {
	    timerExpiryTime = swTimers[timerId].absoluteExpiryTime;
    c0e2:	4b09      	ldr	r3, [pc, #36]	; (c108 <SwTimerReadValue+0x34>)
    c0e4:	58d4      	ldr	r4, [r2, r3]
    time |= ((uint64_t) sysTimeOvf) << 32;
    c0e6:	4b09      	ldr	r3, [pc, #36]	; (c10c <SwTimerReadValue+0x38>)
    c0e8:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c0ea:	4b09      	ldr	r3, [pc, #36]	; (c110 <SwTimerReadValue+0x3c>)
    c0ec:	881d      	ldrh	r5, [r3, #0]
    c0ee:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c0f0:	4b08      	ldr	r3, [pc, #32]	; (c114 <SwTimerReadValue+0x40>)
    c0f2:	4798      	blx	r3
    c0f4:	4328      	orrs	r0, r5
	    currentSysTime = (uint32_t) gettime();

	    if ( currentSysTime <= timerExpiryTime )
    c0f6:	4284      	cmp	r4, r0
    c0f8:	d202      	bcs.n	c100 <SwTimerReadValue+0x2c>
	    {
		    remainingTime = timerExpiryTime - currentSysTime;
	    }
	    else if ( currentSysTime > timerExpiryTime )
	    {
		    remainingTime = (UINT32_MAX - currentSysTime) + timerExpiryTime;
    c0fa:	3c01      	subs	r4, #1
    c0fc:	1a20      	subs	r0, r4, r0
	    }
    }
    
    return remainingTime;
}
    c0fe:	bd70      	pop	{r4, r5, r6, pc}
		    remainingTime = timerExpiryTime - currentSysTime;
    c100:	1a20      	subs	r0, r4, r0
    c102:	e7fc      	b.n	c0fe <SwTimerReadValue+0x2a>
    uint32_t remainingTime = 0u;
    c104:	2000      	movs	r0, #0
    return remainingTime;
    c106:	e7fa      	b.n	c0fe <SwTimerReadValue+0x2a>
    c108:	2000207c 	.word	0x2000207c
    c10c:	20002210 	.word	0x20002210
    c110:	2000220c 	.word	0x2000220c
    c114:	00012b25 	.word	0x00012b25

0000c118 <SwTimerNextExpiryDuration>:
/**************************************************************************//**
\brief Returns the duration until the next timer expiry
\return Returns the duration until the next timeout in microseconds
******************************************************************************/
uint32_t SwTimerNextExpiryDuration(void)
{
    c118:	b510      	push	{r4, lr}
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;

    if (SWTIMER_INVALID != runningTimerQueueHead)
    c11a:	4b05      	ldr	r3, [pc, #20]	; (c130 <SwTimerNextExpiryDuration+0x18>)
    c11c:	6818      	ldr	r0, [r3, #0]
    c11e:	28ff      	cmp	r0, #255	; 0xff
    c120:	d102      	bne.n	c128 <SwTimerNextExpiryDuration+0x10>
    uint32_t duration = SWTIMER_INVALID_TIMEOUT;
    c122:	2001      	movs	r0, #1
    c124:	4240      	negs	r0, r0
    {
        duration = SwTimerReadValue(runningTimerQueueHead);
    }

    return duration;
}
    c126:	bd10      	pop	{r4, pc}
        duration = SwTimerReadValue(runningTimerQueueHead);
    c128:	b2c0      	uxtb	r0, r0
    c12a:	4b02      	ldr	r3, [pc, #8]	; (c134 <SwTimerNextExpiryDuration+0x1c>)
    c12c:	4798      	blx	r3
    c12e:	e7fa      	b.n	c126 <SwTimerNextExpiryDuration+0xe>
    c130:	20000fc4 	.word	0x20000fc4
    c134:	0000c0d5 	.word	0x0000c0d5

0000c138 <SwTimersExecute>:

/**************************************************************************//**
\brief Handles Queues and Callbacks for Expired Timers
******************************************************************************/
void SwTimersExecute(void)
{
    c138:	b5f0      	push	{r4, r5, r6, r7, lr}
    c13a:	46de      	mov	lr, fp
    c13c:	4657      	mov	r7, sl
    c13e:	464e      	mov	r6, r9
    c140:	4645      	mov	r5, r8
    c142:	b5e0      	push	{r5, r6, r7, lr}
    c144:	b083      	sub	sp, #12
    time |= ((uint64_t) sysTimeOvf) << 32;
    c146:	4b2f      	ldr	r3, [pc, #188]	; (c204 <SwTimersExecute+0xcc>)
    c148:	681b      	ldr	r3, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c14a:	4b2f      	ldr	r3, [pc, #188]	; (c208 <SwTimersExecute+0xd0>)
    c14c:	881b      	ldrh	r3, [r3, #0]
    time |= (uint64_t) common_tc_read_count();
    c14e:	4b2f      	ldr	r3, [pc, #188]	; (c20c <SwTimersExecute+0xd4>)
    c150:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c152:	f3ef 8210 	mrs	r2, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c156:	4253      	negs	r3, r2
    c158:	4153      	adcs	r3, r2
    c15a:	9300      	str	r3, [sp, #0]
  __ASM volatile ("cpsid i" : : : "memory");
    c15c:	b672      	cpsid	i
    c15e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c162:	2200      	movs	r2, #0
    c164:	4b2a      	ldr	r3, [pc, #168]	; (c210 <SwTimersExecute+0xd8>)
    c166:	701a      	strb	r2, [r3, #0]
	return flags;
    c168:	9c00      	ldr	r4, [sp, #0]
    uint64_t now = gettime();

    uint8_t flags = cpu_irq_save();
    swtimerInternalHandler();
    c16a:	4b2a      	ldr	r3, [pc, #168]	; (c214 <SwTimersExecute+0xdc>)
    c16c:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
    c16e:	23ff      	movs	r3, #255	; 0xff
    c170:	4223      	tst	r3, r4
    c172:	d005      	beq.n	c180 <SwTimersExecute+0x48>
		cpu_irq_enable();
    c174:	2201      	movs	r2, #1
    c176:	4b26      	ldr	r3, [pc, #152]	; (c210 <SwTimersExecute+0xd8>)
    c178:	701a      	strb	r2, [r3, #0]
    c17a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c17e:	b662      	cpsie	i
	cpu_irq_disable();
    c180:	4b23      	ldr	r3, [pc, #140]	; (c210 <SwTimersExecute+0xd8>)
    c182:	469a      	mov	sl, r3
        /* Expired timer if any will be processed here */
        while (SWTIMER_INVALID != expiredTimerQueueHead)
        {
            flags = cpu_irq_save();

            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    c184:	4c24      	ldr	r4, [pc, #144]	; (c218 <SwTimersExecute+0xe0>)
    c186:	4b25      	ldr	r3, [pc, #148]	; (c21c <SwTimersExecute+0xe4>)
    c188:	4699      	mov	r9, r3
    c18a:	2200      	movs	r2, #0

            /*
            * The expired timer's structure elements are updated
            * and the timer is taken out of expired timer queue
            */
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    c18c:	20ff      	movs	r0, #255	; 0xff
            */
            expiredTimerQueueHead = nextExpiredTimer;

            if (SWTIMER_INVALID == expiredTimerQueueHead)
            {
                expiredTimerQueueTail = SWTIMER_INVALID;
    c18e:	4b24      	ldr	r3, [pc, #144]	; (c220 <SwTimersExecute+0xe8>)
    c190:	4698      	mov	r8, r3
		cpu_irq_enable();
    c192:	4b1f      	ldr	r3, [pc, #124]	; (c210 <SwTimersExecute+0xd8>)
    c194:	469c      	mov	ip, r3
    c196:	e004      	b.n	c1a2 <SwTimersExecute+0x6a>
    c198:	4643      	mov	r3, r8
    c19a:	6018      	str	r0, [r3, #0]
    c19c:	e01e      	b.n	c1dc <SwTimersExecute+0xa4>
            }

            cpu_irq_restore(flags);

            if (NULL != callback)
    c19e:	2e00      	cmp	r6, #0
    c1a0:	d125      	bne.n	c1ee <SwTimersExecute+0xb6>
        while (SWTIMER_INVALID != expiredTimerQueueHead)
    c1a2:	4b1d      	ldr	r3, [pc, #116]	; (c218 <SwTimersExecute+0xe0>)
    c1a4:	681b      	ldr	r3, [r3, #0]
    c1a6:	2bff      	cmp	r3, #255	; 0xff
    c1a8:	d024      	beq.n	c1f4 <SwTimersExecute+0xbc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c1aa:	f3ef 8110 	mrs	r1, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c1ae:	424b      	negs	r3, r1
    c1b0:	414b      	adcs	r3, r1
    c1b2:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c1b4:	b672      	cpsid	i
    c1b6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c1ba:	4653      	mov	r3, sl
    c1bc:	701a      	strb	r2, [r3, #0]
	return flags;
    c1be:	9f01      	ldr	r7, [sp, #4]
            nextExpiredTimer = swTimers[expiredTimerQueueHead].nextTimer;
    c1c0:	6823      	ldr	r3, [r4, #0]
    c1c2:	011b      	lsls	r3, r3, #4
    c1c4:	444b      	add	r3, r9
    c1c6:	7b19      	ldrb	r1, [r3, #12]
            callback = (SwTimerCallbackFunc_t)swTimers[expiredTimerQueueHead].timerCb;
    c1c8:	685e      	ldr	r6, [r3, #4]
            cbParam = swTimers[expiredTimerQueueHead].paramCb;
    c1ca:	689d      	ldr	r5, [r3, #8]
    c1cc:	46ab      	mov	fp, r5
            swTimers[expiredTimerQueueHead].nextTimer = SWTIMER_INVALID;
    c1ce:	7318      	strb	r0, [r3, #12]
            swTimers[expiredTimerQueueHead].timerCb = NULL;
    c1d0:	605a      	str	r2, [r3, #4]
            swTimers[expiredTimerQueueHead].paramCb = NULL;
    c1d2:	609a      	str	r2, [r3, #8]
            swTimers[expiredTimerQueueHead].loaded = false;
    c1d4:	735a      	strb	r2, [r3, #13]
            expiredTimerQueueHead = nextExpiredTimer;
    c1d6:	6021      	str	r1, [r4, #0]
            if (SWTIMER_INVALID == expiredTimerQueueHead)
    c1d8:	29ff      	cmp	r1, #255	; 0xff
    c1da:	d0dd      	beq.n	c198 <SwTimersExecute+0x60>
	if (cpu_irq_is_enabled_flags(flags))
    c1dc:	4238      	tst	r0, r7
    c1de:	d0de      	beq.n	c19e <SwTimersExecute+0x66>
		cpu_irq_enable();
    c1e0:	2301      	movs	r3, #1
    c1e2:	4661      	mov	r1, ip
    c1e4:	700b      	strb	r3, [r1, #0]
    c1e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c1ea:	b662      	cpsie	i
    c1ec:	e7d7      	b.n	c19e <SwTimersExecute+0x66>
            {
                /* Callback function is called */
                callback(cbParam);
    c1ee:	4658      	mov	r0, fp
    c1f0:	47b0      	blx	r6
    c1f2:	e7ca      	b.n	c18a <SwTimersExecute+0x52>
                (void)now;
            }
        }
    }
}
    c1f4:	b003      	add	sp, #12
    c1f6:	bc3c      	pop	{r2, r3, r4, r5}
    c1f8:	4690      	mov	r8, r2
    c1fa:	4699      	mov	r9, r3
    c1fc:	46a2      	mov	sl, r4
    c1fe:	46ab      	mov	fp, r5
    c200:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c202:	46c0      	nop			; (mov r8, r8)
    c204:	20002210 	.word	0x20002210
    c208:	2000220c 	.word	0x2000220c
    c20c:	00012b25 	.word	0x00012b25
    c210:	20000008 	.word	0x20000008
    c214:	0000bda5 	.word	0x0000bda5
    c218:	20000fbc 	.word	0x20000fbc
    c21c:	2000207c 	.word	0x2000207c
    c220:	20000fc0 	.word	0x20000fc0

0000c224 <TIMER_TaskHandler>:
{
    c224:	b510      	push	{r4, lr}
    SwTimersExecute();
    c226:	4b02      	ldr	r3, [pc, #8]	; (c230 <TIMER_TaskHandler+0xc>)
    c228:	4798      	blx	r3
}
    c22a:	2000      	movs	r0, #0
    c22c:	bd10      	pop	{r4, pc}
    c22e:	46c0      	nop			; (mov r8, r8)
    c230:	0000c139 	.word	0x0000c139

0000c234 <SwTimerStop>:
        LORAWAN_INVALID_PARAMETER if timerId is not valid
        LORAWAN_INVALID_REQUEST if timerId was not started before
        LORAWAN_SUCCESS if it is successfully stopped
******************************************************************************/
StackRetStatus_t SwTimerStop(uint8_t timerId)
{
    c234:	b570      	push	{r4, r5, r6, lr}
    c236:	b082      	sub	sp, #8
    c238:	0004      	movs	r4, r0
    uint8_t prevIndex;

    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    {
        SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
        return LORAWAN_INVALID_PARAMETER;
    c23a:	200a      	movs	r0, #10
    if (TOTAL_NUMBER_OF_SW_TIMERS <= timerId)
    c23c:	2c18      	cmp	r4, #24
    c23e:	d901      	bls.n	c244 <SwTimerStop+0x10>
        return LORAWAN_SUCCESS;
    }

    SYS_ASSERT_INFO(ASSERT_HAL_TIMER_STOP_FAILURE);
    return LORAWAN_INVALID_REQUEST;
}
    c240:	b002      	add	sp, #8
    c242:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c244:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c248:	425a      	negs	r2, r3
    c24a:	4153      	adcs	r3, r2
    c24c:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c24e:	b672      	cpsid	i
    c250:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c254:	2200      	movs	r2, #0
    c256:	4b47      	ldr	r3, [pc, #284]	; (c374 <SwTimerStop+0x140>)
    c258:	701a      	strb	r2, [r3, #0]
	return flags;
    c25a:	9d01      	ldr	r5, [sp, #4]
    swtimerInternalHandler();
    c25c:	4b46      	ldr	r3, [pc, #280]	; (c378 <SwTimerStop+0x144>)
    c25e:	4798      	blx	r3
    if (runningTimers > 0)
    c260:	4b46      	ldr	r3, [pc, #280]	; (c37c <SwTimerStop+0x148>)
    c262:	781b      	ldrb	r3, [r3, #0]
    c264:	2b00      	cmp	r3, #0
    c266:	d040      	beq.n	c2ea <SwTimerStop+0xb6>
        uint8_t timer_count = runningTimers;
    c268:	4b44      	ldr	r3, [pc, #272]	; (c37c <SwTimerStop+0x148>)
    c26a:	781b      	ldrb	r3, [r3, #0]
    c26c:	b2db      	uxtb	r3, r3
        prevIndex = currIndex = runningTimerQueueHead;
    c26e:	4a44      	ldr	r2, [pc, #272]	; (c380 <SwTimerStop+0x14c>)
    c270:	6816      	ldr	r6, [r2, #0]
    c272:	b2f1      	uxtb	r1, r6
        while (timer_count > 0)
    c274:	2b00      	cmp	r3, #0
    c276:	d038      	beq.n	c2ea <SwTimerStop+0xb6>
            if (timerId == currIndex)
    c278:	428c      	cmp	r4, r1
    c27a:	d00b      	beq.n	c294 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    c27c:	4841      	ldr	r0, [pc, #260]	; (c384 <SwTimerStop+0x150>)
    c27e:	010a      	lsls	r2, r1, #4
    c280:	1882      	adds	r2, r0, r2
    c282:	7b12      	ldrb	r2, [r2, #12]
            timer_count--;
    c284:	3b01      	subs	r3, #1
    c286:	b2db      	uxtb	r3, r3
        while (timer_count > 0)
    c288:	2b00      	cmp	r3, #0
    c28a:	d02e      	beq.n	c2ea <SwTimerStop+0xb6>
            if (timerId == currIndex)
    c28c:	4294      	cmp	r4, r2
    c28e:	d001      	beq.n	c294 <SwTimerStop+0x60>
                currIndex = swTimers[currIndex].nextTimer;
    c290:	0011      	movs	r1, r2
    c292:	e7f4      	b.n	c27e <SwTimerStop+0x4a>
                if (timerId == runningTimerQueueHead)
    c294:	42a6      	cmp	r6, r4
    c296:	d01d      	beq.n	c2d4 <SwTimerStop+0xa0>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    c298:	4b3a      	ldr	r3, [pc, #232]	; (c384 <SwTimerStop+0x150>)
    c29a:	0122      	lsls	r2, r4, #4
    c29c:	189a      	adds	r2, r3, r2
    c29e:	7b12      	ldrb	r2, [r2, #12]
    c2a0:	0109      	lsls	r1, r1, #4
    c2a2:	1859      	adds	r1, r3, r1
    c2a4:	730a      	strb	r2, [r1, #12]
                swTimers[timerId].nextTimer  = SWTIMER_INVALID;
    c2a6:	0122      	lsls	r2, r4, #4
    c2a8:	4b36      	ldr	r3, [pc, #216]	; (c384 <SwTimerStop+0x150>)
    c2aa:	189b      	adds	r3, r3, r2
    c2ac:	22ff      	movs	r2, #255	; 0xff
    c2ae:	731a      	strb	r2, [r3, #12]
            runningTimers--;
    c2b0:	4a32      	ldr	r2, [pc, #200]	; (c37c <SwTimerStop+0x148>)
    c2b2:	7813      	ldrb	r3, [r2, #0]
    c2b4:	3b01      	subs	r3, #1
    c2b6:	b2db      	uxtb	r3, r3
    c2b8:	7013      	strb	r3, [r2, #0]
        swTimers[timerId].timerCb = NULL;
    c2ba:	0124      	lsls	r4, r4, #4
    c2bc:	4b31      	ldr	r3, [pc, #196]	; (c384 <SwTimerStop+0x150>)
    c2be:	191c      	adds	r4, r3, r4
    c2c0:	2300      	movs	r3, #0
    c2c2:	6063      	str	r3, [r4, #4]
        swTimers[timerId].paramCb = NULL;
    c2c4:	60a3      	str	r3, [r4, #8]
        swTimers[timerId].loaded = false;
    c2c6:	7363      	strb	r3, [r4, #13]
	if (cpu_irq_is_enabled_flags(flags))
    c2c8:	33ff      	adds	r3, #255	; 0xff
        return LORAWAN_SUCCESS;
    c2ca:	2008      	movs	r0, #8
    c2cc:	422b      	tst	r3, r5
    c2ce:	d0b7      	beq.n	c240 <SwTimerStop+0xc>
    c2d0:	2301      	movs	r3, #1
    c2d2:	e040      	b.n	c356 <SwTimerStop+0x122>
                    common_tc_compare_stop();
    c2d4:	4b2c      	ldr	r3, [pc, #176]	; (c388 <SwTimerStop+0x154>)
    c2d6:	4798      	blx	r3
                    runningTimerQueueHead = swTimers[timerId].nextTimer;
    c2d8:	0122      	lsls	r2, r4, #4
    c2da:	4b2a      	ldr	r3, [pc, #168]	; (c384 <SwTimerStop+0x150>)
    c2dc:	189b      	adds	r3, r3, r2
    c2de:	7b18      	ldrb	r0, [r3, #12]
    c2e0:	4b27      	ldr	r3, [pc, #156]	; (c380 <SwTimerStop+0x14c>)
    c2e2:	6018      	str	r0, [r3, #0]
                    loadHwTimer(runningTimerQueueHead);
    c2e4:	4b29      	ldr	r3, [pc, #164]	; (c38c <SwTimerStop+0x158>)
    c2e6:	4798      	blx	r3
    c2e8:	e7dd      	b.n	c2a6 <SwTimerStop+0x72>
        prevIndex = currIndex = expiredTimerQueueHead;
    c2ea:	4b29      	ldr	r3, [pc, #164]	; (c390 <SwTimerStop+0x15c>)
    c2ec:	6818      	ldr	r0, [r3, #0]
    c2ee:	b2c2      	uxtb	r2, r0
        while (SWTIMER_INVALID != currIndex)
    c2f0:	2aff      	cmp	r2, #255	; 0xff
    c2f2:	d02c      	beq.n	c34e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    c2f4:	4294      	cmp	r4, r2
    c2f6:	d009      	beq.n	c30c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    c2f8:	4922      	ldr	r1, [pc, #136]	; (c384 <SwTimerStop+0x150>)
    c2fa:	0113      	lsls	r3, r2, #4
    c2fc:	18cb      	adds	r3, r1, r3
    c2fe:	7b1b      	ldrb	r3, [r3, #12]
        while (SWTIMER_INVALID != currIndex)
    c300:	2bff      	cmp	r3, #255	; 0xff
    c302:	d024      	beq.n	c34e <SwTimerStop+0x11a>
            if (timerId == currIndex)
    c304:	429c      	cmp	r4, r3
    c306:	d001      	beq.n	c30c <SwTimerStop+0xd8>
                currIndex = swTimers[currIndex].nextTimer;
    c308:	001a      	movs	r2, r3
    c30a:	e7f6      	b.n	c2fa <SwTimerStop+0xc6>
                if (timerId == expiredTimerQueueHead)
    c30c:	42a0      	cmp	r0, r4
    c30e:	d00d      	beq.n	c32c <SwTimerStop+0xf8>
                    swTimers[prevIndex].nextTimer = swTimers[timerId].nextTimer;
    c310:	4b1c      	ldr	r3, [pc, #112]	; (c384 <SwTimerStop+0x150>)
    c312:	0121      	lsls	r1, r4, #4
    c314:	1859      	adds	r1, r3, r1
    c316:	7b09      	ldrb	r1, [r1, #12]
    c318:	0110      	lsls	r0, r2, #4
    c31a:	181b      	adds	r3, r3, r0
    c31c:	7319      	strb	r1, [r3, #12]
                    if (timerId == expiredTimerQueueTail)
    c31e:	4b1d      	ldr	r3, [pc, #116]	; (c394 <SwTimerStop+0x160>)
    c320:	681b      	ldr	r3, [r3, #0]
    c322:	429c      	cmp	r4, r3
    c324:	d1c9      	bne.n	c2ba <SwTimerStop+0x86>
                        expiredTimerQueueTail = prevIndex;
    c326:	4b1b      	ldr	r3, [pc, #108]	; (c394 <SwTimerStop+0x160>)
    c328:	601a      	str	r2, [r3, #0]
    c32a:	e7c6      	b.n	c2ba <SwTimerStop+0x86>
                    if (expiredTimerQueueHead == expiredTimerQueueTail)
    c32c:	4b19      	ldr	r3, [pc, #100]	; (c394 <SwTimerStop+0x160>)
    c32e:	681b      	ldr	r3, [r3, #0]
    c330:	4298      	cmp	r0, r3
    c332:	d006      	beq.n	c342 <SwTimerStop+0x10e>
                        expiredTimerQueueHead = swTimers[expiredTimerQueueHead].nextTimer;
    c334:	0100      	lsls	r0, r0, #4
    c336:	4b13      	ldr	r3, [pc, #76]	; (c384 <SwTimerStop+0x150>)
    c338:	1818      	adds	r0, r3, r0
    c33a:	7b02      	ldrb	r2, [r0, #12]
    c33c:	4b14      	ldr	r3, [pc, #80]	; (c390 <SwTimerStop+0x15c>)
    c33e:	601a      	str	r2, [r3, #0]
    c340:	e7bb      	b.n	c2ba <SwTimerStop+0x86>
                        expiredTimerQueueHead = expiredTimerQueueTail = SWTIMER_INVALID;
    c342:	23ff      	movs	r3, #255	; 0xff
    c344:	4a13      	ldr	r2, [pc, #76]	; (c394 <SwTimerStop+0x160>)
    c346:	6013      	str	r3, [r2, #0]
    c348:	4a11      	ldr	r2, [pc, #68]	; (c390 <SwTimerStop+0x15c>)
    c34a:	6013      	str	r3, [r2, #0]
    c34c:	e7b5      	b.n	c2ba <SwTimerStop+0x86>
    c34e:	23ff      	movs	r3, #255	; 0xff
    c350:	422b      	tst	r3, r5
    c352:	d00a      	beq.n	c36a <SwTimerStop+0x136>
    c354:	2300      	movs	r3, #0
		cpu_irq_enable();
    c356:	2101      	movs	r1, #1
    c358:	4a06      	ldr	r2, [pc, #24]	; (c374 <SwTimerStop+0x140>)
    c35a:	7011      	strb	r1, [r2, #0]
    c35c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c360:	b662      	cpsie	i
    if (timerStopReqStatus)
    c362:	2b00      	cmp	r3, #0
    c364:	d103      	bne.n	c36e <SwTimerStop+0x13a>
    return LORAWAN_INVALID_REQUEST;
    c366:	2015      	movs	r0, #21
    c368:	e76a      	b.n	c240 <SwTimerStop+0xc>
    c36a:	2015      	movs	r0, #21
    c36c:	e768      	b.n	c240 <SwTimerStop+0xc>
        return LORAWAN_SUCCESS;
    c36e:	2008      	movs	r0, #8
    c370:	e766      	b.n	c240 <SwTimerStop+0xc>
    c372:	46c0      	nop			; (mov r8, r8)
    c374:	20000008 	.word	0x20000008
    c378:	0000bda5 	.word	0x0000bda5
    c37c:	20000fc8 	.word	0x20000fc8
    c380:	20000fc4 	.word	0x20000fc4
    c384:	2000207c 	.word	0x2000207c
    c388:	00012b71 	.word	0x00012b71
    c38c:	0000bd0d 	.word	0x0000bd0d
    c390:	20000fbc 	.word	0x20000fbc
    c394:	20000fc0 	.word	0x20000fc0

0000c398 <SwTimerRunRemainingTime>:
{
    c398:	b5f0      	push	{r4, r5, r6, r7, lr}
    c39a:	b083      	sub	sp, #12
    c39c:	0005      	movs	r5, r0
    void * timerCb = (void*)(swTimers[runningTimerQueueHead].timerCb);
    c39e:	4b0b      	ldr	r3, [pc, #44]	; (c3cc <SwTimerRunRemainingTime+0x34>)
    c3a0:	681c      	ldr	r4, [r3, #0]
    c3a2:	0122      	lsls	r2, r4, #4
    c3a4:	4b0a      	ldr	r3, [pc, #40]	; (c3d0 <SwTimerRunRemainingTime+0x38>)
    c3a6:	189b      	adds	r3, r3, r2
    c3a8:	685e      	ldr	r6, [r3, #4]
    void *paramCb = swTimers[runningTimerQueueHead].paramCb;
    c3aa:	689f      	ldr	r7, [r3, #8]
    uint8_t timerId = runningTimerQueueHead;
    c3ac:	b2e4      	uxtb	r4, r4
    if (LORAWAN_SUCCESS == SwTimerStop(runningTimerQueueHead))
    c3ae:	0020      	movs	r0, r4
    c3b0:	4b08      	ldr	r3, [pc, #32]	; (c3d4 <SwTimerRunRemainingTime+0x3c>)
    c3b2:	4798      	blx	r3
    c3b4:	2808      	cmp	r0, #8
    c3b6:	d001      	beq.n	c3bc <SwTimerRunRemainingTime+0x24>
}
    c3b8:	b003      	add	sp, #12
    c3ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        SwTimerStart(timerId, offset, SW_TIMEOUT_RELATIVE, timerCb, paramCb);
    c3bc:	9700      	str	r7, [sp, #0]
    c3be:	0033      	movs	r3, r6
    c3c0:	2200      	movs	r2, #0
    c3c2:	0029      	movs	r1, r5
    c3c4:	0020      	movs	r0, r4
    c3c6:	4c04      	ldr	r4, [pc, #16]	; (c3d8 <SwTimerRunRemainingTime+0x40>)
    c3c8:	47a0      	blx	r4
}
    c3ca:	e7f5      	b.n	c3b8 <SwTimerRunRemainingTime+0x20>
    c3cc:	20000fc4 	.word	0x20000fc4
    c3d0:	2000207c 	.word	0x2000207c
    c3d4:	0000c235 	.word	0x0000c235
    c3d8:	0000bf29 	.word	0x0000bf29

0000c3dc <SystemTimerSuspend>:

/**************************************************************************//**
\brief Suspends the software timer
******************************************************************************/
void SystemTimerSuspend(void)
{
    c3dc:	b570      	push	{r4, r5, r6, lr}
    time |= ((uint64_t) sysTimeOvf) << 32;
    c3de:	4b07      	ldr	r3, [pc, #28]	; (c3fc <SystemTimerSuspend+0x20>)
    c3e0:	681c      	ldr	r4, [r3, #0]
    time |= ((uint64_t) sysTime) << 16;
    c3e2:	4b07      	ldr	r3, [pc, #28]	; (c400 <SystemTimerSuspend+0x24>)
    c3e4:	881d      	ldrh	r5, [r3, #0]
    c3e6:	042d      	lsls	r5, r5, #16
    time |= (uint64_t) common_tc_read_count();
    c3e8:	4b06      	ldr	r3, [pc, #24]	; (c404 <SystemTimerSuspend+0x28>)
    c3ea:	4798      	blx	r3
    sysTimeLastKnown = gettime();
    c3ec:	4b06      	ldr	r3, [pc, #24]	; (c408 <SystemTimerSuspend+0x2c>)
    time |= (uint64_t) common_tc_read_count();
    c3ee:	4328      	orrs	r0, r5
    c3f0:	6018      	str	r0, [r3, #0]
    c3f2:	605c      	str	r4, [r3, #4]
    common_tc_stop();
    c3f4:	4b05      	ldr	r3, [pc, #20]	; (c40c <SystemTimerSuspend+0x30>)
    c3f6:	4798      	blx	r3
}
    c3f8:	bd70      	pop	{r4, r5, r6, pc}
    c3fa:	46c0      	nop			; (mov r8, r8)
    c3fc:	20002210 	.word	0x20002210
    c400:	2000220c 	.word	0x2000220c
    c404:	00012b25 	.word	0x00012b25
    c408:	20000fd0 	.word	0x20000fd0
    c40c:	00012bb1 	.word	0x00012bb1

0000c410 <SystemTimerSync>:
/**************************************************************************//**
\brief Resumes the software timer by offseting it with given time
\param[in] timeToSync Amount of duration to offset from known system time
******************************************************************************/
void SystemTimerSync(uint64_t timeToSync)
{
    c410:	b570      	push	{r4, r5, r6, lr}
    uint8_t timerId;
    uint16_t adjustOffset;

    sysTimeLastKnown += timeToSync;
    c412:	4b22      	ldr	r3, [pc, #136]	; (c49c <SystemTimerSync+0x8c>)
    c414:	681c      	ldr	r4, [r3, #0]
    c416:	685d      	ldr	r5, [r3, #4]
    c418:	1900      	adds	r0, r0, r4
    c41a:	4169      	adcs	r1, r5
    c41c:	6018      	str	r0, [r3, #0]
    c41e:	6059      	str	r1, [r3, #4]

    /* 1. Update system time */
    sysTimeOvf = (uint32_t) (sysTimeLastKnown >> 32);
    c420:	4b1f      	ldr	r3, [pc, #124]	; (c4a0 <SystemTimerSync+0x90>)
    c422:	6019      	str	r1, [r3, #0]
    sysTime = (uint16_t) ((sysTimeLastKnown >> SWTIMER_SYSTIME_SHIFTMASK) & 0xffff);
    c424:	0c02      	lsrs	r2, r0, #16
    c426:	4b1f      	ldr	r3, [pc, #124]	; (c4a4 <SystemTimerSync+0x94>)
    c428:	801a      	strh	r2, [r3, #0]

    /* 2. Adjust expiration of running timers */
    adjustOffset = (uint16_t) sysTimeLastKnown;
    c42a:	b280      	uxth	r0, r0
    timerId = runningTimerQueueHead;
    c42c:	4b1e      	ldr	r3, [pc, #120]	; (c4a8 <SystemTimerSync+0x98>)
    c42e:	781b      	ldrb	r3, [r3, #0]
    for (uint8_t index = 0; index < runningTimers; index++)
    c430:	4a1e      	ldr	r2, [pc, #120]	; (c4ac <SystemTimerSync+0x9c>)
    c432:	7812      	ldrb	r2, [r2, #0]
    c434:	2a00      	cmp	r2, #0
    c436:	d012      	beq.n	c45e <SystemTimerSync+0x4e>
    c438:	2200      	movs	r2, #0
    {
        if (SWTIMER_INVALID != timerId)
        {
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    c43a:	4c1d      	ldr	r4, [pc, #116]	; (c4b0 <SystemTimerSync+0xa0>)
    for (uint8_t index = 0; index < runningTimers; index++)
    c43c:	4d1b      	ldr	r5, [pc, #108]	; (c4ac <SystemTimerSync+0x9c>)
    c43e:	e005      	b.n	c44c <SystemTimerSync+0x3c>
    c440:	3201      	adds	r2, #1
    c442:	b2d2      	uxtb	r2, r2
    c444:	7829      	ldrb	r1, [r5, #0]
    c446:	b2c9      	uxtb	r1, r1
    c448:	4291      	cmp	r1, r2
    c44a:	d908      	bls.n	c45e <SystemTimerSync+0x4e>
        if (SWTIMER_INVALID != timerId)
    c44c:	2bff      	cmp	r3, #255	; 0xff
    c44e:	d0f7      	beq.n	c440 <SystemTimerSync+0x30>
            swTimers[timerId].absoluteExpiryTime -= adjustOffset;
    c450:	011b      	lsls	r3, r3, #4
    c452:	5919      	ldr	r1, [r3, r4]
    c454:	1a09      	subs	r1, r1, r0
    c456:	5119      	str	r1, [r3, r4]
            timerId = swTimers[timerId].nextTimer;
    c458:	18e3      	adds	r3, r4, r3
    c45a:	7b1b      	ldrb	r3, [r3, #12]
    c45c:	e7f0      	b.n	c440 <SystemTimerSync+0x30>
        }
    }

    /* 3. Start hardware timer */
    common_tc_init();
    c45e:	4b15      	ldr	r3, [pc, #84]	; (c4b4 <SystemTimerSync+0xa4>)
    c460:	4798      	blx	r3
    set_common_tc_overflow_callback(hwTimerOverflowCallback);
    c462:	4815      	ldr	r0, [pc, #84]	; (c4b8 <SystemTimerSync+0xa8>)
    c464:	4b15      	ldr	r3, [pc, #84]	; (c4bc <SystemTimerSync+0xac>)
    c466:	4798      	blx	r3
    set_common_tc_expiry_callback(hwTimerExpiryCallback);
    c468:	4815      	ldr	r0, [pc, #84]	; (c4c0 <SystemTimerSync+0xb0>)
    c46a:	4b16      	ldr	r3, [pc, #88]	; (c4c4 <SystemTimerSync+0xb4>)
    c46c:	4798      	blx	r3

    /* 4. Resume timer queue operations */
    if (runningTimers && (SWTIMER_INVALID != runningTimerQueueHead))
    c46e:	4b0f      	ldr	r3, [pc, #60]	; (c4ac <SystemTimerSync+0x9c>)
    c470:	781b      	ldrb	r3, [r3, #0]
    c472:	2b00      	cmp	r3, #0
    c474:	d009      	beq.n	c48a <SystemTimerSync+0x7a>
    c476:	4b0c      	ldr	r3, [pc, #48]	; (c4a8 <SystemTimerSync+0x98>)
    c478:	681b      	ldr	r3, [r3, #0]
    c47a:	2bff      	cmp	r3, #255	; 0xff
    c47c:	d005      	beq.n	c48a <SystemTimerSync+0x7a>
    {
        uint32_t remainingTime = SwTimerNextExpiryDuration();
    c47e:	4b12      	ldr	r3, [pc, #72]	; (c4c8 <SystemTimerSync+0xb8>)
    c480:	4798      	blx	r3

        if (SWTIMER_MIN_TIMEOUT > remainingTime)
    c482:	28fe      	cmp	r0, #254	; 0xfe
    c484:	d902      	bls.n	c48c <SystemTimerSync+0x7c>
        else
        {
            /*
            * There is some time left in head timer, so restart it.
            */
            SwTimerRunRemainingTime(remainingTime);
    c486:	4b11      	ldr	r3, [pc, #68]	; (c4cc <SystemTimerSync+0xbc>)
    c488:	4798      	blx	r3
        }
    }
}
    c48a:	bd70      	pop	{r4, r5, r6, pc}
            isTimerTriggered = true;
    c48c:	2201      	movs	r2, #1
    c48e:	4b10      	ldr	r3, [pc, #64]	; (c4d0 <SystemTimerSync+0xc0>)
    c490:	701a      	strb	r2, [r3, #0]
            SYSTEM_PostTask(TIMER_TASK_ID);
    c492:	2001      	movs	r0, #1
    c494:	4b0f      	ldr	r3, [pc, #60]	; (c4d4 <SystemTimerSync+0xc4>)
    c496:	4798      	blx	r3
    c498:	e7f7      	b.n	c48a <SystemTimerSync+0x7a>
    c49a:	46c0      	nop			; (mov r8, r8)
    c49c:	20000fd0 	.word	0x20000fd0
    c4a0:	20002210 	.word	0x20002210
    c4a4:	2000220c 	.word	0x2000220c
    c4a8:	20000fc4 	.word	0x20000fc4
    c4ac:	20000fc8 	.word	0x20000fc8
    c4b0:	2000207c 	.word	0x2000207c
    c4b4:	00012c39 	.word	0x00012c39
    c4b8:	0000bc55 	.word	0x0000bc55
    c4bc:	00012cbd 	.word	0x00012cbd
    c4c0:	0000bc2d 	.word	0x0000bc2d
    c4c4:	00012cc9 	.word	0x00012cc9
    c4c8:	0000c119 	.word	0x0000c119
    c4cc:	0000c399 	.word	0x0000c399
    c4d0:	2000220e 	.word	0x2000220e
    c4d4:	0000c555 	.word	0x0000c555

0000c4d8 <Stack_Init>:
/**************************************************************************//**
\brief Initializes the system. This is the first stack function to be called
       by the application in the main() function.
******************************************************************************/
void Stack_Init(void)
{
    c4d8:	b510      	push	{r4, lr}
	
	/* LORAWAN_Init() should have been called form here, 
	   but parser application has a round-about way to call it now */
 
	/* Post application task to initiate the execution from there */
	SYSTEM_PostTask(APP_TASK_ID);
    c4da:	2010      	movs	r0, #16
    c4dc:	4b01      	ldr	r3, [pc, #4]	; (c4e4 <Stack_Init+0xc>)
    c4de:	4798      	blx	r3
}
    c4e0:	bd10      	pop	{r4, pc}
    c4e2:	46c0      	nop			; (mov r8, r8)
    c4e4:	0000c555 	.word	0x0000c555

0000c4e8 <SYSTEM_RunTasks>:
/************************************************************************/
/*********************************************************************//**
\brief System tasks execution entry point
*************************************************************************/
void SYSTEM_RunTasks(void)
{
    c4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if ((1 << SYSTEM_TASK_ID_COUNT) > sysTaskFlag)
    c4ea:	4b16      	ldr	r3, [pc, #88]	; (c544 <SYSTEM_RunTasks+0x5c>)
    c4ec:	881b      	ldrh	r3, [r3, #0]
    c4ee:	b29b      	uxth	r3, r3
    c4f0:	2b1f      	cmp	r3, #31
    c4f2:	d922      	bls.n	c53a <SYSTEM_RunTasks+0x52>
    c4f4:	e7fe      	b.n	c4f4 <SYSTEM_RunTasks+0xc>
    { /* Only valid task bits are set */
        while (sysTaskFlag)
        { /* One or more task are pending to execute */
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
            {
                if ((1 << taskId) & sysTaskFlag)
    c4f6:	2500      	movs	r5, #0
                    /*
                    * Reset the task bit since it is to be executed now.
                    * It is done inside atomic section to avoid any interrupt context
                    * corrupting the bits.
                    */
                    ATOMIC_SECTION_ENTER
    c4f8:	4b13      	ldr	r3, [pc, #76]	; (c548 <SYSTEM_RunTasks+0x60>)
    c4fa:	4798      	blx	r3
                    sysTaskFlag &= ~(1 << taskId);
    c4fc:	4911      	ldr	r1, [pc, #68]	; (c544 <SYSTEM_RunTasks+0x5c>)
    c4fe:	880b      	ldrh	r3, [r1, #0]
    c500:	2201      	movs	r2, #1
    c502:	40aa      	lsls	r2, r5
    c504:	4393      	bics	r3, r2
    c506:	800b      	strh	r3, [r1, #0]
                    ATOMIC_SECTION_EXIT
    c508:	4b10      	ldr	r3, [pc, #64]	; (c54c <SYSTEM_RunTasks+0x64>)
    c50a:	4798      	blx	r3

                    /* Return value is not used now, can be used later */
                    taskHandlers[taskId]();
    c50c:	00ad      	lsls	r5, r5, #2
    c50e:	4b10      	ldr	r3, [pc, #64]	; (c550 <SYSTEM_RunTasks+0x68>)
    c510:	58eb      	ldr	r3, [r5, r3]
    c512:	4798      	blx	r3
                if ((1 << taskId) & sysTaskFlag)
    c514:	2101      	movs	r1, #1
        while (sysTaskFlag)
    c516:	883b      	ldrh	r3, [r7, #0]
    c518:	b29b      	uxth	r3, r3
    c51a:	2b00      	cmp	r3, #0
    c51c:	d011      	beq.n	c542 <SYSTEM_RunTasks+0x5a>
                if ((1 << taskId) & sysTaskFlag)
    c51e:	8823      	ldrh	r3, [r4, #0]
    c520:	420b      	tst	r3, r1
    c522:	d1e8      	bne.n	c4f6 <SYSTEM_RunTasks+0xe>
    c524:	2201      	movs	r2, #1
    c526:	8833      	ldrh	r3, [r6, #0]
    c528:	b29b      	uxth	r3, r3
    c52a:	0015      	movs	r5, r2
    c52c:	4113      	asrs	r3, r2
    c52e:	4219      	tst	r1, r3
    c530:	d1e2      	bne.n	c4f8 <SYSTEM_RunTasks+0x10>
    c532:	3201      	adds	r2, #1
            for (uint16_t taskId = 0; taskId < SYSTEM_TASK_ID_COUNT; taskId++)
    c534:	2a05      	cmp	r2, #5
    c536:	d1f6      	bne.n	c526 <SYSTEM_RunTasks+0x3e>
    c538:	e7ed      	b.n	c516 <SYSTEM_RunTasks+0x2e>
        while (sysTaskFlag)
    c53a:	4f02      	ldr	r7, [pc, #8]	; (c544 <SYSTEM_RunTasks+0x5c>)
                if ((1 << taskId) & sysTaskFlag)
    c53c:	003c      	movs	r4, r7
    c53e:	003e      	movs	r6, r7
    c540:	e7e8      	b.n	c514 <SYSTEM_RunTasks+0x2c>
        * Can happen only due to corruption, so halt
        * TODO : replace this with assert implementation
        */
        while(1);
    }
}
    c542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c544:	20000fd8 	.word	0x20000fd8
    c548:	00005615 	.word	0x00005615
    c54c:	00005621 	.word	0x00005621
    c550:	0001dc20 	.word	0x0001dc20

0000c554 <SYSTEM_PostTask>:

\param[in] task - ID of the posted task.
*************************************************************************/

void SYSTEM_PostTask(SYSTEM_Task_t task)
{
    c554:	b510      	push	{r4, lr}
    c556:	0004      	movs	r4, r0
    ATOMIC_SECTION_ENTER
    c558:	4b04      	ldr	r3, [pc, #16]	; (c56c <SYSTEM_PostTask+0x18>)
    c55a:	4798      	blx	r3
    sysTaskFlag |= task;
    c55c:	4b04      	ldr	r3, [pc, #16]	; (c570 <SYSTEM_PostTask+0x1c>)
    c55e:	8818      	ldrh	r0, [r3, #0]
    c560:	4320      	orrs	r0, r4
    c562:	8018      	strh	r0, [r3, #0]
    ATOMIC_SECTION_EXIT
    c564:	4b03      	ldr	r3, [pc, #12]	; (c574 <SYSTEM_PostTask+0x20>)
    c566:	4798      	blx	r3
}
    c568:	bd10      	pop	{r4, pc}
    c56a:	46c0      	nop			; (mov r8, r8)
    c56c:	00005615 	.word	0x00005615
    c570:	20000fd8 	.word	0x20000fd8
    c574:	00005621 	.word	0x00005621

0000c578 <SYSTEM_ReadyToSleep>:

\return 'true' if the system is ready, 'false' otherwise
*************************************************************************/
bool SYSTEM_ReadyToSleep(void)
{
    return !(sysTaskFlag & 0xffff);
    c578:	4b03      	ldr	r3, [pc, #12]	; (c588 <SYSTEM_ReadyToSleep+0x10>)
    c57a:	8818      	ldrh	r0, [r3, #0]
    c57c:	b280      	uxth	r0, r0
    c57e:	4243      	negs	r3, r0
    c580:	4158      	adcs	r0, r3
    c582:	b2c0      	uxtb	r0, r0
}
    c584:	4770      	bx	lr
    c586:	46c0      	nop			; (mov r8, r8)
    c588:	20000fd8 	.word	0x20000fd8

0000c58c <Radio_WriteMode>:
\param newModulation	- Sets the modulation.
\param blocking			- Sets if its blocking call or not.
\return					- none.
*************************************************************************/
void Radio_WriteMode(RadioMode_t newMode, RadioModulation_t newModulation, uint8_t blocking)
{
    c58c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c58e:	46d6      	mov	lr, sl
    c590:	464f      	mov	r7, r9
    c592:	b580      	push	{r7, lr}
    c594:	b083      	sub	sp, #12
    c596:	9201      	str	r2, [sp, #4]
    uint8_t opMode;
    uint8_t dioMapping;
    RadioModulation_t currentModulation;
    RadioMode_t currentMode;

    if ((MODULATION_FSK == newModulation) &&
    c598:	2900      	cmp	r1, #0
    c59a:	d102      	bne.n	c5a2 <Radio_WriteMode+0x16>
    c59c:	1f83      	subs	r3, r0, #6
    c59e:	2b01      	cmp	r3, #1
    c5a0:	d92a      	bls.n	c5f8 <Radio_WriteMode+0x6c>
        // Unavailable modes for FSK. Just return.
        return;
    }

    // Sanity enforcement on parameters
    newMode &= 0x07;
    c5a2:	2307      	movs	r3, #7
    c5a4:	4699      	mov	r9, r3
    c5a6:	001c      	movs	r4, r3
    c5a8:	4004      	ands	r4, r0
    newModulation &= 0x01;
    c5aa:	2601      	movs	r6, #1
    c5ac:	400e      	ands	r6, r1

    opMode = RADIO_RegisterRead(REG_OPMODE);
    c5ae:	2001      	movs	r0, #1
    c5b0:	4b2b      	ldr	r3, [pc, #172]	; (c660 <Radio_WriteMode+0xd4>)
    c5b2:	4798      	blx	r3
    c5b4:	0005      	movs	r5, r0
    c5b6:	0007      	movs	r7, r0

    if ((opMode & 0x80) != 0)
    c5b8:	b243      	sxtb	r3, r0
    c5ba:	469a      	mov	sl, r3
    else
    {
        currentModulation = MODULATION_FSK;
    }

    currentMode = opMode & 0x07;
    c5bc:	464b      	mov	r3, r9
    c5be:	4003      	ands	r3, r0

    // If we need to change modulation, we need to do this in sleep mode.
    // Otherwise, we can go straight to changing the current mode to newMode.
    if (newModulation != currentModulation)
    c5c0:	4652      	mov	r2, sl
    c5c2:	0fd2      	lsrs	r2, r2, #31
    c5c4:	4296      	cmp	r6, r2
    c5c6:	d00a      	beq.n	c5de <Radio_WriteMode+0x52>
    {
        // Go to sleep
        if (MODE_SLEEP != currentMode)
    c5c8:	2b00      	cmp	r3, #0
    c5ca:	d11a      	bne.n	c602 <Radio_WriteMode+0x76>
            // Clear mode bits, effectively going to sleep
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
            currentMode = MODE_SLEEP;
        }
        // Change modulation
        if (MODULATION_FSK == newModulation)
    c5cc:	2e00      	cmp	r6, #0
    c5ce:	d11e      	bne.n	c60e <Radio_WriteMode+0x82>
        {
            // Clear MSB and sleep bits to make it stay in sleep
            opMode = opMode & (~0x87);
    c5d0:	2778      	movs	r7, #120	; 0x78
    c5d2:	402f      	ands	r7, r5
        else
        {
            // LoRa mode. Set MSB and clear sleep bits to make it stay in sleep
            opMode = 0x80 | (opMode & (~0x87));
        }
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c5d4:	0039      	movs	r1, r7
    c5d6:	2001      	movs	r0, #1
    c5d8:	4b22      	ldr	r3, [pc, #136]	; (c664 <Radio_WriteMode+0xd8>)
    c5da:	4798      	blx	r3
    c5dc:	2300      	movs	r3, #0

    // From here on currentModulation is no longer current, we will use
    // newModulation instead as it reflects the chip configuration.
    // opMode reflects the actual configuration of the chip.

    if (newMode != currentMode)
    c5de:	42a3      	cmp	r3, r4
    c5e0:	d00a      	beq.n	c5f8 <Radio_WriteMode+0x6c>
    {
        // If we need to block until the mode switch is ready, configure the
        // DIO5 pin to relay this information.
        if ((MODE_SLEEP != newMode) && (1 == blocking))
    c5e2:	2c00      	cmp	r4, #0
    c5e4:	d030      	beq.n	c648 <Radio_WriteMode+0xbc>
    c5e6:	9b01      	ldr	r3, [sp, #4]
    c5e8:	2b01      	cmp	r3, #1
    c5ea:	d016      	beq.n	c61a <Radio_WriteMode+0x8e>
            }
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
        }

        // Do the actual mode switch.
        opMode &= ~0x07;                // Clear old mode bits
    c5ec:	21f8      	movs	r1, #248	; 0xf8
    c5ee:	4039      	ands	r1, r7
        opMode |= newMode;              // Set new mode bits
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c5f0:	4321      	orrs	r1, r4
    c5f2:	2001      	movs	r0, #1
    c5f4:	4b1b      	ldr	r3, [pc, #108]	; (c664 <Radio_WriteMode+0xd8>)
    c5f6:	4798      	blx	r3
                SystemBlockingWaitMs(1);
            }
        }
    }
#endif
}
    c5f8:	b003      	add	sp, #12
    c5fa:	bc0c      	pop	{r2, r3}
    c5fc:	4691      	mov	r9, r2
    c5fe:	469a      	mov	sl, r3
    c600:	bdf0      	pop	{r4, r5, r6, r7, pc}
            RADIO_RegisterWrite(REG_OPMODE, opMode & (~0x07));
    c602:	21f8      	movs	r1, #248	; 0xf8
    c604:	4001      	ands	r1, r0
    c606:	2001      	movs	r0, #1
    c608:	4b16      	ldr	r3, [pc, #88]	; (c664 <Radio_WriteMode+0xd8>)
    c60a:	4798      	blx	r3
    c60c:	e7de      	b.n	c5cc <Radio_WriteMode+0x40>
            opMode = 0x80 | (opMode & (~0x87));
    c60e:	2778      	movs	r7, #120	; 0x78
    c610:	4653      	mov	r3, sl
    c612:	401f      	ands	r7, r3
    c614:	2180      	movs	r1, #128	; 0x80
    c616:	430f      	orrs	r7, r1
    c618:	e7dc      	b.n	c5d4 <Radio_WriteMode+0x48>
            dioMapping = RADIO_RegisterRead(REG_DIOMAPPING2);
    c61a:	2041      	movs	r0, #65	; 0x41
    c61c:	4b10      	ldr	r3, [pc, #64]	; (c660 <Radio_WriteMode+0xd4>)
    c61e:	4798      	blx	r3
            if (MODULATION_FSK == newModulation)
    c620:	2e00      	cmp	r6, #0
    c622:	d10e      	bne.n	c642 <Radio_WriteMode+0xb6>
                dioMapping |= 0x30;     // DIO5 = 11 means ModeReady in FSK mode
    c624:	2130      	movs	r1, #48	; 0x30
    c626:	4301      	orrs	r1, r0
    c628:	b2c9      	uxtb	r1, r1
            RADIO_RegisterWrite(REG_DIOMAPPING2, dioMapping);
    c62a:	2041      	movs	r0, #65	; 0x41
    c62c:	4d0d      	ldr	r5, [pc, #52]	; (c664 <Radio_WriteMode+0xd8>)
    c62e:	47a8      	blx	r5
        opMode &= ~0x07;                // Clear old mode bits
    c630:	21f8      	movs	r1, #248	; 0xf8
    c632:	4039      	ands	r1, r7
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c634:	4321      	orrs	r1, r4
    c636:	2001      	movs	r0, #1
    c638:	47a8      	blx	r5
			   delay_ms(1);
    c63a:	2001      	movs	r0, #1
    c63c:	4b0a      	ldr	r3, [pc, #40]	; (c668 <Radio_WriteMode+0xdc>)
    c63e:	4798      	blx	r3
    c640:	e7da      	b.n	c5f8 <Radio_WriteMode+0x6c>
                dioMapping &= ~0x30;    // DIO5 = 00 means ModeReady in LoRa mode
    c642:	21cf      	movs	r1, #207	; 0xcf
    c644:	4001      	ands	r1, r0
    c646:	e7f0      	b.n	c62a <Radio_WriteMode+0x9e>
        opMode &= ~0x07;                // Clear old mode bits
    c648:	21f8      	movs	r1, #248	; 0xf8
        RADIO_RegisterWrite(REG_OPMODE, opMode);
    c64a:	4039      	ands	r1, r7
    c64c:	2001      	movs	r0, #1
    c64e:	4b05      	ldr	r3, [pc, #20]	; (c664 <Radio_WriteMode+0xd8>)
    c650:	4798      	blx	r3
        if (1 == blocking)
    c652:	9b01      	ldr	r3, [sp, #4]
    c654:	2b01      	cmp	r3, #1
    c656:	d1cf      	bne.n	c5f8 <Radio_WriteMode+0x6c>
                SystemBlockingWaitMs(1);
    c658:	2001      	movs	r0, #1
    c65a:	4b04      	ldr	r3, [pc, #16]	; (c66c <Radio_WriteMode+0xe0>)
    c65c:	4798      	blx	r3
    c65e:	e7cb      	b.n	c5f8 <Radio_WriteMode+0x6c>
    c660:	000053d5 	.word	0x000053d5
    c664:	000053ad 	.word	0x000053ad
    c668:	00000181 	.word	0x00000181
    c66c:	000055f9 	.word	0x000055f9

0000c670 <RADIO_FHSSChangeChannel>:

\param		- none	
\return		- none.
*************************************************************************/
void RADIO_FHSSChangeChannel(void)
{
    c670:	b500      	push	{lr}
    c672:	b083      	sub	sp, #12
    uint32_t freq;
    RADIO_RegisterRead(REG_LORA_IRQFLAGS);
    c674:	2012      	movs	r0, #18
    c676:	4b0d      	ldr	r3, [pc, #52]	; (c6ac <RADIO_FHSSChangeChannel+0x3c>)
    c678:	4798      	blx	r3

    if (radioConfiguration.frequencyHopPeriod)
    c67a:	4b0d      	ldr	r3, [pc, #52]	; (c6b0 <RADIO_FHSSChangeChannel+0x40>)
    c67c:	8adb      	ldrh	r3, [r3, #22]
    c67e:	2b00      	cmp	r3, #0
    c680:	d007      	beq.n	c692 <RADIO_FHSSChangeChannel+0x22>
    {
        if ((radioConfiguration.radioCallback) &&
    c682:	4b0b      	ldr	r3, [pc, #44]	; (c6b0 <RADIO_FHSSChangeChannel+0x40>)
    c684:	691b      	ldr	r3, [r3, #16]
    c686:	2b00      	cmp	r3, #0
    c688:	d003      	beq.n	c692 <RADIO_FHSSChangeChannel+0x22>
            (1 == radioCallbackMask.BitMask.radioFhssfreqCallback))
    c68a:	4a0a      	ldr	r2, [pc, #40]	; (c6b4 <RADIO_FHSSChangeChannel+0x44>)
    c68c:	7812      	ldrb	r2, [r2, #0]
        if ((radioConfiguration.radioCallback) &&
    c68e:	0692      	lsls	r2, r2, #26
    c690:	d405      	bmi.n	c69e <RADIO_FHSSChangeChannel+0x2e>
            Radio_WriteFrequency(freq);
        }
    }

    // Clear FHSSChangeChannel interrupt
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 1 << SHIFT1);
    c692:	2102      	movs	r1, #2
    c694:	2012      	movs	r0, #18
    c696:	4b08      	ldr	r3, [pc, #32]	; (c6b8 <RADIO_FHSSChangeChannel+0x48>)
    c698:	4798      	blx	r3
}
    c69a:	b003      	add	sp, #12
    c69c:	bd00      	pop	{pc}
            radioConfiguration.radioCallback(RADIO_FHSS_NEXT_FREQ_CALLBACK, (void *)&freq);
    c69e:	a901      	add	r1, sp, #4
    c6a0:	2020      	movs	r0, #32
    c6a2:	4798      	blx	r3
            Radio_WriteFrequency(freq);
    c6a4:	9801      	ldr	r0, [sp, #4]
    c6a6:	4b05      	ldr	r3, [pc, #20]	; (c6bc <RADIO_FHSSChangeChannel+0x4c>)
    c6a8:	4798      	blx	r3
    c6aa:	e7f2      	b.n	c692 <RADIO_FHSSChangeChannel+0x22>
    c6ac:	000053d5 	.word	0x000053d5
    c6b0:	20002214 	.word	0x20002214
    c6b4:	200027d2 	.word	0x200027d2
    c6b8:	000053ad 	.word	0x000053ad
    c6bc:	000113d1 	.word	0x000113d1

0000c6c0 <RADIO_ReadRandom>:

\param		- none	
\return		- returns the random number generated.
*************************************************************************/
uint16_t RADIO_ReadRandom(void)
{
    c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
    uint16_t retVal;
    retVal = 0;
	
	// Turn on the RF switch.
	Radio_EnableRfControl(RADIO_RFCTRL_RX); 
    c6c2:	2000      	movs	r0, #0
    c6c4:	4b1a      	ldr	r3, [pc, #104]	; (c730 <RADIO_ReadRandom+0x70>)
    c6c6:	4798      	blx	r3
	// Enabling Radio Clock
	Radio_SetClockInput();
    c6c8:	4b1a      	ldr	r3, [pc, #104]	; (c734 <RADIO_ReadRandom+0x74>)
    c6ca:	4798      	blx	r3
	
    // Mask all interrupts, do many measurements of RSSI
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    c6cc:	2201      	movs	r2, #1
    c6ce:	2101      	movs	r1, #1
    c6d0:	2000      	movs	r0, #0
    c6d2:	4c19      	ldr	r4, [pc, #100]	; (c738 <RADIO_ReadRandom+0x78>)
    c6d4:	47a0      	blx	r4
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0xFF);
    c6d6:	21ff      	movs	r1, #255	; 0xff
    c6d8:	2011      	movs	r0, #17
    c6da:	4b18      	ldr	r3, [pc, #96]	; (c73c <RADIO_ReadRandom+0x7c>)
    c6dc:	4798      	blx	r3
    Radio_WriteMode(MODE_RXCONT, MODULATION_LORA, 1);
    c6de:	2201      	movs	r2, #1
    c6e0:	2101      	movs	r1, #1
    c6e2:	2005      	movs	r0, #5
    c6e4:	47a0      	blx	r4
    c6e6:	2410      	movs	r4, #16
    retVal = 0;
    c6e8:	2500      	movs	r5, #0
    for (i = 0; i < 16; i++)
    {
        SystemBlockingWaitMs(1);
    c6ea:	4f15      	ldr	r7, [pc, #84]	; (c740 <RADIO_ReadRandom+0x80>)
        retVal <<= SHIFT1;
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    c6ec:	4e15      	ldr	r6, [pc, #84]	; (c744 <RADIO_ReadRandom+0x84>)
        SystemBlockingWaitMs(1);
    c6ee:	2001      	movs	r0, #1
    c6f0:	47b8      	blx	r7
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    c6f2:	202c      	movs	r0, #44	; 0x2c
    c6f4:	47b0      	blx	r6
    c6f6:	2301      	movs	r3, #1
    c6f8:	4018      	ands	r0, r3
        retVal <<= SHIFT1;
    c6fa:	006d      	lsls	r5, r5, #1
        retVal |= RADIO_RegisterRead(REG_LORA_RSSIWIDEBAND) & 0x01;
    c6fc:	4305      	orrs	r5, r0
    c6fe:	b2ad      	uxth	r5, r5
    c700:	3c01      	subs	r4, #1
    c702:	b2e4      	uxtb	r4, r4
    for (i = 0; i < 16; i++)
    c704:	2c00      	cmp	r4, #0
    c706:	d1f2      	bne.n	c6ee <RADIO_ReadRandom+0x2e>
    }
	
	// Turning off the RF switch now.
	Radio_DisableRfControl(RADIO_RFCTRL_RX);
    c708:	2000      	movs	r0, #0
    c70a:	4b0f      	ldr	r3, [pc, #60]	; (c748 <RADIO_ReadRandom+0x88>)
    c70c:	4798      	blx	r3
	
    // Return radio to sleep
    Radio_WriteMode(MODE_SLEEP, MODULATION_LORA, 1);
    c70e:	2201      	movs	r2, #1
    c710:	2101      	movs	r1, #1
    c712:	2000      	movs	r0, #0
    c714:	4b08      	ldr	r3, [pc, #32]	; (c738 <RADIO_ReadRandom+0x78>)
    c716:	4798      	blx	r3
    // Clear interrupts in case any have been generated
    RADIO_RegisterWrite(REG_LORA_IRQFLAGS, 0xFF);
    c718:	21ff      	movs	r1, #255	; 0xff
    c71a:	2012      	movs	r0, #18
    c71c:	4c07      	ldr	r4, [pc, #28]	; (c73c <RADIO_ReadRandom+0x7c>)
    c71e:	47a0      	blx	r4
    // Unmask all interrupts
    RADIO_RegisterWrite(REG_LORA_IRQFLAGSMASK, 0x00);
    c720:	2100      	movs	r1, #0
    c722:	2011      	movs	r0, #17
    c724:	47a0      	blx	r4
	// Disabling Radio Clock save power
	Radio_ResetClockInput();
    c726:	4b09      	ldr	r3, [pc, #36]	; (c74c <RADIO_ReadRandom+0x8c>)
    c728:	4798      	blx	r3
	
    return retVal;
}
    c72a:	0028      	movs	r0, r5
    c72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c72e:	46c0      	nop			; (mov r8, r8)
    c730:	00011c7d 	.word	0x00011c7d
    c734:	0001212d 	.word	0x0001212d
    c738:	0000c58d 	.word	0x0000c58d
    c73c:	000053ad 	.word	0x000053ad
    c740:	000055f9 	.word	0x000055f9
    c744:	000053d5 	.word	0x000053d5
    c748:	00011da5 	.word	0x00011da5
    c74c:	00012161 	.word	0x00012161

0000c750 <Radio_ReadFSKRssi>:

\param rssi	- The RSSI measured in the channel.
\return		- ERR_NONE. Other types are not used now.
*************************************************************************/
RadioError_t Radio_ReadFSKRssi(int16_t *rssi)
{	
    c750:	b510      	push	{r4, lr}
    c752:	0004      	movs	r4, r0
#ifdef UT
	*rssi = testRssi;
#else // UT
	*rssi = -(RADIO_RegisterRead(REG_FSK_RSSIVALUE) >> 1);
    c754:	2011      	movs	r0, #17
    c756:	4b04      	ldr	r3, [pc, #16]	; (c768 <Radio_ReadFSKRssi+0x18>)
    c758:	4798      	blx	r3
    c75a:	0840      	lsrs	r0, r0, #1
    c75c:	b2c0      	uxtb	r0, r0
    c75e:	4240      	negs	r0, r0
    c760:	8020      	strh	r0, [r4, #0]
#endif // UT
	
	return ERR_NONE;
}
    c762:	2000      	movs	r0, #0
    c764:	bd10      	pop	{r4, pc}
    c766:	46c0      	nop			; (mov r8, r8)
    c768:	000053d5 	.word	0x000053d5

0000c76c <tc_cca_callback>:
}

/*! \brief  hw timer compare callback
 */
static void tc_cca_callback(struct tc_module *const module_instance)
{
    c76c:	b510      	push	{r4, lr}
	tmr_cca_callback();
    c76e:	4b01      	ldr	r3, [pc, #4]	; (c774 <tc_cca_callback+0x8>)
    c770:	4798      	blx	r3
}
    c772:	bd10      	pop	{r4, pc}
    c774:	00012ca1 	.word	0x00012ca1

0000c778 <tc_ovf_callback>:
{
    c778:	b510      	push	{r4, lr}
	tmr_ovf_callback();
    c77a:	4b01      	ldr	r3, [pc, #4]	; (c780 <tc_ovf_callback+0x8>)
    c77c:	4798      	blx	r3
}
    c77e:	bd10      	pop	{r4, pc}
    c780:	00012c59 	.word	0x00012c59

0000c784 <tmr_read_count>:
{
    c784:	b510      	push	{r4, lr}
	return ((uint16_t)tc_get_count_value(&module_inst));
    c786:	4802      	ldr	r0, [pc, #8]	; (c790 <tmr_read_count+0xc>)
    c788:	4b02      	ldr	r3, [pc, #8]	; (c794 <tmr_read_count+0x10>)
    c78a:	4798      	blx	r3
    c78c:	b280      	uxth	r0, r0
}
    c78e:	bd10      	pop	{r4, pc}
    c790:	200022a4 	.word	0x200022a4
    c794:	0000386d 	.word	0x0000386d

0000c798 <tmr_disable_cc_interrupt>:
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	if (callback_type == TC_CALLBACK_CC_CHANNEL0) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(1);
    c798:	4b03      	ldr	r3, [pc, #12]	; (c7a8 <tmr_disable_cc_interrupt+0x10>)
    c79a:	2110      	movs	r1, #16
    c79c:	681a      	ldr	r2, [r3, #0]
    c79e:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~TC_INTFLAG_MC(1);
    c7a0:	7e5a      	ldrb	r2, [r3, #25]
    c7a2:	438a      	bics	r2, r1
    c7a4:	765a      	strb	r2, [r3, #25]
}
    c7a6:	4770      	bx	lr
    c7a8:	200022a4 	.word	0x200022a4

0000c7ac <tmr_enable_cc_interrupt>:
{
    c7ac:	b510      	push	{r4, lr}
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c7ae:	4c0a      	ldr	r4, [pc, #40]	; (c7d8 <tmr_enable_cc_interrupt+0x2c>)
    c7b0:	6820      	ldr	r0, [r4, #0]
    c7b2:	4b0a      	ldr	r3, [pc, #40]	; (c7dc <tmr_enable_cc_interrupt+0x30>)
    c7b4:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c7b6:	4b0a      	ldr	r3, [pc, #40]	; (c7e0 <tmr_enable_cc_interrupt+0x34>)
    c7b8:	5c1b      	ldrb	r3, [r3, r0]
    c7ba:	221f      	movs	r2, #31
    c7bc:	401a      	ands	r2, r3
    c7be:	2301      	movs	r3, #1
    c7c0:	4093      	lsls	r3, r2
    c7c2:	4a08      	ldr	r2, [pc, #32]	; (c7e4 <tmr_enable_cc_interrupt+0x38>)
    c7c4:	6013      	str	r3, [r2, #0]
		module->enable_callback_mask |= TC_INTFLAG_MC(1);
    c7c6:	7e63      	ldrb	r3, [r4, #25]
    c7c8:	2210      	movs	r2, #16
    c7ca:	4313      	orrs	r3, r2
    c7cc:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = TC_INTFLAG_MC(1);
    c7ce:	6823      	ldr	r3, [r4, #0]
    c7d0:	2210      	movs	r2, #16
    c7d2:	725a      	strb	r2, [r3, #9]
}
    c7d4:	bd10      	pop	{r4, pc}
    c7d6:	46c0      	nop			; (mov r8, r8)
    c7d8:	200022a4 	.word	0x200022a4
    c7dc:	00003541 	.word	0x00003541
    c7e0:	0001dc34 	.word	0x0001dc34
    c7e4:	e000e100 	.word	0xe000e100

0000c7e8 <tmr_disable_ovf_interrupt>:
	else if (callback_type == TC_CALLBACK_CC_CHANNEL1) {
		module->hw->COUNT8.INTENCLR.reg = TC_INTFLAG_MC(2);
		module->enable_callback_mask &= ~TC_INTFLAG_MC(2);
	}
	else {
		module->hw->COUNT8.INTENCLR.reg = (1 << callback_type);
    c7e8:	4b03      	ldr	r3, [pc, #12]	; (c7f8 <tmr_disable_ovf_interrupt+0x10>)
    c7ea:	2101      	movs	r1, #1
    c7ec:	681a      	ldr	r2, [r3, #0]
    c7ee:	7211      	strb	r1, [r2, #8]
		module->enable_callback_mask &= ~(1 << callback_type);
    c7f0:	7e5a      	ldrb	r2, [r3, #25]
    c7f2:	438a      	bics	r2, r1
    c7f4:	765a      	strb	r2, [r3, #25]
}
    c7f6:	4770      	bx	lr
    c7f8:	200022a4 	.word	0x200022a4

0000c7fc <tmr_stop>:
	TcCount8 *const tc_module = &(module_inst->hw->COUNT8);
    c7fc:	4b06      	ldr	r3, [pc, #24]	; (c818 <tmr_stop+0x1c>)
    c7fe:	681a      	ldr	r2, [r3, #0]
	return (tc_module->SYNCBUSY.reg);
    c800:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c802:	2b00      	cmp	r3, #0
    c804:	d1fc      	bne.n	c800 <tmr_stop+0x4>
	tc_module->INTENCLR.reg = TC_INTENCLR_MASK;
    c806:	3333      	adds	r3, #51	; 0x33
    c808:	7213      	strb	r3, [r2, #8]
	tc_module->INTFLAG.reg = TC_INTFLAG_MASK;
    c80a:	7293      	strb	r3, [r2, #10]
	tc_module->CTRLA.reg  &= ~TC_CTRLA_ENABLE;
    c80c:	6813      	ldr	r3, [r2, #0]
    c80e:	2102      	movs	r1, #2
    c810:	438b      	bics	r3, r1
    c812:	6013      	str	r3, [r2, #0]
}
    c814:	4770      	bx	lr
    c816:	46c0      	nop			; (mov r8, r8)
    c818:	200022a4 	.word	0x200022a4

0000c81c <tmr_write_cmpreg>:
{
    c81c:	b510      	push	{r4, lr}
    c81e:	0002      	movs	r2, r0
	tc_set_compare_value(&module_inst, TC_COMPARE_CAPTURE_CHANNEL_0,
    c820:	2100      	movs	r1, #0
    c822:	4802      	ldr	r0, [pc, #8]	; (c82c <tmr_write_cmpreg+0x10>)
    c824:	4b02      	ldr	r3, [pc, #8]	; (c830 <tmr_write_cmpreg+0x14>)
    c826:	4798      	blx	r3
}
    c828:	bd10      	pop	{r4, pc}
    c82a:	46c0      	nop			; (mov r8, r8)
    c82c:	200022a4 	.word	0x200022a4
    c830:	000038ad 	.word	0x000038ad

0000c834 <save_cpu_interrupt>:
{
    c834:	b082      	sub	sp, #8
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    c836:	f3ef 8310 	mrs	r3, PRIMASK
	volatile irqflags_t flags = cpu_irq_is_enabled();
    c83a:	425a      	negs	r2, r3
    c83c:	4153      	adcs	r3, r2
    c83e:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    c840:	b672      	cpsid	i
    c842:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
    c846:	2200      	movs	r2, #0
    c848:	4b02      	ldr	r3, [pc, #8]	; (c854 <save_cpu_interrupt+0x20>)
    c84a:	701a      	strb	r2, [r3, #0]
	return flags;
    c84c:	9801      	ldr	r0, [sp, #4]
	return cpu_irq_save();
    c84e:	b2c0      	uxtb	r0, r0
}
    c850:	b002      	add	sp, #8
    c852:	4770      	bx	lr
    c854:	20000008 	.word	0x20000008

0000c858 <restore_cpu_interrupt>:
	if (cpu_irq_is_enabled_flags(flags))
    c858:	2800      	cmp	r0, #0
    c85a:	d005      	beq.n	c868 <restore_cpu_interrupt+0x10>
		cpu_irq_enable();
    c85c:	2201      	movs	r2, #1
    c85e:	4b03      	ldr	r3, [pc, #12]	; (c86c <restore_cpu_interrupt+0x14>)
    c860:	701a      	strb	r2, [r3, #0]
    c862:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    c866:	b662      	cpsie	i
}
    c868:	4770      	bx	lr
    c86a:	46c0      	nop			; (mov r8, r8)
    c86c:	20000008 	.word	0x20000008

0000c870 <tmr_init>:

/*! \brief  to initialize hw timer
 */
uint8_t tmr_init(void)
{
    c870:	b570      	push	{r4, r5, r6, lr}
	config->clock_source               = GCLK_GENERATOR_0;
    c872:	4a33      	ldr	r2, [pc, #204]	; (c940 <tmr_init+0xd0>)
    c874:	2100      	movs	r1, #0
    c876:	2300      	movs	r3, #0
    c878:	7011      	strb	r1, [r2, #0]
	config->counter_size               = TC_COUNTER_SIZE_16BIT;
    c87a:	70d1      	strb	r1, [r2, #3]
	config->clock_prescaler            = TC_CLOCK_PRESCALER_DIV1;
    c87c:	2000      	movs	r0, #0
    c87e:	8091      	strh	r1, [r2, #4]
	config->wave_generation            = TC_WAVE_GENERATION_NORMAL_FREQ;
    c880:	7190      	strb	r0, [r2, #6]
	config->reload_action              = TC_RELOAD_ACTION_GCLK;
    c882:	71d3      	strb	r3, [r2, #7]
	config->run_in_standby             = false;
    c884:	7053      	strb	r3, [r2, #1]
	config->on_demand                  = false;
    c886:	7093      	strb	r3, [r2, #2]
	config->waveform_invert_output     = TC_WAVEFORM_INVERT_OUTPUT_NONE;
    c888:	7213      	strb	r3, [r2, #8]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c88a:	7253      	strb	r3, [r2, #9]
	config->enable_capture_on_channel[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c88c:	7293      	strb	r3, [r2, #10]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_0] = false;
    c88e:	72d3      	strb	r3, [r2, #11]
	config->enable_capture_on_IO[TC_COMPARE_CAPTURE_CHANNEL_1] = false;
    c890:	7313      	strb	r3, [r2, #12]
	config->count_direction            = TC_COUNT_DIRECTION_UP;
    c892:	7393      	strb	r3, [r2, #14]
	config->oneshot                    = false;
    c894:	7353      	strb	r3, [r2, #13]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].enabled = false;
    c896:	7413      	strb	r3, [r2, #16]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_out = 0;
    c898:	6151      	str	r1, [r2, #20]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_0].pin_mux = 0;
    c89a:	6191      	str	r1, [r2, #24]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].enabled = false;
    c89c:	7713      	strb	r3, [r2, #28]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_out = 0;
    c89e:	6211      	str	r1, [r2, #32]
	config->pwm_channel[TC_COMPARE_CAPTURE_CHANNEL_1].pin_mux = 0;
    c8a0:	6251      	str	r1, [r2, #36]	; 0x24
	config->counter_16_bit.value                   = 0x0000;
    c8a2:	8511      	strh	r1, [r2, #40]	; 0x28
		[TC_COMPARE_CAPTURE_CHANNEL_1]                        = 0x0000;
    c8a4:	8591      	strh	r1, [r2, #44]	; 0x2c
	config->double_buffering_enabled = false;
    c8a6:	2334      	movs	r3, #52	; 0x34
    c8a8:	54d0      	strb	r0, [r2, r3]
		timer_config.clock_source = GCLK_GENERATOR_1;
		timer_config.clock_prescaler = TC_CLOCK_PRESCALER_DIV2;
		timer_config.run_in_standby = true;
	}
	#endif
	timer_config.counter_16_bit.compare_capture_channel[0] = TIMER_PERIOD;
    c8aa:	3b35      	subs	r3, #53	; 0x35
    c8ac:	8553      	strh	r3, [r2, #42]	; 0x2a
	tc_init(&module_inst, TIMER, &timer_config);
    c8ae:	4c25      	ldr	r4, [pc, #148]	; (c944 <tmr_init+0xd4>)
    c8b0:	4925      	ldr	r1, [pc, #148]	; (c948 <tmr_init+0xd8>)
    c8b2:	0020      	movs	r0, r4
    c8b4:	4b25      	ldr	r3, [pc, #148]	; (c94c <tmr_init+0xdc>)
    c8b6:	4798      	blx	r3
	tc_register_callback(&module_inst, tc_ovf_callback,
    c8b8:	2200      	movs	r2, #0
    c8ba:	4925      	ldr	r1, [pc, #148]	; (c950 <tmr_init+0xe0>)
    c8bc:	0020      	movs	r0, r4
    c8be:	4d25      	ldr	r5, [pc, #148]	; (c954 <tmr_init+0xe4>)
    c8c0:	47a8      	blx	r5
			TC_CALLBACK_OVERFLOW);
	tc_register_callback(&module_inst, tc_cca_callback,
    c8c2:	2202      	movs	r2, #2
    c8c4:	4924      	ldr	r1, [pc, #144]	; (c958 <tmr_init+0xe8>)
    c8c6:	0020      	movs	r0, r4
    c8c8:	47a8      	blx	r5
	system_interrupt_enable(_tc_interrupt_get_interrupt_vector(_tc_get_inst_index(module->hw)));
    c8ca:	6820      	ldr	r0, [r4, #0]
    c8cc:	4b23      	ldr	r3, [pc, #140]	; (c95c <tmr_init+0xec>)
    c8ce:	4798      	blx	r3
	return (enum system_interrupt_vector)tc_interrupt_vectors[inst_num];
    c8d0:	4b23      	ldr	r3, [pc, #140]	; (c960 <tmr_init+0xf0>)
    c8d2:	5c1a      	ldrb	r2, [r3, r0]
    c8d4:	231f      	movs	r3, #31
    c8d6:	4013      	ands	r3, r2
    c8d8:	2101      	movs	r1, #1
    c8da:	000a      	movs	r2, r1
    c8dc:	409a      	lsls	r2, r3
    c8de:	4b21      	ldr	r3, [pc, #132]	; (c964 <tmr_init+0xf4>)
    c8e0:	601a      	str	r2, [r3, #0]
		module->enable_callback_mask |= (1 << callback_type);
    c8e2:	7e63      	ldrb	r3, [r4, #25]
    c8e4:	2201      	movs	r2, #1
    c8e6:	4313      	orrs	r3, r2
    c8e8:	7663      	strb	r3, [r4, #25]
		module->hw->COUNT8.INTENSET.reg = (1 << callback_type);
    c8ea:	6822      	ldr	r2, [r4, #0]
    c8ec:	7251      	strb	r1, [r2, #9]
	return (tc_module->SYNCBUSY.reg);
    c8ee:	6913      	ldr	r3, [r2, #16]
	while (tc_is_syncing(module_inst)) {
    c8f0:	2b00      	cmp	r3, #0
    c8f2:	d1fc      	bne.n	c8ee <tmr_init+0x7e>
	tc_module->CTRLA.reg |= TC_CTRLA_ENABLE;
    c8f4:	6813      	ldr	r3, [r2, #0]
    c8f6:	2102      	movs	r1, #2
    c8f8:	430b      	orrs	r3, r1
    c8fa:	6013      	str	r3, [r2, #0]
	} else {
		timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;
	}

    #else
	timer_multiplier = system_gclk_gen_get_hz(0) / (float) DEF_1MHZ;	
    c8fc:	2000      	movs	r0, #0
    c8fe:	4b1a      	ldr	r3, [pc, #104]	; (c968 <tmr_init+0xf8>)
    c900:	4798      	blx	r3
    c902:	4d1a      	ldr	r5, [pc, #104]	; (c96c <tmr_init+0xfc>)
    c904:	47a8      	blx	r5
    c906:	491a      	ldr	r1, [pc, #104]	; (c970 <tmr_init+0x100>)
    c908:	4b1a      	ldr	r3, [pc, #104]	; (c974 <tmr_init+0x104>)
    c90a:	4798      	blx	r3
    c90c:	1c04      	adds	r4, r0, #0
	#endif
	
	if ((timer_multiplier - (uint32_t)timer_multiplier) >= 0.5f)
    c90e:	4b1a      	ldr	r3, [pc, #104]	; (c978 <tmr_init+0x108>)
    c910:	4798      	blx	r3
    c912:	47a8      	blx	r5
    c914:	1c01      	adds	r1, r0, #0
    c916:	1c20      	adds	r0, r4, #0
    c918:	4b18      	ldr	r3, [pc, #96]	; (c97c <tmr_init+0x10c>)
    c91a:	4798      	blx	r3
    c91c:	21fc      	movs	r1, #252	; 0xfc
    c91e:	0589      	lsls	r1, r1, #22
    c920:	4b17      	ldr	r3, [pc, #92]	; (c980 <tmr_init+0x110>)
    c922:	4798      	blx	r3
    c924:	2800      	cmp	r0, #0
    c926:	d005      	beq.n	c934 <tmr_init+0xc4>
	{
		timer_multiplier += 1.0f;
    c928:	21fe      	movs	r1, #254	; 0xfe
    c92a:	0589      	lsls	r1, r1, #22
    c92c:	1c20      	adds	r0, r4, #0
    c92e:	4b15      	ldr	r3, [pc, #84]	; (c984 <tmr_init+0x114>)
    c930:	4798      	blx	r3
    c932:	1c04      	adds	r4, r0, #0
	}
	
	return (uint8_t) timer_multiplier;
    c934:	1c20      	adds	r0, r4, #0
    c936:	4b10      	ldr	r3, [pc, #64]	; (c978 <tmr_init+0x108>)
    c938:	4798      	blx	r3
    c93a:	b2c0      	uxtb	r0, r0
}
    c93c:	bd70      	pop	{r4, r5, r6, pc}
    c93e:	46c0      	nop			; (mov r8, r8)
    c940:	2000226c 	.word	0x2000226c
    c944:	200022a4 	.word	0x200022a4
    c948:	42002000 	.word	0x42002000
    c94c:	0000357d 	.word	0x0000357d
    c950:	0000c779 	.word	0x0000c779
    c954:	00003459 	.word	0x00003459
    c958:	0000c76d 	.word	0x0000c76d
    c95c:	00003541 	.word	0x00003541
    c960:	0001dc34 	.word	0x0001dc34
    c964:	e000e100 	.word	0xe000e100
    c968:	00003221 	.word	0x00003221
    c96c:	00014051 	.word	0x00014051
    c970:	49742400 	.word	0x49742400
    c974:	00013619 	.word	0x00013619
    c978:	00013105 	.word	0x00013105
    c97c:	00013c39 	.word	0x00013c39
    c980:	0001305d 	.word	0x0001305d
    c984:	000132f5 	.word	0x000132f5

0000c988 <nvm_read>:
 * \internal Pointer to the NVM MEMORY region start address
 */
#define NVM_MEMORY        ((volatile uint16_t *)FLASH_ADDR)
status_code_t nvm_read(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    c988:	b570      	push	{r4, r5, r6, lr}

status_code_t nvm_sam0_read(mem_type_t mem, uint32_t address,
		uint8_t *const buffer,
		uint32_t len)
{
	switch (mem) {
    c98a:	2800      	cmp	r0, #0
    c98c:	d122      	bne.n	c9d4 <nvm_read+0x4c>
    c98e:	4814      	ldr	r0, [pc, #80]	; (c9e0 <nvm_read+0x58>)
    c990:	7d04      	ldrb	r4, [r0, #20]
    {
		/* Get a pointer to the module hardware instance */
		Nvmctrl *const nvm_module = NVMCTRL;
		/* Check if the module is busy */
		if (!nvm_is_ready()) {
			return STATUS_BUSY;
    c992:	2005      	movs	r0, #5
		if (!nvm_is_ready()) {
    c994:	07e4      	lsls	r4, r4, #31
    c996:	d400      	bmi.n	c99a <nvm_read+0x12>
}
    c998:	bd70      	pop	{r4, r5, r6, pc}
		}

		/* Clear error flags */
		nvm_module->STATUS.reg = NVMCTRL_STATUS_MASK;
    c99a:	2420      	movs	r4, #32
    c99c:	34ff      	adds	r4, #255	; 0xff
    c99e:	4810      	ldr	r0, [pc, #64]	; (c9e0 <nvm_read+0x58>)
    c9a0:	8304      	strh	r4, [r0, #24]
		uint32_t page_address = address / 2;

		/* NVM _must_ be accessed as a series of 16-bit words, perform
		 * manual copy
		 * to ensure alignment */
		for (uint16_t i = 0; i < len; i += 2) {
    c9a2:	2b00      	cmp	r3, #0
    c9a4:	d019      	beq.n	c9da <nvm_read+0x52>
    c9a6:	2001      	movs	r0, #1
    c9a8:	4381      	bics	r1, r0
    c9aa:	2000      	movs	r0, #0
    c9ac:	2500      	movs	r5, #0
			buffer[i] = (data & 0xFF);

			/* If we are not at the end of a read request with an
			 * odd byte count,
			 * store the next byte of data as well */
			if (i < (len - 1)) {
    c9ae:	1e5e      	subs	r6, r3, #1
    c9b0:	e005      	b.n	c9be <nvm_read+0x36>
		for (uint16_t i = 0; i < len; i += 2) {
    c9b2:	3002      	adds	r0, #2
    c9b4:	b280      	uxth	r0, r0
    c9b6:	0005      	movs	r5, r0
    c9b8:	3102      	adds	r1, #2
    c9ba:	4283      	cmp	r3, r0
    c9bc:	d908      	bls.n	c9d0 <nvm_read+0x48>
			uint16_t data = NVM_MEMORY[page_address++];
    c9be:	880c      	ldrh	r4, [r1, #0]
    c9c0:	b2a4      	uxth	r4, r4
			buffer[i] = (data & 0xFF);
    c9c2:	5554      	strb	r4, [r2, r5]
			if (i < (len - 1)) {
    c9c4:	42ae      	cmp	r6, r5
    c9c6:	d9f4      	bls.n	c9b2 <nvm_read+0x2a>
				buffer[i + 1] = (data >> 8);
    c9c8:	1955      	adds	r5, r2, r5
    c9ca:	0a24      	lsrs	r4, r4, #8
    c9cc:	706c      	strb	r4, [r5, #1]
    c9ce:	e7f0      	b.n	c9b2 <nvm_read+0x2a>

	default:
		return ERR_INVALID_ARG;
	}

	return STATUS_OK;
    c9d0:	2000      	movs	r0, #0
    c9d2:	e7e1      	b.n	c998 <nvm_read+0x10>
		return ERR_INVALID_ARG;
    c9d4:	2008      	movs	r0, #8
    c9d6:	4240      	negs	r0, r0
    c9d8:	e7de      	b.n	c998 <nvm_read+0x10>
	return STATUS_OK;
    c9da:	2000      	movs	r0, #0
    c9dc:	e7dc      	b.n	c998 <nvm_read+0x10>
    c9de:	46c0      	nop			; (mov r8, r8)
    c9e0:	41004000 	.word	0x41004000

0000c9e4 <nvm_write>:
	return error_code;
}

status_code_t nvm_write(mem_type_t mem, uint32_t address, void *buffer,
		uint32_t len)
{
    c9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c9e6:	46de      	mov	lr, fp
    c9e8:	4657      	mov	r7, sl
    c9ea:	464e      	mov	r6, r9
    c9ec:	4645      	mov	r5, r8
    c9ee:	b5e0      	push	{r5, r6, r7, lr}
    c9f0:	b0c5      	sub	sp, #276	; 0x114
	switch (mem) {
    c9f2:	2800      	cmp	r0, #0
    c9f4:	d168      	bne.n	cac8 <nvm_write+0xe4>
	case INT_FLASH:

		if (STATUS_OK != nvm_memcpy(address, buffer, len, true))
    c9f6:	b29b      	uxth	r3, r3
    c9f8:	469a      	mov	sl, r3
	volatile uint8_t *dest_add = (uint8_t *)destination_address;
    c9fa:	4688      	mov	r8, r1
	uint32_t row_start_address
    c9fc:	23ff      	movs	r3, #255	; 0xff
    c9fe:	4399      	bics	r1, r3
    ca00:	9100      	str	r1, [sp, #0]
	while (length) {
    ca02:	4653      	mov	r3, sl
    ca04:	2b00      	cmp	r3, #0
    ca06:	d06b      	beq.n	cae0 <nvm_write+0xfc>
    ca08:	ab04      	add	r3, sp, #16
    ca0a:	1a5b      	subs	r3, r3, r1
    ca0c:	9302      	str	r3, [sp, #8]
				error_code = nvm_read_buffer(
    ca0e:	4e35      	ldr	r6, [pc, #212]	; (cae4 <nvm_write+0x100>)
				error_code = nvm_erase_row(row_start_address);
    ca10:	4b35      	ldr	r3, [pc, #212]	; (cae8 <nvm_write+0x104>)
    ca12:	469b      	mov	fp, r3
    ca14:	9203      	str	r2, [sp, #12]
    ca16:	e03a      	b.n	ca8e <nvm_write+0xaa>
				(FLASH_PAGE_SIZE * NVMCTRL_ROW_PAGES); i++) {
    ca18:	3301      	adds	r3, #1
		for (i = row_start_address;
    ca1a:	42bb      	cmp	r3, r7
    ca1c:	d20e      	bcs.n	ca3c <nvm_write+0x58>
			if (length && ((uint8_t *)i == dest_add)) {
    ca1e:	2a00      	cmp	r2, #0
    ca20:	d0fa      	beq.n	ca18 <nvm_write+0x34>
    ca22:	4299      	cmp	r1, r3
    ca24:	d1f8      	bne.n	ca18 <nvm_write+0x34>
				row_buffer[i - row_start_address] = *src_buf++;
    ca26:	9d03      	ldr	r5, [sp, #12]
    ca28:	7828      	ldrb	r0, [r5, #0]
    ca2a:	9c02      	ldr	r4, [sp, #8]
    ca2c:	54e0      	strb	r0, [r4, r3]
				dest_add++;
    ca2e:	3101      	adds	r1, #1
				length--;
    ca30:	3a01      	subs	r2, #1
    ca32:	b292      	uxth	r2, r2
				row_buffer[i - row_start_address] = *src_buf++;
    ca34:	0028      	movs	r0, r5
    ca36:	3001      	adds	r0, #1
    ca38:	9003      	str	r0, [sp, #12]
    ca3a:	e7ed      	b.n	ca18 <nvm_write+0x34>
    ca3c:	4692      	mov	sl, r2
    ca3e:	4688      	mov	r8, r1
    ca40:	9c01      	ldr	r4, [sp, #4]
	cpu_irq_enter_critical();
    ca42:	4b2a      	ldr	r3, [pc, #168]	; (caec <nvm_write+0x108>)
    ca44:	4798      	blx	r3
				error_code = nvm_erase_row(row_start_address);
    ca46:	9800      	ldr	r0, [sp, #0]
    ca48:	47d8      	blx	fp
			} while (error_code == STATUS_BUSY);
    ca4a:	2805      	cmp	r0, #5
    ca4c:	d0fb      	beq.n	ca46 <nvm_write+0x62>
			if (error_code != STATUS_OK) {
    ca4e:	2800      	cmp	r0, #0
    ca50:	d13d      	bne.n	cace <nvm_write+0xea>
    ca52:	9d00      	ldr	r5, [sp, #0]
				error_code = nvm_write_buffer(
    ca54:	4f26      	ldr	r7, [pc, #152]	; (caf0 <nvm_write+0x10c>)
    ca56:	9401      	str	r4, [sp, #4]
    ca58:	9b00      	ldr	r3, [sp, #0]
    ca5a:	1aec      	subs	r4, r5, r3
    ca5c:	ab04      	add	r3, sp, #16
    ca5e:	469c      	mov	ip, r3
    ca60:	4464      	add	r4, ip
    ca62:	2240      	movs	r2, #64	; 0x40
    ca64:	0021      	movs	r1, r4
    ca66:	0028      	movs	r0, r5
    ca68:	47b8      	blx	r7
			} while (error_code == STATUS_BUSY);
    ca6a:	2805      	cmp	r0, #5
    ca6c:	d0f9      	beq.n	ca62 <nvm_write+0x7e>
			if (error_code != STATUS_OK) {
    ca6e:	2800      	cmp	r0, #0
    ca70:	d12d      	bne.n	cace <nvm_write+0xea>
    ca72:	3540      	adds	r5, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    ca74:	9b01      	ldr	r3, [sp, #4]
    ca76:	42ab      	cmp	r3, r5
    ca78:	d1ee      	bne.n	ca58 <nvm_write+0x74>
	cpu_irq_leave_critical();
    ca7a:	4b1e      	ldr	r3, [pc, #120]	; (caf4 <nvm_write+0x110>)
    ca7c:	4798      	blx	r3
    ca7e:	9b02      	ldr	r3, [sp, #8]
    ca80:	3b01      	subs	r3, #1
    ca82:	3bff      	subs	r3, #255	; 0xff
    ca84:	9302      	str	r3, [sp, #8]
    ca86:	9500      	str	r5, [sp, #0]
	while (length) {
    ca88:	4653      	mov	r3, sl
    ca8a:	2b00      	cmp	r3, #0
    ca8c:	d028      	beq.n	cae0 <nvm_write+0xfc>
    ca8e:	9b00      	ldr	r3, [sp, #0]
    ca90:	1c5f      	adds	r7, r3, #1
    ca92:	37ff      	adds	r7, #255	; 0xff
{
    ca94:	001c      	movs	r4, r3
    ca96:	46b9      	mov	r9, r7
    ca98:	001f      	movs	r7, r3
    ca9a:	1be5      	subs	r5, r4, r7
    ca9c:	ab04      	add	r3, sp, #16
    ca9e:	469c      	mov	ip, r3
    caa0:	4465      	add	r5, ip
				error_code = nvm_read_buffer(
    caa2:	2240      	movs	r2, #64	; 0x40
    caa4:	0029      	movs	r1, r5
    caa6:	0020      	movs	r0, r4
    caa8:	47b0      	blx	r6
			} while (error_code == STATUS_BUSY);
    caaa:	2805      	cmp	r0, #5
    caac:	d0f9      	beq.n	caa2 <nvm_write+0xbe>
			if (error_code != STATUS_OK) {
    caae:	2800      	cmp	r0, #0
    cab0:	d10d      	bne.n	cace <nvm_write+0xea>
    cab2:	3440      	adds	r4, #64	; 0x40
		for (i = 0; i < NVMCTRL_ROW_PAGES; i++) {
    cab4:	454c      	cmp	r4, r9
    cab6:	d1f0      	bne.n	ca9a <nvm_write+0xb6>
    cab8:	464f      	mov	r7, r9
		for (i = row_start_address;
    caba:	9b00      	ldr	r3, [sp, #0]
    cabc:	429f      	cmp	r7, r3
    cabe:	d9c0      	bls.n	ca42 <nvm_write+0x5e>
    cac0:	4652      	mov	r2, sl
    cac2:	4641      	mov	r1, r8
    cac4:	9401      	str	r4, [sp, #4]
    cac6:	e7aa      	b.n	ca1e <nvm_write+0x3a>
			return ERR_INVALID_ARG;
		}
		break;

	default:
		return ERR_INVALID_ARG;
    cac8:	2008      	movs	r0, #8
    caca:	4240      	negs	r0, r0
    cacc:	e001      	b.n	cad2 <nvm_write+0xee>
			return ERR_INVALID_ARG;
    cace:	2008      	movs	r0, #8
    cad0:	4240      	negs	r0, r0
	}

	return STATUS_OK;
}
    cad2:	b045      	add	sp, #276	; 0x114
    cad4:	bc3c      	pop	{r2, r3, r4, r5}
    cad6:	4690      	mov	r8, r2
    cad8:	4699      	mov	r9, r3
    cada:	46a2      	mov	sl, r4
    cadc:	46ab      	mov	fp, r5
    cade:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return STATUS_OK;
    cae0:	2000      	movs	r0, #0
    cae2:	e7f6      	b.n	cad2 <nvm_write+0xee>
    cae4:	00000f25 	.word	0x00000f25
    cae8:	00000fa5 	.word	0x00000fa5
    caec:	000001ad 	.word	0x000001ad
    caf0:	00000e4d 	.word	0x00000e4d
    caf4:	000001ed 	.word	0x000001ed

0000caf8 <nvm_init>:

status_code_t nvm_init(mem_type_t mem)
{
    caf8:	b500      	push	{lr}
    cafa:	b083      	sub	sp, #12
	if (INT_FLASH == mem) {
    cafc:	2800      	cmp	r0, #0
    cafe:	d110      	bne.n	cb22 <nvm_init+0x2a>
	config->sleep_power_mode  = NVM_SLEEP_POWER_MODE_WAKEONACCESS;
    cb00:	2300      	movs	r3, #0
    cb02:	466a      	mov	r2, sp
    cb04:	7013      	strb	r3, [r2, #0]
	config->wait_states       = NVMCTRL->CTRLB.bit.RWS;
    cb06:	4a08      	ldr	r2, [pc, #32]	; (cb28 <nvm_init+0x30>)
    cb08:	6852      	ldr	r2, [r2, #4]
	config->disable_cache     = false;
    cb0a:	466a      	mov	r2, sp
    cb0c:	70d3      	strb	r3, [r2, #3]
	config->cache_readmode    = NVM_CACHE_READMODE_NO_MISS_PENALTY;
    cb0e:	7113      	strb	r3, [r2, #4]
		struct nvm_config config;
		/* Get the default configuration */
		nvm_get_config_defaults(&config);

		/* Enable automatic page write mode */
		config.manual_page_write = false;
    cb10:	7053      	strb	r3, [r2, #1]

		/* Set wait state to 1 */
		config.wait_states = 2;
    cb12:	3302      	adds	r3, #2
    cb14:	7093      	strb	r3, [r2, #2]

		/* Set the NVM configuration */
		nvm_set_config(&config);
    cb16:	4668      	mov	r0, sp
    cb18:	4b04      	ldr	r3, [pc, #16]	; (cb2c <nvm_init+0x34>)
    cb1a:	4798      	blx	r3

		return STATUS_OK;
    cb1c:	2000      	movs	r0, #0
	}

	return ERR_INVALID_ARG;
}
    cb1e:	b003      	add	sp, #12
    cb20:	bd00      	pop	{pc}
	return ERR_INVALID_ARG;
    cb22:	2008      	movs	r0, #8
    cb24:	4240      	negs	r0, r0
    cb26:	e7fa      	b.n	cb1e <nvm_init+0x26>
    cb28:	41004000 	.word	0x41004000
    cb2c:	00000d11 	.word	0x00000d11

0000cb30 <MacClearCommands>:
    cb30:	490e      	ldr	r1, [pc, #56]	; (cb6c <MacClearCommands+0x3c>)
    cb32:	b570      	push	{r4, r5, r6, lr}
    cb34:	000b      	movs	r3, r1
    cb36:	33b8      	adds	r3, #184	; 0xb8
    cb38:	7818      	ldrb	r0, [r3, #0]
    cb3a:	2303      	movs	r3, #3
    cb3c:	25a4      	movs	r5, #164	; 0xa4
    cb3e:	4343      	muls	r3, r0
    cb40:	2401      	movs	r4, #1
    cb42:	20ff      	movs	r0, #255	; 0xff
    cb44:	3371      	adds	r3, #113	; 0x71
    cb46:	4a0a      	ldr	r2, [pc, #40]	; (cb70 <MacClearCommands+0x40>)
    cb48:	185b      	adds	r3, r3, r1
    cb4a:	00ed      	lsls	r5, r5, #3
    cb4c:	429a      	cmp	r2, r3
    cb4e:	d100      	bne.n	cb52 <MacClearCommands+0x22>
    cb50:	bd70      	pop	{r4, r5, r6, pc}
    cb52:	7811      	ldrb	r1, [r2, #0]
    cb54:	29ff      	cmp	r1, #255	; 0xff
    cb56:	d006      	beq.n	cb66 <MacClearCommands+0x36>
    cb58:	290a      	cmp	r1, #10
    cb5a:	d803      	bhi.n	cb64 <MacClearCommands+0x34>
    cb5c:	0026      	movs	r6, r4
    cb5e:	408e      	lsls	r6, r1
    cb60:	422e      	tst	r6, r5
    cb62:	d100      	bne.n	cb66 <MacClearCommands+0x36>
    cb64:	7010      	strb	r0, [r2, #0]
    cb66:	3203      	adds	r2, #3
    cb68:	e7f0      	b.n	cb4c <MacClearCommands+0x1c>
    cb6a:	46c0      	nop			; (mov r8, r8)
    cb6c:	200023e4 	.word	0x200023e4
    cb70:	20002455 	.word	0x20002455

0000cb74 <CountfOptsLength>:
    cb74:	2200      	movs	r2, #0
    cb76:	490d      	ldr	r1, [pc, #52]	; (cbac <CountfOptsLength+0x38>)
    cb78:	b570      	push	{r4, r5, r6, lr}
    cb7a:	000b      	movs	r3, r1
    cb7c:	0010      	movs	r0, r2
    cb7e:	2503      	movs	r5, #3
    cb80:	33b8      	adds	r3, #184	; 0xb8
    cb82:	781c      	ldrb	r4, [r3, #0]
    cb84:	4e0a      	ldr	r6, [pc, #40]	; (cbb0 <CountfOptsLength+0x3c>)
    cb86:	b2d3      	uxtb	r3, r2
    cb88:	429c      	cmp	r4, r3
    cb8a:	d800      	bhi.n	cb8e <CountfOptsLength+0x1a>
    cb8c:	bd70      	pop	{r4, r5, r6, pc}
    cb8e:	002b      	movs	r3, r5
    cb90:	4353      	muls	r3, r2
    cb92:	3371      	adds	r3, #113	; 0x71
    cb94:	5ccb      	ldrb	r3, [r1, r3]
    cb96:	2bff      	cmp	r3, #255	; 0xff
    cb98:	d006      	beq.n	cba8 <CountfOptsLength+0x34>
    cb9a:	18f3      	adds	r3, r6, r3
    cb9c:	3b02      	subs	r3, #2
    cb9e:	781b      	ldrb	r3, [r3, #0]
    cba0:	18c3      	adds	r3, r0, r3
    cba2:	2b0f      	cmp	r3, #15
    cba4:	dcf2      	bgt.n	cb8c <CountfOptsLength+0x18>
    cba6:	b2d8      	uxtb	r0, r3
    cba8:	3201      	adds	r2, #1
    cbaa:	e7ec      	b.n	cb86 <CountfOptsLength+0x12>
    cbac:	200023e4 	.word	0x200023e4
    cbb0:	0001dc3c 	.word	0x0001dc3c

0000cbb4 <StopAllSoftwareTimers>:
    cbb4:	b570      	push	{r4, r5, r6, lr}
    cbb6:	4c17      	ldr	r4, [pc, #92]	; (cc14 <StopAllSoftwareTimers+0x60>)
    cbb8:	4d17      	ldr	r5, [pc, #92]	; (cc18 <StopAllSoftwareTimers+0x64>)
    cbba:	0023      	movs	r3, r4
    cbbc:	33c2      	adds	r3, #194	; 0xc2
    cbbe:	7818      	ldrb	r0, [r3, #0]
    cbc0:	47a8      	blx	r5
    cbc2:	0023      	movs	r3, r4
    cbc4:	33c3      	adds	r3, #195	; 0xc3
    cbc6:	7818      	ldrb	r0, [r3, #0]
    cbc8:	47a8      	blx	r5
    cbca:	0023      	movs	r3, r4
    cbcc:	33c7      	adds	r3, #199	; 0xc7
    cbce:	7818      	ldrb	r0, [r3, #0]
    cbd0:	47a8      	blx	r5
    cbd2:	0023      	movs	r3, r4
    cbd4:	33c4      	adds	r3, #196	; 0xc4
    cbd6:	7818      	ldrb	r0, [r3, #0]
    cbd8:	47a8      	blx	r5
    cbda:	0023      	movs	r3, r4
    cbdc:	33c5      	adds	r3, #197	; 0xc5
    cbde:	7818      	ldrb	r0, [r3, #0]
    cbe0:	47a8      	blx	r5
    cbe2:	0023      	movs	r3, r4
    cbe4:	33c8      	adds	r3, #200	; 0xc8
    cbe6:	7818      	ldrb	r0, [r3, #0]
    cbe8:	47a8      	blx	r5
    cbea:	0023      	movs	r3, r4
    cbec:	33c6      	adds	r3, #198	; 0xc6
    cbee:	7818      	ldrb	r0, [r3, #0]
    cbf0:	47a8      	blx	r5
    cbf2:	0023      	movs	r3, r4
    cbf4:	33c9      	adds	r3, #201	; 0xc9
    cbf6:	7818      	ldrb	r0, [r3, #0]
    cbf8:	47a8      	blx	r5
    cbfa:	0023      	movs	r3, r4
    cbfc:	33d2      	adds	r3, #210	; 0xd2
    cbfe:	7818      	ldrb	r0, [r3, #0]
    cc00:	47a8      	blx	r5
    cc02:	0023      	movs	r3, r4
    cc04:	33d3      	adds	r3, #211	; 0xd3
    cc06:	7818      	ldrb	r0, [r3, #0]
    cc08:	34fc      	adds	r4, #252	; 0xfc
    cc0a:	47a8      	blx	r5
    cc0c:	7820      	ldrb	r0, [r4, #0]
    cc0e:	47a8      	blx	r5
    cc10:	bd70      	pop	{r4, r5, r6, pc}
    cc12:	46c0      	nop			; (mov r8, r8)
    cc14:	200023e4 	.word	0x200023e4
    cc18:	0000c235 	.word	0x0000c235

0000cc1c <LorawanGetMaxPayloadSize>:
    cc1c:	b513      	push	{r0, r1, r4, lr}
    cc1e:	466b      	mov	r3, sp
    cc20:	1ddc      	adds	r4, r3, #7
    cc22:	2300      	movs	r3, #0
    cc24:	0022      	movs	r2, r4
    cc26:	7023      	strb	r3, [r4, #0]
    cc28:	4902      	ldr	r1, [pc, #8]	; (cc34 <LorawanGetMaxPayloadSize+0x18>)
    cc2a:	4b03      	ldr	r3, [pc, #12]	; (cc38 <LorawanGetMaxPayloadSize+0x1c>)
    cc2c:	2005      	movs	r0, #5
    cc2e:	4798      	blx	r3
    cc30:	7820      	ldrb	r0, [r4, #0]
    cc32:	bd16      	pop	{r1, r2, r4, pc}
    cc34:	200024a3 	.word	0x200024a3
    cc38:	0000aa71 	.word	0x0000aa71

0000cc3c <UpdateReceiveDelays>:
    cc3c:	23fa      	movs	r3, #250	; 0xfa
    cc3e:	b570      	push	{r4, r5, r6, lr}
    cc40:	009b      	lsls	r3, r3, #2
    cc42:	4c0b      	ldr	r4, [pc, #44]	; (cc70 <UpdateReceiveDelays+0x34>)
    cc44:	2800      	cmp	r0, #0
    cc46:	d000      	beq.n	cc4a <UpdateReceiveDelays+0xe>
    cc48:	4343      	muls	r3, r0
    cc4a:	0022      	movs	r2, r4
    cc4c:	4d09      	ldr	r5, [pc, #36]	; (cc74 <UpdateReceiveDelays+0x38>)
    cc4e:	32a8      	adds	r2, #168	; 0xa8
    cc50:	210c      	movs	r1, #12
    cc52:	2000      	movs	r0, #0
    cc54:	8013      	strh	r3, [r2, #0]
    cc56:	47a8      	blx	r5
    cc58:	0023      	movs	r3, r4
    cc5a:	22fa      	movs	r2, #250	; 0xfa
    cc5c:	33a8      	adds	r3, #168	; 0xa8
    cc5e:	881b      	ldrh	r3, [r3, #0]
    cc60:	0092      	lsls	r2, r2, #2
    cc62:	189b      	adds	r3, r3, r2
    cc64:	34aa      	adds	r4, #170	; 0xaa
    cc66:	210d      	movs	r1, #13
    cc68:	2000      	movs	r0, #0
    cc6a:	8023      	strh	r3, [r4, #0]
    cc6c:	47a8      	blx	r5
    cc6e:	bd70      	pop	{r4, r5, r6, pc}
    cc70:	200023e4 	.word	0x200023e4
    cc74:	0000af89 	.word	0x0000af89

0000cc78 <IncludeMacCommandsResponse>:
    cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc7a:	0005      	movs	r5, r0
    cc7c:	2600      	movs	r6, #0
    cc7e:	b087      	sub	sp, #28
    cc80:	880c      	ldrh	r4, [r1, #0]
    cc82:	9101      	str	r1, [sp, #4]
    cc84:	9203      	str	r2, [sp, #12]
    cc86:	4a67      	ldr	r2, [pc, #412]	; (ce24 <IncludeMacCommandsResponse+0x1ac>)
    cc88:	0013      	movs	r3, r2
    cc8a:	33b8      	adds	r3, #184	; 0xb8
    cc8c:	781b      	ldrb	r3, [r3, #0]
    cc8e:	42b3      	cmp	r3, r6
    cc90:	d913      	bls.n	ccba <IncludeMacCommandsResponse+0x42>
    cc92:	9b03      	ldr	r3, [sp, #12]
    cc94:	2b00      	cmp	r3, #0
    cc96:	d019      	beq.n	cccc <IncludeMacCommandsResponse+0x54>
    cc98:	2303      	movs	r3, #3
    cc9a:	4373      	muls	r3, r6
    cc9c:	18d3      	adds	r3, r2, r3
    cc9e:	3371      	adds	r3, #113	; 0x71
    cca0:	7818      	ldrb	r0, [r3, #0]
    cca2:	28ff      	cmp	r0, #255	; 0xff
    cca4:	d012      	beq.n	cccc <IncludeMacCommandsResponse+0x54>
    cca6:	9b01      	ldr	r3, [sp, #4]
    cca8:	8819      	ldrh	r1, [r3, #0]
    ccaa:	4b5f      	ldr	r3, [pc, #380]	; (ce28 <IncludeMacCommandsResponse+0x1b0>)
    ccac:	1a61      	subs	r1, r4, r1
    ccae:	181b      	adds	r3, r3, r0
    ccb0:	3b02      	subs	r3, #2
    ccb2:	781b      	ldrb	r3, [r3, #0]
    ccb4:	18cb      	adds	r3, r1, r3
    ccb6:	2b0f      	cmp	r3, #15
    ccb8:	dd08      	ble.n	cccc <IncludeMacCommandsResponse+0x54>
    ccba:	2207      	movs	r2, #7
    ccbc:	2100      	movs	r1, #0
    ccbe:	4b5b      	ldr	r3, [pc, #364]	; (ce2c <IncludeMacCommandsResponse+0x1b4>)
    ccc0:	485b      	ldr	r0, [pc, #364]	; (ce30 <IncludeMacCommandsResponse+0x1b8>)
    ccc2:	4798      	blx	r3
    ccc4:	9b01      	ldr	r3, [sp, #4]
    ccc6:	801c      	strh	r4, [r3, #0]
    ccc8:	b007      	add	sp, #28
    ccca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cccc:	2303      	movs	r3, #3
    ccce:	4373      	muls	r3, r6
    ccd0:	18d3      	adds	r3, r2, r3
    ccd2:	3371      	adds	r3, #113	; 0x71
    ccd4:	7819      	ldrb	r1, [r3, #0]
    ccd6:	1e88      	subs	r0, r1, #2
    ccd8:	2808      	cmp	r0, #8
    ccda:	d862      	bhi.n	cda2 <IncludeMacCommandsResponse+0x12a>
    ccdc:	1c63      	adds	r3, r4, #1
    ccde:	f006 f803 	bl	12ce8 <__gnu_thumb1_case_uqi>
    cce2:	0594      	.short	0x0594
    cce4:	6646269e 	.word	0x6646269e
    cce8:	7b9e      	.short	0x7b9e
    ccea:	7f          	.byte	0x7f
    cceb:	00          	.byte	0x00
    ccec:	2203      	movs	r2, #3
    ccee:	20b8      	movs	r0, #184	; 0xb8
    ccf0:	552a      	strb	r2, [r5, r4]
    ccf2:	2200      	movs	r2, #0
    ccf4:	b29b      	uxth	r3, r3
    ccf6:	18eb      	adds	r3, r5, r3
    ccf8:	4f4a      	ldr	r7, [pc, #296]	; (ce24 <IncludeMacCommandsResponse+0x1ac>)
    ccfa:	701a      	strb	r2, [r3, #0]
    ccfc:	30ff      	adds	r0, #255	; 0xff
    ccfe:	5c39      	ldrb	r1, [r7, r0]
    cd00:	3201      	adds	r2, #1
    cd02:	4011      	ands	r1, r2
    cd04:	466a      	mov	r2, sp
    cd06:	9102      	str	r1, [sp, #8]
    cd08:	7a12      	ldrb	r2, [r2, #8]
    cd0a:	701a      	strb	r2, [r3, #0]
    cd0c:	5c3a      	ldrb	r2, [r7, r0]
    cd0e:	4694      	mov	ip, r2
    cd10:	2202      	movs	r2, #2
    cd12:	4661      	mov	r1, ip
    cd14:	4211      	tst	r1, r2
    cd16:	d002      	beq.n	cd1e <IncludeMacCommandsResponse+0xa6>
    cd18:	9902      	ldr	r1, [sp, #8]
    cd1a:	430a      	orrs	r2, r1
    cd1c:	701a      	strb	r2, [r3, #0]
    cd1e:	2204      	movs	r2, #4
    cd20:	5c39      	ldrb	r1, [r7, r0]
    cd22:	4211      	tst	r1, r2
    cd24:	d06e      	beq.n	ce04 <IncludeMacCommandsResponse+0x18c>
    cd26:	7819      	ldrb	r1, [r3, #0]
    cd28:	430a      	orrs	r2, r1
    cd2a:	701a      	strb	r2, [r3, #0]
    cd2c:	e06a      	b.n	ce04 <IncludeMacCommandsResponse+0x18c>
    cd2e:	2205      	movs	r2, #5
    cd30:	2103      	movs	r1, #3
    cd32:	552a      	strb	r2, [r5, r4]
    cd34:	2200      	movs	r2, #0
    cd36:	b29b      	uxth	r3, r3
    cd38:	4371      	muls	r1, r6
    cd3a:	18eb      	adds	r3, r5, r3
    cd3c:	701a      	strb	r2, [r3, #0]
    cd3e:	4a39      	ldr	r2, [pc, #228]	; (ce24 <IncludeMacCommandsResponse+0x1ac>)
    cd40:	1851      	adds	r1, r2, r1
    cd42:	3170      	adds	r1, #112	; 0x70
    cd44:	7888      	ldrb	r0, [r1, #2]
    cd46:	0700      	lsls	r0, r0, #28
    cd48:	0fc0      	lsrs	r0, r0, #31
    cd4a:	7018      	strb	r0, [r3, #0]
    cd4c:	7889      	ldrb	r1, [r1, #2]
    cd4e:	b2c7      	uxtb	r7, r0
    cd50:	06c9      	lsls	r1, r1, #27
    cd52:	d502      	bpl.n	cd5a <IncludeMacCommandsResponse+0xe2>
    cd54:	2102      	movs	r1, #2
    cd56:	4339      	orrs	r1, r7
    cd58:	7019      	strb	r1, [r3, #0]
    cd5a:	2103      	movs	r1, #3
    cd5c:	4371      	muls	r1, r6
    cd5e:	1852      	adds	r2, r2, r1
    cd60:	3270      	adds	r2, #112	; 0x70
    cd62:	7892      	ldrb	r2, [r2, #2]
    cd64:	0692      	lsls	r2, r2, #26
    cd66:	d54d      	bpl.n	ce04 <IncludeMacCommandsResponse+0x18c>
    cd68:	7819      	ldrb	r1, [r3, #0]
    cd6a:	2204      	movs	r2, #4
    cd6c:	e7dc      	b.n	cd28 <IncludeMacCommandsResponse+0xb0>
    cd6e:	ab04      	add	r3, sp, #16
    cd70:	1ddf      	adds	r7, r3, #7
    cd72:	0039      	movs	r1, r7
    cd74:	4b2f      	ldr	r3, [pc, #188]	; (ce34 <IncludeMacCommandsResponse+0x1bc>)
    cd76:	200e      	movs	r0, #14
    cd78:	4798      	blx	r3
    cd7a:	2306      	movs	r3, #6
    cd7c:	4a29      	ldr	r2, [pc, #164]	; (ce24 <IncludeMacCommandsResponse+0x1ac>)
    cd7e:	552b      	strb	r3, [r5, r4]
    cd80:	32c0      	adds	r2, #192	; 0xc0
    cd82:	7811      	ldrb	r1, [r2, #0]
    cd84:	1c62      	adds	r2, r4, #1
    cd86:	b292      	uxth	r2, r2
    cd88:	54a9      	strb	r1, [r5, r2]
    cd8a:	783a      	ldrb	r2, [r7, #0]
    cd8c:	1ca3      	adds	r3, r4, #2
    cd8e:	0011      	movs	r1, r2
    cd90:	3120      	adds	r1, #32
    cd92:	3403      	adds	r4, #3
    cd94:	b2c9      	uxtb	r1, r1
    cd96:	b29b      	uxth	r3, r3
    cd98:	b2a4      	uxth	r4, r4
    cd9a:	293f      	cmp	r1, #63	; 0x3f
    cd9c:	d904      	bls.n	cda8 <IncludeMacCommandsResponse+0x130>
    cd9e:	2220      	movs	r2, #32
    cda0:	54ea      	strb	r2, [r5, r3]
    cda2:	3601      	adds	r6, #1
    cda4:	b2f6      	uxtb	r6, r6
    cda6:	e76e      	b.n	cc86 <IncludeMacCommandsResponse+0xe>
    cda8:	213f      	movs	r1, #63	; 0x3f
    cdaa:	400a      	ands	r2, r1
    cdac:	e7f8      	b.n	cda0 <IncludeMacCommandsResponse+0x128>
    cdae:	2207      	movs	r2, #7
    cdb0:	2103      	movs	r1, #3
    cdb2:	552a      	strb	r2, [r5, r4]
    cdb4:	2200      	movs	r2, #0
    cdb6:	4371      	muls	r1, r6
    cdb8:	b29b      	uxth	r3, r3
    cdba:	18eb      	adds	r3, r5, r3
    cdbc:	701a      	strb	r2, [r3, #0]
    cdbe:	4a19      	ldr	r2, [pc, #100]	; (ce24 <IncludeMacCommandsResponse+0x1ac>)
    cdc0:	1852      	adds	r2, r2, r1
    cdc2:	3270      	adds	r2, #112	; 0x70
    cdc4:	7891      	ldrb	r1, [r2, #2]
    cdc6:	09c9      	lsrs	r1, r1, #7
    cdc8:	7019      	strb	r1, [r3, #0]
    cdca:	7892      	ldrb	r2, [r2, #2]
    cdcc:	b2c8      	uxtb	r0, r1
    cdce:	0652      	lsls	r2, r2, #25
    cdd0:	d518      	bpl.n	ce04 <IncludeMacCommandsResponse+0x18c>
    cdd2:	2202      	movs	r2, #2
    cdd4:	4302      	orrs	r2, r0
    cdd6:	e7a8      	b.n	cd2a <IncludeMacCommandsResponse+0xb2>
    cdd8:	2209      	movs	r2, #9
    cdda:	552a      	strb	r2, [r5, r4]
    cddc:	b29c      	uxth	r4, r3
    cdde:	e7e0      	b.n	cda2 <IncludeMacCommandsResponse+0x12a>
    cde0:	220a      	movs	r2, #10
    cde2:	2103      	movs	r1, #3
    cde4:	552a      	strb	r2, [r5, r4]
    cde6:	2200      	movs	r2, #0
    cde8:	4371      	muls	r1, r6
    cdea:	b29b      	uxth	r3, r3
    cdec:	18eb      	adds	r3, r5, r3
    cdee:	701a      	strb	r2, [r3, #0]
    cdf0:	4a0c      	ldr	r2, [pc, #48]	; (ce24 <IncludeMacCommandsResponse+0x1ac>)
    cdf2:	1852      	adds	r2, r2, r1
    cdf4:	3270      	adds	r2, #112	; 0x70
    cdf6:	7891      	ldrb	r1, [r2, #2]
    cdf8:	09c9      	lsrs	r1, r1, #7
    cdfa:	7019      	strb	r1, [r3, #0]
    cdfc:	78d2      	ldrb	r2, [r2, #3]
    cdfe:	b2c8      	uxtb	r0, r1
    ce00:	07d2      	lsls	r2, r2, #31
    ce02:	d4e6      	bmi.n	cdd2 <IncludeMacCommandsResponse+0x15a>
    ce04:	3402      	adds	r4, #2
    ce06:	b2a4      	uxth	r4, r4
    ce08:	e7cb      	b.n	cda2 <IncludeMacCommandsResponse+0x12a>
    ce0a:	0013      	movs	r3, r2
    ce0c:	21ff      	movs	r1, #255	; 0xff
    ce0e:	33bd      	adds	r3, #189	; 0xbd
    ce10:	7019      	strb	r1, [r3, #0]
    ce12:	2300      	movs	r3, #0
    ce14:	32be      	adds	r2, #190	; 0xbe
    ce16:	7013      	strb	r3, [r2, #0]
    ce18:	1c63      	adds	r3, r4, #1
    ce1a:	2202      	movs	r2, #2
    ce1c:	e7dd      	b.n	cdda <IncludeMacCommandsResponse+0x162>
    ce1e:	5529      	strb	r1, [r5, r4]
    ce20:	e7dc      	b.n	cddc <IncludeMacCommandsResponse+0x164>
    ce22:	46c0      	nop			; (mov r8, r8)
    ce24:	200023e4 	.word	0x200023e4
    ce28:	0001dc3c 	.word	0x0001dc3c
    ce2c:	00015fc9 	.word	0x00015fc9
    ce30:	2000259b 	.word	0x2000259b
    ce34:	00011071 	.word	0x00011071

0000ce38 <UpdateJoinSuccessState>:
    ce38:	b5f0      	push	{r4, r5, r6, r7, lr}
    ce3a:	4c33      	ldr	r4, [pc, #204]	; (cf08 <UpdateJoinSuccessState+0xd0>)
    ce3c:	2104      	movs	r1, #4
    ce3e:	0022      	movs	r2, r4
    ce40:	326c      	adds	r2, #108	; 0x6c
    ce42:	7813      	ldrb	r3, [r2, #0]
    ce44:	2001      	movs	r0, #1
    ce46:	438b      	bics	r3, r1
    ce48:	7013      	strb	r3, [r2, #0]
    ce4a:	0022      	movs	r2, r4
    ce4c:	2500      	movs	r5, #0
    ce4e:	325c      	adds	r2, #92	; 0x5c
    ce50:	7813      	ldrb	r3, [r2, #0]
    ce52:	b087      	sub	sp, #28
    ce54:	4303      	orrs	r3, r0
    ce56:	3107      	adds	r1, #7
    ce58:	4f2c      	ldr	r7, [pc, #176]	; (cf0c <UpdateJoinSuccessState+0xd4>)
    ce5a:	7013      	strb	r3, [r2, #0]
    ce5c:	47b8      	blx	r7
    ce5e:	2116      	movs	r1, #22
    ce60:	0028      	movs	r0, r5
    ce62:	6625      	str	r5, [r4, #96]	; 0x60
    ce64:	47b8      	blx	r7
    ce66:	0023      	movs	r3, r4
    ce68:	2020      	movs	r0, #32
    ce6a:	33f0      	adds	r3, #240	; 0xf0
    ce6c:	781b      	ldrb	r3, [r3, #0]
    ce6e:	4e28      	ldr	r6, [pc, #160]	; (cf10 <UpdateJoinSuccessState+0xd8>)
    ce70:	4203      	tst	r3, r0
    ce72:	d014      	beq.n	ce9e <UpdateJoinSuccessState+0x66>
    ce74:	0023      	movs	r3, r4
    ce76:	335b      	adds	r3, #91	; 0x5b
    ce78:	701d      	strb	r5, [r3, #0]
    ce7a:	0023      	movs	r3, r4
    ce7c:	a904      	add	r1, sp, #16
    ce7e:	334f      	adds	r3, #79	; 0x4f
    ce80:	710d      	strb	r5, [r1, #4]
    ce82:	701d      	strb	r5, [r3, #0]
    ce84:	705d      	strb	r5, [r3, #1]
    ce86:	709d      	strb	r5, [r3, #2]
    ce88:	70dd      	strb	r5, [r3, #3]
    ce8a:	711d      	strb	r5, [r3, #4]
    ce8c:	715d      	strb	r5, [r3, #5]
    ce8e:	719d      	strb	r5, [r3, #6]
    ce90:	71dd      	strb	r5, [r3, #7]
    ce92:	47b0      	blx	r6
    ce94:	210f      	movs	r1, #15
    ce96:	2021      	movs	r0, #33	; 0x21
    ce98:	4469      	add	r1, sp
    ce9a:	700d      	strb	r5, [r1, #0]
    ce9c:	47b0      	blx	r6
    ce9e:	2500      	movs	r5, #0
    cea0:	210a      	movs	r1, #10
    cea2:	2001      	movs	r0, #1
    cea4:	6665      	str	r5, [r4, #100]	; 0x64
    cea6:	47b8      	blx	r7
    cea8:	0023      	movs	r3, r4
    ceaa:	33a2      	adds	r3, #162	; 0xa2
    ceac:	801d      	strh	r5, [r3, #0]
    ceae:	0022      	movs	r2, r4
    ceb0:	0023      	movs	r3, r4
    ceb2:	210e      	movs	r1, #14
    ceb4:	325c      	adds	r2, #92	; 0x5c
    ceb6:	33cd      	adds	r3, #205	; 0xcd
    ceb8:	701d      	strb	r5, [r3, #0]
    ceba:	7813      	ldrb	r3, [r2, #0]
    cebc:	203a      	movs	r0, #58	; 0x3a
    cebe:	438b      	bics	r3, r1
    cec0:	0029      	movs	r1, r5
    cec2:	7013      	strb	r3, [r2, #0]
    cec4:	47b0      	blx	r6
    cec6:	0023      	movs	r3, r4
    cec8:	335d      	adds	r3, #93	; 0x5d
    ceca:	781b      	ldrb	r3, [r3, #0]
    cecc:	079b      	lsls	r3, r3, #30
    cece:	d50a      	bpl.n	cee6 <UpdateJoinSuccessState+0xae>
    ced0:	21fa      	movs	r1, #250	; 0xfa
    ced2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    ced4:	0089      	lsls	r1, r1, #2
    ced6:	34c7      	adds	r4, #199	; 0xc7
    ced8:	7820      	ldrb	r0, [r4, #0]
    ceda:	4359      	muls	r1, r3
    cedc:	9500      	str	r5, [sp, #0]
    cede:	4b0d      	ldr	r3, [pc, #52]	; (cf14 <UpdateJoinSuccessState+0xdc>)
    cee0:	002a      	movs	r2, r5
    cee2:	4c0d      	ldr	r4, [pc, #52]	; (cf18 <UpdateJoinSuccessState+0xe0>)
    cee4:	47a0      	blx	r4
    cee6:	490d      	ldr	r1, [pc, #52]	; (cf1c <UpdateJoinSuccessState+0xe4>)
    cee8:	794a      	ldrb	r2, [r1, #5]
    ceea:	790b      	ldrb	r3, [r1, #4]
    ceec:	0212      	lsls	r2, r2, #8
    ceee:	431a      	orrs	r2, r3
    cef0:	798b      	ldrb	r3, [r1, #6]
    cef2:	041b      	lsls	r3, r3, #16
    cef4:	431a      	orrs	r2, r3
    cef6:	79cb      	ldrb	r3, [r1, #7]
    cef8:	061b      	lsls	r3, r3, #24
    cefa:	4313      	orrs	r3, r2
    cefc:	d001      	beq.n	cf02 <UpdateJoinSuccessState+0xca>
    cefe:	2008      	movs	r0, #8
    cf00:	4798      	blx	r3
    cf02:	b007      	add	sp, #28
    cf04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf06:	46c0      	nop			; (mov r8, r8)
    cf08:	200023e4 	.word	0x200023e4
    cf0c:	0000af89 	.word	0x0000af89
    cf10:	0000ab99 	.word	0x0000ab99
    cf14:	0000d059 	.word	0x0000d059
    cf18:	0000bf29 	.word	0x0000bf29
    cf1c:	200026b8 	.word	0x200026b8

0000cf20 <PrepareSessionKeys>:
    cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cf22:	0004      	movs	r4, r0
    cf24:	2603      	movs	r6, #3
    cf26:	000d      	movs	r5, r1
    cf28:	0017      	movs	r7, r2
    cf2a:	4b09      	ldr	r3, [pc, #36]	; (cf50 <PrepareSessionKeys+0x30>)
    cf2c:	2210      	movs	r2, #16
    cf2e:	2100      	movs	r1, #0
    cf30:	4798      	blx	r3
    cf32:	0032      	movs	r2, r6
    cf34:	0029      	movs	r1, r5
    cf36:	1c60      	adds	r0, r4, #1
    cf38:	4d06      	ldr	r5, [pc, #24]	; (cf54 <PrepareSessionKeys+0x34>)
    cf3a:	47a8      	blx	r5
    cf3c:	0032      	movs	r2, r6
    cf3e:	0039      	movs	r1, r7
    cf40:	1d20      	adds	r0, r4, #4
    cf42:	47a8      	blx	r5
    cf44:	1de0      	adds	r0, r4, #7
    cf46:	2202      	movs	r2, #2
    cf48:	4903      	ldr	r1, [pc, #12]	; (cf58 <PrepareSessionKeys+0x38>)
    cf4a:	47a8      	blx	r5
    cf4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cf4e:	46c0      	nop			; (mov r8, r8)
    cf50:	00015fc9 	.word	0x00015fc9
    cf54:	00015f45 	.word	0x00015f45
    cf58:	20002488 	.word	0x20002488

0000cf5c <AssembleEncryptionBlock>:
    cf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    cf5e:	001e      	movs	r6, r3
    cf60:	4c0b      	ldr	r4, [pc, #44]	; (cf90 <AssembleEncryptionBlock+0x34>)
    cf62:	0017      	movs	r7, r2
    cf64:	4b0b      	ldr	r3, [pc, #44]	; (cf94 <AssembleEncryptionBlock+0x38>)
    cf66:	0005      	movs	r5, r0
    cf68:	9101      	str	r1, [sp, #4]
    cf6a:	2210      	movs	r2, #16
    cf6c:	2100      	movs	r1, #0
    cf6e:	0020      	movs	r0, r4
    cf70:	4798      	blx	r3
    cf72:	7026      	strb	r6, [r4, #0]
    cf74:	2604      	movs	r6, #4
    cf76:	7165      	strb	r5, [r4, #5]
    cf78:	0032      	movs	r2, r6
    cf7a:	4d07      	ldr	r5, [pc, #28]	; (cf98 <AssembleEncryptionBlock+0x3c>)
    cf7c:	a908      	add	r1, sp, #32
    cf7e:	1da0      	adds	r0, r4, #6
    cf80:	47a8      	blx	r5
    cf82:	0020      	movs	r0, r4
    cf84:	0032      	movs	r2, r6
    cf86:	a901      	add	r1, sp, #4
    cf88:	300a      	adds	r0, #10
    cf8a:	47a8      	blx	r5
    cf8c:	73e7      	strb	r7, [r4, #15]
    cf8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    cf90:	20000fda 	.word	0x20000fda
    cf94:	00015fc9 	.word	0x00015fc9
    cf98:	00015f45 	.word	0x00015f45

0000cf9c <ConfigureRadio>:
    cf9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    cf9e:	0001      	movs	r1, r0
    cfa0:	0005      	movs	r5, r0
    cfa2:	4c11      	ldr	r4, [pc, #68]	; (cfe8 <ConfigureRadio+0x4c>)
    cfa4:	3109      	adds	r1, #9
    cfa6:	2009      	movs	r0, #9
    cfa8:	47a0      	blx	r4
    cfaa:	0029      	movs	r1, r5
    cfac:	2001      	movs	r0, #1
    cfae:	47a0      	blx	r4
    cfb0:	1d29      	adds	r1, r5, #4
    cfb2:	200a      	movs	r0, #10
    cfb4:	47a0      	blx	r4
    cfb6:	7a6b      	ldrb	r3, [r5, #9]
    cfb8:	2b01      	cmp	r3, #1
    cfba:	d10b      	bne.n	cfd4 <ConfigureRadio+0x38>
    cfbc:	0029      	movs	r1, r5
    cfbe:	2016      	movs	r0, #22
    cfc0:	310b      	adds	r1, #11
    cfc2:	47a0      	blx	r4
    cfc4:	0029      	movs	r1, r5
    cfc6:	2007      	movs	r0, #7
    cfc8:	310a      	adds	r1, #10
    cfca:	47a0      	blx	r4
    cfcc:	2000      	movs	r0, #0
    cfce:	4907      	ldr	r1, [pc, #28]	; (cfec <ConfigureRadio+0x50>)
    cfd0:	47a0      	blx	r4
    cfd2:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    cfd4:	466b      	mov	r3, sp
    cfd6:	1dd9      	adds	r1, r3, #7
    cfd8:	2303      	movs	r3, #3
    cfda:	2013      	movs	r0, #19
    cfdc:	700b      	strb	r3, [r1, #0]
    cfde:	47a0      	blx	r4
    cfe0:	4903      	ldr	r1, [pc, #12]	; (cff0 <ConfigureRadio+0x54>)
    cfe2:	2012      	movs	r0, #18
    cfe4:	e7f4      	b.n	cfd0 <ConfigureRadio+0x34>
    cfe6:	46c0      	nop			; (mov r8, r8)
    cfe8:	0001115d 	.word	0x0001115d
    cfec:	200024bb 	.word	0x200024bb
    cff0:	0001dc39 	.word	0x0001dc39

0000cff4 <StopReceiveWindow2Timer>:
    cff4:	b510      	push	{r4, lr}
    cff6:	4c0b      	ldr	r4, [pc, #44]	; (d024 <StopReceiveWindow2Timer+0x30>)
    cff8:	0022      	movs	r2, r4
    cffa:	32d4      	adds	r2, #212	; 0xd4
    cffc:	7812      	ldrb	r2, [r2, #0]
    cffe:	2a01      	cmp	r2, #1
    d000:	d10e      	bne.n	d020 <StopReceiveWindow2Timer+0x2c>
    d002:	0021      	movs	r1, r4
    d004:	200e      	movs	r0, #14
    d006:	315c      	adds	r1, #92	; 0x5c
    d008:	780a      	ldrb	r2, [r1, #0]
    d00a:	34c5      	adds	r4, #197	; 0xc5
    d00c:	4382      	bics	r2, r0
    d00e:	700a      	strb	r2, [r1, #0]
    d010:	7820      	ldrb	r0, [r4, #0]
    d012:	4b05      	ldr	r3, [pc, #20]	; (d028 <StopReceiveWindow2Timer+0x34>)
    d014:	4798      	blx	r3
    d016:	2800      	cmp	r0, #0
    d018:	d002      	beq.n	d020 <StopReceiveWindow2Timer+0x2c>
    d01a:	7820      	ldrb	r0, [r4, #0]
    d01c:	4b03      	ldr	r3, [pc, #12]	; (d02c <StopReceiveWindow2Timer+0x38>)
    d01e:	4798      	blx	r3
    d020:	bd10      	pop	{r4, pc}
    d022:	46c0      	nop			; (mov r8, r8)
    d024:	200023e4 	.word	0x200023e4
    d028:	0000c0c1 	.word	0x0000c0c1
    d02c:	0000c235 	.word	0x0000c235

0000d030 <LorawanLinkCheckCallback.part.1>:
    d030:	b513      	push	{r0, r1, r4, lr}
    d032:	21fa      	movs	r1, #250	; 0xfa
    d034:	4b05      	ldr	r3, [pc, #20]	; (d04c <LorawanLinkCheckCallback.part.1+0x1c>)
    d036:	0089      	lsls	r1, r1, #2
    d038:	6e9a      	ldr	r2, [r3, #104]	; 0x68
    d03a:	33c7      	adds	r3, #199	; 0xc7
    d03c:	4351      	muls	r1, r2
    d03e:	2200      	movs	r2, #0
    d040:	7818      	ldrb	r0, [r3, #0]
    d042:	4c03      	ldr	r4, [pc, #12]	; (d050 <LorawanLinkCheckCallback.part.1+0x20>)
    d044:	9200      	str	r2, [sp, #0]
    d046:	4b03      	ldr	r3, [pc, #12]	; (d054 <LorawanLinkCheckCallback.part.1+0x24>)
    d048:	47a0      	blx	r4
    d04a:	bd13      	pop	{r0, r1, r4, pc}
    d04c:	200023e4 	.word	0x200023e4
    d050:	0000bf29 	.word	0x0000bf29
    d054:	0000d059 	.word	0x0000d059

0000d058 <LorawanLinkCheckCallback>:
    d058:	4b17      	ldr	r3, [pc, #92]	; (d0b8 <LorawanLinkCheckCallback+0x60>)
    d05a:	20a0      	movs	r0, #160	; 0xa0
    d05c:	001a      	movs	r2, r3
    d05e:	2180      	movs	r1, #128	; 0x80
    d060:	b510      	push	{r4, lr}
    d062:	325c      	adds	r2, #92	; 0x5c
    d064:	8812      	ldrh	r2, [r2, #0]
    d066:	0080      	lsls	r0, r0, #2
    d068:	0089      	lsls	r1, r1, #2
    d06a:	4002      	ands	r2, r0
    d06c:	428a      	cmp	r2, r1
    d06e:	d11c      	bne.n	d0aa <LorawanLinkCheckCallback+0x52>
    d070:	001a      	movs	r2, r3
    d072:	32b8      	adds	r2, #184	; 0xb8
    d074:	7810      	ldrb	r0, [r2, #0]
    d076:	2403      	movs	r4, #3
    d078:	2200      	movs	r2, #0
    d07a:	b2d1      	uxtb	r1, r2
    d07c:	4281      	cmp	r1, r0
    d07e:	d30d      	bcc.n	d09c <LorawanLinkCheckCallback+0x44>
    d080:	d113      	bne.n	d0aa <LorawanLinkCheckCallback+0x52>
    d082:	2203      	movs	r2, #3
    d084:	434a      	muls	r2, r1
    d086:	2102      	movs	r1, #2
    d088:	189a      	adds	r2, r3, r2
    d08a:	3271      	adds	r2, #113	; 0x71
    d08c:	7011      	strb	r1, [r2, #0]
    d08e:	280f      	cmp	r0, #15
    d090:	d80b      	bhi.n	d0aa <LorawanLinkCheckCallback+0x52>
    d092:	001a      	movs	r2, r3
    d094:	3001      	adds	r0, #1
    d096:	32b8      	adds	r2, #184	; 0xb8
    d098:	7010      	strb	r0, [r2, #0]
    d09a:	e006      	b.n	d0aa <LorawanLinkCheckCallback+0x52>
    d09c:	0021      	movs	r1, r4
    d09e:	3201      	adds	r2, #1
    d0a0:	4351      	muls	r1, r2
    d0a2:	316e      	adds	r1, #110	; 0x6e
    d0a4:	5c59      	ldrb	r1, [r3, r1]
    d0a6:	2902      	cmp	r1, #2
    d0a8:	d1e7      	bne.n	d07a <LorawanLinkCheckCallback+0x22>
    d0aa:	335d      	adds	r3, #93	; 0x5d
    d0ac:	781b      	ldrb	r3, [r3, #0]
    d0ae:	079b      	lsls	r3, r3, #30
    d0b0:	d501      	bpl.n	d0b6 <LorawanLinkCheckCallback+0x5e>
    d0b2:	4b02      	ldr	r3, [pc, #8]	; (d0bc <LorawanLinkCheckCallback+0x64>)
    d0b4:	4798      	blx	r3
    d0b6:	bd10      	pop	{r4, pc}
    d0b8:	200023e4 	.word	0x200023e4
    d0bc:	0000d031 	.word	0x0000d031

0000d0c0 <LORAWAN_Init>:
    d0c0:	2270      	movs	r2, #112	; 0x70
    d0c2:	b5f0      	push	{r4, r5, r6, r7, lr}
    d0c4:	4b3e      	ldr	r3, [pc, #248]	; (d1c0 <LORAWAN_Init+0x100>)
    d0c6:	b087      	sub	sp, #28
    d0c8:	781b      	ldrb	r3, [r3, #0]
    d0ca:	0005      	movs	r5, r0
    d0cc:	011b      	lsls	r3, r3, #4
    d0ce:	4013      	ands	r3, r2
    d0d0:	4a3c      	ldr	r2, [pc, #240]	; (d1c4 <LORAWAN_Init+0x104>)
    d0d2:	000e      	movs	r6, r1
    d0d4:	7812      	ldrb	r2, [r2, #0]
    d0d6:	0912      	lsrs	r2, r2, #4
    d0d8:	4313      	orrs	r3, r2
    d0da:	2b1f      	cmp	r3, #31
    d0dc:	d000      	beq.n	d0e0 <LORAWAN_Init+0x20>
    d0de:	e7fe      	b.n	d0de <LORAWAN_Init+0x1e>
    d0e0:	4f39      	ldr	r7, [pc, #228]	; (d1c8 <LORAWAN_Init+0x108>)
    d0e2:	003b      	movs	r3, r7
    d0e4:	33cf      	adds	r3, #207	; 0xcf
    d0e6:	781b      	ldrb	r3, [r3, #0]
    d0e8:	2b00      	cmp	r3, #0
    d0ea:	d166      	bne.n	d1ba <LORAWAN_Init+0xfa>
    d0ec:	4837      	ldr	r0, [pc, #220]	; (d1cc <LORAWAN_Init+0x10c>)
    d0ee:	4c38      	ldr	r4, [pc, #224]	; (d1d0 <LORAWAN_Init+0x110>)
    d0f0:	47a0      	blx	r4
    d0f2:	2808      	cmp	r0, #8
    d0f4:	d034      	beq.n	d160 <LORAWAN_Init+0xa0>
    d0f6:	4b37      	ldr	r3, [pc, #220]	; (d1d4 <LORAWAN_Init+0x114>)
    d0f8:	4798      	blx	r3
    d0fa:	37cf      	adds	r7, #207	; 0xcf
    d0fc:	783b      	ldrb	r3, [r7, #0]
    d0fe:	2b00      	cmp	r3, #0
    d100:	d018      	beq.n	d134 <LORAWAN_Init+0x74>
    d102:	4b35      	ldr	r3, [pc, #212]	; (d1d8 <LORAWAN_Init+0x118>)
    d104:	0a2a      	lsrs	r2, r5, #8
    d106:	705a      	strb	r2, [r3, #1]
    d108:	0c2a      	lsrs	r2, r5, #16
    d10a:	709a      	strb	r2, [r3, #2]
    d10c:	0a32      	lsrs	r2, r6, #8
    d10e:	701d      	strb	r5, [r3, #0]
    d110:	711e      	strb	r6, [r3, #4]
    d112:	715a      	strb	r2, [r3, #5]
    d114:	0e2d      	lsrs	r5, r5, #24
    d116:	0c32      	lsrs	r2, r6, #16
    d118:	0e36      	lsrs	r6, r6, #24
    d11a:	719a      	strb	r2, [r3, #6]
    d11c:	70dd      	strb	r5, [r3, #3]
    d11e:	71de      	strb	r6, [r3, #7]
    d120:	4b2e      	ldr	r3, [pc, #184]	; (d1dc <LORAWAN_Init+0x11c>)
    d122:	4798      	blx	r3
    d124:	492e      	ldr	r1, [pc, #184]	; (d1e0 <LORAWAN_Init+0x120>)
    d126:	4b2f      	ldr	r3, [pc, #188]	; (d1e4 <LORAWAN_Init+0x124>)
    d128:	201a      	movs	r0, #26
    d12a:	4798      	blx	r3
    d12c:	4b2e      	ldr	r3, [pc, #184]	; (d1e8 <LORAWAN_Init+0x128>)
    d12e:	4798      	blx	r3
    d130:	4b2e      	ldr	r3, [pc, #184]	; (d1ec <LORAWAN_Init+0x12c>)
    d132:	4798      	blx	r3
    d134:	2317      	movs	r3, #23
    d136:	ac02      	add	r4, sp, #8
    d138:	7123      	strb	r3, [r4, #4]
    d13a:	4b2d      	ldr	r3, [pc, #180]	; (d1f0 <LORAWAN_Init+0x130>)
    d13c:	9a03      	ldr	r2, [sp, #12]
    d13e:	9300      	str	r3, [sp, #0]
    d140:	4d2c      	ldr	r5, [pc, #176]	; (d1f4 <LORAWAN_Init+0x134>)
    d142:	492d      	ldr	r1, [pc, #180]	; (d1f8 <LORAWAN_Init+0x138>)
    d144:	4b2d      	ldr	r3, [pc, #180]	; (d1fc <LORAWAN_Init+0x13c>)
    d146:	2000      	movs	r0, #0
    d148:	47a8      	blx	r5
    d14a:	230d      	movs	r3, #13
    d14c:	7123      	strb	r3, [r4, #4]
    d14e:	4b2c      	ldr	r3, [pc, #176]	; (d200 <LORAWAN_Init+0x140>)
    d150:	492c      	ldr	r1, [pc, #176]	; (d204 <LORAWAN_Init+0x144>)
    d152:	9300      	str	r3, [sp, #0]
    d154:	6862      	ldr	r2, [r4, #4]
    d156:	4b2c      	ldr	r3, [pc, #176]	; (d208 <LORAWAN_Init+0x148>)
    d158:	2001      	movs	r0, #1
    d15a:	47a8      	blx	r5
    d15c:	b007      	add	sp, #28
    d15e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d160:	482a      	ldr	r0, [pc, #168]	; (d20c <LORAWAN_Init+0x14c>)
    d162:	47a0      	blx	r4
    d164:	2808      	cmp	r0, #8
    d166:	d1c6      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d168:	4829      	ldr	r0, [pc, #164]	; (d210 <LORAWAN_Init+0x150>)
    d16a:	47a0      	blx	r4
    d16c:	2808      	cmp	r0, #8
    d16e:	d1c2      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d170:	4828      	ldr	r0, [pc, #160]	; (d214 <LORAWAN_Init+0x154>)
    d172:	47a0      	blx	r4
    d174:	2808      	cmp	r0, #8
    d176:	d1be      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d178:	4827      	ldr	r0, [pc, #156]	; (d218 <LORAWAN_Init+0x158>)
    d17a:	47a0      	blx	r4
    d17c:	2808      	cmp	r0, #8
    d17e:	d1ba      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d180:	4826      	ldr	r0, [pc, #152]	; (d21c <LORAWAN_Init+0x15c>)
    d182:	47a0      	blx	r4
    d184:	2808      	cmp	r0, #8
    d186:	d1b6      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d188:	4825      	ldr	r0, [pc, #148]	; (d220 <LORAWAN_Init+0x160>)
    d18a:	47a0      	blx	r4
    d18c:	2808      	cmp	r0, #8
    d18e:	d1b2      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d190:	4824      	ldr	r0, [pc, #144]	; (d224 <LORAWAN_Init+0x164>)
    d192:	47a0      	blx	r4
    d194:	2808      	cmp	r0, #8
    d196:	d1ae      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d198:	4823      	ldr	r0, [pc, #140]	; (d228 <LORAWAN_Init+0x168>)
    d19a:	47a0      	blx	r4
    d19c:	2808      	cmp	r0, #8
    d19e:	d1aa      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d1a0:	4822      	ldr	r0, [pc, #136]	; (d22c <LORAWAN_Init+0x16c>)
    d1a2:	47a0      	blx	r4
    d1a4:	2808      	cmp	r0, #8
    d1a6:	d1a6      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d1a8:	4821      	ldr	r0, [pc, #132]	; (d230 <LORAWAN_Init+0x170>)
    d1aa:	47a0      	blx	r4
    d1ac:	2808      	cmp	r0, #8
    d1ae:	d1a2      	bne.n	d0f6 <LORAWAN_Init+0x36>
    d1b0:	003b      	movs	r3, r7
    d1b2:	2201      	movs	r2, #1
    d1b4:	33cf      	adds	r3, #207	; 0xcf
    d1b6:	701a      	strb	r2, [r3, #0]
    d1b8:	e79f      	b.n	d0fa <LORAWAN_Init+0x3a>
    d1ba:	4b1e      	ldr	r3, [pc, #120]	; (d234 <LORAWAN_Init+0x174>)
    d1bc:	4798      	blx	r3
    d1be:	e79c      	b.n	d0fa <LORAWAN_Init+0x3a>
    d1c0:	41003fe8 	.word	0x41003fe8
    d1c4:	41003fe4 	.word	0x41003fe4
    d1c8:	200023e4 	.word	0x200023e4
    d1cc:	200024a6 	.word	0x200024a6
    d1d0:	0000bef5 	.word	0x0000bef5
    d1d4:	0000be39 	.word	0x0000be39
    d1d8:	200026b8 	.word	0x200026b8
    d1dc:	00011379 	.word	0x00011379
    d1e0:	0000ecc1 	.word	0x0000ecc1
    d1e4:	0001115d 	.word	0x0001115d
    d1e8:	0000c6c1 	.word	0x0000c6c1
    d1ec:	00016135 	.word	0x00016135
    d1f0:	00010db1 	.word	0x00010db1
    d1f4:	0000b185 	.word	0x0000b185
    d1f8:	200023cd 	.word	0x200023cd
    d1fc:	0001dc58 	.word	0x0001dc58
    d200:	00010dc9 	.word	0x00010dc9
    d204:	200022c0 	.word	0x200022c0
    d208:	0001dd10 	.word	0x0001dd10
    d20c:	200024a7 	.word	0x200024a7
    d210:	200024a8 	.word	0x200024a8
    d214:	200024a9 	.word	0x200024a9
    d218:	200024ab 	.word	0x200024ab
    d21c:	200024ac 	.word	0x200024ac
    d220:	200024aa 	.word	0x200024aa
    d224:	200024ad 	.word	0x200024ad
    d228:	200024b6 	.word	0x200024b6
    d22c:	200024b7 	.word	0x200024b7
    d230:	200024e0 	.word	0x200024e0
    d234:	0000cbb5 	.word	0x0000cbb5

0000d238 <LORAWAN_Send>:
    d238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d23a:	4c36      	ldr	r4, [pc, #216]	; (d314 <LORAWAN_Send+0xdc>)
    d23c:	0006      	movs	r6, r0
    d23e:	0023      	movs	r3, r4
    d240:	335c      	adds	r3, #92	; 0x5c
    d242:	781b      	ldrb	r3, [r3, #0]
    d244:	250f      	movs	r5, #15
    d246:	b25a      	sxtb	r2, r3
    d248:	2a00      	cmp	r2, #0
    d24a:	db0b      	blt.n	d264 <LORAWAN_Send+0x2c>
    d24c:	3d03      	subs	r5, #3
    d24e:	065a      	lsls	r2, r3, #25
    d250:	d408      	bmi.n	d264 <LORAWAN_Send+0x2c>
    d252:	3d03      	subs	r5, #3
    d254:	07db      	lsls	r3, r3, #31
    d256:	d505      	bpl.n	d264 <LORAWAN_Send+0x2c>
    d258:	23da      	movs	r3, #218	; 0xda
    d25a:	005b      	lsls	r3, r3, #1
    d25c:	5ce7      	ldrb	r7, [r4, r3]
    d25e:	2f00      	cmp	r7, #0
    d260:	d102      	bne.n	d268 <LORAWAN_Send+0x30>
    d262:	2511      	movs	r5, #17
    d264:	0028      	movs	r0, r5
    d266:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    d268:	2800      	cmp	r0, #0
    d26a:	d10d      	bne.n	d288 <LORAWAN_Send+0x50>
    d26c:	2700      	movs	r7, #0
    d26e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d270:	3301      	adds	r3, #1
    d272:	d123      	bne.n	d2bc <LORAWAN_Send+0x84>
    d274:	2001      	movs	r0, #1
    d276:	345c      	adds	r4, #92	; 0x5c
    d278:	78a3      	ldrb	r3, [r4, #2]
    d27a:	210b      	movs	r1, #11
    d27c:	4303      	orrs	r3, r0
    d27e:	70a3      	strb	r3, [r4, #2]
    d280:	4b25      	ldr	r3, [pc, #148]	; (d318 <LORAWAN_Send+0xe0>)
    d282:	4798      	blx	r3
    d284:	250d      	movs	r5, #13
    d286:	e7ed      	b.n	d264 <LORAWAN_Send+0x2c>
    d288:	7843      	ldrb	r3, [r0, #1]
    d28a:	7a02      	ldrb	r2, [r0, #8]
    d28c:	3b01      	subs	r3, #1
    d28e:	b2db      	uxtb	r3, r3
    d290:	9201      	str	r2, [sp, #4]
    d292:	2bdf      	cmp	r3, #223	; 0xdf
    d294:	d902      	bls.n	d29c <LORAWAN_Send+0x64>
    d296:	250a      	movs	r5, #10
    d298:	2a00      	cmp	r2, #0
    d29a:	d1e3      	bne.n	d264 <LORAWAN_Send+0x2c>
    d29c:	4b1f      	ldr	r3, [pc, #124]	; (d31c <LORAWAN_Send+0xe4>)
    d29e:	4798      	blx	r3
    d2a0:	4684      	mov	ip, r0
    d2a2:	9b01      	ldr	r3, [sp, #4]
    d2a4:	9000      	str	r0, [sp, #0]
    d2a6:	4463      	add	r3, ip
    d2a8:	001d      	movs	r5, r3
    d2aa:	4b1d      	ldr	r3, [pc, #116]	; (d320 <LORAWAN_Send+0xe8>)
    d2ac:	4798      	blx	r3
    d2ae:	4285      	cmp	r5, r0
    d2b0:	dddc      	ble.n	d26c <LORAWAN_Send+0x34>
    d2b2:	9b00      	ldr	r3, [sp, #0]
    d2b4:	250e      	movs	r5, #14
    d2b6:	2b00      	cmp	r3, #0
    d2b8:	d0d4      	beq.n	d264 <LORAWAN_Send+0x2c>
    d2ba:	e7d8      	b.n	d26e <LORAWAN_Send+0x36>
    d2bc:	0023      	movs	r3, r4
    d2be:	33d4      	adds	r3, #212	; 0xd4
    d2c0:	781b      	ldrb	r3, [r3, #0]
    d2c2:	2b04      	cmp	r3, #4
    d2c4:	d01d      	beq.n	d302 <LORAWAN_Send+0xca>
    d2c6:	0023      	movs	r3, r4
    d2c8:	33d4      	adds	r3, #212	; 0xd4
    d2ca:	781b      	ldrb	r3, [r3, #0]
    d2cc:	2b01      	cmp	r3, #1
    d2ce:	d105      	bne.n	d2dc <LORAWAN_Send+0xa4>
    d2d0:	0023      	movs	r3, r4
    d2d2:	335c      	adds	r3, #92	; 0x5c
    d2d4:	781a      	ldrb	r2, [r3, #0]
    d2d6:	230e      	movs	r3, #14
    d2d8:	421a      	tst	r2, r3
    d2da:	d1c2      	bne.n	d262 <LORAWAN_Send+0x2a>
    d2dc:	0023      	movs	r3, r4
    d2de:	33dc      	adds	r3, #220	; 0xdc
    d2e0:	2f00      	cmp	r7, #0
    d2e2:	d113      	bne.n	d30c <LORAWAN_Send+0xd4>
    d2e4:	2508      	movs	r5, #8
    d2e6:	601e      	str	r6, [r3, #0]
    d2e8:	23da      	movs	r3, #218	; 0xda
    d2ea:	2200      	movs	r2, #0
    d2ec:	005b      	lsls	r3, r3, #1
    d2ee:	54e2      	strb	r2, [r4, r3]
    d2f0:	2001      	movs	r0, #1
    d2f2:	4b0c      	ldr	r3, [pc, #48]	; (d324 <LORAWAN_Send+0xec>)
    d2f4:	4798      	blx	r3
    d2f6:	2320      	movs	r3, #32
    d2f8:	346c      	adds	r4, #108	; 0x6c
    d2fa:	7822      	ldrb	r2, [r4, #0]
    d2fc:	4313      	orrs	r3, r2
    d2fe:	7023      	strb	r3, [r4, #0]
    d300:	e7b0      	b.n	d264 <LORAWAN_Send+0x2c>
    d302:	4b09      	ldr	r3, [pc, #36]	; (d328 <LORAWAN_Send+0xf0>)
    d304:	4798      	blx	r3
    d306:	2808      	cmp	r0, #8
    d308:	d1ab      	bne.n	d262 <LORAWAN_Send+0x2a>
    d30a:	e7dc      	b.n	d2c6 <LORAWAN_Send+0x8e>
    d30c:	2200      	movs	r2, #0
    d30e:	2511      	movs	r5, #17
    d310:	601a      	str	r2, [r3, #0]
    d312:	e7e9      	b.n	d2e8 <LORAWAN_Send+0xb0>
    d314:	200023e4 	.word	0x200023e4
    d318:	0000af89 	.word	0x0000af89
    d31c:	0000cb75 	.word	0x0000cb75
    d320:	0000cc1d 	.word	0x0000cc1d
    d324:	00010fed 	.word	0x00010fed
    d328:	00010905 	.word	0x00010905

0000d32c <AutomaticReplyCallback>:
    d32c:	b510      	push	{r4, lr}
    d32e:	4c0d      	ldr	r4, [pc, #52]	; (d364 <AutomaticReplyCallback+0x38>)
    d330:	0023      	movs	r3, r4
    d332:	33d4      	adds	r3, #212	; 0xd4
    d334:	781b      	ldrb	r3, [r3, #0]
    d336:	2b01      	cmp	r3, #1
    d338:	d10e      	bne.n	d358 <AutomaticReplyCallback+0x2c>
    d33a:	0022      	movs	r2, r4
    d33c:	210e      	movs	r1, #14
    d33e:	325c      	adds	r2, #92	; 0x5c
    d340:	7813      	ldrb	r3, [r2, #0]
    d342:	438b      	bics	r3, r1
    d344:	7013      	strb	r3, [r2, #0]
    d346:	4b08      	ldr	r3, [pc, #32]	; (d368 <AutomaticReplyCallback+0x3c>)
    d348:	2000      	movs	r0, #0
    d34a:	4798      	blx	r3
    d34c:	2208      	movs	r2, #8
    d34e:	346c      	adds	r4, #108	; 0x6c
    d350:	7823      	ldrb	r3, [r4, #0]
    d352:	4393      	bics	r3, r2
    d354:	7023      	strb	r3, [r4, #0]
    d356:	bd10      	pop	{r4, pc}
    d358:	2b04      	cmp	r3, #4
    d35a:	d1f4      	bne.n	d346 <AutomaticReplyCallback+0x1a>
    d35c:	4b03      	ldr	r3, [pc, #12]	; (d36c <AutomaticReplyCallback+0x40>)
    d35e:	4798      	blx	r3
    d360:	e7f1      	b.n	d346 <AutomaticReplyCallback+0x1a>
    d362:	46c0      	nop			; (mov r8, r8)
    d364:	200023e4 	.word	0x200023e4
    d368:	0000d239 	.word	0x0000d239
    d36c:	00011a91 	.word	0x00011a91

0000d370 <LorawanLinkCheckConfigure>:
    d370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d372:	23fa      	movs	r3, #250	; 0xfa
    d374:	4c20      	ldr	r4, [pc, #128]	; (d3f8 <LorawanLinkCheckConfigure+0x88>)
    d376:	009b      	lsls	r3, r3, #2
    d378:	0025      	movs	r5, r4
    d37a:	4343      	muls	r3, r0
    d37c:	0006      	movs	r6, r0
    d37e:	2102      	movs	r1, #2
    d380:	2000      	movs	r0, #0
    d382:	4f1e      	ldr	r7, [pc, #120]	; (d3fc <LorawanLinkCheckConfigure+0x8c>)
    d384:	66a3      	str	r3, [r4, #104]	; 0x68
    d386:	355c      	adds	r5, #92	; 0x5c
    d388:	47b8      	blx	r7
    d38a:	2e00      	cmp	r6, #0
    d38c:	d127      	bne.n	d3de <LorawanLinkCheckConfigure+0x6e>
    d38e:	0023      	movs	r3, r4
    d390:	33c7      	adds	r3, #199	; 0xc7
    d392:	7818      	ldrb	r0, [r3, #0]
    d394:	4b1a      	ldr	r3, [pc, #104]	; (d400 <LorawanLinkCheckConfigure+0x90>)
    d396:	4798      	blx	r3
    d398:	2202      	movs	r2, #2
    d39a:	786b      	ldrb	r3, [r5, #1]
    d39c:	210b      	movs	r1, #11
    d39e:	4393      	bics	r3, r2
    d3a0:	706b      	strb	r3, [r5, #1]
    d3a2:	2001      	movs	r0, #1
    d3a4:	47b8      	blx	r7
    d3a6:	0023      	movs	r3, r4
    d3a8:	2701      	movs	r7, #1
    d3aa:	33b8      	adds	r3, #184	; 0xb8
    d3ac:	781b      	ldrb	r3, [r3, #0]
    d3ae:	0030      	movs	r0, r6
    d3b0:	0032      	movs	r2, r6
    d3b2:	36ff      	adds	r6, #255	; 0xff
    d3b4:	429a      	cmp	r2, r3
    d3b6:	d304      	bcc.n	d3c2 <LorawanLinkCheckConfigure+0x52>
    d3b8:	2800      	cmp	r0, #0
    d3ba:	d001      	beq.n	d3c0 <LorawanLinkCheckConfigure+0x50>
    d3bc:	34b8      	adds	r4, #184	; 0xb8
    d3be:	7023      	strb	r3, [r4, #0]
    d3c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d3c2:	2103      	movs	r1, #3
    d3c4:	4351      	muls	r1, r2
    d3c6:	1861      	adds	r1, r4, r1
    d3c8:	3171      	adds	r1, #113	; 0x71
    d3ca:	780d      	ldrb	r5, [r1, #0]
    d3cc:	2d02      	cmp	r5, #2
    d3ce:	d103      	bne.n	d3d8 <LorawanLinkCheckConfigure+0x68>
    d3d0:	0038      	movs	r0, r7
    d3d2:	3b01      	subs	r3, #1
    d3d4:	700e      	strb	r6, [r1, #0]
    d3d6:	b2db      	uxtb	r3, r3
    d3d8:	3201      	adds	r2, #1
    d3da:	b2d2      	uxtb	r2, r2
    d3dc:	e7ea      	b.n	d3b4 <LorawanLinkCheckConfigure+0x44>
    d3de:	2302      	movs	r3, #2
    d3e0:	786a      	ldrb	r2, [r5, #1]
    d3e2:	210b      	movs	r1, #11
    d3e4:	4313      	orrs	r3, r2
    d3e6:	706b      	strb	r3, [r5, #1]
    d3e8:	2001      	movs	r0, #1
    d3ea:	47b8      	blx	r7
    d3ec:	782b      	ldrb	r3, [r5, #0]
    d3ee:	07db      	lsls	r3, r3, #31
    d3f0:	d5e6      	bpl.n	d3c0 <LorawanLinkCheckConfigure+0x50>
    d3f2:	4b04      	ldr	r3, [pc, #16]	; (d404 <LorawanLinkCheckConfigure+0x94>)
    d3f4:	4798      	blx	r3
    d3f6:	e7e3      	b.n	d3c0 <LorawanLinkCheckConfigure+0x50>
    d3f8:	200023e4 	.word	0x200023e4
    d3fc:	0000af89 	.word	0x0000af89
    d400:	0000c235 	.word	0x0000c235
    d404:	0000d031 	.word	0x0000d031

0000d408 <UpdateCurrentDataRate>:
    d408:	b510      	push	{r4, lr}
    d40a:	4b04      	ldr	r3, [pc, #16]	; (d41c <UpdateCurrentDataRate+0x14>)
    d40c:	210c      	movs	r1, #12
    d40e:	33bf      	adds	r3, #191	; 0xbf
    d410:	7018      	strb	r0, [r3, #0]
    d412:	2001      	movs	r0, #1
    d414:	4b02      	ldr	r3, [pc, #8]	; (d420 <UpdateCurrentDataRate+0x18>)
    d416:	4798      	blx	r3
    d418:	bd10      	pop	{r4, pc}
    d41a:	46c0      	nop			; (mov r8, r8)
    d41c:	200023e4 	.word	0x200023e4
    d420:	0000af89 	.word	0x0000af89

0000d424 <UpdateDLSettings>:
    d424:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d426:	466b      	mov	r3, sp
    d428:	1dde      	adds	r6, r3, #7
    d42a:	1d9c      	adds	r4, r3, #6
    d42c:	71d8      	strb	r0, [r3, #7]
    d42e:	7021      	strb	r1, [r4, #0]
    d430:	2017      	movs	r0, #23
    d432:	0031      	movs	r1, r6
    d434:	4d0c      	ldr	r5, [pc, #48]	; (d468 <UpdateDLSettings+0x44>)
    d436:	47a8      	blx	r5
    d438:	2808      	cmp	r0, #8
    d43a:	d107      	bne.n	d44c <UpdateDLSettings+0x28>
    d43c:	4b0b      	ldr	r3, [pc, #44]	; (d46c <UpdateDLSettings+0x48>)
    d43e:	7832      	ldrb	r2, [r6, #0]
    d440:	334e      	adds	r3, #78	; 0x4e
    d442:	701a      	strb	r2, [r3, #0]
    d444:	2100      	movs	r1, #0
    d446:	3807      	subs	r0, #7
    d448:	4b09      	ldr	r3, [pc, #36]	; (d470 <UpdateDLSettings+0x4c>)
    d44a:	4798      	blx	r3
    d44c:	0021      	movs	r1, r4
    d44e:	2018      	movs	r0, #24
    d450:	47a8      	blx	r5
    d452:	2808      	cmp	r0, #8
    d454:	d107      	bne.n	d466 <UpdateDLSettings+0x42>
    d456:	2101      	movs	r1, #1
    d458:	4b04      	ldr	r3, [pc, #16]	; (d46c <UpdateDLSettings+0x48>)
    d45a:	7822      	ldrb	r2, [r4, #0]
    d45c:	33ce      	adds	r3, #206	; 0xce
    d45e:	701a      	strb	r2, [r3, #0]
    d460:	0008      	movs	r0, r1
    d462:	4b03      	ldr	r3, [pc, #12]	; (d470 <UpdateDLSettings+0x4c>)
    d464:	4798      	blx	r3
    d466:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
    d468:	0000aa8d 	.word	0x0000aa8d
    d46c:	200023e4 	.word	0x200023e4
    d470:	0000af89 	.word	0x0000af89

0000d474 <UpdateTxPower>:
    d474:	b510      	push	{r4, lr}
    d476:	4b04      	ldr	r3, [pc, #16]	; (d488 <UpdateTxPower+0x14>)
    d478:	210a      	movs	r1, #10
    d47a:	33c1      	adds	r3, #193	; 0xc1
    d47c:	7018      	strb	r0, [r3, #0]
    d47e:	2000      	movs	r0, #0
    d480:	4b02      	ldr	r3, [pc, #8]	; (d48c <UpdateTxPower+0x18>)
    d482:	4798      	blx	r3
    d484:	bd10      	pop	{r4, pc}
    d486:	46c0      	nop			; (mov r8, r8)
    d488:	200023e4 	.word	0x200023e4
    d48c:	0000af89 	.word	0x0000af89

0000d490 <UpdateRetransmissionAckTimeoutState>:
    d490:	4b10      	ldr	r3, [pc, #64]	; (d4d4 <UpdateRetransmissionAckTimeoutState+0x44>)
    d492:	b513      	push	{r0, r1, r4, lr}
    d494:	001a      	movs	r2, r3
    d496:	32d4      	adds	r2, #212	; 0xd4
    d498:	7812      	ldrb	r2, [r2, #0]
    d49a:	2a01      	cmp	r2, #1
    d49c:	d108      	bne.n	d4b0 <UpdateRetransmissionAckTimeoutState+0x20>
    d49e:	0018      	movs	r0, r3
    d4a0:	210e      	movs	r1, #14
    d4a2:	305c      	adds	r0, #92	; 0x5c
    d4a4:	7802      	ldrb	r2, [r0, #0]
    d4a6:	438a      	bics	r2, r1
    d4a8:	0011      	movs	r1, r2
    d4aa:	220c      	movs	r2, #12
    d4ac:	430a      	orrs	r2, r1
    d4ae:	7002      	strb	r2, [r0, #0]
    d4b0:	001a      	movs	r2, r3
    d4b2:	32b2      	adds	r2, #178	; 0xb2
    d4b4:	8811      	ldrh	r1, [r2, #0]
    d4b6:	22c0      	movs	r2, #192	; 0xc0
    d4b8:	32ff      	adds	r2, #255	; 0xff
    d4ba:	5c9a      	ldrb	r2, [r3, r2]
    d4bc:	33c8      	adds	r3, #200	; 0xc8
    d4be:	1a8a      	subs	r2, r1, r2
    d4c0:	21fa      	movs	r1, #250	; 0xfa
    d4c2:	0089      	lsls	r1, r1, #2
    d4c4:	4351      	muls	r1, r2
    d4c6:	2200      	movs	r2, #0
    d4c8:	7818      	ldrb	r0, [r3, #0]
    d4ca:	4c03      	ldr	r4, [pc, #12]	; (d4d8 <UpdateRetransmissionAckTimeoutState+0x48>)
    d4cc:	9200      	str	r2, [sp, #0]
    d4ce:	4b03      	ldr	r3, [pc, #12]	; (d4dc <UpdateRetransmissionAckTimeoutState+0x4c>)
    d4d0:	47a0      	blx	r4
    d4d2:	bd13      	pop	{r0, r1, r4, pc}
    d4d4:	200023e4 	.word	0x200023e4
    d4d8:	0000bf29 	.word	0x0000bf29
    d4dc:	0000ee15 	.word	0x0000ee15

0000d4e0 <UpdateReceiveWindow2Parameters>:
    d4e0:	4b06      	ldr	r3, [pc, #24]	; (d4fc <UpdateReceiveWindow2Parameters+0x1c>)
    d4e2:	b510      	push	{r4, lr}
    d4e4:	001a      	movs	r2, r3
    d4e6:	334a      	adds	r3, #74	; 0x4a
    d4e8:	8018      	strh	r0, [r3, #0]
    d4ea:	324e      	adds	r2, #78	; 0x4e
    d4ec:	0c00      	lsrs	r0, r0, #16
    d4ee:	8058      	strh	r0, [r3, #2]
    d4f0:	7011      	strb	r1, [r2, #0]
    d4f2:	2001      	movs	r0, #1
    d4f4:	2100      	movs	r1, #0
    d4f6:	4b02      	ldr	r3, [pc, #8]	; (d500 <UpdateReceiveWindow2Parameters+0x20>)
    d4f8:	4798      	blx	r3
    d4fa:	bd10      	pop	{r4, pc}
    d4fc:	200023e4 	.word	0x200023e4
    d500:	0000af89 	.word	0x0000af89

0000d504 <ResetParametersForConfirmedTransmission>:
    d504:	4b0a      	ldr	r3, [pc, #40]	; (d530 <ResetParametersForConfirmedTransmission+0x2c>)
    d506:	001a      	movs	r2, r3
    d508:	32d4      	adds	r2, #212	; 0xd4
    d50a:	7812      	ldrb	r2, [r2, #0]
    d50c:	2a01      	cmp	r2, #1
    d50e:	d105      	bne.n	d51c <ResetParametersForConfirmedTransmission+0x18>
    d510:	0019      	movs	r1, r3
    d512:	200e      	movs	r0, #14
    d514:	315c      	adds	r1, #92	; 0x5c
    d516:	780a      	ldrb	r2, [r1, #0]
    d518:	4382      	bics	r2, r0
    d51a:	700a      	strb	r2, [r1, #0]
    d51c:	001a      	movs	r2, r3
    d51e:	2100      	movs	r1, #0
    d520:	336c      	adds	r3, #108	; 0x6c
    d522:	32bc      	adds	r2, #188	; 0xbc
    d524:	7011      	strb	r1, [r2, #0]
    d526:	781a      	ldrb	r2, [r3, #0]
    d528:	3101      	adds	r1, #1
    d52a:	438a      	bics	r2, r1
    d52c:	701a      	strb	r2, [r3, #0]
    d52e:	4770      	bx	lr
    d530:	200023e4 	.word	0x200023e4

0000d534 <ResetParametersForUnconfirmedTransmission>:
    d534:	4b07      	ldr	r3, [pc, #28]	; (d554 <ResetParametersForUnconfirmedTransmission+0x20>)
    d536:	001a      	movs	r2, r3
    d538:	32d4      	adds	r2, #212	; 0xd4
    d53a:	7812      	ldrb	r2, [r2, #0]
    d53c:	2a01      	cmp	r2, #1
    d53e:	d105      	bne.n	d54c <ResetParametersForUnconfirmedTransmission+0x18>
    d540:	0019      	movs	r1, r3
    d542:	200e      	movs	r0, #14
    d544:	315c      	adds	r1, #92	; 0x5c
    d546:	780a      	ldrb	r2, [r1, #0]
    d548:	4382      	bics	r2, r0
    d54a:	700a      	strb	r2, [r1, #0]
    d54c:	2200      	movs	r2, #0
    d54e:	33bb      	adds	r3, #187	; 0xbb
    d550:	701a      	strb	r2, [r3, #0]
    d552:	4770      	bx	lr
    d554:	200023e4 	.word	0x200023e4

0000d558 <SetJoinFailState>:
    d558:	b570      	push	{r4, r5, r6, lr}
    d55a:	4c15      	ldr	r4, [pc, #84]	; (d5b0 <SetJoinFailState+0x58>)
    d55c:	2604      	movs	r6, #4
    d55e:	0025      	movs	r5, r4
    d560:	356c      	adds	r5, #108	; 0x6c
    d562:	782a      	ldrb	r2, [r5, #0]
    d564:	0021      	movs	r1, r4
    d566:	43b2      	bics	r2, r6
    d568:	702a      	strb	r2, [r5, #0]
    d56a:	22f0      	movs	r2, #240	; 0xf0
    d56c:	315c      	adds	r1, #92	; 0x5c
    d56e:	780b      	ldrb	r3, [r1, #0]
    d570:	4013      	ands	r3, r2
    d572:	700b      	strb	r3, [r1, #0]
    d574:	18a3      	adds	r3, r4, r2
    d576:	781b      	ldrb	r3, [r3, #0]
    d578:	069b      	lsls	r3, r3, #26
    d57a:	d503      	bpl.n	d584 <SetJoinFailState+0x2c>
    d57c:	0023      	movs	r3, r4
    d57e:	2200      	movs	r2, #0
    d580:	335b      	adds	r3, #91	; 0x5b
    d582:	701a      	strb	r2, [r3, #0]
    d584:	490b      	ldr	r1, [pc, #44]	; (d5b4 <SetJoinFailState+0x5c>)
    d586:	794a      	ldrb	r2, [r1, #5]
    d588:	790b      	ldrb	r3, [r1, #4]
    d58a:	0212      	lsls	r2, r2, #8
    d58c:	431a      	orrs	r2, r3
    d58e:	798b      	ldrb	r3, [r1, #6]
    d590:	041b      	lsls	r3, r3, #16
    d592:	431a      	orrs	r2, r3
    d594:	79cb      	ldrb	r3, [r1, #7]
    d596:	061b      	lsls	r3, r3, #24
    d598:	4313      	orrs	r3, r2
    d59a:	d000      	beq.n	d59e <SetJoinFailState+0x46>
    d59c:	4798      	blx	r3
    d59e:	2300      	movs	r3, #0
    d5a0:	34d0      	adds	r4, #208	; 0xd0
    d5a2:	7023      	strb	r3, [r4, #0]
    d5a4:	210b      	movs	r1, #11
    d5a6:	4b04      	ldr	r3, [pc, #16]	; (d5b8 <SetJoinFailState+0x60>)
    d5a8:	2001      	movs	r0, #1
    d5aa:	4798      	blx	r3
    d5ac:	bd70      	pop	{r4, r5, r6, pc}
    d5ae:	46c0      	nop			; (mov r8, r8)
    d5b0:	200023e4 	.word	0x200023e4
    d5b4:	200026b8 	.word	0x200026b8
    d5b8:	0000af89 	.word	0x0000af89

0000d5bc <ExecuteRxParamSetupReq>:
    d5bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d5be:	b085      	sub	sp, #20
    d5c0:	7805      	ldrb	r5, [r0, #0]
    d5c2:	0004      	movs	r4, r0
    d5c4:	1c41      	adds	r1, r0, #1
    d5c6:	2204      	movs	r2, #4
    d5c8:	4b36      	ldr	r3, [pc, #216]	; (d6a4 <ExecuteRxParamSetupReq+0xe8>)
    d5ca:	a803      	add	r0, sp, #12
    d5cc:	4798      	blx	r3
    d5ce:	2264      	movs	r2, #100	; 0x64
    d5d0:	9b03      	ldr	r3, [sp, #12]
    d5d2:	a903      	add	r1, sp, #12
    d5d4:	021b      	lsls	r3, r3, #8
    d5d6:	0a1b      	lsrs	r3, r3, #8
    d5d8:	4353      	muls	r3, r2
    d5da:	9303      	str	r3, [sp, #12]
    d5dc:	1d23      	adds	r3, r4, #4
    d5de:	9301      	str	r3, [sp, #4]
    d5e0:	072b      	lsls	r3, r5, #28
    d5e2:	0f1b      	lsrs	r3, r3, #28
    d5e4:	b2da      	uxtb	r2, r3
    d5e6:	9200      	str	r2, [sp, #0]
    d5e8:	aa02      	add	r2, sp, #8
    d5ea:	1c96      	adds	r6, r2, #2
    d5ec:	066d      	lsls	r5, r5, #25
    d5ee:	7033      	strb	r3, [r6, #0]
    d5f0:	1cd7      	adds	r7, r2, #3
    d5f2:	0f6d      	lsrs	r5, r5, #29
    d5f4:	2001      	movs	r0, #1
    d5f6:	4b2c      	ldr	r3, [pc, #176]	; (d6a8 <ExecuteRxParamSetupReq+0xec>)
    d5f8:	703d      	strb	r5, [r7, #0]
    d5fa:	4798      	blx	r3
    d5fc:	4c2b      	ldr	r4, [pc, #172]	; (d6ac <ExecuteRxParamSetupReq+0xf0>)
    d5fe:	2808      	cmp	r0, #8
    d600:	d109      	bne.n	d616 <ExecuteRxParamSetupReq+0x5a>
    d602:	0023      	movs	r3, r4
    d604:	33b8      	adds	r3, #184	; 0xb8
    d606:	781a      	ldrb	r2, [r3, #0]
    d608:	2303      	movs	r3, #3
    d60a:	4353      	muls	r3, r2
    d60c:	18e3      	adds	r3, r4, r3
    d60e:	3370      	adds	r3, #112	; 0x70
    d610:	789a      	ldrb	r2, [r3, #2]
    d612:	4310      	orrs	r0, r2
    d614:	7098      	strb	r0, [r3, #2]
    d616:	0031      	movs	r1, r6
    d618:	200f      	movs	r0, #15
    d61a:	4e23      	ldr	r6, [pc, #140]	; (d6a8 <ExecuteRxParamSetupReq+0xec>)
    d61c:	47b0      	blx	r6
    d61e:	2808      	cmp	r0, #8
    d620:	d10a      	bne.n	d638 <ExecuteRxParamSetupReq+0x7c>
    d622:	0023      	movs	r3, r4
    d624:	33b8      	adds	r3, #184	; 0xb8
    d626:	781a      	ldrb	r2, [r3, #0]
    d628:	2303      	movs	r3, #3
    d62a:	4353      	muls	r3, r2
    d62c:	2210      	movs	r2, #16
    d62e:	18e3      	adds	r3, r4, r3
    d630:	3370      	adds	r3, #112	; 0x70
    d632:	7899      	ldrb	r1, [r3, #2]
    d634:	430a      	orrs	r2, r1
    d636:	709a      	strb	r2, [r3, #2]
    d638:	0039      	movs	r1, r7
    d63a:	2018      	movs	r0, #24
    d63c:	47b0      	blx	r6
    d63e:	2808      	cmp	r0, #8
    d640:	d10a      	bne.n	d658 <ExecuteRxParamSetupReq+0x9c>
    d642:	0023      	movs	r3, r4
    d644:	33b8      	adds	r3, #184	; 0xb8
    d646:	781a      	ldrb	r2, [r3, #0]
    d648:	2303      	movs	r3, #3
    d64a:	4353      	muls	r3, r2
    d64c:	2220      	movs	r2, #32
    d64e:	18e3      	adds	r3, r4, r3
    d650:	3370      	adds	r3, #112	; 0x70
    d652:	7899      	ldrb	r1, [r3, #2]
    d654:	430a      	orrs	r2, r1
    d656:	709a      	strb	r2, [r3, #2]
    d658:	0023      	movs	r3, r4
    d65a:	33b8      	adds	r3, #184	; 0xb8
    d65c:	781a      	ldrb	r2, [r3, #0]
    d65e:	2303      	movs	r3, #3
    d660:	4353      	muls	r3, r2
    d662:	18e3      	adds	r3, r4, r3
    d664:	3370      	adds	r3, #112	; 0x70
    d666:	789e      	ldrb	r6, [r3, #2]
    d668:	06f3      	lsls	r3, r6, #27
    d66a:	d518      	bpl.n	d69e <ExecuteRxParamSetupReq+0xe2>
    d66c:	0733      	lsls	r3, r6, #28
    d66e:	d516      	bpl.n	d69e <ExecuteRxParamSetupReq+0xe2>
    d670:	06b6      	lsls	r6, r6, #26
    d672:	0ff6      	lsrs	r6, r6, #31
    d674:	2e01      	cmp	r6, #1
    d676:	d112      	bne.n	d69e <ExecuteRxParamSetupReq+0xe2>
    d678:	0023      	movs	r3, r4
    d67a:	33ce      	adds	r3, #206	; 0xce
    d67c:	701d      	strb	r5, [r3, #0]
    d67e:	0031      	movs	r1, r6
    d680:	0030      	movs	r0, r6
    d682:	4d0b      	ldr	r5, [pc, #44]	; (d6b0 <ExecuteRxParamSetupReq+0xf4>)
    d684:	47a8      	blx	r5
    d686:	9900      	ldr	r1, [sp, #0]
    d688:	9803      	ldr	r0, [sp, #12]
    d68a:	4b0a      	ldr	r3, [pc, #40]	; (d6b4 <ExecuteRxParamSetupReq+0xf8>)
    d68c:	4798      	blx	r3
    d68e:	2340      	movs	r3, #64	; 0x40
    d690:	345c      	adds	r4, #92	; 0x5c
    d692:	7862      	ldrb	r2, [r4, #1]
    d694:	210b      	movs	r1, #11
    d696:	4313      	orrs	r3, r2
    d698:	7063      	strb	r3, [r4, #1]
    d69a:	0030      	movs	r0, r6
    d69c:	47a8      	blx	r5
    d69e:	9801      	ldr	r0, [sp, #4]
    d6a0:	b005      	add	sp, #20
    d6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d6a4:	00015f45 	.word	0x00015f45
    d6a8:	0000aa8d 	.word	0x0000aa8d
    d6ac:	200023e4 	.word	0x200023e4
    d6b0:	0000af89 	.word	0x0000af89
    d6b4:	0000d4e1 	.word	0x0000d4e1

0000d6b8 <ExecuteDutyCycle>:
    d6b8:	b570      	push	{r4, r5, r6, lr}
    d6ba:	7803      	ldrb	r3, [r0, #0]
    d6bc:	1c46      	adds	r6, r0, #1
    d6be:	2b0f      	cmp	r3, #15
    d6c0:	d80f      	bhi.n	d6e2 <ExecuteDutyCycle+0x2a>
    d6c2:	4c09      	ldr	r4, [pc, #36]	; (d6e8 <ExecuteDutyCycle+0x30>)
    d6c4:	210b      	movs	r1, #11
    d6c6:	0022      	movs	r2, r4
    d6c8:	2000      	movs	r0, #0
    d6ca:	3270      	adds	r2, #112	; 0x70
    d6cc:	4d07      	ldr	r5, [pc, #28]	; (d6ec <ExecuteDutyCycle+0x34>)
    d6ce:	7013      	strb	r3, [r2, #0]
    d6d0:	47a8      	blx	r5
    d6d2:	2320      	movs	r3, #32
    d6d4:	345c      	adds	r4, #92	; 0x5c
    d6d6:	7862      	ldrb	r2, [r4, #1]
    d6d8:	210b      	movs	r1, #11
    d6da:	4313      	orrs	r3, r2
    d6dc:	7063      	strb	r3, [r4, #1]
    d6de:	2001      	movs	r0, #1
    d6e0:	47a8      	blx	r5
    d6e2:	0030      	movs	r0, r6
    d6e4:	bd70      	pop	{r4, r5, r6, pc}
    d6e6:	46c0      	nop			; (mov r8, r8)
    d6e8:	200023e4 	.word	0x200023e4
    d6ec:	0000af89 	.word	0x0000af89

0000d6f0 <ExecuteDlChannel>:
    d6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d6f2:	b089      	sub	sp, #36	; 0x24
    d6f4:	7805      	ldrb	r5, [r0, #0]
    d6f6:	ab02      	add	r3, sp, #8
    d6f8:	1c41      	adds	r1, r0, #1
    d6fa:	0007      	movs	r7, r0
    d6fc:	719d      	strb	r5, [r3, #6]
    d6fe:	1d9e      	adds	r6, r3, #6
    d700:	2204      	movs	r2, #4
    d702:	4b23      	ldr	r3, [pc, #140]	; (d790 <ExecuteDlChannel+0xa0>)
    d704:	a805      	add	r0, sp, #20
    d706:	4798      	blx	r3
    d708:	9b05      	ldr	r3, [sp, #20]
    d70a:	a904      	add	r1, sp, #16
    d70c:	021c      	lsls	r4, r3, #8
    d70e:	2364      	movs	r3, #100	; 0x64
    d710:	0a24      	lsrs	r4, r4, #8
    d712:	435c      	muls	r4, r3
    d714:	1d3b      	adds	r3, r7, #4
    d716:	9301      	str	r3, [sp, #4]
    d718:	2301      	movs	r3, #1
    d71a:	2015      	movs	r0, #21
    d71c:	704b      	strb	r3, [r1, #1]
    d71e:	4b1d      	ldr	r3, [pc, #116]	; (d794 <ExecuteDlChannel+0xa4>)
    d720:	9405      	str	r4, [sp, #20]
    d722:	700d      	strb	r5, [r1, #0]
    d724:	4798      	blx	r3
    d726:	2808      	cmp	r0, #8
    d728:	d12f      	bne.n	d78a <ExecuteDlChannel+0x9a>
    d72a:	ab02      	add	r3, sp, #8
    d72c:	1ddd      	adds	r5, r3, #7
    d72e:	2300      	movs	r3, #0
    d730:	702b      	strb	r3, [r5, #0]
    d732:	7833      	ldrb	r3, [r6, #0]
    d734:	af06      	add	r7, sp, #24
    d736:	713b      	strb	r3, [r7, #4]
    d738:	002a      	movs	r2, r5
    d73a:	0031      	movs	r1, r6
    d73c:	300e      	adds	r0, #14
    d73e:	4b16      	ldr	r3, [pc, #88]	; (d798 <ExecuteDlChannel+0xa8>)
    d740:	9406      	str	r4, [sp, #24]
    d742:	4798      	blx	r3
    d744:	280a      	cmp	r0, #10
    d746:	d00d      	beq.n	d764 <ExecuteDlChannel+0x74>
    d748:	782a      	ldrb	r2, [r5, #0]
    d74a:	2a01      	cmp	r2, #1
    d74c:	d10a      	bne.n	d764 <ExecuteDlChannel+0x74>
    d74e:	4b13      	ldr	r3, [pc, #76]	; (d79c <ExecuteDlChannel+0xac>)
    d750:	0019      	movs	r1, r3
    d752:	31b8      	adds	r1, #184	; 0xb8
    d754:	7808      	ldrb	r0, [r1, #0]
    d756:	2103      	movs	r1, #3
    d758:	4341      	muls	r1, r0
    d75a:	185b      	adds	r3, r3, r1
    d75c:	3370      	adds	r3, #112	; 0x70
    d75e:	78d9      	ldrb	r1, [r3, #3]
    d760:	430a      	orrs	r2, r1
    d762:	70da      	strb	r2, [r3, #3]
    d764:	0039      	movs	r1, r7
    d766:	2034      	movs	r0, #52	; 0x34
    d768:	4b0d      	ldr	r3, [pc, #52]	; (d7a0 <ExecuteDlChannel+0xb0>)
    d76a:	4798      	blx	r3
    d76c:	2808      	cmp	r0, #8
    d76e:	d10c      	bne.n	d78a <ExecuteDlChannel+0x9a>
    d770:	4b0a      	ldr	r3, [pc, #40]	; (d79c <ExecuteDlChannel+0xac>)
    d772:	001a      	movs	r2, r3
    d774:	32b8      	adds	r2, #184	; 0xb8
    d776:	7811      	ldrb	r1, [r2, #0]
    d778:	2203      	movs	r2, #3
    d77a:	434a      	muls	r2, r1
    d77c:	189b      	adds	r3, r3, r2
    d77e:	2280      	movs	r2, #128	; 0x80
    d780:	3370      	adds	r3, #112	; 0x70
    d782:	7899      	ldrb	r1, [r3, #2]
    d784:	4252      	negs	r2, r2
    d786:	430a      	orrs	r2, r1
    d788:	709a      	strb	r2, [r3, #2]
    d78a:	9801      	ldr	r0, [sp, #4]
    d78c:	b009      	add	sp, #36	; 0x24
    d78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d790:	00015f45 	.word	0x00015f45
    d794:	0000aa8d 	.word	0x0000aa8d
    d798:	0000aa71 	.word	0x0000aa71
    d79c:	200023e4 	.word	0x200023e4
    d7a0:	0000ab99 	.word	0x0000ab99

0000d7a4 <ExecuteTxParamSetup>:
    d7a4:	220f      	movs	r2, #15
    d7a6:	b513      	push	{r0, r1, r4, lr}
    d7a8:	7803      	ldrb	r3, [r0, #0]
    d7aa:	4c0f      	ldr	r4, [pc, #60]	; (d7e8 <ExecuteTxParamSetup+0x44>)
    d7ac:	401a      	ands	r2, r3
    d7ae:	5ca2      	ldrb	r2, [r4, r2]
    d7b0:	2401      	movs	r4, #1
    d7b2:	a901      	add	r1, sp, #4
    d7b4:	700a      	strb	r2, [r1, #0]
    d7b6:	111a      	asrs	r2, r3, #4
    d7b8:	115b      	asrs	r3, r3, #5
    d7ba:	4023      	ands	r3, r4
    d7bc:	40a3      	lsls	r3, r4
    d7be:	4022      	ands	r2, r4
    d7c0:	4313      	orrs	r3, r2
    d7c2:	704b      	strb	r3, [r1, #1]
    d7c4:	1904      	adds	r4, r0, r4
    d7c6:	4b09      	ldr	r3, [pc, #36]	; (d7ec <ExecuteTxParamSetup+0x48>)
    d7c8:	2035      	movs	r0, #53	; 0x35
    d7ca:	4798      	blx	r3
    d7cc:	2808      	cmp	r0, #8
    d7ce:	d009      	beq.n	d7e4 <ExecuteTxParamSetup+0x40>
    d7d0:	4b07      	ldr	r3, [pc, #28]	; (d7f0 <ExecuteTxParamSetup+0x4c>)
    d7d2:	001a      	movs	r2, r3
    d7d4:	32b8      	adds	r2, #184	; 0xb8
    d7d6:	7811      	ldrb	r1, [r2, #0]
    d7d8:	2203      	movs	r2, #3
    d7da:	434a      	muls	r2, r1
    d7dc:	189b      	adds	r3, r3, r2
    d7de:	22ff      	movs	r2, #255	; 0xff
    d7e0:	3371      	adds	r3, #113	; 0x71
    d7e2:	701a      	strb	r2, [r3, #0]
    d7e4:	0020      	movs	r0, r4
    d7e6:	bd16      	pop	{r1, r2, r4, pc}
    d7e8:	0001dc45 	.word	0x0001dc45
    d7ec:	0000ab99 	.word	0x0000ab99
    d7f0:	200023e4 	.word	0x200023e4

0000d7f4 <ExecuteLinkAdr>:
    d7f4:	220f      	movs	r2, #15
    d7f6:	b5f0      	push	{r4, r5, r6, r7, lr}
    d7f8:	0005      	movs	r5, r0
    d7fa:	7803      	ldrb	r3, [r0, #0]
    d7fc:	b089      	sub	sp, #36	; 0x24
    d7fe:	401a      	ands	r2, r3
    d800:	a905      	add	r1, sp, #20
    d802:	700a      	strb	r2, [r1, #0]
    d804:	24b8      	movs	r4, #184	; 0xb8
    d806:	aa04      	add	r2, sp, #16
    d808:	1d96      	adds	r6, r2, #6
    d80a:	091b      	lsrs	r3, r3, #4
    d80c:	7153      	strb	r3, [r2, #5]
    d80e:	1c41      	adds	r1, r0, #1
    d810:	2202      	movs	r2, #2
    d812:	0030      	movs	r0, r6
    d814:	4b38      	ldr	r3, [pc, #224]	; (d8f8 <ExecuteLinkAdr+0x104>)
    d816:	4798      	blx	r3
    d818:	2201      	movs	r2, #1
    d81a:	1d2b      	adds	r3, r5, #4
    d81c:	9303      	str	r3, [sp, #12]
    d81e:	78eb      	ldrb	r3, [r5, #3]
    d820:	4f36      	ldr	r7, [pc, #216]	; (d8fc <ExecuteLinkAdr+0x108>)
    d822:	065b      	lsls	r3, r3, #25
    d824:	0f5b      	lsrs	r3, r3, #29
    d826:	34ff      	adds	r4, #255	; 0xff
    d828:	9300      	str	r3, [sp, #0]
    d82a:	5d3b      	ldrb	r3, [r7, r4]
    d82c:	a906      	add	r1, sp, #24
    d82e:	4393      	bics	r3, r2
    d830:	1892      	adds	r2, r2, r2
    d832:	4393      	bics	r3, r2
    d834:	3202      	adds	r2, #2
    d836:	4393      	bics	r3, r2
    d838:	553b      	strb	r3, [r7, r4]
    d83a:	466b      	mov	r3, sp
    d83c:	781b      	ldrb	r3, [r3, #0]
    d83e:	8836      	ldrh	r6, [r6, #0]
    d840:	700b      	strb	r3, [r1, #0]
    d842:	2038      	movs	r0, #56	; 0x38
    d844:	4b2e      	ldr	r3, [pc, #184]	; (d900 <ExecuteLinkAdr+0x10c>)
    d846:	804e      	strh	r6, [r1, #2]
    d848:	4798      	blx	r3
    d84a:	2808      	cmp	r0, #8
    d84c:	d116      	bne.n	d87c <ExecuteLinkAdr+0x88>
    d84e:	466b      	mov	r3, sp
    d850:	781b      	ldrb	r3, [r3, #0]
    d852:	a907      	add	r1, sp, #28
    d854:	708b      	strb	r3, [r1, #2]
    d856:	3014      	adds	r0, #20
    d858:	4b2a      	ldr	r3, [pc, #168]	; (d904 <ExecuteLinkAdr+0x110>)
    d85a:	800e      	strh	r6, [r1, #0]
    d85c:	4798      	blx	r3
    d85e:	2201      	movs	r2, #1
    d860:	5d3b      	ldrb	r3, [r7, r4]
    d862:	2010      	movs	r0, #16
    d864:	4313      	orrs	r3, r2
    d866:	553b      	strb	r3, [r7, r4]
    d868:	ab04      	add	r3, sp, #16
    d86a:	1d59      	adds	r1, r3, #5
    d86c:	4b24      	ldr	r3, [pc, #144]	; (d900 <ExecuteLinkAdr+0x10c>)
    d86e:	4798      	blx	r3
    d870:	2808      	cmp	r0, #8
    d872:	d103      	bne.n	d87c <ExecuteLinkAdr+0x88>
    d874:	2202      	movs	r2, #2
    d876:	5d3b      	ldrb	r3, [r7, r4]
    d878:	4313      	orrs	r3, r2
    d87a:	553b      	strb	r3, [r7, r4]
    d87c:	af05      	add	r7, sp, #20
    d87e:	4b20      	ldr	r3, [pc, #128]	; (d900 <ExecuteLinkAdr+0x10c>)
    d880:	0039      	movs	r1, r7
    d882:	201d      	movs	r0, #29
    d884:	4798      	blx	r3
    d886:	4b1d      	ldr	r3, [pc, #116]	; (d8fc <ExecuteLinkAdr+0x108>)
    d888:	2808      	cmp	r0, #8
    d88a:	d103      	bne.n	d894 <ExecuteLinkAdr+0xa0>
    d88c:	2204      	movs	r2, #4
    d88e:	5d19      	ldrb	r1, [r3, r4]
    d890:	430a      	orrs	r2, r1
    d892:	551a      	strb	r2, [r3, r4]
    d894:	2207      	movs	r2, #7
    d896:	5d19      	ldrb	r1, [r3, r4]
    d898:	4011      	ands	r1, r2
    d89a:	4291      	cmp	r1, r2
    d89c:	d122      	bne.n	d8e4 <ExecuteLinkAdr+0xf0>
    d89e:	22bc      	movs	r2, #188	; 0xbc
    d8a0:	32ff      	adds	r2, #255	; 0xff
    d8a2:	549e      	strb	r6, [r3, r2]
    d8a4:	001a      	movs	r2, r3
    d8a6:	32bc      	adds	r2, #188	; 0xbc
    d8a8:	32ff      	adds	r2, #255	; 0xff
    d8aa:	0a36      	lsrs	r6, r6, #8
    d8ac:	7056      	strb	r6, [r2, #1]
    d8ae:	aa04      	add	r2, sp, #16
    d8b0:	7950      	ldrb	r0, [r2, #5]
    d8b2:	22dc      	movs	r2, #220	; 0xdc
    d8b4:	0052      	lsls	r2, r2, #1
    d8b6:	5498      	strb	r0, [r3, r2]
    d8b8:	20be      	movs	r0, #190	; 0xbe
    d8ba:	2470      	movs	r4, #112	; 0x70
    d8bc:	78ea      	ldrb	r2, [r5, #3]
    d8be:	30ff      	adds	r0, #255	; 0xff
    d8c0:	0912      	lsrs	r2, r2, #4
    d8c2:	400a      	ands	r2, r1
    d8c4:	5c19      	ldrb	r1, [r3, r0]
    d8c6:	0112      	lsls	r2, r2, #4
    d8c8:	43a1      	bics	r1, r4
    d8ca:	430a      	orrs	r2, r1
    d8cc:	541a      	strb	r2, [r3, r0]
    d8ce:	78e9      	ldrb	r1, [r5, #3]
    d8d0:	3c61      	subs	r4, #97	; 0x61
    d8d2:	b2d2      	uxtb	r2, r2
    d8d4:	4021      	ands	r1, r4
    d8d6:	43a2      	bics	r2, r4
    d8d8:	430a      	orrs	r2, r1
    d8da:	541a      	strb	r2, [r3, r0]
    d8dc:	22ba      	movs	r2, #186	; 0xba
    d8de:	7839      	ldrb	r1, [r7, #0]
    d8e0:	32ff      	adds	r2, #255	; 0xff
    d8e2:	5499      	strb	r1, [r3, r2]
    d8e4:	22dd      	movs	r2, #221	; 0xdd
    d8e6:	4905      	ldr	r1, [pc, #20]	; (d8fc <ExecuteLinkAdr+0x108>)
    d8e8:	0052      	lsls	r2, r2, #1
    d8ea:	5c8b      	ldrb	r3, [r1, r2]
    d8ec:	9803      	ldr	r0, [sp, #12]
    d8ee:	3301      	adds	r3, #1
    d8f0:	548b      	strb	r3, [r1, r2]
    d8f2:	b009      	add	sp, #36	; 0x24
    d8f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d8f6:	46c0      	nop			; (mov r8, r8)
    d8f8:	00015f45 	.word	0x00015f45
    d8fc:	200023e4 	.word	0x200023e4
    d900:	0000aa8d 	.word	0x0000aa8d
    d904:	0000ab99 	.word	0x0000ab99

0000d908 <PrepareJoinRequestFrame>:
    d908:	2210      	movs	r2, #16
    d90a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d90c:	4d1b      	ldr	r5, [pc, #108]	; (d97c <PrepareJoinRequestFrame+0x74>)
    d90e:	4b1c      	ldr	r3, [pc, #112]	; (d980 <PrepareJoinRequestFrame+0x78>)
    d910:	32ff      	adds	r2, #255	; 0xff
    d912:	2100      	movs	r1, #0
    d914:	0028      	movs	r0, r5
    d916:	4798      	blx	r3
    d918:	2300      	movs	r3, #0
    d91a:	203c      	movs	r0, #60	; 0x3c
    d91c:	4c19      	ldr	r4, [pc, #100]	; (d984 <PrepareJoinRequestFrame+0x7c>)
    d91e:	702b      	strb	r3, [r5, #0]
    d920:	1ac1      	subs	r1, r0, r3
    d922:	5c61      	ldrb	r1, [r4, r1]
    d924:	18ea      	adds	r2, r5, r3
    d926:	3301      	adds	r3, #1
    d928:	7051      	strb	r1, [r2, #1]
    d92a:	2b08      	cmp	r3, #8
    d92c:	d1f8      	bne.n	d920 <PrepareJoinRequestFrame+0x18>
    d92e:	2300      	movs	r3, #0
    d930:	2044      	movs	r0, #68	; 0x44
    d932:	1ac1      	subs	r1, r0, r3
    d934:	5c61      	ldrb	r1, [r4, r1]
    d936:	18ea      	adds	r2, r5, r3
    d938:	3301      	adds	r3, #1
    d93a:	7251      	strb	r1, [r2, #9]
    d93c:	2b08      	cmp	r3, #8
    d93e:	d1f8      	bne.n	d932 <PrepareJoinRequestFrame+0x2a>
    d940:	4b11      	ldr	r3, [pc, #68]	; (d988 <PrepareJoinRequestFrame+0x80>)
    d942:	4798      	blx	r3
    d944:	4b11      	ldr	r3, [pc, #68]	; (d98c <PrepareJoinRequestFrame+0x84>)
    d946:	4912      	ldr	r1, [pc, #72]	; (d990 <PrepareJoinRequestFrame+0x88>)
    d948:	4798      	blx	r3
    d94a:	34a4      	adds	r4, #164	; 0xa4
    d94c:	8021      	strh	r1, [r4, #0]
    d94e:	2202      	movs	r2, #2
    d950:	0021      	movs	r1, r4
    d952:	4810      	ldr	r0, [pc, #64]	; (d994 <PrepareJoinRequestFrame+0x8c>)
    d954:	4c10      	ldr	r4, [pc, #64]	; (d998 <PrepareJoinRequestFrame+0x90>)
    d956:	47a0      	blx	r4
    d958:	4e10      	ldr	r6, [pc, #64]	; (d99c <PrepareJoinRequestFrame+0x94>)
    d95a:	2313      	movs	r3, #19
    d95c:	0031      	movs	r1, r6
    d95e:	002a      	movs	r2, r5
    d960:	480f      	ldr	r0, [pc, #60]	; (d9a0 <PrepareJoinRequestFrame+0x98>)
    d962:	4d10      	ldr	r5, [pc, #64]	; (d9a4 <PrepareJoinRequestFrame+0x9c>)
    d964:	47a8      	blx	r5
    d966:	0031      	movs	r1, r6
    d968:	2204      	movs	r2, #4
    d96a:	a801      	add	r0, sp, #4
    d96c:	47a0      	blx	r4
    d96e:	2204      	movs	r2, #4
    d970:	a901      	add	r1, sp, #4
    d972:	480d      	ldr	r0, [pc, #52]	; (d9a8 <PrepareJoinRequestFrame+0xa0>)
    d974:	47a0      	blx	r4
    d976:	2017      	movs	r0, #23
    d978:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    d97a:	46c0      	nop			; (mov r8, r8)
    d97c:	200025a5 	.word	0x200025a5
    d980:	00015fc9 	.word	0x00015fc9
    d984:	200023e4 	.word	0x200023e4
    d988:	00016149 	.word	0x00016149
    d98c:	00012ff1 	.word	0x00012ff1
    d990:	0000ffff 	.word	0x0000ffff
    d994:	200025b6 	.word	0x200025b6
    d998:	00015f45 	.word	0x00015f45
    d99c:	20000fda 	.word	0x20000fda
    d9a0:	20002409 	.word	0x20002409
    d9a4:	00010775 	.word	0x00010775
    d9a8:	200025b8 	.word	0x200025b8

0000d9ac <ConfigureRadioRx>:
    d9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    d9ae:	b087      	sub	sp, #28
    d9b0:	466b      	mov	r3, sp
    d9b2:	2600      	movs	r6, #0
    d9b4:	1ddc      	adds	r4, r3, #7
    d9b6:	71d8      	strb	r0, [r3, #7]
    d9b8:	729e      	strb	r6, [r3, #10]
    d9ba:	466a      	mov	r2, sp
    d9bc:	2301      	movs	r3, #1
    d9be:	72d3      	strb	r3, [r2, #11]
    d9c0:	2215      	movs	r2, #21
    d9c2:	ad03      	add	r5, sp, #12
    d9c4:	4f11      	ldr	r7, [pc, #68]	; (da0c <ConfigureRadioRx+0x60>)
    d9c6:	9100      	str	r1, [sp, #0]
    d9c8:	446a      	add	r2, sp
    d9ca:	0021      	movs	r1, r4
    d9cc:	2023      	movs	r0, #35	; 0x23
    d9ce:	80ae      	strh	r6, [r5, #4]
    d9d0:	47b8      	blx	r7
    d9d2:	2216      	movs	r2, #22
    d9d4:	0021      	movs	r1, r4
    d9d6:	446a      	add	r2, sp
    d9d8:	2024      	movs	r0, #36	; 0x24
    d9da:	47b8      	blx	r7
    d9dc:	2217      	movs	r2, #23
    d9de:	0021      	movs	r1, r4
    d9e0:	446a      	add	r2, sp
    d9e2:	2025      	movs	r0, #37	; 0x25
    d9e4:	47b8      	blx	r7
    d9e6:	9b00      	ldr	r3, [sp, #0]
    d9e8:	0028      	movs	r0, r5
    d9ea:	9303      	str	r3, [sp, #12]
    d9ec:	4b08      	ldr	r3, [pc, #32]	; (da10 <ConfigureRadioRx+0x64>)
    d9ee:	80ae      	strh	r6, [r5, #4]
    d9f0:	4798      	blx	r3
    d9f2:	230a      	movs	r3, #10
    d9f4:	446b      	add	r3, sp
    d9f6:	0019      	movs	r1, r3
    d9f8:	4c06      	ldr	r4, [pc, #24]	; (da14 <ConfigureRadioRx+0x68>)
    d9fa:	2014      	movs	r0, #20
    d9fc:	47a0      	blx	r4
    d9fe:	230b      	movs	r3, #11
    da00:	446b      	add	r3, sp
    da02:	0019      	movs	r1, r3
    da04:	2006      	movs	r0, #6
    da06:	47a0      	blx	r4
    da08:	b007      	add	sp, #28
    da0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    da0c:	0000aa71 	.word	0x0000aa71
    da10:	0000cf9d 	.word	0x0000cf9d
    da14:	0001115d 	.word	0x0001115d

0000da18 <LorawanReceiveWindow1Callback>:
    da18:	b537      	push	{r0, r1, r2, r4, r5, lr}
    da1a:	4c18      	ldr	r4, [pc, #96]	; (da7c <LorawanReceiveWindow1Callback+0x64>)
    da1c:	0023      	movs	r3, r4
    da1e:	335c      	adds	r3, #92	; 0x5c
    da20:	781b      	ldrb	r3, [r3, #0]
    da22:	b25a      	sxtb	r2, r3
    da24:	2a00      	cmp	r2, #0
    da26:	db28      	blt.n	da7a <LorawanReceiveWindow1Callback+0x62>
    da28:	0022      	movs	r2, r4
    da2a:	32d4      	adds	r2, #212	; 0xd4
    da2c:	7812      	ldrb	r2, [r2, #0]
    da2e:	2a04      	cmp	r2, #4
    da30:	d103      	bne.n	da3a <LorawanReceiveWindow1Callback+0x22>
    da32:	07db      	lsls	r3, r3, #31
    da34:	d501      	bpl.n	da3a <LorawanReceiveWindow1Callback+0x22>
    da36:	4b12      	ldr	r3, [pc, #72]	; (da80 <LorawanReceiveWindow1Callback+0x68>)
    da38:	4798      	blx	r3
    da3a:	0021      	movs	r1, r4
    da3c:	220e      	movs	r2, #14
    da3e:	315c      	adds	r1, #92	; 0x5c
    da40:	780b      	ldrb	r3, [r1, #0]
    da42:	ad01      	add	r5, sp, #4
    da44:	4393      	bics	r3, r2
    da46:	001a      	movs	r2, r3
    da48:	2306      	movs	r3, #6
    da4a:	4313      	orrs	r3, r2
    da4c:	0022      	movs	r2, r4
    da4e:	700b      	strb	r3, [r1, #0]
    da50:	3248      	adds	r2, #72	; 0x48
    da52:	6c63      	ldr	r3, [r4, #68]	; 0x44
    da54:	7811      	ldrb	r1, [r2, #0]
    da56:	0a1b      	lsrs	r3, r3, #8
    da58:	3449      	adds	r4, #73	; 0x49
    da5a:	0609      	lsls	r1, r1, #24
    da5c:	4319      	orrs	r1, r3
    da5e:	7820      	ldrb	r0, [r4, #0]
    da60:	4b08      	ldr	r3, [pc, #32]	; (da84 <LorawanReceiveWindow1Callback+0x6c>)
    da62:	4798      	blx	r3
    da64:	2300      	movs	r3, #0
    da66:	702b      	strb	r3, [r5, #0]
    da68:	466b      	mov	r3, sp
    da6a:	0021      	movs	r1, r4
    da6c:	1d9a      	adds	r2, r3, #6
    da6e:	2003      	movs	r0, #3
    da70:	4b05      	ldr	r3, [pc, #20]	; (da88 <LorawanReceiveWindow1Callback+0x70>)
    da72:	4798      	blx	r3
    da74:	0028      	movs	r0, r5
    da76:	4b05      	ldr	r3, [pc, #20]	; (da8c <LorawanReceiveWindow1Callback+0x74>)
    da78:	4798      	blx	r3
    da7a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
    da7c:	200023e4 	.word	0x200023e4
    da80:	0001093d 	.word	0x0001093d
    da84:	0000d9ad 	.word	0x0000d9ad
    da88:	0000aa71 	.word	0x0000aa71
    da8c:	00012371 	.word	0x00012371

0000da90 <ConfigureRadioTx>:
    da90:	b5f0      	push	{r4, r5, r6, r7, lr}
    da92:	2517      	movs	r5, #23
    da94:	2300      	movs	r3, #0
    da96:	2616      	movs	r6, #22
    da98:	2701      	movs	r7, #1
    da9a:	b087      	sub	sp, #28
    da9c:	ac01      	add	r4, sp, #4
    da9e:	446d      	add	r5, sp
    daa0:	9001      	str	r0, [sp, #4]
    daa2:	702b      	strb	r3, [r5, #0]
    daa4:	0020      	movs	r0, r4
    daa6:	4b10      	ldr	r3, [pc, #64]	; (dae8 <ConfigureRadioTx+0x58>)
    daa8:	446e      	add	r6, sp
    daaa:	9102      	str	r1, [sp, #8]
    daac:	9203      	str	r2, [sp, #12]
    daae:	7037      	strb	r7, [r6, #0]
    dab0:	4798      	blx	r3
    dab2:	79e3      	ldrb	r3, [r4, #7]
    dab4:	4c0d      	ldr	r4, [pc, #52]	; (daec <ConfigureRadioTx+0x5c>)
    dab6:	2b00      	cmp	r3, #0
    dab8:	d00b      	beq.n	dad2 <ConfigureRadioTx+0x42>
    daba:	23db      	movs	r3, #219	; 0xdb
    dabc:	4a0c      	ldr	r2, [pc, #48]	; (daf0 <ConfigureRadioTx+0x60>)
    dabe:	005b      	lsls	r3, r3, #1
    dac0:	54d7      	strb	r7, [r2, r3]
    dac2:	490c      	ldr	r1, [pc, #48]	; (daf4 <ConfigureRadioTx+0x64>)
    dac4:	200b      	movs	r0, #11
    dac6:	4b0c      	ldr	r3, [pc, #48]	; (daf8 <ConfigureRadioTx+0x68>)
    dac8:	4798      	blx	r3
    daca:	210a      	movs	r1, #10
    dacc:	200b      	movs	r0, #11
    dace:	4469      	add	r1, sp
    dad0:	47a0      	blx	r4
    dad2:	a903      	add	r1, sp, #12
    dad4:	2004      	movs	r0, #4
    dad6:	47a0      	blx	r4
    dad8:	0031      	movs	r1, r6
    dada:	2014      	movs	r0, #20
    dadc:	47a0      	blx	r4
    dade:	0029      	movs	r1, r5
    dae0:	2006      	movs	r0, #6
    dae2:	47a0      	blx	r4
    dae4:	b007      	add	sp, #28
    dae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dae8:	0000cf9d 	.word	0x0000cf9d
    daec:	0001115d 	.word	0x0001115d
    daf0:	200023e4 	.word	0x200023e4
    daf4:	20002599 	.word	0x20002599
    daf8:	00011071 	.word	0x00011071

0000dafc <LorawanGetChAndInitiateRadioTransmit>:
    dafc:	2301      	movs	r3, #1
    dafe:	b530      	push	{r4, r5, lr}
    db00:	4c46      	ldr	r4, [pc, #280]	; (dc1c <LorawanGetChAndInitiateRadioTransmit+0x120>)
    db02:	b089      	sub	sp, #36	; 0x24
    db04:	a902      	add	r1, sp, #8
    db06:	700b      	strb	r3, [r1, #0]
    db08:	0023      	movs	r3, r4
    db0a:	33c1      	adds	r3, #193	; 0xc1
    db0c:	781b      	ldrb	r3, [r3, #0]
    db0e:	704b      	strb	r3, [r1, #1]
    db10:	0023      	movs	r3, r4
    db12:	33bf      	adds	r3, #191	; 0xbf
    db14:	781b      	ldrb	r3, [r3, #0]
    db16:	708b      	strb	r3, [r1, #2]
    db18:	0023      	movs	r3, r4
    db1a:	33d4      	adds	r3, #212	; 0xd4
    db1c:	781b      	ldrb	r3, [r3, #0]
    db1e:	2b01      	cmp	r3, #1
    db20:	d108      	bne.n	db34 <LorawanGetChAndInitiateRadioTransmit+0x38>
    db22:	0020      	movs	r0, r4
    db24:	220e      	movs	r2, #14
    db26:	305c      	adds	r0, #92	; 0x5c
    db28:	7803      	ldrb	r3, [r0, #0]
    db2a:	4393      	bics	r3, r2
    db2c:	001a      	movs	r2, r3
    db2e:	230c      	movs	r3, #12
    db30:	4313      	orrs	r3, r2
    db32:	7003      	strb	r3, [r0, #0]
    db34:	aa05      	add	r2, sp, #20
    db36:	202f      	movs	r0, #47	; 0x2f
    db38:	4d39      	ldr	r5, [pc, #228]	; (dc20 <LorawanGetChAndInitiateRadioTransmit+0x124>)
    db3a:	47a8      	blx	r5
    db3c:	0023      	movs	r3, r4
    db3e:	2808      	cmp	r0, #8
    db40:	d132      	bne.n	dba8 <LorawanGetChAndInitiateRadioTransmit+0xac>
    db42:	33d4      	adds	r3, #212	; 0xd4
    db44:	781b      	ldrb	r3, [r3, #0]
    db46:	ad03      	add	r5, sp, #12
    db48:	2b04      	cmp	r3, #4
    db4a:	d104      	bne.n	db56 <LorawanGetChAndInitiateRadioTransmit+0x5a>
    db4c:	3b03      	subs	r3, #3
    db4e:	702b      	strb	r3, [r5, #0]
    db50:	0028      	movs	r0, r5
    db52:	4b34      	ldr	r3, [pc, #208]	; (dc24 <LorawanGetChAndInitiateRadioTransmit+0x128>)
    db54:	4798      	blx	r3
    db56:	9805      	ldr	r0, [sp, #20]
    db58:	4b33      	ldr	r3, [pc, #204]	; (dc28 <LorawanGetChAndInitiateRadioTransmit+0x12c>)
    db5a:	9906      	ldr	r1, [sp, #24]
    db5c:	9a07      	ldr	r2, [sp, #28]
    db5e:	4798      	blx	r3
    db60:	0023      	movs	r3, r4
    db62:	33a6      	adds	r3, #166	; 0xa6
    db64:	881b      	ldrh	r3, [r3, #0]
    db66:	0028      	movs	r0, r5
    db68:	702b      	strb	r3, [r5, #0]
    db6a:	4b30      	ldr	r3, [pc, #192]	; (dc2c <LorawanGetChAndInitiateRadioTransmit+0x130>)
    db6c:	606b      	str	r3, [r5, #4]
    db6e:	4b30      	ldr	r3, [pc, #192]	; (dc30 <LorawanGetChAndInitiateRadioTransmit+0x134>)
    db70:	4798      	blx	r3
    db72:	2800      	cmp	r0, #0
    db74:	d109      	bne.n	db8a <LorawanGetChAndInitiateRadioTransmit+0x8e>
    db76:	220e      	movs	r2, #14
    db78:	345c      	adds	r4, #92	; 0x5c
    db7a:	7823      	ldrb	r3, [r4, #0]
    db7c:	4393      	bics	r3, r2
    db7e:	001a      	movs	r2, r3
    db80:	2302      	movs	r3, #2
    db82:	4313      	orrs	r3, r2
    db84:	7023      	strb	r3, [r4, #0]
    db86:	b009      	add	sp, #36	; 0x24
    db88:	bd30      	pop	{r4, r5, pc}
    db8a:	23c0      	movs	r3, #192	; 0xc0
    db8c:	2200      	movs	r2, #0
    db8e:	33ff      	adds	r3, #255	; 0xff
    db90:	5ce3      	ldrb	r3, [r4, r3]
    db92:	4928      	ldr	r1, [pc, #160]	; (dc34 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    db94:	34d3      	adds	r4, #211	; 0xd3
    db96:	4359      	muls	r1, r3
    db98:	4b27      	ldr	r3, [pc, #156]	; (dc38 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    db9a:	7820      	ldrb	r0, [r4, #0]
    db9c:	18c9      	adds	r1, r1, r3
    db9e:	4b27      	ldr	r3, [pc, #156]	; (dc3c <LorawanGetChAndInitiateRadioTransmit+0x140>)
    dba0:	9200      	str	r2, [sp, #0]
    dba2:	4c27      	ldr	r4, [pc, #156]	; (dc40 <LorawanGetChAndInitiateRadioTransmit+0x144>)
    dba4:	47a0      	blx	r4
    dba6:	e7ee      	b.n	db86 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    dba8:	33f0      	adds	r3, #240	; 0xf0
    dbaa:	781b      	ldrb	r3, [r3, #0]
    dbac:	079a      	lsls	r2, r3, #30
    dbae:	d516      	bpl.n	dbde <LorawanGetChAndInitiateRadioTransmit+0xe2>
    dbb0:	aa03      	add	r2, sp, #12
    dbb2:	4924      	ldr	r1, [pc, #144]	; (dc44 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    dbb4:	2026      	movs	r0, #38	; 0x26
    dbb6:	47a8      	blx	r5
    dbb8:	9b03      	ldr	r3, [sp, #12]
    dbba:	1c5a      	adds	r2, r3, #1
    dbbc:	d001      	beq.n	dbc2 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    dbbe:	3314      	adds	r3, #20
    dbc0:	9303      	str	r3, [sp, #12]
    dbc2:	23c0      	movs	r3, #192	; 0xc0
    dbc4:	21fa      	movs	r1, #250	; 0xfa
    dbc6:	33ff      	adds	r3, #255	; 0xff
    dbc8:	5ce3      	ldrb	r3, [r4, r3]
    dbca:	9a03      	ldr	r2, [sp, #12]
    dbcc:	0089      	lsls	r1, r1, #2
    dbce:	1ad3      	subs	r3, r2, r3
    dbd0:	2200      	movs	r2, #0
    dbd2:	4359      	muls	r1, r3
    dbd4:	34c9      	adds	r4, #201	; 0xc9
    dbd6:	7820      	ldrb	r0, [r4, #0]
    dbd8:	9200      	str	r2, [sp, #0]
    dbda:	4b1b      	ldr	r3, [pc, #108]	; (dc48 <LorawanGetChAndInitiateRadioTransmit+0x14c>)
    dbdc:	e7e1      	b.n	dba2 <LorawanGetChAndInitiateRadioTransmit+0xa6>
    dbde:	075b      	lsls	r3, r3, #29
    dbe0:	d508      	bpl.n	dbf4 <LorawanGetChAndInitiateRadioTransmit+0xf8>
    dbe2:	aa03      	add	r2, sp, #12
    dbe4:	4917      	ldr	r1, [pc, #92]	; (dc44 <LorawanGetChAndInitiateRadioTransmit+0x148>)
    dbe6:	2033      	movs	r0, #51	; 0x33
    dbe8:	47a8      	blx	r5
    dbea:	9b03      	ldr	r3, [sp, #12]
    dbec:	1c5a      	adds	r2, r3, #1
    dbee:	d0e8      	beq.n	dbc2 <LorawanGetChAndInitiateRadioTransmit+0xc6>
    dbf0:	3301      	adds	r3, #1
    dbf2:	e7e5      	b.n	dbc0 <LorawanGetChAndInitiateRadioTransmit+0xc4>
    dbf4:	0023      	movs	r3, r4
    dbf6:	2201      	movs	r2, #1
    dbf8:	336c      	adds	r3, #108	; 0x6c
    dbfa:	781b      	ldrb	r3, [r3, #0]
    dbfc:	401a      	ands	r2, r3
    dbfe:	d109      	bne.n	dc14 <LorawanGetChAndInitiateRadioTransmit+0x118>
    dc00:	23c0      	movs	r3, #192	; 0xc0
    dc02:	33ff      	adds	r3, #255	; 0xff
    dc04:	5ce3      	ldrb	r3, [r4, r3]
    dc06:	490b      	ldr	r1, [pc, #44]	; (dc34 <LorawanGetChAndInitiateRadioTransmit+0x138>)
    dc08:	34c9      	adds	r4, #201	; 0xc9
    dc0a:	4359      	muls	r1, r3
    dc0c:	4b0a      	ldr	r3, [pc, #40]	; (dc38 <LorawanGetChAndInitiateRadioTransmit+0x13c>)
    dc0e:	7820      	ldrb	r0, [r4, #0]
    dc10:	18c9      	adds	r1, r1, r3
    dc12:	e7e1      	b.n	dbd8 <LorawanGetChAndInitiateRadioTransmit+0xdc>
    dc14:	4b0d      	ldr	r3, [pc, #52]	; (dc4c <LorawanGetChAndInitiateRadioTransmit+0x150>)
    dc16:	4798      	blx	r3
    dc18:	e7b5      	b.n	db86 <LorawanGetChAndInitiateRadioTransmit+0x8a>
    dc1a:	46c0      	nop			; (mov r8, r8)
    dc1c:	200023e4 	.word	0x200023e4
    dc20:	0000aa71 	.word	0x0000aa71
    dc24:	00012371 	.word	0x00012371
    dc28:	0000da91 	.word	0x0000da91
    dc2c:	200025b5 	.word	0x200025b5
    dc30:	00011aad 	.word	0x00011aad
    dc34:	fffffc18 	.word	0xfffffc18
    dc38:	001e8480 	.word	0x001e8480
    dc3c:	0000dc51 	.word	0x0000dc51
    dc40:	0000bf29 	.word	0x0000bf29
    dc44:	200024a3 	.word	0x200024a3
    dc48:	0000dd05 	.word	0x0000dd05
    dc4c:	0000d491 	.word	0x0000d491

0000dc50 <TransmissionErrorCallback>:
    dc50:	b530      	push	{r4, r5, lr}
    dc52:	4c22      	ldr	r4, [pc, #136]	; (dcdc <TransmissionErrorCallback+0x8c>)
    dc54:	2501      	movs	r5, #1
    dc56:	0023      	movs	r3, r4
    dc58:	b08b      	sub	sp, #44	; 0x2c
    dc5a:	a903      	add	r1, sp, #12
    dc5c:	700d      	strb	r5, [r1, #0]
    dc5e:	33c1      	adds	r3, #193	; 0xc1
    dc60:	781b      	ldrb	r3, [r3, #0]
    dc62:	aa07      	add	r2, sp, #28
    dc64:	704b      	strb	r3, [r1, #1]
    dc66:	0023      	movs	r3, r4
    dc68:	33bf      	adds	r3, #191	; 0xbf
    dc6a:	781b      	ldrb	r3, [r3, #0]
    dc6c:	202f      	movs	r0, #47	; 0x2f
    dc6e:	708b      	strb	r3, [r1, #2]
    dc70:	4b1b      	ldr	r3, [pc, #108]	; (dce0 <TransmissionErrorCallback+0x90>)
    dc72:	4798      	blx	r3
    dc74:	2808      	cmp	r0, #8
    dc76:	d121      	bne.n	dcbc <TransmissionErrorCallback+0x6c>
    dc78:	a804      	add	r0, sp, #16
    dc7a:	4b1a      	ldr	r3, [pc, #104]	; (dce4 <TransmissionErrorCallback+0x94>)
    dc7c:	7005      	strb	r5, [r0, #0]
    dc7e:	4798      	blx	r3
    dc80:	9807      	ldr	r0, [sp, #28]
    dc82:	4b19      	ldr	r3, [pc, #100]	; (dce8 <TransmissionErrorCallback+0x98>)
    dc84:	9908      	ldr	r1, [sp, #32]
    dc86:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dc88:	4798      	blx	r3
    dc8a:	0023      	movs	r3, r4
    dc8c:	33a6      	adds	r3, #166	; 0xa6
    dc8e:	881b      	ldrh	r3, [r3, #0]
    dc90:	a805      	add	r0, sp, #20
    dc92:	7003      	strb	r3, [r0, #0]
    dc94:	4b15      	ldr	r3, [pc, #84]	; (dcec <TransmissionErrorCallback+0x9c>)
    dc96:	6043      	str	r3, [r0, #4]
    dc98:	4b15      	ldr	r3, [pc, #84]	; (dcf0 <TransmissionErrorCallback+0xa0>)
    dc9a:	4798      	blx	r3
    dc9c:	2800      	cmp	r0, #0
    dc9e:	d01b      	beq.n	dcd8 <TransmissionErrorCallback+0x88>
    dca0:	0023      	movs	r3, r4
    dca2:	33d4      	adds	r3, #212	; 0xd4
    dca4:	781b      	ldrb	r3, [r3, #0]
    dca6:	42ab      	cmp	r3, r5
    dca8:	d108      	bne.n	dcbc <TransmissionErrorCallback+0x6c>
    dcaa:	0021      	movs	r1, r4
    dcac:	220e      	movs	r2, #14
    dcae:	315c      	adds	r1, #92	; 0x5c
    dcb0:	780b      	ldrb	r3, [r1, #0]
    dcb2:	4393      	bics	r3, r2
    dcb4:	001a      	movs	r2, r3
    dcb6:	230c      	movs	r3, #12
    dcb8:	4313      	orrs	r3, r2
    dcba:	700b      	strb	r3, [r1, #0]
    dcbc:	23c0      	movs	r3, #192	; 0xc0
    dcbe:	2200      	movs	r2, #0
    dcc0:	33ff      	adds	r3, #255	; 0xff
    dcc2:	5ce3      	ldrb	r3, [r4, r3]
    dcc4:	490b      	ldr	r1, [pc, #44]	; (dcf4 <TransmissionErrorCallback+0xa4>)
    dcc6:	34d3      	adds	r4, #211	; 0xd3
    dcc8:	4359      	muls	r1, r3
    dcca:	4b0b      	ldr	r3, [pc, #44]	; (dcf8 <TransmissionErrorCallback+0xa8>)
    dccc:	7820      	ldrb	r0, [r4, #0]
    dcce:	18c9      	adds	r1, r1, r3
    dcd0:	9200      	str	r2, [sp, #0]
    dcd2:	4b0a      	ldr	r3, [pc, #40]	; (dcfc <TransmissionErrorCallback+0xac>)
    dcd4:	4c0a      	ldr	r4, [pc, #40]	; (dd00 <TransmissionErrorCallback+0xb0>)
    dcd6:	47a0      	blx	r4
    dcd8:	b00b      	add	sp, #44	; 0x2c
    dcda:	bd30      	pop	{r4, r5, pc}
    dcdc:	200023e4 	.word	0x200023e4
    dce0:	0000aa71 	.word	0x0000aa71
    dce4:	00012371 	.word	0x00012371
    dce8:	0000da91 	.word	0x0000da91
    dcec:	200025b5 	.word	0x200025b5
    dcf0:	00011aad 	.word	0x00011aad
    dcf4:	fffffc18 	.word	0xfffffc18
    dcf8:	001e8480 	.word	0x001e8480
    dcfc:	0000dc51 	.word	0x0000dc51
    dd00:	0000bf29 	.word	0x0000bf29

0000dd04 <UnconfirmedTransmissionCallback>:
    dd04:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd06:	4c38      	ldr	r4, [pc, #224]	; (dde8 <UnconfirmedTransmissionCallback+0xe4>)
    dd08:	b08b      	sub	sp, #44	; 0x2c
    dd0a:	0023      	movs	r3, r4
    dd0c:	33a6      	adds	r3, #166	; 0xa6
    dd0e:	881b      	ldrh	r3, [r3, #0]
    dd10:	af05      	add	r7, sp, #20
    dd12:	703b      	strb	r3, [r7, #0]
    dd14:	4b35      	ldr	r3, [pc, #212]	; (ddec <UnconfirmedTransmissionCallback+0xe8>)
    dd16:	a903      	add	r1, sp, #12
    dd18:	9306      	str	r3, [sp, #24]
    dd1a:	2301      	movs	r3, #1
    dd1c:	700b      	strb	r3, [r1, #0]
    dd1e:	0023      	movs	r3, r4
    dd20:	0026      	movs	r6, r4
    dd22:	33c1      	adds	r3, #193	; 0xc1
    dd24:	781b      	ldrb	r3, [r3, #0]
    dd26:	36bf      	adds	r6, #191	; 0xbf
    dd28:	704b      	strb	r3, [r1, #1]
    dd2a:	7833      	ldrb	r3, [r6, #0]
    dd2c:	aa07      	add	r2, sp, #28
    dd2e:	202f      	movs	r0, #47	; 0x2f
    dd30:	4d2f      	ldr	r5, [pc, #188]	; (ddf0 <UnconfirmedTransmissionCallback+0xec>)
    dd32:	708b      	strb	r3, [r1, #2]
    dd34:	47a8      	blx	r5
    dd36:	2808      	cmp	r0, #8
    dd38:	d12c      	bne.n	dd94 <UnconfirmedTransmissionCallback+0x90>
    dd3a:	2301      	movs	r3, #1
    dd3c:	a804      	add	r0, sp, #16
    dd3e:	7003      	strb	r3, [r0, #0]
    dd40:	4b2c      	ldr	r3, [pc, #176]	; (ddf4 <UnconfirmedTransmissionCallback+0xf0>)
    dd42:	4798      	blx	r3
    dd44:	9807      	ldr	r0, [sp, #28]
    dd46:	4b2c      	ldr	r3, [pc, #176]	; (ddf8 <UnconfirmedTransmissionCallback+0xf4>)
    dd48:	9908      	ldr	r1, [sp, #32]
    dd4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dd4c:	4798      	blx	r3
    dd4e:	0038      	movs	r0, r7
    dd50:	4b2a      	ldr	r3, [pc, #168]	; (ddfc <UnconfirmedTransmissionCallback+0xf8>)
    dd52:	4798      	blx	r3
    dd54:	2800      	cmp	r0, #0
    dd56:	d01b      	beq.n	dd90 <UnconfirmedTransmissionCallback+0x8c>
    dd58:	0023      	movs	r3, r4
    dd5a:	33d4      	adds	r3, #212	; 0xd4
    dd5c:	781b      	ldrb	r3, [r3, #0]
    dd5e:	2b01      	cmp	r3, #1
    dd60:	d108      	bne.n	dd74 <UnconfirmedTransmissionCallback+0x70>
    dd62:	0021      	movs	r1, r4
    dd64:	220e      	movs	r2, #14
    dd66:	315c      	adds	r1, #92	; 0x5c
    dd68:	780b      	ldrb	r3, [r1, #0]
    dd6a:	4393      	bics	r3, r2
    dd6c:	001a      	movs	r2, r3
    dd6e:	230c      	movs	r3, #12
    dd70:	4313      	orrs	r3, r2
    dd72:	700b      	strb	r3, [r1, #0]
    dd74:	23c0      	movs	r3, #192	; 0xc0
    dd76:	2200      	movs	r2, #0
    dd78:	33ff      	adds	r3, #255	; 0xff
    dd7a:	5ce3      	ldrb	r3, [r4, r3]
    dd7c:	4920      	ldr	r1, [pc, #128]	; (de00 <UnconfirmedTransmissionCallback+0xfc>)
    dd7e:	34d3      	adds	r4, #211	; 0xd3
    dd80:	4359      	muls	r1, r3
    dd82:	4b20      	ldr	r3, [pc, #128]	; (de04 <UnconfirmedTransmissionCallback+0x100>)
    dd84:	7820      	ldrb	r0, [r4, #0]
    dd86:	18c9      	adds	r1, r1, r3
    dd88:	4b1f      	ldr	r3, [pc, #124]	; (de08 <UnconfirmedTransmissionCallback+0x104>)
    dd8a:	9200      	str	r2, [sp, #0]
    dd8c:	4c1f      	ldr	r4, [pc, #124]	; (de0c <UnconfirmedTransmissionCallback+0x108>)
    dd8e:	47a0      	blx	r4
    dd90:	b00b      	add	sp, #44	; 0x2c
    dd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dd94:	23fa      	movs	r3, #250	; 0xfa
    dd96:	00db      	lsls	r3, r3, #3
    dd98:	9304      	str	r3, [sp, #16]
    dd9a:	0023      	movs	r3, r4
    dd9c:	33f0      	adds	r3, #240	; 0xf0
    dd9e:	781b      	ldrb	r3, [r3, #0]
    dda0:	079a      	lsls	r2, r3, #30
    dda2:	d516      	bpl.n	ddd2 <UnconfirmedTransmissionCallback+0xce>
    dda4:	aa04      	add	r2, sp, #16
    dda6:	0031      	movs	r1, r6
    dda8:	2026      	movs	r0, #38	; 0x26
    ddaa:	47a8      	blx	r5
    ddac:	9b04      	ldr	r3, [sp, #16]
    ddae:	1c5a      	adds	r2, r3, #1
    ddb0:	d001      	beq.n	ddb6 <UnconfirmedTransmissionCallback+0xb2>
    ddb2:	3314      	adds	r3, #20
    ddb4:	9304      	str	r3, [sp, #16]
    ddb6:	23c0      	movs	r3, #192	; 0xc0
    ddb8:	33ff      	adds	r3, #255	; 0xff
    ddba:	5ce3      	ldrb	r3, [r4, r3]
    ddbc:	9a04      	ldr	r2, [sp, #16]
    ddbe:	21fa      	movs	r1, #250	; 0xfa
    ddc0:	1ad3      	subs	r3, r2, r3
    ddc2:	2200      	movs	r2, #0
    ddc4:	0089      	lsls	r1, r1, #2
    ddc6:	34c9      	adds	r4, #201	; 0xc9
    ddc8:	4359      	muls	r1, r3
    ddca:	7820      	ldrb	r0, [r4, #0]
    ddcc:	4b10      	ldr	r3, [pc, #64]	; (de10 <UnconfirmedTransmissionCallback+0x10c>)
    ddce:	9200      	str	r2, [sp, #0]
    ddd0:	e7dc      	b.n	dd8c <UnconfirmedTransmissionCallback+0x88>
    ddd2:	075b      	lsls	r3, r3, #29
    ddd4:	d5ef      	bpl.n	ddb6 <UnconfirmedTransmissionCallback+0xb2>
    ddd6:	aa04      	add	r2, sp, #16
    ddd8:	0031      	movs	r1, r6
    ddda:	2033      	movs	r0, #51	; 0x33
    dddc:	47a8      	blx	r5
    ddde:	9b04      	ldr	r3, [sp, #16]
    dde0:	1c5a      	adds	r2, r3, #1
    dde2:	d0e8      	beq.n	ddb6 <UnconfirmedTransmissionCallback+0xb2>
    dde4:	3301      	adds	r3, #1
    dde6:	e7e5      	b.n	ddb4 <UnconfirmedTransmissionCallback+0xb0>
    dde8:	200023e4 	.word	0x200023e4
    ddec:	200025b5 	.word	0x200025b5
    ddf0:	0000aa71 	.word	0x0000aa71
    ddf4:	00012371 	.word	0x00012371
    ddf8:	0000da91 	.word	0x0000da91
    ddfc:	00011aad 	.word	0x00011aad
    de00:	fffffc18 	.word	0xfffffc18
    de04:	001e8480 	.word	0x001e8480
    de08:	0000dc51 	.word	0x0000dc51
    de0c:	0000bf29 	.word	0x0000bf29
    de10:	0000dd05 	.word	0x0000dd05

0000de14 <UpdateJoinInProgress>:
    de14:	b570      	push	{r4, r5, r6, lr}
    de16:	2504      	movs	r5, #4
    de18:	4c0a      	ldr	r4, [pc, #40]	; (de44 <UpdateJoinInProgress+0x30>)
    de1a:	0002      	movs	r2, r0
    de1c:	0021      	movs	r1, r4
    de1e:	346c      	adds	r4, #108	; 0x6c
    de20:	7826      	ldrb	r6, [r4, #0]
    de22:	2001      	movs	r0, #1
    de24:	4335      	orrs	r5, r6
    de26:	7025      	strb	r5, [r4, #0]
    de28:	2407      	movs	r4, #7
    de2a:	4022      	ands	r2, r4
    de2c:	4082      	lsls	r2, r0
    de2e:	315c      	adds	r1, #92	; 0x5c
    de30:	780b      	ldrb	r3, [r1, #0]
    de32:	1924      	adds	r4, r4, r4
    de34:	4383      	bics	r3, r0
    de36:	43a3      	bics	r3, r4
    de38:	4313      	orrs	r3, r2
    de3a:	700b      	strb	r3, [r1, #0]
    de3c:	210b      	movs	r1, #11
    de3e:	4b02      	ldr	r3, [pc, #8]	; (de48 <UpdateJoinInProgress+0x34>)
    de40:	4798      	blx	r3
    de42:	bd70      	pop	{r4, r5, r6, pc}
    de44:	200023e4 	.word	0x200023e4
    de48:	0000af89 	.word	0x0000af89

0000de4c <LORAWAN_Join>:
    de4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    de4e:	4c31      	ldr	r4, [pc, #196]	; (df14 <LORAWAN_Join+0xc8>)
    de50:	0005      	movs	r5, r0
    de52:	0023      	movs	r3, r4
    de54:	335c      	adds	r3, #92	; 0x5c
    de56:	781b      	ldrb	r3, [r3, #0]
    de58:	200f      	movs	r0, #15
    de5a:	b25a      	sxtb	r2, r3
    de5c:	2a00      	cmp	r2, #0
    de5e:	db46      	blt.n	deee <LORAWAN_Join+0xa2>
    de60:	3803      	subs	r0, #3
    de62:	065b      	lsls	r3, r3, #25
    de64:	d443      	bmi.n	deee <LORAWAN_Join+0xa2>
    de66:	0023      	movs	r3, r4
    de68:	336c      	adds	r3, #108	; 0x6c
    de6a:	781b      	ldrb	r3, [r3, #0]
    de6c:	3007      	adds	r0, #7
    de6e:	075b      	lsls	r3, r3, #29
    de70:	d43d      	bmi.n	deee <LORAWAN_Join+0xa2>
    de72:	0023      	movs	r3, r4
    de74:	33d4      	adds	r3, #212	; 0xd4
    de76:	781b      	ldrb	r3, [r3, #0]
    de78:	2b04      	cmp	r3, #4
    de7a:	d033      	beq.n	dee4 <LORAWAN_Join+0x98>
    de7c:	0023      	movs	r3, r4
    de7e:	33d4      	adds	r3, #212	; 0xd4
    de80:	781b      	ldrb	r3, [r3, #0]
    de82:	2b01      	cmp	r3, #1
    de84:	d105      	bne.n	de92 <LORAWAN_Join+0x46>
    de86:	0023      	movs	r3, r4
    de88:	335c      	adds	r3, #92	; 0x5c
    de8a:	781a      	ldrb	r2, [r3, #0]
    de8c:	230e      	movs	r3, #14
    de8e:	421a      	tst	r2, r3
    de90:	d12c      	bne.n	deec <LORAWAN_Join+0xa0>
    de92:	2102      	movs	r1, #2
    de94:	2001      	movs	r0, #1
    de96:	4e20      	ldr	r6, [pc, #128]	; (df18 <LORAWAN_Join+0xcc>)
    de98:	7025      	strb	r5, [r4, #0]
    de9a:	47b0      	blx	r6
    de9c:	0023      	movs	r3, r4
    de9e:	33b6      	adds	r3, #182	; 0xb6
    dea0:	781b      	ldrb	r3, [r3, #0]
    dea2:	2d00      	cmp	r5, #0
    dea4:	d124      	bne.n	def0 <LORAWAN_Join+0xa4>
    dea6:	200b      	movs	r0, #11
    dea8:	4003      	ands	r3, r0
    deaa:	4283      	cmp	r3, r0
    deac:	d11f      	bne.n	deee <LORAWAN_Join+0xa2>
    deae:	0023      	movs	r3, r4
    deb0:	335c      	adds	r3, #92	; 0x5c
    deb2:	781b      	ldrb	r3, [r3, #0]
    deb4:	07db      	lsls	r3, r3, #31
    deb6:	d503      	bpl.n	dec0 <LORAWAN_Join+0x74>
    deb8:	0029      	movs	r1, r5
    deba:	3030      	adds	r0, #48	; 0x30
    debc:	4b17      	ldr	r3, [pc, #92]	; (df1c <LORAWAN_Join+0xd0>)
    debe:	4798      	blx	r3
    dec0:	0022      	movs	r2, r4
    dec2:	2001      	movs	r0, #1
    dec4:	325c      	adds	r2, #92	; 0x5c
    dec6:	7813      	ldrb	r3, [r2, #0]
    dec8:	346c      	adds	r4, #108	; 0x6c
    deca:	4383      	bics	r3, r0
    decc:	7013      	strb	r3, [r2, #0]
    dece:	2304      	movs	r3, #4
    ded0:	7822      	ldrb	r2, [r4, #0]
    ded2:	210b      	movs	r1, #11
    ded4:	4313      	orrs	r3, r2
    ded6:	7023      	strb	r3, [r4, #0]
    ded8:	47b0      	blx	r6
    deda:	2000      	movs	r0, #0
    dedc:	4b10      	ldr	r3, [pc, #64]	; (df20 <LORAWAN_Join+0xd4>)
    dede:	4798      	blx	r3
    dee0:	2008      	movs	r0, #8
    dee2:	e004      	b.n	deee <LORAWAN_Join+0xa2>
    dee4:	4b0f      	ldr	r3, [pc, #60]	; (df24 <LORAWAN_Join+0xd8>)
    dee6:	4798      	blx	r3
    dee8:	2808      	cmp	r0, #8
    deea:	d0c7      	beq.n	de7c <LORAWAN_Join+0x30>
    deec:	2011      	movs	r0, #17
    deee:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
    def0:	2234      	movs	r2, #52	; 0x34
    def2:	200b      	movs	r0, #11
    def4:	4013      	ands	r3, r2
    def6:	4293      	cmp	r3, r2
    def8:	d1f9      	bne.n	deee <LORAWAN_Join+0xa2>
    defa:	3804      	subs	r0, #4
    defc:	4b0a      	ldr	r3, [pc, #40]	; (df28 <LORAWAN_Join+0xdc>)
    defe:	4798      	blx	r3
    df00:	2200      	movs	r2, #0
    df02:	34d2      	adds	r4, #210	; 0xd2
    df04:	7820      	ldrb	r0, [r4, #0]
    df06:	4b09      	ldr	r3, [pc, #36]	; (df2c <LORAWAN_Join+0xe0>)
    df08:	9200      	str	r2, [sp, #0]
    df0a:	4909      	ldr	r1, [pc, #36]	; (df30 <LORAWAN_Join+0xe4>)
    df0c:	4c09      	ldr	r4, [pc, #36]	; (df34 <LORAWAN_Join+0xe8>)
    df0e:	47a0      	blx	r4
    df10:	e7e6      	b.n	dee0 <LORAWAN_Join+0x94>
    df12:	46c0      	nop			; (mov r8, r8)
    df14:	200023e4 	.word	0x200023e4
    df18:	0000af89 	.word	0x0000af89
    df1c:	0000ab99 	.word	0x0000ab99
    df20:	00010fed 	.word	0x00010fed
    df24:	00010905 	.word	0x00010905
    df28:	0000de15 	.word	0x0000de15
    df2c:	0000ce39 	.word	0x0000ce39
    df30:	0000c350 	.word	0x0000c350
    df34:	0000bf29 	.word	0x0000bf29

0000df38 <EncryptFRMPayload>:
    df38:	b5f0      	push	{r4, r5, r6, r7, lr}
    df3a:	0007      	movs	r7, r0
    df3c:	2401      	movs	r4, #1
    df3e:	b089      	sub	sp, #36	; 0x24
    df40:	9305      	str	r3, [sp, #20]
    df42:	ab0e      	add	r3, sp, #56	; 0x38
    df44:	9204      	str	r2, [sp, #16]
    df46:	cb04      	ldmia	r3!, {r2}
    df48:	9103      	str	r1, [sp, #12]
    df4a:	781d      	ldrb	r5, [r3, #0]
    df4c:	090b      	lsrs	r3, r1, #4
    df4e:	9206      	str	r2, [sp, #24]
    df50:	9302      	str	r3, [sp, #8]
    df52:	9b02      	ldr	r3, [sp, #8]
    df54:	429c      	cmp	r4, r3
    df56:	d922      	bls.n	df9e <EncryptFRMPayload+0x66>
    df58:	260f      	movs	r6, #15
    df5a:	9b03      	ldr	r3, [sp, #12]
    df5c:	4033      	ands	r3, r6
    df5e:	1e1e      	subs	r6, r3, #0
    df60:	d01b      	beq.n	df9a <EncryptFRMPayload+0x62>
    df62:	9b11      	ldr	r3, [sp, #68]	; 0x44
    df64:	0022      	movs	r2, r4
    df66:	9300      	str	r3, [sp, #0]
    df68:	9905      	ldr	r1, [sp, #20]
    df6a:	2301      	movs	r3, #1
    df6c:	9804      	ldr	r0, [sp, #16]
    df6e:	4c1d      	ldr	r4, [pc, #116]	; (dfe4 <EncryptFRMPayload+0xac>)
    df70:	47a0      	blx	r4
    df72:	4c1d      	ldr	r4, [pc, #116]	; (dfe8 <EncryptFRMPayload+0xb0>)
    df74:	4b1d      	ldr	r3, [pc, #116]	; (dfec <EncryptFRMPayload+0xb4>)
    df76:	9906      	ldr	r1, [sp, #24]
    df78:	0020      	movs	r0, r4
    df7a:	4798      	blx	r3
    df7c:	9b02      	ldr	r3, [sp, #8]
    df7e:	011a      	lsls	r2, r3, #4
    df80:	2300      	movs	r3, #0
    df82:	18ba      	adds	r2, r7, r2
    df84:	5d1f      	ldrb	r7, [r3, r4]
    df86:	5cd0      	ldrb	r0, [r2, r3]
    df88:	18e9      	adds	r1, r5, r3
    df8a:	4078      	eors	r0, r7
    df8c:	9f10      	ldr	r7, [sp, #64]	; 0x40
    df8e:	b2c9      	uxtb	r1, r1
    df90:	3301      	adds	r3, #1
    df92:	5478      	strb	r0, [r7, r1]
    df94:	b2d9      	uxtb	r1, r3
    df96:	428e      	cmp	r6, r1
    df98:	d8f4      	bhi.n	df84 <EncryptFRMPayload+0x4c>
    df9a:	b009      	add	sp, #36	; 0x24
    df9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    dfa0:	0022      	movs	r2, r4
    dfa2:	9300      	str	r3, [sp, #0]
    dfa4:	9905      	ldr	r1, [sp, #20]
    dfa6:	2301      	movs	r3, #1
    dfa8:	9804      	ldr	r0, [sp, #16]
    dfaa:	4e0e      	ldr	r6, [pc, #56]	; (dfe4 <EncryptFRMPayload+0xac>)
    dfac:	47b0      	blx	r6
    dfae:	4e0e      	ldr	r6, [pc, #56]	; (dfe8 <EncryptFRMPayload+0xb0>)
    dfb0:	4b0e      	ldr	r3, [pc, #56]	; (dfec <EncryptFRMPayload+0xb4>)
    dfb2:	9906      	ldr	r1, [sp, #24]
    dfb4:	0030      	movs	r0, r6
    dfb6:	4798      	blx	r3
    dfb8:	2300      	movs	r3, #0
    dfba:	1e62      	subs	r2, r4, #1
    dfbc:	0112      	lsls	r2, r2, #4
    dfbe:	18ba      	adds	r2, r7, r2
    dfc0:	9207      	str	r2, [sp, #28]
    dfc2:	9a07      	ldr	r2, [sp, #28]
    dfc4:	18e9      	adds	r1, r5, r3
    dfc6:	5cd0      	ldrb	r0, [r2, r3]
    dfc8:	5d9a      	ldrb	r2, [r3, r6]
    dfca:	b2c9      	uxtb	r1, r1
    dfcc:	4050      	eors	r0, r2
    dfce:	9a10      	ldr	r2, [sp, #64]	; 0x40
    dfd0:	3301      	adds	r3, #1
    dfd2:	5450      	strb	r0, [r2, r1]
    dfd4:	2b10      	cmp	r3, #16
    dfd6:	d1f4      	bne.n	dfc2 <EncryptFRMPayload+0x8a>
    dfd8:	3510      	adds	r5, #16
    dfda:	3401      	adds	r4, #1
    dfdc:	b2ed      	uxtb	r5, r5
    dfde:	b2e4      	uxtb	r4, r4
    dfe0:	e7b7      	b.n	df52 <EncryptFRMPayload+0x1a>
    dfe2:	46c0      	nop			; (mov r8, r8)
    dfe4:	0000cf5d 	.word	0x0000cf5d
    dfe8:	20000fda 	.word	0x20000fda
    dfec:	00010735 	.word	0x00010735

0000dff0 <AssemblePacket>:
    dff0:	b5f0      	push	{r4, r5, r6, r7, lr}
    dff2:	2710      	movs	r7, #16
    dff4:	b08b      	sub	sp, #44	; 0x2c
    dff6:	9304      	str	r3, [sp, #16]
    dff8:	ab04      	add	r3, sp, #16
    dffa:	829f      	strh	r7, [r3, #20]
    dffc:	2316      	movs	r3, #22
    dffe:	9205      	str	r2, [sp, #20]
    e000:	aa04      	add	r2, sp, #16
    e002:	189b      	adds	r3, r3, r2
    e004:	2500      	movs	r5, #0
    e006:	2210      	movs	r2, #16
    e008:	ac08      	add	r4, sp, #32
    e00a:	9006      	str	r0, [sp, #24]
    e00c:	9107      	str	r1, [sp, #28]
    e00e:	32ff      	adds	r2, #255	; 0xff
    e010:	0029      	movs	r1, r5
    e012:	4ea1      	ldr	r6, [pc, #644]	; (e298 <AssemblePacket+0x2a8>)
    e014:	7025      	strb	r5, [r4, #0]
    e016:	48a1      	ldr	r0, [pc, #644]	; (e29c <AssemblePacket+0x2ac>)
    e018:	801d      	strh	r5, [r3, #0]
    e01a:	47b0      	blx	r6
    e01c:	003a      	movs	r2, r7
    e01e:	0029      	movs	r1, r5
    e020:	489f      	ldr	r0, [pc, #636]	; (e2a0 <AssemblePacket+0x2b0>)
    e022:	47b0      	blx	r6
    e024:	221f      	movs	r2, #31
    e026:	7823      	ldrb	r3, [r4, #0]
    e028:	9906      	ldr	r1, [sp, #24]
    e02a:	4013      	ands	r3, r2
    e02c:	42a9      	cmp	r1, r5
    e02e:	d041      	beq.n	e0b4 <AssemblePacket+0xc4>
    e030:	3a9f      	subs	r2, #159	; 0x9f
    e032:	4313      	orrs	r3, r2
    e034:	7023      	strb	r3, [r4, #0]
    e036:	4b9b      	ldr	r3, [pc, #620]	; (e2a4 <AssemblePacket+0x2b4>)
    e038:	3281      	adds	r2, #129	; 0x81
    e03a:	336c      	adds	r3, #108	; 0x6c
    e03c:	7819      	ldrb	r1, [r3, #0]
    e03e:	430a      	orrs	r2, r1
    e040:	701a      	strb	r2, [r3, #0]
    e042:	22e0      	movs	r2, #224	; 0xe0
    e044:	7823      	ldrb	r3, [r4, #0]
    e046:	4895      	ldr	r0, [pc, #596]	; (e29c <AssemblePacket+0x2ac>)
    e048:	4013      	ands	r3, r2
    e04a:	7023      	strb	r3, [r4, #0]
    e04c:	4c95      	ldr	r4, [pc, #596]	; (e2a4 <AssemblePacket+0x2b4>)
    e04e:	7403      	strb	r3, [r0, #16]
    e050:	3adc      	subs	r2, #220	; 0xdc
    e052:	4b95      	ldr	r3, [pc, #596]	; (e2a8 <AssemblePacket+0x2b8>)
    e054:	3011      	adds	r0, #17
    e056:	1c61      	adds	r1, r4, #1
    e058:	4798      	blx	r3
    e05a:	2315      	movs	r3, #21
    e05c:	aa04      	add	r2, sp, #16
    e05e:	8293      	strh	r3, [r2, #20]
    e060:	2300      	movs	r3, #0
    e062:	469c      	mov	ip, r3
    e064:	0023      	movs	r3, r4
    e066:	335c      	adds	r3, #92	; 0x5c
    e068:	781b      	ldrb	r3, [r3, #0]
    e06a:	069b      	lsls	r3, r3, #26
    e06c:	d400      	bmi.n	e070 <AssemblePacket+0x80>
    e06e:	e0e2      	b.n	e236 <AssemblePacket+0x246>
    e070:	0023      	movs	r3, r4
    e072:	33bf      	adds	r3, #191	; 0xbf
    e074:	781a      	ldrb	r2, [r3, #0]
    e076:	4b8d      	ldr	r3, [pc, #564]	; (e2ac <AssemblePacket+0x2bc>)
    e078:	781d      	ldrb	r5, [r3, #0]
    e07a:	42aa      	cmp	r2, r5
    e07c:	d200      	bcs.n	e080 <AssemblePacket+0x90>
    e07e:	e0da      	b.n	e236 <AssemblePacket+0x246>
    e080:	0021      	movs	r1, r4
    e082:	0026      	movs	r6, r4
    e084:	2780      	movs	r7, #128	; 0x80
    e086:	31a2      	adds	r1, #162	; 0xa2
    e088:	880b      	ldrh	r3, [r1, #0]
    e08a:	36b4      	adds	r6, #180	; 0xb4
    e08c:	3301      	adds	r3, #1
    e08e:	b29b      	uxth	r3, r3
    e090:	800b      	strh	r3, [r1, #0]
    e092:	7836      	ldrb	r6, [r6, #0]
    e094:	427f      	negs	r7, r7
    e096:	1c38      	adds	r0, r7, #0
    e098:	42b3      	cmp	r3, r6
    e09a:	d10f      	bne.n	e0bc <AssemblePacket+0xcc>
    e09c:	0023      	movs	r3, r4
    e09e:	4662      	mov	r2, ip
    e0a0:	33cd      	adds	r3, #205	; 0xcd
    e0a2:	701a      	strb	r2, [r3, #0]
    e0a4:	2040      	movs	r0, #64	; 0x40
    e0a6:	2310      	movs	r3, #16
    e0a8:	346c      	adds	r4, #108	; 0x6c
    e0aa:	7822      	ldrb	r2, [r4, #0]
    e0ac:	4338      	orrs	r0, r7
    e0ae:	4313      	orrs	r3, r2
    e0b0:	7023      	strb	r3, [r4, #0]
    e0b2:	e02e      	b.n	e112 <AssemblePacket+0x122>
    e0b4:	2240      	movs	r2, #64	; 0x40
    e0b6:	4313      	orrs	r3, r2
    e0b8:	7023      	strb	r3, [r4, #0]
    e0ba:	e7c2      	b.n	e042 <AssemblePacket+0x52>
    e0bc:	42b3      	cmp	r3, r6
    e0be:	d928      	bls.n	e112 <AssemblePacket+0x122>
    e0c0:	42aa      	cmp	r2, r5
    e0c2:	d100      	bne.n	e0c6 <AssemblePacket+0xd6>
    e0c4:	e0b0      	b.n	e228 <AssemblePacket+0x238>
    e0c6:	0021      	movs	r1, r4
    e0c8:	0020      	movs	r0, r4
    e0ca:	31cd      	adds	r1, #205	; 0xcd
    e0cc:	780b      	ldrb	r3, [r1, #0]
    e0ce:	30b5      	adds	r0, #181	; 0xb5
    e0d0:	3301      	adds	r3, #1
    e0d2:	b2db      	uxtb	r3, r3
    e0d4:	700b      	strb	r3, [r1, #0]
    e0d6:	7800      	ldrb	r0, [r0, #0]
    e0d8:	3801      	subs	r0, #1
    e0da:	4283      	cmp	r3, r0
    e0dc:	dbe2      	blt.n	e0a4 <AssemblePacket+0xb4>
    e0de:	4663      	mov	r3, ip
    e0e0:	700b      	strb	r3, [r1, #0]
    e0e2:	42aa      	cmp	r2, r5
    e0e4:	d90d      	bls.n	e102 <AssemblePacket+0x112>
    e0e6:	2313      	movs	r3, #19
    e0e8:	a904      	add	r1, sp, #16
    e0ea:	3a01      	subs	r2, #1
    e0ec:	185b      	adds	r3, r3, r1
    e0ee:	4d6f      	ldr	r5, [pc, #444]	; (e2ac <AssemblePacket+0x2bc>)
    e0f0:	701a      	strb	r2, [r3, #0]
    e0f2:	2613      	movs	r6, #19
    e0f4:	ab04      	add	r3, sp, #16
    e0f6:	18f6      	adds	r6, r6, r3
    e0f8:	782a      	ldrb	r2, [r5, #0]
    e0fa:	7833      	ldrb	r3, [r6, #0]
    e0fc:	429a      	cmp	r2, r3
    e0fe:	d800      	bhi.n	e102 <AssemblePacket+0x112>
    e100:	e084      	b.n	e20c <AssemblePacket+0x21c>
    e102:	2210      	movs	r2, #16
    e104:	2040      	movs	r0, #64	; 0x40
    e106:	4b67      	ldr	r3, [pc, #412]	; (e2a4 <AssemblePacket+0x2b4>)
    e108:	4338      	orrs	r0, r7
    e10a:	336c      	adds	r3, #108	; 0x6c
    e10c:	7819      	ldrb	r1, [r3, #0]
    e10e:	430a      	orrs	r2, r1
    e110:	701a      	strb	r2, [r3, #0]
    e112:	4b64      	ldr	r3, [pc, #400]	; (e2a4 <AssemblePacket+0x2b4>)
    e114:	2402      	movs	r4, #2
    e116:	0019      	movs	r1, r3
    e118:	316c      	adds	r1, #108	; 0x6c
    e11a:	780a      	ldrb	r2, [r1, #0]
    e11c:	4222      	tst	r2, r4
    e11e:	d003      	beq.n	e128 <AssemblePacket+0x138>
    e120:	2520      	movs	r5, #32
    e122:	43a2      	bics	r2, r4
    e124:	4328      	orrs	r0, r5
    e126:	700a      	strb	r2, [r1, #0]
    e128:	2210      	movs	r2, #16
    e12a:	0004      	movs	r4, r0
    e12c:	33b8      	adds	r3, #184	; 0xb8
    e12e:	781e      	ldrb	r6, [r3, #0]
    e130:	4394      	bics	r4, r2
    e132:	2e00      	cmp	r6, #0
    e134:	d003      	beq.n	e13e <AssemblePacket+0x14e>
    e136:	9b04      	ldr	r3, [sp, #16]
    e138:	2b00      	cmp	r3, #0
    e13a:	d000      	beq.n	e13e <AssemblePacket+0x14e>
    e13c:	e07d      	b.n	e23a <AssemblePacket+0x24a>
    e13e:	230f      	movs	r3, #15
    e140:	439c      	bics	r4, r3
    e142:	0020      	movs	r0, r4
    e144:	ac09      	add	r4, sp, #36	; 0x24
    e146:	8825      	ldrh	r5, [r4, #0]
    e148:	4f54      	ldr	r7, [pc, #336]	; (e29c <AssemblePacket+0x2ac>)
    e14a:	2202      	movs	r2, #2
    e14c:	5578      	strb	r0, [r7, r5]
    e14e:	1c68      	adds	r0, r5, #1
    e150:	b280      	uxth	r0, r0
    e152:	19c0      	adds	r0, r0, r7
    e154:	4956      	ldr	r1, [pc, #344]	; (e2b0 <AssemblePacket+0x2c0>)
    e156:	4b54      	ldr	r3, [pc, #336]	; (e2a8 <AssemblePacket+0x2b8>)
    e158:	3503      	adds	r5, #3
    e15a:	4798      	blx	r3
    e15c:	8025      	strh	r5, [r4, #0]
    e15e:	2e00      	cmp	r6, #0
    e160:	d007      	beq.n	e172 <AssemblePacket+0x182>
    e162:	9b04      	ldr	r3, [sp, #16]
    e164:	2b00      	cmp	r3, #0
    e166:	d004      	beq.n	e172 <AssemblePacket+0x182>
    e168:	2201      	movs	r2, #1
    e16a:	0021      	movs	r1, r4
    e16c:	0038      	movs	r0, r7
    e16e:	4b51      	ldr	r3, [pc, #324]	; (e2b4 <AssemblePacket+0x2c4>)
    e170:	4798      	blx	r3
    e172:	466a      	mov	r2, sp
    e174:	8823      	ldrh	r3, [r4, #0]
    e176:	7f12      	ldrb	r2, [r2, #28]
    e178:	1c5d      	adds	r5, r3, #1
    e17a:	54fa      	strb	r2, [r7, r3]
    e17c:	9b04      	ldr	r3, [sp, #16]
    e17e:	b2ad      	uxth	r5, r5
    e180:	8025      	strh	r5, [r4, #0]
    e182:	2b00      	cmp	r3, #0
    e184:	d062      	beq.n	e24c <AssemblePacket+0x25c>
    e186:	001a      	movs	r2, r3
    e188:	1978      	adds	r0, r7, r5
    e18a:	9905      	ldr	r1, [sp, #20]
    e18c:	4b46      	ldr	r3, [pc, #280]	; (e2a8 <AssemblePacket+0x2b8>)
    e18e:	4798      	blx	r3
    e190:	466b      	mov	r3, sp
    e192:	4a44      	ldr	r2, [pc, #272]	; (e2a4 <AssemblePacket+0x2b4>)
    e194:	7c19      	ldrb	r1, [r3, #16]
    e196:	6813      	ldr	r3, [r2, #0]
    e198:	b2ed      	uxtb	r5, r5
    e19a:	0a18      	lsrs	r0, r3, #8
    e19c:	7913      	ldrb	r3, [r2, #4]
    e19e:	9501      	str	r5, [sp, #4]
    e1a0:	061b      	lsls	r3, r3, #24
    e1a2:	4303      	orrs	r3, r0
    e1a4:	9303      	str	r3, [sp, #12]
    e1a6:	4b44      	ldr	r3, [pc, #272]	; (e2b8 <AssemblePacket+0x2c8>)
    e1a8:	9702      	str	r7, [sp, #8]
    e1aa:	9300      	str	r3, [sp, #0]
    e1ac:	6e13      	ldr	r3, [r2, #96]	; 0x60
    e1ae:	9805      	ldr	r0, [sp, #20]
    e1b0:	2200      	movs	r2, #0
    e1b2:	4d42      	ldr	r5, [pc, #264]	; (e2bc <AssemblePacket+0x2cc>)
    e1b4:	47a8      	blx	r5
    e1b6:	8823      	ldrh	r3, [r4, #0]
    e1b8:	9a04      	ldr	r2, [sp, #16]
    e1ba:	189b      	adds	r3, r3, r2
    e1bc:	8023      	strh	r3, [r4, #0]
    e1be:	4c39      	ldr	r4, [pc, #228]	; (e2a4 <AssemblePacket+0x2b4>)
    e1c0:	ae09      	add	r6, sp, #36	; 0x24
    e1c2:	6823      	ldr	r3, [r4, #0]
    e1c4:	8832      	ldrh	r2, [r6, #0]
    e1c6:	0a19      	lsrs	r1, r3, #8
    e1c8:	7923      	ldrb	r3, [r4, #4]
    e1ca:	3a10      	subs	r2, #16
    e1cc:	061b      	lsls	r3, r3, #24
    e1ce:	430b      	orrs	r3, r1
    e1d0:	9300      	str	r3, [sp, #0]
    e1d2:	6e21      	ldr	r1, [r4, #96]	; 0x60
    e1d4:	b2d2      	uxtb	r2, r2
    e1d6:	2349      	movs	r3, #73	; 0x49
    e1d8:	2000      	movs	r0, #0
    e1da:	4d39      	ldr	r5, [pc, #228]	; (e2c0 <AssemblePacket+0x2d0>)
    e1dc:	47a8      	blx	r5
    e1de:	4f2f      	ldr	r7, [pc, #188]	; (e29c <AssemblePacket+0x2ac>)
    e1e0:	2210      	movs	r2, #16
    e1e2:	492f      	ldr	r1, [pc, #188]	; (e2a0 <AssemblePacket+0x2b0>)
    e1e4:	0038      	movs	r0, r7
    e1e6:	4b30      	ldr	r3, [pc, #192]	; (e2a8 <AssemblePacket+0x2b8>)
    e1e8:	4798      	blx	r3
    e1ea:	7833      	ldrb	r3, [r6, #0]
    e1ec:	003a      	movs	r2, r7
    e1ee:	492c      	ldr	r1, [pc, #176]	; (e2a0 <AssemblePacket+0x2b0>)
    e1f0:	4834      	ldr	r0, [pc, #208]	; (e2c4 <AssemblePacket+0x2d4>)
    e1f2:	4d35      	ldr	r5, [pc, #212]	; (e2c8 <AssemblePacket+0x2d8>)
    e1f4:	47a8      	blx	r5
    e1f6:	8836      	ldrh	r6, [r6, #0]
    e1f8:	2204      	movs	r2, #4
    e1fa:	19f0      	adds	r0, r6, r7
    e1fc:	4928      	ldr	r1, [pc, #160]	; (e2a0 <AssemblePacket+0x2b0>)
    e1fe:	4b2a      	ldr	r3, [pc, #168]	; (e2a8 <AssemblePacket+0x2b8>)
    e200:	4798      	blx	r3
    e202:	3e0c      	subs	r6, #12
    e204:	34a6      	adds	r4, #166	; 0xa6
    e206:	8026      	strh	r6, [r4, #0]
    e208:	b00b      	add	sp, #44	; 0x2c
    e20a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e20c:	4b2f      	ldr	r3, [pc, #188]	; (e2cc <AssemblePacket+0x2dc>)
    e20e:	0031      	movs	r1, r6
    e210:	2011      	movs	r0, #17
    e212:	4798      	blx	r3
    e214:	7833      	ldrb	r3, [r6, #0]
    e216:	2808      	cmp	r0, #8
    e218:	d03a      	beq.n	e290 <AssemblePacket+0x2a0>
    e21a:	782a      	ldrb	r2, [r5, #0]
    e21c:	429a      	cmp	r2, r3
    e21e:	d300      	bcc.n	e222 <AssemblePacket+0x232>
    e220:	e767      	b.n	e0f2 <AssemblePacket+0x102>
    e222:	3b01      	subs	r3, #1
    e224:	7033      	strb	r3, [r6, #0]
    e226:	e764      	b.n	e0f2 <AssemblePacket+0x102>
    e228:	4663      	mov	r3, ip
    e22a:	800b      	strh	r3, [r1, #0]
    e22c:	2210      	movs	r2, #16
    e22e:	346c      	adds	r4, #108	; 0x6c
    e230:	7823      	ldrb	r3, [r4, #0]
    e232:	4393      	bics	r3, r2
    e234:	e73c      	b.n	e0b0 <AssemblePacket+0xc0>
    e236:	2000      	movs	r0, #0
    e238:	e7f8      	b.n	e22c <AssemblePacket+0x23c>
    e23a:	4b25      	ldr	r3, [pc, #148]	; (e2d0 <AssemblePacket+0x2e0>)
    e23c:	4798      	blx	r3
    e23e:	220f      	movs	r2, #15
    e240:	0003      	movs	r3, r0
    e242:	0020      	movs	r0, r4
    e244:	4013      	ands	r3, r2
    e246:	4390      	bics	r0, r2
    e248:	4318      	orrs	r0, r3
    e24a:	e77b      	b.n	e144 <AssemblePacket+0x154>
    e24c:	4d15      	ldr	r5, [pc, #84]	; (e2a4 <AssemblePacket+0x2b4>)
    e24e:	002b      	movs	r3, r5
    e250:	33b8      	adds	r3, #184	; 0xb8
    e252:	781b      	ldrb	r3, [r3, #0]
    e254:	2b00      	cmp	r3, #0
    e256:	d0b2      	beq.n	e1be <AssemblePacket+0x1ce>
    e258:	2616      	movs	r6, #22
    e25a:	ab04      	add	r3, sp, #16
    e25c:	18f6      	adds	r6, r6, r3
    e25e:	9a04      	ldr	r2, [sp, #16]
    e260:	0031      	movs	r1, r6
    e262:	481c      	ldr	r0, [pc, #112]	; (e2d4 <AssemblePacket+0x2e4>)
    e264:	4b13      	ldr	r3, [pc, #76]	; (e2b4 <AssemblePacket+0x2c4>)
    e266:	4798      	blx	r3
    e268:	682b      	ldr	r3, [r5, #0]
    e26a:	7831      	ldrb	r1, [r6, #0]
    e26c:	0a1a      	lsrs	r2, r3, #8
    e26e:	792b      	ldrb	r3, [r5, #4]
    e270:	9702      	str	r7, [sp, #8]
    e272:	061b      	lsls	r3, r3, #24
    e274:	4313      	orrs	r3, r2
    e276:	9303      	str	r3, [sp, #12]
    e278:	7823      	ldrb	r3, [r4, #0]
    e27a:	9a04      	ldr	r2, [sp, #16]
    e27c:	9301      	str	r3, [sp, #4]
    e27e:	4b11      	ldr	r3, [pc, #68]	; (e2c4 <AssemblePacket+0x2d4>)
    e280:	4814      	ldr	r0, [pc, #80]	; (e2d4 <AssemblePacket+0x2e4>)
    e282:	9300      	str	r3, [sp, #0]
    e284:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    e286:	4d0d      	ldr	r5, [pc, #52]	; (e2bc <AssemblePacket+0x2cc>)
    e288:	47a8      	blx	r5
    e28a:	8823      	ldrh	r3, [r4, #0]
    e28c:	8832      	ldrh	r2, [r6, #0]
    e28e:	e794      	b.n	e1ba <AssemblePacket+0x1ca>
    e290:	34bf      	adds	r4, #191	; 0xbf
    e292:	7023      	strb	r3, [r4, #0]
    e294:	e735      	b.n	e102 <AssemblePacket+0x112>
    e296:	46c0      	nop			; (mov r8, r8)
    e298:	00015fc9 	.word	0x00015fc9
    e29c:	200025a5 	.word	0x200025a5
    e2a0:	20000fda 	.word	0x20000fda
    e2a4:	200023e4 	.word	0x200023e4
    e2a8:	00015f45 	.word	0x00015f45
    e2ac:	200024ae 	.word	0x200024ae
    e2b0:	20002444 	.word	0x20002444
    e2b4:	0000cc79 	.word	0x0000cc79
    e2b8:	200023f9 	.word	0x200023f9
    e2bc:	0000df39 	.word	0x0000df39
    e2c0:	0000cf5d 	.word	0x0000cf5d
    e2c4:	200023e9 	.word	0x200023e9
    e2c8:	00010775 	.word	0x00010775
    e2cc:	0000aa8d 	.word	0x0000aa8d
    e2d0:	0000cb75 	.word	0x0000cb75
    e2d4:	200026c0 	.word	0x200026c0

0000e2d8 <UpdateTransactionCompleteCbParams>:
    e2d8:	23da      	movs	r3, #218	; 0xda
    e2da:	2201      	movs	r2, #1
    e2dc:	b570      	push	{r4, r5, r6, lr}
    e2de:	4915      	ldr	r1, [pc, #84]	; (e334 <UpdateTransactionCompleteCbParams+0x5c>)
    e2e0:	4c15      	ldr	r4, [pc, #84]	; (e338 <UpdateTransactionCompleteCbParams+0x60>)
    e2e2:	005b      	lsls	r3, r3, #1
    e2e4:	54e2      	strb	r2, [r4, r3]
    e2e6:	784a      	ldrb	r2, [r1, #1]
    e2e8:	780b      	ldrb	r3, [r1, #0]
    e2ea:	0212      	lsls	r2, r2, #8
    e2ec:	431a      	orrs	r2, r3
    e2ee:	788b      	ldrb	r3, [r1, #2]
    e2f0:	041b      	lsls	r3, r3, #16
    e2f2:	431a      	orrs	r2, r3
    e2f4:	78cb      	ldrb	r3, [r1, #3]
    e2f6:	061b      	lsls	r3, r3, #24
    e2f8:	4313      	orrs	r3, r2
    e2fa:	d012      	beq.n	e322 <UpdateTransactionCompleteCbParams+0x4a>
    e2fc:	0022      	movs	r2, r4
    e2fe:	2504      	movs	r5, #4
    e300:	32d8      	adds	r2, #216	; 0xd8
    e302:	6812      	ldr	r2, [r2, #0]
    e304:	422a      	tst	r2, r5
    e306:	d00c      	beq.n	e322 <UpdateTransactionCompleteCbParams+0x4a>
    e308:	0022      	movs	r2, r4
    e30a:	32dc      	adds	r2, #220	; 0xdc
    e30c:	6812      	ldr	r2, [r2, #0]
    e30e:	2a00      	cmp	r2, #0
    e310:	d007      	beq.n	e322 <UpdateTransactionCompleteCbParams+0x4a>
    e312:	0021      	movs	r1, r4
    e314:	31e0      	adds	r1, #224	; 0xe0
    e316:	700d      	strb	r5, [r1, #0]
    e318:	0025      	movs	r5, r4
    e31a:	35e4      	adds	r5, #228	; 0xe4
    e31c:	7028      	strb	r0, [r5, #0]
    e31e:	0010      	movs	r0, r2
    e320:	4798      	blx	r3
    e322:	23da      	movs	r3, #218	; 0xda
    e324:	005b      	lsls	r3, r3, #1
    e326:	5ce3      	ldrb	r3, [r4, r3]
    e328:	2b00      	cmp	r3, #0
    e32a:	d002      	beq.n	e332 <UpdateTransactionCompleteCbParams+0x5a>
    e32c:	2300      	movs	r3, #0
    e32e:	34dc      	adds	r4, #220	; 0xdc
    e330:	6023      	str	r3, [r4, #0]
    e332:	bd70      	pop	{r4, r5, r6, pc}
    e334:	200026b8 	.word	0x200026b8
    e338:	200023e4 	.word	0x200023e4

0000e33c <UpdateRxDataAvailableCbParams>:
    e33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e33e:	4e13      	ldr	r6, [pc, #76]	; (e38c <UpdateRxDataAvailableCbParams+0x50>)
    e340:	7874      	ldrb	r4, [r6, #1]
    e342:	7835      	ldrb	r5, [r6, #0]
    e344:	0224      	lsls	r4, r4, #8
    e346:	432c      	orrs	r4, r5
    e348:	78b5      	ldrb	r5, [r6, #2]
    e34a:	042d      	lsls	r5, r5, #16
    e34c:	432c      	orrs	r4, r5
    e34e:	78f5      	ldrb	r5, [r6, #3]
    e350:	062d      	lsls	r5, r5, #24
    e352:	4325      	orrs	r5, r4
    e354:	d019      	beq.n	e38a <UpdateRxDataAvailableCbParams+0x4e>
    e356:	4c0e      	ldr	r4, [pc, #56]	; (e390 <UpdateRxDataAvailableCbParams+0x54>)
    e358:	2702      	movs	r7, #2
    e35a:	0026      	movs	r6, r4
    e35c:	36d8      	adds	r6, #216	; 0xd8
    e35e:	6836      	ldr	r6, [r6, #0]
    e360:	423e      	tst	r6, r7
    e362:	d012      	beq.n	e38a <UpdateRxDataAvailableCbParams+0x4e>
    e364:	0026      	movs	r6, r4
    e366:	36e0      	adds	r6, #224	; 0xe0
    e368:	7037      	strb	r7, [r6, #0]
    e36a:	0027      	movs	r7, r4
    e36c:	37e4      	adds	r7, #228	; 0xe4
    e36e:	6038      	str	r0, [r7, #0]
    e370:	0020      	movs	r0, r4
    e372:	30e8      	adds	r0, #232	; 0xe8
    e374:	6001      	str	r1, [r0, #0]
    e376:	0021      	movs	r1, r4
    e378:	31ec      	adds	r1, #236	; 0xec
    e37a:	700a      	strb	r2, [r1, #0]
    e37c:	0022      	movs	r2, r4
    e37e:	34dc      	adds	r4, #220	; 0xdc
    e380:	32ed      	adds	r2, #237	; 0xed
    e382:	7013      	strb	r3, [r2, #0]
    e384:	0031      	movs	r1, r6
    e386:	6820      	ldr	r0, [r4, #0]
    e388:	47a8      	blx	r5
    e38a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e38c:	200026b8 	.word	0x200026b8
    e390:	200023e4 	.word	0x200023e4

0000e394 <LorawanNotifyAppOnRxdone>:
    e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e396:	4c25      	ldr	r4, [pc, #148]	; (e42c <LorawanNotifyAppOnRxdone+0x98>)
    e398:	0007      	movs	r7, r0
    e39a:	0023      	movs	r3, r4
    e39c:	33d4      	adds	r3, #212	; 0xd4
    e39e:	781b      	ldrb	r3, [r3, #0]
    e3a0:	000d      	movs	r5, r1
    e3a2:	0016      	movs	r6, r2
    e3a4:	2b01      	cmp	r3, #1
    e3a6:	d136      	bne.n	e416 <LorawanNotifyAppOnRxdone+0x82>
    e3a8:	0022      	movs	r2, r4
    e3aa:	210e      	movs	r1, #14
    e3ac:	325c      	adds	r2, #92	; 0x5c
    e3ae:	7813      	ldrb	r3, [r2, #0]
    e3b0:	438b      	bics	r3, r1
    e3b2:	7013      	strb	r3, [r2, #0]
    e3b4:	491e      	ldr	r1, [pc, #120]	; (e430 <LorawanNotifyAppOnRxdone+0x9c>)
    e3b6:	784a      	ldrb	r2, [r1, #1]
    e3b8:	780b      	ldrb	r3, [r1, #0]
    e3ba:	0212      	lsls	r2, r2, #8
    e3bc:	431a      	orrs	r2, r3
    e3be:	788b      	ldrb	r3, [r1, #2]
    e3c0:	041b      	lsls	r3, r3, #16
    e3c2:	431a      	orrs	r2, r3
    e3c4:	78cb      	ldrb	r3, [r1, #3]
    e3c6:	061b      	lsls	r3, r3, #24
    e3c8:	4313      	orrs	r3, r2
    e3ca:	d023      	beq.n	e414 <LorawanNotifyAppOnRxdone+0x80>
    e3cc:	0022      	movs	r2, r4
    e3ce:	2120      	movs	r1, #32
    e3d0:	326c      	adds	r2, #108	; 0x6c
    e3d2:	7813      	ldrb	r3, [r2, #0]
    e3d4:	438b      	bics	r3, r1
    e3d6:	7013      	strb	r3, [r2, #0]
    e3d8:	0023      	movs	r3, r4
    e3da:	33d4      	adds	r3, #212	; 0xd4
    e3dc:	781b      	ldrb	r3, [r3, #0]
    e3de:	7878      	ldrb	r0, [r7, #1]
    e3e0:	469c      	mov	ip, r3
    e3e2:	78fa      	ldrb	r2, [r7, #3]
    e3e4:	78b9      	ldrb	r1, [r7, #2]
    e3e6:	793b      	ldrb	r3, [r7, #4]
    e3e8:	4667      	mov	r7, ip
    e3ea:	0209      	lsls	r1, r1, #8
    e3ec:	4301      	orrs	r1, r0
    e3ee:	0410      	lsls	r0, r2, #16
    e3f0:	4308      	orrs	r0, r1
    e3f2:	061b      	lsls	r3, r3, #24
    e3f4:	4318      	orrs	r0, r3
    e3f6:	0032      	movs	r2, r6
    e3f8:	2308      	movs	r3, #8
    e3fa:	0029      	movs	r1, r5
    e3fc:	2f04      	cmp	r7, #4
    e3fe:	d112      	bne.n	e426 <LorawanNotifyAppOnRxdone+0x92>
    e400:	4d0c      	ldr	r5, [pc, #48]	; (e434 <LorawanNotifyAppOnRxdone+0xa0>)
    e402:	47a8      	blx	r5
    e404:	23da      	movs	r3, #218	; 0xda
    e406:	005b      	lsls	r3, r3, #1
    e408:	5ce3      	ldrb	r3, [r4, r3]
    e40a:	2b00      	cmp	r3, #0
    e40c:	d102      	bne.n	e414 <LorawanNotifyAppOnRxdone+0x80>
    e40e:	2008      	movs	r0, #8
    e410:	4b09      	ldr	r3, [pc, #36]	; (e438 <LorawanNotifyAppOnRxdone+0xa4>)
    e412:	4798      	blx	r3
    e414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e416:	2b04      	cmp	r3, #4
    e418:	d1cc      	bne.n	e3b4 <LorawanNotifyAppOnRxdone+0x20>
    e41a:	0023      	movs	r3, r4
    e41c:	33c8      	adds	r3, #200	; 0xc8
    e41e:	7818      	ldrb	r0, [r3, #0]
    e420:	4b06      	ldr	r3, [pc, #24]	; (e43c <LorawanNotifyAppOnRxdone+0xa8>)
    e422:	4798      	blx	r3
    e424:	e7c6      	b.n	e3b4 <LorawanNotifyAppOnRxdone+0x20>
    e426:	4d06      	ldr	r5, [pc, #24]	; (e440 <LorawanNotifyAppOnRxdone+0xac>)
    e428:	47a8      	blx	r5
    e42a:	e7eb      	b.n	e404 <LorawanNotifyAppOnRxdone+0x70>
    e42c:	200023e4 	.word	0x200023e4
    e430:	200026b8 	.word	0x200026b8
    e434:	00010a6d 	.word	0x00010a6d
    e438:	0000e2d9 	.word	0x0000e2d9
    e43c:	0000c235 	.word	0x0000c235
    e440:	0000e33d 	.word	0x0000e33d

0000e444 <LorawanSetReceiveWindow2Parameters>:
    e444:	b537      	push	{r0, r1, r2, r4, r5, lr}
    e446:	466b      	mov	r3, sp
    e448:	1cdd      	adds	r5, r3, #3
    e44a:	9001      	str	r0, [sp, #4]
    e44c:	7029      	strb	r1, [r5, #0]
    e44e:	2001      	movs	r0, #1
    e450:	a901      	add	r1, sp, #4
    e452:	4c09      	ldr	r4, [pc, #36]	; (e478 <LorawanSetReceiveWindow2Parameters+0x34>)
    e454:	47a0      	blx	r4
    e456:	2808      	cmp	r0, #8
    e458:	d002      	beq.n	e460 <LorawanSetReceiveWindow2Parameters+0x1c>
    e45a:	240a      	movs	r4, #10
    e45c:	0020      	movs	r0, r4
    e45e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    e460:	0029      	movs	r1, r5
    e462:	200f      	movs	r0, #15
    e464:	47a0      	blx	r4
    e466:	0004      	movs	r4, r0
    e468:	2808      	cmp	r0, #8
    e46a:	d1f6      	bne.n	e45a <LorawanSetReceiveWindow2Parameters+0x16>
    e46c:	7829      	ldrb	r1, [r5, #0]
    e46e:	9801      	ldr	r0, [sp, #4]
    e470:	4b02      	ldr	r3, [pc, #8]	; (e47c <LorawanSetReceiveWindow2Parameters+0x38>)
    e472:	4798      	blx	r3
    e474:	e7f2      	b.n	e45c <LorawanSetReceiveWindow2Parameters+0x18>
    e476:	46c0      	nop			; (mov r8, r8)
    e478:	0000aa8d 	.word	0x0000aa8d
    e47c:	0000d4e1 	.word	0x0000d4e1

0000e480 <LorawanSetFrequency>:
    e480:	b507      	push	{r0, r1, r2, lr}
    e482:	466b      	mov	r3, sp
    e484:	9100      	str	r1, [sp, #0]
    e486:	7118      	strb	r0, [r3, #4]
    e488:	4669      	mov	r1, sp
    e48a:	2000      	movs	r0, #0
    e48c:	4b01      	ldr	r3, [pc, #4]	; (e494 <LorawanSetFrequency+0x14>)
    e48e:	4798      	blx	r3
    e490:	bd0e      	pop	{r1, r2, r3, pc}
    e492:	46c0      	nop			; (mov r8, r8)
    e494:	0000ab99 	.word	0x0000ab99

0000e498 <LorawanGetReceiveWindow2Parameters>:
    e498:	4a06      	ldr	r2, [pc, #24]	; (e4b4 <LorawanGetReceiveWindow2Parameters+0x1c>)
    e49a:	0013      	movs	r3, r2
    e49c:	334e      	adds	r3, #78	; 0x4e
    e49e:	781b      	ldrb	r3, [r3, #0]
    e4a0:	7103      	strb	r3, [r0, #4]
    e4a2:	0013      	movs	r3, r2
    e4a4:	324c      	adds	r2, #76	; 0x4c
    e4a6:	334a      	adds	r3, #74	; 0x4a
    e4a8:	8819      	ldrh	r1, [r3, #0]
    e4aa:	8813      	ldrh	r3, [r2, #0]
    e4ac:	041b      	lsls	r3, r3, #16
    e4ae:	430b      	orrs	r3, r1
    e4b0:	6003      	str	r3, [r0, #0]
    e4b2:	4770      	bx	lr
    e4b4:	200023e4 	.word	0x200023e4

0000e4b8 <LORAWAN_GetAttr>:
    e4b8:	b530      	push	{r4, r5, lr}
    e4ba:	000b      	movs	r3, r1
    e4bc:	b085      	sub	sp, #20
    e4be:	0014      	movs	r4, r2
    e4c0:	2837      	cmp	r0, #55	; 0x37
    e4c2:	d839      	bhi.n	e538 <LORAWAN_GetAttr+0x80>
    e4c4:	f004 fc1a 	bl	12cfc <__gnu_thumb1_case_uhi>
    e4c8:	005a003b 	.word	0x005a003b
    e4cc:	006e005e 	.word	0x006e005e
    e4d0:	006a0066 	.word	0x006a0066
    e4d4:	00770072 	.word	0x00770072
    e4d8:	007e007b 	.word	0x007e007b
    e4dc:	00840081 	.word	0x00840081
    e4e0:	008f0087 	.word	0x008f0087
    e4e4:	00950092 	.word	0x00950092
    e4e8:	009d009a 	.word	0x009d009a
    e4ec:	00a300a0 	.word	0x00a300a0
    e4f0:	00d000a6 	.word	0x00d000a6
    e4f4:	00a900ac 	.word	0x00a900ac
    e4f8:	00d700dd 	.word	0x00d700dd
    e4fc:	00c600cb 	.word	0x00c600cb
    e500:	003800bf 	.word	0x003800bf
    e504:	00b8008c 	.word	0x00b8008c
    e508:	00b500bc 	.word	0x00b500bc
    e50c:	00d400b2 	.word	0x00d400b2
    e510:	004100da 	.word	0x004100da
    e514:	00430041 	.word	0x00430041
    e518:	010b00e5 	.word	0x010b00e5
    e51c:	00f50102 	.word	0x00f50102
    e520:	00380118 	.word	0x00380118
    e524:	0125014e 	.word	0x0125014e
    e528:	012e0129 	.word	0x012e0129
    e52c:	01380133 	.word	0x01380133
    e530:	013f013c 	.word	0x013f013c
    e534:	014b0142 	.word	0x014b0142
    e538:	200a      	movs	r0, #10
    e53a:	b005      	add	sp, #20
    e53c:	bd30      	pop	{r4, r5, pc}
    e53e:	2208      	movs	r2, #8
    e540:	498a      	ldr	r1, [pc, #552]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e542:	313d      	adds	r1, #61	; 0x3d
    e544:	0020      	movs	r0, r4
    e546:	4b8a      	ldr	r3, [pc, #552]	; (e770 <LORAWAN_GetAttr+0x2b8>)
    e548:	4798      	blx	r3
    e54a:	2008      	movs	r0, #8
    e54c:	e7f5      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e54e:	4669      	mov	r1, sp
    e550:	4b88      	ldr	r3, [pc, #544]	; (e774 <LORAWAN_GetAttr+0x2bc>)
    e552:	201d      	movs	r0, #29
    e554:	4798      	blx	r3
    e556:	4b85      	ldr	r3, [pc, #532]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e558:	a902      	add	r1, sp, #8
    e55a:	33f4      	adds	r3, #244	; 0xf4
    e55c:	881b      	ldrh	r3, [r3, #0]
    e55e:	2208      	movs	r2, #8
    e560:	808b      	strh	r3, [r1, #4]
    e562:	466b      	mov	r3, sp
    e564:	791b      	ldrb	r3, [r3, #4]
    e566:	718b      	strb	r3, [r1, #6]
    e568:	466b      	mov	r3, sp
    e56a:	881b      	ldrh	r3, [r3, #0]
    e56c:	800b      	strh	r3, [r1, #0]
    e56e:	466b      	mov	r3, sp
    e570:	885b      	ldrh	r3, [r3, #2]
    e572:	804b      	strh	r3, [r1, #2]
    e574:	466b      	mov	r3, sp
    e576:	795b      	ldrb	r3, [r3, #5]
    e578:	71cb      	strb	r3, [r1, #7]
    e57a:	e7e3      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e57c:	497b      	ldr	r1, [pc, #492]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e57e:	2208      	movs	r2, #8
    e580:	3135      	adds	r1, #53	; 0x35
    e582:	e7df      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e584:	4b79      	ldr	r3, [pc, #484]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e586:	681a      	ldr	r2, [r3, #0]
    e588:	791b      	ldrb	r3, [r3, #4]
    e58a:	0a12      	lsrs	r2, r2, #8
    e58c:	061b      	lsls	r3, r3, #24
    e58e:	4313      	orrs	r3, r2
    e590:	6023      	str	r3, [r4, #0]
    e592:	e7da      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e594:	4975      	ldr	r1, [pc, #468]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e596:	2210      	movs	r2, #16
    e598:	3105      	adds	r1, #5
    e59a:	e7d3      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e59c:	4973      	ldr	r1, [pc, #460]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e59e:	2210      	movs	r2, #16
    e5a0:	3115      	adds	r1, #21
    e5a2:	e7cf      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e5a4:	4971      	ldr	r1, [pc, #452]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5a6:	2210      	movs	r2, #16
    e5a8:	3125      	adds	r1, #37	; 0x25
    e5aa:	e7cb      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e5ac:	4b6f      	ldr	r3, [pc, #444]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5ae:	335c      	adds	r3, #92	; 0x5c
    e5b0:	781b      	ldrb	r3, [r3, #0]
    e5b2:	069b      	lsls	r3, r3, #26
    e5b4:	e038      	b.n	e628 <LORAWAN_GetAttr+0x170>
    e5b6:	4b6d      	ldr	r3, [pc, #436]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5b8:	33bf      	adds	r3, #191	; 0xbf
    e5ba:	781b      	ldrb	r3, [r3, #0]
    e5bc:	e01c      	b.n	e5f8 <LORAWAN_GetAttr+0x140>
    e5be:	4b6b      	ldr	r3, [pc, #428]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5c0:	33c1      	adds	r3, #193	; 0xc1
    e5c2:	e7fa      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e5c4:	4b69      	ldr	r3, [pc, #420]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5c6:	33d7      	adds	r3, #215	; 0xd7
    e5c8:	e7f7      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e5ca:	4b68      	ldr	r3, [pc, #416]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    e5ce:	e7df      	b.n	e590 <LORAWAN_GetAttr+0xd8>
    e5d0:	4b66      	ldr	r3, [pc, #408]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    e5d4:	e7dc      	b.n	e590 <LORAWAN_GetAttr+0xd8>
    e5d6:	4b65      	ldr	r3, [pc, #404]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5d8:	33a8      	adds	r3, #168	; 0xa8
    e5da:	881b      	ldrh	r3, [r3, #0]
    e5dc:	8023      	strh	r3, [r4, #0]
    e5de:	e7b4      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e5e0:	4b62      	ldr	r3, [pc, #392]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5e2:	33aa      	adds	r3, #170	; 0xaa
    e5e4:	e7f9      	b.n	e5da <LORAWAN_GetAttr+0x122>
    e5e6:	4b61      	ldr	r3, [pc, #388]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5e8:	33ac      	adds	r3, #172	; 0xac
    e5ea:	e7f6      	b.n	e5da <LORAWAN_GetAttr+0x122>
    e5ec:	4b5f      	ldr	r3, [pc, #380]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5ee:	33ae      	adds	r3, #174	; 0xae
    e5f0:	e7f3      	b.n	e5da <LORAWAN_GetAttr+0x122>
    e5f2:	4b5e      	ldr	r3, [pc, #376]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5f4:	33b0      	adds	r3, #176	; 0xb0
    e5f6:	881b      	ldrh	r3, [r3, #0]
    e5f8:	7023      	strb	r3, [r4, #0]
    e5fa:	e7a6      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e5fc:	4b5b      	ldr	r3, [pc, #364]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e5fe:	33b4      	adds	r3, #180	; 0xb4
    e600:	e7db      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e602:	4b5a      	ldr	r3, [pc, #360]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e604:	33b5      	adds	r3, #181	; 0xb5
    e606:	e7d8      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e608:	4b58      	ldr	r3, [pc, #352]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e60a:	33b2      	adds	r3, #178	; 0xb2
    e60c:	e7e5      	b.n	e5da <LORAWAN_GetAttr+0x122>
    e60e:	4b57      	ldr	r3, [pc, #348]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e610:	33ba      	adds	r3, #186	; 0xba
    e612:	e7d2      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e614:	4b55      	ldr	r3, [pc, #340]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e616:	33b9      	adds	r3, #185	; 0xb9
    e618:	e7cf      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e61a:	4b54      	ldr	r3, [pc, #336]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e61c:	33c0      	adds	r3, #192	; 0xc0
    e61e:	e7cc      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e620:	4b52      	ldr	r3, [pc, #328]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e622:	335c      	adds	r3, #92	; 0x5c
    e624:	781b      	ldrb	r3, [r3, #0]
    e626:	06db      	lsls	r3, r3, #27
    e628:	0fdb      	lsrs	r3, r3, #31
    e62a:	e7e5      	b.n	e5f8 <LORAWAN_GetAttr+0x140>
    e62c:	4b4f      	ldr	r3, [pc, #316]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e62e:	33be      	adds	r3, #190	; 0xbe
    e630:	e7c3      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e632:	4b4e      	ldr	r3, [pc, #312]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e634:	33bd      	adds	r3, #189	; 0xbd
    e636:	e7c0      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e638:	4b4c      	ldr	r3, [pc, #304]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e63a:	3370      	adds	r3, #112	; 0x70
    e63c:	781b      	ldrb	r3, [r3, #0]
    e63e:	e7cd      	b.n	e5dc <LORAWAN_GetAttr+0x124>
    e640:	4b4a      	ldr	r3, [pc, #296]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
    e644:	e7a4      	b.n	e590 <LORAWAN_GetAttr+0xd8>
    e646:	2016      	movs	r0, #22
    e648:	781b      	ldrb	r3, [r3, #0]
    e64a:	a902      	add	r1, sp, #8
    e64c:	700b      	strb	r3, [r1, #0]
    e64e:	4b4a      	ldr	r3, [pc, #296]	; (e778 <LORAWAN_GetAttr+0x2c0>)
    e650:	4798      	blx	r3
    e652:	e77a      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e654:	781b      	ldrb	r3, [r3, #0]
    e656:	a902      	add	r1, sp, #8
    e658:	700b      	strb	r3, [r1, #0]
    e65a:	2012      	movs	r0, #18
    e65c:	e7f7      	b.n	e64e <LORAWAN_GetAttr+0x196>
    e65e:	781b      	ldrb	r3, [r3, #0]
    e660:	a902      	add	r1, sp, #8
    e662:	700b      	strb	r3, [r1, #0]
    e664:	2000      	movs	r0, #0
    e666:	e7f2      	b.n	e64e <LORAWAN_GetAttr+0x196>
    e668:	0010      	movs	r0, r2
    e66a:	4b44      	ldr	r3, [pc, #272]	; (e77c <LORAWAN_GetAttr+0x2c4>)
    e66c:	4798      	blx	r3
    e66e:	e76c      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e670:	4b3e      	ldr	r3, [pc, #248]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e672:	33d6      	adds	r3, #214	; 0xd6
    e674:	e7a1      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e676:	4b3d      	ldr	r3, [pc, #244]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e678:	33d4      	adds	r3, #212	; 0xd4
    e67a:	e79e      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e67c:	4b3b      	ldr	r3, [pc, #236]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e67e:	33d5      	adds	r3, #213	; 0xd5
    e680:	e79b      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e682:	21fa      	movs	r1, #250	; 0xfa
    e684:	4b39      	ldr	r3, [pc, #228]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e686:	0089      	lsls	r1, r1, #2
    e688:	6e98      	ldr	r0, [r3, #104]	; 0x68
    e68a:	4b3d      	ldr	r3, [pc, #244]	; (e780 <LORAWAN_GetAttr+0x2c8>)
    e68c:	4798      	blx	r3
    e68e:	8020      	strh	r0, [r4, #0]
    e690:	e75b      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e692:	780a      	ldrb	r2, [r1, #0]
    e694:	200a      	movs	r0, #10
    e696:	2a03      	cmp	r2, #3
    e698:	d900      	bls.n	e69c <LORAWAN_GetAttr+0x1e4>
    e69a:	e74e      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e69c:	4b33      	ldr	r3, [pc, #204]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e69e:	33ff      	adds	r3, #255	; 0xff
    e6a0:	7899      	ldrb	r1, [r3, #2]
    e6a2:	2301      	movs	r3, #1
    e6a4:	4093      	lsls	r3, r2
    e6a6:	400b      	ands	r3, r1
    e6a8:	1e5a      	subs	r2, r3, #1
    e6aa:	4193      	sbcs	r3, r2
    e6ac:	7023      	strb	r3, [r4, #0]
    e6ae:	3802      	subs	r0, #2
    e6b0:	e743      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e6b2:	780b      	ldrb	r3, [r1, #0]
    e6b4:	200a      	movs	r0, #10
    e6b6:	2b03      	cmp	r3, #3
    e6b8:	d900      	bls.n	e6bc <LORAWAN_GetAttr+0x204>
    e6ba:	e73e      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e6bc:	212c      	movs	r1, #44	; 0x2c
    e6be:	4359      	muls	r1, r3
    e6c0:	3119      	adds	r1, #25
    e6c2:	4b2a      	ldr	r3, [pc, #168]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e6c4:	31ff      	adds	r1, #255	; 0xff
    e6c6:	18c9      	adds	r1, r1, r3
    e6c8:	2210      	movs	r2, #16
    e6ca:	e73b      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e6cc:	780b      	ldrb	r3, [r1, #0]
    e6ce:	200a      	movs	r0, #10
    e6d0:	2b03      	cmp	r3, #3
    e6d2:	d900      	bls.n	e6d6 <LORAWAN_GetAttr+0x21e>
    e6d4:	e731      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e6d6:	212c      	movs	r1, #44	; 0x2c
    e6d8:	4359      	muls	r1, r3
    e6da:	3109      	adds	r1, #9
    e6dc:	e7f1      	b.n	e6c2 <LORAWAN_GetAttr+0x20a>
    e6de:	780b      	ldrb	r3, [r1, #0]
    e6e0:	200a      	movs	r0, #10
    e6e2:	2b03      	cmp	r3, #3
    e6e4:	d900      	bls.n	e6e8 <LORAWAN_GetAttr+0x230>
    e6e6:	e728      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e6e8:	212c      	movs	r1, #44	; 0x2c
    e6ea:	4359      	muls	r1, r3
    e6ec:	4b1f      	ldr	r3, [pc, #124]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e6ee:	3105      	adds	r1, #5
    e6f0:	31ff      	adds	r1, #255	; 0xff
    e6f2:	18c9      	adds	r1, r1, r3
    e6f4:	2204      	movs	r2, #4
    e6f6:	e725      	b.n	e544 <LORAWAN_GetAttr+0x8c>
    e6f8:	780a      	ldrb	r2, [r1, #0]
    e6fa:	200a      	movs	r0, #10
    e6fc:	2a03      	cmp	r2, #3
    e6fe:	d900      	bls.n	e702 <LORAWAN_GetAttr+0x24a>
    e700:	e71b      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e702:	232c      	movs	r3, #44	; 0x2c
    e704:	435a      	muls	r2, r3
    e706:	4b19      	ldr	r3, [pc, #100]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e708:	189b      	adds	r3, r3, r2
    e70a:	33fe      	adds	r3, #254	; 0xfe
    e70c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    e70e:	8023      	strh	r3, [r4, #0]
    e710:	e7cd      	b.n	e6ae <LORAWAN_GetAttr+0x1f6>
    e712:	0010      	movs	r0, r2
    e714:	4b1b      	ldr	r3, [pc, #108]	; (e784 <LORAWAN_GetAttr+0x2cc>)
    e716:	4798      	blx	r3
    e718:	e70f      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e71a:	0011      	movs	r1, r2
    e71c:	4b15      	ldr	r3, [pc, #84]	; (e774 <LORAWAN_GetAttr+0x2bc>)
    e71e:	201f      	movs	r0, #31
    e720:	4798      	blx	r3
    e722:	e712      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e724:	4b11      	ldr	r3, [pc, #68]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e726:	336c      	adds	r3, #108	; 0x6c
    e728:	781b      	ldrb	r3, [r3, #0]
    e72a:	071b      	lsls	r3, r3, #28
    e72c:	e77c      	b.n	e628 <LORAWAN_GetAttr+0x170>
    e72e:	4b0f      	ldr	r3, [pc, #60]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e730:	336c      	adds	r3, #108	; 0x6c
    e732:	781b      	ldrb	r3, [r3, #0]
    e734:	07db      	lsls	r3, r3, #31
    e736:	e777      	b.n	e628 <LORAWAN_GetAttr+0x170>
    e738:	2031      	movs	r0, #49	; 0x31
    e73a:	4b0f      	ldr	r3, [pc, #60]	; (e778 <LORAWAN_GetAttr+0x2c0>)
    e73c:	4798      	blx	r3
    e73e:	e6fc      	b.n	e53a <LORAWAN_GetAttr+0x82>
    e740:	4911      	ldr	r1, [pc, #68]	; (e788 <LORAWAN_GetAttr+0x2d0>)
    e742:	2026      	movs	r0, #38	; 0x26
    e744:	e7f9      	b.n	e73a <LORAWAN_GetAttr+0x282>
    e746:	4b09      	ldr	r3, [pc, #36]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e748:	33bc      	adds	r3, #188	; 0xbc
    e74a:	e736      	b.n	e5ba <LORAWAN_GetAttr+0x102>
    e74c:	4b0f      	ldr	r3, [pc, #60]	; (e78c <LORAWAN_GetAttr+0x2d4>)
    e74e:	4798      	blx	r3
    e750:	4b0f      	ldr	r3, [pc, #60]	; (e790 <LORAWAN_GetAttr+0x2d8>)
    e752:	0005      	movs	r5, r0
    e754:	4798      	blx	r3
    e756:	3808      	subs	r0, #8
    e758:	1b40      	subs	r0, r0, r5
    e75a:	7020      	strb	r0, [r4, #0]
    e75c:	e6f5      	b.n	e54a <LORAWAN_GetAttr+0x92>
    e75e:	2100      	movs	r1, #0
    e760:	2020      	movs	r0, #32
    e762:	e7ea      	b.n	e73a <LORAWAN_GetAttr+0x282>
    e764:	4b01      	ldr	r3, [pc, #4]	; (e76c <LORAWAN_GetAttr+0x2b4>)
    e766:	33f0      	adds	r3, #240	; 0xf0
    e768:	e722      	b.n	e5b0 <LORAWAN_GetAttr+0xf8>
    e76a:	46c0      	nop			; (mov r8, r8)
    e76c:	200023e4 	.word	0x200023e4
    e770:	00015f45 	.word	0x00015f45
    e774:	00011071 	.word	0x00011071
    e778:	0000aa71 	.word	0x0000aa71
    e77c:	0000e499 	.word	0x0000e499
    e780:	00012d11 	.word	0x00012d11
    e784:	0000acd5 	.word	0x0000acd5
    e788:	200024a3 	.word	0x200024a3
    e78c:	0000cb75 	.word	0x0000cb75
    e790:	0000cc1d 	.word	0x0000cc1d

0000e794 <LORAWAN_TxDone>:
    e794:	b5f0      	push	{r4, r5, r6, r7, lr}
    e796:	6843      	ldr	r3, [r0, #4]
    e798:	b08f      	sub	sp, #60	; 0x3c
    e79a:	ad07      	add	r5, sp, #28
    e79c:	7804      	ldrb	r4, [r0, #0]
    e79e:	9302      	str	r3, [sp, #8]
    e7a0:	002a      	movs	r2, r5
    e7a2:	4b64      	ldr	r3, [pc, #400]	; (e934 <LORAWAN_TxDone+0x1a0>)
    e7a4:	2100      	movs	r1, #0
    e7a6:	2027      	movs	r0, #39	; 0x27
    e7a8:	4798      	blx	r3
    e7aa:	4f63      	ldr	r7, [pc, #396]	; (e938 <LORAWAN_TxDone+0x1a4>)
    e7ac:	003b      	movs	r3, r7
    e7ae:	335c      	adds	r3, #92	; 0x5c
    e7b0:	781b      	ldrb	r3, [r3, #0]
    e7b2:	2b7f      	cmp	r3, #127	; 0x7f
    e7b4:	d900      	bls.n	e7b8 <LORAWAN_TxDone+0x24>
    e7b6:	e247      	b.n	ec48 <LORAWAN_TxDone+0x4b4>
    e7b8:	4b60      	ldr	r3, [pc, #384]	; (e93c <LORAWAN_TxDone+0x1a8>)
    e7ba:	201b      	movs	r0, #27
    e7bc:	781a      	ldrb	r2, [r3, #0]
    e7be:	2a04      	cmp	r2, #4
    e7c0:	d100      	bne.n	e7c4 <LORAWAN_TxDone+0x30>
    e7c2:	e0b2      	b.n	e92a <LORAWAN_TxDone+0x196>
    e7c4:	781b      	ldrb	r3, [r3, #0]
    e7c6:	2b02      	cmp	r3, #2
    e7c8:	d120      	bne.n	e80c <LORAWAN_TxDone+0x78>
    e7ca:	33b5      	adds	r3, #181	; 0xb5
    e7cc:	33ff      	adds	r3, #255	; 0xff
    e7ce:	5cfa      	ldrb	r2, [r7, r3]
    e7d0:	2a00      	cmp	r2, #0
    e7d2:	d005      	beq.n	e7e0 <LORAWAN_TxDone+0x4c>
    e7d4:	2200      	movs	r2, #0
    e7d6:	495a      	ldr	r1, [pc, #360]	; (e940 <LORAWAN_TxDone+0x1ac>)
    e7d8:	54fa      	strb	r2, [r7, r3]
    e7da:	200b      	movs	r0, #11
    e7dc:	4b59      	ldr	r3, [pc, #356]	; (e944 <LORAWAN_TxDone+0x1b0>)
    e7de:	4798      	blx	r3
    e7e0:	2c07      	cmp	r4, #7
    e7e2:	d000      	beq.n	e7e6 <LORAWAN_TxDone+0x52>
    e7e4:	e0c8      	b.n	e978 <LORAWAN_TxDone+0x1e4>
    e7e6:	79eb      	ldrb	r3, [r5, #7]
    e7e8:	2b00      	cmp	r3, #0
    e7ea:	d00f      	beq.n	e80c <LORAWAN_TxDone+0x78>
    e7ec:	003b      	movs	r3, r7
    e7ee:	336c      	adds	r3, #108	; 0x6c
    e7f0:	7818      	ldrb	r0, [r3, #0]
    e7f2:	003e      	movs	r6, r7
    e7f4:	2304      	movs	r3, #4
    e7f6:	36f2      	adds	r6, #242	; 0xf2
    e7f8:	4018      	ands	r0, r3
    e7fa:	4d53      	ldr	r5, [pc, #332]	; (e948 <LORAWAN_TxDone+0x1b4>)
    e7fc:	d008      	beq.n	e810 <LORAWAN_TxDone+0x7c>
    e7fe:	2000      	movs	r0, #0
    e800:	2109      	movs	r1, #9
    e802:	8030      	strh	r0, [r6, #0]
    e804:	47a8      	blx	r5
    e806:	0020      	movs	r0, r4
    e808:	4b50      	ldr	r3, [pc, #320]	; (e94c <LORAWAN_TxDone+0x1b8>)
    e80a:	4798      	blx	r3
    e80c:	b00f      	add	sp, #60	; 0x3c
    e80e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e810:	8833      	ldrh	r3, [r6, #0]
    e812:	2109      	movs	r1, #9
    e814:	3301      	adds	r3, #1
    e816:	8033      	strh	r3, [r6, #0]
    e818:	47a8      	blx	r5
    e81a:	003b      	movs	r3, r7
    e81c:	33f4      	adds	r3, #244	; 0xf4
    e81e:	881b      	ldrh	r3, [r3, #0]
    e820:	4a4b      	ldr	r2, [pc, #300]	; (e950 <LORAWAN_TxDone+0x1bc>)
    e822:	4293      	cmp	r3, r2
    e824:	d002      	beq.n	e82c <LORAWAN_TxDone+0x98>
    e826:	8832      	ldrh	r2, [r6, #0]
    e828:	429a      	cmp	r2, r3
    e82a:	d266      	bcs.n	e8fa <LORAWAN_TxDone+0x166>
    e82c:	23df      	movs	r3, #223	; 0xdf
    e82e:	005b      	lsls	r3, r3, #1
    e830:	5cfb      	ldrb	r3, [r7, r3]
    e832:	2b00      	cmp	r3, #0
    e834:	d061      	beq.n	e8fa <LORAWAN_TxDone+0x166>
    e836:	2601      	movs	r6, #1
    e838:	003b      	movs	r3, r7
    e83a:	a905      	add	r1, sp, #20
    e83c:	700e      	strb	r6, [r1, #0]
    e83e:	33c1      	adds	r3, #193	; 0xc1
    e840:	781b      	ldrb	r3, [r3, #0]
    e842:	aa0b      	add	r2, sp, #44	; 0x2c
    e844:	704b      	strb	r3, [r1, #1]
    e846:	003b      	movs	r3, r7
    e848:	33bf      	adds	r3, #191	; 0xbf
    e84a:	781b      	ldrb	r3, [r3, #0]
    e84c:	202f      	movs	r0, #47	; 0x2f
    e84e:	708b      	strb	r3, [r1, #2]
    e850:	4b40      	ldr	r3, [pc, #256]	; (e954 <LORAWAN_TxDone+0x1c0>)
    e852:	4798      	blx	r3
    e854:	2808      	cmp	r0, #8
    e856:	d135      	bne.n	e8c4 <LORAWAN_TxDone+0x130>
    e858:	a806      	add	r0, sp, #24
    e85a:	4b3f      	ldr	r3, [pc, #252]	; (e958 <LORAWAN_TxDone+0x1c4>)
    e85c:	7006      	strb	r6, [r0, #0]
    e85e:	4798      	blx	r3
    e860:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e862:	990c      	ldr	r1, [sp, #48]	; 0x30
    e864:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    e866:	4b3d      	ldr	r3, [pc, #244]	; (e95c <LORAWAN_TxDone+0x1c8>)
    e868:	4798      	blx	r3
    e86a:	003b      	movs	r3, r7
    e86c:	33a6      	adds	r3, #166	; 0xa6
    e86e:	881b      	ldrh	r3, [r3, #0]
    e870:	a809      	add	r0, sp, #36	; 0x24
    e872:	7003      	strb	r3, [r0, #0]
    e874:	4b3a      	ldr	r3, [pc, #232]	; (e960 <LORAWAN_TxDone+0x1cc>)
    e876:	6043      	str	r3, [r0, #4]
    e878:	4b3a      	ldr	r3, [pc, #232]	; (e964 <LORAWAN_TxDone+0x1d0>)
    e87a:	4798      	blx	r3
    e87c:	1e04      	subs	r4, r0, #0
    e87e:	d108      	bne.n	e892 <LORAWAN_TxDone+0xfe>
    e880:	220e      	movs	r2, #14
    e882:	375c      	adds	r7, #92	; 0x5c
    e884:	783b      	ldrb	r3, [r7, #0]
    e886:	4393      	bics	r3, r2
    e888:	001a      	movs	r2, r3
    e88a:	2302      	movs	r3, #2
    e88c:	4313      	orrs	r3, r2
    e88e:	703b      	strb	r3, [r7, #0]
    e890:	e7bc      	b.n	e80c <LORAWAN_TxDone+0x78>
    e892:	003b      	movs	r3, r7
    e894:	336c      	adds	r3, #108	; 0x6c
    e896:	7818      	ldrb	r0, [r3, #0]
    e898:	003b      	movs	r3, r7
    e89a:	4030      	ands	r0, r6
    e89c:	33f2      	adds	r3, #242	; 0xf2
    e89e:	4e32      	ldr	r6, [pc, #200]	; (e968 <LORAWAN_TxDone+0x1d4>)
    e8a0:	4f32      	ldr	r7, [pc, #200]	; (e96c <LORAWAN_TxDone+0x1d8>)
    e8a2:	2800      	cmp	r0, #0
    e8a4:	d009      	beq.n	e8ba <LORAWAN_TxDone+0x126>
    e8a6:	2000      	movs	r0, #0
    e8a8:	2109      	movs	r1, #9
    e8aa:	8018      	strh	r0, [r3, #0]
    e8ac:	47a8      	blx	r5
    e8ae:	4b30      	ldr	r3, [pc, #192]	; (e970 <LORAWAN_TxDone+0x1dc>)
    e8b0:	4798      	blx	r3
    e8b2:	47b8      	blx	r7
    e8b4:	0020      	movs	r0, r4
    e8b6:	47b0      	blx	r6
    e8b8:	e7a8      	b.n	e80c <LORAWAN_TxDone+0x78>
    e8ba:	2109      	movs	r1, #9
    e8bc:	8018      	strh	r0, [r3, #0]
    e8be:	47a8      	blx	r5
    e8c0:	4b2c      	ldr	r3, [pc, #176]	; (e974 <LORAWAN_TxDone+0x1e0>)
    e8c2:	e7f5      	b.n	e8b0 <LORAWAN_TxDone+0x11c>
    e8c4:	003b      	movs	r3, r7
    e8c6:	336c      	adds	r3, #108	; 0x6c
    e8c8:	7818      	ldrb	r0, [r3, #0]
    e8ca:	003b      	movs	r3, r7
    e8cc:	4006      	ands	r6, r0
    e8ce:	4c26      	ldr	r4, [pc, #152]	; (e968 <LORAWAN_TxDone+0x1d4>)
    e8d0:	33f2      	adds	r3, #242	; 0xf2
    e8d2:	4f26      	ldr	r7, [pc, #152]	; (e96c <LORAWAN_TxDone+0x1d8>)
    e8d4:	2e00      	cmp	r6, #0
    e8d6:	d00a      	beq.n	e8ee <LORAWAN_TxDone+0x15a>
    e8d8:	2600      	movs	r6, #0
    e8da:	2109      	movs	r1, #9
    e8dc:	0030      	movs	r0, r6
    e8de:	801e      	strh	r6, [r3, #0]
    e8e0:	47a8      	blx	r5
    e8e2:	4b23      	ldr	r3, [pc, #140]	; (e970 <LORAWAN_TxDone+0x1dc>)
    e8e4:	4798      	blx	r3
    e8e6:	47b8      	blx	r7
    e8e8:	0030      	movs	r0, r6
    e8ea:	47a0      	blx	r4
    e8ec:	e78e      	b.n	e80c <LORAWAN_TxDone+0x78>
    e8ee:	2109      	movs	r1, #9
    e8f0:	0030      	movs	r0, r6
    e8f2:	801e      	strh	r6, [r3, #0]
    e8f4:	47a8      	blx	r5
    e8f6:	4b1f      	ldr	r3, [pc, #124]	; (e974 <LORAWAN_TxDone+0x1e0>)
    e8f8:	e7f4      	b.n	e8e4 <LORAWAN_TxDone+0x150>
    e8fa:	003b      	movs	r3, r7
    e8fc:	2000      	movs	r0, #0
    e8fe:	33f2      	adds	r3, #242	; 0xf2
    e900:	2109      	movs	r1, #9
    e902:	8018      	strh	r0, [r3, #0]
    e904:	47a8      	blx	r5
    e906:	003a      	movs	r2, r7
    e908:	210e      	movs	r1, #14
    e90a:	325c      	adds	r2, #92	; 0x5c
    e90c:	7813      	ldrb	r3, [r2, #0]
    e90e:	376c      	adds	r7, #108	; 0x6c
    e910:	438b      	bics	r3, r1
    e912:	7013      	strb	r3, [r2, #0]
    e914:	2220      	movs	r2, #32
    e916:	783b      	ldrb	r3, [r7, #0]
    e918:	4c14      	ldr	r4, [pc, #80]	; (e96c <LORAWAN_TxDone+0x1d8>)
    e91a:	4393      	bics	r3, r2
    e91c:	703b      	strb	r3, [r7, #0]
    e91e:	07db      	lsls	r3, r3, #31
    e920:	d505      	bpl.n	e92e <LORAWAN_TxDone+0x19a>
    e922:	4b13      	ldr	r3, [pc, #76]	; (e970 <LORAWAN_TxDone+0x1dc>)
    e924:	4798      	blx	r3
    e926:	47a0      	blx	r4
    e928:	2007      	movs	r0, #7
    e92a:	4b0f      	ldr	r3, [pc, #60]	; (e968 <LORAWAN_TxDone+0x1d4>)
    e92c:	e76d      	b.n	e80a <LORAWAN_TxDone+0x76>
    e92e:	4b11      	ldr	r3, [pc, #68]	; (e974 <LORAWAN_TxDone+0x1e0>)
    e930:	e7f8      	b.n	e924 <LORAWAN_TxDone+0x190>
    e932:	46c0      	nop			; (mov r8, r8)
    e934:	0000e4b9 	.word	0x0000e4b9
    e938:	200023e4 	.word	0x200023e4
    e93c:	200025a4 	.word	0x200025a4
    e940:	20002599 	.word	0x20002599
    e944:	0001115d 	.word	0x0001115d
    e948:	0000af89 	.word	0x0000af89
    e94c:	0000d559 	.word	0x0000d559
    e950:	0000ffff 	.word	0x0000ffff
    e954:	0000aa71 	.word	0x0000aa71
    e958:	00012371 	.word	0x00012371
    e95c:	0000da91 	.word	0x0000da91
    e960:	200025b5 	.word	0x200025b5
    e964:	00011aad 	.word	0x00011aad
    e968:	0000e2d9 	.word	0x0000e2d9
    e96c:	0000cb31 	.word	0x0000cb31
    e970:	0000d505 	.word	0x0000d505
    e974:	0000d535 	.word	0x0000d535
    e978:	2c00      	cmp	r4, #0
    e97a:	d000      	beq.n	e97e <LORAWAN_TxDone+0x1ea>
    e97c:	e746      	b.n	e80c <LORAWAN_TxDone+0x78>
    e97e:	003b      	movs	r3, r7
    e980:	33dc      	adds	r3, #220	; 0xdc
    e982:	681b      	ldr	r3, [r3, #0]
    e984:	003d      	movs	r5, r7
    e986:	9303      	str	r3, [sp, #12]
    e988:	003b      	movs	r3, r7
    e98a:	33f2      	adds	r3, #242	; 0xf2
    e98c:	801c      	strh	r4, [r3, #0]
    e98e:	2109      	movs	r1, #9
    e990:	4bbe      	ldr	r3, [pc, #760]	; (ec8c <LORAWAN_TxDone+0x4f8>)
    e992:	0020      	movs	r0, r4
    e994:	35bb      	adds	r5, #187	; 0xbb
    e996:	4798      	blx	r3
    e998:	782b      	ldrb	r3, [r5, #0]
    e99a:	2b00      	cmp	r3, #0
    e99c:	d000      	beq.n	e9a0 <LORAWAN_TxDone+0x20c>
    e99e:	e103      	b.n	eba8 <LORAWAN_TxDone+0x414>
    e9a0:	003e      	movs	r6, r7
    e9a2:	36bc      	adds	r6, #188	; 0xbc
    e9a4:	7832      	ldrb	r2, [r6, #0]
    e9a6:	2a00      	cmp	r2, #0
    e9a8:	d000      	beq.n	e9ac <LORAWAN_TxDone+0x218>
    e9aa:	e0fd      	b.n	eba8 <LORAWAN_TxDone+0x414>
    e9ac:	4bb8      	ldr	r3, [pc, #736]	; (ec90 <LORAWAN_TxDone+0x4fc>)
    e9ae:	781b      	ldrb	r3, [r3, #0]
    e9b0:	07db      	lsls	r3, r3, #31
    e9b2:	d513      	bpl.n	e9dc <LORAWAN_TxDone+0x248>
    e9b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    e9b6:	2116      	movs	r1, #22
    e9b8:	3301      	adds	r3, #1
    e9ba:	663b      	str	r3, [r7, #96]	; 0x60
    e9bc:	0020      	movs	r0, r4
    e9be:	4bb3      	ldr	r3, [pc, #716]	; (ec8c <LORAWAN_TxDone+0x4f8>)
    e9c0:	4798      	blx	r3
    e9c2:	9b03      	ldr	r3, [sp, #12]
    e9c4:	781b      	ldrb	r3, [r3, #0]
    e9c6:	2b01      	cmp	r3, #1
    e9c8:	d000      	beq.n	e9cc <LORAWAN_TxDone+0x238>
    e9ca:	e0e9      	b.n	eba0 <LORAWAN_TxDone+0x40c>
    e9cc:	003a      	movs	r2, r7
    e9ce:	326c      	adds	r2, #108	; 0x6c
    e9d0:	7811      	ldrb	r1, [r2, #0]
    e9d2:	430b      	orrs	r3, r1
    e9d4:	7013      	strb	r3, [r2, #0]
    e9d6:	7833      	ldrb	r3, [r6, #0]
    e9d8:	3301      	adds	r3, #1
    e9da:	7033      	strb	r3, [r6, #0]
    e9dc:	003b      	movs	r3, r7
    e9de:	2200      	movs	r2, #0
    e9e0:	33d0      	adds	r3, #208	; 0xd0
    e9e2:	701a      	strb	r2, [r3, #0]
    e9e4:	003a      	movs	r2, r7
    e9e6:	210e      	movs	r1, #14
    e9e8:	2504      	movs	r5, #4
    e9ea:	325c      	adds	r2, #92	; 0x5c
    e9ec:	7813      	ldrb	r3, [r2, #0]
    e9ee:	003e      	movs	r6, r7
    e9f0:	438b      	bics	r3, r1
    e9f2:	432b      	orrs	r3, r5
    e9f4:	7013      	strb	r3, [r2, #0]
    e9f6:	003b      	movs	r3, r7
    e9f8:	33bf      	adds	r3, #191	; 0xbf
    e9fa:	781b      	ldrb	r3, [r3, #0]
    e9fc:	a906      	add	r1, sp, #24
    e9fe:	708b      	strb	r3, [r1, #2]
    ea00:	003b      	movs	r3, r7
    ea02:	33ce      	adds	r3, #206	; 0xce
    ea04:	781b      	ldrb	r3, [r3, #0]
    ea06:	366c      	adds	r6, #108	; 0x6c
    ea08:	704b      	strb	r3, [r1, #1]
    ea0a:	7833      	ldrb	r3, [r6, #0]
    ea0c:	ac09      	add	r4, sp, #36	; 0x24
    ea0e:	075b      	lsls	r3, r3, #29
    ea10:	0fdb      	lsrs	r3, r3, #31
    ea12:	700b      	strb	r3, [r1, #0]
    ea14:	0022      	movs	r2, r4
    ea16:	4b9f      	ldr	r3, [pc, #636]	; (ec94 <LORAWAN_TxDone+0x500>)
    ea18:	2019      	movs	r0, #25
    ea1a:	4798      	blx	r3
    ea1c:	7833      	ldrb	r3, [r6, #0]
    ea1e:	422b      	tst	r3, r5
    ea20:	d100      	bne.n	ea24 <LORAWAN_TxDone+0x290>
    ea22:	e0d7      	b.n	ebd4 <LORAWAN_TxDone+0x440>
    ea24:	2300      	movs	r3, #0
    ea26:	ae0b      	add	r6, sp, #44	; 0x2c
    ea28:	7033      	strb	r3, [r6, #0]
    ea2a:	0032      	movs	r2, r6
    ea2c:	2100      	movs	r1, #0
    ea2e:	2009      	movs	r0, #9
    ea30:	4b98      	ldr	r3, [pc, #608]	; (ec94 <LORAWAN_TxDone+0x500>)
    ea32:	4798      	blx	r3
    ea34:	0031      	movs	r1, r6
    ea36:	aa05      	add	r2, sp, #20
    ea38:	0028      	movs	r0, r5
    ea3a:	4b96      	ldr	r3, [pc, #600]	; (ec94 <LORAWAN_TxDone+0x500>)
    ea3c:	4798      	blx	r3
    ea3e:	0039      	movs	r1, r7
    ea40:	7923      	ldrb	r3, [r4, #4]
    ea42:	3149      	adds	r1, #73	; 0x49
    ea44:	700b      	strb	r3, [r1, #0]
    ea46:	003b      	movs	r3, r7
    ea48:	260b      	movs	r6, #11
    ea4a:	7822      	ldrb	r2, [r4, #0]
    ea4c:	3345      	adds	r3, #69	; 0x45
    ea4e:	701a      	strb	r2, [r3, #0]
    ea50:	7862      	ldrb	r2, [r4, #1]
    ea52:	2004      	movs	r0, #4
    ea54:	705a      	strb	r2, [r3, #1]
    ea56:	78a2      	ldrb	r2, [r4, #2]
    ea58:	2500      	movs	r5, #0
    ea5a:	709a      	strb	r2, [r3, #2]
    ea5c:	78e2      	ldrb	r2, [r4, #3]
    ea5e:	70da      	strb	r2, [r3, #3]
    ea60:	ab02      	add	r3, sp, #8
    ea62:	18f6      	adds	r6, r6, r3
    ea64:	0032      	movs	r2, r6
    ea66:	4b8b      	ldr	r3, [pc, #556]	; (ec94 <LORAWAN_TxDone+0x500>)
    ea68:	4798      	blx	r3
    ea6a:	003b      	movs	r3, r7
    ea6c:	336c      	adds	r3, #108	; 0x6c
    ea6e:	781c      	ldrb	r4, [r3, #0]
    ea70:	2304      	movs	r3, #4
    ea72:	401c      	ands	r4, r3
    ea74:	2300      	movs	r3, #0
    ea76:	003a      	movs	r2, r7
    ea78:	56f3      	ldrsb	r3, [r6, r3]
    ea7a:	42ac      	cmp	r4, r5
    ea7c:	d100      	bne.n	ea80 <LORAWAN_TxDone+0x2ec>
    ea7e:	e0ac      	b.n	ebda <LORAWAN_TxDone+0x446>
    ea80:	2100      	movs	r1, #0
    ea82:	32ae      	adds	r2, #174	; 0xae
    ea84:	8816      	ldrh	r6, [r2, #0]
    ea86:	aa05      	add	r2, sp, #20
    ea88:	5651      	ldrsb	r1, [r2, r1]
    ea8a:	4c83      	ldr	r4, [pc, #524]	; (ec98 <LORAWAN_TxDone+0x504>)
    ea8c:	1872      	adds	r2, r6, r1
    ea8e:	9203      	str	r2, [sp, #12]
    ea90:	003a      	movs	r2, r7
    ea92:	32ac      	adds	r2, #172	; 0xac
    ea94:	8811      	ldrh	r1, [r2, #0]
    ea96:	26fa      	movs	r6, #250	; 0xfa
    ea98:	18c9      	adds	r1, r1, r3
    ea9a:	23c0      	movs	r3, #192	; 0xc0
    ea9c:	33ff      	adds	r3, #255	; 0xff
    ea9e:	5cfb      	ldrb	r3, [r7, r3]
    eaa0:	00b6      	lsls	r6, r6, #2
    eaa2:	1ac9      	subs	r1, r1, r3
    eaa4:	003b      	movs	r3, r7
    eaa6:	33c2      	adds	r3, #194	; 0xc2
    eaa8:	7818      	ldrb	r0, [r3, #0]
    eaaa:	4371      	muls	r1, r6
    eaac:	4b7b      	ldr	r3, [pc, #492]	; (ec9c <LORAWAN_TxDone+0x508>)
    eaae:	002a      	movs	r2, r5
    eab0:	9500      	str	r5, [sp, #0]
    eab2:	47a0      	blx	r4
    eab4:	23c0      	movs	r3, #192	; 0xc0
    eab6:	33ff      	adds	r3, #255	; 0xff
    eab8:	5cf9      	ldrb	r1, [r7, r3]
    eaba:	9b03      	ldr	r3, [sp, #12]
    eabc:	002a      	movs	r2, r5
    eabe:	1a59      	subs	r1, r3, r1
    eac0:	003b      	movs	r3, r7
    eac2:	33c3      	adds	r3, #195	; 0xc3
    eac4:	7818      	ldrb	r0, [r3, #0]
    eac6:	4371      	muls	r1, r6
    eac8:	4b75      	ldr	r3, [pc, #468]	; (eca0 <LORAWAN_TxDone+0x50c>)
    eaca:	9500      	str	r5, [sp, #0]
    eacc:	47a0      	blx	r4
    eace:	003b      	movs	r3, r7
    ead0:	33f0      	adds	r3, #240	; 0xf0
    ead2:	781b      	ldrb	r3, [r3, #0]
    ead4:	069b      	lsls	r3, r3, #26
    ead6:	d549      	bpl.n	eb6c <LORAWAN_TxDone+0x3d8>
    ead8:	466a      	mov	r2, sp
    eada:	003b      	movs	r3, r7
    eadc:	7a12      	ldrb	r2, [r2, #8]
    eade:	3357      	adds	r3, #87	; 0x57
    eae0:	701a      	strb	r2, [r3, #0]
    eae2:	9a02      	ldr	r2, [sp, #8]
    eae4:	ad0b      	add	r5, sp, #44	; 0x2c
    eae6:	0a12      	lsrs	r2, r2, #8
    eae8:	705a      	strb	r2, [r3, #1]
    eaea:	9a02      	ldr	r2, [sp, #8]
    eaec:	0c12      	lsrs	r2, r2, #16
    eaee:	709a      	strb	r2, [r3, #2]
    eaf0:	9a02      	ldr	r2, [sp, #8]
    eaf2:	0e12      	lsrs	r2, r2, #24
    eaf4:	70da      	strb	r2, [r3, #3]
    eaf6:	003b      	movs	r3, r7
    eaf8:	335b      	adds	r3, #91	; 0x5b
    eafa:	781b      	ldrb	r3, [r3, #0]
    eafc:	2b00      	cmp	r3, #0
    eafe:	d027      	beq.n	eb50 <LORAWAN_TxDone+0x3bc>
    eb00:	003c      	movs	r4, r7
    eb02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    eb04:	344f      	adds	r4, #79	; 0x4f
    eb06:	0216      	lsls	r6, r2, #8
    eb08:	003a      	movs	r2, r7
    eb0a:	7823      	ldrb	r3, [r4, #0]
    eb0c:	3253      	adds	r2, #83	; 0x53
    eb0e:	4333      	orrs	r3, r6
    eb10:	6d7e      	ldr	r6, [r7, #84]	; 0x54
    eb12:	7812      	ldrb	r2, [r2, #0]
    eb14:	0236      	lsls	r6, r6, #8
    eb16:	4316      	orrs	r6, r2
    eb18:	431e      	orrs	r6, r3
    eb1a:	d119      	bne.n	eb50 <LORAWAN_TxDone+0x3bc>
    eb1c:	2301      	movs	r3, #1
    eb1e:	0029      	movs	r1, r5
    eb20:	702b      	strb	r3, [r5, #0]
    eb22:	2021      	movs	r0, #33	; 0x21
    eb24:	4b5f      	ldr	r3, [pc, #380]	; (eca4 <LORAWAN_TxDone+0x510>)
    eb26:	4798      	blx	r3
    eb28:	4b5f      	ldr	r3, [pc, #380]	; (eca8 <LORAWAN_TxDone+0x514>)
    eb2a:	4798      	blx	r3
    eb2c:	0033      	movs	r3, r6
    eb2e:	9a02      	ldr	r2, [sp, #8]
    eb30:	1a80      	subs	r0, r0, r2
    eb32:	4199      	sbcs	r1, r3
    eb34:	0a03      	lsrs	r3, r0, #8
    eb36:	7063      	strb	r3, [r4, #1]
    eb38:	0c03      	lsrs	r3, r0, #16
    eb3a:	70a3      	strb	r3, [r4, #2]
    eb3c:	0e03      	lsrs	r3, r0, #24
    eb3e:	70e3      	strb	r3, [r4, #3]
    eb40:	0a0b      	lsrs	r3, r1, #8
    eb42:	7163      	strb	r3, [r4, #5]
    eb44:	0c0b      	lsrs	r3, r1, #16
    eb46:	71a3      	strb	r3, [r4, #6]
    eb48:	0e0b      	lsrs	r3, r1, #24
    eb4a:	7020      	strb	r0, [r4, #0]
    eb4c:	7121      	strb	r1, [r4, #4]
    eb4e:	71e3      	strb	r3, [r4, #7]
    eb50:	4a56      	ldr	r2, [pc, #344]	; (ecac <LORAWAN_TxDone+0x518>)
    eb52:	2020      	movs	r0, #32
    eb54:	0013      	movs	r3, r2
    eb56:	3357      	adds	r3, #87	; 0x57
    eb58:	7819      	ldrb	r1, [r3, #0]
    eb5a:	6d93      	ldr	r3, [r2, #88]	; 0x58
    eb5c:	021b      	lsls	r3, r3, #8
    eb5e:	430b      	orrs	r3, r1
    eb60:	930b      	str	r3, [sp, #44]	; 0x2c
    eb62:	2301      	movs	r3, #1
    eb64:	0029      	movs	r1, r5
    eb66:	712b      	strb	r3, [r5, #4]
    eb68:	4b4e      	ldr	r3, [pc, #312]	; (eca4 <LORAWAN_TxDone+0x510>)
    eb6a:	4798      	blx	r3
    eb6c:	4b4f      	ldr	r3, [pc, #316]	; (ecac <LORAWAN_TxDone+0x518>)
    eb6e:	2102      	movs	r1, #2
    eb70:	001a      	movs	r2, r3
    eb72:	32f0      	adds	r2, #240	; 0xf0
    eb74:	7812      	ldrb	r2, [r2, #0]
    eb76:	4011      	ands	r1, r2
    eb78:	d061      	beq.n	ec3e <LORAWAN_TxDone+0x4aa>
    eb7a:	466a      	mov	r2, sp
    eb7c:	8912      	ldrh	r2, [r2, #8]
    eb7e:	a90b      	add	r1, sp, #44	; 0x2c
    eb80:	800a      	strh	r2, [r1, #0]
    eb82:	001a      	movs	r2, r3
    eb84:	326c      	adds	r2, #108	; 0x6c
    eb86:	7812      	ldrb	r2, [r2, #0]
    eb88:	3370      	adds	r3, #112	; 0x70
    eb8a:	0752      	lsls	r2, r2, #29
    eb8c:	0fd2      	lsrs	r2, r2, #31
    eb8e:	710a      	strb	r2, [r1, #4]
    eb90:	781a      	ldrb	r2, [r3, #0]
    eb92:	2301      	movs	r3, #1
    eb94:	4093      	lsls	r3, r2
    eb96:	201f      	movs	r0, #31
    eb98:	804b      	strh	r3, [r1, #2]
    eb9a:	4b42      	ldr	r3, [pc, #264]	; (eca4 <LORAWAN_TxDone+0x510>)
    eb9c:	4798      	blx	r3
    eb9e:	e635      	b.n	e80c <LORAWAN_TxDone+0x78>
    eba0:	782b      	ldrb	r3, [r5, #0]
    eba2:	3301      	adds	r3, #1
    eba4:	702b      	strb	r3, [r5, #0]
    eba6:	e719      	b.n	e9dc <LORAWAN_TxDone+0x248>
    eba8:	003a      	movs	r2, r7
    ebaa:	325c      	adds	r2, #92	; 0x5c
    ebac:	7811      	ldrb	r1, [r2, #0]
    ebae:	2201      	movs	r2, #1
    ebb0:	4211      	tst	r1, r2
    ebb2:	d100      	bne.n	ebb6 <LORAWAN_TxDone+0x422>
    ebb4:	e712      	b.n	e9dc <LORAWAN_TxDone+0x248>
    ebb6:	0039      	movs	r1, r7
    ebb8:	316c      	adds	r1, #108	; 0x6c
    ebba:	7809      	ldrb	r1, [r1, #0]
    ebbc:	4211      	tst	r1, r2
    ebbe:	d104      	bne.n	ebca <LORAWAN_TxDone+0x436>
    ebc0:	189b      	adds	r3, r3, r2
    ebc2:	003a      	movs	r2, r7
    ebc4:	32bb      	adds	r2, #187	; 0xbb
    ebc6:	7013      	strb	r3, [r2, #0]
    ebc8:	e708      	b.n	e9dc <LORAWAN_TxDone+0x248>
    ebca:	003a      	movs	r2, r7
    ebcc:	32bc      	adds	r2, #188	; 0xbc
    ebce:	7813      	ldrb	r3, [r2, #0]
    ebd0:	3301      	adds	r3, #1
    ebd2:	e7f8      	b.n	ebc6 <LORAWAN_TxDone+0x432>
    ebd4:	aa05      	add	r2, sp, #20
    ebd6:	4936      	ldr	r1, [pc, #216]	; (ecb0 <LORAWAN_TxDone+0x51c>)
    ebd8:	e72e      	b.n	ea38 <LORAWAN_TxDone+0x2a4>
    ebda:	32a8      	adds	r2, #168	; 0xa8
    ebdc:	8811      	ldrh	r1, [r2, #0]
    ebde:	25fa      	movs	r5, #250	; 0xfa
    ebe0:	18c9      	adds	r1, r1, r3
    ebe2:	23c0      	movs	r3, #192	; 0xc0
    ebe4:	33ff      	adds	r3, #255	; 0xff
    ebe6:	5cfb      	ldrb	r3, [r7, r3]
    ebe8:	00ad      	lsls	r5, r5, #2
    ebea:	1ac9      	subs	r1, r1, r3
    ebec:	003b      	movs	r3, r7
    ebee:	33c4      	adds	r3, #196	; 0xc4
    ebf0:	7818      	ldrb	r0, [r3, #0]
    ebf2:	4369      	muls	r1, r5
    ebf4:	4b29      	ldr	r3, [pc, #164]	; (ec9c <LORAWAN_TxDone+0x508>)
    ebf6:	9400      	str	r4, [sp, #0]
    ebf8:	0022      	movs	r2, r4
    ebfa:	4e27      	ldr	r6, [pc, #156]	; (ec98 <LORAWAN_TxDone+0x504>)
    ebfc:	47b0      	blx	r6
    ebfe:	003b      	movs	r3, r7
    ec00:	33d4      	adds	r3, #212	; 0xd4
    ec02:	781b      	ldrb	r3, [r3, #0]
    ec04:	2b04      	cmp	r3, #4
    ec06:	d105      	bne.n	ec14 <LORAWAN_TxDone+0x480>
    ec08:	2000      	movs	r0, #0
    ec0a:	ab05      	add	r3, sp, #20
    ec0c:	5618      	ldrsb	r0, [r3, r0]
    ec0e:	4b29      	ldr	r3, [pc, #164]	; (ecb4 <LORAWAN_TxDone+0x520>)
    ec10:	4798      	blx	r3
    ec12:	e7ab      	b.n	eb6c <LORAWAN_TxDone+0x3d8>
    ec14:	2b01      	cmp	r3, #1
    ec16:	d1a9      	bne.n	eb6c <LORAWAN_TxDone+0x3d8>
    ec18:	003b      	movs	r3, r7
    ec1a:	33aa      	adds	r3, #170	; 0xaa
    ec1c:	8819      	ldrh	r1, [r3, #0]
    ec1e:	ab05      	add	r3, sp, #20
    ec20:	781b      	ldrb	r3, [r3, #0]
    ec22:	0022      	movs	r2, r4
    ec24:	b25b      	sxtb	r3, r3
    ec26:	18c9      	adds	r1, r1, r3
    ec28:	23c0      	movs	r3, #192	; 0xc0
    ec2a:	33ff      	adds	r3, #255	; 0xff
    ec2c:	5cfb      	ldrb	r3, [r7, r3]
    ec2e:	37c5      	adds	r7, #197	; 0xc5
    ec30:	1ac9      	subs	r1, r1, r3
    ec32:	7838      	ldrb	r0, [r7, #0]
    ec34:	4369      	muls	r1, r5
    ec36:	9400      	str	r4, [sp, #0]
    ec38:	4b19      	ldr	r3, [pc, #100]	; (eca0 <LORAWAN_TxDone+0x50c>)
    ec3a:	47b0      	blx	r6
    ec3c:	e796      	b.n	eb6c <LORAWAN_TxDone+0x3d8>
    ec3e:	0753      	lsls	r3, r2, #29
    ec40:	d400      	bmi.n	ec44 <LORAWAN_TxDone+0x4b0>
    ec42:	e5e3      	b.n	e80c <LORAWAN_TxDone+0x78>
    ec44:	2022      	movs	r0, #34	; 0x22
    ec46:	e7a8      	b.n	eb9a <LORAWAN_TxDone+0x406>
    ec48:	491b      	ldr	r1, [pc, #108]	; (ecb8 <LORAWAN_TxDone+0x524>)
    ec4a:	784a      	ldrb	r2, [r1, #1]
    ec4c:	780b      	ldrb	r3, [r1, #0]
    ec4e:	0212      	lsls	r2, r2, #8
    ec50:	431a      	orrs	r2, r3
    ec52:	788b      	ldrb	r3, [r1, #2]
    ec54:	041b      	lsls	r3, r3, #16
    ec56:	431a      	orrs	r2, r3
    ec58:	78cb      	ldrb	r3, [r1, #3]
    ec5a:	061b      	lsls	r3, r3, #24
    ec5c:	4313      	orrs	r3, r2
    ec5e:	d100      	bne.n	ec62 <LORAWAN_TxDone+0x4ce>
    ec60:	e5d4      	b.n	e80c <LORAWAN_TxDone+0x78>
    ec62:	4a16      	ldr	r2, [pc, #88]	; (ecbc <LORAWAN_TxDone+0x528>)
    ec64:	7811      	ldrb	r1, [r2, #0]
    ec66:	221c      	movs	r2, #28
    ec68:	2904      	cmp	r1, #4
    ec6a:	d003      	beq.n	ec74 <LORAWAN_TxDone+0x4e0>
    ec6c:	2200      	movs	r2, #0
    ec6e:	2c07      	cmp	r4, #7
    ec70:	d100      	bne.n	ec74 <LORAWAN_TxDone+0x4e0>
    ec72:	0022      	movs	r2, r4
    ec74:	0039      	movs	r1, r7
    ec76:	2004      	movs	r0, #4
    ec78:	31e0      	adds	r1, #224	; 0xe0
    ec7a:	7008      	strb	r0, [r1, #0]
    ec7c:	0038      	movs	r0, r7
    ec7e:	37dc      	adds	r7, #220	; 0xdc
    ec80:	30e4      	adds	r0, #228	; 0xe4
    ec82:	7002      	strb	r2, [r0, #0]
    ec84:	6838      	ldr	r0, [r7, #0]
    ec86:	4798      	blx	r3
    ec88:	e5c0      	b.n	e80c <LORAWAN_TxDone+0x78>
    ec8a:	46c0      	nop			; (mov r8, r8)
    ec8c:	0000af89 	.word	0x0000af89
    ec90:	20002440 	.word	0x20002440
    ec94:	0000aa71 	.word	0x0000aa71
    ec98:	0000bf29 	.word	0x0000bf29
    ec9c:	0000da19 	.word	0x0000da19
    eca0:	0000eff5 	.word	0x0000eff5
    eca4:	0000ab99 	.word	0x0000ab99
    eca8:	0000bed1 	.word	0x0000bed1
    ecac:	200023e4 	.word	0x200023e4
    ecb0:	20002432 	.word	0x20002432
    ecb4:	000109bd 	.word	0x000109bd
    ecb8:	200026b8 	.word	0x200026b8
    ecbc:	200025a4 	.word	0x200025a4

0000ecc0 <radioCallback>:
    ecc0:	4b10      	ldr	r3, [pc, #64]	; (ed04 <radioCallback+0x44>)
    ecc2:	b510      	push	{r4, lr}
    ecc4:	7018      	strb	r0, [r3, #0]
    ecc6:	3801      	subs	r0, #1
    ecc8:	b2c0      	uxtb	r0, r0
    ecca:	000c      	movs	r4, r1
    eccc:	281f      	cmp	r0, #31
    ecce:	d809      	bhi.n	ece4 <radioCallback+0x24>
    ecd0:	2301      	movs	r3, #1
    ecd2:	4083      	lsls	r3, r0
    ecd4:	4a0c      	ldr	r2, [pc, #48]	; (ed08 <radioCallback+0x48>)
    ecd6:	4213      	tst	r3, r2
    ecd8:	d109      	bne.n	ecee <radioCallback+0x2e>
    ecda:	220a      	movs	r2, #10
    ecdc:	4213      	tst	r3, r2
    ecde:	d102      	bne.n	ece6 <radioCallback+0x26>
    ece0:	2b00      	cmp	r3, #0
    ece2:	db08      	blt.n	ecf6 <radioCallback+0x36>
    ece4:	bd10      	pop	{r4, pc}
    ece6:	0008      	movs	r0, r1
    ece8:	4b08      	ldr	r3, [pc, #32]	; (ed0c <radioCallback+0x4c>)
    ecea:	4798      	blx	r3
    ecec:	e7fa      	b.n	ece4 <radioCallback+0x24>
    ecee:	2002      	movs	r0, #2
    ecf0:	4b07      	ldr	r3, [pc, #28]	; (ed10 <radioCallback+0x50>)
    ecf2:	4798      	blx	r3
    ecf4:	e7f6      	b.n	ece4 <radioCallback+0x24>
    ecf6:	4b07      	ldr	r3, [pc, #28]	; (ed14 <radioCallback+0x54>)
    ecf8:	681b      	ldr	r3, [r3, #0]
    ecfa:	2b00      	cmp	r3, #0
    ecfc:	d0f2      	beq.n	ece4 <radioCallback+0x24>
    ecfe:	4798      	blx	r3
    ed00:	6020      	str	r0, [r4, #0]
    ed02:	e7ef      	b.n	ece4 <radioCallback+0x24>
    ed04:	200025a4 	.word	0x200025a4
    ed08:	00008081 	.word	0x00008081
    ed0c:	0000e795 	.word	0x0000e795
    ed10:	00010fed 	.word	0x00010fed
    ed14:	200026b4 	.word	0x200026b4

0000ed18 <LorawanCheckAndDoRetryOnTimeout>:
    ed18:	b513      	push	{r0, r1, r4, lr}
    ed1a:	4c34      	ldr	r4, [pc, #208]	; (edec <LorawanCheckAndDoRetryOnTimeout+0xd4>)
    ed1c:	0023      	movs	r3, r4
    ed1e:	336c      	adds	r3, #108	; 0x6c
    ed20:	781b      	ldrb	r3, [r3, #0]
    ed22:	0022      	movs	r2, r4
    ed24:	07db      	lsls	r3, r3, #31
    ed26:	d54d      	bpl.n	edc4 <LorawanCheckAndDoRetryOnTimeout+0xac>
    ed28:	0023      	movs	r3, r4
    ed2a:	32bc      	adds	r2, #188	; 0xbc
    ed2c:	33ba      	adds	r3, #186	; 0xba
    ed2e:	7812      	ldrb	r2, [r2, #0]
    ed30:	781b      	ldrb	r3, [r3, #0]
    ed32:	429a      	cmp	r2, r3
    ed34:	d838      	bhi.n	eda8 <LorawanCheckAndDoRetryOnTimeout+0x90>
    ed36:	23df      	movs	r3, #223	; 0xdf
    ed38:	005b      	lsls	r3, r3, #1
    ed3a:	5ce3      	ldrb	r3, [r4, r3]
    ed3c:	2b00      	cmp	r3, #0
    ed3e:	d033      	beq.n	eda8 <LorawanCheckAndDoRetryOnTimeout+0x90>
    ed40:	0023      	movs	r3, r4
    ed42:	33d4      	adds	r3, #212	; 0xd4
    ed44:	781b      	ldrb	r3, [r3, #0]
    ed46:	2b01      	cmp	r3, #1
    ed48:	d11a      	bne.n	ed80 <LorawanCheckAndDoRetryOnTimeout+0x68>
    ed4a:	0021      	movs	r1, r4
    ed4c:	220e      	movs	r2, #14
    ed4e:	315c      	adds	r1, #92	; 0x5c
    ed50:	780b      	ldrb	r3, [r1, #0]
    ed52:	4393      	bics	r3, r2
    ed54:	001a      	movs	r2, r3
    ed56:	230c      	movs	r3, #12
    ed58:	4313      	orrs	r3, r2
    ed5a:	700b      	strb	r3, [r1, #0]
    ed5c:	0023      	movs	r3, r4
    ed5e:	33b2      	adds	r3, #178	; 0xb2
    ed60:	8819      	ldrh	r1, [r3, #0]
    ed62:	23c0      	movs	r3, #192	; 0xc0
    ed64:	33ff      	adds	r3, #255	; 0xff
    ed66:	5ce3      	ldrb	r3, [r4, r3]
    ed68:	2200      	movs	r2, #0
    ed6a:	1acb      	subs	r3, r1, r3
    ed6c:	21fa      	movs	r1, #250	; 0xfa
    ed6e:	34c8      	adds	r4, #200	; 0xc8
    ed70:	0089      	lsls	r1, r1, #2
    ed72:	7820      	ldrb	r0, [r4, #0]
    ed74:	4359      	muls	r1, r3
    ed76:	9200      	str	r2, [sp, #0]
    ed78:	4b1d      	ldr	r3, [pc, #116]	; (edf0 <LorawanCheckAndDoRetryOnTimeout+0xd8>)
    ed7a:	4c1e      	ldr	r4, [pc, #120]	; (edf4 <LorawanCheckAndDoRetryOnTimeout+0xdc>)
    ed7c:	47a0      	blx	r4
    ed7e:	bd13      	pop	{r0, r1, r4, pc}
    ed80:	2b04      	cmp	r3, #4
    ed82:	d1fc      	bne.n	ed7e <LorawanCheckAndDoRetryOnTimeout+0x66>
    ed84:	4b1c      	ldr	r3, [pc, #112]	; (edf8 <LorawanCheckAndDoRetryOnTimeout+0xe0>)
    ed86:	4798      	blx	r3
    ed88:	34a6      	adds	r4, #166	; 0xa6
    ed8a:	300d      	adds	r0, #13
    ed8c:	8823      	ldrh	r3, [r4, #0]
    ed8e:	b280      	uxth	r0, r0
    ed90:	4283      	cmp	r3, r0
    ed92:	d802      	bhi.n	ed9a <LorawanCheckAndDoRetryOnTimeout+0x82>
    ed94:	4b19      	ldr	r3, [pc, #100]	; (edfc <LorawanCheckAndDoRetryOnTimeout+0xe4>)
    ed96:	4798      	blx	r3
    ed98:	e7f1      	b.n	ed7e <LorawanCheckAndDoRetryOnTimeout+0x66>
    ed9a:	200e      	movs	r0, #14
    ed9c:	4b18      	ldr	r3, [pc, #96]	; (ee00 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    ed9e:	4798      	blx	r3
    eda0:	4b18      	ldr	r3, [pc, #96]	; (ee04 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    eda2:	4798      	blx	r3
    eda4:	4b18      	ldr	r3, [pc, #96]	; (ee08 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    eda6:	e7f6      	b.n	ed96 <LorawanCheckAndDoRetryOnTimeout+0x7e>
    eda8:	2012      	movs	r0, #18
    edaa:	4b15      	ldr	r3, [pc, #84]	; (ee00 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    edac:	4798      	blx	r3
    edae:	4b15      	ldr	r3, [pc, #84]	; (ee04 <LorawanCheckAndDoRetryOnTimeout+0xec>)
    edb0:	4798      	blx	r3
    edb2:	34d4      	adds	r4, #212	; 0xd4
    edb4:	4b14      	ldr	r3, [pc, #80]	; (ee08 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    edb6:	4798      	blx	r3
    edb8:	7823      	ldrb	r3, [r4, #0]
    edba:	2b04      	cmp	r3, #4
    edbc:	d1df      	bne.n	ed7e <LorawanCheckAndDoRetryOnTimeout+0x66>
    edbe:	4b13      	ldr	r3, [pc, #76]	; (ee0c <LorawanCheckAndDoRetryOnTimeout+0xf4>)
    edc0:	4798      	blx	r3
    edc2:	e7dc      	b.n	ed7e <LorawanCheckAndDoRetryOnTimeout+0x66>
    edc4:	0023      	movs	r3, r4
    edc6:	32bb      	adds	r2, #187	; 0xbb
    edc8:	33b9      	adds	r3, #185	; 0xb9
    edca:	7812      	ldrb	r2, [r2, #0]
    edcc:	781b      	ldrb	r3, [r3, #0]
    edce:	429a      	cmp	r2, r3
    edd0:	d804      	bhi.n	eddc <LorawanCheckAndDoRetryOnTimeout+0xc4>
    edd2:	23df      	movs	r3, #223	; 0xdf
    edd4:	005b      	lsls	r3, r3, #1
    edd6:	5ce3      	ldrb	r3, [r4, r3]
    edd8:	2b00      	cmp	r3, #0
    edda:	d1db      	bne.n	ed94 <LorawanCheckAndDoRetryOnTimeout+0x7c>
    eddc:	4b0c      	ldr	r3, [pc, #48]	; (ee10 <LorawanCheckAndDoRetryOnTimeout+0xf8>)
    edde:	4798      	blx	r3
    ede0:	4b09      	ldr	r3, [pc, #36]	; (ee08 <LorawanCheckAndDoRetryOnTimeout+0xf0>)
    ede2:	4798      	blx	r3
    ede4:	2008      	movs	r0, #8
    ede6:	4b06      	ldr	r3, [pc, #24]	; (ee00 <LorawanCheckAndDoRetryOnTimeout+0xe8>)
    ede8:	4798      	blx	r3
    edea:	e7c8      	b.n	ed7e <LorawanCheckAndDoRetryOnTimeout+0x66>
    edec:	200023e4 	.word	0x200023e4
    edf0:	0000ee15 	.word	0x0000ee15
    edf4:	0000bf29 	.word	0x0000bf29
    edf8:	0000cc1d 	.word	0x0000cc1d
    edfc:	0000dafd 	.word	0x0000dafd
    ee00:	0000e2d9 	.word	0x0000e2d9
    ee04:	0000d505 	.word	0x0000d505
    ee08:	0000cb31 	.word	0x0000cb31
    ee0c:	00011a91 	.word	0x00011a91
    ee10:	0000d535 	.word	0x0000d535

0000ee14 <AckRetransmissionCallback>:
    ee14:	b510      	push	{r4, lr}
    ee16:	4c1c      	ldr	r4, [pc, #112]	; (ee88 <AckRetransmissionCallback+0x74>)
    ee18:	0023      	movs	r3, r4
    ee1a:	335c      	adds	r3, #92	; 0x5c
    ee1c:	781b      	ldrb	r3, [r3, #0]
    ee1e:	2b7f      	cmp	r3, #127	; 0x7f
    ee20:	d82e      	bhi.n	ee80 <AckRetransmissionCallback+0x6c>
    ee22:	0023      	movs	r3, r4
    ee24:	33d4      	adds	r3, #212	; 0xd4
    ee26:	781b      	ldrb	r3, [r3, #0]
    ee28:	2b04      	cmp	r3, #4
    ee2a:	d102      	bne.n	ee32 <AckRetransmissionCallback+0x1e>
    ee2c:	4b17      	ldr	r3, [pc, #92]	; (ee8c <AckRetransmissionCallback+0x78>)
    ee2e:	4798      	blx	r3
    ee30:	e01f      	b.n	ee72 <AckRetransmissionCallback+0x5e>
    ee32:	2b01      	cmp	r3, #1
    ee34:	d11d      	bne.n	ee72 <AckRetransmissionCallback+0x5e>
    ee36:	0022      	movs	r2, r4
    ee38:	0023      	movs	r3, r4
    ee3a:	32bc      	adds	r2, #188	; 0xbc
    ee3c:	33ba      	adds	r3, #186	; 0xba
    ee3e:	7812      	ldrb	r2, [r2, #0]
    ee40:	781b      	ldrb	r3, [r3, #0]
    ee42:	429a      	cmp	r2, r3
    ee44:	d816      	bhi.n	ee74 <AckRetransmissionCallback+0x60>
    ee46:	23df      	movs	r3, #223	; 0xdf
    ee48:	005b      	lsls	r3, r3, #1
    ee4a:	5ce3      	ldrb	r3, [r4, r3]
    ee4c:	2b00      	cmp	r3, #0
    ee4e:	d011      	beq.n	ee74 <AckRetransmissionCallback+0x60>
    ee50:	4b0f      	ldr	r3, [pc, #60]	; (ee90 <AckRetransmissionCallback+0x7c>)
    ee52:	4798      	blx	r3
    ee54:	34a6      	adds	r4, #166	; 0xa6
    ee56:	300d      	adds	r0, #13
    ee58:	8823      	ldrh	r3, [r4, #0]
    ee5a:	b280      	uxth	r0, r0
    ee5c:	4283      	cmp	r3, r0
    ee5e:	d801      	bhi.n	ee64 <AckRetransmissionCallback+0x50>
    ee60:	4b0c      	ldr	r3, [pc, #48]	; (ee94 <AckRetransmissionCallback+0x80>)
    ee62:	e7e4      	b.n	ee2e <AckRetransmissionCallback+0x1a>
    ee64:	4b0c      	ldr	r3, [pc, #48]	; (ee98 <AckRetransmissionCallback+0x84>)
    ee66:	4798      	blx	r3
    ee68:	4b0c      	ldr	r3, [pc, #48]	; (ee9c <AckRetransmissionCallback+0x88>)
    ee6a:	4798      	blx	r3
    ee6c:	200e      	movs	r0, #14
    ee6e:	4b0c      	ldr	r3, [pc, #48]	; (eea0 <AckRetransmissionCallback+0x8c>)
    ee70:	4798      	blx	r3
    ee72:	bd10      	pop	{r4, pc}
    ee74:	4b08      	ldr	r3, [pc, #32]	; (ee98 <AckRetransmissionCallback+0x84>)
    ee76:	4798      	blx	r3
    ee78:	4b08      	ldr	r3, [pc, #32]	; (ee9c <AckRetransmissionCallback+0x88>)
    ee7a:	4798      	blx	r3
    ee7c:	2012      	movs	r0, #18
    ee7e:	e7f6      	b.n	ee6e <AckRetransmissionCallback+0x5a>
    ee80:	4b05      	ldr	r3, [pc, #20]	; (ee98 <AckRetransmissionCallback+0x84>)
    ee82:	4798      	blx	r3
    ee84:	4b05      	ldr	r3, [pc, #20]	; (ee9c <AckRetransmissionCallback+0x88>)
    ee86:	e7d2      	b.n	ee2e <AckRetransmissionCallback+0x1a>
    ee88:	200023e4 	.word	0x200023e4
    ee8c:	0000ed19 	.word	0x0000ed19
    ee90:	0000cc1d 	.word	0x0000cc1d
    ee94:	0000dafd 	.word	0x0000dafd
    ee98:	0000d505 	.word	0x0000d505
    ee9c:	0000cb31 	.word	0x0000cb31
    eea0:	0000e2d9 	.word	0x0000e2d9

0000eea4 <LORAWAN_RxTimeout>:
    eea4:	4b23      	ldr	r3, [pc, #140]	; (ef34 <LORAWAN_RxTimeout+0x90>)
    eea6:	b510      	push	{r4, lr}
    eea8:	001a      	movs	r2, r3
    eeaa:	325c      	adds	r2, #92	; 0x5c
    eeac:	7812      	ldrb	r2, [r2, #0]
    eeae:	b251      	sxtb	r1, r2
    eeb0:	2900      	cmp	r1, #0
    eeb2:	db23      	blt.n	eefc <LORAWAN_RxTimeout+0x58>
    eeb4:	0019      	movs	r1, r3
    eeb6:	31d4      	adds	r1, #212	; 0xd4
    eeb8:	7809      	ldrb	r1, [r1, #0]
    eeba:	2904      	cmp	r1, #4
    eebc:	d104      	bne.n	eec8 <LORAWAN_RxTimeout+0x24>
    eebe:	07d1      	lsls	r1, r2, #31
    eec0:	d502      	bpl.n	eec8 <LORAWAN_RxTimeout+0x24>
    eec2:	4b1d      	ldr	r3, [pc, #116]	; (ef38 <LORAWAN_RxTimeout+0x94>)
    eec4:	4798      	blx	r3
    eec6:	bd10      	pop	{r4, pc}
    eec8:	210e      	movs	r1, #14
    eeca:	0010      	movs	r0, r2
    eecc:	4008      	ands	r0, r1
    eece:	2806      	cmp	r0, #6
    eed0:	d107      	bne.n	eee2 <LORAWAN_RxTimeout+0x3e>
    eed2:	335c      	adds	r3, #92	; 0x5c
    eed4:	781a      	ldrb	r2, [r3, #0]
    eed6:	438a      	bics	r2, r1
    eed8:	0011      	movs	r1, r2
    eeda:	2208      	movs	r2, #8
    eedc:	430a      	orrs	r2, r1
    eede:	701a      	strb	r2, [r3, #0]
    eee0:	e7f1      	b.n	eec6 <LORAWAN_RxTimeout+0x22>
    eee2:	2004      	movs	r0, #4
    eee4:	336c      	adds	r3, #108	; 0x6c
    eee6:	781b      	ldrb	r3, [r3, #0]
    eee8:	4203      	tst	r3, r0
    eeea:	d002      	beq.n	eef2 <LORAWAN_RxTimeout+0x4e>
    eeec:	4b13      	ldr	r3, [pc, #76]	; (ef3c <LORAWAN_RxTimeout+0x98>)
    eeee:	4798      	blx	r3
    eef0:	e7e9      	b.n	eec6 <LORAWAN_RxTimeout+0x22>
    eef2:	07d3      	lsls	r3, r2, #31
    eef4:	d5e7      	bpl.n	eec6 <LORAWAN_RxTimeout+0x22>
    eef6:	4b12      	ldr	r3, [pc, #72]	; (ef40 <LORAWAN_RxTimeout+0x9c>)
    eef8:	4798      	blx	r3
    eefa:	e7e4      	b.n	eec6 <LORAWAN_RxTimeout+0x22>
    eefc:	4811      	ldr	r0, [pc, #68]	; (ef44 <LORAWAN_RxTimeout+0xa0>)
    eefe:	7841      	ldrb	r1, [r0, #1]
    ef00:	7802      	ldrb	r2, [r0, #0]
    ef02:	0209      	lsls	r1, r1, #8
    ef04:	4311      	orrs	r1, r2
    ef06:	7882      	ldrb	r2, [r0, #2]
    ef08:	0412      	lsls	r2, r2, #16
    ef0a:	4311      	orrs	r1, r2
    ef0c:	78c2      	ldrb	r2, [r0, #3]
    ef0e:	0612      	lsls	r2, r2, #24
    ef10:	430a      	orrs	r2, r1
    ef12:	d0d8      	beq.n	eec6 <LORAWAN_RxTimeout+0x22>
    ef14:	21da      	movs	r1, #218	; 0xda
    ef16:	2001      	movs	r0, #1
    ef18:	0049      	lsls	r1, r1, #1
    ef1a:	5458      	strb	r0, [r3, r1]
    ef1c:	0019      	movs	r1, r3
    ef1e:	2404      	movs	r4, #4
    ef20:	31e0      	adds	r1, #224	; 0xe0
    ef22:	700c      	strb	r4, [r1, #0]
    ef24:	001c      	movs	r4, r3
    ef26:	33dc      	adds	r3, #220	; 0xdc
    ef28:	34e4      	adds	r4, #228	; 0xe4
    ef2a:	7020      	strb	r0, [r4, #0]
    ef2c:	6818      	ldr	r0, [r3, #0]
    ef2e:	4790      	blx	r2
    ef30:	e7c9      	b.n	eec6 <LORAWAN_RxTimeout+0x22>
    ef32:	46c0      	nop			; (mov r8, r8)
    ef34:	200023e4 	.word	0x200023e4
    ef38:	00010a41 	.word	0x00010a41
    ef3c:	0000d559 	.word	0x0000d559
    ef40:	0000ed19 	.word	0x0000ed19
    ef44:	200026b8 	.word	0x200026b8

0000ef48 <LorawanConfigureRadioForRX2>:
    ef48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    ef4a:	466b      	mov	r3, sp
    ef4c:	4c21      	ldr	r4, [pc, #132]	; (efd4 <LorawanConfigureRadioForRX2+0x8c>)
    ef4e:	1cdd      	adds	r5, r3, #3
    ef50:	0023      	movs	r3, r4
    ef52:	2100      	movs	r1, #0
    ef54:	336c      	adds	r3, #108	; 0x6c
    ef56:	781b      	ldrb	r3, [r3, #0]
    ef58:	0007      	movs	r7, r0
    ef5a:	7029      	strb	r1, [r5, #0]
    ef5c:	075b      	lsls	r3, r3, #29
    ef5e:	d52c      	bpl.n	efba <LorawanConfigureRadioForRX2+0x72>
    ef60:	002a      	movs	r2, r5
    ef62:	2009      	movs	r0, #9
    ef64:	4b1c      	ldr	r3, [pc, #112]	; (efd8 <LorawanConfigureRadioForRX2+0x90>)
    ef66:	4798      	blx	r3
    ef68:	0022      	movs	r2, r4
    ef6a:	0023      	movs	r3, r4
    ef6c:	324c      	adds	r2, #76	; 0x4c
    ef6e:	8811      	ldrh	r1, [r2, #0]
    ef70:	334a      	adds	r3, #74	; 0x4a
    ef72:	881b      	ldrh	r3, [r3, #0]
    ef74:	0409      	lsls	r1, r1, #16
    ef76:	4319      	orrs	r1, r3
    ef78:	7828      	ldrb	r0, [r5, #0]
    ef7a:	4b18      	ldr	r3, [pc, #96]	; (efdc <LorawanConfigureRadioForRX2+0x94>)
    ef7c:	4798      	blx	r3
    ef7e:	2300      	movs	r3, #0
    ef80:	0022      	movs	r2, r4
    ef82:	ae01      	add	r6, sp, #4
    ef84:	7033      	strb	r3, [r6, #0]
    ef86:	32d4      	adds	r2, #212	; 0xd4
    ef88:	7812      	ldrb	r2, [r2, #0]
    ef8a:	2a04      	cmp	r2, #4
    ef8c:	d11a      	bne.n	efc4 <LorawanConfigureRadioForRX2+0x7c>
    ef8e:	345c      	adds	r4, #92	; 0x5c
    ef90:	7822      	ldrb	r2, [r4, #0]
    ef92:	07d2      	lsls	r2, r2, #31
    ef94:	d516      	bpl.n	efc4 <LorawanConfigureRadioForRX2+0x7c>
    ef96:	8073      	strh	r3, [r6, #2]
    ef98:	0030      	movs	r0, r6
    ef9a:	4b11      	ldr	r3, [pc, #68]	; (efe0 <LorawanConfigureRadioForRX2+0x98>)
    ef9c:	4798      	blx	r3
    ef9e:	1e04      	subs	r4, r0, #0
    efa0:	d00a      	beq.n	efb8 <LorawanConfigureRadioForRX2+0x70>
    efa2:	4b10      	ldr	r3, [pc, #64]	; (efe4 <LorawanConfigureRadioForRX2+0x9c>)
    efa4:	4798      	blx	r3
    efa6:	4b10      	ldr	r3, [pc, #64]	; (efe8 <LorawanConfigureRadioForRX2+0xa0>)
    efa8:	4798      	blx	r3
    efaa:	4b10      	ldr	r3, [pc, #64]	; (efec <LorawanConfigureRadioForRX2+0xa4>)
    efac:	4798      	blx	r3
    efae:	2f00      	cmp	r7, #0
    efb0:	d002      	beq.n	efb8 <LorawanConfigureRadioForRX2+0x70>
    efb2:	0020      	movs	r0, r4
    efb4:	4b0e      	ldr	r3, [pc, #56]	; (eff0 <LorawanConfigureRadioForRX2+0xa8>)
    efb6:	4798      	blx	r3
    efb8:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    efba:	0023      	movs	r3, r4
    efbc:	334e      	adds	r3, #78	; 0x4e
    efbe:	781b      	ldrb	r3, [r3, #0]
    efc0:	702b      	strb	r3, [r5, #0]
    efc2:	e7d1      	b.n	ef68 <LorawanConfigureRadioForRX2+0x20>
    efc4:	466b      	mov	r3, sp
    efc6:	0029      	movs	r1, r5
    efc8:	1d9a      	adds	r2, r3, #6
    efca:	2003      	movs	r0, #3
    efcc:	4b02      	ldr	r3, [pc, #8]	; (efd8 <LorawanConfigureRadioForRX2+0x90>)
    efce:	4798      	blx	r3
    efd0:	e7e2      	b.n	ef98 <LorawanConfigureRadioForRX2+0x50>
    efd2:	46c0      	nop			; (mov r8, r8)
    efd4:	200023e4 	.word	0x200023e4
    efd8:	0000aa71 	.word	0x0000aa71
    efdc:	0000d9ad 	.word	0x0000d9ad
    efe0:	00012371 	.word	0x00012371
    efe4:	0000d505 	.word	0x0000d505
    efe8:	0000d535 	.word	0x0000d535
    efec:	0000cb31 	.word	0x0000cb31
    eff0:	0000e2d9 	.word	0x0000e2d9

0000eff4 <LorawanReceiveWindow2Callback>:
    eff4:	b570      	push	{r4, r5, r6, lr}
    eff6:	4c16      	ldr	r4, [pc, #88]	; (f050 <LorawanReceiveWindow2Callback+0x5c>)
    eff8:	0025      	movs	r5, r4
    effa:	355c      	adds	r5, #92	; 0x5c
    effc:	782b      	ldrb	r3, [r5, #0]
    effe:	2b7f      	cmp	r3, #127	; 0x7f
    f000:	d811      	bhi.n	f026 <LorawanReceiveWindow2Callback+0x32>
    f002:	4b14      	ldr	r3, [pc, #80]	; (f054 <LorawanReceiveWindow2Callback+0x60>)
    f004:	4798      	blx	r3
    f006:	2801      	cmp	r0, #1
    f008:	d109      	bne.n	f01e <LorawanReceiveWindow2Callback+0x2a>
    f00a:	220e      	movs	r2, #14
    f00c:	782b      	ldrb	r3, [r5, #0]
    f00e:	4393      	bics	r3, r2
    f010:	001a      	movs	r2, r3
    f012:	230a      	movs	r3, #10
    f014:	4313      	orrs	r3, r2
    f016:	702b      	strb	r3, [r5, #0]
    f018:	4b0f      	ldr	r3, [pc, #60]	; (f058 <LorawanReceiveWindow2Callback+0x64>)
    f01a:	4798      	blx	r3
    f01c:	bd70      	pop	{r4, r5, r6, pc}
    f01e:	2301      	movs	r3, #1
    f020:	34d0      	adds	r4, #208	; 0xd0
    f022:	7023      	strb	r3, [r4, #0]
    f024:	e7fa      	b.n	f01c <LorawanReceiveWindow2Callback+0x28>
    f026:	2104      	movs	r1, #4
    f028:	346c      	adds	r4, #108	; 0x6c
    f02a:	7822      	ldrb	r2, [r4, #0]
    f02c:	420a      	tst	r2, r1
    f02e:	d007      	beq.n	f040 <LorawanReceiveWindow2Callback+0x4c>
    f030:	2001      	movs	r0, #1
    f032:	4383      	bics	r3, r0
    f034:	438a      	bics	r2, r1
    f036:	702b      	strb	r3, [r5, #0]
    f038:	3107      	adds	r1, #7
    f03a:	4b08      	ldr	r3, [pc, #32]	; (f05c <LorawanReceiveWindow2Callback+0x68>)
    f03c:	7022      	strb	r2, [r4, #0]
    f03e:	4798      	blx	r3
    f040:	4b07      	ldr	r3, [pc, #28]	; (f060 <LorawanReceiveWindow2Callback+0x6c>)
    f042:	4798      	blx	r3
    f044:	4b07      	ldr	r3, [pc, #28]	; (f064 <LorawanReceiveWindow2Callback+0x70>)
    f046:	4798      	blx	r3
    f048:	4b07      	ldr	r3, [pc, #28]	; (f068 <LorawanReceiveWindow2Callback+0x74>)
    f04a:	4798      	blx	r3
    f04c:	e7e6      	b.n	f01c <LorawanReceiveWindow2Callback+0x28>
    f04e:	46c0      	nop			; (mov r8, r8)
    f050:	200023e4 	.word	0x200023e4
    f054:	00011a91 	.word	0x00011a91
    f058:	0000ef49 	.word	0x0000ef49
    f05c:	0000af89 	.word	0x0000af89
    f060:	0000d535 	.word	0x0000d535
    f064:	0000d505 	.word	0x0000d505
    f068:	0000cb31 	.word	0x0000cb31

0000f06c <SetReceptionNotOkState>:
    f06c:	22da      	movs	r2, #218	; 0xda
    f06e:	2101      	movs	r1, #1
    f070:	4b19      	ldr	r3, [pc, #100]	; (f0d8 <SetReceptionNotOkState+0x6c>)
    f072:	0052      	lsls	r2, r2, #1
    f074:	b510      	push	{r4, lr}
    f076:	5499      	strb	r1, [r3, r2]
    f078:	001a      	movs	r2, r3
    f07a:	0019      	movs	r1, r3
    f07c:	32d4      	adds	r2, #212	; 0xd4
    f07e:	7812      	ldrb	r2, [r2, #0]
    f080:	315c      	adds	r1, #92	; 0x5c
    f082:	200e      	movs	r0, #14
    f084:	2a01      	cmp	r2, #1
    f086:	d11d      	bne.n	f0c4 <SetReceptionNotOkState+0x58>
    f088:	780a      	ldrb	r2, [r1, #0]
    f08a:	4002      	ands	r2, r0
    f08c:	2a0a      	cmp	r2, #10
    f08e:	d006      	beq.n	f09e <SetReceptionNotOkState+0x32>
    f090:	2a06      	cmp	r2, #6
    f092:	d113      	bne.n	f0bc <SetReceptionNotOkState+0x50>
    f094:	001a      	movs	r2, r3
    f096:	32d0      	adds	r2, #208	; 0xd0
    f098:	7812      	ldrb	r2, [r2, #0]
    f09a:	2a00      	cmp	r2, #0
    f09c:	d00e      	beq.n	f0bc <SetReceptionNotOkState+0x50>
    f09e:	0019      	movs	r1, r3
    f0a0:	2001      	movs	r0, #1
    f0a2:	316c      	adds	r1, #108	; 0x6c
    f0a4:	780a      	ldrb	r2, [r1, #0]
    f0a6:	240e      	movs	r4, #14
    f0a8:	4382      	bics	r2, r0
    f0aa:	700a      	strb	r2, [r1, #0]
    f0ac:	001a      	movs	r2, r3
    f0ae:	325c      	adds	r2, #92	; 0x5c
    f0b0:	7811      	ldrb	r1, [r2, #0]
    f0b2:	43a1      	bics	r1, r4
    f0b4:	7011      	strb	r1, [r2, #0]
    f0b6:	7851      	ldrb	r1, [r2, #1]
    f0b8:	4381      	bics	r1, r0
    f0ba:	7051      	strb	r1, [r2, #1]
    f0bc:	2200      	movs	r2, #0
    f0be:	33d0      	adds	r3, #208	; 0xd0
    f0c0:	701a      	strb	r2, [r3, #0]
    f0c2:	bd10      	pop	{r4, pc}
    f0c4:	230a      	movs	r3, #10
    f0c6:	780a      	ldrb	r2, [r1, #0]
    f0c8:	4382      	bics	r2, r0
    f0ca:	4313      	orrs	r3, r2
    f0cc:	700b      	strb	r3, [r1, #0]
    f0ce:	2000      	movs	r0, #0
    f0d0:	4b02      	ldr	r3, [pc, #8]	; (f0dc <SetReceptionNotOkState+0x70>)
    f0d2:	4798      	blx	r3
    f0d4:	e7f5      	b.n	f0c2 <SetReceptionNotOkState+0x56>
    f0d6:	46c0      	nop			; (mov r8, r8)
    f0d8:	200023e4 	.word	0x200023e4
    f0dc:	0000ef49 	.word	0x0000ef49

0000f0e0 <UpdateCurrentDataRateAfterDataRangeChanges>:
    f0e0:	4b09      	ldr	r3, [pc, #36]	; (f108 <UpdateCurrentDataRateAfterDataRangeChanges+0x28>)
    f0e2:	001a      	movs	r2, r3
    f0e4:	32cb      	adds	r2, #203	; 0xcb
    f0e6:	7811      	ldrb	r1, [r2, #0]
    f0e8:	001a      	movs	r2, r3
    f0ea:	32bf      	adds	r2, #191	; 0xbf
    f0ec:	7810      	ldrb	r0, [r2, #0]
    f0ee:	4288      	cmp	r0, r1
    f0f0:	d900      	bls.n	f0f4 <UpdateCurrentDataRateAfterDataRangeChanges+0x14>
    f0f2:	7011      	strb	r1, [r2, #0]
    f0f4:	001a      	movs	r2, r3
    f0f6:	33bf      	adds	r3, #191	; 0xbf
    f0f8:	32ca      	adds	r2, #202	; 0xca
    f0fa:	7812      	ldrb	r2, [r2, #0]
    f0fc:	7819      	ldrb	r1, [r3, #0]
    f0fe:	4291      	cmp	r1, r2
    f100:	d200      	bcs.n	f104 <UpdateCurrentDataRateAfterDataRangeChanges+0x24>
    f102:	701a      	strb	r2, [r3, #0]
    f104:	4770      	bx	lr
    f106:	46c0      	nop			; (mov r8, r8)
    f108:	200023e4 	.word	0x200023e4

0000f10c <ExecuteNewChannel>:
    f10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f10e:	b08d      	sub	sp, #52	; 0x34
    f110:	7807      	ldrb	r7, [r0, #0]
    f112:	ab02      	add	r3, sp, #8
    f114:	0006      	movs	r6, r0
    f116:	71df      	strb	r7, [r3, #7]
    f118:	1c41      	adds	r1, r0, #1
    f11a:	4b59      	ldr	r3, [pc, #356]	; (f280 <ExecuteNewChannel+0x174>)
    f11c:	2204      	movs	r2, #4
    f11e:	a808      	add	r0, sp, #32
    f120:	4798      	blx	r3
    f122:	9b08      	ldr	r3, [sp, #32]
    f124:	4c57      	ldr	r4, [pc, #348]	; (f284 <ExecuteNewChannel+0x178>)
    f126:	021d      	lsls	r5, r3, #8
    f128:	2364      	movs	r3, #100	; 0x64
    f12a:	0a2d      	lsrs	r5, r5, #8
    f12c:	435d      	muls	r5, r3
    f12e:	1d73      	adds	r3, r6, #5
    f130:	9301      	str	r3, [sp, #4]
    f132:	0023      	movs	r3, r4
    f134:	9508      	str	r5, [sp, #32]
    f136:	33d6      	adds	r3, #214	; 0xd6
    f138:	781b      	ldrb	r3, [r3, #0]
    f13a:	3b02      	subs	r3, #2
    f13c:	2b01      	cmp	r3, #1
    f13e:	d800      	bhi.n	f142 <ExecuteNewChannel+0x36>
    f140:	e092      	b.n	f268 <ExecuteNewChannel+0x15c>
    f142:	7933      	ldrb	r3, [r6, #4]
    f144:	a904      	add	r1, sp, #16
    f146:	9300      	str	r3, [sp, #0]
    f148:	2300      	movs	r3, #0
    f14a:	2015      	movs	r0, #21
    f14c:	4e4e      	ldr	r6, [pc, #312]	; (f288 <ExecuteNewChannel+0x17c>)
    f14e:	700f      	strb	r7, [r1, #0]
    f150:	704b      	strb	r3, [r1, #1]
    f152:	47b0      	blx	r6
    f154:	2808      	cmp	r0, #8
    f156:	d12b      	bne.n	f1b0 <ExecuteNewChannel+0xa4>
    f158:	466a      	mov	r2, sp
    f15a:	ab02      	add	r3, sp, #8
    f15c:	79db      	ldrb	r3, [r3, #7]
    f15e:	7812      	ldrb	r2, [r2, #0]
    f160:	af06      	add	r7, sp, #24
    f162:	a90a      	add	r1, sp, #40	; 0x28
    f164:	3806      	subs	r0, #6
    f166:	703b      	strb	r3, [r7, #0]
    f168:	707a      	strb	r2, [r7, #1]
    f16a:	710b      	strb	r3, [r1, #4]
    f16c:	950a      	str	r5, [sp, #40]	; 0x28
    f16e:	47b0      	blx	r6
    f170:	2808      	cmp	r0, #8
    f172:	d001      	beq.n	f178 <ExecuteNewChannel+0x6c>
    f174:	2d00      	cmp	r5, #0
    f176:	d10b      	bne.n	f190 <ExecuteNewChannel+0x84>
    f178:	0023      	movs	r3, r4
    f17a:	33b8      	adds	r3, #184	; 0xb8
    f17c:	781a      	ldrb	r2, [r3, #0]
    f17e:	2303      	movs	r3, #3
    f180:	4353      	muls	r3, r2
    f182:	2280      	movs	r2, #128	; 0x80
    f184:	18e3      	adds	r3, r4, r3
    f186:	3370      	adds	r3, #112	; 0x70
    f188:	7899      	ldrb	r1, [r3, #2]
    f18a:	4252      	negs	r2, r2
    f18c:	430a      	orrs	r2, r1
    f18e:	709a      	strb	r2, [r3, #2]
    f190:	0039      	movs	r1, r7
    f192:	2012      	movs	r0, #18
    f194:	47b0      	blx	r6
    f196:	2808      	cmp	r0, #8
    f198:	d10a      	bne.n	f1b0 <ExecuteNewChannel+0xa4>
    f19a:	0023      	movs	r3, r4
    f19c:	33b8      	adds	r3, #184	; 0xb8
    f19e:	781a      	ldrb	r2, [r3, #0]
    f1a0:	2303      	movs	r3, #3
    f1a2:	4353      	muls	r3, r2
    f1a4:	2240      	movs	r2, #64	; 0x40
    f1a6:	18e3      	adds	r3, r4, r3
    f1a8:	3370      	adds	r3, #112	; 0x70
    f1aa:	7899      	ldrb	r1, [r3, #2]
    f1ac:	430a      	orrs	r2, r1
    f1ae:	709a      	strb	r2, [r3, #2]
    f1b0:	0023      	movs	r3, r4
    f1b2:	33b8      	adds	r3, #184	; 0xb8
    f1b4:	781a      	ldrb	r2, [r3, #0]
    f1b6:	2303      	movs	r3, #3
    f1b8:	4353      	muls	r3, r2
    f1ba:	18e3      	adds	r3, r4, r3
    f1bc:	3370      	adds	r3, #112	; 0x70
    f1be:	789b      	ldrb	r3, [r3, #2]
    f1c0:	09da      	lsrs	r2, r3, #7
    f1c2:	2a01      	cmp	r2, #1
    f1c4:	d150      	bne.n	f268 <ExecuteNewChannel+0x15c>
    f1c6:	065b      	lsls	r3, r3, #25
    f1c8:	d54e      	bpl.n	f268 <ExecuteNewChannel+0x15c>
    f1ca:	4e30      	ldr	r6, [pc, #192]	; (f28c <ExecuteNewChannel+0x180>)
    f1cc:	2d00      	cmp	r5, #0
    f1ce:	d04e      	beq.n	f26e <ExecuteNewChannel+0x162>
    f1d0:	a906      	add	r1, sp, #24
    f1d2:	2012      	movs	r0, #18
    f1d4:	47b0      	blx	r6
    f1d6:	ad07      	add	r5, sp, #28
    f1d8:	a90a      	add	r1, sp, #40	; 0x28
    f1da:	2000      	movs	r0, #0
    f1dc:	47b0      	blx	r6
    f1de:	002a      	movs	r2, r5
    f1e0:	2100      	movs	r1, #0
    f1e2:	2014      	movs	r0, #20
    f1e4:	4f2a      	ldr	r7, [pc, #168]	; (f290 <ExecuteNewChannel+0x184>)
    f1e6:	47b8      	blx	r7
    f1e8:	0023      	movs	r3, r4
    f1ea:	782a      	ldrb	r2, [r5, #0]
    f1ec:	33ca      	adds	r3, #202	; 0xca
    f1ee:	701a      	strb	r2, [r3, #0]
    f1f0:	0023      	movs	r3, r4
    f1f2:	786a      	ldrb	r2, [r5, #1]
    f1f4:	33cb      	adds	r3, #203	; 0xcb
    f1f6:	701a      	strb	r2, [r3, #0]
    f1f8:	34f0      	adds	r4, #240	; 0xf0
    f1fa:	4b26      	ldr	r3, [pc, #152]	; (f294 <ExecuteNewChannel+0x188>)
    f1fc:	4798      	blx	r3
    f1fe:	7823      	ldrb	r3, [r4, #0]
    f200:	079b      	lsls	r3, r3, #30
    f202:	d50e      	bpl.n	f222 <ExecuteNewChannel+0x116>
    f204:	2416      	movs	r4, #22
    f206:	ab02      	add	r3, sp, #8
    f208:	18e4      	adds	r4, r4, r3
    f20a:	1dd9      	adds	r1, r3, #7
    f20c:	0022      	movs	r2, r4
    f20e:	201e      	movs	r0, #30
    f210:	47b8      	blx	r7
    f212:	ab02      	add	r3, sp, #8
    f214:	79db      	ldrb	r3, [r3, #7]
    f216:	a909      	add	r1, sp, #36	; 0x24
    f218:	708b      	strb	r3, [r1, #2]
    f21a:	8823      	ldrh	r3, [r4, #0]
    f21c:	201e      	movs	r0, #30
    f21e:	800b      	strh	r3, [r1, #0]
    f220:	47b0      	blx	r6
    f222:	ab02      	add	r3, sp, #8
    f224:	79db      	ldrb	r3, [r3, #7]
    f226:	a905      	add	r1, sp, #20
    f228:	700b      	strb	r3, [r1, #0]
    f22a:	2301      	movs	r3, #1
    f22c:	2016      	movs	r0, #22
    f22e:	704b      	strb	r3, [r1, #1]
    f230:	4b16      	ldr	r3, [pc, #88]	; (f28c <ExecuteNewChannel+0x180>)
    f232:	4798      	blx	r3
    f234:	ad09      	add	r5, sp, #36	; 0x24
    f236:	2100      	movs	r1, #0
    f238:	002a      	movs	r2, r5
    f23a:	4b15      	ldr	r3, [pc, #84]	; (f290 <ExecuteNewChannel+0x184>)
    f23c:	2014      	movs	r0, #20
    f23e:	4798      	blx	r3
    f240:	4c10      	ldr	r4, [pc, #64]	; (f284 <ExecuteNewChannel+0x178>)
    f242:	782a      	ldrb	r2, [r5, #0]
    f244:	0023      	movs	r3, r4
    f246:	33ca      	adds	r3, #202	; 0xca
    f248:	701a      	strb	r2, [r3, #0]
    f24a:	0023      	movs	r3, r4
    f24c:	786a      	ldrb	r2, [r5, #1]
    f24e:	33cb      	adds	r3, #203	; 0xcb
    f250:	701a      	strb	r2, [r3, #0]
    f252:	4b10      	ldr	r3, [pc, #64]	; (f294 <ExecuteNewChannel+0x188>)
    f254:	4798      	blx	r3
    f256:	2304      	movs	r3, #4
    f258:	345c      	adds	r4, #92	; 0x5c
    f25a:	7862      	ldrb	r2, [r4, #1]
    f25c:	210b      	movs	r1, #11
    f25e:	4313      	orrs	r3, r2
    f260:	7063      	strb	r3, [r4, #1]
    f262:	2001      	movs	r0, #1
    f264:	4b0c      	ldr	r3, [pc, #48]	; (f298 <ExecuteNewChannel+0x18c>)
    f266:	4798      	blx	r3
    f268:	9801      	ldr	r0, [sp, #4]
    f26a:	b00d      	add	sp, #52	; 0x34
    f26c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f26e:	ab02      	add	r3, sp, #8
    f270:	79db      	ldrb	r3, [r3, #7]
    f272:	a905      	add	r1, sp, #20
    f274:	2016      	movs	r0, #22
    f276:	700b      	strb	r3, [r1, #0]
    f278:	704d      	strb	r5, [r1, #1]
    f27a:	47b0      	blx	r6
    f27c:	e7da      	b.n	f234 <ExecuteNewChannel+0x128>
    f27e:	46c0      	nop			; (mov r8, r8)
    f280:	00015f45 	.word	0x00015f45
    f284:	200023e4 	.word	0x200023e4
    f288:	0000aa8d 	.word	0x0000aa8d
    f28c:	0000ab99 	.word	0x0000ab99
    f290:	0000aa71 	.word	0x0000aa71
    f294:	0000f0e1 	.word	0x0000f0e1
    f298:	0000af89 	.word	0x0000af89

0000f29c <MacExecuteCommands>:
    f29c:	2300      	movs	r3, #0
    f29e:	b5f0      	push	{r4, r5, r6, r7, lr}
    f2a0:	0007      	movs	r7, r0
    f2a2:	2501      	movs	r5, #1
    f2a4:	b087      	sub	sp, #28
    f2a6:	9002      	str	r0, [sp, #8]
    f2a8:	9103      	str	r1, [sp, #12]
    f2aa:	9300      	str	r3, [sp, #0]
    f2ac:	9b02      	ldr	r3, [sp, #8]
    f2ae:	9a03      	ldr	r2, [sp, #12]
    f2b0:	4e63      	ldr	r6, [pc, #396]	; (f440 <MacExecuteCommands+0x1a4>)
    f2b2:	1898      	adds	r0, r3, r2
    f2b4:	4287      	cmp	r7, r0
    f2b6:	d353      	bcc.n	f360 <MacExecuteCommands+0xc4>
    f2b8:	23dd      	movs	r3, #221	; 0xdd
    f2ba:	005b      	lsls	r3, r3, #1
    f2bc:	5cf3      	ldrb	r3, [r6, r3]
    f2be:	2b00      	cmp	r3, #0
    f2c0:	d000      	beq.n	f2c4 <MacExecuteCommands+0x28>
    f2c2:	e072      	b.n	f3aa <MacExecuteCommands+0x10e>
    f2c4:	0038      	movs	r0, r7
    f2c6:	b007      	add	sp, #28
    f2c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f2ca:	0033      	movs	r3, r6
    f2cc:	787a      	ldrb	r2, [r7, #1]
    f2ce:	33bd      	adds	r3, #189	; 0xbd
    f2d0:	701a      	strb	r2, [r3, #0]
    f2d2:	0033      	movs	r3, r6
    f2d4:	78ba      	ldrb	r2, [r7, #2]
    f2d6:	33be      	adds	r3, #190	; 0xbe
    f2d8:	701a      	strb	r2, [r3, #0]
    f2da:	2203      	movs	r2, #3
    f2dc:	9b01      	ldr	r3, [sp, #4]
    f2de:	1cfc      	adds	r4, r7, #3
    f2e0:	4353      	muls	r3, r2
    f2e2:	18f3      	adds	r3, r6, r3
    f2e4:	3371      	adds	r3, #113	; 0x71
    f2e6:	32fc      	adds	r2, #252	; 0xfc
    f2e8:	701a      	strb	r2, [r3, #0]
    f2ea:	0032      	movs	r2, r6
    f2ec:	2103      	movs	r1, #3
    f2ee:	32b8      	adds	r2, #184	; 0xb8
    f2f0:	7813      	ldrb	r3, [r2, #0]
    f2f2:	4359      	muls	r1, r3
    f2f4:	1876      	adds	r6, r6, r1
    f2f6:	3671      	adds	r6, #113	; 0x71
    f2f8:	7831      	ldrb	r1, [r6, #0]
    f2fa:	29ff      	cmp	r1, #255	; 0xff
    f2fc:	d003      	beq.n	f306 <MacExecuteCommands+0x6a>
    f2fe:	2b0f      	cmp	r3, #15
    f300:	d801      	bhi.n	f306 <MacExecuteCommands+0x6a>
    f302:	3301      	adds	r3, #1
    f304:	7013      	strb	r3, [r2, #0]
    f306:	0027      	movs	r7, r4
    f308:	e7d0      	b.n	f2ac <MacExecuteCommands+0x10>
    f30a:	0020      	movs	r0, r4
    f30c:	4b4d      	ldr	r3, [pc, #308]	; (f444 <MacExecuteCommands+0x1a8>)
    f30e:	4798      	blx	r3
    f310:	0004      	movs	r4, r0
    f312:	e7ea      	b.n	f2ea <MacExecuteCommands+0x4e>
    f314:	0020      	movs	r0, r4
    f316:	4b4c      	ldr	r3, [pc, #304]	; (f448 <MacExecuteCommands+0x1ac>)
    f318:	e7f9      	b.n	f30e <MacExecuteCommands+0x72>
    f31a:	0020      	movs	r0, r4
    f31c:	4b4b      	ldr	r3, [pc, #300]	; (f44c <MacExecuteCommands+0x1b0>)
    f31e:	e7f6      	b.n	f30e <MacExecuteCommands+0x72>
    f320:	0020      	movs	r0, r4
    f322:	4b4b      	ldr	r3, [pc, #300]	; (f450 <MacExecuteCommands+0x1b4>)
    f324:	e7f3      	b.n	f30e <MacExecuteCommands+0x72>
    f326:	230f      	movs	r3, #15
    f328:	7878      	ldrb	r0, [r7, #1]
    f32a:	1cbc      	adds	r4, r7, #2
    f32c:	4018      	ands	r0, r3
    f32e:	4b49      	ldr	r3, [pc, #292]	; (f454 <MacExecuteCommands+0x1b8>)
    f330:	4798      	blx	r3
    f332:	0032      	movs	r2, r6
    f334:	2380      	movs	r3, #128	; 0x80
    f336:	325c      	adds	r2, #92	; 0x5c
    f338:	7851      	ldrb	r1, [r2, #1]
    f33a:	425b      	negs	r3, r3
    f33c:	430b      	orrs	r3, r1
    f33e:	7053      	strb	r3, [r2, #1]
    f340:	210b      	movs	r1, #11
    f342:	0028      	movs	r0, r5
    f344:	4b44      	ldr	r3, [pc, #272]	; (f458 <MacExecuteCommands+0x1bc>)
    f346:	4798      	blx	r3
    f348:	e7cf      	b.n	f2ea <MacExecuteCommands+0x4e>
    f34a:	0020      	movs	r0, r4
    f34c:	4b43      	ldr	r3, [pc, #268]	; (f45c <MacExecuteCommands+0x1c0>)
    f34e:	e7de      	b.n	f30e <MacExecuteCommands+0x72>
    f350:	0020      	movs	r0, r4
    f352:	4b43      	ldr	r3, [pc, #268]	; (f460 <MacExecuteCommands+0x1c4>)
    f354:	e7db      	b.n	f30e <MacExecuteCommands+0x72>
    f356:	22ff      	movs	r2, #255	; 0xff
    f358:	0004      	movs	r4, r0
    f35a:	701a      	strb	r2, [r3, #0]
    f35c:	9500      	str	r5, [sp, #0]
    f35e:	e7c4      	b.n	f2ea <MacExecuteCommands+0x4e>
    f360:	9b00      	ldr	r3, [sp, #0]
    f362:	2b00      	cmp	r3, #0
    f364:	d1a8      	bne.n	f2b8 <MacExecuteCommands+0x1c>
    f366:	0033      	movs	r3, r6
    f368:	33b8      	adds	r3, #184	; 0xb8
    f36a:	781b      	ldrb	r3, [r3, #0]
    f36c:	2401      	movs	r4, #1
    f36e:	9301      	str	r3, [sp, #4]
    f370:	2303      	movs	r3, #3
    f372:	9a01      	ldr	r2, [sp, #4]
    f374:	4353      	muls	r3, r2
    f376:	18f3      	adds	r3, r6, r3
    f378:	0019      	movs	r1, r3
    f37a:	3170      	adds	r1, #112	; 0x70
    f37c:	788a      	ldrb	r2, [r1, #2]
    f37e:	3371      	adds	r3, #113	; 0x71
    f380:	43aa      	bics	r2, r5
    f382:	4022      	ands	r2, r4
    f384:	708a      	strb	r2, [r1, #2]
    f386:	78ca      	ldrb	r2, [r1, #3]
    f388:	193c      	adds	r4, r7, r4
    f38a:	43aa      	bics	r2, r5
    f38c:	70ca      	strb	r2, [r1, #3]
    f38e:	783a      	ldrb	r2, [r7, #0]
    f390:	701a      	strb	r2, [r3, #0]
    f392:	783a      	ldrb	r2, [r7, #0]
    f394:	3a02      	subs	r2, #2
    f396:	2a08      	cmp	r2, #8
    f398:	d8dd      	bhi.n	f356 <MacExecuteCommands+0xba>
    f39a:	0010      	movs	r0, r2
    f39c:	f003 fc9a 	bl	12cd4 <__gnu_thumb1_case_sqi>
    f3a0:	bdbab595 	.word	0xbdbab595
    f3a4:	d5c3c0a5 	.word	0xd5c3c0a5
    f3a8:	d8          	.byte	0xd8
    f3a9:	00          	.byte	0x00
    f3aa:	23b8      	movs	r3, #184	; 0xb8
    f3ac:	33ff      	adds	r3, #255	; 0xff
    f3ae:	5cf3      	ldrb	r3, [r6, r3]
    f3b0:	43db      	mvns	r3, r3
    f3b2:	075b      	lsls	r3, r3, #29
    f3b4:	d000      	beq.n	f3b8 <MacExecuteCommands+0x11c>
    f3b6:	e785      	b.n	f2c4 <MacExecuteCommands+0x28>
    f3b8:	23be      	movs	r3, #190	; 0xbe
    f3ba:	33ff      	adds	r3, #255	; 0xff
    f3bc:	5cf4      	ldrb	r4, [r6, r3]
    f3be:	ad05      	add	r5, sp, #20
    f3c0:	0724      	lsls	r4, r4, #28
    f3c2:	0f24      	lsrs	r4, r4, #28
    f3c4:	b2e3      	uxtb	r3, r4
    f3c6:	9300      	str	r3, [sp, #0]
    f3c8:	23ba      	movs	r3, #186	; 0xba
    f3ca:	33ff      	adds	r3, #255	; 0xff
    f3cc:	5cf3      	ldrb	r3, [r6, r3]
    f3ce:	2100      	movs	r1, #0
    f3d0:	9301      	str	r3, [sp, #4]
    f3d2:	23dc      	movs	r3, #220	; 0xdc
    f3d4:	005b      	lsls	r3, r3, #1
    f3d6:	5cf3      	ldrb	r3, [r6, r3]
    f3d8:	002a      	movs	r2, r5
    f3da:	9302      	str	r3, [sp, #8]
    f3dc:	2014      	movs	r0, #20
    f3de:	4b21      	ldr	r3, [pc, #132]	; (f464 <MacExecuteCommands+0x1c8>)
    f3e0:	4798      	blx	r3
    f3e2:	0033      	movs	r3, r6
    f3e4:	782a      	ldrb	r2, [r5, #0]
    f3e6:	33ca      	adds	r3, #202	; 0xca
    f3e8:	701a      	strb	r2, [r3, #0]
    f3ea:	0033      	movs	r3, r6
    f3ec:	786a      	ldrb	r2, [r5, #1]
    f3ee:	33cb      	adds	r3, #203	; 0xcb
    f3f0:	701a      	strb	r2, [r3, #0]
    f3f2:	4b1d      	ldr	r3, [pc, #116]	; (f468 <MacExecuteCommands+0x1cc>)
    f3f4:	4798      	blx	r3
    f3f6:	9801      	ldr	r0, [sp, #4]
    f3f8:	4b1c      	ldr	r3, [pc, #112]	; (f46c <MacExecuteCommands+0x1d0>)
    f3fa:	4798      	blx	r3
    f3fc:	0032      	movs	r2, r6
    f3fe:	2308      	movs	r3, #8
    f400:	325c      	adds	r2, #92	; 0x5c
    f402:	7851      	ldrb	r1, [r2, #1]
    f404:	430b      	orrs	r3, r1
    f406:	7053      	strb	r3, [r2, #1]
    f408:	9802      	ldr	r0, [sp, #8]
    f40a:	4b19      	ldr	r3, [pc, #100]	; (f470 <MacExecuteCommands+0x1d4>)
    f40c:	4798      	blx	r3
    f40e:	0033      	movs	r3, r6
    f410:	b2e2      	uxtb	r2, r4
    f412:	33b9      	adds	r3, #185	; 0xb9
    f414:	2a00      	cmp	r2, #0
    f416:	d10e      	bne.n	f436 <MacExecuteCommands+0x19a>
    f418:	701c      	strb	r4, [r3, #0]
    f41a:	2114      	movs	r1, #20
    f41c:	4c0e      	ldr	r4, [pc, #56]	; (f458 <MacExecuteCommands+0x1bc>)
    f41e:	2000      	movs	r0, #0
    f420:	47a0      	blx	r4
    f422:	2210      	movs	r2, #16
    f424:	4b06      	ldr	r3, [pc, #24]	; (f440 <MacExecuteCommands+0x1a4>)
    f426:	2001      	movs	r0, #1
    f428:	335c      	adds	r3, #92	; 0x5c
    f42a:	7859      	ldrb	r1, [r3, #1]
    f42c:	430a      	orrs	r2, r1
    f42e:	705a      	strb	r2, [r3, #1]
    f430:	210b      	movs	r1, #11
    f432:	47a0      	blx	r4
    f434:	e746      	b.n	f2c4 <MacExecuteCommands+0x28>
    f436:	9a00      	ldr	r2, [sp, #0]
    f438:	3a01      	subs	r2, #1
    f43a:	701a      	strb	r2, [r3, #0]
    f43c:	e7ed      	b.n	f41a <MacExecuteCommands+0x17e>
    f43e:	46c0      	nop			; (mov r8, r8)
    f440:	200023e4 	.word	0x200023e4
    f444:	0000d7f5 	.word	0x0000d7f5
    f448:	0000d6b9 	.word	0x0000d6b9
    f44c:	0000d5bd 	.word	0x0000d5bd
    f450:	0000f10d 	.word	0x0000f10d
    f454:	0000cc3d 	.word	0x0000cc3d
    f458:	0000af89 	.word	0x0000af89
    f45c:	0000d7a5 	.word	0x0000d7a5
    f460:	0000d6f1 	.word	0x0000d6f1
    f464:	0000aa71 	.word	0x0000aa71
    f468:	0000f0e1 	.word	0x0000f0e1
    f46c:	0000d475 	.word	0x0000d475
    f470:	0000d409 	.word	0x0000d409

0000f474 <LorawanSetDataRange>:
    f474:	2201      	movs	r2, #1
    f476:	b530      	push	{r4, r5, lr}
    f478:	b085      	sub	sp, #20
    f47a:	ab01      	add	r3, sp, #4
    f47c:	ac02      	add	r4, sp, #8
    f47e:	7018      	strb	r0, [r3, #0]
    f480:	7020      	strb	r0, [r4, #0]
    f482:	7061      	strb	r1, [r4, #1]
    f484:	2015      	movs	r0, #21
    f486:	0019      	movs	r1, r3
    f488:	4d11      	ldr	r5, [pc, #68]	; (f4d0 <LorawanSetDataRange+0x5c>)
    f48a:	705a      	strb	r2, [r3, #1]
    f48c:	47a8      	blx	r5
    f48e:	2808      	cmp	r0, #8
    f490:	d003      	beq.n	f49a <LorawanSetDataRange+0x26>
    f492:	250a      	movs	r5, #10
    f494:	0028      	movs	r0, r5
    f496:	b005      	add	sp, #20
    f498:	bd30      	pop	{r4, r5, pc}
    f49a:	0021      	movs	r1, r4
    f49c:	2012      	movs	r0, #18
    f49e:	47a8      	blx	r5
    f4a0:	0005      	movs	r5, r0
    f4a2:	2808      	cmp	r0, #8
    f4a4:	d1f5      	bne.n	f492 <LorawanSetDataRange+0x1e>
    f4a6:	0021      	movs	r1, r4
    f4a8:	4b0a      	ldr	r3, [pc, #40]	; (f4d4 <LorawanSetDataRange+0x60>)
    f4aa:	ac03      	add	r4, sp, #12
    f4ac:	2012      	movs	r0, #18
    f4ae:	4798      	blx	r3
    f4b0:	0022      	movs	r2, r4
    f4b2:	2100      	movs	r1, #0
    f4b4:	4b08      	ldr	r3, [pc, #32]	; (f4d8 <LorawanSetDataRange+0x64>)
    f4b6:	2014      	movs	r0, #20
    f4b8:	4798      	blx	r3
    f4ba:	4b08      	ldr	r3, [pc, #32]	; (f4dc <LorawanSetDataRange+0x68>)
    f4bc:	7821      	ldrb	r1, [r4, #0]
    f4be:	001a      	movs	r2, r3
    f4c0:	32ca      	adds	r2, #202	; 0xca
    f4c2:	7011      	strb	r1, [r2, #0]
    f4c4:	7862      	ldrb	r2, [r4, #1]
    f4c6:	33cb      	adds	r3, #203	; 0xcb
    f4c8:	701a      	strb	r2, [r3, #0]
    f4ca:	4b05      	ldr	r3, [pc, #20]	; (f4e0 <LorawanSetDataRange+0x6c>)
    f4cc:	4798      	blx	r3
    f4ce:	e7e1      	b.n	f494 <LorawanSetDataRange+0x20>
    f4d0:	0000aa8d 	.word	0x0000aa8d
    f4d4:	0000ab99 	.word	0x0000ab99
    f4d8:	0000aa71 	.word	0x0000aa71
    f4dc:	200023e4 	.word	0x200023e4
    f4e0:	0000f0e1 	.word	0x0000f0e1

0000f4e4 <LorawanSetChannelIdStatus>:
    f4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    f4e6:	466b      	mov	r3, sp
    f4e8:	7018      	strb	r0, [r3, #0]
    f4ea:	7059      	strb	r1, [r3, #1]
    f4ec:	2016      	movs	r0, #22
    f4ee:	4669      	mov	r1, sp
    f4f0:	4b0c      	ldr	r3, [pc, #48]	; (f524 <LorawanSetChannelIdStatus+0x40>)
    f4f2:	4798      	blx	r3
    f4f4:	0004      	movs	r4, r0
    f4f6:	2808      	cmp	r0, #8
    f4f8:	d111      	bne.n	f51e <LorawanSetChannelIdStatus+0x3a>
    f4fa:	ad01      	add	r5, sp, #4
    f4fc:	002a      	movs	r2, r5
    f4fe:	2100      	movs	r1, #0
    f500:	4b09      	ldr	r3, [pc, #36]	; (f528 <LorawanSetChannelIdStatus+0x44>)
    f502:	2014      	movs	r0, #20
    f504:	4798      	blx	r3
    f506:	4b09      	ldr	r3, [pc, #36]	; (f52c <LorawanSetChannelIdStatus+0x48>)
    f508:	7829      	ldrb	r1, [r5, #0]
    f50a:	001a      	movs	r2, r3
    f50c:	32ca      	adds	r2, #202	; 0xca
    f50e:	7011      	strb	r1, [r2, #0]
    f510:	786a      	ldrb	r2, [r5, #1]
    f512:	33cb      	adds	r3, #203	; 0xcb
    f514:	701a      	strb	r2, [r3, #0]
    f516:	4b06      	ldr	r3, [pc, #24]	; (f530 <LorawanSetChannelIdStatus+0x4c>)
    f518:	4798      	blx	r3
    f51a:	0020      	movs	r0, r4
    f51c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f51e:	240a      	movs	r4, #10
    f520:	e7fb      	b.n	f51a <LorawanSetChannelIdStatus+0x36>
    f522:	46c0      	nop			; (mov r8, r8)
    f524:	0000ab99 	.word	0x0000ab99
    f528:	0000aa71 	.word	0x0000aa71
    f52c:	200023e4 	.word	0x200023e4
    f530:	0000f0e1 	.word	0x0000f0e1

0000f534 <LORAWAN_RxDone>:
    f534:	b5f0      	push	{r4, r5, r6, r7, lr}
    f536:	4ba3      	ldr	r3, [pc, #652]	; (f7c4 <LORAWAN_RxDone+0x290>)
    f538:	b093      	sub	sp, #76	; 0x4c
    f53a:	781b      	ldrb	r3, [r3, #0]
    f53c:	0007      	movs	r7, r0
    f53e:	b25a      	sxtb	r2, r3
    f540:	9105      	str	r1, [sp, #20]
    f542:	4ca1      	ldr	r4, [pc, #644]	; (f7c8 <LORAWAN_RxDone+0x294>)
    f544:	2a00      	cmp	r2, #0
    f546:	da01      	bge.n	f54c <LORAWAN_RxDone+0x18>
    f548:	f000 fcf8 	bl	ff3c <LORAWAN_RxDone+0xa08>
    f54c:	7801      	ldrb	r1, [r0, #0]
    f54e:	221f      	movs	r2, #31
    f550:	0008      	movs	r0, r1
    f552:	4390      	bics	r0, r2
    f554:	0002      	movs	r2, r0
    f556:	2820      	cmp	r0, #32
    f558:	d000      	beq.n	f55c <LORAWAN_RxDone+0x28>
    f55a:	e161      	b.n	f820 <LORAWAN_RxDone+0x2ec>
    f55c:	7822      	ldrb	r2, [r4, #0]
    f55e:	2a00      	cmp	r2, #0
    f560:	d001      	beq.n	f566 <LORAWAN_RxDone+0x32>
    f562:	f000 fcd7 	bl	ff14 <LORAWAN_RxDone+0x9e0>
    f566:	0022      	movs	r2, r4
    f568:	326c      	adds	r2, #108	; 0x6c
    f56a:	7812      	ldrb	r2, [r2, #0]
    f56c:	0752      	lsls	r2, r2, #29
    f56e:	d401      	bmi.n	f574 <LORAWAN_RxDone+0x40>
    f570:	f000 fcd0 	bl	ff14 <LORAWAN_RxDone+0x9e0>
    f574:	9b05      	ldr	r3, [sp, #20]
    f576:	3b01      	subs	r3, #1
    f578:	b2db      	uxtb	r3, r3
    f57a:	9306      	str	r3, [sp, #24]
    f57c:	4b93      	ldr	r3, [pc, #588]	; (f7cc <LORAWAN_RxDone+0x298>)
    f57e:	469c      	mov	ip, r3
    f580:	9b06      	ldr	r3, [sp, #24]
    f582:	2b00      	cmp	r3, #0
    f584:	d12a      	bne.n	f5dc <LORAWAN_RxDone+0xa8>
    f586:	9b05      	ldr	r3, [sp, #20]
    f588:	4660      	mov	r0, ip
    f58a:	1f1d      	subs	r5, r3, #4
    f58c:	b2eb      	uxtb	r3, r5
    f58e:	003a      	movs	r2, r7
    f590:	498f      	ldr	r1, [pc, #572]	; (f7d0 <LORAWAN_RxDone+0x29c>)
    f592:	4e90      	ldr	r6, [pc, #576]	; (f7d4 <LORAWAN_RxDone+0x2a0>)
    f594:	47b0      	blx	r6
    f596:	2204      	movs	r2, #4
    f598:	498d      	ldr	r1, [pc, #564]	; (f7d0 <LORAWAN_RxDone+0x29c>)
    f59a:	4b8f      	ldr	r3, [pc, #572]	; (f7d8 <LORAWAN_RxDone+0x2a4>)
    f59c:	a810      	add	r0, sp, #64	; 0x40
    f59e:	4798      	blx	r3
    f5a0:	9e10      	ldr	r6, [sp, #64]	; 0x40
    f5a2:	1979      	adds	r1, r7, r5
    f5a4:	2204      	movs	r2, #4
    f5a6:	4b8c      	ldr	r3, [pc, #560]	; (f7d8 <LORAWAN_RxDone+0x2a4>)
    f5a8:	a810      	add	r0, sp, #64	; 0x40
    f5aa:	960d      	str	r6, [sp, #52]	; 0x34
    f5ac:	4798      	blx	r3
    f5ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
    f5b0:	4b85      	ldr	r3, [pc, #532]	; (f7c8 <LORAWAN_RxDone+0x294>)
    f5b2:	210e      	movs	r1, #14
    f5b4:	42b2      	cmp	r2, r6
    f5b6:	d01f      	beq.n	f5f8 <LORAWAN_RxDone+0xc4>
    f5b8:	001a      	movs	r2, r3
    f5ba:	325c      	adds	r2, #92	; 0x5c
    f5bc:	7812      	ldrb	r2, [r2, #0]
    f5be:	400a      	ands	r2, r1
    f5c0:	2a0a      	cmp	r2, #10
    f5c2:	d005      	beq.n	f5d0 <LORAWAN_RxDone+0x9c>
    f5c4:	2a06      	cmp	r2, #6
    f5c6:	d106      	bne.n	f5d6 <LORAWAN_RxDone+0xa2>
    f5c8:	33d0      	adds	r3, #208	; 0xd0
    f5ca:	781b      	ldrb	r3, [r3, #0]
    f5cc:	2b00      	cmp	r3, #0
    f5ce:	d002      	beq.n	f5d6 <LORAWAN_RxDone+0xa2>
    f5d0:	200a      	movs	r0, #10
    f5d2:	4b82      	ldr	r3, [pc, #520]	; (f7dc <LORAWAN_RxDone+0x2a8>)
    f5d4:	4798      	blx	r3
    f5d6:	4b82      	ldr	r3, [pc, #520]	; (f7e0 <LORAWAN_RxDone+0x2ac>)
    f5d8:	4798      	blx	r3
    f5da:	e1a9      	b.n	f930 <LORAWAN_RxDone+0x3fc>
    f5dc:	9b05      	ldr	r3, [sp, #20]
    f5de:	9a06      	ldr	r2, [sp, #24]
    f5e0:	4661      	mov	r1, ip
    f5e2:	1a98      	subs	r0, r3, r2
    f5e4:	1838      	adds	r0, r7, r0
    f5e6:	4b7f      	ldr	r3, [pc, #508]	; (f7e4 <LORAWAN_RxDone+0x2b0>)
    f5e8:	4798      	blx	r3
    f5ea:	9b06      	ldr	r3, [sp, #24]
    f5ec:	2b10      	cmp	r3, #16
    f5ee:	d901      	bls.n	f5f4 <LORAWAN_RxDone+0xc0>
    f5f0:	3b10      	subs	r3, #16
    f5f2:	e7c1      	b.n	f578 <LORAWAN_RxDone+0x44>
    f5f4:	2300      	movs	r3, #0
    f5f6:	e7c0      	b.n	f57a <LORAWAN_RxDone+0x46>
    f5f8:	001a      	movs	r2, r3
    f5fa:	325c      	adds	r2, #92	; 0x5c
    f5fc:	7812      	ldrb	r2, [r2, #0]
    f5fe:	400a      	ands	r2, r1
    f600:	2a06      	cmp	r2, #6
    f602:	d103      	bne.n	f60c <LORAWAN_RxDone+0xd8>
    f604:	33c3      	adds	r3, #195	; 0xc3
    f606:	7818      	ldrb	r0, [r3, #0]
    f608:	4b77      	ldr	r3, [pc, #476]	; (f7e8 <LORAWAN_RxDone+0x2b4>)
    f60a:	4798      	blx	r3
    f60c:	7a3a      	ldrb	r2, [r7, #8]
    f60e:	79fb      	ldrb	r3, [r7, #7]
    f610:	0212      	lsls	r2, r2, #8
    f612:	431a      	orrs	r2, r3
    f614:	7a7b      	ldrb	r3, [r7, #9]
    f616:	2001      	movs	r0, #1
    f618:	041b      	lsls	r3, r3, #16
    f61a:	431a      	orrs	r2, r3
    f61c:	7abb      	ldrb	r3, [r7, #10]
    f61e:	061b      	lsls	r3, r3, #24
    f620:	4313      	orrs	r3, r2
    f622:	0a19      	lsrs	r1, r3, #8
    f624:	7063      	strb	r3, [r4, #1]
    f626:	70a1      	strb	r1, [r4, #2]
    f628:	0c19      	lsrs	r1, r3, #16
    f62a:	0e1b      	lsrs	r3, r3, #24
    f62c:	70e1      	strb	r1, [r4, #3]
    f62e:	7123      	strb	r3, [r4, #4]
    f630:	240f      	movs	r4, #15
    f632:	2103      	movs	r1, #3
    f634:	4b6d      	ldr	r3, [pc, #436]	; (f7ec <LORAWAN_RxDone+0x2b8>)
    f636:	4798      	blx	r3
    f638:	7b38      	ldrb	r0, [r7, #12]
    f63a:	4b6d      	ldr	r3, [pc, #436]	; (f7f0 <LORAWAN_RxDone+0x2bc>)
    f63c:	4020      	ands	r0, r4
    f63e:	4798      	blx	r3
    f640:	7af8      	ldrb	r0, [r7, #11]
    f642:	4b6c      	ldr	r3, [pc, #432]	; (f7f4 <LORAWAN_RxDone+0x2c0>)
    f644:	0641      	lsls	r1, r0, #25
    f646:	0700      	lsls	r0, r0, #28
    f648:	0f49      	lsrs	r1, r1, #29
    f64a:	0f00      	lsrs	r0, r0, #28
    f64c:	4798      	blx	r3
    f64e:	9b05      	ldr	r3, [sp, #20]
    f650:	2b21      	cmp	r3, #33	; 0x21
    f652:	d000      	beq.n	f656 <LORAWAN_RxDone+0x122>
    f654:	e088      	b.n	f768 <LORAWAN_RxDone+0x234>
    f656:	2512      	movs	r5, #18
    f658:	ab06      	add	r3, sp, #24
    f65a:	18ed      	adds	r5, r5, r3
    f65c:	002a      	movs	r2, r5
    f65e:	4b66      	ldr	r3, [pc, #408]	; (f7f8 <LORAWAN_RxDone+0x2c4>)
    f660:	4966      	ldr	r1, [pc, #408]	; (f7fc <LORAWAN_RxDone+0x2c8>)
    f662:	2007      	movs	r0, #7
    f664:	4798      	blx	r3
    f666:	782b      	ldrb	r3, [r5, #0]
    f668:	2bff      	cmp	r3, #255	; 0xff
    f66a:	d07d      	beq.n	f768 <LORAWAN_RxDone+0x234>
    f66c:	2350      	movs	r3, #80	; 0x50
    f66e:	43a3      	bics	r3, r4
    f670:	9307      	str	r3, [sp, #28]
    f672:	003b      	movs	r3, r7
    f674:	330d      	adds	r3, #13
    f676:	9305      	str	r3, [sp, #20]
    f678:	2400      	movs	r4, #0
    f67a:	2203      	movs	r2, #3
    f67c:	9905      	ldr	r1, [sp, #20]
    f67e:	4b56      	ldr	r3, [pc, #344]	; (f7d8 <LORAWAN_RxDone+0x2a4>)
    f680:	a80e      	add	r0, sp, #56	; 0x38
    f682:	940e      	str	r4, [sp, #56]	; 0x38
    f684:	4798      	blx	r3
    f686:	2364      	movs	r3, #100	; 0x64
    f688:	990e      	ldr	r1, [sp, #56]	; 0x38
    f68a:	aa06      	add	r2, sp, #24
    f68c:	4359      	muls	r1, r3
    f68e:	3b52      	subs	r3, #82	; 0x52
    f690:	189b      	adds	r3, r3, r2
    f692:	7818      	ldrb	r0, [r3, #0]
    f694:	9b06      	ldr	r3, [sp, #24]
    f696:	910e      	str	r1, [sp, #56]	; 0x38
    f698:	1818      	adds	r0, r3, r0
    f69a:	b2c0      	uxtb	r0, r0
    f69c:	74d0      	strb	r0, [r2, #19]
    f69e:	42a1      	cmp	r1, r4
    f6a0:	d100      	bne.n	f6a4 <LORAWAN_RxDone+0x170>
    f6a2:	e08b      	b.n	f7bc <LORAWAN_RxDone+0x288>
    f6a4:	466b      	mov	r3, sp
    f6a6:	7f1b      	ldrb	r3, [r3, #28]
    f6a8:	ae10      	add	r6, sp, #64	; 0x40
    f6aa:	ad0b      	add	r5, sp, #44	; 0x2c
    f6ac:	7130      	strb	r0, [r6, #4]
    f6ae:	9110      	str	r1, [sp, #64]	; 0x40
    f6b0:	7028      	strb	r0, [r5, #0]
    f6b2:	706b      	strb	r3, [r5, #1]
    f6b4:	0031      	movs	r1, r6
    f6b6:	2002      	movs	r0, #2
    f6b8:	4b51      	ldr	r3, [pc, #324]	; (f800 <LORAWAN_RxDone+0x2cc>)
    f6ba:	4798      	blx	r3
    f6bc:	2808      	cmp	r0, #8
    f6be:	d13f      	bne.n	f740 <LORAWAN_RxDone+0x20c>
    f6c0:	0031      	movs	r1, r6
    f6c2:	0020      	movs	r0, r4
    f6c4:	4e4f      	ldr	r6, [pc, #316]	; (f804 <LORAWAN_RxDone+0x2d0>)
    f6c6:	47b0      	blx	r6
    f6c8:	0029      	movs	r1, r5
    f6ca:	2012      	movs	r0, #18
    f6cc:	ad0c      	add	r5, sp, #48	; 0x30
    f6ce:	47b0      	blx	r6
    f6d0:	0021      	movs	r1, r4
    f6d2:	002a      	movs	r2, r5
    f6d4:	4b48      	ldr	r3, [pc, #288]	; (f7f8 <LORAWAN_RxDone+0x2c4>)
    f6d6:	2014      	movs	r0, #20
    f6d8:	4798      	blx	r3
    f6da:	4c3b      	ldr	r4, [pc, #236]	; (f7c8 <LORAWAN_RxDone+0x294>)
    f6dc:	782a      	ldrb	r2, [r5, #0]
    f6de:	0023      	movs	r3, r4
    f6e0:	33ca      	adds	r3, #202	; 0xca
    f6e2:	701a      	strb	r2, [r3, #0]
    f6e4:	0023      	movs	r3, r4
    f6e6:	786a      	ldrb	r2, [r5, #1]
    f6e8:	251a      	movs	r5, #26
    f6ea:	33cb      	adds	r3, #203	; 0xcb
    f6ec:	701a      	strb	r2, [r3, #0]
    f6ee:	4b46      	ldr	r3, [pc, #280]	; (f808 <LORAWAN_RxDone+0x2d4>)
    f6f0:	4798      	blx	r3
    f6f2:	ab06      	add	r3, sp, #24
    f6f4:	18ed      	adds	r5, r5, r3
    f6f6:	2313      	movs	r3, #19
    f6f8:	a906      	add	r1, sp, #24
    f6fa:	185b      	adds	r3, r3, r1
    f6fc:	0019      	movs	r1, r3
    f6fe:	002a      	movs	r2, r5
    f700:	4b3d      	ldr	r3, [pc, #244]	; (f7f8 <LORAWAN_RxDone+0x2c4>)
    f702:	201e      	movs	r0, #30
    f704:	4798      	blx	r3
    f706:	0023      	movs	r3, r4
    f708:	33f0      	adds	r3, #240	; 0xf0
    f70a:	781b      	ldrb	r3, [r3, #0]
    f70c:	079b      	lsls	r3, r3, #30
    f70e:	d507      	bpl.n	f720 <LORAWAN_RxDone+0x1ec>
    f710:	ab06      	add	r3, sp, #24
    f712:	7cdb      	ldrb	r3, [r3, #19]
    f714:	a90f      	add	r1, sp, #60	; 0x3c
    f716:	708b      	strb	r3, [r1, #2]
    f718:	882b      	ldrh	r3, [r5, #0]
    f71a:	201e      	movs	r0, #30
    f71c:	800b      	strh	r3, [r1, #0]
    f71e:	47b0      	blx	r6
    f720:	2313      	movs	r3, #19
    f722:	aa06      	add	r2, sp, #24
    f724:	189b      	adds	r3, r3, r2
    f726:	7818      	ldrb	r0, [r3, #0]
    f728:	2101      	movs	r1, #1
    f72a:	4b38      	ldr	r3, [pc, #224]	; (f80c <LORAWAN_RxDone+0x2d8>)
    f72c:	4798      	blx	r3
    f72e:	2204      	movs	r2, #4
    f730:	345c      	adds	r4, #92	; 0x5c
    f732:	7863      	ldrb	r3, [r4, #1]
    f734:	210b      	movs	r1, #11
    f736:	4313      	orrs	r3, r2
    f738:	7063      	strb	r3, [r4, #1]
    f73a:	2001      	movs	r0, #1
    f73c:	4b2b      	ldr	r3, [pc, #172]	; (f7ec <LORAWAN_RxDone+0x2b8>)
    f73e:	4798      	blx	r3
    f740:	9b06      	ldr	r3, [sp, #24]
    f742:	3301      	adds	r3, #1
    f744:	b2db      	uxtb	r3, r3
    f746:	9306      	str	r3, [sp, #24]
    f748:	9b05      	ldr	r3, [sp, #20]
    f74a:	3303      	adds	r3, #3
    f74c:	9305      	str	r3, [sp, #20]
    f74e:	9b06      	ldr	r3, [sp, #24]
    f750:	2b05      	cmp	r3, #5
    f752:	d191      	bne.n	f678 <LORAWAN_RxDone+0x144>
    f754:	2204      	movs	r2, #4
    f756:	4b1c      	ldr	r3, [pc, #112]	; (f7c8 <LORAWAN_RxDone+0x294>)
    f758:	2001      	movs	r0, #1
    f75a:	335c      	adds	r3, #92	; 0x5c
    f75c:	7859      	ldrb	r1, [r3, #1]
    f75e:	430a      	orrs	r2, r1
    f760:	705a      	strb	r2, [r3, #1]
    f762:	210b      	movs	r1, #11
    f764:	4b21      	ldr	r3, [pc, #132]	; (f7ec <LORAWAN_RxDone+0x2b8>)
    f766:	4798      	blx	r3
    f768:	4c29      	ldr	r4, [pc, #164]	; (f810 <LORAWAN_RxDone+0x2dc>)
    f76a:	1c7e      	adds	r6, r7, #1
    f76c:	3704      	adds	r7, #4
    f76e:	0031      	movs	r1, r6
    f770:	0020      	movs	r0, r4
    f772:	003a      	movs	r2, r7
    f774:	4b27      	ldr	r3, [pc, #156]	; (f814 <LORAWAN_RxDone+0x2e0>)
    f776:	4798      	blx	r3
    f778:	2302      	movs	r3, #2
    f77a:	4a13      	ldr	r2, [pc, #76]	; (f7c8 <LORAWAN_RxDone+0x294>)
    f77c:	4d13      	ldr	r5, [pc, #76]	; (f7cc <LORAWAN_RxDone+0x298>)
    f77e:	7553      	strb	r3, [r2, #21]
    f780:	0020      	movs	r0, r4
    f782:	0029      	movs	r1, r5
    f784:	4b17      	ldr	r3, [pc, #92]	; (f7e4 <LORAWAN_RxDone+0x2b0>)
    f786:	4798      	blx	r3
    f788:	2105      	movs	r1, #5
    f78a:	4b18      	ldr	r3, [pc, #96]	; (f7ec <LORAWAN_RxDone+0x2b8>)
    f78c:	2001      	movs	r0, #1
    f78e:	4798      	blx	r3
    f790:	0031      	movs	r1, r6
    f792:	2601      	movs	r6, #1
    f794:	4c20      	ldr	r4, [pc, #128]	; (f818 <LORAWAN_RxDone+0x2e4>)
    f796:	003a      	movs	r2, r7
    f798:	0020      	movs	r0, r4
    f79a:	4b1e      	ldr	r3, [pc, #120]	; (f814 <LORAWAN_RxDone+0x2e0>)
    f79c:	4798      	blx	r3
    f79e:	4b0a      	ldr	r3, [pc, #40]	; (f7c8 <LORAWAN_RxDone+0x294>)
    f7a0:	0029      	movs	r1, r5
    f7a2:	715e      	strb	r6, [r3, #5]
    f7a4:	0020      	movs	r0, r4
    f7a6:	4b0f      	ldr	r3, [pc, #60]	; (f7e4 <LORAWAN_RxDone+0x2b0>)
    f7a8:	4798      	blx	r3
    f7aa:	2104      	movs	r1, #4
    f7ac:	4b0f      	ldr	r3, [pc, #60]	; (f7ec <LORAWAN_RxDone+0x2b8>)
    f7ae:	0030      	movs	r0, r6
    f7b0:	4798      	blx	r3
    f7b2:	4b1a      	ldr	r3, [pc, #104]	; (f81c <LORAWAN_RxDone+0x2e8>)
    f7b4:	4798      	blx	r3
    f7b6:	2008      	movs	r0, #8
    f7b8:	b013      	add	sp, #76	; 0x4c
    f7ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f7bc:	4b13      	ldr	r3, [pc, #76]	; (f80c <LORAWAN_RxDone+0x2d8>)
    f7be:	4798      	blx	r3
    f7c0:	e7be      	b.n	f740 <LORAWAN_RxDone+0x20c>
    f7c2:	46c0      	nop			; (mov r8, r8)
    f7c4:	20002440 	.word	0x20002440
    f7c8:	200023e4 	.word	0x200023e4
    f7cc:	20002409 	.word	0x20002409
    f7d0:	20000fda 	.word	0x20000fda
    f7d4:	00010775 	.word	0x00010775
    f7d8:	00015f45 	.word	0x00015f45
    f7dc:	0000d559 	.word	0x0000d559
    f7e0:	0000f06d 	.word	0x0000f06d
    f7e4:	00010735 	.word	0x00010735
    f7e8:	0000c235 	.word	0x0000c235
    f7ec:	0000af89 	.word	0x0000af89
    f7f0:	0000cc3d 	.word	0x0000cc3d
    f7f4:	0000d425 	.word	0x0000d425
    f7f8:	0000aa71 	.word	0x0000aa71
    f7fc:	200024a3 	.word	0x200024a3
    f800:	0000aa8d 	.word	0x0000aa8d
    f804:	0000ab99 	.word	0x0000ab99
    f808:	0000f0e1 	.word	0x0000f0e1
    f80c:	0000f4e5 	.word	0x0000f4e5
    f810:	200023f9 	.word	0x200023f9
    f814:	0000cf21 	.word	0x0000cf21
    f818:	200023e9 	.word	0x200023e9
    f81c:	0000ce39 	.word	0x0000ce39
    f820:	20bf      	movs	r0, #191	; 0xbf
    f822:	3a60      	subs	r2, #96	; 0x60
    f824:	4002      	ands	r2, r0
    f826:	d000      	beq.n	f82a <LORAWAN_RxDone+0x2f6>
    f828:	e374      	b.n	ff14 <LORAWAN_RxDone+0x9e0>
    f82a:	38be      	subs	r0, #190	; 0xbe
    f82c:	4203      	tst	r3, r0
    f82e:	d100      	bne.n	f832 <LORAWAN_RxDone+0x2fe>
    f830:	e370      	b.n	ff14 <LORAWAN_RxDone+0x9e0>
    f832:	6823      	ldr	r3, [r4, #0]
    f834:	0a18      	lsrs	r0, r3, #8
    f836:	7923      	ldrb	r3, [r4, #4]
    f838:	061b      	lsls	r3, r3, #24
    f83a:	4303      	orrs	r3, r0
    f83c:	0020      	movs	r0, r4
    f83e:	30b8      	adds	r0, #184	; 0xb8
    f840:	7002      	strb	r2, [r0, #0]
    f842:	78bd      	ldrb	r5, [r7, #2]
    f844:	787e      	ldrb	r6, [r7, #1]
    f846:	022d      	lsls	r5, r5, #8
    f848:	432e      	orrs	r6, r5
    f84a:	78fd      	ldrb	r5, [r7, #3]
    f84c:	7938      	ldrb	r0, [r7, #4]
    f84e:	042d      	lsls	r5, r5, #16
    f850:	4335      	orrs	r5, r6
    f852:	0600      	lsls	r0, r0, #24
    f854:	4305      	orrs	r5, r0
    f856:	42ab      	cmp	r3, r5
    f858:	d079      	beq.n	f94e <LORAWAN_RxDone+0x41a>
    f85a:	251a      	movs	r5, #26
    f85c:	ab06      	add	r3, sp, #24
    f85e:	18ed      	adds	r5, r5, r3
    f860:	7a3a      	ldrb	r2, [r7, #8]
    f862:	0949      	lsrs	r1, r1, #5
    f864:	002b      	movs	r3, r5
    f866:	0038      	movs	r0, r7
    f868:	4e8c      	ldr	r6, [pc, #560]	; (fa9c <LORAWAN_RxDone+0x568>)
    f86a:	47b0      	blx	r6
    f86c:	2808      	cmp	r0, #8
    f86e:	d157      	bne.n	f920 <LORAWAN_RxDone+0x3ec>
    f870:	232c      	movs	r3, #44	; 0x2c
    f872:	782a      	ldrb	r2, [r5, #0]
    f874:	4353      	muls	r3, r2
    f876:	001a      	movs	r2, r3
    f878:	3209      	adds	r2, #9
    f87a:	32ff      	adds	r2, #255	; 0xff
    f87c:	1912      	adds	r2, r2, r4
    f87e:	18e4      	adds	r4, r4, r3
    f880:	2301      	movs	r3, #1
    f882:	34fc      	adds	r4, #252	; 0xfc
    f884:	68a5      	ldr	r5, [r4, #8]
    f886:	9208      	str	r2, [sp, #32]
    f888:	9307      	str	r3, [sp, #28]
    f88a:	4c85      	ldr	r4, [pc, #532]	; (faa0 <LORAWAN_RxDone+0x56c>)
    f88c:	0021      	movs	r1, r4
    f88e:	6e63      	ldr	r3, [r4, #100]	; 0x64
    f890:	3164      	adds	r1, #100	; 0x64
    f892:	9309      	str	r3, [sp, #36]	; 0x24
    f894:	79fb      	ldrb	r3, [r7, #7]
    f896:	79ba      	ldrb	r2, [r7, #6]
    f898:	021b      	lsls	r3, r3, #8
    f89a:	4313      	orrs	r3, r2
    f89c:	880a      	ldrh	r2, [r1, #0]
    f89e:	4293      	cmp	r3, r2
    f8a0:	d36d      	bcc.n	f97e <LORAWAN_RxDone+0x44a>
    f8a2:	0020      	movs	r0, r4
    f8a4:	30b0      	adds	r0, #176	; 0xb0
    f8a6:	8800      	ldrh	r0, [r0, #0]
    f8a8:	1a9a      	subs	r2, r3, r2
    f8aa:	4e7e      	ldr	r6, [pc, #504]	; (faa4 <LORAWAN_RxDone+0x570>)
    f8ac:	4282      	cmp	r2, r0
    f8ae:	dd52      	ble.n	f956 <LORAWAN_RxDone+0x422>
    f8b0:	0022      	movs	r2, r4
    f8b2:	2101      	movs	r1, #1
    f8b4:	326c      	adds	r2, #108	; 0x6c
    f8b6:	7813      	ldrb	r3, [r2, #0]
    f8b8:	438b      	bics	r3, r1
    f8ba:	7013      	strb	r3, [r2, #0]
    f8bc:	0023      	movs	r3, r4
    f8be:	33d4      	adds	r3, #212	; 0xd4
    f8c0:	781b      	ldrb	r3, [r3, #0]
    f8c2:	428b      	cmp	r3, r1
    f8c4:	d108      	bne.n	f8d8 <LORAWAN_RxDone+0x3a4>
    f8c6:	0023      	movs	r3, r4
    f8c8:	220e      	movs	r2, #14
    f8ca:	335c      	adds	r3, #92	; 0x5c
    f8cc:	781b      	ldrb	r3, [r3, #0]
    f8ce:	4013      	ands	r3, r2
    f8d0:	2b06      	cmp	r3, #6
    f8d2:	d101      	bne.n	f8d8 <LORAWAN_RxDone+0x3a4>
    f8d4:	4b74      	ldr	r3, [pc, #464]	; (faa8 <LORAWAN_RxDone+0x574>)
    f8d6:	4798      	blx	r3
    f8d8:	4974      	ldr	r1, [pc, #464]	; (faac <LORAWAN_RxDone+0x578>)
    f8da:	784a      	ldrb	r2, [r1, #1]
    f8dc:	780b      	ldrb	r3, [r1, #0]
    f8de:	0212      	lsls	r2, r2, #8
    f8e0:	431a      	orrs	r2, r3
    f8e2:	788b      	ldrb	r3, [r1, #2]
    f8e4:	041b      	lsls	r3, r3, #16
    f8e6:	431a      	orrs	r2, r3
    f8e8:	78cb      	ldrb	r3, [r1, #3]
    f8ea:	061b      	lsls	r3, r3, #24
    f8ec:	4313      	orrs	r3, r2
    f8ee:	d008      	beq.n	f902 <LORAWAN_RxDone+0x3ce>
    f8f0:	0022      	movs	r2, r4
    f8f2:	2120      	movs	r1, #32
    f8f4:	326c      	adds	r2, #108	; 0x6c
    f8f6:	7813      	ldrb	r3, [r2, #0]
    f8f8:	2017      	movs	r0, #23
    f8fa:	438b      	bics	r3, r1
    f8fc:	7013      	strb	r3, [r2, #0]
    f8fe:	4b6c      	ldr	r3, [pc, #432]	; (fab0 <LORAWAN_RxDone+0x57c>)
    f900:	4798      	blx	r3
    f902:	2501      	movs	r5, #1
    f904:	345c      	adds	r4, #92	; 0x5c
    f906:	7863      	ldrb	r3, [r4, #1]
    f908:	43ab      	bics	r3, r5
    f90a:	7063      	strb	r3, [r4, #1]
    f90c:	78a3      	ldrb	r3, [r4, #2]
    f90e:	432b      	orrs	r3, r5
    f910:	70a3      	strb	r3, [r4, #2]
    f912:	4b68      	ldr	r3, [pc, #416]	; (fab4 <LORAWAN_RxDone+0x580>)
    f914:	4798      	blx	r3
    f916:	210b      	movs	r1, #11
    f918:	0028      	movs	r0, r5
    f91a:	47b0      	blx	r6
    f91c:	200d      	movs	r0, #13
    f91e:	e74b      	b.n	f7b8 <LORAWAN_RxDone+0x284>
    f920:	220e      	movs	r2, #14
    f922:	4b65      	ldr	r3, [pc, #404]	; (fab8 <LORAWAN_RxDone+0x584>)
    f924:	781b      	ldrb	r3, [r3, #0]
    f926:	4013      	ands	r3, r2
    f928:	2b0a      	cmp	r3, #10
    f92a:	d008      	beq.n	f93e <LORAWAN_RxDone+0x40a>
    f92c:	2b06      	cmp	r3, #6
    f92e:	d001      	beq.n	f934 <LORAWAN_RxDone+0x400>
    f930:	200a      	movs	r0, #10
    f932:	e741      	b.n	f7b8 <LORAWAN_RxDone+0x284>
    f934:	0023      	movs	r3, r4
    f936:	33d0      	adds	r3, #208	; 0xd0
    f938:	781b      	ldrb	r3, [r3, #0]
    f93a:	2b00      	cmp	r3, #0
    f93c:	d0f8      	beq.n	f930 <LORAWAN_RxDone+0x3fc>
    f93e:	2220      	movs	r2, #32
    f940:	201e      	movs	r0, #30
    f942:	346c      	adds	r4, #108	; 0x6c
    f944:	7823      	ldrb	r3, [r4, #0]
    f946:	4393      	bics	r3, r2
    f948:	7023      	strb	r3, [r4, #0]
    f94a:	4b59      	ldr	r3, [pc, #356]	; (fab0 <LORAWAN_RxDone+0x57c>)
    f94c:	e642      	b.n	f5d4 <LORAWAN_RxDone+0xa0>
    f94e:	4b5b      	ldr	r3, [pc, #364]	; (fabc <LORAWAN_RxDone+0x588>)
    f950:	9207      	str	r2, [sp, #28]
    f952:	9308      	str	r3, [sp, #32]
    f954:	e799      	b.n	f88a <LORAWAN_RxDone+0x356>
    f956:	800b      	strh	r3, [r1, #0]
    f958:	2001      	movs	r0, #1
    f95a:	210a      	movs	r1, #10
    f95c:	47b0      	blx	r6
    f95e:	4c50      	ldr	r4, [pc, #320]	; (faa0 <LORAWAN_RxDone+0x56c>)
    f960:	6e61      	ldr	r1, [r4, #100]	; 0x64
    f962:	1c4b      	adds	r3, r1, #1
    f964:	d13d      	bne.n	f9e2 <LORAWAN_RxDone+0x4ae>
    f966:	2501      	movs	r5, #1
    f968:	345c      	adds	r4, #92	; 0x5c
    f96a:	78a3      	ldrb	r3, [r4, #2]
    f96c:	432b      	orrs	r3, r5
    f96e:	70a3      	strb	r3, [r4, #2]
    f970:	4b50      	ldr	r3, [pc, #320]	; (fab4 <LORAWAN_RxDone+0x580>)
    f972:	4798      	blx	r3
    f974:	210b      	movs	r1, #11
    f976:	0028      	movs	r0, r5
    f978:	4b4a      	ldr	r3, [pc, #296]	; (faa4 <LORAWAN_RxDone+0x570>)
    f97a:	4798      	blx	r3
    f97c:	e7ce      	b.n	f91c <LORAWAN_RxDone+0x3e8>
    f97e:	4850      	ldr	r0, [pc, #320]	; (fac0 <LORAWAN_RxDone+0x58c>)
    f980:	1a9a      	subs	r2, r3, r2
    f982:	1812      	adds	r2, r2, r0
    f984:	484f      	ldr	r0, [pc, #316]	; (fac4 <LORAWAN_RxDone+0x590>)
    f986:	4282      	cmp	r2, r0
    f988:	dc09      	bgt.n	f99e <LORAWAN_RxDone+0x46a>
    f98a:	3466      	adds	r4, #102	; 0x66
    f98c:	800b      	strh	r3, [r1, #0]
    f98e:	8823      	ldrh	r3, [r4, #0]
    f990:	210a      	movs	r1, #10
    f992:	3301      	adds	r3, #1
    f994:	8023      	strh	r3, [r4, #0]
    f996:	2001      	movs	r0, #1
    f998:	4b42      	ldr	r3, [pc, #264]	; (faa4 <LORAWAN_RxDone+0x570>)
    f99a:	4798      	blx	r3
    f99c:	e7df      	b.n	f95e <LORAWAN_RxDone+0x42a>
    f99e:	0023      	movs	r3, r4
    f9a0:	33d4      	adds	r3, #212	; 0xd4
    f9a2:	781b      	ldrb	r3, [r3, #0]
    f9a4:	2b01      	cmp	r3, #1
    f9a6:	d108      	bne.n	f9ba <LORAWAN_RxDone+0x486>
    f9a8:	0023      	movs	r3, r4
    f9aa:	220e      	movs	r2, #14
    f9ac:	335c      	adds	r3, #92	; 0x5c
    f9ae:	781b      	ldrb	r3, [r3, #0]
    f9b0:	4013      	ands	r3, r2
    f9b2:	2b06      	cmp	r3, #6
    f9b4:	d101      	bne.n	f9ba <LORAWAN_RxDone+0x486>
    f9b6:	4b3c      	ldr	r3, [pc, #240]	; (faa8 <LORAWAN_RxDone+0x574>)
    f9b8:	4798      	blx	r3
    f9ba:	493c      	ldr	r1, [pc, #240]	; (faac <LORAWAN_RxDone+0x578>)
    f9bc:	784a      	ldrb	r2, [r1, #1]
    f9be:	780b      	ldrb	r3, [r1, #0]
    f9c0:	0212      	lsls	r2, r2, #8
    f9c2:	431a      	orrs	r2, r3
    f9c4:	788b      	ldrb	r3, [r1, #2]
    f9c6:	041b      	lsls	r3, r3, #16
    f9c8:	431a      	orrs	r2, r3
    f9ca:	78cb      	ldrb	r3, [r1, #3]
    f9cc:	061b      	lsls	r3, r3, #24
    f9ce:	4313      	orrs	r3, r2
    f9d0:	d100      	bne.n	f9d4 <LORAWAN_RxDone+0x4a0>
    f9d2:	e600      	b.n	f5d6 <LORAWAN_RxDone+0xa2>
    f9d4:	2220      	movs	r2, #32
    f9d6:	346c      	adds	r4, #108	; 0x6c
    f9d8:	7823      	ldrb	r3, [r4, #0]
    f9da:	2017      	movs	r0, #23
    f9dc:	4393      	bics	r3, r2
    f9de:	7023      	strb	r3, [r4, #0]
    f9e0:	e7b3      	b.n	f94a <LORAWAN_RxDone+0x416>
    f9e2:	9b05      	ldr	r3, [sp, #20]
    f9e4:	2001      	movs	r0, #1
    f9e6:	3b04      	subs	r3, #4
    f9e8:	9306      	str	r3, [sp, #24]
    f9ea:	466b      	mov	r3, sp
    f9ec:	7e1a      	ldrb	r2, [r3, #24]
    f9ee:	2349      	movs	r3, #73	; 0x49
    f9f0:	9500      	str	r5, [sp, #0]
    f9f2:	4d35      	ldr	r5, [pc, #212]	; (fac8 <LORAWAN_RxDone+0x594>)
    f9f4:	47a8      	blx	r5
    f9f6:	4e35      	ldr	r6, [pc, #212]	; (facc <LORAWAN_RxDone+0x598>)
    f9f8:	4d35      	ldr	r5, [pc, #212]	; (fad0 <LORAWAN_RxDone+0x59c>)
    f9fa:	2210      	movs	r2, #16
    f9fc:	4935      	ldr	r1, [pc, #212]	; (fad4 <LORAWAN_RxDone+0x5a0>)
    f9fe:	0030      	movs	r0, r6
    fa00:	47a8      	blx	r5
    fa02:	9a06      	ldr	r2, [sp, #24]
    fa04:	0039      	movs	r1, r7
    fa06:	4834      	ldr	r0, [pc, #208]	; (fad8 <LORAWAN_RxDone+0x5a4>)
    fa08:	47a8      	blx	r5
    fa0a:	9b05      	ldr	r3, [sp, #20]
    fa0c:	0032      	movs	r2, r6
    fa0e:	330c      	adds	r3, #12
    fa10:	b2db      	uxtb	r3, r3
    fa12:	4930      	ldr	r1, [pc, #192]	; (fad4 <LORAWAN_RxDone+0x5a0>)
    fa14:	9808      	ldr	r0, [sp, #32]
    fa16:	4e31      	ldr	r6, [pc, #196]	; (fadc <LORAWAN_RxDone+0x5a8>)
    fa18:	47b0      	blx	r6
    fa1a:	2204      	movs	r2, #4
    fa1c:	492d      	ldr	r1, [pc, #180]	; (fad4 <LORAWAN_RxDone+0x5a0>)
    fa1e:	a80d      	add	r0, sp, #52	; 0x34
    fa20:	47a8      	blx	r5
    fa22:	9b06      	ldr	r3, [sp, #24]
    fa24:	2204      	movs	r2, #4
    fa26:	18f9      	adds	r1, r7, r3
    fa28:	a810      	add	r0, sp, #64	; 0x40
    fa2a:	47a8      	blx	r5
    fa2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    fa2e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fa30:	4293      	cmp	r3, r2
    fa32:	d024      	beq.n	fa7e <LORAWAN_RxDone+0x54a>
    fa34:	0023      	movs	r3, r4
    fa36:	33d4      	adds	r3, #212	; 0xd4
    fa38:	781b      	ldrb	r3, [r3, #0]
    fa3a:	2b01      	cmp	r3, #1
    fa3c:	d107      	bne.n	fa4e <LORAWAN_RxDone+0x51a>
    fa3e:	220e      	movs	r2, #14
    fa40:	345c      	adds	r4, #92	; 0x5c
    fa42:	7823      	ldrb	r3, [r4, #0]
    fa44:	4013      	ands	r3, r2
    fa46:	2b06      	cmp	r3, #6
    fa48:	d101      	bne.n	fa4e <LORAWAN_RxDone+0x51a>
    fa4a:	4b17      	ldr	r3, [pc, #92]	; (faa8 <LORAWAN_RxDone+0x574>)
    fa4c:	4798      	blx	r3
    fa4e:	4917      	ldr	r1, [pc, #92]	; (faac <LORAWAN_RxDone+0x578>)
    fa50:	784a      	ldrb	r2, [r1, #1]
    fa52:	780b      	ldrb	r3, [r1, #0]
    fa54:	0212      	lsls	r2, r2, #8
    fa56:	431a      	orrs	r2, r3
    fa58:	788b      	ldrb	r3, [r1, #2]
    fa5a:	041b      	lsls	r3, r3, #16
    fa5c:	431a      	orrs	r2, r3
    fa5e:	78cb      	ldrb	r3, [r1, #3]
    fa60:	061b      	lsls	r3, r3, #24
    fa62:	4313      	orrs	r3, r2
    fa64:	d100      	bne.n	fa68 <LORAWAN_RxDone+0x534>
    fa66:	e5b6      	b.n	f5d6 <LORAWAN_RxDone+0xa2>
    fa68:	4a0d      	ldr	r2, [pc, #52]	; (faa0 <LORAWAN_RxDone+0x56c>)
    fa6a:	2020      	movs	r0, #32
    fa6c:	0011      	movs	r1, r2
    fa6e:	316c      	adds	r1, #108	; 0x6c
    fa70:	780b      	ldrb	r3, [r1, #0]
    fa72:	4383      	bics	r3, r0
    fa74:	700b      	strb	r3, [r1, #0]
    fa76:	9b09      	ldr	r3, [sp, #36]	; 0x24
    fa78:	3808      	subs	r0, #8
    fa7a:	6653      	str	r3, [r2, #100]	; 0x64
    fa7c:	e765      	b.n	f94a <LORAWAN_RxDone+0x416>
    fa7e:	9b07      	ldr	r3, [sp, #28]
    fa80:	2b00      	cmp	r3, #0
    fa82:	d02f      	beq.n	fae4 <LORAWAN_RxDone+0x5b0>
    fa84:	231a      	movs	r3, #26
    fa86:	aa06      	add	r2, sp, #24
    fa88:	189b      	adds	r3, r3, r2
    fa8a:	781b      	ldrb	r3, [r3, #0]
    fa8c:	003a      	movs	r2, r7
    fa8e:	9905      	ldr	r1, [sp, #20]
    fa90:	0038      	movs	r0, r7
    fa92:	4c13      	ldr	r4, [pc, #76]	; (fae0 <LORAWAN_RxDone+0x5ac>)
    fa94:	47a0      	blx	r4
    fa96:	2001      	movs	r0, #1
    fa98:	e68e      	b.n	f7b8 <LORAWAN_RxDone+0x284>
    fa9a:	46c0      	nop			; (mov r8, r8)
    fa9c:	00010b55 	.word	0x00010b55
    faa0:	200023e4 	.word	0x200023e4
    faa4:	0000af89 	.word	0x0000af89
    faa8:	0000cff5 	.word	0x0000cff5
    faac:	200026b8 	.word	0x200026b8
    fab0:	0000e2d9 	.word	0x0000e2d9
    fab4:	0000f06d 	.word	0x0000f06d
    fab8:	20002440 	.word	0x20002440
    fabc:	200023e9 	.word	0x200023e9
    fac0:	0000ffff 	.word	0x0000ffff
    fac4:	00003fff 	.word	0x00003fff
    fac8:	0000cf5d 	.word	0x0000cf5d
    facc:	200026c0 	.word	0x200026c0
    fad0:	00015f45 	.word	0x00015f45
    fad4:	20000fda 	.word	0x20000fda
    fad8:	200026d0 	.word	0x200026d0
    fadc:	00010775 	.word	0x00010775
    fae0:	00010bc9 	.word	0x00010bc9
    fae4:	466a      	mov	r2, sp
    fae6:	0023      	movs	r3, r4
    fae8:	7f12      	ldrb	r2, [r2, #28]
    faea:	33bb      	adds	r3, #187	; 0xbb
    faec:	701a      	strb	r2, [r3, #0]
    faee:	797b      	ldrb	r3, [r7, #5]
    faf0:	2b7f      	cmp	r3, #127	; 0x7f
    faf2:	d908      	bls.n	fb06 <LORAWAN_RxDone+0x5d2>
    faf4:	2320      	movs	r3, #32
    faf6:	345c      	adds	r4, #92	; 0x5c
    faf8:	7822      	ldrb	r2, [r4, #0]
    fafa:	210b      	movs	r1, #11
    fafc:	4313      	orrs	r3, r2
    fafe:	7023      	strb	r3, [r4, #0]
    fb00:	2001      	movs	r0, #1
    fb02:	4bc8      	ldr	r3, [pc, #800]	; (fe24 <LORAWAN_RxDone+0x8f0>)
    fb04:	4798      	blx	r3
    fb06:	797b      	ldrb	r3, [r7, #5]
    fb08:	4cc7      	ldr	r4, [pc, #796]	; (fe28 <LORAWAN_RxDone+0x8f4>)
    fb0a:	06db      	lsls	r3, r3, #27
    fb0c:	d505      	bpl.n	fb1a <LORAWAN_RxDone+0x5e6>
    fb0e:	0022      	movs	r2, r4
    fb10:	2308      	movs	r3, #8
    fb12:	326c      	adds	r2, #108	; 0x6c
    fb14:	7811      	ldrb	r1, [r2, #0]
    fb16:	430b      	orrs	r3, r1
    fb18:	7013      	strb	r3, [r2, #0]
    fb1a:	797b      	ldrb	r3, [r7, #5]
    fb1c:	065b      	lsls	r3, r3, #25
    fb1e:	d505      	bpl.n	fb2c <LORAWAN_RxDone+0x5f8>
    fb20:	0022      	movs	r2, r4
    fb22:	2310      	movs	r3, #16
    fb24:	326c      	adds	r2, #108	; 0x6c
    fb26:	7811      	ldrb	r1, [r2, #0]
    fb28:	430b      	orrs	r3, r1
    fb2a:	7013      	strb	r3, [r2, #0]
    fb2c:	221f      	movs	r2, #31
    fb2e:	783b      	ldrb	r3, [r7, #0]
    fb30:	4393      	bics	r3, r2
    fb32:	2ba0      	cmp	r3, #160	; 0xa0
    fb34:	d105      	bne.n	fb42 <LORAWAN_RxDone+0x60e>
    fb36:	0022      	movs	r2, r4
    fb38:	326c      	adds	r2, #108	; 0x6c
    fb3a:	7811      	ldrb	r1, [r2, #0]
    fb3c:	3b9e      	subs	r3, #158	; 0x9e
    fb3e:	430b      	orrs	r3, r1
    fb40:	7013      	strb	r3, [r2, #0]
    fb42:	7979      	ldrb	r1, [r7, #5]
    fb44:	070b      	lsls	r3, r1, #28
    fb46:	d100      	bne.n	fb4a <LORAWAN_RxDone+0x616>
    fb48:	e0d0      	b.n	fcec <LORAWAN_RxDone+0x7b8>
    fb4a:	0709      	lsls	r1, r1, #28
    fb4c:	0f09      	lsrs	r1, r1, #28
    fb4e:	187b      	adds	r3, r7, r1
    fb50:	7a1b      	ldrb	r3, [r3, #8]
    fb52:	2b00      	cmp	r3, #0
    fb54:	d100      	bne.n	fb58 <LORAWAN_RxDone+0x624>
    fb56:	e0a0      	b.n	fc9a <LORAWAN_RxDone+0x766>
    fb58:	0038      	movs	r0, r7
    fb5a:	4bb4      	ldr	r3, [pc, #720]	; (fe2c <LORAWAN_RxDone+0x8f8>)
    fb5c:	3008      	adds	r0, #8
    fb5e:	4798      	blx	r3
    fb60:	2301      	movs	r3, #1
    fb62:	0006      	movs	r6, r0
    fb64:	9307      	str	r3, [sp, #28]
    fb66:	7978      	ldrb	r0, [r7, #5]
    fb68:	9905      	ldr	r1, [sp, #20]
    fb6a:	0702      	lsls	r2, r0, #28
    fb6c:	0f12      	lsrs	r2, r2, #28
    fb6e:	0013      	movs	r3, r2
    fb70:	330c      	adds	r3, #12
    fb72:	4299      	cmp	r1, r3
    fb74:	d100      	bne.n	fb78 <LORAWAN_RxDone+0x644>
    fb76:	e0e5      	b.n	fd44 <LORAWAN_RxDone+0x810>
    fb78:	7833      	ldrb	r3, [r6, #0]
    fb7a:	1a89      	subs	r1, r1, r2
    fb7c:	b2c9      	uxtb	r1, r1
    fb7e:	9306      	str	r3, [sp, #24]
    fb80:	000b      	movs	r3, r1
    fb82:	3219      	adds	r2, #25
    fb84:	3b0c      	subs	r3, #12
    fb86:	4694      	mov	ip, r2
    fb88:	9a06      	ldr	r2, [sp, #24]
    fb8a:	b2db      	uxtb	r3, r3
    fb8c:	9305      	str	r3, [sp, #20]
    fb8e:	1c75      	adds	r5, r6, #1
    fb90:	4ba5      	ldr	r3, [pc, #660]	; (fe28 <LORAWAN_RxDone+0x8f4>)
    fb92:	2a00      	cmp	r2, #0
    fb94:	d100      	bne.n	fb98 <LORAWAN_RxDone+0x664>
    fb96:	e0ac      	b.n	fcf2 <LORAWAN_RxDone+0x7be>
    fb98:	681a      	ldr	r2, [r3, #0]
    fb9a:	7918      	ldrb	r0, [r3, #4]
    fb9c:	0a14      	lsrs	r4, r2, #8
    fb9e:	4662      	mov	r2, ip
    fba0:	0600      	lsls	r0, r0, #24
    fba2:	4320      	orrs	r0, r4
    fba4:	9003      	str	r0, [sp, #12]
    fba6:	9201      	str	r2, [sp, #4]
    fba8:	48a1      	ldr	r0, [pc, #644]	; (fe30 <LORAWAN_RxDone+0x8fc>)
    fbaa:	4aa2      	ldr	r2, [pc, #648]	; (fe34 <LORAWAN_RxDone+0x900>)
    fbac:	9002      	str	r0, [sp, #8]
    fbae:	9200      	str	r2, [sp, #0]
    fbb0:	390d      	subs	r1, #13
    fbb2:	b2c9      	uxtb	r1, r1
    fbb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fbb6:	2201      	movs	r2, #1
    fbb8:	0028      	movs	r0, r5
    fbba:	4c9f      	ldr	r4, [pc, #636]	; (fe38 <LORAWAN_RxDone+0x904>)
    fbbc:	47a0      	blx	r4
    fbbe:	4c9a      	ldr	r4, [pc, #616]	; (fe28 <LORAWAN_RxDone+0x8f4>)
    fbc0:	2300      	movs	r3, #0
    fbc2:	0022      	movs	r2, r4
    fbc4:	32a2      	adds	r2, #162	; 0xa2
    fbc6:	8013      	strh	r3, [r2, #0]
    fbc8:	0022      	movs	r2, r4
    fbca:	32cd      	adds	r2, #205	; 0xcd
    fbcc:	7013      	strb	r3, [r2, #0]
    fbce:	0022      	movs	r2, r4
    fbd0:	2110      	movs	r1, #16
    fbd2:	326c      	adds	r2, #108	; 0x6c
    fbd4:	7813      	ldrb	r3, [r2, #0]
    fbd6:	438b      	bics	r3, r1
    fbd8:	7013      	strb	r3, [r2, #0]
    fbda:	0023      	movs	r3, r4
    fbdc:	2201      	movs	r2, #1
    fbde:	335c      	adds	r3, #92	; 0x5c
    fbe0:	7859      	ldrb	r1, [r3, #1]
    fbe2:	430a      	orrs	r2, r1
    fbe4:	705a      	strb	r2, [r3, #1]
    fbe6:	220e      	movs	r2, #14
    fbe8:	781b      	ldrb	r3, [r3, #0]
    fbea:	4013      	ands	r3, r2
    fbec:	2b06      	cmp	r3, #6
    fbee:	d109      	bne.n	fc04 <LORAWAN_RxDone+0x6d0>
    fbf0:	0023      	movs	r3, r4
    fbf2:	33d4      	adds	r3, #212	; 0xd4
    fbf4:	781b      	ldrb	r3, [r3, #0]
    fbf6:	2b01      	cmp	r3, #1
    fbf8:	d104      	bne.n	fc04 <LORAWAN_RxDone+0x6d0>
    fbfa:	0023      	movs	r3, r4
    fbfc:	33c5      	adds	r3, #197	; 0xc5
    fbfe:	7818      	ldrb	r0, [r3, #0]
    fc00:	4b8e      	ldr	r3, [pc, #568]	; (fe3c <LORAWAN_RxDone+0x908>)
    fc02:	4798      	blx	r3
    fc04:	0025      	movs	r5, r4
    fc06:	2201      	movs	r2, #1
    fc08:	356c      	adds	r5, #108	; 0x6c
    fc0a:	782b      	ldrb	r3, [r5, #0]
    fc0c:	4213      	tst	r3, r2
    fc0e:	d100      	bne.n	fc12 <LORAWAN_RxDone+0x6de>
    fc10:	e0da      	b.n	fdc8 <LORAWAN_RxDone+0x894>
    fc12:	797b      	ldrb	r3, [r7, #5]
    fc14:	321f      	adds	r2, #31
    fc16:	4213      	tst	r3, r2
    fc18:	d100      	bne.n	fc1c <LORAWAN_RxDone+0x6e8>
    fc1a:	e0bb      	b.n	fd94 <LORAWAN_RxDone+0x860>
    fc1c:	4b88      	ldr	r3, [pc, #544]	; (fe40 <LORAWAN_RxDone+0x90c>)
    fc1e:	4798      	blx	r3
    fc20:	0023      	movs	r3, r4
    fc22:	2101      	movs	r1, #1
    fc24:	335c      	adds	r3, #92	; 0x5c
    fc26:	785a      	ldrb	r2, [r3, #1]
    fc28:	438a      	bics	r2, r1
    fc2a:	705a      	strb	r2, [r3, #1]
    fc2c:	9a06      	ldr	r2, [sp, #24]
    fc2e:	2a00      	cmp	r2, #0
    fc30:	d100      	bne.n	fc34 <LORAWAN_RxDone+0x700>
    fc32:	e08f      	b.n	fd54 <LORAWAN_RxDone+0x820>
    fc34:	9a05      	ldr	r2, [sp, #20]
    fc36:	0031      	movs	r1, r6
    fc38:	0038      	movs	r0, r7
    fc3a:	4b82      	ldr	r3, [pc, #520]	; (fe44 <LORAWAN_RxDone+0x910>)
    fc3c:	4798      	blx	r3
    fc3e:	4b82      	ldr	r3, [pc, #520]	; (fe48 <LORAWAN_RxDone+0x914>)
    fc40:	4d79      	ldr	r5, [pc, #484]	; (fe28 <LORAWAN_RxDone+0x8f4>)
    fc42:	781b      	ldrb	r3, [r3, #0]
    fc44:	06db      	lsls	r3, r3, #27
    fc46:	d400      	bmi.n	fc4a <LORAWAN_RxDone+0x716>
    fc48:	e15b      	b.n	ff02 <LORAWAN_RxDone+0x9ce>
    fc4a:	2220      	movs	r2, #32
    fc4c:	4b7f      	ldr	r3, [pc, #508]	; (fe4c <LORAWAN_RxDone+0x918>)
    fc4e:	781b      	ldrb	r3, [r3, #0]
    fc50:	401a      	ands	r2, r3
    fc52:	9205      	str	r2, [sp, #20]
    fc54:	d000      	beq.n	fc58 <LORAWAN_RxDone+0x724>
    fc56:	e154      	b.n	ff02 <LORAWAN_RxDone+0x9ce>
    fc58:	320a      	adds	r2, #10
    fc5a:	4213      	tst	r3, r2
    fc5c:	d100      	bne.n	fc60 <LORAWAN_RxDone+0x72c>
    fc5e:	e150      	b.n	ff02 <LORAWAN_RxDone+0x9ce>
    fc60:	002b      	movs	r3, r5
    fc62:	33cc      	adds	r3, #204	; 0xcc
    fc64:	781b      	ldrb	r3, [r3, #0]
    fc66:	a90f      	add	r1, sp, #60	; 0x3c
    fc68:	704b      	strb	r3, [r1, #1]
    fc6a:	002e      	movs	r6, r5
    fc6c:	2301      	movs	r3, #1
    fc6e:	36bf      	adds	r6, #191	; 0xbf
    fc70:	700b      	strb	r3, [r1, #0]
    fc72:	7833      	ldrb	r3, [r6, #0]
    fc74:	aa0e      	add	r2, sp, #56	; 0x38
    fc76:	2030      	movs	r0, #48	; 0x30
    fc78:	4f75      	ldr	r7, [pc, #468]	; (fe50 <LORAWAN_RxDone+0x91c>)
    fc7a:	708b      	strb	r3, [r1, #2]
    fc7c:	47b8      	blx	r7
    fc7e:	9006      	str	r0, [sp, #24]
    fc80:	2808      	cmp	r0, #8
    fc82:	d000      	beq.n	fc86 <LORAWAN_RxDone+0x752>
    fc84:	e0f4      	b.n	fe70 <LORAWAN_RxDone+0x93c>
    fc86:	4b73      	ldr	r3, [pc, #460]	; (fe54 <LORAWAN_RxDone+0x920>)
    fc88:	9805      	ldr	r0, [sp, #20]
    fc8a:	4798      	blx	r3
    fc8c:	4b6f      	ldr	r3, [pc, #444]	; (fe4c <LORAWAN_RxDone+0x918>)
    fc8e:	9a06      	ldr	r2, [sp, #24]
    fc90:	781b      	ldrb	r3, [r3, #0]
    fc92:	4393      	bics	r3, r2
    fc94:	4a6d      	ldr	r2, [pc, #436]	; (fe4c <LORAWAN_RxDone+0x918>)
    fc96:	7013      	strb	r3, [r2, #0]
    fc98:	e6fd      	b.n	fa96 <LORAWAN_RxDone+0x562>
    fc9a:	0023      	movs	r3, r4
    fc9c:	33d4      	adds	r3, #212	; 0xd4
    fc9e:	781b      	ldrb	r3, [r3, #0]
    fca0:	2b01      	cmp	r3, #1
    fca2:	d108      	bne.n	fcb6 <LORAWAN_RxDone+0x782>
    fca4:	0023      	movs	r3, r4
    fca6:	220e      	movs	r2, #14
    fca8:	335c      	adds	r3, #92	; 0x5c
    fcaa:	781b      	ldrb	r3, [r3, #0]
    fcac:	4013      	ands	r3, r2
    fcae:	2b06      	cmp	r3, #6
    fcb0:	d101      	bne.n	fcb6 <LORAWAN_RxDone+0x782>
    fcb2:	4b69      	ldr	r3, [pc, #420]	; (fe58 <LORAWAN_RxDone+0x924>)
    fcb4:	4798      	blx	r3
    fcb6:	4969      	ldr	r1, [pc, #420]	; (fe5c <LORAWAN_RxDone+0x928>)
    fcb8:	784a      	ldrb	r2, [r1, #1]
    fcba:	780b      	ldrb	r3, [r1, #0]
    fcbc:	0212      	lsls	r2, r2, #8
    fcbe:	431a      	orrs	r2, r3
    fcc0:	788b      	ldrb	r3, [r1, #2]
    fcc2:	041b      	lsls	r3, r3, #16
    fcc4:	431a      	orrs	r2, r3
    fcc6:	78cb      	ldrb	r3, [r1, #3]
    fcc8:	061b      	lsls	r3, r3, #24
    fcca:	4313      	orrs	r3, r2
    fccc:	d008      	beq.n	fce0 <LORAWAN_RxDone+0x7ac>
    fcce:	0022      	movs	r2, r4
    fcd0:	2120      	movs	r1, #32
    fcd2:	326c      	adds	r2, #108	; 0x6c
    fcd4:	7813      	ldrb	r3, [r2, #0]
    fcd6:	201e      	movs	r0, #30
    fcd8:	438b      	bics	r3, r1
    fcda:	7013      	strb	r3, [r2, #0]
    fcdc:	4b60      	ldr	r3, [pc, #384]	; (fe60 <LORAWAN_RxDone+0x92c>)
    fcde:	4798      	blx	r3
    fce0:	2300      	movs	r3, #0
    fce2:	34b8      	adds	r4, #184	; 0xb8
    fce4:	7023      	strb	r3, [r4, #0]
    fce6:	4b5f      	ldr	r3, [pc, #380]	; (fe64 <LORAWAN_RxDone+0x930>)
    fce8:	4798      	blx	r3
    fcea:	e6d4      	b.n	fa96 <LORAWAN_RxDone+0x562>
    fcec:	003e      	movs	r6, r7
    fcee:	3608      	adds	r6, #8
    fcf0:	e739      	b.n	fb66 <LORAWAN_RxDone+0x632>
    fcf2:	9a05      	ldr	r2, [sp, #20]
    fcf4:	2a00      	cmp	r2, #0
    fcf6:	d029      	beq.n	fd4c <LORAWAN_RxDone+0x818>
    fcf8:	0702      	lsls	r2, r0, #28
    fcfa:	d11d      	bne.n	fd38 <LORAWAN_RxDone+0x804>
    fcfc:	681a      	ldr	r2, [r3, #0]
    fcfe:	390d      	subs	r1, #13
    fd00:	0a10      	lsrs	r0, r2, #8
    fd02:	4662      	mov	r2, ip
    fd04:	b2cc      	uxtb	r4, r1
    fd06:	7919      	ldrb	r1, [r3, #4]
    fd08:	9201      	str	r2, [sp, #4]
    fd0a:	0609      	lsls	r1, r1, #24
    fd0c:	4301      	orrs	r1, r0
    fd0e:	9103      	str	r1, [sp, #12]
    fd10:	4a55      	ldr	r2, [pc, #340]	; (fe68 <LORAWAN_RxDone+0x934>)
    fd12:	4947      	ldr	r1, [pc, #284]	; (fe30 <LORAWAN_RxDone+0x8fc>)
    fd14:	9200      	str	r2, [sp, #0]
    fd16:	9102      	str	r1, [sp, #8]
    fd18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
    fd1a:	2201      	movs	r2, #1
    fd1c:	0021      	movs	r1, r4
    fd1e:	0028      	movs	r0, r5
    fd20:	4e45      	ldr	r6, [pc, #276]	; (fe38 <LORAWAN_RxDone+0x904>)
    fd22:	47b0      	blx	r6
    fd24:	4b41      	ldr	r3, [pc, #260]	; (fe2c <LORAWAN_RxDone+0x8f8>)
    fd26:	0021      	movs	r1, r4
    fd28:	0028      	movs	r0, r5
    fd2a:	4798      	blx	r3
    fd2c:	9b06      	ldr	r3, [sp, #24]
    fd2e:	9e06      	ldr	r6, [sp, #24]
    fd30:	9305      	str	r3, [sp, #20]
    fd32:	2301      	movs	r3, #1
    fd34:	9307      	str	r3, [sp, #28]
    fd36:	e742      	b.n	fbbe <LORAWAN_RxDone+0x68a>
    fd38:	001a      	movs	r2, r3
    fd3a:	32d4      	adds	r2, #212	; 0xd4
    fd3c:	7812      	ldrb	r2, [r2, #0]
    fd3e:	2a01      	cmp	r2, #1
    fd40:	d1b9      	bne.n	fcb6 <LORAWAN_RxDone+0x782>
    fd42:	e7b0      	b.n	fca6 <LORAWAN_RxDone+0x772>
    fd44:	2600      	movs	r6, #0
    fd46:	9606      	str	r6, [sp, #24]
    fd48:	9605      	str	r6, [sp, #20]
    fd4a:	e738      	b.n	fbbe <LORAWAN_RxDone+0x68a>
    fd4c:	9b05      	ldr	r3, [sp, #20]
    fd4e:	9306      	str	r3, [sp, #24]
    fd50:	001e      	movs	r6, r3
    fd52:	e734      	b.n	fbbe <LORAWAN_RxDone+0x68a>
    fd54:	2120      	movs	r1, #32
    fd56:	782a      	ldrb	r2, [r5, #0]
    fd58:	438a      	bics	r2, r1
    fd5a:	702a      	strb	r2, [r5, #0]
    fd5c:	0022      	movs	r2, r4
    fd5e:	32d4      	adds	r2, #212	; 0xd4
    fd60:	7812      	ldrb	r2, [r2, #0]
    fd62:	2a01      	cmp	r2, #1
    fd64:	d10e      	bne.n	fd84 <LORAWAN_RxDone+0x850>
    fd66:	781a      	ldrb	r2, [r3, #0]
    fd68:	3912      	subs	r1, #18
    fd6a:	438a      	bics	r2, r1
    fd6c:	701a      	strb	r2, [r3, #0]
    fd6e:	23da      	movs	r3, #218	; 0xda
    fd70:	4a2d      	ldr	r2, [pc, #180]	; (fe28 <LORAWAN_RxDone+0x8f4>)
    fd72:	005b      	lsls	r3, r3, #1
    fd74:	5cd3      	ldrb	r3, [r2, r3]
    fd76:	2b00      	cmp	r3, #0
    fd78:	d000      	beq.n	fd7c <LORAWAN_RxDone+0x848>
    fd7a:	e760      	b.n	fc3e <LORAWAN_RxDone+0x70a>
    fd7c:	2008      	movs	r0, #8
    fd7e:	4b38      	ldr	r3, [pc, #224]	; (fe60 <LORAWAN_RxDone+0x92c>)
    fd80:	4798      	blx	r3
    fd82:	e75c      	b.n	fc3e <LORAWAN_RxDone+0x70a>
    fd84:	2a04      	cmp	r2, #4
    fd86:	d1f2      	bne.n	fd6e <LORAWAN_RxDone+0x83a>
    fd88:	0023      	movs	r3, r4
    fd8a:	33c8      	adds	r3, #200	; 0xc8
    fd8c:	7818      	ldrb	r0, [r3, #0]
    fd8e:	4b2b      	ldr	r3, [pc, #172]	; (fe3c <LORAWAN_RxDone+0x908>)
    fd90:	4798      	blx	r3
    fd92:	e7ec      	b.n	fd6e <LORAWAN_RxDone+0x83a>
    fd94:	9b07      	ldr	r3, [sp, #28]
    fd96:	2b00      	cmp	r3, #0
    fd98:	d013      	beq.n	fdc2 <LORAWAN_RxDone+0x88e>
    fd9a:	0023      	movs	r3, r4
    fd9c:	33d4      	adds	r3, #212	; 0xd4
    fd9e:	781e      	ldrb	r6, [r3, #0]
    fda0:	2e01      	cmp	r6, #1
    fda2:	d10e      	bne.n	fdc2 <LORAWAN_RxDone+0x88e>
    fda4:	4b26      	ldr	r3, [pc, #152]	; (fe40 <LORAWAN_RxDone+0x90c>)
    fda6:	4798      	blx	r3
    fda8:	0022      	movs	r2, r4
    fdaa:	325c      	adds	r2, #92	; 0x5c
    fdac:	7853      	ldrb	r3, [r2, #1]
    fdae:	43b3      	bics	r3, r6
    fdb0:	7053      	strb	r3, [r2, #1]
    fdb2:	2220      	movs	r2, #32
    fdb4:	782b      	ldrb	r3, [r5, #0]
    fdb6:	4393      	bics	r3, r2
    fdb8:	702b      	strb	r3, [r5, #0]
    fdba:	23da      	movs	r3, #218	; 0xda
    fdbc:	005b      	lsls	r3, r3, #1
    fdbe:	5ce3      	ldrb	r3, [r4, r3]
    fdc0:	e7d9      	b.n	fd76 <LORAWAN_RxDone+0x842>
    fdc2:	4b2a      	ldr	r3, [pc, #168]	; (fe6c <LORAWAN_RxDone+0x938>)
    fdc4:	4798      	blx	r3
    fdc6:	e73a      	b.n	fc3e <LORAWAN_RxDone+0x70a>
    fdc8:	9a06      	ldr	r2, [sp, #24]
    fdca:	2a00      	cmp	r2, #0
    fdcc:	d00b      	beq.n	fde6 <LORAWAN_RxDone+0x8b2>
    fdce:	9a05      	ldr	r2, [sp, #20]
    fdd0:	0031      	movs	r1, r6
    fdd2:	0038      	movs	r0, r7
    fdd4:	4b1b      	ldr	r3, [pc, #108]	; (fe44 <LORAWAN_RxDone+0x910>)
    fdd6:	4798      	blx	r3
    fdd8:	0022      	movs	r2, r4
    fdda:	2101      	movs	r1, #1
    fddc:	325c      	adds	r2, #92	; 0x5c
    fdde:	7853      	ldrb	r3, [r2, #1]
    fde0:	438b      	bics	r3, r1
    fde2:	7053      	strb	r3, [r2, #1]
    fde4:	e72b      	b.n	fc3e <LORAWAN_RxDone+0x70a>
    fde6:	2220      	movs	r2, #32
    fde8:	4393      	bics	r3, r2
    fdea:	702b      	strb	r3, [r5, #0]
    fdec:	0023      	movs	r3, r4
    fdee:	33d4      	adds	r3, #212	; 0xd4
    fdf0:	781b      	ldrb	r3, [r3, #0]
    fdf2:	2b01      	cmp	r3, #1
    fdf4:	d10e      	bne.n	fe14 <LORAWAN_RxDone+0x8e0>
    fdf6:	0022      	movs	r2, r4
    fdf8:	210e      	movs	r1, #14
    fdfa:	325c      	adds	r2, #92	; 0x5c
    fdfc:	7813      	ldrb	r3, [r2, #0]
    fdfe:	438b      	bics	r3, r1
    fe00:	7013      	strb	r3, [r2, #0]
    fe02:	23da      	movs	r3, #218	; 0xda
    fe04:	005b      	lsls	r3, r3, #1
    fe06:	5ce3      	ldrb	r3, [r4, r3]
    fe08:	2b00      	cmp	r3, #0
    fe0a:	d1e5      	bne.n	fdd8 <LORAWAN_RxDone+0x8a4>
    fe0c:	2008      	movs	r0, #8
    fe0e:	4b14      	ldr	r3, [pc, #80]	; (fe60 <LORAWAN_RxDone+0x92c>)
    fe10:	4798      	blx	r3
    fe12:	e7e1      	b.n	fdd8 <LORAWAN_RxDone+0x8a4>
    fe14:	2b04      	cmp	r3, #4
    fe16:	d1f4      	bne.n	fe02 <LORAWAN_RxDone+0x8ce>
    fe18:	0023      	movs	r3, r4
    fe1a:	33c8      	adds	r3, #200	; 0xc8
    fe1c:	7818      	ldrb	r0, [r3, #0]
    fe1e:	4b07      	ldr	r3, [pc, #28]	; (fe3c <LORAWAN_RxDone+0x908>)
    fe20:	4798      	blx	r3
    fe22:	e7ee      	b.n	fe02 <LORAWAN_RxDone+0x8ce>
    fe24:	0000af89 	.word	0x0000af89
    fe28:	200023e4 	.word	0x200023e4
    fe2c:	0000f29d 	.word	0x0000f29d
    fe30:	200026c0 	.word	0x200026c0
    fe34:	200023f9 	.word	0x200023f9
    fe38:	0000df39 	.word	0x0000df39
    fe3c:	0000c235 	.word	0x0000c235
    fe40:	0000d505 	.word	0x0000d505
    fe44:	0000e395 	.word	0x0000e395
    fe48:	20002440 	.word	0x20002440
    fe4c:	20002450 	.word	0x20002450
    fe50:	0000aa71 	.word	0x0000aa71
    fe54:	0000d239 	.word	0x0000d239
    fe58:	0000cff5 	.word	0x0000cff5
    fe5c:	200026b8 	.word	0x200026b8
    fe60:	0000e2d9 	.word	0x0000e2d9
    fe64:	0000f06d 	.word	0x0000f06d
    fe68:	200023e9 	.word	0x200023e9
    fe6c:	0000d491 	.word	0x0000d491
    fe70:	35f0      	adds	r5, #240	; 0xf0
    fe72:	782b      	ldrb	r3, [r5, #0]
    fe74:	079a      	lsls	r2, r3, #30
    fe76:	d521      	bpl.n	febc <LORAWAN_RxDone+0x988>
    fe78:	aa10      	add	r2, sp, #64	; 0x40
    fe7a:	0031      	movs	r1, r6
    fe7c:	2026      	movs	r0, #38	; 0x26
    fe7e:	47b8      	blx	r7
    fe80:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fe82:	1c5a      	adds	r2, r3, #1
    fe84:	d001      	beq.n	fe8a <LORAWAN_RxDone+0x956>
    fe86:	3314      	adds	r3, #20
    fe88:	9310      	str	r3, [sp, #64]	; 0x40
    fe8a:	0021      	movs	r1, r4
    fe8c:	220e      	movs	r2, #14
    fe8e:	315c      	adds	r1, #92	; 0x5c
    fe90:	780b      	ldrb	r3, [r1, #0]
    fe92:	4393      	bics	r3, r2
    fe94:	001a      	movs	r2, r3
    fe96:	230c      	movs	r3, #12
    fe98:	4313      	orrs	r3, r2
    fe9a:	700b      	strb	r3, [r1, #0]
    fe9c:	23c0      	movs	r3, #192	; 0xc0
    fe9e:	33ff      	adds	r3, #255	; 0xff
    fea0:	5ce3      	ldrb	r3, [r4, r3]
    fea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
    fea4:	21fa      	movs	r1, #250	; 0xfa
    fea6:	1ad3      	subs	r3, r2, r3
    fea8:	2200      	movs	r2, #0
    feaa:	0089      	lsls	r1, r1, #2
    feac:	4359      	muls	r1, r3
    feae:	34c6      	adds	r4, #198	; 0xc6
    feb0:	4b31      	ldr	r3, [pc, #196]	; (ff78 <LORAWAN_RxDone+0xa44>)
    feb2:	7820      	ldrb	r0, [r4, #0]
    feb4:	9200      	str	r2, [sp, #0]
    feb6:	4c31      	ldr	r4, [pc, #196]	; (ff7c <LORAWAN_RxDone+0xa48>)
    feb8:	47a0      	blx	r4
    feba:	e5ec      	b.n	fa96 <LORAWAN_RxDone+0x562>
    febc:	075b      	lsls	r3, r3, #29
    febe:	d400      	bmi.n	fec2 <LORAWAN_RxDone+0x98e>
    fec0:	e5e9      	b.n	fa96 <LORAWAN_RxDone+0x562>
    fec2:	aa10      	add	r2, sp, #64	; 0x40
    fec4:	0031      	movs	r1, r6
    fec6:	2033      	movs	r0, #51	; 0x33
    fec8:	47b8      	blx	r7
    feca:	220e      	movs	r2, #14
    fecc:	4b2c      	ldr	r3, [pc, #176]	; (ff80 <LORAWAN_RxDone+0xa4c>)
    fece:	781b      	ldrb	r3, [r3, #0]
    fed0:	4393      	bics	r3, r2
    fed2:	001a      	movs	r2, r3
    fed4:	230c      	movs	r3, #12
    fed6:	4313      	orrs	r3, r2
    fed8:	4a29      	ldr	r2, [pc, #164]	; (ff80 <LORAWAN_RxDone+0xa4c>)
    feda:	7013      	strb	r3, [r2, #0]
    fedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fede:	1c5a      	adds	r2, r3, #1
    fee0:	d001      	beq.n	fee6 <LORAWAN_RxDone+0x9b2>
    fee2:	3301      	adds	r3, #1
    fee4:	9310      	str	r3, [sp, #64]	; 0x40
    fee6:	23c0      	movs	r3, #192	; 0xc0
    fee8:	33ff      	adds	r3, #255	; 0xff
    feea:	5ce3      	ldrb	r3, [r4, r3]
    feec:	9a10      	ldr	r2, [sp, #64]	; 0x40
    feee:	21fa      	movs	r1, #250	; 0xfa
    fef0:	1ad3      	subs	r3, r2, r3
    fef2:	2200      	movs	r2, #0
    fef4:	0089      	lsls	r1, r1, #2
    fef6:	34c9      	adds	r4, #201	; 0xc9
    fef8:	4359      	muls	r1, r3
    fefa:	7820      	ldrb	r0, [r4, #0]
    fefc:	4b21      	ldr	r3, [pc, #132]	; (ff84 <LORAWAN_RxDone+0xa50>)
    fefe:	9200      	str	r2, [sp, #0]
    ff00:	e7d9      	b.n	feb6 <LORAWAN_RxDone+0x982>
    ff02:	35d4      	adds	r5, #212	; 0xd4
    ff04:	782b      	ldrb	r3, [r5, #0]
    ff06:	2b04      	cmp	r3, #4
    ff08:	d000      	beq.n	ff0c <LORAWAN_RxDone+0x9d8>
    ff0a:	e5c4      	b.n	fa96 <LORAWAN_RxDone+0x562>
    ff0c:	0038      	movs	r0, r7
    ff0e:	4b1e      	ldr	r3, [pc, #120]	; (ff88 <LORAWAN_RxDone+0xa54>)
    ff10:	4798      	blx	r3
    ff12:	e5c0      	b.n	fa96 <LORAWAN_RxDone+0x562>
    ff14:	220e      	movs	r2, #14
    ff16:	4013      	ands	r3, r2
    ff18:	2b0a      	cmp	r3, #10
    ff1a:	d008      	beq.n	ff2e <LORAWAN_RxDone+0x9fa>
    ff1c:	2b06      	cmp	r3, #6
    ff1e:	d000      	beq.n	ff22 <LORAWAN_RxDone+0x9ee>
    ff20:	e506      	b.n	f930 <LORAWAN_RxDone+0x3fc>
    ff22:	0023      	movs	r3, r4
    ff24:	33d0      	adds	r3, #208	; 0xd0
    ff26:	781b      	ldrb	r3, [r3, #0]
    ff28:	2b00      	cmp	r3, #0
    ff2a:	d100      	bne.n	ff2e <LORAWAN_RxDone+0x9fa>
    ff2c:	e500      	b.n	f930 <LORAWAN_RxDone+0x3fc>
    ff2e:	2220      	movs	r2, #32
    ff30:	346c      	adds	r4, #108	; 0x6c
    ff32:	7823      	ldrb	r3, [r4, #0]
    ff34:	2019      	movs	r0, #25
    ff36:	4393      	bics	r3, r2
    ff38:	7023      	strb	r3, [r4, #0]
    ff3a:	e506      	b.n	f94a <LORAWAN_RxDone+0x416>
    ff3c:	4913      	ldr	r1, [pc, #76]	; (ff8c <LORAWAN_RxDone+0xa58>)
    ff3e:	784a      	ldrb	r2, [r1, #1]
    ff40:	780b      	ldrb	r3, [r1, #0]
    ff42:	0212      	lsls	r2, r2, #8
    ff44:	431a      	orrs	r2, r3
    ff46:	788b      	ldrb	r3, [r1, #2]
    ff48:	041b      	lsls	r3, r3, #16
    ff4a:	431a      	orrs	r2, r3
    ff4c:	78cb      	ldrb	r3, [r1, #3]
    ff4e:	061b      	lsls	r3, r3, #24
    ff50:	4313      	orrs	r3, r2
    ff52:	d100      	bne.n	ff56 <LORAWAN_RxDone+0xa22>
    ff54:	e59f      	b.n	fa96 <LORAWAN_RxDone+0x562>
    ff56:	4b0e      	ldr	r3, [pc, #56]	; (ff90 <LORAWAN_RxDone+0xa5c>)
    ff58:	4c0e      	ldr	r4, [pc, #56]	; (ff94 <LORAWAN_RxDone+0xa60>)
    ff5a:	781b      	ldrb	r3, [r3, #0]
    ff5c:	2b10      	cmp	r3, #16
    ff5e:	d105      	bne.n	ff6c <LORAWAN_RxDone+0xa38>
    ff60:	0001      	movs	r1, r0
    ff62:	2000      	movs	r0, #0
    ff64:	9a05      	ldr	r2, [sp, #20]
    ff66:	3b0c      	subs	r3, #12
    ff68:	47a0      	blx	r4
    ff6a:	e594      	b.n	fa96 <LORAWAN_RxDone+0x562>
    ff6c:	2300      	movs	r3, #0
    ff6e:	0001      	movs	r1, r0
    ff70:	9a05      	ldr	r2, [sp, #20]
    ff72:	0018      	movs	r0, r3
    ff74:	e7f8      	b.n	ff68 <LORAWAN_RxDone+0xa34>
    ff76:	46c0      	nop			; (mov r8, r8)
    ff78:	0000d32d 	.word	0x0000d32d
    ff7c:	0000bf29 	.word	0x0000bf29
    ff80:	20002440 	.word	0x20002440
    ff84:	0000dd05 	.word	0x0000dd05
    ff88:	00010951 	.word	0x00010951
    ff8c:	200026b8 	.word	0x200026b8
    ff90:	200025a4 	.word	0x200025a4
    ff94:	0000e33d 	.word	0x0000e33d

0000ff98 <LorawanSetEdClass>:
    ff98:	23da      	movs	r3, #218	; 0xda
    ff9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ff9c:	4d19      	ldr	r5, [pc, #100]	; (10004 <LorawanSetEdClass+0x6c>)
    ff9e:	005b      	lsls	r3, r3, #1
    ffa0:	5ceb      	ldrb	r3, [r5, r3]
    ffa2:	0004      	movs	r4, r0
    ffa4:	2011      	movs	r0, #17
    ffa6:	2b00      	cmp	r3, #0
    ffa8:	d013      	beq.n	ffd2 <LorawanSetEdClass+0x3a>
    ffaa:	002b      	movs	r3, r5
    ffac:	33d5      	adds	r3, #213	; 0xd5
    ffae:	781b      	ldrb	r3, [r3, #0]
    ffb0:	3807      	subs	r0, #7
    ffb2:	4223      	tst	r3, r4
    ffb4:	d00d      	beq.n	ffd2 <LorawanSetEdClass+0x3a>
    ffb6:	002b      	movs	r3, r5
    ffb8:	33d4      	adds	r3, #212	; 0xd4
    ffba:	7819      	ldrb	r1, [r3, #0]
    ffbc:	428c      	cmp	r4, r1
    ffbe:	d007      	beq.n	ffd0 <LorawanSetEdClass+0x38>
    ffc0:	2901      	cmp	r1, #1
    ffc2:	d107      	bne.n	ffd4 <LorawanSetEdClass+0x3c>
    ffc4:	2c04      	cmp	r4, #4
    ffc6:	d104      	bne.n	ffd2 <LorawanSetEdClass+0x3a>
    ffc8:	701c      	strb	r4, [r3, #0]
    ffca:	2000      	movs	r0, #0
    ffcc:	4b0e      	ldr	r3, [pc, #56]	; (10008 <LorawanSetEdClass+0x70>)
    ffce:	4798      	blx	r3
    ffd0:	2008      	movs	r0, #8
    ffd2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ffd4:	2904      	cmp	r1, #4
    ffd6:	d1fc      	bne.n	ffd2 <LorawanSetEdClass+0x3a>
    ffd8:	2c01      	cmp	r4, #1
    ffda:	d1fa      	bne.n	ffd2 <LorawanSetEdClass+0x3a>
    ffdc:	701c      	strb	r4, [r3, #0]
    ffde:	0021      	movs	r1, r4
    ffe0:	4b09      	ldr	r3, [pc, #36]	; (10008 <LorawanSetEdClass+0x70>)
    ffe2:	2000      	movs	r0, #0
    ffe4:	4798      	blx	r3
    ffe6:	002a      	movs	r2, r5
    ffe8:	210e      	movs	r1, #14
    ffea:	325c      	adds	r2, #92	; 0x5c
    ffec:	7813      	ldrb	r3, [r2, #0]
    ffee:	a801      	add	r0, sp, #4
    fff0:	438b      	bics	r3, r1
    fff2:	7013      	strb	r3, [r2, #0]
    fff4:	35fc      	adds	r5, #252	; 0xfc
    fff6:	4b05      	ldr	r3, [pc, #20]	; (1000c <LorawanSetEdClass+0x74>)
    fff8:	7004      	strb	r4, [r0, #0]
    fffa:	4798      	blx	r3
    fffc:	7828      	ldrb	r0, [r5, #0]
    fffe:	4b04      	ldr	r3, [pc, #16]	; (10010 <LorawanSetEdClass+0x78>)
   10000:	4798      	blx	r3
   10002:	e7e5      	b.n	ffd0 <LorawanSetEdClass+0x38>
   10004:	200023e4 	.word	0x200023e4
   10008:	0000af89 	.word	0x0000af89
   1000c:	00012371 	.word	0x00012371
   10010:	0000c235 	.word	0x0000c235

00010014 <LORAWAN_SetAttr>:
   10014:	22da      	movs	r2, #218	; 0xda
   10016:	b573      	push	{r0, r1, r4, r5, r6, lr}
   10018:	4cc0      	ldr	r4, [pc, #768]	; (1031c <LORAWAN_SetAttr+0x308>)
   1001a:	0052      	lsls	r2, r2, #1
   1001c:	5ca2      	ldrb	r2, [r4, r2]
   1001e:	000b      	movs	r3, r1
   10020:	2511      	movs	r5, #17
   10022:	2a00      	cmp	r2, #0
   10024:	d04f      	beq.n	100c6 <LORAWAN_SetAttr+0xb2>
   10026:	282e      	cmp	r0, #46	; 0x2e
   10028:	d860      	bhi.n	100ec <LORAWAN_SetAttr+0xd8>
   1002a:	f002 fe67 	bl	12cfc <__gnu_thumb1_case_uhi>
   1002e:	002f      	.short	0x002f
   10030:	009b007e 	.word	0x009b007e
   10034:	00ac00da 	.word	0x00ac00da
   10038:	00f800c8 	.word	0x00f800c8
   1003c:	01310111 	.word	0x01310111
   10040:	01490143 	.word	0x01490143
   10044:	015e0155 	.word	0x015e0155
   10048:	01860181 	.word	0x01860181
   1004c:	0190018b 	.word	0x0190018b
   10050:	019a0195 	.word	0x019a0195
   10054:	01a4019f 	.word	0x01a4019f
   10058:	01ab01c6 	.word	0x01ab01c6
   1005c:	01cf01a8 	.word	0x01cf01a8
   10060:	01c101cb 	.word	0x01c101cb
   10064:	01b701bd 	.word	0x01b701bd
   10068:	005f005f 	.word	0x005f005f
   1006c:	005f016f 	.word	0x005f016f
   10070:	005f005f 	.word	0x005f005f
   10074:	005f005f 	.word	0x005f005f
   10078:	01d3005f 	.word	0x01d3005f
   1007c:	01d6004e 	.word	0x01d6004e
   10080:	01e001e4 	.word	0x01e001e4
   10084:	005f01db 	.word	0x005f01db
   10088:	020801e8 	.word	0x020801e8
   1008c:	250a      	movs	r5, #10
   1008e:	2900      	cmp	r1, #0
   10090:	d019      	beq.n	100c6 <LORAWAN_SetAttr+0xb2>
   10092:	0020      	movs	r0, r4
   10094:	2208      	movs	r2, #8
   10096:	4ba2      	ldr	r3, [pc, #648]	; (10320 <LORAWAN_SetAttr+0x30c>)
   10098:	303d      	adds	r0, #61	; 0x3d
   1009a:	4798      	blx	r3
   1009c:	4ea1      	ldr	r6, [pc, #644]	; (10324 <LORAWAN_SetAttr+0x310>)
   1009e:	2108      	movs	r1, #8
   100a0:	2001      	movs	r0, #1
   100a2:	47b0      	blx	r6
   100a4:	0022      	movs	r2, r4
   100a6:	32b6      	adds	r2, #182	; 0xb6
   100a8:	7813      	ldrb	r3, [r2, #0]
   100aa:	3d09      	subs	r5, #9
   100ac:	432b      	orrs	r3, r5
   100ae:	2109      	movs	r1, #9
   100b0:	0028      	movs	r0, r5
   100b2:	345c      	adds	r4, #92	; 0x5c
   100b4:	7013      	strb	r3, [r2, #0]
   100b6:	47b0      	blx	r6
   100b8:	7823      	ldrb	r3, [r4, #0]
   100ba:	0028      	movs	r0, r5
   100bc:	43ab      	bics	r3, r5
   100be:	210b      	movs	r1, #11
   100c0:	7023      	strb	r3, [r4, #0]
   100c2:	47b0      	blx	r6
   100c4:	3507      	adds	r5, #7
   100c6:	0028      	movs	r0, r5
   100c8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   100ca:	0022      	movs	r2, r4
   100cc:	32f0      	adds	r2, #240	; 0xf0
   100ce:	7812      	ldrb	r2, [r2, #0]
   100d0:	250a      	movs	r5, #10
   100d2:	0752      	lsls	r2, r2, #29
   100d4:	d5f7      	bpl.n	100c6 <LORAWAN_SetAttr+0xb2>
   100d6:	79c9      	ldrb	r1, [r1, #7]
   100d8:	4a93      	ldr	r2, [pc, #588]	; (10328 <LORAWAN_SetAttr+0x314>)
   100da:	2900      	cmp	r1, #0
   100dc:	d111      	bne.n	10102 <LORAWAN_SetAttr+0xee>
   100de:	466b      	mov	r3, sp
   100e0:	201d      	movs	r0, #29
   100e2:	7159      	strb	r1, [r3, #5]
   100e4:	4669      	mov	r1, sp
   100e6:	4790      	blx	r2
   100e8:	2800      	cmp	r0, #0
   100ea:	d001      	beq.n	100f0 <LORAWAN_SetAttr+0xdc>
   100ec:	250a      	movs	r5, #10
   100ee:	e7ea      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   100f0:	0023      	movs	r3, r4
   100f2:	2109      	movs	r1, #9
   100f4:	33f4      	adds	r3, #244	; 0xf4
   100f6:	34f2      	adds	r4, #242	; 0xf2
   100f8:	8018      	strh	r0, [r3, #0]
   100fa:	8020      	strh	r0, [r4, #0]
   100fc:	4b89      	ldr	r3, [pc, #548]	; (10324 <LORAWAN_SetAttr+0x310>)
   100fe:	4798      	blx	r3
   10100:	e011      	b.n	10126 <LORAWAN_SetAttr+0x112>
   10102:	466e      	mov	r6, sp
   10104:	2502      	movs	r5, #2
   10106:	5f59      	ldrsh	r1, [r3, r5]
   10108:	8818      	ldrh	r0, [r3, #0]
   1010a:	889d      	ldrh	r5, [r3, #4]
   1010c:	799b      	ldrb	r3, [r3, #6]
   1010e:	8030      	strh	r0, [r6, #0]
   10110:	7133      	strb	r3, [r6, #4]
   10112:	2301      	movs	r3, #1
   10114:	8071      	strh	r1, [r6, #2]
   10116:	201d      	movs	r0, #29
   10118:	4669      	mov	r1, sp
   1011a:	7173      	strb	r3, [r6, #5]
   1011c:	4790      	blx	r2
   1011e:	2800      	cmp	r0, #0
   10120:	d1e4      	bne.n	100ec <LORAWAN_SetAttr+0xd8>
   10122:	34f4      	adds	r4, #244	; 0xf4
   10124:	8025      	strh	r5, [r4, #0]
   10126:	2508      	movs	r5, #8
   10128:	e7cd      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   1012a:	250a      	movs	r5, #10
   1012c:	2900      	cmp	r1, #0
   1012e:	d0ca      	beq.n	100c6 <LORAWAN_SetAttr+0xb2>
   10130:	0020      	movs	r0, r4
   10132:	2208      	movs	r2, #8
   10134:	4b7a      	ldr	r3, [pc, #488]	; (10320 <LORAWAN_SetAttr+0x30c>)
   10136:	3035      	adds	r0, #53	; 0x35
   10138:	4798      	blx	r3
   1013a:	2107      	movs	r1, #7
   1013c:	2001      	movs	r0, #1
   1013e:	4d79      	ldr	r5, [pc, #484]	; (10324 <LORAWAN_SetAttr+0x310>)
   10140:	47a8      	blx	r5
   10142:	0022      	movs	r2, r4
   10144:	2302      	movs	r3, #2
   10146:	32b6      	adds	r2, #182	; 0xb6
   10148:	7811      	ldrb	r1, [r2, #0]
   1014a:	430b      	orrs	r3, r1
   1014c:	7013      	strb	r3, [r2, #0]
   1014e:	2109      	movs	r1, #9
   10150:	2001      	movs	r0, #1
   10152:	47a8      	blx	r5
   10154:	2001      	movs	r0, #1
   10156:	210b      	movs	r1, #11
   10158:	345c      	adds	r4, #92	; 0x5c
   1015a:	7823      	ldrb	r3, [r4, #0]
   1015c:	4383      	bics	r3, r0
   1015e:	7023      	strb	r3, [r4, #0]
   10160:	47a8      	blx	r5
   10162:	e7e0      	b.n	10126 <LORAWAN_SetAttr+0x112>
   10164:	680b      	ldr	r3, [r1, #0]
   10166:	2001      	movs	r0, #1
   10168:	0a19      	lsrs	r1, r3, #8
   1016a:	70a1      	strb	r1, [r4, #2]
   1016c:	0c19      	lsrs	r1, r3, #16
   1016e:	7063      	strb	r3, [r4, #1]
   10170:	70e1      	strb	r1, [r4, #3]
   10172:	0e1b      	lsrs	r3, r3, #24
   10174:	2103      	movs	r1, #3
   10176:	4d6b      	ldr	r5, [pc, #428]	; (10324 <LORAWAN_SetAttr+0x310>)
   10178:	7123      	strb	r3, [r4, #4]
   1017a:	47a8      	blx	r5
   1017c:	0022      	movs	r2, r4
   1017e:	32b6      	adds	r2, #182	; 0xb6
   10180:	7811      	ldrb	r1, [r2, #0]
   10182:	2304      	movs	r3, #4
   10184:	e7e1      	b.n	1014a <LORAWAN_SetAttr+0x136>
   10186:	250a      	movs	r5, #10
   10188:	2900      	cmp	r1, #0
   1018a:	d09c      	beq.n	100c6 <LORAWAN_SetAttr+0xb2>
   1018c:	3506      	adds	r5, #6
   1018e:	002a      	movs	r2, r5
   10190:	4b63      	ldr	r3, [pc, #396]	; (10320 <LORAWAN_SetAttr+0x30c>)
   10192:	1d60      	adds	r0, r4, #5
   10194:	4798      	blx	r3
   10196:	4e63      	ldr	r6, [pc, #396]	; (10324 <LORAWAN_SetAttr+0x310>)
   10198:	2104      	movs	r1, #4
   1019a:	2001      	movs	r0, #1
   1019c:	47b0      	blx	r6
   1019e:	0023      	movs	r3, r4
   101a0:	33b6      	adds	r3, #182	; 0xb6
   101a2:	781a      	ldrb	r2, [r3, #0]
   101a4:	2109      	movs	r1, #9
   101a6:	4315      	orrs	r5, r2
   101a8:	2001      	movs	r0, #1
   101aa:	701d      	strb	r5, [r3, #0]
   101ac:	47b0      	blx	r6
   101ae:	2001      	movs	r0, #1
   101b0:	345c      	adds	r4, #92	; 0x5c
   101b2:	7823      	ldrb	r3, [r4, #0]
   101b4:	210b      	movs	r1, #11
   101b6:	4383      	bics	r3, r0
   101b8:	7023      	strb	r3, [r4, #0]
   101ba:	47b0      	blx	r6
   101bc:	e7b3      	b.n	10126 <LORAWAN_SetAttr+0x112>
   101be:	250a      	movs	r5, #10
   101c0:	2900      	cmp	r1, #0
   101c2:	d100      	bne.n	101c6 <LORAWAN_SetAttr+0x1b2>
   101c4:	e77f      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   101c6:	0020      	movs	r0, r4
   101c8:	2210      	movs	r2, #16
   101ca:	4b55      	ldr	r3, [pc, #340]	; (10320 <LORAWAN_SetAttr+0x30c>)
   101cc:	3015      	adds	r0, #21
   101ce:	4798      	blx	r3
   101d0:	2105      	movs	r1, #5
   101d2:	2001      	movs	r0, #1
   101d4:	4d53      	ldr	r5, [pc, #332]	; (10324 <LORAWAN_SetAttr+0x310>)
   101d6:	47a8      	blx	r5
   101d8:	0022      	movs	r2, r4
   101da:	32b6      	adds	r2, #182	; 0xb6
   101dc:	7811      	ldrb	r1, [r2, #0]
   101de:	2320      	movs	r3, #32
   101e0:	e7b3      	b.n	1014a <LORAWAN_SetAttr+0x136>
   101e2:	250a      	movs	r5, #10
   101e4:	2900      	cmp	r1, #0
   101e6:	d100      	bne.n	101ea <LORAWAN_SetAttr+0x1d6>
   101e8:	e76d      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   101ea:	0020      	movs	r0, r4
   101ec:	2210      	movs	r2, #16
   101ee:	4b4c      	ldr	r3, [pc, #304]	; (10320 <LORAWAN_SetAttr+0x30c>)
   101f0:	3025      	adds	r0, #37	; 0x25
   101f2:	4798      	blx	r3
   101f4:	4e4b      	ldr	r6, [pc, #300]	; (10324 <LORAWAN_SetAttr+0x310>)
   101f6:	2106      	movs	r1, #6
   101f8:	2001      	movs	r0, #1
   101fa:	47b0      	blx	r6
   101fc:	0022      	movs	r2, r4
   101fe:	32b6      	adds	r2, #182	; 0xb6
   10200:	7813      	ldrb	r3, [r2, #0]
   10202:	3d02      	subs	r5, #2
   10204:	432b      	orrs	r3, r5
   10206:	2109      	movs	r1, #9
   10208:	2001      	movs	r0, #1
   1020a:	7013      	strb	r3, [r2, #0]
   1020c:	47b0      	blx	r6
   1020e:	2001      	movs	r0, #1
   10210:	345c      	adds	r4, #92	; 0x5c
   10212:	7823      	ldrb	r3, [r4, #0]
   10214:	210b      	movs	r1, #11
   10216:	4383      	bics	r3, r0
   10218:	7023      	strb	r3, [r4, #0]
   1021a:	47b0      	blx	r6
   1021c:	e753      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   1021e:	780b      	ldrb	r3, [r1, #0]
   10220:	2001      	movs	r0, #1
   10222:	0021      	movs	r1, r4
   10224:	2520      	movs	r5, #32
   10226:	315c      	adds	r1, #92	; 0x5c
   10228:	4003      	ands	r3, r0
   1022a:	015a      	lsls	r2, r3, #5
   1022c:	780b      	ldrb	r3, [r1, #0]
   1022e:	43ab      	bics	r3, r5
   10230:	4313      	orrs	r3, r2
   10232:	700b      	strb	r3, [r1, #0]
   10234:	0023      	movs	r3, r4
   10236:	2200      	movs	r2, #0
   10238:	33a2      	adds	r3, #162	; 0xa2
   1023a:	346c      	adds	r4, #108	; 0x6c
   1023c:	801a      	strh	r2, [r3, #0]
   1023e:	7823      	ldrb	r3, [r4, #0]
   10240:	3210      	adds	r2, #16
   10242:	4393      	bics	r3, r2
   10244:	7023      	strb	r3, [r4, #0]
   10246:	210b      	movs	r1, #11
   10248:	4b36      	ldr	r3, [pc, #216]	; (10324 <LORAWAN_SetAttr+0x310>)
   1024a:	4798      	blx	r3
   1024c:	3d18      	subs	r5, #24
   1024e:	e73a      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   10250:	466a      	mov	r2, sp
   10252:	780b      	ldrb	r3, [r1, #0]
   10254:	7013      	strb	r3, [r2, #0]
   10256:	0022      	movs	r2, r4
   10258:	32ca      	adds	r2, #202	; 0xca
   1025a:	7812      	ldrb	r2, [r2, #0]
   1025c:	429a      	cmp	r2, r3
   1025e:	d900      	bls.n	10262 <LORAWAN_SetAttr+0x24e>
   10260:	e744      	b.n	100ec <LORAWAN_SetAttr+0xd8>
   10262:	0022      	movs	r2, r4
   10264:	32cb      	adds	r2, #203	; 0xcb
   10266:	7812      	ldrb	r2, [r2, #0]
   10268:	429a      	cmp	r2, r3
   1026a:	d200      	bcs.n	1026e <LORAWAN_SetAttr+0x25a>
   1026c:	e73e      	b.n	100ec <LORAWAN_SetAttr+0xd8>
   1026e:	4669      	mov	r1, sp
   10270:	2010      	movs	r0, #16
   10272:	4b2e      	ldr	r3, [pc, #184]	; (1032c <LORAWAN_SetAttr+0x318>)
   10274:	4798      	blx	r3
   10276:	0005      	movs	r5, r0
   10278:	2808      	cmp	r0, #8
   1027a:	d000      	beq.n	1027e <LORAWAN_SetAttr+0x26a>
   1027c:	e736      	b.n	100ec <LORAWAN_SetAttr+0xd8>
   1027e:	466b      	mov	r3, sp
   10280:	210c      	movs	r1, #12
   10282:	2001      	movs	r0, #1
   10284:	781b      	ldrb	r3, [r3, #0]
   10286:	34bf      	adds	r4, #191	; 0xbf
   10288:	7023      	strb	r3, [r4, #0]
   1028a:	4b26      	ldr	r3, [pc, #152]	; (10324 <LORAWAN_SetAttr+0x310>)
   1028c:	4798      	blx	r3
   1028e:	e71a      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   10290:	466a      	mov	r2, sp
   10292:	780b      	ldrb	r3, [r1, #0]
   10294:	201d      	movs	r0, #29
   10296:	7013      	strb	r3, [r2, #0]
   10298:	4669      	mov	r1, sp
   1029a:	4b24      	ldr	r3, [pc, #144]	; (1032c <LORAWAN_SetAttr+0x318>)
   1029c:	4798      	blx	r3
   1029e:	0005      	movs	r5, r0
   102a0:	2808      	cmp	r0, #8
   102a2:	d000      	beq.n	102a6 <LORAWAN_SetAttr+0x292>
   102a4:	e722      	b.n	100ec <LORAWAN_SetAttr+0xd8>
   102a6:	466b      	mov	r3, sp
   102a8:	781b      	ldrb	r3, [r3, #0]
   102aa:	34c1      	adds	r4, #193	; 0xc1
   102ac:	7023      	strb	r3, [r4, #0]
   102ae:	210a      	movs	r1, #10
   102b0:	2000      	movs	r0, #0
   102b2:	e7ea      	b.n	1028a <LORAWAN_SetAttr+0x276>
   102b4:	780b      	ldrb	r3, [r1, #0]
   102b6:	2103      	movs	r1, #3
   102b8:	34d7      	adds	r4, #215	; 0xd7
   102ba:	7023      	strb	r3, [r4, #0]
   102bc:	2000      	movs	r0, #0
   102be:	e71d      	b.n	100fc <LORAWAN_SetAttr+0xe8>
   102c0:	680b      	ldr	r3, [r1, #0]
   102c2:	250a      	movs	r5, #10
   102c4:	1c5a      	adds	r2, r3, #1
   102c6:	d100      	bne.n	102ca <LORAWAN_SetAttr+0x2b6>
   102c8:	e6fd      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   102ca:	2116      	movs	r1, #22
   102cc:	2000      	movs	r0, #0
   102ce:	6623      	str	r3, [r4, #96]	; 0x60
   102d0:	4b14      	ldr	r3, [pc, #80]	; (10324 <LORAWAN_SetAttr+0x310>)
   102d2:	4798      	blx	r3
   102d4:	3d02      	subs	r5, #2
   102d6:	e6f6      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   102d8:	680b      	ldr	r3, [r1, #0]
   102da:	250a      	movs	r5, #10
   102dc:	1c5a      	adds	r2, r3, #1
   102de:	d100      	bne.n	102e2 <LORAWAN_SetAttr+0x2ce>
   102e0:	e6f1      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   102e2:	6663      	str	r3, [r4, #100]	; 0x64
   102e4:	0029      	movs	r1, r5
   102e6:	2001      	movs	r0, #1
   102e8:	e7f2      	b.n	102d0 <LORAWAN_SetAttr+0x2bc>
   102ea:	0026      	movs	r6, r4
   102ec:	880b      	ldrh	r3, [r1, #0]
   102ee:	36a8      	adds	r6, #168	; 0xa8
   102f0:	210c      	movs	r1, #12
   102f2:	2000      	movs	r0, #0
   102f4:	4d0b      	ldr	r5, [pc, #44]	; (10324 <LORAWAN_SetAttr+0x310>)
   102f6:	8033      	strh	r3, [r6, #0]
   102f8:	47a8      	blx	r5
   102fa:	22fa      	movs	r2, #250	; 0xfa
   102fc:	8833      	ldrh	r3, [r6, #0]
   102fe:	0092      	lsls	r2, r2, #2
   10300:	189b      	adds	r3, r3, r2
   10302:	34aa      	adds	r4, #170	; 0xaa
   10304:	8023      	strh	r3, [r4, #0]
   10306:	210d      	movs	r1, #13
   10308:	2000      	movs	r0, #0
   1030a:	e729      	b.n	10160 <LORAWAN_SetAttr+0x14c>
   1030c:	780b      	ldrb	r3, [r1, #0]
   1030e:	250a      	movs	r5, #10
   10310:	2b0f      	cmp	r3, #15
   10312:	d900      	bls.n	10316 <LORAWAN_SetAttr+0x302>
   10314:	e6d7      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   10316:	3470      	adds	r4, #112	; 0x70
   10318:	7023      	strb	r3, [r4, #0]
   1031a:	e7db      	b.n	102d4 <LORAWAN_SetAttr+0x2c0>
   1031c:	200023e4 	.word	0x200023e4
   10320:	00015f45 	.word	0x00015f45
   10324:	0000af89 	.word	0x0000af89
   10328:	0001115d 	.word	0x0001115d
   1032c:	0000aa8d 	.word	0x0000aa8d
   10330:	880b      	ldrh	r3, [r1, #0]
   10332:	34ac      	adds	r4, #172	; 0xac
   10334:	8023      	strh	r3, [r4, #0]
   10336:	210e      	movs	r1, #14
   10338:	e7c0      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   1033a:	880b      	ldrh	r3, [r1, #0]
   1033c:	34ae      	adds	r4, #174	; 0xae
   1033e:	8023      	strh	r3, [r4, #0]
   10340:	210f      	movs	r1, #15
   10342:	e7bb      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   10344:	880b      	ldrh	r3, [r1, #0]
   10346:	34b0      	adds	r4, #176	; 0xb0
   10348:	8023      	strh	r3, [r4, #0]
   1034a:	2110      	movs	r1, #16
   1034c:	e7b6      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   1034e:	780b      	ldrb	r3, [r1, #0]
   10350:	34b4      	adds	r4, #180	; 0xb4
   10352:	7023      	strb	r3, [r4, #0]
   10354:	2112      	movs	r1, #18
   10356:	e7b1      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   10358:	780b      	ldrb	r3, [r1, #0]
   1035a:	34b5      	adds	r4, #181	; 0xb5
   1035c:	7023      	strb	r3, [r4, #0]
   1035e:	2113      	movs	r1, #19
   10360:	e7ac      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   10362:	880b      	ldrh	r3, [r1, #0]
   10364:	34b2      	adds	r4, #178	; 0xb2
   10366:	8023      	strh	r3, [r4, #0]
   10368:	2111      	movs	r1, #17
   1036a:	e7a7      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   1036c:	780b      	ldrb	r3, [r1, #0]
   1036e:	34ba      	adds	r4, #186	; 0xba
   10370:	7023      	strb	r3, [r4, #0]
   10372:	2115      	movs	r1, #21
   10374:	e7a2      	b.n	102bc <LORAWAN_SetAttr+0x2a8>
   10376:	780b      	ldrb	r3, [r1, #0]
   10378:	34b9      	adds	r4, #185	; 0xb9
   1037a:	7023      	strb	r3, [r4, #0]
   1037c:	e6d3      	b.n	10126 <LORAWAN_SetAttr+0x112>
   1037e:	780b      	ldrb	r3, [r1, #0]
   10380:	34c0      	adds	r4, #192	; 0xc0
   10382:	e7fa      	b.n	1037a <LORAWAN_SetAttr+0x366>
   10384:	2001      	movs	r0, #1
   10386:	780b      	ldrb	r3, [r1, #0]
   10388:	2110      	movs	r1, #16
   1038a:	345c      	adds	r4, #92	; 0x5c
   1038c:	4003      	ands	r3, r0
   1038e:	011a      	lsls	r2, r3, #4
   10390:	7823      	ldrb	r3, [r4, #0]
   10392:	438b      	bics	r3, r1
   10394:	4313      	orrs	r3, r2
   10396:	7023      	strb	r3, [r4, #0]
   10398:	3905      	subs	r1, #5
   1039a:	e6af      	b.n	100fc <LORAWAN_SetAttr+0xe8>
   1039c:	7818      	ldrb	r0, [r3, #0]
   1039e:	7909      	ldrb	r1, [r1, #4]
   103a0:	4b32      	ldr	r3, [pc, #200]	; (1046c <LORAWAN_SetAttr+0x458>)
   103a2:	4798      	blx	r3
   103a4:	0005      	movs	r5, r0
   103a6:	e68e      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   103a8:	7818      	ldrb	r0, [r3, #0]
   103aa:	7909      	ldrb	r1, [r1, #4]
   103ac:	4b30      	ldr	r3, [pc, #192]	; (10470 <LORAWAN_SetAttr+0x45c>)
   103ae:	e7f8      	b.n	103a2 <LORAWAN_SetAttr+0x38e>
   103b0:	7808      	ldrb	r0, [r1, #0]
   103b2:	4b30      	ldr	r3, [pc, #192]	; (10474 <LORAWAN_SetAttr+0x460>)
   103b4:	6849      	ldr	r1, [r1, #4]
   103b6:	4798      	blx	r3
   103b8:	e7f4      	b.n	103a4 <LORAWAN_SetAttr+0x390>
   103ba:	7909      	ldrb	r1, [r1, #4]
   103bc:	6818      	ldr	r0, [r3, #0]
   103be:	4b2e      	ldr	r3, [pc, #184]	; (10478 <LORAWAN_SetAttr+0x464>)
   103c0:	4798      	blx	r3
   103c2:	e7ef      	b.n	103a4 <LORAWAN_SetAttr+0x390>
   103c4:	7808      	ldrb	r0, [r1, #0]
   103c6:	4b2d      	ldr	r3, [pc, #180]	; (1047c <LORAWAN_SetAttr+0x468>)
   103c8:	4798      	blx	r3
   103ca:	e7eb      	b.n	103a4 <LORAWAN_SetAttr+0x390>
   103cc:	8808      	ldrh	r0, [r1, #0]
   103ce:	4b2c      	ldr	r3, [pc, #176]	; (10480 <LORAWAN_SetAttr+0x46c>)
   103d0:	4798      	blx	r3
   103d2:	e6a8      	b.n	10126 <LORAWAN_SetAttr+0x112>
   103d4:	4a2b      	ldr	r2, [pc, #172]	; (10484 <LORAWAN_SetAttr+0x470>)
   103d6:	6011      	str	r1, [r2, #0]
   103d8:	e688      	b.n	100ec <LORAWAN_SetAttr+0xd8>
   103da:	7809      	ldrb	r1, [r1, #0]
   103dc:	7858      	ldrb	r0, [r3, #1]
   103de:	4b2a      	ldr	r3, [pc, #168]	; (10488 <LORAWAN_SetAttr+0x474>)
   103e0:	4798      	blx	r3
   103e2:	e7df      	b.n	103a4 <LORAWAN_SetAttr+0x390>
   103e4:	1c58      	adds	r0, r3, #1
   103e6:	7809      	ldrb	r1, [r1, #0]
   103e8:	4b28      	ldr	r3, [pc, #160]	; (1048c <LORAWAN_SetAttr+0x478>)
   103ea:	4798      	blx	r3
   103ec:	e7da      	b.n	103a4 <LORAWAN_SetAttr+0x390>
   103ee:	1c58      	adds	r0, r3, #1
   103f0:	7809      	ldrb	r1, [r1, #0]
   103f2:	4b27      	ldr	r3, [pc, #156]	; (10490 <LORAWAN_SetAttr+0x47c>)
   103f4:	e7f9      	b.n	103ea <LORAWAN_SetAttr+0x3d6>
   103f6:	6858      	ldr	r0, [r3, #4]
   103f8:	7809      	ldrb	r1, [r1, #0]
   103fa:	4b26      	ldr	r3, [pc, #152]	; (10494 <LORAWAN_SetAttr+0x480>)
   103fc:	e7f5      	b.n	103ea <LORAWAN_SetAttr+0x3d6>
   103fe:	2300      	movs	r3, #0
   10400:	466a      	mov	r2, sp
   10402:	7809      	ldrb	r1, [r1, #0]
   10404:	7013      	strb	r3, [r2, #0]
   10406:	4299      	cmp	r1, r3
   10408:	d014      	beq.n	10434 <LORAWAN_SetAttr+0x420>
   1040a:	0022      	movs	r2, r4
   1040c:	2102      	movs	r1, #2
   1040e:	32f0      	adds	r2, #240	; 0xf0
   10410:	7813      	ldrb	r3, [r2, #0]
   10412:	420b      	tst	r3, r1
   10414:	d001      	beq.n	1041a <LORAWAN_SetAttr+0x406>
   10416:	438b      	bics	r3, r1
   10418:	7013      	strb	r3, [r2, #0]
   1041a:	2220      	movs	r2, #32
   1041c:	34f0      	adds	r4, #240	; 0xf0
   1041e:	7823      	ldrb	r3, [r4, #0]
   10420:	4213      	tst	r3, r2
   10422:	d100      	bne.n	10426 <LORAWAN_SetAttr+0x412>
   10424:	e67f      	b.n	10126 <LORAWAN_SetAttr+0x112>
   10426:	4393      	bics	r3, r2
   10428:	7023      	strb	r3, [r4, #0]
   1042a:	4669      	mov	r1, sp
   1042c:	4b1a      	ldr	r3, [pc, #104]	; (10498 <LORAWAN_SetAttr+0x484>)
   1042e:	2039      	movs	r0, #57	; 0x39
   10430:	4798      	blx	r3
   10432:	e678      	b.n	10126 <LORAWAN_SetAttr+0x112>
   10434:	4a19      	ldr	r2, [pc, #100]	; (1049c <LORAWAN_SetAttr+0x488>)
   10436:	4b1a      	ldr	r3, [pc, #104]	; (104a0 <LORAWAN_SetAttr+0x48c>)
   10438:	200e      	movs	r0, #14
   1043a:	4798      	blx	r3
   1043c:	e673      	b.n	10126 <LORAWAN_SetAttr+0x112>
   1043e:	466b      	mov	r3, sp
   10440:	780a      	ldrb	r2, [r1, #0]
   10442:	34f0      	adds	r4, #240	; 0xf0
   10444:	701a      	strb	r2, [r3, #0]
   10446:	2320      	movs	r3, #32
   10448:	2a00      	cmp	r2, #0
   1044a:	d007      	beq.n	1045c <LORAWAN_SetAttr+0x448>
   1044c:	7822      	ldrb	r2, [r4, #0]
   1044e:	4313      	orrs	r3, r2
   10450:	7023      	strb	r3, [r4, #0]
   10452:	4669      	mov	r1, sp
   10454:	4b10      	ldr	r3, [pc, #64]	; (10498 <LORAWAN_SetAttr+0x484>)
   10456:	2039      	movs	r0, #57	; 0x39
   10458:	4798      	blx	r3
   1045a:	e7a3      	b.n	103a4 <LORAWAN_SetAttr+0x390>
   1045c:	7822      	ldrb	r2, [r4, #0]
   1045e:	250a      	movs	r5, #10
   10460:	421a      	tst	r2, r3
   10462:	d100      	bne.n	10466 <LORAWAN_SetAttr+0x452>
   10464:	e62f      	b.n	100c6 <LORAWAN_SetAttr+0xb2>
   10466:	439a      	bics	r2, r3
   10468:	7022      	strb	r2, [r4, #0]
   1046a:	e7f2      	b.n	10452 <LORAWAN_SetAttr+0x43e>
   1046c:	0000f4e5 	.word	0x0000f4e5
   10470:	0000f475 	.word	0x0000f475
   10474:	0000e481 	.word	0x0000e481
   10478:	0000e445 	.word	0x0000e445
   1047c:	0000ff99 	.word	0x0000ff99
   10480:	0000d371 	.word	0x0000d371
   10484:	200026b4 	.word	0x200026b4
   10488:	00010ae9 	.word	0x00010ae9
   1048c:	00010d09 	.word	0x00010d09
   10490:	00010d5d 	.word	0x00010d5d
   10494:	00010cb9 	.word	0x00010cb9
   10498:	0000ab99 	.word	0x0000ab99
   1049c:	200024d4 	.word	0x200024d4
   104a0:	0000aa71 	.word	0x0000aa71

000104a4 <LORAWAN_Reset>:
   104a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   104a6:	b087      	sub	sp, #28
   104a8:	ab02      	add	r3, sp, #8
   104aa:	1ddd      	adds	r5, r3, #7
   104ac:	23ff      	movs	r3, #255	; 0xff
   104ae:	4c7d      	ldr	r4, [pc, #500]	; (106a4 <LORAWAN_Reset+0x200>)
   104b0:	702b      	strb	r3, [r5, #0]
   104b2:	0023      	movs	r3, r4
   104b4:	9001      	str	r0, [sp, #4]
   104b6:	33cf      	adds	r3, #207	; 0xcf
   104b8:	781b      	ldrb	r3, [r3, #0]
   104ba:	2b00      	cmp	r3, #0
   104bc:	d001      	beq.n	104c2 <LORAWAN_Reset+0x1e>
   104be:	4b7a      	ldr	r3, [pc, #488]	; (106a8 <LORAWAN_Reset+0x204>)
   104c0:	4798      	blx	r3
   104c2:	002a      	movs	r2, r5
   104c4:	4b79      	ldr	r3, [pc, #484]	; (106ac <LORAWAN_Reset+0x208>)
   104c6:	2100      	movs	r1, #0
   104c8:	2023      	movs	r0, #35	; 0x23
   104ca:	4798      	blx	r3
   104cc:	782b      	ldrb	r3, [r5, #0]
   104ce:	9a01      	ldr	r2, [sp, #4]
   104d0:	4293      	cmp	r3, r2
   104d2:	d001      	beq.n	104d8 <LORAWAN_Reset+0x34>
   104d4:	4b76      	ldr	r3, [pc, #472]	; (106b0 <LORAWAN_Reset+0x20c>)
   104d6:	4798      	blx	r3
   104d8:	0021      	movs	r1, r4
   104da:	2334      	movs	r3, #52	; 0x34
   104dc:	31d7      	adds	r1, #215	; 0xd7
   104de:	700b      	strb	r3, [r1, #0]
   104e0:	2000      	movs	r0, #0
   104e2:	4b74      	ldr	r3, [pc, #464]	; (106b4 <LORAWAN_Reset+0x210>)
   104e4:	4798      	blx	r3
   104e6:	0023      	movs	r3, r4
   104e8:	2201      	movs	r2, #1
   104ea:	33d4      	adds	r3, #212	; 0xd4
   104ec:	701a      	strb	r2, [r3, #0]
   104ee:	0023      	movs	r3, r4
   104f0:	2205      	movs	r2, #5
   104f2:	33d5      	adds	r3, #213	; 0xd5
   104f4:	701a      	strb	r2, [r3, #0]
   104f6:	0023      	movs	r3, r4
   104f8:	32fa      	adds	r2, #250	; 0xfa
   104fa:	33bd      	adds	r3, #189	; 0xbd
   104fc:	701a      	strb	r2, [r3, #0]
   104fe:	0023      	movs	r3, r4
   10500:	2500      	movs	r5, #0
   10502:	33be      	adds	r3, #190	; 0xbe
   10504:	701d      	strb	r5, [r3, #0]
   10506:	0023      	movs	r3, r4
   10508:	33a6      	adds	r3, #166	; 0xa6
   1050a:	801d      	strh	r5, [r3, #0]
   1050c:	0023      	movs	r3, r4
   1050e:	33a4      	adds	r3, #164	; 0xa4
   10510:	801d      	strh	r5, [r3, #0]
   10512:	0023      	movs	r3, r4
   10514:	3370      	adds	r3, #112	; 0x70
   10516:	701d      	strb	r5, [r3, #0]
   10518:	0023      	movs	r3, r4
   1051a:	33a2      	adds	r3, #162	; 0xa2
   1051c:	801d      	strh	r5, [r3, #0]
   1051e:	0023      	movs	r3, r4
   10520:	33cd      	adds	r3, #205	; 0xcd
   10522:	701d      	strb	r5, [r3, #0]
   10524:	0023      	movs	r3, r4
   10526:	33ce      	adds	r3, #206	; 0xce
   10528:	701d      	strb	r5, [r3, #0]
   1052a:	0023      	movs	r3, r4
   1052c:	3af9      	subs	r2, #249	; 0xf9
   1052e:	33d8      	adds	r3, #216	; 0xd8
   10530:	601a      	str	r2, [r3, #0]
   10532:	0023      	movs	r3, r4
   10534:	33dc      	adds	r3, #220	; 0xdc
   10536:	601d      	str	r5, [r3, #0]
   10538:	0023      	movs	r3, r4
   1053a:	33f2      	adds	r3, #242	; 0xf2
   1053c:	801d      	strh	r5, [r3, #0]
   1053e:	0023      	movs	r3, r4
   10540:	33f4      	adds	r3, #244	; 0xf4
   10542:	801d      	strh	r5, [r3, #0]
   10544:	320a      	adds	r2, #10
   10546:	0029      	movs	r1, r5
   10548:	4b5b      	ldr	r3, [pc, #364]	; (106b8 <LORAWAN_Reset+0x214>)
   1054a:	485c      	ldr	r0, [pc, #368]	; (106bc <LORAWAN_Reset+0x218>)
   1054c:	6665      	str	r5, [r4, #100]	; 0x64
   1054e:	6625      	str	r5, [r4, #96]	; 0x60
   10550:	4798      	blx	r3
   10552:	23da      	movs	r3, #218	; 0xda
   10554:	2201      	movs	r2, #1
   10556:	2607      	movs	r6, #7
   10558:	005b      	lsls	r3, r3, #1
   1055a:	54e2      	strb	r2, [r4, r3]
   1055c:	0029      	movs	r1, r5
   1055e:	0032      	movs	r2, r6
   10560:	4b55      	ldr	r3, [pc, #340]	; (106b8 <LORAWAN_Reset+0x214>)
   10562:	4857      	ldr	r0, [pc, #348]	; (106c0 <LORAWAN_Reset+0x21c>)
   10564:	4798      	blx	r3
   10566:	0023      	movs	r3, r4
   10568:	336c      	adds	r3, #108	; 0x6c
   1056a:	801d      	strh	r5, [r3, #0]
   1056c:	0023      	movs	r3, r4
   1056e:	33ba      	adds	r3, #186	; 0xba
   10570:	701e      	strb	r6, [r3, #0]
   10572:	0023      	movs	r3, r4
   10574:	33b9      	adds	r3, #185	; 0xb9
   10576:	701d      	strb	r5, [r3, #0]
   10578:	0023      	movs	r3, r4
   1057a:	33bc      	adds	r3, #188	; 0xbc
   1057c:	701d      	strb	r5, [r3, #0]
   1057e:	0023      	movs	r3, r4
   10580:	33bb      	adds	r3, #187	; 0xbb
   10582:	701d      	strb	r5, [r3, #0]
   10584:	9801      	ldr	r0, [sp, #4]
   10586:	4b4f      	ldr	r3, [pc, #316]	; (106c4 <LORAWAN_Reset+0x220>)
   10588:	65e5      	str	r5, [r4, #92]	; 0x5c
   1058a:	4798      	blx	r3
   1058c:	0007      	movs	r7, r0
   1058e:	2808      	cmp	r0, #8
   10590:	d000      	beq.n	10594 <LORAWAN_Reset+0xf0>
   10592:	e085      	b.n	106a0 <LORAWAN_Reset+0x1fc>
   10594:	4e4c      	ldr	r6, [pc, #304]	; (106c8 <LORAWAN_Reset+0x224>)
   10596:	4a4d      	ldr	r2, [pc, #308]	; (106cc <LORAWAN_Reset+0x228>)
   10598:	0029      	movs	r1, r5
   1059a:	47b0      	blx	r6
   1059c:	4a4c      	ldr	r2, [pc, #304]	; (106d0 <LORAWAN_Reset+0x22c>)
   1059e:	0029      	movs	r1, r5
   105a0:	200e      	movs	r0, #14
   105a2:	47b0      	blx	r6
   105a4:	0023      	movs	r3, r4
   105a6:	4a4b      	ldr	r2, [pc, #300]	; (106d4 <LORAWAN_Reset+0x230>)
   105a8:	33c0      	adds	r3, #192	; 0xc0
   105aa:	0029      	movs	r1, r5
   105ac:	2006      	movs	r0, #6
   105ae:	701d      	strb	r5, [r3, #0]
   105b0:	47b0      	blx	r6
   105b2:	4b49      	ldr	r3, [pc, #292]	; (106d8 <LORAWAN_Reset+0x234>)
   105b4:	4798      	blx	r3
   105b6:	466b      	mov	r3, sp
   105b8:	791b      	ldrb	r3, [r3, #4]
   105ba:	34d6      	adds	r4, #214	; 0xd6
   105bc:	7023      	strb	r3, [r4, #0]
   105be:	0029      	movs	r1, r5
   105c0:	4b46      	ldr	r3, [pc, #280]	; (106dc <LORAWAN_Reset+0x238>)
   105c2:	0028      	movs	r0, r5
   105c4:	4798      	blx	r3
   105c6:	2210      	movs	r2, #16
   105c8:	4b41      	ldr	r3, [pc, #260]	; (106d0 <LORAWAN_Reset+0x22c>)
   105ca:	781b      	ldrb	r3, [r3, #0]
   105cc:	4213      	tst	r3, r2
   105ce:	d006      	beq.n	105de <LORAWAN_Reset+0x13a>
   105d0:	ab02      	add	r3, sp, #8
   105d2:	1d99      	adds	r1, r3, #6
   105d4:	2301      	movs	r3, #1
   105d6:	0038      	movs	r0, r7
   105d8:	700b      	strb	r3, [r1, #0]
   105da:	4b36      	ldr	r3, [pc, #216]	; (106b4 <LORAWAN_Reset+0x210>)
   105dc:	4798      	blx	r3
   105de:	4b40      	ldr	r3, [pc, #256]	; (106e0 <LORAWAN_Reset+0x23c>)
   105e0:	4940      	ldr	r1, [pc, #256]	; (106e4 <LORAWAN_Reset+0x240>)
   105e2:	201e      	movs	r0, #30
   105e4:	4798      	blx	r3
   105e6:	4c2f      	ldr	r4, [pc, #188]	; (106a4 <LORAWAN_Reset+0x200>)
   105e8:	0023      	movs	r3, r4
   105ea:	33f0      	adds	r3, #240	; 0xf0
   105ec:	781b      	ldrb	r3, [r3, #0]
   105ee:	075b      	lsls	r3, r3, #29
   105f0:	d507      	bpl.n	10602 <LORAWAN_Reset+0x15e>
   105f2:	2100      	movs	r1, #0
   105f4:	aa04      	add	r2, sp, #16
   105f6:	2032      	movs	r0, #50	; 0x32
   105f8:	47b0      	blx	r6
   105fa:	a904      	add	r1, sp, #16
   105fc:	2027      	movs	r0, #39	; 0x27
   105fe:	4b3a      	ldr	r3, [pc, #232]	; (106e8 <LORAWAN_Reset+0x244>)
   10600:	4798      	blx	r3
   10602:	4a3a      	ldr	r2, [pc, #232]	; (106ec <LORAWAN_Reset+0x248>)
   10604:	2100      	movs	r1, #0
   10606:	2009      	movs	r0, #9
   10608:	47b0      	blx	r6
   1060a:	4a39      	ldr	r2, [pc, #228]	; (106f0 <LORAWAN_Reset+0x24c>)
   1060c:	2100      	movs	r1, #0
   1060e:	200a      	movs	r0, #10
   10610:	47b0      	blx	r6
   10612:	4a38      	ldr	r2, [pc, #224]	; (106f4 <LORAWAN_Reset+0x250>)
   10614:	2100      	movs	r1, #0
   10616:	2036      	movs	r0, #54	; 0x36
   10618:	47b0      	blx	r6
   1061a:	ad04      	add	r5, sp, #16
   1061c:	4a36      	ldr	r2, [pc, #216]	; (106f8 <LORAWAN_Reset+0x254>)
   1061e:	2100      	movs	r1, #0
   10620:	2037      	movs	r0, #55	; 0x37
   10622:	47b0      	blx	r6
   10624:	002a      	movs	r2, r5
   10626:	2100      	movs	r1, #0
   10628:	2014      	movs	r0, #20
   1062a:	47b0      	blx	r6
   1062c:	0023      	movs	r3, r4
   1062e:	782a      	ldrb	r2, [r5, #0]
   10630:	33ca      	adds	r3, #202	; 0xca
   10632:	701a      	strb	r2, [r3, #0]
   10634:	0023      	movs	r3, r4
   10636:	786a      	ldrb	r2, [r5, #1]
   10638:	33cb      	adds	r3, #203	; 0xcb
   1063a:	701a      	strb	r2, [r3, #0]
   1063c:	0023      	movs	r3, r4
   1063e:	2500      	movs	r5, #0
   10640:	33b6      	adds	r3, #182	; 0xb6
   10642:	801d      	strh	r5, [r3, #0]
   10644:	2245      	movs	r2, #69	; 0x45
   10646:	0029      	movs	r1, r5
   10648:	0020      	movs	r0, r4
   1064a:	4b1b      	ldr	r3, [pc, #108]	; (106b8 <LORAWAN_Reset+0x214>)
   1064c:	4798      	blx	r3
   1064e:	0023      	movs	r3, r4
   10650:	22fa      	movs	r2, #250	; 0xfa
   10652:	33a8      	adds	r3, #168	; 0xa8
   10654:	0092      	lsls	r2, r2, #2
   10656:	801a      	strh	r2, [r3, #0]
   10658:	0022      	movs	r2, r4
   1065a:	23fa      	movs	r3, #250	; 0xfa
   1065c:	32aa      	adds	r2, #170	; 0xaa
   1065e:	00db      	lsls	r3, r3, #3
   10660:	8013      	strh	r3, [r2, #0]
   10662:	0022      	movs	r2, r4
   10664:	4925      	ldr	r1, [pc, #148]	; (106fc <LORAWAN_Reset+0x258>)
   10666:	32ac      	adds	r2, #172	; 0xac
   10668:	8011      	strh	r1, [r2, #0]
   1066a:	0022      	movs	r2, r4
   1066c:	4924      	ldr	r1, [pc, #144]	; (10700 <LORAWAN_Reset+0x25c>)
   1066e:	32ae      	adds	r2, #174	; 0xae
   10670:	8011      	strh	r1, [r2, #0]
   10672:	0022      	movs	r2, r4
   10674:	32b2      	adds	r2, #178	; 0xb2
   10676:	8013      	strh	r3, [r2, #0]
   10678:	0023      	movs	r3, r4
   1067a:	2220      	movs	r2, #32
   1067c:	33b5      	adds	r3, #181	; 0xb5
   1067e:	701a      	strb	r2, [r3, #0]
   10680:	0023      	movs	r3, r4
   10682:	1892      	adds	r2, r2, r2
   10684:	33b4      	adds	r3, #180	; 0xb4
   10686:	701a      	strb	r2, [r3, #0]
   10688:	2380      	movs	r3, #128	; 0x80
   1068a:	34b0      	adds	r4, #176	; 0xb0
   1068c:	01db      	lsls	r3, r3, #7
   1068e:	8023      	strh	r3, [r4, #0]
   10690:	0028      	movs	r0, r5
   10692:	4b1c      	ldr	r3, [pc, #112]	; (10704 <LORAWAN_Reset+0x260>)
   10694:	4798      	blx	r3
   10696:	4b1c      	ldr	r3, [pc, #112]	; (10708 <LORAWAN_Reset+0x264>)
   10698:	4798      	blx	r3
   1069a:	0038      	movs	r0, r7
   1069c:	b007      	add	sp, #28
   1069e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   106a0:	270a      	movs	r7, #10
   106a2:	e7fa      	b.n	1069a <LORAWAN_Reset+0x1f6>
   106a4:	200023e4 	.word	0x200023e4
   106a8:	0000cbb5 	.word	0x0000cbb5
   106ac:	0000e4b9 	.word	0x0000e4b9
   106b0:	0000ace1 	.word	0x0000ace1
   106b4:	0001115d 	.word	0x0001115d
   106b8:	00015fc9 	.word	0x00015fc9
   106bc:	200024c4 	.word	0x200024c4
   106c0:	2000259b 	.word	0x2000259b
   106c4:	0000ac01 	.word	0x0000ac01
   106c8:	0000aa71 	.word	0x0000aa71
   106cc:	2000242d 	.word	0x2000242d
   106d0:	200024d4 	.word	0x200024d4
   106d4:	200024b0 	.word	0x200024b0
   106d8:	00011379 	.word	0x00011379
   106dc:	0000af89 	.word	0x0000af89
   106e0:	00011071 	.word	0x00011071
   106e4:	200025a3 	.word	0x200025a3
   106e8:	00010015 	.word	0x00010015
   106ec:	20002432 	.word	0x20002432
   106f0:	2000242e 	.word	0x2000242e
   106f4:	200024a5 	.word	0x200024a5
   106f8:	200024a3 	.word	0x200024a3
   106fc:	00001388 	.word	0x00001388
   10700:	00001770 	.word	0x00001770
   10704:	0000d371 	.word	0x0000d371
   10708:	00010aa1 	.word	0x00010aa1

0001070c <LORAWAN_ReadyToSleep>:
   1070c:	4b08      	ldr	r3, [pc, #32]	; (10730 <LORAWAN_ReadyToSleep+0x24>)
   1070e:	001a      	movs	r2, r3
   10710:	32d4      	adds	r2, #212	; 0xd4
   10712:	7812      	ldrb	r2, [r2, #0]
   10714:	2a01      	cmp	r2, #1
   10716:	d002      	beq.n	1071e <LORAWAN_ReadyToSleep+0x12>
   10718:	2000      	movs	r0, #0
   1071a:	2a04      	cmp	r2, #4
   1071c:	d106      	bne.n	1072c <LORAWAN_ReadyToSleep+0x20>
   1071e:	335c      	adds	r3, #92	; 0x5c
   10720:	7818      	ldrb	r0, [r3, #0]
   10722:	230e      	movs	r3, #14
   10724:	4018      	ands	r0, r3
   10726:	4243      	negs	r3, r0
   10728:	4158      	adcs	r0, r3
   1072a:	b2c0      	uxtb	r0, r0
   1072c:	4770      	bx	lr
   1072e:	46c0      	nop			; (mov r8, r8)
   10730:	200023e4 	.word	0x200023e4

00010734 <AESEncodeLoRa>:
   10734:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   10736:	0004      	movs	r4, r0
   10738:	2210      	movs	r2, #16
   1073a:	4668      	mov	r0, sp
   1073c:	4b03      	ldr	r3, [pc, #12]	; (1074c <AESEncodeLoRa+0x18>)
   1073e:	4798      	blx	r3
   10740:	4669      	mov	r1, sp
   10742:	0020      	movs	r0, r4
   10744:	4b02      	ldr	r3, [pc, #8]	; (10750 <AESEncodeLoRa+0x1c>)
   10746:	4798      	blx	r3
   10748:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
   1074a:	46c0      	nop			; (mov r8, r8)
   1074c:	00015f45 	.word	0x00015f45
   10750:	0000ad2d 	.word	0x0000ad2d

00010754 <FillSubKey.constprop.0>:
   10754:	b530      	push	{r4, r5, lr}
   10756:	2310      	movs	r3, #16
   10758:	2400      	movs	r4, #0
   1075a:	3b01      	subs	r3, #1
   1075c:	b2db      	uxtb	r3, r3
   1075e:	2bff      	cmp	r3, #255	; 0xff
   10760:	d100      	bne.n	10764 <FillSubKey.constprop.0+0x10>
   10762:	bd30      	pop	{r4, r5, pc}
   10764:	18c5      	adds	r5, r0, r3
   10766:	782a      	ldrb	r2, [r5, #0]
   10768:	0052      	lsls	r2, r2, #1
   1076a:	4322      	orrs	r2, r4
   1076c:	54ca      	strb	r2, [r1, r3]
   1076e:	782c      	ldrb	r4, [r5, #0]
   10770:	09e4      	lsrs	r4, r4, #7
   10772:	e7f2      	b.n	1075a <FillSubKey.constprop.0+0x6>

00010774 <AESCmac>:
   10774:	b5f0      	push	{r4, r5, r6, r7, lr}
   10776:	b09d      	sub	sp, #116	; 0x74
   10778:	ad18      	add	r5, sp, #96	; 0x60
   1077a:	4c59      	ldr	r4, [pc, #356]	; (108e0 <AESCmac+0x16c>)
   1077c:	9001      	str	r0, [sp, #4]
   1077e:	9103      	str	r1, [sp, #12]
   10780:	9202      	str	r2, [sp, #8]
   10782:	2100      	movs	r1, #0
   10784:	2210      	movs	r2, #16
   10786:	0028      	movs	r0, r5
   10788:	001f      	movs	r7, r3
   1078a:	47a0      	blx	r4
   1078c:	2387      	movs	r3, #135	; 0x87
   1078e:	ae14      	add	r6, sp, #80	; 0x50
   10790:	2210      	movs	r2, #16
   10792:	2100      	movs	r1, #0
   10794:	0030      	movs	r0, r6
   10796:	73eb      	strb	r3, [r5, #15]
   10798:	47a0      	blx	r4
   1079a:	9901      	ldr	r1, [sp, #4]
   1079c:	0030      	movs	r0, r6
   1079e:	4b51      	ldr	r3, [pc, #324]	; (108e4 <AESCmac+0x170>)
   107a0:	4798      	blx	r3
   107a2:	7832      	ldrb	r2, [r6, #0]
   107a4:	ac04      	add	r4, sp, #16
   107a6:	4b50      	ldr	r3, [pc, #320]	; (108e8 <AESCmac+0x174>)
   107a8:	0021      	movs	r1, r4
   107aa:	0030      	movs	r0, r6
   107ac:	2a7f      	cmp	r2, #127	; 0x7f
   107ae:	d83e      	bhi.n	1082e <AESCmac+0xba>
   107b0:	4798      	blx	r3
   107b2:	ab04      	add	r3, sp, #16
   107b4:	781a      	ldrb	r2, [r3, #0]
   107b6:	ac08      	add	r4, sp, #32
   107b8:	4b4b      	ldr	r3, [pc, #300]	; (108e8 <AESCmac+0x174>)
   107ba:	0021      	movs	r1, r4
   107bc:	a804      	add	r0, sp, #16
   107be:	2a7f      	cmp	r2, #127	; 0x7f
   107c0:	d83f      	bhi.n	10842 <AESCmac+0xce>
   107c2:	4798      	blx	r3
   107c4:	0039      	movs	r1, r7
   107c6:	310f      	adds	r1, #15
   107c8:	110b      	asrs	r3, r1, #4
   107ca:	d04d      	beq.n	10868 <AESCmac+0xf4>
   107cc:	b2db      	uxtb	r3, r3
   107ce:	9300      	str	r3, [sp, #0]
   107d0:	073b      	lsls	r3, r7, #28
   107d2:	d14b      	bne.n	1086c <AESCmac+0xf8>
   107d4:	9b00      	ldr	r3, [sp, #0]
   107d6:	20ff      	movs	r0, #255	; 0xff
   107d8:	1e5a      	subs	r2, r3, #1
   107da:	0112      	lsls	r2, r2, #4
   107dc:	b2d2      	uxtb	r2, r2
   107de:	0013      	movs	r3, r2
   107e0:	0100      	lsls	r0, r0, #4
   107e2:	4001      	ands	r1, r0
   107e4:	ad14      	add	r5, sp, #80	; 0x50
   107e6:	1a98      	subs	r0, r3, r2
   107e8:	b2c0      	uxtb	r0, r0
   107ea:	428b      	cmp	r3, r1
   107ec:	db33      	blt.n	10856 <AESCmac+0xe2>
   107ee:	2210      	movs	r2, #16
   107f0:	2100      	movs	r1, #0
   107f2:	a80c      	add	r0, sp, #48	; 0x30
   107f4:	4b3a      	ldr	r3, [pc, #232]	; (108e0 <AESCmac+0x16c>)
   107f6:	4798      	blx	r3
   107f8:	2400      	movs	r4, #0
   107fa:	9b00      	ldr	r3, [sp, #0]
   107fc:	3b01      	subs	r3, #1
   107fe:	429c      	cmp	r4, r3
   10800:	db57      	blt.n	108b2 <AESCmac+0x13e>
   10802:	2400      	movs	r4, #0
   10804:	ad10      	add	r5, sp, #64	; 0x40
   10806:	a80c      	add	r0, sp, #48	; 0x30
   10808:	a914      	add	r1, sp, #80	; 0x50
   1080a:	5c23      	ldrb	r3, [r4, r0]
   1080c:	5c62      	ldrb	r2, [r4, r1]
   1080e:	4053      	eors	r3, r2
   10810:	5563      	strb	r3, [r4, r5]
   10812:	3401      	adds	r4, #1
   10814:	2c10      	cmp	r4, #16
   10816:	d1f8      	bne.n	1080a <AESCmac+0x96>
   10818:	9901      	ldr	r1, [sp, #4]
   1081a:	0028      	movs	r0, r5
   1081c:	4b31      	ldr	r3, [pc, #196]	; (108e4 <AESCmac+0x170>)
   1081e:	4798      	blx	r3
   10820:	0022      	movs	r2, r4
   10822:	0029      	movs	r1, r5
   10824:	9803      	ldr	r0, [sp, #12]
   10826:	4b31      	ldr	r3, [pc, #196]	; (108ec <AESCmac+0x178>)
   10828:	4798      	blx	r3
   1082a:	b01d      	add	sp, #116	; 0x74
   1082c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1082e:	4798      	blx	r3
   10830:	2300      	movs	r3, #0
   10832:	5d1a      	ldrb	r2, [r3, r4]
   10834:	5ce9      	ldrb	r1, [r5, r3]
   10836:	404a      	eors	r2, r1
   10838:	551a      	strb	r2, [r3, r4]
   1083a:	3301      	adds	r3, #1
   1083c:	2b10      	cmp	r3, #16
   1083e:	d1f8      	bne.n	10832 <AESCmac+0xbe>
   10840:	e7b7      	b.n	107b2 <AESCmac+0x3e>
   10842:	4798      	blx	r3
   10844:	2300      	movs	r3, #0
   10846:	5d1a      	ldrb	r2, [r3, r4]
   10848:	5ce9      	ldrb	r1, [r5, r3]
   1084a:	404a      	eors	r2, r1
   1084c:	551a      	strb	r2, [r3, r4]
   1084e:	3301      	adds	r3, #1
   10850:	2b10      	cmp	r3, #16
   10852:	d1f8      	bne.n	10846 <AESCmac+0xd2>
   10854:	e7b6      	b.n	107c4 <AESCmac+0x50>
   10856:	9c02      	ldr	r4, [sp, #8]
   10858:	ae04      	add	r6, sp, #16
   1085a:	5ce4      	ldrb	r4, [r4, r3]
   1085c:	5c36      	ldrb	r6, [r6, r0]
   1085e:	3301      	adds	r3, #1
   10860:	4074      	eors	r4, r6
   10862:	542c      	strb	r4, [r5, r0]
   10864:	b2db      	uxtb	r3, r3
   10866:	e7be      	b.n	107e6 <AESCmac+0x72>
   10868:	2301      	movs	r3, #1
   1086a:	9300      	str	r3, [sp, #0]
   1086c:	2300      	movs	r3, #0
   1086e:	220f      	movs	r2, #15
   10870:	003e      	movs	r6, r7
   10872:	001c      	movs	r4, r3
   10874:	2080      	movs	r0, #128	; 0x80
   10876:	4396      	bics	r6, r2
   10878:	4017      	ands	r7, r2
   1087a:	aa18      	add	r2, sp, #96	; 0x60
   1087c:	b2d9      	uxtb	r1, r3
   1087e:	428f      	cmp	r7, r1
   10880:	d911      	bls.n	108a6 <AESCmac+0x132>
   10882:	9902      	ldr	r1, [sp, #8]
   10884:	1989      	adds	r1, r1, r6
   10886:	5cc9      	ldrb	r1, [r1, r3]
   10888:	54d1      	strb	r1, [r2, r3]
   1088a:	3301      	adds	r3, #1
   1088c:	2b10      	cmp	r3, #16
   1088e:	d1f5      	bne.n	1087c <AESCmac+0x108>
   10890:	2300      	movs	r3, #0
   10892:	a914      	add	r1, sp, #80	; 0x50
   10894:	a808      	add	r0, sp, #32
   10896:	5cea      	ldrb	r2, [r5, r3]
   10898:	5c1c      	ldrb	r4, [r3, r0]
   1089a:	4062      	eors	r2, r4
   1089c:	545a      	strb	r2, [r3, r1]
   1089e:	3301      	adds	r3, #1
   108a0:	2b10      	cmp	r3, #16
   108a2:	d1f8      	bne.n	10896 <AESCmac+0x122>
   108a4:	e7a3      	b.n	107ee <AESCmac+0x7a>
   108a6:	428f      	cmp	r7, r1
   108a8:	d101      	bne.n	108ae <AESCmac+0x13a>
   108aa:	54d0      	strb	r0, [r2, r3]
   108ac:	e7ed      	b.n	1088a <AESCmac+0x116>
   108ae:	54d4      	strb	r4, [r2, r3]
   108b0:	e7eb      	b.n	1088a <AESCmac+0x116>
   108b2:	2200      	movs	r2, #0
   108b4:	9802      	ldr	r0, [sp, #8]
   108b6:	0123      	lsls	r3, r4, #4
   108b8:	a910      	add	r1, sp, #64	; 0x40
   108ba:	18c0      	adds	r0, r0, r3
   108bc:	ad0c      	add	r5, sp, #48	; 0x30
   108be:	5c83      	ldrb	r3, [r0, r2]
   108c0:	5d56      	ldrb	r6, [r2, r5]
   108c2:	4073      	eors	r3, r6
   108c4:	5453      	strb	r3, [r2, r1]
   108c6:	3201      	adds	r2, #1
   108c8:	2a10      	cmp	r2, #16
   108ca:	d1f8      	bne.n	108be <AESCmac+0x14a>
   108cc:	4b07      	ldr	r3, [pc, #28]	; (108ec <AESCmac+0x178>)
   108ce:	0028      	movs	r0, r5
   108d0:	4798      	blx	r3
   108d2:	3401      	adds	r4, #1
   108d4:	9901      	ldr	r1, [sp, #4]
   108d6:	0028      	movs	r0, r5
   108d8:	4b02      	ldr	r3, [pc, #8]	; (108e4 <AESCmac+0x170>)
   108da:	4798      	blx	r3
   108dc:	b2e4      	uxtb	r4, r4
   108de:	e78c      	b.n	107fa <AESCmac+0x86>
   108e0:	00015fc9 	.word	0x00015fc9
   108e4:	00010735 	.word	0x00010735
   108e8:	00010755 	.word	0x00010755
   108ec:	00015f45 	.word	0x00015f45

000108f0 <LorawanClasscUlAckTimerCallback>:
   108f0:	2102      	movs	r1, #2
   108f2:	4b03      	ldr	r3, [pc, #12]	; (10900 <LorawanClasscUlAckTimerCallback+0x10>)
   108f4:	336c      	adds	r3, #108	; 0x6c
   108f6:	781a      	ldrb	r2, [r3, #0]
   108f8:	438a      	bics	r2, r1
   108fa:	701a      	strb	r2, [r3, #0]
   108fc:	4770      	bx	lr
   108fe:	46c0      	nop			; (mov r8, r8)
   10900:	200023e4 	.word	0x200023e4

00010904 <LorawanClasscValidateSend>:
   10904:	23da      	movs	r3, #218	; 0xda
   10906:	b510      	push	{r4, lr}
   10908:	4c0a      	ldr	r4, [pc, #40]	; (10934 <LorawanClasscValidateSend+0x30>)
   1090a:	005b      	lsls	r3, r3, #1
   1090c:	5ce3      	ldrb	r3, [r4, r3]
   1090e:	2b00      	cmp	r3, #0
   10910:	d008      	beq.n	10924 <LorawanClasscValidateSend+0x20>
   10912:	220e      	movs	r2, #14
   10914:	345c      	adds	r4, #92	; 0x5c
   10916:	7823      	ldrb	r3, [r4, #0]
   10918:	2008      	movs	r0, #8
   1091a:	4013      	ands	r3, r2
   1091c:	2b02      	cmp	r3, #2
   1091e:	d100      	bne.n	10922 <LorawanClasscValidateSend+0x1e>
   10920:	2011      	movs	r0, #17
   10922:	bd10      	pop	{r4, pc}
   10924:	0023      	movs	r3, r4
   10926:	33fc      	adds	r3, #252	; 0xfc
   10928:	7818      	ldrb	r0, [r3, #0]
   1092a:	4b03      	ldr	r3, [pc, #12]	; (10938 <LorawanClasscValidateSend+0x34>)
   1092c:	4798      	blx	r3
   1092e:	2800      	cmp	r0, #0
   10930:	d1ef      	bne.n	10912 <LorawanClasscValidateSend+0xe>
   10932:	e7f5      	b.n	10920 <LorawanClasscValidateSend+0x1c>
   10934:	200023e4 	.word	0x200023e4
   10938:	0000c0c1 	.word	0x0000c0c1

0001093c <LorawanClasscReceiveWindow1Callback>:
   1093c:	2301      	movs	r3, #1
   1093e:	b507      	push	{r0, r1, r2, lr}
   10940:	a801      	add	r0, sp, #4
   10942:	7003      	strb	r3, [r0, #0]
   10944:	4b01      	ldr	r3, [pc, #4]	; (1094c <LorawanClasscReceiveWindow1Callback+0x10>)
   10946:	4798      	blx	r3
   10948:	bd07      	pop	{r0, r1, r2, pc}
   1094a:	46c0      	nop			; (mov r8, r8)
   1094c:	00012371 	.word	0x00012371

00010950 <LorawanClasscRxDone>:
   10950:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10952:	221f      	movs	r2, #31
   10954:	7803      	ldrb	r3, [r0, #0]
   10956:	4c13      	ldr	r4, [pc, #76]	; (109a4 <LorawanClasscRxDone+0x54>)
   10958:	4393      	bics	r3, r2
   1095a:	2ba0      	cmp	r3, #160	; 0xa0
   1095c:	d10c      	bne.n	10978 <LorawanClasscRxDone+0x28>
   1095e:	0025      	movs	r5, r4
   10960:	35fc      	adds	r5, #252	; 0xfc
   10962:	7828      	ldrb	r0, [r5, #0]
   10964:	4b10      	ldr	r3, [pc, #64]	; (109a8 <LorawanClasscRxDone+0x58>)
   10966:	4798      	blx	r3
   10968:	1e02      	subs	r2, r0, #0
   1096a:	d014      	beq.n	10996 <LorawanClasscRxDone+0x46>
   1096c:	0022      	movs	r2, r4
   1096e:	2102      	movs	r1, #2
   10970:	326c      	adds	r2, #108	; 0x6c
   10972:	7813      	ldrb	r3, [r2, #0]
   10974:	438b      	bics	r3, r1
   10976:	7013      	strb	r3, [r2, #0]
   10978:	345c      	adds	r4, #92	; 0x5c
   1097a:	7823      	ldrb	r3, [r4, #0]
   1097c:	220e      	movs	r2, #14
   1097e:	0019      	movs	r1, r3
   10980:	4011      	ands	r1, r2
   10982:	2906      	cmp	r1, #6
   10984:	d103      	bne.n	1098e <LorawanClasscRxDone+0x3e>
   10986:	4393      	bics	r3, r2
   10988:	3a04      	subs	r2, #4
   1098a:	4313      	orrs	r3, r2
   1098c:	7023      	strb	r3, [r4, #0]
   1098e:	2000      	movs	r0, #0
   10990:	4b06      	ldr	r3, [pc, #24]	; (109ac <LorawanClasscRxDone+0x5c>)
   10992:	4798      	blx	r3
   10994:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10996:	7828      	ldrb	r0, [r5, #0]
   10998:	4b05      	ldr	r3, [pc, #20]	; (109b0 <LorawanClasscRxDone+0x60>)
   1099a:	9200      	str	r2, [sp, #0]
   1099c:	4905      	ldr	r1, [pc, #20]	; (109b4 <LorawanClasscRxDone+0x64>)
   1099e:	4d06      	ldr	r5, [pc, #24]	; (109b8 <LorawanClasscRxDone+0x68>)
   109a0:	47a8      	blx	r5
   109a2:	e7e9      	b.n	10978 <LorawanClasscRxDone+0x28>
   109a4:	200023e4 	.word	0x200023e4
   109a8:	0000c0c1 	.word	0x0000c0c1
   109ac:	0000ef49 	.word	0x0000ef49
   109b0:	000108f1 	.word	0x000108f1
   109b4:	001e8480 	.word	0x001e8480
   109b8:	0000bf29 	.word	0x0000bf29

000109bc <LorawanClasscTxDone>:
   109bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   109be:	4c1b      	ldr	r4, [pc, #108]	; (10a2c <LorawanClasscTxDone+0x70>)
   109c0:	0023      	movs	r3, r4
   109c2:	33aa      	adds	r3, #170	; 0xaa
   109c4:	881d      	ldrh	r5, [r3, #0]
   109c6:	0023      	movs	r3, r4
   109c8:	336c      	adds	r3, #108	; 0x6c
   109ca:	781b      	ldrb	r3, [r3, #0]
   109cc:	07db      	lsls	r3, r3, #31
   109ce:	d525      	bpl.n	10a1c <LorawanClasscTxDone+0x60>
   109d0:	0023      	movs	r3, r4
   109d2:	0022      	movs	r2, r4
   109d4:	33ba      	adds	r3, #186	; 0xba
   109d6:	781b      	ldrb	r3, [r3, #0]
   109d8:	32bc      	adds	r2, #188	; 0xbc
   109da:	3301      	adds	r3, #1
   109dc:	7812      	ldrb	r2, [r2, #0]
   109de:	4293      	cmp	r3, r2
   109e0:	db07      	blt.n	109f2 <LorawanClasscTxDone+0x36>
   109e2:	23df      	movs	r3, #223	; 0xdf
   109e4:	005b      	lsls	r3, r3, #1
   109e6:	5ce3      	ldrb	r3, [r4, r3]
   109e8:	2b00      	cmp	r3, #0
   109ea:	d002      	beq.n	109f2 <LorawanClasscTxDone+0x36>
   109ec:	23fa      	movs	r3, #250	; 0xfa
   109ee:	00db      	lsls	r3, r3, #3
   109f0:	18ed      	adds	r5, r5, r3
   109f2:	0023      	movs	r3, r4
   109f4:	33fc      	adds	r3, #252	; 0xfc
   109f6:	1945      	adds	r5, r0, r5
   109f8:	7818      	ldrb	r0, [r3, #0]
   109fa:	4b0d      	ldr	r3, [pc, #52]	; (10a30 <LorawanClasscTxDone+0x74>)
   109fc:	4798      	blx	r3
   109fe:	34c8      	adds	r4, #200	; 0xc8
   10a00:	21fa      	movs	r1, #250	; 0xfa
   10a02:	7820      	ldrb	r0, [r4, #0]
   10a04:	2400      	movs	r4, #0
   10a06:	0089      	lsls	r1, r1, #2
   10a08:	4369      	muls	r1, r5
   10a0a:	0022      	movs	r2, r4
   10a0c:	4d09      	ldr	r5, [pc, #36]	; (10a34 <LorawanClasscTxDone+0x78>)
   10a0e:	9400      	str	r4, [sp, #0]
   10a10:	4b09      	ldr	r3, [pc, #36]	; (10a38 <LorawanClasscTxDone+0x7c>)
   10a12:	47a8      	blx	r5
   10a14:	0020      	movs	r0, r4
   10a16:	4b09      	ldr	r3, [pc, #36]	; (10a3c <LorawanClasscTxDone+0x80>)
   10a18:	4798      	blx	r3
   10a1a:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   10a1c:	0023      	movs	r3, r4
   10a1e:	0022      	movs	r2, r4
   10a20:	33b9      	adds	r3, #185	; 0xb9
   10a22:	781b      	ldrb	r3, [r3, #0]
   10a24:	32bb      	adds	r2, #187	; 0xbb
   10a26:	3301      	adds	r3, #1
   10a28:	e7d8      	b.n	109dc <LorawanClasscTxDone+0x20>
   10a2a:	46c0      	nop			; (mov r8, r8)
   10a2c:	200023e4 	.word	0x200023e4
   10a30:	0000c235 	.word	0x0000c235
   10a34:	0000bf29 	.word	0x0000bf29
   10a38:	0000ee15 	.word	0x0000ee15
   10a3c:	0000ef49 	.word	0x0000ef49

00010a40 <LorawanClasscRxTimeout>:
   10a40:	b510      	push	{r4, lr}
   10a42:	4b08      	ldr	r3, [pc, #32]	; (10a64 <LorawanClasscRxTimeout+0x24>)
   10a44:	210e      	movs	r1, #14
   10a46:	335c      	adds	r3, #92	; 0x5c
   10a48:	781a      	ldrb	r2, [r3, #0]
   10a4a:	0010      	movs	r0, r2
   10a4c:	4008      	ands	r0, r1
   10a4e:	2806      	cmp	r0, #6
   10a50:	d106      	bne.n	10a60 <LorawanClasscRxTimeout+0x20>
   10a52:	438a      	bics	r2, r1
   10a54:	3904      	subs	r1, #4
   10a56:	430a      	orrs	r2, r1
   10a58:	701a      	strb	r2, [r3, #0]
   10a5a:	2000      	movs	r0, #0
   10a5c:	4b02      	ldr	r3, [pc, #8]	; (10a68 <LorawanClasscRxTimeout+0x28>)
   10a5e:	4798      	blx	r3
   10a60:	bd10      	pop	{r4, pc}
   10a62:	46c0      	nop			; (mov r8, r8)
   10a64:	200023e4 	.word	0x200023e4
   10a68:	0000ef49 	.word	0x0000ef49

00010a6c <LorawanClasscNotifyAppOnReceive>:
   10a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a6e:	001f      	movs	r7, r3
   10a70:	4b08      	ldr	r3, [pc, #32]	; (10a94 <LorawanClasscNotifyAppOnReceive+0x28>)
   10a72:	0004      	movs	r4, r0
   10a74:	33fc      	adds	r3, #252	; 0xfc
   10a76:	7818      	ldrb	r0, [r3, #0]
   10a78:	4b07      	ldr	r3, [pc, #28]	; (10a98 <LorawanClasscNotifyAppOnReceive+0x2c>)
   10a7a:	000d      	movs	r5, r1
   10a7c:	0016      	movs	r6, r2
   10a7e:	4798      	blx	r3
   10a80:	2800      	cmp	r0, #0
   10a82:	d105      	bne.n	10a90 <LorawanClasscNotifyAppOnReceive+0x24>
   10a84:	0020      	movs	r0, r4
   10a86:	003b      	movs	r3, r7
   10a88:	0032      	movs	r2, r6
   10a8a:	0029      	movs	r1, r5
   10a8c:	4c03      	ldr	r4, [pc, #12]	; (10a9c <LorawanClasscNotifyAppOnReceive+0x30>)
   10a8e:	47a0      	blx	r4
   10a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a92:	46c0      	nop			; (mov r8, r8)
   10a94:	200023e4 	.word	0x200023e4
   10a98:	0000c0c1 	.word	0x0000c0c1
   10a9c:	0000e33d 	.word	0x0000e33d

00010aa0 <LorawanMcastInit>:
   10aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10aa2:	2500      	movs	r5, #0
   10aa4:	2701      	movs	r7, #1
   10aa6:	4b0c      	ldr	r3, [pc, #48]	; (10ad8 <LorawanMcastInit+0x38>)
   10aa8:	4c0c      	ldr	r4, [pc, #48]	; (10adc <LorawanMcastInit+0x3c>)
   10aaa:	33ff      	adds	r3, #255	; 0xff
   10aac:	705d      	strb	r5, [r3, #1]
   10aae:	709d      	strb	r5, [r3, #2]
   10ab0:	427f      	negs	r7, r7
   10ab2:	0023      	movs	r3, r4
   10ab4:	3b14      	subs	r3, #20
   10ab6:	601f      	str	r7, [r3, #0]
   10ab8:	2210      	movs	r2, #16
   10aba:	2100      	movs	r1, #0
   10abc:	0020      	movs	r0, r4
   10abe:	4e08      	ldr	r6, [pc, #32]	; (10ae0 <LorawanMcastInit+0x40>)
   10ac0:	47b0      	blx	r6
   10ac2:	0020      	movs	r0, r4
   10ac4:	2210      	movs	r2, #16
   10ac6:	3810      	subs	r0, #16
   10ac8:	2100      	movs	r1, #0
   10aca:	47b0      	blx	r6
   10acc:	4b05      	ldr	r3, [pc, #20]	; (10ae4 <LorawanMcastInit+0x44>)
   10ace:	6125      	str	r5, [r4, #16]
   10ad0:	342c      	adds	r4, #44	; 0x2c
   10ad2:	429c      	cmp	r4, r3
   10ad4:	d1ed      	bne.n	10ab2 <LorawanMcastInit+0x12>
   10ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10ad8:	200023e4 	.word	0x200023e4
   10adc:	200024fc 	.word	0x200024fc
   10ae0:	00015fc9 	.word	0x00015fc9
   10ae4:	200025ac 	.word	0x200025ac

00010ae8 <LorawanMcastEnable>:
   10ae8:	0002      	movs	r2, r0
   10aea:	b530      	push	{r4, r5, lr}
   10aec:	200a      	movs	r0, #10
   10aee:	2903      	cmp	r1, #3
   10af0:	d821      	bhi.n	10b36 <LorawanMcastEnable+0x4e>
   10af2:	4b17      	ldr	r3, [pc, #92]	; (10b50 <LorawanMcastEnable+0x68>)
   10af4:	2a00      	cmp	r2, #0
   10af6:	d01f      	beq.n	10b38 <LorawanMcastEnable+0x50>
   10af8:	222c      	movs	r2, #44	; 0x2c
   10afa:	434a      	muls	r2, r1
   10afc:	189a      	adds	r2, r3, r2
   10afe:	3229      	adds	r2, #41	; 0x29
   10b00:	32ff      	adds	r2, #255	; 0xff
   10b02:	7912      	ldrb	r2, [r2, #4]
   10b04:	0754      	lsls	r4, r2, #29
   10b06:	d512      	bpl.n	10b2e <LorawanMcastEnable+0x46>
   10b08:	0794      	lsls	r4, r2, #30
   10b0a:	d510      	bpl.n	10b2e <LorawanMcastEnable+0x46>
   10b0c:	07d2      	lsls	r2, r2, #31
   10b0e:	0fd2      	lsrs	r2, r2, #31
   10b10:	2a01      	cmp	r2, #1
   10b12:	d10c      	bne.n	10b2e <LorawanMcastEnable+0x46>
   10b14:	001c      	movs	r4, r3
   10b16:	34d4      	adds	r4, #212	; 0xd4
   10b18:	7825      	ldrb	r5, [r4, #0]
   10b1a:	2406      	movs	r4, #6
   10b1c:	4225      	tst	r5, r4
   10b1e:	d006      	beq.n	10b2e <LorawanMcastEnable+0x46>
   10b20:	0018      	movs	r0, r3
   10b22:	408a      	lsls	r2, r1
   10b24:	30ff      	adds	r0, #255	; 0xff
   10b26:	7881      	ldrb	r1, [r0, #2]
   10b28:	430a      	orrs	r2, r1
   10b2a:	7082      	strb	r2, [r0, #2]
   10b2c:	2008      	movs	r0, #8
   10b2e:	33ff      	adds	r3, #255	; 0xff
   10b30:	785a      	ldrb	r2, [r3, #1]
   10b32:	3201      	adds	r2, #1
   10b34:	705a      	strb	r2, [r3, #1]
   10b36:	bd30      	pop	{r4, r5, pc}
   10b38:	2201      	movs	r2, #1
   10b3a:	408a      	lsls	r2, r1
   10b3c:	0011      	movs	r1, r2
   10b3e:	33ff      	adds	r3, #255	; 0xff
   10b40:	789a      	ldrb	r2, [r3, #2]
   10b42:	2008      	movs	r0, #8
   10b44:	438a      	bics	r2, r1
   10b46:	709a      	strb	r2, [r3, #2]
   10b48:	785a      	ldrb	r2, [r3, #1]
   10b4a:	3a01      	subs	r2, #1
   10b4c:	705a      	strb	r2, [r3, #1]
   10b4e:	e7f2      	b.n	10b36 <LorawanMcastEnable+0x4e>
   10b50:	200023e4 	.word	0x200023e4

00010b54 <LorawanMcastValidateHdr>:
   10b54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   10b56:	469c      	mov	ip, r3
   10b58:	2400      	movs	r4, #0
   10b5a:	230a      	movs	r3, #10
   10b5c:	4f18      	ldr	r7, [pc, #96]	; (10bc0 <LorawanMcastValidateHdr+0x6c>)
   10b5e:	b2e5      	uxtb	r5, r4
   10b60:	9501      	str	r5, [sp, #4]
   10b62:	4d18      	ldr	r5, [pc, #96]	; (10bc4 <LorawanMcastValidateHdr+0x70>)
   10b64:	2601      	movs	r6, #1
   10b66:	78ad      	ldrb	r5, [r5, #2]
   10b68:	4125      	asrs	r5, r4
   10b6a:	4235      	tst	r5, r6
   10b6c:	d023      	beq.n	10bb6 <LorawanMcastValidateHdr+0x62>
   10b6e:	7886      	ldrb	r6, [r0, #2]
   10b70:	7845      	ldrb	r5, [r0, #1]
   10b72:	0236      	lsls	r6, r6, #8
   10b74:	432e      	orrs	r6, r5
   10b76:	78c5      	ldrb	r5, [r0, #3]
   10b78:	042d      	lsls	r5, r5, #16
   10b7a:	432e      	orrs	r6, r5
   10b7c:	7905      	ldrb	r5, [r0, #4]
   10b7e:	062d      	lsls	r5, r5, #24
   10b80:	4335      	orrs	r5, r6
   10b82:	262c      	movs	r6, #44	; 0x2c
   10b84:	4366      	muls	r6, r4
   10b86:	3605      	adds	r6, #5
   10b88:	36ff      	adds	r6, #255	; 0xff
   10b8a:	59be      	ldr	r6, [r7, r6]
   10b8c:	42b5      	cmp	r5, r6
   10b8e:	d112      	bne.n	10bb6 <LorawanMcastValidateHdr+0x62>
   10b90:	003d      	movs	r5, r7
   10b92:	35d4      	adds	r5, #212	; 0xd4
   10b94:	782e      	ldrb	r6, [r5, #0]
   10b96:	2506      	movs	r5, #6
   10b98:	422e      	tst	r6, r5
   10b9a:	d00c      	beq.n	10bb6 <LorawanMcastValidateHdr+0x62>
   10b9c:	2a00      	cmp	r2, #0
   10b9e:	d00a      	beq.n	10bb6 <LorawanMcastValidateHdr+0x62>
   10ba0:	7946      	ldrb	r6, [r0, #5]
   10ba2:	3569      	adds	r5, #105	; 0x69
   10ba4:	422e      	tst	r6, r5
   10ba6:	d106      	bne.n	10bb6 <LorawanMcastValidateHdr+0x62>
   10ba8:	2903      	cmp	r1, #3
   10baa:	d104      	bne.n	10bb6 <LorawanMcastValidateHdr+0x62>
   10bac:	466d      	mov	r5, sp
   10bae:	4663      	mov	r3, ip
   10bb0:	792d      	ldrb	r5, [r5, #4]
   10bb2:	701d      	strb	r5, [r3, #0]
   10bb4:	2308      	movs	r3, #8
   10bb6:	3401      	adds	r4, #1
   10bb8:	2c04      	cmp	r4, #4
   10bba:	d1d0      	bne.n	10b5e <LorawanMcastValidateHdr+0xa>
   10bbc:	0018      	movs	r0, r3
   10bbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
   10bc0:	200023e4 	.word	0x200023e4
   10bc4:	200024e3 	.word	0x200024e3

00010bc8 <LorawanMcastProcessPkt>:
   10bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10bca:	b089      	sub	sp, #36	; 0x24
   10bcc:	9005      	str	r0, [sp, #20]
   10bce:	000c      	movs	r4, r1
   10bd0:	0015      	movs	r5, r2
   10bd2:	7991      	ldrb	r1, [r2, #6]
   10bd4:	79d2      	ldrb	r2, [r2, #7]
   10bd6:	4e31      	ldr	r6, [pc, #196]	; (10c9c <LorawanMcastProcessPkt+0xd4>)
   10bd8:	0212      	lsls	r2, r2, #8
   10bda:	430a      	orrs	r2, r1
   10bdc:	212c      	movs	r1, #44	; 0x2c
   10bde:	4359      	muls	r1, r3
   10be0:	1873      	adds	r3, r6, r1
   10be2:	9307      	str	r3, [sp, #28]
   10be4:	33fe      	adds	r3, #254	; 0xfe
   10be6:	9106      	str	r1, [sp, #24]
   10be8:	8d59      	ldrh	r1, [r3, #42]	; 0x2a
   10bea:	270a      	movs	r7, #10
   10bec:	4291      	cmp	r1, r2
   10bee:	d83e      	bhi.n	10c6e <LorawanMcastProcessPkt+0xa6>
   10bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
   10bf2:	2105      	movs	r1, #5
   10bf4:	4b2a      	ldr	r3, [pc, #168]	; (10ca0 <LorawanMcastProcessPkt+0xd8>)
   10bf6:	2000      	movs	r0, #0
   10bf8:	4798      	blx	r3
   10bfa:	9a07      	ldr	r2, [sp, #28]
   10bfc:	0021      	movs	r1, r4
   10bfe:	32fc      	adds	r2, #252	; 0xfc
   10c00:	6893      	ldr	r3, [r2, #8]
   10c02:	9805      	ldr	r0, [sp, #20]
   10c04:	9303      	str	r3, [sp, #12]
   10c06:	4b27      	ldr	r3, [pc, #156]	; (10ca4 <LorawanMcastProcessPkt+0xdc>)
   10c08:	390d      	subs	r1, #13
   10c0a:	9302      	str	r3, [sp, #8]
   10c0c:	2319      	movs	r3, #25
   10c0e:	9301      	str	r3, [sp, #4]
   10c10:	9b06      	ldr	r3, [sp, #24]
   10c12:	b2c9      	uxtb	r1, r1
   10c14:	3319      	adds	r3, #25
   10c16:	33ff      	adds	r3, #255	; 0xff
   10c18:	199b      	adds	r3, r3, r6
   10c1a:	9300      	str	r3, [sp, #0]
   10c1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   10c1e:	4f22      	ldr	r7, [pc, #136]	; (10ca8 <LorawanMcastProcessPkt+0xe0>)
   10c20:	2201      	movs	r2, #1
   10c22:	3009      	adds	r0, #9
   10c24:	47b8      	blx	r7
   10c26:	4921      	ldr	r1, [pc, #132]	; (10cac <LorawanMcastProcessPkt+0xe4>)
   10c28:	2708      	movs	r7, #8
   10c2a:	784a      	ldrb	r2, [r1, #1]
   10c2c:	780b      	ldrb	r3, [r1, #0]
   10c2e:	0212      	lsls	r2, r2, #8
   10c30:	431a      	orrs	r2, r3
   10c32:	788b      	ldrb	r3, [r1, #2]
   10c34:	041b      	lsls	r3, r3, #16
   10c36:	431a      	orrs	r2, r3
   10c38:	78cb      	ldrb	r3, [r1, #3]
   10c3a:	061b      	lsls	r3, r3, #24
   10c3c:	4313      	orrs	r3, r2
   10c3e:	d016      	beq.n	10c6e <LorawanMcastProcessPkt+0xa6>
   10c40:	2220      	movs	r2, #32
   10c42:	366c      	adds	r6, #108	; 0x6c
   10c44:	7833      	ldrb	r3, [r6, #0]
   10c46:	9905      	ldr	r1, [sp, #20]
   10c48:	4393      	bics	r3, r2
   10c4a:	7033      	strb	r3, [r6, #0]
   10c4c:	78ab      	ldrb	r3, [r5, #2]
   10c4e:	0022      	movs	r2, r4
   10c50:	40bb      	lsls	r3, r7
   10c52:	7868      	ldrb	r0, [r5, #1]
   10c54:	3a0c      	subs	r2, #12
   10c56:	4303      	orrs	r3, r0
   10c58:	78e8      	ldrb	r0, [r5, #3]
   10c5a:	b2d2      	uxtb	r2, r2
   10c5c:	0400      	lsls	r0, r0, #16
   10c5e:	4303      	orrs	r3, r0
   10c60:	7928      	ldrb	r0, [r5, #4]
   10c62:	19c9      	adds	r1, r1, r7
   10c64:	0600      	lsls	r0, r0, #24
   10c66:	4318      	orrs	r0, r3
   10c68:	4c11      	ldr	r4, [pc, #68]	; (10cb0 <LorawanMcastProcessPkt+0xe8>)
   10c6a:	003b      	movs	r3, r7
   10c6c:	47a0      	blx	r4
   10c6e:	4a0b      	ldr	r2, [pc, #44]	; (10c9c <LorawanMcastProcessPkt+0xd4>)
   10c70:	200e      	movs	r0, #14
   10c72:	0011      	movs	r1, r2
   10c74:	315c      	adds	r1, #92	; 0x5c
   10c76:	780b      	ldrb	r3, [r1, #0]
   10c78:	001c      	movs	r4, r3
   10c7a:	4004      	ands	r4, r0
   10c7c:	2c06      	cmp	r4, #6
   10c7e:	d107      	bne.n	10c90 <LorawanMcastProcessPkt+0xc8>
   10c80:	32d4      	adds	r2, #212	; 0xd4
   10c82:	7812      	ldrb	r2, [r2, #0]
   10c84:	2a04      	cmp	r2, #4
   10c86:	d103      	bne.n	10c90 <LorawanMcastProcessPkt+0xc8>
   10c88:	4383      	bics	r3, r0
   10c8a:	3206      	adds	r2, #6
   10c8c:	4313      	orrs	r3, r2
   10c8e:	700b      	strb	r3, [r1, #0]
   10c90:	2000      	movs	r0, #0
   10c92:	4b08      	ldr	r3, [pc, #32]	; (10cb4 <LorawanMcastProcessPkt+0xec>)
   10c94:	4798      	blx	r3
   10c96:	0038      	movs	r0, r7
   10c98:	b009      	add	sp, #36	; 0x24
   10c9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10c9c:	200023e4 	.word	0x200023e4
   10ca0:	0000af89 	.word	0x0000af89
   10ca4:	200026c0 	.word	0x200026c0
   10ca8:	0000df39 	.word	0x0000df39
   10cac:	200026b8 	.word	0x200026b8
   10cb0:	0000e33d 	.word	0x0000e33d
   10cb4:	0000ef49 	.word	0x0000ef49

00010cb8 <LorawanAddMcastAddr>:
   10cb8:	4b11      	ldr	r3, [pc, #68]	; (10d00 <LorawanAddMcastAddr+0x48>)
   10cba:	b570      	push	{r4, r5, r6, lr}
   10cbc:	001a      	movs	r2, r3
   10cbe:	325c      	adds	r2, #92	; 0x5c
   10cc0:	7812      	ldrb	r2, [r2, #0]
   10cc2:	07d2      	lsls	r2, r2, #31
   10cc4:	d509      	bpl.n	10cda <LorawanAddMcastAddr+0x22>
   10cc6:	681a      	ldr	r2, [r3, #0]
   10cc8:	0a15      	lsrs	r5, r2, #8
   10cca:	791a      	ldrb	r2, [r3, #4]
   10ccc:	0612      	lsls	r2, r2, #24
   10cce:	432a      	orrs	r2, r5
   10cd0:	4282      	cmp	r2, r0
   10cd2:	d102      	bne.n	10cda <LorawanAddMcastAddr+0x22>
   10cd4:	220a      	movs	r2, #10
   10cd6:	2904      	cmp	r1, #4
   10cd8:	d810      	bhi.n	10cfc <LorawanAddMcastAddr+0x44>
   10cda:	242c      	movs	r4, #44	; 0x2c
   10cdc:	434c      	muls	r4, r1
   10cde:	191c      	adds	r4, r3, r4
   10ce0:	0023      	movs	r3, r4
   10ce2:	33fc      	adds	r3, #252	; 0xfc
   10ce4:	6098      	str	r0, [r3, #8]
   10ce6:	2106      	movs	r1, #6
   10ce8:	2000      	movs	r0, #0
   10cea:	4b06      	ldr	r3, [pc, #24]	; (10d04 <LorawanAddMcastAddr+0x4c>)
   10cec:	4798      	blx	r3
   10cee:	2201      	movs	r2, #1
   10cf0:	3429      	adds	r4, #41	; 0x29
   10cf2:	34ff      	adds	r4, #255	; 0xff
   10cf4:	7921      	ldrb	r1, [r4, #4]
   10cf6:	430a      	orrs	r2, r1
   10cf8:	7122      	strb	r2, [r4, #4]
   10cfa:	2208      	movs	r2, #8
   10cfc:	0010      	movs	r0, r2
   10cfe:	bd70      	pop	{r4, r5, r6, pc}
   10d00:	200023e4 	.word	0x200023e4
   10d04:	0000af89 	.word	0x0000af89

00010d08 <LorawanAddMcastAppskey>:
   10d08:	b570      	push	{r4, r5, r6, lr}
   10d0a:	4c11      	ldr	r4, [pc, #68]	; (10d50 <LorawanAddMcastAppskey+0x48>)
   10d0c:	0006      	movs	r6, r0
   10d0e:	0023      	movs	r3, r4
   10d10:	335c      	adds	r3, #92	; 0x5c
   10d12:	781b      	ldrb	r3, [r3, #0]
   10d14:	07db      	lsls	r3, r3, #31
   10d16:	d504      	bpl.n	10d22 <LorawanAddMcastAppskey+0x1a>
   10d18:	2800      	cmp	r0, #0
   10d1a:	d102      	bne.n	10d22 <LorawanAddMcastAppskey+0x1a>
   10d1c:	200a      	movs	r0, #10
   10d1e:	2904      	cmp	r1, #4
   10d20:	d815      	bhi.n	10d4e <LorawanAddMcastAppskey+0x46>
   10d22:	252c      	movs	r5, #44	; 0x2c
   10d24:	434d      	muls	r5, r1
   10d26:	0028      	movs	r0, r5
   10d28:	3019      	adds	r0, #25
   10d2a:	30ff      	adds	r0, #255	; 0xff
   10d2c:	2210      	movs	r2, #16
   10d2e:	1820      	adds	r0, r4, r0
   10d30:	0031      	movs	r1, r6
   10d32:	4b08      	ldr	r3, [pc, #32]	; (10d54 <LorawanAddMcastAppskey+0x4c>)
   10d34:	4798      	blx	r3
   10d36:	4b08      	ldr	r3, [pc, #32]	; (10d58 <LorawanAddMcastAppskey+0x50>)
   10d38:	2107      	movs	r1, #7
   10d3a:	2000      	movs	r0, #0
   10d3c:	4798      	blx	r3
   10d3e:	2304      	movs	r3, #4
   10d40:	2008      	movs	r0, #8
   10d42:	1964      	adds	r4, r4, r5
   10d44:	3429      	adds	r4, #41	; 0x29
   10d46:	34ff      	adds	r4, #255	; 0xff
   10d48:	7922      	ldrb	r2, [r4, #4]
   10d4a:	4313      	orrs	r3, r2
   10d4c:	7123      	strb	r3, [r4, #4]
   10d4e:	bd70      	pop	{r4, r5, r6, pc}
   10d50:	200023e4 	.word	0x200023e4
   10d54:	00015f45 	.word	0x00015f45
   10d58:	0000af89 	.word	0x0000af89

00010d5c <LorawanAddMcastNwkskey>:
   10d5c:	b570      	push	{r4, r5, r6, lr}
   10d5e:	4c11      	ldr	r4, [pc, #68]	; (10da4 <LorawanAddMcastNwkskey+0x48>)
   10d60:	0006      	movs	r6, r0
   10d62:	0023      	movs	r3, r4
   10d64:	335c      	adds	r3, #92	; 0x5c
   10d66:	781b      	ldrb	r3, [r3, #0]
   10d68:	07db      	lsls	r3, r3, #31
   10d6a:	d504      	bpl.n	10d76 <LorawanAddMcastNwkskey+0x1a>
   10d6c:	2800      	cmp	r0, #0
   10d6e:	d102      	bne.n	10d76 <LorawanAddMcastNwkskey+0x1a>
   10d70:	200a      	movs	r0, #10
   10d72:	2904      	cmp	r1, #4
   10d74:	d815      	bhi.n	10da2 <LorawanAddMcastNwkskey+0x46>
   10d76:	252c      	movs	r5, #44	; 0x2c
   10d78:	434d      	muls	r5, r1
   10d7a:	0028      	movs	r0, r5
   10d7c:	3009      	adds	r0, #9
   10d7e:	30ff      	adds	r0, #255	; 0xff
   10d80:	2210      	movs	r2, #16
   10d82:	1820      	adds	r0, r4, r0
   10d84:	0031      	movs	r1, r6
   10d86:	4b08      	ldr	r3, [pc, #32]	; (10da8 <LorawanAddMcastNwkskey+0x4c>)
   10d88:	4798      	blx	r3
   10d8a:	4b08      	ldr	r3, [pc, #32]	; (10dac <LorawanAddMcastNwkskey+0x50>)
   10d8c:	2108      	movs	r1, #8
   10d8e:	2000      	movs	r0, #0
   10d90:	4798      	blx	r3
   10d92:	2302      	movs	r3, #2
   10d94:	2008      	movs	r0, #8
   10d96:	1964      	adds	r4, r4, r5
   10d98:	3429      	adds	r4, #41	; 0x29
   10d9a:	34ff      	adds	r4, #255	; 0xff
   10d9c:	7922      	ldrb	r2, [r4, #4]
   10d9e:	4313      	orrs	r3, r2
   10da0:	7123      	strb	r3, [r4, #4]
   10da2:	bd70      	pop	{r4, r5, r6, pc}
   10da4:	200023e4 	.word	0x200023e4
   10da8:	00015f45 	.word	0x00015f45
   10dac:	0000af89 	.word	0x0000af89

00010db0 <Lorawan_Pds_fid1_CB>:
   10db0:	4b04      	ldr	r3, [pc, #16]	; (10dc4 <Lorawan_Pds_fid1_CB+0x14>)
   10db2:	0019      	movs	r1, r3
   10db4:	31fc      	adds	r1, #252	; 0xfc
   10db6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
   10db8:	3201      	adds	r2, #1
   10dba:	62ca      	str	r2, [r1, #44]	; 0x2c
   10dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   10dbe:	3201      	adds	r2, #1
   10dc0:	661a      	str	r2, [r3, #96]	; 0x60
   10dc2:	4770      	bx	lr
   10dc4:	200023e4 	.word	0x200023e4

00010dc8 <Lorawan_Pds_fid2_CB>:
   10dc8:	2171      	movs	r1, #113	; 0x71
   10dca:	4b06      	ldr	r3, [pc, #24]	; (10de4 <Lorawan_Pds_fid2_CB+0x1c>)
   10dcc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
   10dce:	335c      	adds	r3, #92	; 0x5c
   10dd0:	3201      	adds	r2, #1
   10dd2:	609a      	str	r2, [r3, #8]
   10dd4:	781a      	ldrb	r2, [r3, #0]
   10dd6:	400a      	ands	r2, r1
   10dd8:	701a      	strb	r2, [r3, #0]
   10dda:	785a      	ldrb	r2, [r3, #1]
   10ddc:	3970      	subs	r1, #112	; 0x70
   10dde:	438a      	bics	r2, r1
   10de0:	705a      	strb	r2, [r3, #1]
   10de2:	4770      	bx	lr
   10de4:	200023e4 	.word	0x200023e4

00010de8 <LORAWAN_TxHandler>:
   10de8:	b5f0      	push	{r4, r5, r6, r7, lr}
   10dea:	b087      	sub	sp, #28
   10dec:	466b      	mov	r3, sp
   10dee:	2501      	movs	r5, #1
   10df0:	4c30      	ldr	r4, [pc, #192]	; (10eb4 <LORAWAN_TxHandler+0xcc>)
   10df2:	701d      	strb	r5, [r3, #0]
   10df4:	0023      	movs	r3, r4
   10df6:	466a      	mov	r2, sp
   10df8:	33c1      	adds	r3, #193	; 0xc1
   10dfa:	781b      	ldrb	r3, [r3, #0]
   10dfc:	4669      	mov	r1, sp
   10dfe:	7053      	strb	r3, [r2, #1]
   10e00:	0023      	movs	r3, r4
   10e02:	33bf      	adds	r3, #191	; 0xbf
   10e04:	781b      	ldrb	r3, [r3, #0]
   10e06:	202f      	movs	r0, #47	; 0x2f
   10e08:	7093      	strb	r3, [r2, #2]
   10e0a:	aa03      	add	r2, sp, #12
   10e0c:	4b2a      	ldr	r3, [pc, #168]	; (10eb8 <LORAWAN_TxHandler+0xd0>)
   10e0e:	4798      	blx	r3
   10e10:	2808      	cmp	r0, #8
   10e12:	d004      	beq.n	10e1e <LORAWAN_TxHandler+0x36>
   10e14:	4b29      	ldr	r3, [pc, #164]	; (10ebc <LORAWAN_TxHandler+0xd4>)
   10e16:	4798      	blx	r3
   10e18:	2000      	movs	r0, #0
   10e1a:	b007      	add	sp, #28
   10e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10e1e:	0023      	movs	r3, r4
   10e20:	33d4      	adds	r3, #212	; 0xd4
   10e22:	781b      	ldrb	r3, [r3, #0]
   10e24:	ae01      	add	r6, sp, #4
   10e26:	2b04      	cmp	r3, #4
   10e28:	d103      	bne.n	10e32 <LORAWAN_TxHandler+0x4a>
   10e2a:	0030      	movs	r0, r6
   10e2c:	4b24      	ldr	r3, [pc, #144]	; (10ec0 <LORAWAN_TxHandler+0xd8>)
   10e2e:	7035      	strb	r5, [r6, #0]
   10e30:	4798      	blx	r3
   10e32:	4b24      	ldr	r3, [pc, #144]	; (10ec4 <LORAWAN_TxHandler+0xdc>)
   10e34:	9803      	ldr	r0, [sp, #12]
   10e36:	9904      	ldr	r1, [sp, #16]
   10e38:	9a05      	ldr	r2, [sp, #20]
   10e3a:	4798      	blx	r3
   10e3c:	0023      	movs	r3, r4
   10e3e:	33dc      	adds	r3, #220	; 0xdc
   10e40:	681d      	ldr	r5, [r3, #0]
   10e42:	23df      	movs	r3, #223	; 0xdf
   10e44:	4f20      	ldr	r7, [pc, #128]	; (10ec8 <LORAWAN_TxHandler+0xe0>)
   10e46:	005b      	lsls	r3, r3, #1
   10e48:	2d00      	cmp	r5, #0
   10e4a:	d023      	beq.n	10e94 <LORAWAN_TxHandler+0xac>
   10e4c:	2201      	movs	r2, #1
   10e4e:	54e2      	strb	r2, [r4, r3]
   10e50:	7828      	ldrb	r0, [r5, #0]
   10e52:	7a2b      	ldrb	r3, [r5, #8]
   10e54:	1e42      	subs	r2, r0, #1
   10e56:	4190      	sbcs	r0, r2
   10e58:	7869      	ldrb	r1, [r5, #1]
   10e5a:	686a      	ldr	r2, [r5, #4]
   10e5c:	b2c0      	uxtb	r0, r0
   10e5e:	47b8      	blx	r7
   10e60:	0023      	movs	r3, r4
   10e62:	33a6      	adds	r3, #166	; 0xa6
   10e64:	881b      	ldrh	r3, [r3, #0]
   10e66:	0030      	movs	r0, r6
   10e68:	7033      	strb	r3, [r6, #0]
   10e6a:	4b18      	ldr	r3, [pc, #96]	; (10ecc <LORAWAN_TxHandler+0xe4>)
   10e6c:	6073      	str	r3, [r6, #4]
   10e6e:	4b18      	ldr	r3, [pc, #96]	; (10ed0 <LORAWAN_TxHandler+0xe8>)
   10e70:	4798      	blx	r3
   10e72:	2800      	cmp	r0, #0
   10e74:	d114      	bne.n	10ea0 <LORAWAN_TxHandler+0xb8>
   10e76:	0021      	movs	r1, r4
   10e78:	220e      	movs	r2, #14
   10e7a:	315c      	adds	r1, #92	; 0x5c
   10e7c:	780b      	ldrb	r3, [r1, #0]
   10e7e:	4393      	bics	r3, r2
   10e80:	001a      	movs	r2, r3
   10e82:	2302      	movs	r3, #2
   10e84:	4313      	orrs	r3, r2
   10e86:	700b      	strb	r3, [r1, #0]
   10e88:	2208      	movs	r2, #8
   10e8a:	346c      	adds	r4, #108	; 0x6c
   10e8c:	7823      	ldrb	r3, [r4, #0]
   10e8e:	4393      	bics	r3, r2
   10e90:	7023      	strb	r3, [r4, #0]
   10e92:	e7c1      	b.n	10e18 <LORAWAN_TxHandler+0x30>
   10e94:	54e5      	strb	r5, [r4, r3]
   10e96:	002a      	movs	r2, r5
   10e98:	002b      	movs	r3, r5
   10e9a:	0029      	movs	r1, r5
   10e9c:	0028      	movs	r0, r5
   10e9e:	e7de      	b.n	10e5e <LORAWAN_TxHandler+0x76>
   10ea0:	0022      	movs	r2, r4
   10ea2:	2120      	movs	r1, #32
   10ea4:	326c      	adds	r2, #108	; 0x6c
   10ea6:	7813      	ldrb	r3, [r2, #0]
   10ea8:	438b      	bics	r3, r1
   10eaa:	7013      	strb	r3, [r2, #0]
   10eac:	4b03      	ldr	r3, [pc, #12]	; (10ebc <LORAWAN_TxHandler+0xd4>)
   10eae:	4798      	blx	r3
   10eb0:	e7ea      	b.n	10e88 <LORAWAN_TxHandler+0xa0>
   10eb2:	46c0      	nop			; (mov r8, r8)
   10eb4:	200023e4 	.word	0x200023e4
   10eb8:	0000aa71 	.word	0x0000aa71
   10ebc:	0000e2d9 	.word	0x0000e2d9
   10ec0:	00012371 	.word	0x00012371
   10ec4:	0000da91 	.word	0x0000da91
   10ec8:	0000dff1 	.word	0x0000dff1
   10ecc:	200025b5 	.word	0x200025b5
   10ed0:	00011aad 	.word	0x00011aad

00010ed4 <LORAWAN_JoinReqHandler>:
   10ed4:	b530      	push	{r4, r5, lr}
   10ed6:	b087      	sub	sp, #28
   10ed8:	466a      	mov	r2, sp
   10eda:	2300      	movs	r3, #0
   10edc:	4c2a      	ldr	r4, [pc, #168]	; (10f88 <LORAWAN_JoinReqHandler+0xb4>)
   10ede:	7013      	strb	r3, [r2, #0]
   10ee0:	0023      	movs	r3, r4
   10ee2:	33c1      	adds	r3, #193	; 0xc1
   10ee4:	781b      	ldrb	r3, [r3, #0]
   10ee6:	7053      	strb	r3, [r2, #1]
   10ee8:	0023      	movs	r3, r4
   10eea:	33bf      	adds	r3, #191	; 0xbf
   10eec:	781b      	ldrb	r3, [r3, #0]
   10eee:	7093      	strb	r3, [r2, #2]
   10ef0:	0023      	movs	r3, r4
   10ef2:	33f0      	adds	r3, #240	; 0xf0
   10ef4:	781b      	ldrb	r3, [r3, #0]
   10ef6:	069b      	lsls	r3, r3, #26
   10ef8:	d511      	bpl.n	10f1e <LORAWAN_JoinReqHandler+0x4a>
   10efa:	0023      	movs	r3, r4
   10efc:	334f      	adds	r3, #79	; 0x4f
   10efe:	781a      	ldrb	r2, [r3, #0]
   10f00:	6d23      	ldr	r3, [r4, #80]	; 0x50
   10f02:	021b      	lsls	r3, r3, #8
   10f04:	4313      	orrs	r3, r2
   10f06:	0022      	movs	r2, r4
   10f08:	3253      	adds	r2, #83	; 0x53
   10f0a:	7811      	ldrb	r1, [r2, #0]
   10f0c:	6d62      	ldr	r2, [r4, #84]	; 0x54
   10f0e:	0212      	lsls	r2, r2, #8
   10f10:	430a      	orrs	r2, r1
   10f12:	4313      	orrs	r3, r2
   10f14:	d103      	bne.n	10f1e <LORAWAN_JoinReqHandler+0x4a>
   10f16:	0023      	movs	r3, r4
   10f18:	2201      	movs	r2, #1
   10f1a:	335b      	adds	r3, #91	; 0x5b
   10f1c:	701a      	strb	r2, [r3, #0]
   10f1e:	aa03      	add	r2, sp, #12
   10f20:	4669      	mov	r1, sp
   10f22:	202f      	movs	r0, #47	; 0x2f
   10f24:	4b19      	ldr	r3, [pc, #100]	; (10f8c <LORAWAN_JoinReqHandler+0xb8>)
   10f26:	4798      	blx	r3
   10f28:	2808      	cmp	r0, #8
   10f2a:	d004      	beq.n	10f36 <LORAWAN_JoinReqHandler+0x62>
   10f2c:	4b18      	ldr	r3, [pc, #96]	; (10f90 <LORAWAN_JoinReqHandler+0xbc>)
   10f2e:	4798      	blx	r3
   10f30:	2000      	movs	r0, #0
   10f32:	b007      	add	sp, #28
   10f34:	bd30      	pop	{r4, r5, pc}
   10f36:	4b17      	ldr	r3, [pc, #92]	; (10f94 <LORAWAN_JoinReqHandler+0xc0>)
   10f38:	9803      	ldr	r0, [sp, #12]
   10f3a:	9904      	ldr	r1, [sp, #16]
   10f3c:	9a05      	ldr	r2, [sp, #20]
   10f3e:	4798      	blx	r3
   10f40:	0023      	movs	r3, r4
   10f42:	33d4      	adds	r3, #212	; 0xd4
   10f44:	781b      	ldrb	r3, [r3, #0]
   10f46:	ad01      	add	r5, sp, #4
   10f48:	2b04      	cmp	r3, #4
   10f4a:	d104      	bne.n	10f56 <LORAWAN_JoinReqHandler+0x82>
   10f4c:	3b03      	subs	r3, #3
   10f4e:	702b      	strb	r3, [r5, #0]
   10f50:	0028      	movs	r0, r5
   10f52:	4b11      	ldr	r3, [pc, #68]	; (10f98 <LORAWAN_JoinReqHandler+0xc4>)
   10f54:	4798      	blx	r3
   10f56:	23df      	movs	r3, #223	; 0xdf
   10f58:	2200      	movs	r2, #0
   10f5a:	005b      	lsls	r3, r3, #1
   10f5c:	54e2      	strb	r2, [r4, r3]
   10f5e:	4b0f      	ldr	r3, [pc, #60]	; (10f9c <LORAWAN_JoinReqHandler+0xc8>)
   10f60:	4798      	blx	r3
   10f62:	4b0f      	ldr	r3, [pc, #60]	; (10fa0 <LORAWAN_JoinReqHandler+0xcc>)
   10f64:	7028      	strb	r0, [r5, #0]
   10f66:	606b      	str	r3, [r5, #4]
   10f68:	0028      	movs	r0, r5
   10f6a:	4b0e      	ldr	r3, [pc, #56]	; (10fa4 <LORAWAN_JoinReqHandler+0xd0>)
   10f6c:	4798      	blx	r3
   10f6e:	2800      	cmp	r0, #0
   10f70:	d001      	beq.n	10f76 <LORAWAN_JoinReqHandler+0xa2>
   10f72:	201b      	movs	r0, #27
   10f74:	e7da      	b.n	10f2c <LORAWAN_JoinReqHandler+0x58>
   10f76:	220e      	movs	r2, #14
   10f78:	345c      	adds	r4, #92	; 0x5c
   10f7a:	7823      	ldrb	r3, [r4, #0]
   10f7c:	4393      	bics	r3, r2
   10f7e:	001a      	movs	r2, r3
   10f80:	2302      	movs	r3, #2
   10f82:	4313      	orrs	r3, r2
   10f84:	7023      	strb	r3, [r4, #0]
   10f86:	e7d3      	b.n	10f30 <LORAWAN_JoinReqHandler+0x5c>
   10f88:	200023e4 	.word	0x200023e4
   10f8c:	0000aa71 	.word	0x0000aa71
   10f90:	0000d559 	.word	0x0000d559
   10f94:	0000da91 	.word	0x0000da91
   10f98:	00012371 	.word	0x00012371
   10f9c:	0000d909 	.word	0x0000d909
   10fa0:	200025a5 	.word	0x200025a5
   10fa4:	00011aad 	.word	0x00011aad

00010fa8 <LORAWAN_RxHandler>:
   10fa8:	b513      	push	{r0, r1, r4, lr}
   10faa:	4b0c      	ldr	r3, [pc, #48]	; (10fdc <LORAWAN_RxHandler+0x34>)
   10fac:	781b      	ldrb	r3, [r3, #0]
   10fae:	2b08      	cmp	r3, #8
   10fb0:	d011      	beq.n	10fd6 <LORAWAN_RxHandler+0x2e>
   10fb2:	2b10      	cmp	r3, #16
   10fb4:	d001      	beq.n	10fba <LORAWAN_RxHandler+0x12>
   10fb6:	2b01      	cmp	r3, #1
   10fb8:	d10b      	bne.n	10fd2 <LORAWAN_RxHandler+0x2a>
   10fba:	466b      	mov	r3, sp
   10fbc:	1c9c      	adds	r4, r3, #2
   10fbe:	0021      	movs	r1, r4
   10fc0:	a801      	add	r0, sp, #4
   10fc2:	4b07      	ldr	r3, [pc, #28]	; (10fe0 <LORAWAN_RxHandler+0x38>)
   10fc4:	4798      	blx	r3
   10fc6:	9801      	ldr	r0, [sp, #4]
   10fc8:	2800      	cmp	r0, #0
   10fca:	d002      	beq.n	10fd2 <LORAWAN_RxHandler+0x2a>
   10fcc:	7821      	ldrb	r1, [r4, #0]
   10fce:	4b05      	ldr	r3, [pc, #20]	; (10fe4 <LORAWAN_RxHandler+0x3c>)
   10fd0:	4798      	blx	r3
   10fd2:	2000      	movs	r0, #0
   10fd4:	bd16      	pop	{r1, r2, r4, pc}
   10fd6:	4b04      	ldr	r3, [pc, #16]	; (10fe8 <LORAWAN_RxHandler+0x40>)
   10fd8:	4798      	blx	r3
   10fda:	e7fa      	b.n	10fd2 <LORAWAN_RxHandler+0x2a>
   10fdc:	200025a4 	.word	0x200025a4
   10fe0:	00011c69 	.word	0x00011c69
   10fe4:	0000f535 	.word	0x0000f535
   10fe8:	0000eea5 	.word	0x0000eea5

00010fec <LORAWAN_PostTask>:
   10fec:	b510      	push	{r4, lr}
   10fee:	4b08      	ldr	r3, [pc, #32]	; (11010 <LORAWAN_PostTask+0x24>)
   10ff0:	0004      	movs	r4, r0
   10ff2:	4798      	blx	r3
   10ff4:	2201      	movs	r2, #1
   10ff6:	40a2      	lsls	r2, r4
   10ff8:	4906      	ldr	r1, [pc, #24]	; (11014 <LORAWAN_PostTask+0x28>)
   10ffa:	780b      	ldrb	r3, [r1, #0]
   10ffc:	4313      	orrs	r3, r2
   10ffe:	b2db      	uxtb	r3, r3
   11000:	700b      	strb	r3, [r1, #0]
   11002:	4b05      	ldr	r3, [pc, #20]	; (11018 <LORAWAN_PostTask+0x2c>)
   11004:	4798      	blx	r3
   11006:	2004      	movs	r0, #4
   11008:	4b04      	ldr	r3, [pc, #16]	; (1101c <LORAWAN_PostTask+0x30>)
   1100a:	4798      	blx	r3
   1100c:	bd10      	pop	{r4, pc}
   1100e:	46c0      	nop			; (mov r8, r8)
   11010:	00005615 	.word	0x00005615
   11014:	20000fea 	.word	0x20000fea
   11018:	00005621 	.word	0x00005621
   1101c:	0000c555 	.word	0x0000c555

00011020 <LORAWAN_TaskHandler>:
   11020:	b570      	push	{r4, r5, r6, lr}
   11022:	2601      	movs	r6, #1
   11024:	4d0e      	ldr	r5, [pc, #56]	; (11060 <LORAWAN_TaskHandler+0x40>)
   11026:	e015      	b.n	11054 <LORAWAN_TaskHandler+0x34>
   11028:	2400      	movs	r4, #0
   1102a:	782b      	ldrb	r3, [r5, #0]
   1102c:	4123      	asrs	r3, r4
   1102e:	4233      	tst	r3, r6
   11030:	d00d      	beq.n	1104e <LORAWAN_TaskHandler+0x2e>
   11032:	4b0c      	ldr	r3, [pc, #48]	; (11064 <LORAWAN_TaskHandler+0x44>)
   11034:	4798      	blx	r3
   11036:	0032      	movs	r2, r6
   11038:	40a2      	lsls	r2, r4
   1103a:	782b      	ldrb	r3, [r5, #0]
   1103c:	00a4      	lsls	r4, r4, #2
   1103e:	4393      	bics	r3, r2
   11040:	702b      	strb	r3, [r5, #0]
   11042:	4b09      	ldr	r3, [pc, #36]	; (11068 <LORAWAN_TaskHandler+0x48>)
   11044:	4798      	blx	r3
   11046:	4b09      	ldr	r3, [pc, #36]	; (1106c <LORAWAN_TaskHandler+0x4c>)
   11048:	58e3      	ldr	r3, [r4, r3]
   1104a:	4798      	blx	r3
   1104c:	e7ea      	b.n	11024 <LORAWAN_TaskHandler+0x4>
   1104e:	3401      	adds	r4, #1
   11050:	2c03      	cmp	r4, #3
   11052:	d1ea      	bne.n	1102a <LORAWAN_TaskHandler+0xa>
   11054:	7828      	ldrb	r0, [r5, #0]
   11056:	b2c0      	uxtb	r0, r0
   11058:	2800      	cmp	r0, #0
   1105a:	d1e5      	bne.n	11028 <LORAWAN_TaskHandler+0x8>
   1105c:	bd70      	pop	{r4, r5, r6, pc}
   1105e:	46c0      	nop			; (mov r8, r8)
   11060:	20000fea 	.word	0x20000fea
   11064:	00005615 	.word	0x00005615
   11068:	00005621 	.word	0x00005621
   1106c:	0001dd78 	.word	0x0001dd78

00011070 <RADIO_GetAttr>:
   11070:	b510      	push	{r4, lr}
   11072:	000b      	movs	r3, r1
   11074:	281f      	cmp	r0, #31
   11076:	d900      	bls.n	1107a <RADIO_GetAttr+0xa>
   11078:	e067      	b.n	1114a <RADIO_GetAttr+0xda>
   1107a:	f001 fe35 	bl	12ce8 <__gnu_thumb1_case_uqi>
   1107e:	1410      	.short	0x1410
   11080:	66201c19 	.word	0x66201c19
   11084:	312e2a27 	.word	0x312e2a27
   11088:	3d3a3734 	.word	0x3d3a3734
   1108c:	46434054 	.word	0x46434054
   11090:	66245149 	.word	0x66245149
   11094:	66666659 	.word	0x66666659
   11098:	5c666617 	.word	0x5c666617
   1109c:	6360      	.short	0x6360
   1109e:	4a2c      	ldr	r2, [pc, #176]	; (11150 <RADIO_GetAttr+0xe0>)
   110a0:	7e12      	ldrb	r2, [r2, #24]
   110a2:	701a      	strb	r2, [r3, #0]
   110a4:	e002      	b.n	110ac <RADIO_GetAttr+0x3c>
   110a6:	4a2a      	ldr	r2, [pc, #168]	; (11150 <RADIO_GetAttr+0xe0>)
   110a8:	6812      	ldr	r2, [r2, #0]
   110aa:	601a      	str	r2, [r3, #0]
   110ac:	2000      	movs	r0, #0
   110ae:	bd10      	pop	{r4, pc}
   110b0:	4a27      	ldr	r2, [pc, #156]	; (11150 <RADIO_GetAttr+0xe0>)
   110b2:	6852      	ldr	r2, [r2, #4]
   110b4:	e7f9      	b.n	110aa <RADIO_GetAttr+0x3a>
   110b6:	4a26      	ldr	r2, [pc, #152]	; (11150 <RADIO_GetAttr+0xe0>)
   110b8:	8a92      	ldrh	r2, [r2, #20]
   110ba:	801a      	strh	r2, [r3, #0]
   110bc:	e7f6      	b.n	110ac <RADIO_GetAttr+0x3c>
   110be:	4a24      	ldr	r2, [pc, #144]	; (11150 <RADIO_GetAttr+0xe0>)
   110c0:	3203      	adds	r2, #3
   110c2:	7fd2      	ldrb	r2, [r2, #31]
   110c4:	e7ed      	b.n	110a2 <RADIO_GetAttr+0x32>
   110c6:	4a22      	ldr	r2, [pc, #136]	; (11150 <RADIO_GetAttr+0xe0>)
   110c8:	3204      	adds	r2, #4
   110ca:	e7fa      	b.n	110c2 <RADIO_GetAttr+0x52>
   110cc:	4a20      	ldr	r2, [pc, #128]	; (11150 <RADIO_GetAttr+0xe0>)
   110ce:	3206      	adds	r2, #6
   110d0:	e7f7      	b.n	110c2 <RADIO_GetAttr+0x52>
   110d2:	4a1f      	ldr	r2, [pc, #124]	; (11150 <RADIO_GetAttr+0xe0>)
   110d4:	3236      	adds	r2, #54	; 0x36
   110d6:	7812      	ldrb	r2, [r2, #0]
   110d8:	e7e3      	b.n	110a2 <RADIO_GetAttr+0x32>
   110da:	4a1d      	ldr	r2, [pc, #116]	; (11150 <RADIO_GetAttr+0xe0>)
   110dc:	3205      	adds	r2, #5
   110de:	e7f0      	b.n	110c2 <RADIO_GetAttr+0x52>
   110e0:	4a1b      	ldr	r2, [pc, #108]	; (11150 <RADIO_GetAttr+0xe0>)
   110e2:	3234      	adds	r2, #52	; 0x34
   110e4:	e7f7      	b.n	110d6 <RADIO_GetAttr+0x66>
   110e6:	4a1a      	ldr	r2, [pc, #104]	; (11150 <RADIO_GetAttr+0xe0>)
   110e8:	8ad2      	ldrh	r2, [r2, #22]
   110ea:	e7e6      	b.n	110ba <RADIO_GetAttr+0x4a>
   110ec:	4a18      	ldr	r2, [pc, #96]	; (11150 <RADIO_GetAttr+0xe0>)
   110ee:	3233      	adds	r2, #51	; 0x33
   110f0:	e7f1      	b.n	110d6 <RADIO_GetAttr+0x66>
   110f2:	4a17      	ldr	r2, [pc, #92]	; (11150 <RADIO_GetAttr+0xe0>)
   110f4:	68d2      	ldr	r2, [r2, #12]
   110f6:	e7d8      	b.n	110aa <RADIO_GetAttr+0x3a>
   110f8:	4a15      	ldr	r2, [pc, #84]	; (11150 <RADIO_GetAttr+0xe0>)
   110fa:	6892      	ldr	r2, [r2, #8]
   110fc:	e7d5      	b.n	110aa <RADIO_GetAttr+0x3a>
   110fe:	4a14      	ldr	r2, [pc, #80]	; (11150 <RADIO_GetAttr+0xe0>)
   11100:	3237      	adds	r2, #55	; 0x37
   11102:	e7e8      	b.n	110d6 <RADIO_GetAttr+0x66>
   11104:	4a12      	ldr	r2, [pc, #72]	; (11150 <RADIO_GetAttr+0xe0>)
   11106:	3238      	adds	r2, #56	; 0x38
   11108:	e7e5      	b.n	110d6 <RADIO_GetAttr+0x66>
   1110a:	4a11      	ldr	r2, [pc, #68]	; (11150 <RADIO_GetAttr+0xe0>)
   1110c:	3239      	adds	r2, #57	; 0x39
   1110e:	e7e2      	b.n	110d6 <RADIO_GetAttr+0x66>
   11110:	4a0f      	ldr	r2, [pc, #60]	; (11150 <RADIO_GetAttr+0xe0>)
   11112:	4910      	ldr	r1, [pc, #64]	; (11154 <RADIO_GetAttr+0xe4>)
   11114:	3202      	adds	r2, #2
   11116:	7fd2      	ldrb	r2, [r2, #31]
   11118:	0018      	movs	r0, r3
   1111a:	4b0f      	ldr	r3, [pc, #60]	; (11158 <RADIO_GetAttr+0xe8>)
   1111c:	4798      	blx	r3
   1111e:	e7c5      	b.n	110ac <RADIO_GetAttr+0x3c>
   11120:	4a0b      	ldr	r2, [pc, #44]	; (11150 <RADIO_GetAttr+0xe0>)
   11122:	3202      	adds	r2, #2
   11124:	e7cd      	b.n	110c2 <RADIO_GetAttr+0x52>
   11126:	4a0a      	ldr	r2, [pc, #40]	; (11150 <RADIO_GetAttr+0xe0>)
   11128:	3232      	adds	r2, #50	; 0x32
   1112a:	7812      	ldrb	r2, [r2, #0]
   1112c:	b252      	sxtb	r2, r2
   1112e:	e7b8      	b.n	110a2 <RADIO_GetAttr+0x32>
   11130:	4a07      	ldr	r2, [pc, #28]	; (11150 <RADIO_GetAttr+0xe0>)
   11132:	3235      	adds	r2, #53	; 0x35
   11134:	e7cf      	b.n	110d6 <RADIO_GetAttr+0x66>
   11136:	4906      	ldr	r1, [pc, #24]	; (11150 <RADIO_GetAttr+0xe0>)
   11138:	2206      	movs	r2, #6
   1113a:	313c      	adds	r1, #60	; 0x3c
   1113c:	e7ec      	b.n	11118 <RADIO_GetAttr+0xa8>
   1113e:	4a04      	ldr	r2, [pc, #16]	; (11150 <RADIO_GetAttr+0xe0>)
   11140:	3254      	adds	r2, #84	; 0x54
   11142:	e7c8      	b.n	110d6 <RADIO_GetAttr+0x66>
   11144:	4a02      	ldr	r2, [pc, #8]	; (11150 <RADIO_GetAttr+0xe0>)
   11146:	3256      	adds	r2, #86	; 0x56
   11148:	e7ef      	b.n	1112a <RADIO_GetAttr+0xba>
   1114a:	2005      	movs	r0, #5
   1114c:	e7af      	b.n	110ae <RADIO_GetAttr+0x3e>
   1114e:	46c0      	nop			; (mov r8, r8)
   11150:	20002214 	.word	0x20002214
   11154:	2000222d 	.word	0x2000222d
   11158:	00015f45 	.word	0x00015f45

0001115c <RADIO_SetAttr>:
   1115c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1115e:	4b77      	ldr	r3, [pc, #476]	; (1133c <RADIO_SetAttr+0x1e0>)
   11160:	b085      	sub	sp, #20
   11162:	0006      	movs	r6, r0
   11164:	000d      	movs	r5, r1
   11166:	4798      	blx	r3
   11168:	2404      	movs	r4, #4
   1116a:	2801      	cmp	r0, #1
   1116c:	d11a      	bne.n	111a4 <RADIO_SetAttr+0x48>
   1116e:	2e1d      	cmp	r6, #29
   11170:	d900      	bls.n	11174 <RADIO_SetAttr+0x18>
   11172:	e0e0      	b.n	11336 <RADIO_SetAttr+0x1da>
   11174:	0030      	movs	r0, r6
   11176:	f001 fdb7 	bl	12ce8 <__gnu_thumb1_case_uqi>
   1117a:	514d      	.short	0x514d
   1117c:	de6d6965 	.word	0xde6d6965
   11180:	8f8b8179 	.word	0x8f8b8179
   11184:	a7a49b97 	.word	0xa7a49b97
   11188:	bcb3abde 	.word	0xbcb3abde
   1118c:	de72cdc5 	.word	0xde72cdc5
   11190:	dededed5 	.word	0xdededed5
   11194:	18dede0f 	.word	0x18dede0f
   11198:	2403      	movs	r4, #3
   1119a:	2d00      	cmp	r5, #0
   1119c:	d002      	beq.n	111a4 <RADIO_SetAttr+0x48>
   1119e:	4b68      	ldr	r3, [pc, #416]	; (11340 <RADIO_SetAttr+0x1e4>)
   111a0:	611d      	str	r5, [r3, #16]
   111a2:	2400      	movs	r4, #0
   111a4:	0020      	movs	r0, r4
   111a6:	b005      	add	sp, #20
   111a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   111aa:	796e      	ldrb	r6, [r5, #5]
   111ac:	2e00      	cmp	r6, #0
   111ae:	d109      	bne.n	111c4 <RADIO_SetAttr+0x68>
   111b0:	4b63      	ldr	r3, [pc, #396]	; (11340 <RADIO_SetAttr+0x1e4>)
   111b2:	001a      	movs	r2, r3
   111b4:	649e      	str	r6, [r3, #72]	; 0x48
   111b6:	879e      	strh	r6, [r3, #60]	; 0x3c
   111b8:	87de      	strh	r6, [r3, #62]	; 0x3e
   111ba:	3240      	adds	r2, #64	; 0x40
   111bc:	3341      	adds	r3, #65	; 0x41
   111be:	7016      	strb	r6, [r2, #0]
   111c0:	701e      	strb	r6, [r3, #0]
   111c2:	e7ee      	b.n	111a2 <RADIO_SetAttr+0x46>
   111c4:	882b      	ldrh	r3, [r5, #0]
   111c6:	2403      	movs	r4, #3
   111c8:	9301      	str	r3, [sp, #4]
   111ca:	2b00      	cmp	r3, #0
   111cc:	d0ea      	beq.n	111a4 <RADIO_SetAttr+0x48>
   111ce:	792f      	ldrb	r7, [r5, #4]
   111d0:	2f00      	cmp	r7, #0
   111d2:	d0e7      	beq.n	111a4 <RADIO_SetAttr+0x48>
   111d4:	20fa      	movs	r0, #250	; 0xfa
   111d6:	0080      	lsls	r0, r0, #2
   111d8:	0039      	movs	r1, r7
   111da:	4358      	muls	r0, r3
   111dc:	4b59      	ldr	r3, [pc, #356]	; (11344 <RADIO_SetAttr+0x1e8>)
   111de:	4798      	blx	r3
   111e0:	4b59      	ldr	r3, [pc, #356]	; (11348 <RADIO_SetAttr+0x1ec>)
   111e2:	4798      	blx	r3
   111e4:	4959      	ldr	r1, [pc, #356]	; (1134c <RADIO_SetAttr+0x1f0>)
   111e6:	9002      	str	r0, [sp, #8]
   111e8:	4b59      	ldr	r3, [pc, #356]	; (11350 <RADIO_SetAttr+0x1f4>)
   111ea:	4798      	blx	r3
   111ec:	9003      	str	r0, [sp, #12]
   111ee:	2800      	cmp	r0, #0
   111f0:	d1d8      	bne.n	111a4 <RADIO_SetAttr+0x48>
   111f2:	2302      	movs	r3, #2
   111f4:	5eed      	ldrsh	r5, [r5, r3]
   111f6:	9802      	ldr	r0, [sp, #8]
   111f8:	4b56      	ldr	r3, [pc, #344]	; (11354 <RADIO_SetAttr+0x1f8>)
   111fa:	4798      	blx	r3
   111fc:	466b      	mov	r3, sp
   111fe:	4c50      	ldr	r4, [pc, #320]	; (11340 <RADIO_SetAttr+0x1e4>)
   11200:	889b      	ldrh	r3, [r3, #4]
   11202:	64a0      	str	r0, [r4, #72]	; 0x48
   11204:	87a3      	strh	r3, [r4, #60]	; 0x3c
   11206:	0023      	movs	r3, r4
   11208:	87e5      	strh	r5, [r4, #62]	; 0x3e
   1120a:	3340      	adds	r3, #64	; 0x40
   1120c:	3441      	adds	r4, #65	; 0x41
   1120e:	701f      	strb	r7, [r3, #0]
   11210:	7026      	strb	r6, [r4, #0]
   11212:	e7c6      	b.n	111a2 <RADIO_SetAttr+0x46>
   11214:	782a      	ldrb	r2, [r5, #0]
   11216:	4b4a      	ldr	r3, [pc, #296]	; (11340 <RADIO_SetAttr+0x1e4>)
   11218:	761a      	strb	r2, [r3, #24]
   1121a:	e7c2      	b.n	111a2 <RADIO_SetAttr+0x46>
   1121c:	4a4e      	ldr	r2, [pc, #312]	; (11358 <RADIO_SetAttr+0x1fc>)
   1121e:	682b      	ldr	r3, [r5, #0]
   11220:	1899      	adds	r1, r3, r2
   11222:	4a4e      	ldr	r2, [pc, #312]	; (1135c <RADIO_SetAttr+0x200>)
   11224:	4291      	cmp	r1, r2
   11226:	d90a      	bls.n	1123e <RADIO_SetAttr+0xe2>
   11228:	4a4d      	ldr	r2, [pc, #308]	; (11360 <RADIO_SetAttr+0x204>)
   1122a:	494e      	ldr	r1, [pc, #312]	; (11364 <RADIO_SetAttr+0x208>)
   1122c:	189a      	adds	r2, r3, r2
   1122e:	428a      	cmp	r2, r1
   11230:	d905      	bls.n	1123e <RADIO_SetAttr+0xe2>
   11232:	4a4d      	ldr	r2, [pc, #308]	; (11368 <RADIO_SetAttr+0x20c>)
   11234:	494d      	ldr	r1, [pc, #308]	; (1136c <RADIO_SetAttr+0x210>)
   11236:	189a      	adds	r2, r3, r2
   11238:	2405      	movs	r4, #5
   1123a:	428a      	cmp	r2, r1
   1123c:	d8b2      	bhi.n	111a4 <RADIO_SetAttr+0x48>
   1123e:	4a40      	ldr	r2, [pc, #256]	; (11340 <RADIO_SetAttr+0x1e4>)
   11240:	6013      	str	r3, [r2, #0]
   11242:	e7ae      	b.n	111a2 <RADIO_SetAttr+0x46>
   11244:	682a      	ldr	r2, [r5, #0]
   11246:	4b3e      	ldr	r3, [pc, #248]	; (11340 <RADIO_SetAttr+0x1e4>)
   11248:	605a      	str	r2, [r3, #4]
   1124a:	e7aa      	b.n	111a2 <RADIO_SetAttr+0x46>
   1124c:	882a      	ldrh	r2, [r5, #0]
   1124e:	4b3c      	ldr	r3, [pc, #240]	; (11340 <RADIO_SetAttr+0x1e4>)
   11250:	829a      	strh	r2, [r3, #20]
   11252:	e7a6      	b.n	111a2 <RADIO_SetAttr+0x46>
   11254:	4b3a      	ldr	r3, [pc, #232]	; (11340 <RADIO_SetAttr+0x1e4>)
   11256:	782a      	ldrb	r2, [r5, #0]
   11258:	3303      	adds	r3, #3
   1125a:	77da      	strb	r2, [r3, #31]
   1125c:	e7a1      	b.n	111a2 <RADIO_SetAttr+0x46>
   1125e:	782a      	ldrb	r2, [r5, #0]
   11260:	2405      	movs	r4, #5
   11262:	2a01      	cmp	r2, #1
   11264:	d89e      	bhi.n	111a4 <RADIO_SetAttr+0x48>
   11266:	4b36      	ldr	r3, [pc, #216]	; (11340 <RADIO_SetAttr+0x1e4>)
   11268:	3304      	adds	r3, #4
   1126a:	e7f6      	b.n	1125a <RADIO_SetAttr+0xfe>
   1126c:	782a      	ldrb	r2, [r5, #0]
   1126e:	2405      	movs	r4, #5
   11270:	2a01      	cmp	r2, #1
   11272:	d900      	bls.n	11276 <RADIO_SetAttr+0x11a>
   11274:	e796      	b.n	111a4 <RADIO_SetAttr+0x48>
   11276:	4b32      	ldr	r3, [pc, #200]	; (11340 <RADIO_SetAttr+0x1e4>)
   11278:	3306      	adds	r3, #6
   1127a:	e7ee      	b.n	1125a <RADIO_SetAttr+0xfe>
   1127c:	782a      	ldrb	r2, [r5, #0]
   1127e:	2405      	movs	r4, #5
   11280:	1fd3      	subs	r3, r2, #7
   11282:	2b02      	cmp	r3, #2
   11284:	d900      	bls.n	11288 <RADIO_SetAttr+0x12c>
   11286:	e78d      	b.n	111a4 <RADIO_SetAttr+0x48>
   11288:	4b2d      	ldr	r3, [pc, #180]	; (11340 <RADIO_SetAttr+0x1e4>)
   1128a:	3336      	adds	r3, #54	; 0x36
   1128c:	701a      	strb	r2, [r3, #0]
   1128e:	e788      	b.n	111a2 <RADIO_SetAttr+0x46>
   11290:	4b2b      	ldr	r3, [pc, #172]	; (11340 <RADIO_SetAttr+0x1e4>)
   11292:	782a      	ldrb	r2, [r5, #0]
   11294:	3305      	adds	r3, #5
   11296:	e7e0      	b.n	1125a <RADIO_SetAttr+0xfe>
   11298:	782a      	ldrb	r2, [r5, #0]
   1129a:	2405      	movs	r4, #5
   1129c:	2a01      	cmp	r2, #1
   1129e:	d900      	bls.n	112a2 <RADIO_SetAttr+0x146>
   112a0:	e780      	b.n	111a4 <RADIO_SetAttr+0x48>
   112a2:	4b27      	ldr	r3, [pc, #156]	; (11340 <RADIO_SetAttr+0x1e4>)
   112a4:	3334      	adds	r3, #52	; 0x34
   112a6:	e7f1      	b.n	1128c <RADIO_SetAttr+0x130>
   112a8:	882a      	ldrh	r2, [r5, #0]
   112aa:	4b25      	ldr	r3, [pc, #148]	; (11340 <RADIO_SetAttr+0x1e4>)
   112ac:	82da      	strh	r2, [r3, #22]
   112ae:	e778      	b.n	111a2 <RADIO_SetAttr+0x46>
   112b0:	782a      	ldrb	r2, [r5, #0]
   112b2:	2405      	movs	r4, #5
   112b4:	1e53      	subs	r3, r2, #1
   112b6:	2b03      	cmp	r3, #3
   112b8:	d900      	bls.n	112bc <RADIO_SetAttr+0x160>
   112ba:	e773      	b.n	111a4 <RADIO_SetAttr+0x48>
   112bc:	4b20      	ldr	r3, [pc, #128]	; (11340 <RADIO_SetAttr+0x1e4>)
   112be:	3333      	adds	r3, #51	; 0x33
   112c0:	e7e4      	b.n	1128c <RADIO_SetAttr+0x130>
   112c2:	4b1f      	ldr	r3, [pc, #124]	; (11340 <RADIO_SetAttr+0x1e4>)
   112c4:	682a      	ldr	r2, [r5, #0]
   112c6:	60da      	str	r2, [r3, #12]
   112c8:	682a      	ldr	r2, [r5, #0]
   112ca:	4b1d      	ldr	r3, [pc, #116]	; (11340 <RADIO_SetAttr+0x1e4>)
   112cc:	609a      	str	r2, [r3, #8]
   112ce:	e768      	b.n	111a2 <RADIO_SetAttr+0x46>
   112d0:	782a      	ldrb	r2, [r5, #0]
   112d2:	2405      	movs	r4, #5
   112d4:	2a03      	cmp	r2, #3
   112d6:	d900      	bls.n	112da <RADIO_SetAttr+0x17e>
   112d8:	e764      	b.n	111a4 <RADIO_SetAttr+0x48>
   112da:	4b19      	ldr	r3, [pc, #100]	; (11340 <RADIO_SetAttr+0x1e4>)
   112dc:	3337      	adds	r3, #55	; 0x37
   112de:	e7d5      	b.n	1128c <RADIO_SetAttr+0x130>
   112e0:	782a      	ldrb	r2, [r5, #0]
   112e2:	2405      	movs	r4, #5
   112e4:	1e53      	subs	r3, r2, #1
   112e6:	2b16      	cmp	r3, #22
   112e8:	d900      	bls.n	112ec <RADIO_SetAttr+0x190>
   112ea:	e75b      	b.n	111a4 <RADIO_SetAttr+0x48>
   112ec:	4b14      	ldr	r3, [pc, #80]	; (11340 <RADIO_SetAttr+0x1e4>)
   112ee:	3338      	adds	r3, #56	; 0x38
   112f0:	e7cc      	b.n	1128c <RADIO_SetAttr+0x130>
   112f2:	782a      	ldrb	r2, [r5, #0]
   112f4:	2405      	movs	r4, #5
   112f6:	1e53      	subs	r3, r2, #1
   112f8:	2b16      	cmp	r3, #22
   112fa:	d900      	bls.n	112fe <RADIO_SetAttr+0x1a2>
   112fc:	e752      	b.n	111a4 <RADIO_SetAttr+0x48>
   112fe:	4b10      	ldr	r3, [pc, #64]	; (11340 <RADIO_SetAttr+0x1e4>)
   11300:	3339      	adds	r3, #57	; 0x39
   11302:	e7c3      	b.n	1128c <RADIO_SetAttr+0x130>
   11304:	4b0e      	ldr	r3, [pc, #56]	; (11340 <RADIO_SetAttr+0x1e4>)
   11306:	0029      	movs	r1, r5
   11308:	3302      	adds	r3, #2
   1130a:	7fda      	ldrb	r2, [r3, #31]
   1130c:	4818      	ldr	r0, [pc, #96]	; (11370 <RADIO_SetAttr+0x214>)
   1130e:	4b19      	ldr	r3, [pc, #100]	; (11374 <RADIO_SetAttr+0x218>)
   11310:	4798      	blx	r3
   11312:	e746      	b.n	111a2 <RADIO_SetAttr+0x46>
   11314:	782b      	ldrb	r3, [r5, #0]
   11316:	1c1a      	adds	r2, r3, #0
   11318:	2b08      	cmp	r3, #8
   1131a:	d900      	bls.n	1131e <RADIO_SetAttr+0x1c2>
   1131c:	2208      	movs	r2, #8
   1131e:	4b08      	ldr	r3, [pc, #32]	; (11340 <RADIO_SetAttr+0x1e4>)
   11320:	3302      	adds	r3, #2
   11322:	e79a      	b.n	1125a <RADIO_SetAttr+0xfe>
   11324:	2405      	movs	r4, #5
   11326:	782a      	ldrb	r2, [r5, #0]
   11328:	1fd3      	subs	r3, r2, #7
   1132a:	42a3      	cmp	r3, r4
   1132c:	d900      	bls.n	11330 <RADIO_SetAttr+0x1d4>
   1132e:	e739      	b.n	111a4 <RADIO_SetAttr+0x48>
   11330:	4b03      	ldr	r3, [pc, #12]	; (11340 <RADIO_SetAttr+0x1e4>)
   11332:	3335      	adds	r3, #53	; 0x35
   11334:	e7aa      	b.n	1128c <RADIO_SetAttr+0x130>
   11336:	2405      	movs	r4, #5
   11338:	e734      	b.n	111a4 <RADIO_SetAttr+0x48>
   1133a:	46c0      	nop			; (mov r8, r8)
   1133c:	00011a91 	.word	0x00011a91
   11340:	20002214 	.word	0x20002214
   11344:	00012e25 	.word	0x00012e25
   11348:	00013fb1 	.word	0x00013fb1
   1134c:	43fa0000 	.word	0x43fa0000
   11350:	00013021 	.word	0x00013021
   11354:	00013105 	.word	0x00013105
   11358:	f7d58bc0 	.word	0xf7d58bc0
   1135c:	0243d580 	.word	0x0243d580
   11360:	e78fe580 	.word	0xe78fe580
   11364:	06dac2c0 	.word	0x06dac2c0
   11368:	cc9eec80 	.word	0xcc9eec80
   1136c:	096ae380 	.word	0x096ae380
   11370:	2000222d 	.word	0x2000222d
   11374:	00015f45 	.word	0x00015f45

00011378 <RADIO_Init>:
   11378:	b510      	push	{r4, lr}
   1137a:	4b0c      	ldr	r3, [pc, #48]	; (113ac <RADIO_Init+0x34>)
   1137c:	4798      	blx	r3
   1137e:	4b0c      	ldr	r3, [pc, #48]	; (113b0 <RADIO_Init+0x38>)
   11380:	201f      	movs	r0, #31
   11382:	4798      	blx	r3
   11384:	4c0b      	ldr	r4, [pc, #44]	; (113b4 <RADIO_Init+0x3c>)
   11386:	490c      	ldr	r1, [pc, #48]	; (113b8 <RADIO_Init+0x40>)
   11388:	2001      	movs	r0, #1
   1138a:	47a0      	blx	r4
   1138c:	490b      	ldr	r1, [pc, #44]	; (113bc <RADIO_Init+0x44>)
   1138e:	2002      	movs	r0, #2
   11390:	47a0      	blx	r4
   11392:	490b      	ldr	r1, [pc, #44]	; (113c0 <RADIO_Init+0x48>)
   11394:	2004      	movs	r0, #4
   11396:	47a0      	blx	r4
   11398:	490a      	ldr	r1, [pc, #40]	; (113c4 <RADIO_Init+0x4c>)
   1139a:	2008      	movs	r0, #8
   1139c:	47a0      	blx	r4
   1139e:	490a      	ldr	r1, [pc, #40]	; (113c8 <RADIO_Init+0x50>)
   113a0:	2010      	movs	r0, #16
   113a2:	47a0      	blx	r4
   113a4:	4909      	ldr	r1, [pc, #36]	; (113cc <RADIO_Init+0x54>)
   113a6:	2020      	movs	r0, #32
   113a8:	47a0      	blx	r4
   113aa:	bd10      	pop	{r4, pc}
   113ac:	0001217d 	.word	0x0001217d
   113b0:	00011a9d 	.word	0x00011a9d
   113b4:	00005481 	.word	0x00005481
   113b8:	00011829 	.word	0x00011829
   113bc:	000118a1 	.word	0x000118a1
   113c0:	00011911 	.word	0x00011911
   113c4:	00011961 	.word	0x00011961
   113c8:	00011989 	.word	0x00011989
   113cc:	000119b1 	.word	0x000119b1

000113d0 <Radio_WriteFrequency>:
   113d0:	b570      	push	{r4, r5, r6, lr}
   113d2:	490d      	ldr	r1, [pc, #52]	; (11408 <Radio_WriteFrequency+0x38>)
   113d4:	4d0d      	ldr	r5, [pc, #52]	; (1140c <Radio_WriteFrequency+0x3c>)
   113d6:	0006      	movs	r6, r0
   113d8:	47a8      	blx	r5
   113da:	4b0d      	ldr	r3, [pc, #52]	; (11410 <Radio_WriteFrequency+0x40>)
   113dc:	0004      	movs	r4, r0
   113de:	490a      	ldr	r1, [pc, #40]	; (11408 <Radio_WriteFrequency+0x38>)
   113e0:	0030      	movs	r0, r6
   113e2:	4798      	blx	r3
   113e4:	0208      	lsls	r0, r1, #8
   113e6:	4908      	ldr	r1, [pc, #32]	; (11408 <Radio_WriteFrequency+0x38>)
   113e8:	47a8      	blx	r5
   113ea:	0224      	lsls	r4, r4, #8
   113ec:	1904      	adds	r4, r0, r4
   113ee:	0c21      	lsrs	r1, r4, #16
   113f0:	4d08      	ldr	r5, [pc, #32]	; (11414 <Radio_WriteFrequency+0x44>)
   113f2:	b2c9      	uxtb	r1, r1
   113f4:	2006      	movs	r0, #6
   113f6:	47a8      	blx	r5
   113f8:	0a21      	lsrs	r1, r4, #8
   113fa:	b2c9      	uxtb	r1, r1
   113fc:	2007      	movs	r0, #7
   113fe:	47a8      	blx	r5
   11400:	b2e1      	uxtb	r1, r4
   11402:	2008      	movs	r0, #8
   11404:	47a8      	blx	r5
   11406:	bd70      	pop	{r4, r5, r6, pc}
   11408:	00003d09 	.word	0x00003d09
   1140c:	00012d11 	.word	0x00012d11
   11410:	00012e1d 	.word	0x00012e1d
   11414:	000053ad 	.word	0x000053ad

00011418 <Radio_WriteConfiguration>:
   11418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1141a:	4cb0      	ldr	r4, [pc, #704]	; (116dc <Radio_WriteConfiguration+0x2c4>)
   1141c:	2200      	movs	r2, #0
   1141e:	0023      	movs	r3, r4
   11420:	b085      	sub	sp, #20
   11422:	9002      	str	r0, [sp, #8]
   11424:	3334      	adds	r3, #52	; 0x34
   11426:	0010      	movs	r0, r2
   11428:	7819      	ldrb	r1, [r3, #0]
   1142a:	4bad      	ldr	r3, [pc, #692]	; (116e0 <Radio_WriteConfiguration+0x2c8>)
   1142c:	4798      	blx	r3
   1142e:	4bad      	ldr	r3, [pc, #692]	; (116e4 <Radio_WriteConfiguration+0x2cc>)
   11430:	6820      	ldr	r0, [r4, #0]
   11432:	4798      	blx	r3
   11434:	1ce3      	adds	r3, r4, #3
   11436:	1d62      	adds	r2, r4, #5
   11438:	7fdb      	ldrb	r3, [r3, #31]
   1143a:	7fd2      	ldrb	r2, [r2, #31]
   1143c:	b25b      	sxtb	r3, r3
   1143e:	4eaa      	ldr	r6, [pc, #680]	; (116e8 <Radio_WriteConfiguration+0x2d0>)
   11440:	4daa      	ldr	r5, [pc, #680]	; (116ec <Radio_WriteConfiguration+0x2d4>)
   11442:	2a00      	cmp	r2, #0
   11444:	d000      	beq.n	11448 <Radio_WriteConfiguration+0x30>
   11446:	e0fc      	b.n	11642 <Radio_WriteConfiguration+0x22a>
   11448:	1c1f      	adds	r7, r3, #0
   1144a:	2b0f      	cmp	r3, #15
   1144c:	dc00      	bgt.n	11450 <Radio_WriteConfiguration+0x38>
   1144e:	e0ec      	b.n	1162a <Radio_WriteConfiguration+0x212>
   11450:	270f      	movs	r7, #15
   11452:	b27b      	sxtb	r3, r7
   11454:	204d      	movs	r0, #77	; 0x4d
   11456:	9301      	str	r3, [sp, #4]
   11458:	47b0      	blx	r6
   1145a:	21f8      	movs	r1, #248	; 0xf8
   1145c:	4008      	ands	r0, r1
   1145e:	39f4      	subs	r1, #244	; 0xf4
   11460:	4301      	orrs	r1, r0
   11462:	204d      	movs	r0, #77	; 0x4d
   11464:	47a8      	blx	r5
   11466:	b27b      	sxtb	r3, r7
   11468:	2b00      	cmp	r3, #0
   1146a:	db00      	blt.n	1146e <Radio_WriteConfiguration+0x56>
   1146c:	e0e4      	b.n	11638 <Radio_WriteConfiguration+0x220>
   1146e:	3703      	adds	r7, #3
   11470:	b2f9      	uxtb	r1, r7
   11472:	2720      	movs	r7, #32
   11474:	4339      	orrs	r1, r7
   11476:	2009      	movs	r0, #9
   11478:	47a8      	blx	r5
   1147a:	0023      	movs	r3, r4
   1147c:	3334      	adds	r3, #52	; 0x34
   1147e:	781f      	ldrb	r7, [r3, #0]
   11480:	2f01      	cmp	r7, #1
   11482:	d000      	beq.n	11486 <Radio_WriteConfiguration+0x6e>
   11484:	e144      	b.n	11710 <Radio_WriteConfiguration+0x2f8>
   11486:	7e21      	ldrb	r1, [r4, #24]
   11488:	2039      	movs	r0, #57	; 0x39
   1148a:	47a8      	blx	r5
   1148c:	4b98      	ldr	r3, [pc, #608]	; (116f0 <Radio_WriteConfiguration+0x2d8>)
   1148e:	201d      	movs	r0, #29
   11490:	7819      	ldrb	r1, [r3, #0]
   11492:	0023      	movs	r3, r4
   11494:	3333      	adds	r3, #51	; 0x33
   11496:	781b      	ldrb	r3, [r3, #0]
   11498:	0109      	lsls	r1, r1, #4
   1149a:	005b      	lsls	r3, r3, #1
   1149c:	4319      	orrs	r1, r3
   1149e:	1de3      	adds	r3, r4, #7
   114a0:	7fdb      	ldrb	r3, [r3, #31]
   114a2:	401f      	ands	r7, r3
   114a4:	4339      	orrs	r1, r7
   114a6:	b2c9      	uxtb	r1, r1
   114a8:	47a8      	blx	r5
   114aa:	1d23      	adds	r3, r4, #4
   114ac:	7fd9      	ldrb	r1, [r3, #31]
   114ae:	2304      	movs	r3, #4
   114b0:	0089      	lsls	r1, r1, #2
   114b2:	4019      	ands	r1, r3
   114b4:	0023      	movs	r3, r4
   114b6:	3335      	adds	r3, #53	; 0x35
   114b8:	781b      	ldrb	r3, [r3, #0]
   114ba:	201e      	movs	r0, #30
   114bc:	011b      	lsls	r3, r3, #4
   114be:	4319      	orrs	r1, r3
   114c0:	9b02      	ldr	r3, [sp, #8]
   114c2:	059b      	lsls	r3, r3, #22
   114c4:	0f9b      	lsrs	r3, r3, #30
   114c6:	4319      	orrs	r1, r3
   114c8:	b2c9      	uxtb	r1, r1
   114ca:	47a8      	blx	r5
   114cc:	2300      	movs	r3, #0
   114ce:	8ae1      	ldrh	r1, [r4, #22]
   114d0:	4299      	cmp	r1, r3
   114d2:	d011      	beq.n	114f8 <Radio_WriteConfiguration+0xe0>
   114d4:	4a86      	ldr	r2, [pc, #536]	; (116f0 <Radio_WriteConfiguration+0x2d8>)
   114d6:	7812      	ldrb	r2, [r2, #0]
   114d8:	2a08      	cmp	r2, #8
   114da:	d100      	bne.n	114de <Radio_WriteConfiguration+0xc6>
   114dc:	e0e4      	b.n	116a8 <Radio_WriteConfiguration+0x290>
   114de:	2a09      	cmp	r2, #9
   114e0:	d100      	bne.n	114e4 <Radio_WriteConfiguration+0xcc>
   114e2:	e0e3      	b.n	116ac <Radio_WriteConfiguration+0x294>
   114e4:	2a07      	cmp	r2, #7
   114e6:	d000      	beq.n	114ea <Radio_WriteConfiguration+0xd2>
   114e8:	e0e3      	b.n	116b2 <Radio_WriteConfiguration+0x29a>
   114ea:	337d      	adds	r3, #125	; 0x7d
   114ec:	4359      	muls	r1, r3
   114ee:	0023      	movs	r3, r4
   114f0:	3335      	adds	r3, #53	; 0x35
   114f2:	781b      	ldrb	r3, [r3, #0]
   114f4:	40d9      	lsrs	r1, r3
   114f6:	000b      	movs	r3, r1
   114f8:	b2d9      	uxtb	r1, r3
   114fa:	2024      	movs	r0, #36	; 0x24
   114fc:	4d7b      	ldr	r5, [pc, #492]	; (116ec <Radio_WriteConfiguration+0x2d4>)
   114fe:	47a8      	blx	r5
   11500:	466b      	mov	r3, sp
   11502:	201f      	movs	r0, #31
   11504:	7a19      	ldrb	r1, [r3, #8]
   11506:	47a8      	blx	r5
   11508:	2026      	movs	r0, #38	; 0x26
   1150a:	47b0      	blx	r6
   1150c:	0023      	movs	r3, r4
   1150e:	3335      	adds	r3, #53	; 0x35
   11510:	781b      	ldrb	r3, [r3, #0]
   11512:	2b0c      	cmp	r3, #12
   11514:	d105      	bne.n	11522 <Radio_WriteConfiguration+0x10a>
   11516:	0023      	movs	r3, r4
   11518:	3336      	adds	r3, #54	; 0x36
   1151a:	781b      	ldrb	r3, [r3, #0]
   1151c:	3b07      	subs	r3, #7
   1151e:	2b01      	cmp	r3, #1
   11520:	d906      	bls.n	11530 <Radio_WriteConfiguration+0x118>
   11522:	6b62      	ldr	r2, [r4, #52]	; 0x34
   11524:	4b73      	ldr	r3, [pc, #460]	; (116f4 <Radio_WriteConfiguration+0x2dc>)
   11526:	4013      	ands	r3, r2
   11528:	4a73      	ldr	r2, [pc, #460]	; (116f8 <Radio_WriteConfiguration+0x2e0>)
   1152a:	4293      	cmp	r3, r2
   1152c:	d000      	beq.n	11530 <Radio_WriteConfiguration+0x118>
   1152e:	e0c2      	b.n	116b6 <Radio_WriteConfiguration+0x29e>
   11530:	2108      	movs	r1, #8
   11532:	4308      	orrs	r0, r1
   11534:	b2c0      	uxtb	r0, r0
   11536:	2104      	movs	r1, #4
   11538:	4301      	orrs	r1, r0
   1153a:	2026      	movs	r0, #38	; 0x26
   1153c:	47a8      	blx	r5
   1153e:	2031      	movs	r0, #49	; 0x31
   11540:	47b0      	blx	r6
   11542:	21f8      	movs	r1, #248	; 0xf8
   11544:	4008      	ands	r0, r1
   11546:	39f5      	subs	r1, #245	; 0xf5
   11548:	4301      	orrs	r1, r0
   1154a:	2031      	movs	r0, #49	; 0x31
   1154c:	47a8      	blx	r5
   1154e:	210a      	movs	r1, #10
   11550:	2037      	movs	r0, #55	; 0x37
   11552:	47a8      	blx	r5
   11554:	0023      	movs	r3, r4
   11556:	3331      	adds	r3, #49	; 0x31
   11558:	781b      	ldrb	r3, [r3, #0]
   1155a:	2b12      	cmp	r3, #18
   1155c:	d11e      	bne.n	1159c <Radio_WriteConfiguration+0x184>
   1155e:	0023      	movs	r3, r4
   11560:	3336      	adds	r3, #54	; 0x36
   11562:	781b      	ldrb	r3, [r3, #0]
   11564:	3b07      	subs	r3, #7
   11566:	2b01      	cmp	r3, #1
   11568:	d80b      	bhi.n	11582 <Radio_WriteConfiguration+0x16a>
   1156a:	2031      	movs	r0, #49	; 0x31
   1156c:	47b0      	blx	r6
   1156e:	217f      	movs	r1, #127	; 0x7f
   11570:	4001      	ands	r1, r0
   11572:	2031      	movs	r0, #49	; 0x31
   11574:	47a8      	blx	r5
   11576:	2140      	movs	r1, #64	; 0x40
   11578:	202f      	movs	r0, #47	; 0x2f
   1157a:	47a8      	blx	r5
   1157c:	2100      	movs	r1, #0
   1157e:	2030      	movs	r0, #48	; 0x30
   11580:	47a8      	blx	r5
   11582:	0023      	movs	r3, r4
   11584:	3336      	adds	r3, #54	; 0x36
   11586:	781b      	ldrb	r3, [r3, #0]
   11588:	2b09      	cmp	r3, #9
   1158a:	d107      	bne.n	1159c <Radio_WriteConfiguration+0x184>
   1158c:	2031      	movs	r0, #49	; 0x31
   1158e:	47b0      	blx	r6
   11590:	2180      	movs	r1, #128	; 0x80
   11592:	4249      	negs	r1, r1
   11594:	4301      	orrs	r1, r0
   11596:	b2c9      	uxtb	r1, r1
   11598:	2031      	movs	r0, #49	; 0x31
   1159a:	47a8      	blx	r5
   1159c:	2033      	movs	r0, #51	; 0x33
   1159e:	47b0      	blx	r6
   115a0:	1da3      	adds	r3, r4, #6
   115a2:	7fd9      	ldrb	r1, [r3, #31]
   115a4:	2340      	movs	r3, #64	; 0x40
   115a6:	0189      	lsls	r1, r1, #6
   115a8:	4398      	bics	r0, r3
   115aa:	4019      	ands	r1, r3
   115ac:	4301      	orrs	r1, r0
   115ae:	b2c9      	uxtb	r1, r1
   115b0:	2033      	movs	r0, #51	; 0x33
   115b2:	47a8      	blx	r5
   115b4:	8aa1      	ldrh	r1, [r4, #20]
   115b6:	2020      	movs	r0, #32
   115b8:	0a09      	lsrs	r1, r1, #8
   115ba:	47a8      	blx	r5
   115bc:	7d21      	ldrb	r1, [r4, #20]
   115be:	2021      	movs	r0, #33	; 0x21
   115c0:	47a8      	blx	r5
   115c2:	2100      	movs	r1, #0
   115c4:	200d      	movs	r0, #13
   115c6:	47a8      	blx	r5
   115c8:	2100      	movs	r1, #0
   115ca:	200e      	movs	r0, #14
   115cc:	47a8      	blx	r5
   115ce:	2100      	movs	r1, #0
   115d0:	200f      	movs	r0, #15
   115d2:	47a8      	blx	r5
   115d4:	0023      	movs	r3, r4
   115d6:	3331      	adds	r3, #49	; 0x31
   115d8:	781b      	ldrb	r3, [r3, #0]
   115da:	2b12      	cmp	r3, #18
   115dc:	d120      	bne.n	11620 <Radio_WriteConfiguration+0x208>
   115de:	0023      	movs	r3, r4
   115e0:	3336      	adds	r3, #54	; 0x36
   115e2:	781b      	ldrb	r3, [r3, #0]
   115e4:	2b09      	cmp	r3, #9
   115e6:	d000      	beq.n	115ea <Radio_WriteConfiguration+0x1d2>
   115e8:	e072      	b.n	116d0 <Radio_WriteConfiguration+0x2b8>
   115ea:	4a44      	ldr	r2, [pc, #272]	; (116fc <Radio_WriteConfiguration+0x2e4>)
   115ec:	6823      	ldr	r3, [r4, #0]
   115ee:	1899      	adds	r1, r3, r2
   115f0:	4a43      	ldr	r2, [pc, #268]	; (11700 <Radio_WriteConfiguration+0x2e8>)
   115f2:	4291      	cmp	r1, r2
   115f4:	d862      	bhi.n	116bc <Radio_WriteConfiguration+0x2a4>
   115f6:	2102      	movs	r1, #2
   115f8:	2036      	movs	r0, #54	; 0x36
   115fa:	47a8      	blx	r5
   115fc:	2164      	movs	r1, #100	; 0x64
   115fe:	203a      	movs	r0, #58	; 0x3a
   11600:	47a8      	blx	r5
   11602:	0023      	movs	r3, r4
   11604:	3336      	adds	r3, #54	; 0x36
   11606:	781b      	ldrb	r3, [r3, #0]
   11608:	2165      	movs	r1, #101	; 0x65
   1160a:	203a      	movs	r0, #58	; 0x3a
   1160c:	2b09      	cmp	r3, #9
   1160e:	d162      	bne.n	116d6 <Radio_WriteConfiguration+0x2be>
   11610:	3406      	adds	r4, #6
   11612:	7fe3      	ldrb	r3, [r4, #31]
   11614:	2b01      	cmp	r3, #1
   11616:	d15e      	bne.n	116d6 <Radio_WriteConfiguration+0x2be>
   11618:	47a8      	blx	r5
   1161a:	2119      	movs	r1, #25
   1161c:	203b      	movs	r0, #59	; 0x3b
   1161e:	47a8      	blx	r5
   11620:	21ff      	movs	r1, #255	; 0xff
   11622:	2012      	movs	r0, #18
   11624:	47a8      	blx	r5
   11626:	b005      	add	sp, #20
   11628:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1162a:	b25b      	sxtb	r3, r3
   1162c:	3303      	adds	r3, #3
   1162e:	db00      	blt.n	11632 <Radio_WriteConfiguration+0x21a>
   11630:	e70f      	b.n	11452 <Radio_WriteConfiguration+0x3a>
   11632:	4b34      	ldr	r3, [pc, #208]	; (11704 <Radio_WriteConfiguration+0x2ec>)
   11634:	781f      	ldrb	r7, [r3, #0]
   11636:	e70c      	b.n	11452 <Radio_WriteConfiguration+0x3a>
   11638:	2170      	movs	r1, #112	; 0x70
   1163a:	9b01      	ldr	r3, [sp, #4]
   1163c:	4319      	orrs	r1, r3
   1163e:	b2c9      	uxtb	r1, r1
   11640:	e719      	b.n	11476 <Radio_WriteConfiguration+0x5e>
   11642:	2b01      	cmp	r3, #1
   11644:	dd07      	ble.n	11656 <Radio_WriteConfiguration+0x23e>
   11646:	2714      	movs	r7, #20
   11648:	2b13      	cmp	r3, #19
   1164a:	dc06      	bgt.n	1165a <Radio_WriteConfiguration+0x242>
   1164c:	1c1f      	adds	r7, r3, #0
   1164e:	2b11      	cmp	r3, #17
   11650:	dd02      	ble.n	11658 <Radio_WriteConfiguration+0x240>
   11652:	2711      	movs	r7, #17
   11654:	e000      	b.n	11658 <Radio_WriteConfiguration+0x240>
   11656:	2702      	movs	r7, #2
   11658:	b27f      	sxtb	r7, r7
   1165a:	200b      	movs	r0, #11
   1165c:	47b0      	blx	r6
   1165e:	9003      	str	r0, [sp, #12]
   11660:	204d      	movs	r0, #77	; 0x4d
   11662:	47b0      	blx	r6
   11664:	2307      	movs	r3, #7
   11666:	4398      	bics	r0, r3
   11668:	b2c1      	uxtb	r1, r0
   1166a:	2f14      	cmp	r7, #20
   1166c:	d112      	bne.n	11694 <Radio_WriteConfiguration+0x27c>
   1166e:	4319      	orrs	r1, r3
   11670:	9b03      	ldr	r3, [sp, #12]
   11672:	37cb      	adds	r7, #203	; 0xcb
   11674:	403b      	ands	r3, r7
   11676:	001f      	movs	r7, r3
   11678:	230f      	movs	r3, #15
   1167a:	9301      	str	r3, [sp, #4]
   1167c:	204d      	movs	r0, #77	; 0x4d
   1167e:	47a8      	blx	r5
   11680:	2180      	movs	r1, #128	; 0x80
   11682:	9b01      	ldr	r3, [sp, #4]
   11684:	4249      	negs	r1, r1
   11686:	4319      	orrs	r1, r3
   11688:	b2c9      	uxtb	r1, r1
   1168a:	2009      	movs	r0, #9
   1168c:	47a8      	blx	r5
   1168e:	0039      	movs	r1, r7
   11690:	200b      	movs	r0, #11
   11692:	e6f1      	b.n	11478 <Radio_WriteConfiguration+0x60>
   11694:	3f02      	subs	r7, #2
   11696:	b27b      	sxtb	r3, r7
   11698:	2720      	movs	r7, #32
   1169a:	2004      	movs	r0, #4
   1169c:	9301      	str	r3, [sp, #4]
   1169e:	9b03      	ldr	r3, [sp, #12]
   116a0:	4301      	orrs	r1, r0
   116a2:	431f      	orrs	r7, r3
   116a4:	b2ff      	uxtb	r7, r7
   116a6:	e7e9      	b.n	1167c <Radio_WriteConfiguration+0x264>
   116a8:	23fa      	movs	r3, #250	; 0xfa
   116aa:	e71f      	b.n	114ec <Radio_WriteConfiguration+0xd4>
   116ac:	23fa      	movs	r3, #250	; 0xfa
   116ae:	005b      	lsls	r3, r3, #1
   116b0:	e71c      	b.n	114ec <Radio_WriteConfiguration+0xd4>
   116b2:	0019      	movs	r1, r3
   116b4:	e71b      	b.n	114ee <Radio_WriteConfiguration+0xd6>
   116b6:	21f7      	movs	r1, #247	; 0xf7
   116b8:	4008      	ands	r0, r1
   116ba:	e73c      	b.n	11536 <Radio_WriteConfiguration+0x11e>
   116bc:	4a12      	ldr	r2, [pc, #72]	; (11708 <Radio_WriteConfiguration+0x2f0>)
   116be:	189b      	adds	r3, r3, r2
   116c0:	4a12      	ldr	r2, [pc, #72]	; (1170c <Radio_WriteConfiguration+0x2f4>)
   116c2:	4293      	cmp	r3, r2
   116c4:	d804      	bhi.n	116d0 <Radio_WriteConfiguration+0x2b8>
   116c6:	2102      	movs	r1, #2
   116c8:	2036      	movs	r0, #54	; 0x36
   116ca:	47a8      	blx	r5
   116cc:	217f      	movs	r1, #127	; 0x7f
   116ce:	e796      	b.n	115fe <Radio_WriteConfiguration+0x1e6>
   116d0:	2103      	movs	r1, #3
   116d2:	2036      	movs	r0, #54	; 0x36
   116d4:	e794      	b.n	11600 <Radio_WriteConfiguration+0x1e8>
   116d6:	47a8      	blx	r5
   116d8:	211d      	movs	r1, #29
   116da:	e79f      	b.n	1161c <Radio_WriteConfiguration+0x204>
   116dc:	20002214 	.word	0x20002214
   116e0:	0000c58d 	.word	0x0000c58d
   116e4:	000113d1 	.word	0x000113d1
   116e8:	000053d5 	.word	0x000053d5
   116ec:	000053ad 	.word	0x000053ad
   116f0:	2000224a 	.word	0x2000224a
   116f4:	00ffff00 	.word	0x00ffff00
   116f8:	00070b00 	.word	0x00070b00
   116fc:	cc9eec80 	.word	0xcc9eec80
   11700:	096ae380 	.word	0x096ae380
   11704:	0001dd84 	.word	0x0001dd84
   11708:	e78fe580 	.word	0xe78fe580
   1170c:	06dac2c0 	.word	0x06dac2c0
   11710:	6863      	ldr	r3, [r4, #4]
   11712:	492c      	ldr	r1, [pc, #176]	; (117c4 <Radio_WriteConfiguration+0x3ac>)
   11714:	0218      	lsls	r0, r3, #8
   11716:	4b2c      	ldr	r3, [pc, #176]	; (117c8 <Radio_WriteConfiguration+0x3b0>)
   11718:	4798      	blx	r3
   1171a:	0007      	movs	r7, r0
   1171c:	0a01      	lsrs	r1, r0, #8
   1171e:	b2c9      	uxtb	r1, r1
   11720:	2004      	movs	r0, #4
   11722:	47a8      	blx	r5
   11724:	b2f9      	uxtb	r1, r7
   11726:	2005      	movs	r0, #5
   11728:	47a8      	blx	r5
   1172a:	4b27      	ldr	r3, [pc, #156]	; (117c8 <Radio_WriteConfiguration+0x3b0>)
   1172c:	68a1      	ldr	r1, [r4, #8]
   1172e:	4827      	ldr	r0, [pc, #156]	; (117cc <Radio_WriteConfiguration+0x3b4>)
   11730:	4798      	blx	r3
   11732:	0007      	movs	r7, r0
   11734:	0a01      	lsrs	r1, r0, #8
   11736:	b2c9      	uxtb	r1, r1
   11738:	2002      	movs	r0, #2
   1173a:	47a8      	blx	r5
   1173c:	b2f9      	uxtb	r1, r7
   1173e:	2003      	movs	r0, #3
   11740:	47a8      	blx	r5
   11742:	2100      	movs	r1, #0
   11744:	205d      	movs	r0, #93	; 0x5d
   11746:	47a8      	blx	r5
   11748:	8aa1      	ldrh	r1, [r4, #20]
   1174a:	2025      	movs	r0, #37	; 0x25
   1174c:	0a09      	lsrs	r1, r1, #8
   1174e:	47a8      	blx	r5
   11750:	7d21      	ldrb	r1, [r4, #20]
   11752:	2026      	movs	r0, #38	; 0x26
   11754:	47a8      	blx	r5
   11756:	219e      	movs	r1, #158	; 0x9e
   11758:	200d      	movs	r0, #13
   1175a:	47a8      	blx	r5
   1175c:	21a0      	movs	r1, #160	; 0xa0
   1175e:	2035      	movs	r0, #53	; 0x35
   11760:	47a8      	blx	r5
   11762:	200a      	movs	r0, #10
   11764:	47b0      	blx	r6
   11766:	0023      	movs	r3, r4
   11768:	3337      	adds	r3, #55	; 0x37
   1176a:	7819      	ldrb	r1, [r3, #0]
   1176c:	2360      	movs	r3, #96	; 0x60
   1176e:	0149      	lsls	r1, r1, #5
   11770:	4398      	bics	r0, r3
   11772:	4301      	orrs	r1, r0
   11774:	b2c9      	uxtb	r1, r1
   11776:	200a      	movs	r0, #10
   11778:	47a8      	blx	r5
   1177a:	1d23      	adds	r3, r4, #4
   1177c:	7fdb      	ldrb	r3, [r3, #31]
   1177e:	21c0      	movs	r1, #192	; 0xc0
   11780:	2b00      	cmp	r3, #0
   11782:	d000      	beq.n	11786 <Radio_WriteConfiguration+0x36e>
   11784:	3110      	adds	r1, #16
   11786:	2030      	movs	r0, #48	; 0x30
   11788:	47a8      	blx	r5
   1178a:	2600      	movs	r6, #0
   1178c:	1ca3      	adds	r3, r4, #2
   1178e:	7fd9      	ldrb	r1, [r3, #31]
   11790:	428e      	cmp	r6, r1
   11792:	d30d      	bcc.n	117b0 <Radio_WriteConfiguration+0x398>
   11794:	2900      	cmp	r1, #0
   11796:	d003      	beq.n	117a0 <Radio_WriteConfiguration+0x388>
   11798:	2310      	movs	r3, #16
   1179a:	3901      	subs	r1, #1
   1179c:	4319      	orrs	r1, r3
   1179e:	b2c9      	uxtb	r1, r1
   117a0:	2027      	movs	r0, #39	; 0x27
   117a2:	47a8      	blx	r5
   117a4:	21ff      	movs	r1, #255	; 0xff
   117a6:	203e      	movs	r0, #62	; 0x3e
   117a8:	47a8      	blx	r5
   117aa:	21ff      	movs	r1, #255	; 0xff
   117ac:	203f      	movs	r0, #63	; 0x3f
   117ae:	e739      	b.n	11624 <Radio_WriteConfiguration+0x20c>
   117b0:	0030      	movs	r0, r6
   117b2:	19a3      	adds	r3, r4, r6
   117b4:	3028      	adds	r0, #40	; 0x28
   117b6:	7e59      	ldrb	r1, [r3, #25]
   117b8:	b2c0      	uxtb	r0, r0
   117ba:	3601      	adds	r6, #1
   117bc:	47a8      	blx	r5
   117be:	b2f6      	uxtb	r6, r6
   117c0:	e7e4      	b.n	1178c <Radio_WriteConfiguration+0x374>
   117c2:	46c0      	nop			; (mov r8, r8)
   117c4:	00003d09 	.word	0x00003d09
   117c8:	00012d11 	.word	0x00012d11
   117cc:	01e84800 	.word	0x01e84800

000117d0 <RADIO_getMappingAndOpmode>:
   117d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   117d2:	0006      	movs	r6, r0
   117d4:	4d06      	ldr	r5, [pc, #24]	; (117f0 <RADIO_getMappingAndOpmode+0x20>)
   117d6:	2040      	movs	r0, #64	; 0x40
   117d8:	001f      	movs	r7, r3
   117da:	0014      	movs	r4, r2
   117dc:	9101      	str	r1, [sp, #4]
   117de:	47a8      	blx	r5
   117e0:	4004      	ands	r4, r0
   117e2:	413c      	asrs	r4, r7
   117e4:	2001      	movs	r0, #1
   117e6:	7034      	strb	r4, [r6, #0]
   117e8:	47a8      	blx	r5
   117ea:	9b01      	ldr	r3, [sp, #4]
   117ec:	7018      	strb	r0, [r3, #0]
   117ee:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
   117f0:	000053d5 	.word	0x000053d5

000117f4 <RADIO_UnhandledInterrupt.part.0>:
   117f4:	b510      	push	{r4, lr}
   117f6:	21ff      	movs	r1, #255	; 0xff
   117f8:	2012      	movs	r0, #18
   117fa:	4b01      	ldr	r3, [pc, #4]	; (11800 <RADIO_UnhandledInterrupt.part.0+0xc>)
   117fc:	4798      	blx	r3
   117fe:	bd10      	pop	{r4, pc}
   11800:	000053ad 	.word	0x000053ad

00011804 <RADIO_UnhandledInterrupt>:
   11804:	b510      	push	{r4, lr}
   11806:	2801      	cmp	r0, #1
   11808:	d102      	bne.n	11810 <RADIO_UnhandledInterrupt+0xc>
   1180a:	4b05      	ldr	r3, [pc, #20]	; (11820 <RADIO_UnhandledInterrupt+0x1c>)
   1180c:	4798      	blx	r3
   1180e:	bd10      	pop	{r4, pc}
   11810:	21ff      	movs	r1, #255	; 0xff
   11812:	203e      	movs	r0, #62	; 0x3e
   11814:	4c03      	ldr	r4, [pc, #12]	; (11824 <RADIO_UnhandledInterrupt+0x20>)
   11816:	47a0      	blx	r4
   11818:	21ff      	movs	r1, #255	; 0xff
   1181a:	203f      	movs	r0, #63	; 0x3f
   1181c:	47a0      	blx	r4
   1181e:	e7f6      	b.n	1180e <RADIO_UnhandledInterrupt+0xa>
   11820:	000117f5 	.word	0x000117f5
   11824:	000053ad 	.word	0x000053ad

00011828 <RADIO_DIO0>:
   11828:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1182a:	466b      	mov	r3, sp
   1182c:	1ddc      	adds	r4, r3, #7
   1182e:	1d9d      	adds	r5, r3, #6
   11830:	22c0      	movs	r2, #192	; 0xc0
   11832:	2306      	movs	r3, #6
   11834:	0028      	movs	r0, r5
   11836:	0021      	movs	r1, r4
   11838:	4e12      	ldr	r6, [pc, #72]	; (11884 <RADIO_DIO0+0x5c>)
   1183a:	47b0      	blx	r6
   1183c:	7823      	ldrb	r3, [r4, #0]
   1183e:	7828      	ldrb	r0, [r5, #0]
   11840:	b25a      	sxtb	r2, r3
   11842:	b2c0      	uxtb	r0, r0
   11844:	2a00      	cmp	r2, #0
   11846:	da0b      	bge.n	11860 <RADIO_DIO0+0x38>
   11848:	2800      	cmp	r0, #0
   1184a:	d004      	beq.n	11856 <RADIO_DIO0+0x2e>
   1184c:	2801      	cmp	r0, #1
   1184e:	d005      	beq.n	1185c <RADIO_DIO0+0x34>
   11850:	4b0d      	ldr	r3, [pc, #52]	; (11888 <RADIO_DIO0+0x60>)
   11852:	4798      	blx	r3
   11854:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   11856:	4b0d      	ldr	r3, [pc, #52]	; (1188c <RADIO_DIO0+0x64>)
   11858:	4798      	blx	r3
   1185a:	e7fb      	b.n	11854 <RADIO_DIO0+0x2c>
   1185c:	4b0c      	ldr	r3, [pc, #48]	; (11890 <RADIO_DIO0+0x68>)
   1185e:	e7fb      	b.n	11858 <RADIO_DIO0+0x30>
   11860:	2800      	cmp	r0, #0
   11862:	d10a      	bne.n	1187a <RADIO_DIO0+0x52>
   11864:	2207      	movs	r2, #7
   11866:	4013      	ands	r3, r2
   11868:	7023      	strb	r3, [r4, #0]
   1186a:	2b03      	cmp	r3, #3
   1186c:	d101      	bne.n	11872 <RADIO_DIO0+0x4a>
   1186e:	4b09      	ldr	r3, [pc, #36]	; (11894 <RADIO_DIO0+0x6c>)
   11870:	e7f2      	b.n	11858 <RADIO_DIO0+0x30>
   11872:	2b05      	cmp	r3, #5
   11874:	d102      	bne.n	1187c <RADIO_DIO0+0x54>
   11876:	4b08      	ldr	r3, [pc, #32]	; (11898 <RADIO_DIO0+0x70>)
   11878:	e7ee      	b.n	11858 <RADIO_DIO0+0x30>
   1187a:	2000      	movs	r0, #0
   1187c:	4b07      	ldr	r3, [pc, #28]	; (1189c <RADIO_DIO0+0x74>)
   1187e:	4798      	blx	r3
   11880:	e7e8      	b.n	11854 <RADIO_DIO0+0x2c>
   11882:	46c0      	nop			; (mov r8, r8)
   11884:	000117d1 	.word	0x000117d1
   11888:	000117f5 	.word	0x000117f5
   1188c:	00011f9d 	.word	0x00011f9d
   11890:	00011ea1 	.word	0x00011ea1
   11894:	00011f1d 	.word	0x00011f1d
   11898:	00012019 	.word	0x00012019
   1189c:	00011805 	.word	0x00011805

000118a0 <RADIO_DIO1>:
   118a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   118a2:	466b      	mov	r3, sp
   118a4:	1ddc      	adds	r4, r3, #7
   118a6:	1d9d      	adds	r5, r3, #6
   118a8:	2230      	movs	r2, #48	; 0x30
   118aa:	2304      	movs	r3, #4
   118ac:	0021      	movs	r1, r4
   118ae:	0028      	movs	r0, r5
   118b0:	4e11      	ldr	r6, [pc, #68]	; (118f8 <RADIO_DIO1+0x58>)
   118b2:	47b0      	blx	r6
   118b4:	7822      	ldrb	r2, [r4, #0]
   118b6:	782b      	ldrb	r3, [r5, #0]
   118b8:	b251      	sxtb	r1, r2
   118ba:	2900      	cmp	r1, #0
   118bc:	da0c      	bge.n	118d8 <RADIO_DIO1+0x38>
   118be:	b2db      	uxtb	r3, r3
   118c0:	2b00      	cmp	r3, #0
   118c2:	d004      	beq.n	118ce <RADIO_DIO1+0x2e>
   118c4:	2b01      	cmp	r3, #1
   118c6:	d005      	beq.n	118d4 <RADIO_DIO1+0x34>
   118c8:	4b0c      	ldr	r3, [pc, #48]	; (118fc <RADIO_DIO1+0x5c>)
   118ca:	4798      	blx	r3
   118cc:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   118ce:	4b0c      	ldr	r3, [pc, #48]	; (11900 <RADIO_DIO1+0x60>)
   118d0:	4798      	blx	r3
   118d2:	e7fb      	b.n	118cc <RADIO_DIO1+0x2c>
   118d4:	4b0b      	ldr	r3, [pc, #44]	; (11904 <RADIO_DIO1+0x64>)
   118d6:	e7fb      	b.n	118d0 <RADIO_DIO1+0x30>
   118d8:	2107      	movs	r1, #7
   118da:	b2db      	uxtb	r3, r3
   118dc:	400a      	ands	r2, r1
   118de:	7022      	strb	r2, [r4, #0]
   118e0:	2b00      	cmp	r3, #0
   118e2:	d005      	beq.n	118f0 <RADIO_DIO1+0x50>
   118e4:	2b01      	cmp	r3, #1
   118e6:	d1f1      	bne.n	118cc <RADIO_DIO1+0x2c>
   118e8:	2a03      	cmp	r2, #3
   118ea:	d1ef      	bne.n	118cc <RADIO_DIO1+0x2c>
   118ec:	4b06      	ldr	r3, [pc, #24]	; (11908 <RADIO_DIO1+0x68>)
   118ee:	e7ef      	b.n	118d0 <RADIO_DIO1+0x30>
   118f0:	4b06      	ldr	r3, [pc, #24]	; (1190c <RADIO_DIO1+0x6c>)
   118f2:	2a05      	cmp	r2, #5
   118f4:	d1ea      	bne.n	118cc <RADIO_DIO1+0x2c>
   118f6:	e7eb      	b.n	118d0 <RADIO_DIO1+0x30>
   118f8:	000117d1 	.word	0x000117d1
   118fc:	000117f5 	.word	0x000117f5
   11900:	00011e25 	.word	0x00011e25
   11904:	0000c671 	.word	0x0000c671
   11908:	00011c4d 	.word	0x00011c4d
   1190c:	00011bb1 	.word	0x00011bb1

00011910 <RADIO_DIO2>:
   11910:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11912:	466b      	mov	r3, sp
   11914:	1ddc      	adds	r4, r3, #7
   11916:	1d9d      	adds	r5, r3, #6
   11918:	220c      	movs	r2, #12
   1191a:	2302      	movs	r3, #2
   1191c:	0021      	movs	r1, r4
   1191e:	0028      	movs	r0, r5
   11920:	4e0b      	ldr	r6, [pc, #44]	; (11950 <RADIO_DIO2+0x40>)
   11922:	47b0      	blx	r6
   11924:	7823      	ldrb	r3, [r4, #0]
   11926:	782a      	ldrb	r2, [r5, #0]
   11928:	b259      	sxtb	r1, r3
   1192a:	2900      	cmp	r1, #0
   1192c:	da05      	bge.n	1193a <RADIO_DIO2+0x2a>
   1192e:	4b09      	ldr	r3, [pc, #36]	; (11954 <RADIO_DIO2+0x44>)
   11930:	2a02      	cmp	r2, #2
   11932:	d90a      	bls.n	1194a <RADIO_DIO2+0x3a>
   11934:	4b08      	ldr	r3, [pc, #32]	; (11958 <RADIO_DIO2+0x48>)
   11936:	4798      	blx	r3
   11938:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
   1193a:	2107      	movs	r1, #7
   1193c:	400b      	ands	r3, r1
   1193e:	7023      	strb	r3, [r4, #0]
   11940:	2a03      	cmp	r2, #3
   11942:	d1f9      	bne.n	11938 <RADIO_DIO2+0x28>
   11944:	2b05      	cmp	r3, #5
   11946:	d1f7      	bne.n	11938 <RADIO_DIO2+0x28>
   11948:	4b04      	ldr	r3, [pc, #16]	; (1195c <RADIO_DIO2+0x4c>)
   1194a:	4798      	blx	r3
   1194c:	e7f4      	b.n	11938 <RADIO_DIO2+0x28>
   1194e:	46c0      	nop			; (mov r8, r8)
   11950:	000117d1 	.word	0x000117d1
   11954:	0000c671 	.word	0x0000c671
   11958:	000117f5 	.word	0x000117f5
   1195c:	00011b81 	.word	0x00011b81

00011960 <RADIO_DIO3>:
   11960:	b537      	push	{r0, r1, r2, r4, r5, lr}
   11962:	466b      	mov	r3, sp
   11964:	4668      	mov	r0, sp
   11966:	1ddc      	adds	r4, r3, #7
   11968:	2203      	movs	r2, #3
   1196a:	2300      	movs	r3, #0
   1196c:	0021      	movs	r1, r4
   1196e:	3006      	adds	r0, #6
   11970:	4d03      	ldr	r5, [pc, #12]	; (11980 <RADIO_DIO3+0x20>)
   11972:	47a8      	blx	r5
   11974:	7823      	ldrb	r3, [r4, #0]
   11976:	2b7f      	cmp	r3, #127	; 0x7f
   11978:	d901      	bls.n	1197e <RADIO_DIO3+0x1e>
   1197a:	4b02      	ldr	r3, [pc, #8]	; (11984 <RADIO_DIO3+0x24>)
   1197c:	4798      	blx	r3
   1197e:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   11980:	000117d1 	.word	0x000117d1
   11984:	000117f5 	.word	0x000117f5

00011988 <RADIO_DIO4>:
   11988:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1198a:	466b      	mov	r3, sp
   1198c:	4668      	mov	r0, sp
   1198e:	1ddc      	adds	r4, r3, #7
   11990:	2306      	movs	r3, #6
   11992:	22c0      	movs	r2, #192	; 0xc0
   11994:	18c0      	adds	r0, r0, r3
   11996:	0021      	movs	r1, r4
   11998:	4d03      	ldr	r5, [pc, #12]	; (119a8 <RADIO_DIO4+0x20>)
   1199a:	47a8      	blx	r5
   1199c:	7823      	ldrb	r3, [r4, #0]
   1199e:	2b7f      	cmp	r3, #127	; 0x7f
   119a0:	d901      	bls.n	119a6 <RADIO_DIO4+0x1e>
   119a2:	4b02      	ldr	r3, [pc, #8]	; (119ac <RADIO_DIO4+0x24>)
   119a4:	4798      	blx	r3
   119a6:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   119a8:	000117d1 	.word	0x000117d1
   119ac:	000117f5 	.word	0x000117f5

000119b0 <RADIO_DIO5>:
   119b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   119b2:	466b      	mov	r3, sp
   119b4:	4668      	mov	r0, sp
   119b6:	1ddc      	adds	r4, r3, #7
   119b8:	2230      	movs	r2, #48	; 0x30
   119ba:	2304      	movs	r3, #4
   119bc:	0021      	movs	r1, r4
   119be:	3006      	adds	r0, #6
   119c0:	4d03      	ldr	r5, [pc, #12]	; (119d0 <RADIO_DIO5+0x20>)
   119c2:	47a8      	blx	r5
   119c4:	7823      	ldrb	r3, [r4, #0]
   119c6:	2b7f      	cmp	r3, #127	; 0x7f
   119c8:	d901      	bls.n	119ce <RADIO_DIO5+0x1e>
   119ca:	4b02      	ldr	r3, [pc, #8]	; (119d4 <RADIO_DIO5+0x24>)
   119cc:	4798      	blx	r3
   119ce:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
   119d0:	000117d1 	.word	0x000117d1
   119d4:	000117f5 	.word	0x000117f5

000119d8 <radioPostTask>:
   119d8:	b510      	push	{r4, lr}
   119da:	0004      	movs	r4, r0
   119dc:	4b05      	ldr	r3, [pc, #20]	; (119f4 <radioPostTask+0x1c>)
   119de:	4798      	blx	r3
   119e0:	4b05      	ldr	r3, [pc, #20]	; (119f8 <radioPostTask+0x20>)
   119e2:	8818      	ldrh	r0, [r3, #0]
   119e4:	4320      	orrs	r0, r4
   119e6:	8018      	strh	r0, [r3, #0]
   119e8:	4b04      	ldr	r3, [pc, #16]	; (119fc <radioPostTask+0x24>)
   119ea:	4798      	blx	r3
   119ec:	2002      	movs	r0, #2
   119ee:	4b04      	ldr	r3, [pc, #16]	; (11a00 <radioPostTask+0x28>)
   119f0:	4798      	blx	r3
   119f2:	bd10      	pop	{r4, pc}
   119f4:	00005615 	.word	0x00005615
   119f8:	20000fec 	.word	0x20000fec
   119fc:	00005621 	.word	0x00005621
   11a00:	0000c555 	.word	0x0000c555

00011a04 <radioClearTask>:
   11a04:	b510      	push	{r4, lr}
   11a06:	0004      	movs	r4, r0
   11a08:	4b04      	ldr	r3, [pc, #16]	; (11a1c <radioClearTask+0x18>)
   11a0a:	4798      	blx	r3
   11a0c:	4a04      	ldr	r2, [pc, #16]	; (11a20 <radioClearTask+0x1c>)
   11a0e:	8813      	ldrh	r3, [r2, #0]
   11a10:	43a3      	bics	r3, r4
   11a12:	8013      	strh	r3, [r2, #0]
   11a14:	4b03      	ldr	r3, [pc, #12]	; (11a24 <radioClearTask+0x20>)
   11a16:	4798      	blx	r3
   11a18:	bd10      	pop	{r4, pc}
   11a1a:	46c0      	nop			; (mov r8, r8)
   11a1c:	00005615 	.word	0x00005615
   11a20:	20000fec 	.word	0x20000fec
   11a24:	00005621 	.word	0x00005621

00011a28 <RADIO_TaskHandler>:
   11a28:	b570      	push	{r4, r5, r6, lr}
   11a2a:	2400      	movs	r4, #0
   11a2c:	4d10      	ldr	r5, [pc, #64]	; (11a70 <RADIO_TaskHandler+0x48>)
   11a2e:	2601      	movs	r6, #1
   11a30:	882b      	ldrh	r3, [r5, #0]
   11a32:	42a3      	cmp	r3, r4
   11a34:	d015      	beq.n	11a62 <RADIO_TaskHandler+0x3a>
   11a36:	882b      	ldrh	r3, [r5, #0]
   11a38:	4123      	asrs	r3, r4
   11a3a:	4233      	tst	r3, r6
   11a3c:	d013      	beq.n	11a66 <RADIO_TaskHandler+0x3e>
   11a3e:	40a6      	lsls	r6, r4
   11a40:	4b0c      	ldr	r3, [pc, #48]	; (11a74 <RADIO_TaskHandler+0x4c>)
   11a42:	4798      	blx	r3
   11a44:	882b      	ldrh	r3, [r5, #0]
   11a46:	00a4      	lsls	r4, r4, #2
   11a48:	43b3      	bics	r3, r6
   11a4a:	802b      	strh	r3, [r5, #0]
   11a4c:	4b0a      	ldr	r3, [pc, #40]	; (11a78 <RADIO_TaskHandler+0x50>)
   11a4e:	4798      	blx	r3
   11a50:	4b0a      	ldr	r3, [pc, #40]	; (11a7c <RADIO_TaskHandler+0x54>)
   11a52:	58e3      	ldr	r3, [r4, r3]
   11a54:	4798      	blx	r3
   11a56:	882b      	ldrh	r3, [r5, #0]
   11a58:	2b00      	cmp	r3, #0
   11a5a:	d002      	beq.n	11a62 <RADIO_TaskHandler+0x3a>
   11a5c:	2002      	movs	r0, #2
   11a5e:	4b08      	ldr	r3, [pc, #32]	; (11a80 <RADIO_TaskHandler+0x58>)
   11a60:	4798      	blx	r3
   11a62:	2000      	movs	r0, #0
   11a64:	bd70      	pop	{r4, r5, r6, pc}
   11a66:	3401      	adds	r4, #1
   11a68:	2c05      	cmp	r4, #5
   11a6a:	d1e4      	bne.n	11a36 <RADIO_TaskHandler+0xe>
   11a6c:	e7f9      	b.n	11a62 <RADIO_TaskHandler+0x3a>
   11a6e:	46c0      	nop			; (mov r8, r8)
   11a70:	20000fec 	.word	0x20000fec
   11a74:	00005615 	.word	0x00005615
   11a78:	00005621 	.word	0x00005621
   11a7c:	0001dd88 	.word	0x0001dd88
   11a80:	0000c555 	.word	0x0000c555

00011a84 <RadioSetState>:
   11a84:	4b01      	ldr	r3, [pc, #4]	; (11a8c <RadioSetState+0x8>)
   11a86:	7018      	strb	r0, [r3, #0]
   11a88:	4770      	bx	lr
   11a8a:	46c0      	nop			; (mov r8, r8)
   11a8c:	200027d3 	.word	0x200027d3

00011a90 <RADIO_GetState>:
   11a90:	4b01      	ldr	r3, [pc, #4]	; (11a98 <RADIO_GetState+0x8>)
   11a92:	7818      	ldrb	r0, [r3, #0]
   11a94:	b2c0      	uxtb	r0, r0
   11a96:	4770      	bx	lr
   11a98:	200027d3 	.word	0x200027d3

00011a9c <RADIO_SetCallbackBitmask>:
   11a9c:	4a02      	ldr	r2, [pc, #8]	; (11aa8 <RADIO_SetCallbackBitmask+0xc>)
   11a9e:	7813      	ldrb	r3, [r2, #0]
   11aa0:	4318      	orrs	r0, r3
   11aa2:	7010      	strb	r0, [r2, #0]
   11aa4:	4770      	bx	lr
   11aa6:	46c0      	nop			; (mov r8, r8)
   11aa8:	200027d2 	.word	0x200027d2

00011aac <RADIO_Transmit>:
   11aac:	b570      	push	{r4, r5, r6, lr}
   11aae:	4d0c      	ldr	r5, [pc, #48]	; (11ae0 <RADIO_Transmit+0x34>)
   11ab0:	0006      	movs	r6, r0
   11ab2:	782b      	ldrb	r3, [r5, #0]
   11ab4:	2404      	movs	r4, #4
   11ab6:	2b01      	cmp	r3, #1
   11ab8:	d110      	bne.n	11adc <RADIO_Transmit+0x30>
   11aba:	4b0a      	ldr	r3, [pc, #40]	; (11ae4 <RADIO_Transmit+0x38>)
   11abc:	332f      	adds	r3, #47	; 0x2f
   11abe:	7818      	ldrb	r0, [r3, #0]
   11ac0:	4b09      	ldr	r3, [pc, #36]	; (11ae8 <RADIO_Transmit+0x3c>)
   11ac2:	4798      	blx	r3
   11ac4:	7832      	ldrb	r2, [r6, #0]
   11ac6:	4b09      	ldr	r3, [pc, #36]	; (11aec <RADIO_Transmit+0x40>)
   11ac8:	0020      	movs	r0, r4
   11aca:	701a      	strb	r2, [r3, #0]
   11acc:	4b08      	ldr	r3, [pc, #32]	; (11af0 <RADIO_Transmit+0x44>)
   11ace:	6872      	ldr	r2, [r6, #4]
   11ad0:	2400      	movs	r4, #0
   11ad2:	601a      	str	r2, [r3, #0]
   11ad4:	2302      	movs	r3, #2
   11ad6:	702b      	strb	r3, [r5, #0]
   11ad8:	4b06      	ldr	r3, [pc, #24]	; (11af4 <RADIO_Transmit+0x48>)
   11ada:	4798      	blx	r3
   11adc:	0020      	movs	r0, r4
   11ade:	bd70      	pop	{r4, r5, r6, pc}
   11ae0:	200027d3 	.word	0x200027d3
   11ae4:	20002214 	.word	0x20002214
   11ae8:	0000c235 	.word	0x0000c235
   11aec:	2000100c 	.word	0x2000100c
   11af0:	20001008 	.word	0x20001008
   11af4:	000119d9 	.word	0x000119d9

00011af8 <Radio_FSKTxPayloadHandler>:
   11af8:	b570      	push	{r4, r5, r6, lr}
   11afa:	4b1c      	ldr	r3, [pc, #112]	; (11b6c <Radio_FSKTxPayloadHandler+0x74>)
   11afc:	000d      	movs	r5, r1
   11afe:	4798      	blx	r3
   11b00:	4c1b      	ldr	r4, [pc, #108]	; (11b70 <Radio_FSKTxPayloadHandler+0x78>)
   11b02:	3457      	adds	r4, #87	; 0x57
   11b04:	7820      	ldrb	r0, [r4, #0]
   11b06:	b2c0      	uxtb	r0, r0
   11b08:	2800      	cmp	r0, #0
   11b0a:	d112      	bne.n	11b32 <Radio_FSKTxPayloadHandler+0x3a>
   11b0c:	2d00      	cmp	r5, #0
   11b0e:	d007      	beq.n	11b20 <Radio_FSKTxPayloadHandler+0x28>
   11b10:	4918      	ldr	r1, [pc, #96]	; (11b74 <Radio_FSKTxPayloadHandler+0x7c>)
   11b12:	4b19      	ldr	r3, [pc, #100]	; (11b78 <Radio_FSKTxPayloadHandler+0x80>)
   11b14:	2d13      	cmp	r5, #19
   11b16:	d806      	bhi.n	11b26 <Radio_FSKTxPayloadHandler+0x2e>
   11b18:	002a      	movs	r2, r5
   11b1a:	6809      	ldr	r1, [r1, #0]
   11b1c:	4798      	blx	r3
   11b1e:	7025      	strb	r5, [r4, #0]
   11b20:	4b16      	ldr	r3, [pc, #88]	; (11b7c <Radio_FSKTxPayloadHandler+0x84>)
   11b22:	4798      	blx	r3
   11b24:	bd70      	pop	{r4, r5, r6, pc}
   11b26:	2214      	movs	r2, #20
   11b28:	6809      	ldr	r1, [r1, #0]
   11b2a:	4798      	blx	r3
   11b2c:	2314      	movs	r3, #20
   11b2e:	7023      	strb	r3, [r4, #0]
   11b30:	e7f6      	b.n	11b20 <Radio_FSKTxPayloadHandler+0x28>
   11b32:	7823      	ldrb	r3, [r4, #0]
   11b34:	429d      	cmp	r5, r3
   11b36:	d0f3      	beq.n	11b20 <Radio_FSKTxPayloadHandler+0x28>
   11b38:	7822      	ldrb	r2, [r4, #0]
   11b3a:	480e      	ldr	r0, [pc, #56]	; (11b74 <Radio_FSKTxPayloadHandler+0x7c>)
   11b3c:	1aaa      	subs	r2, r5, r2
   11b3e:	b2d2      	uxtb	r2, r2
   11b40:	4b0d      	ldr	r3, [pc, #52]	; (11b78 <Radio_FSKTxPayloadHandler+0x80>)
   11b42:	2a14      	cmp	r2, #20
   11b44:	d807      	bhi.n	11b56 <Radio_FSKTxPayloadHandler+0x5e>
   11b46:	7826      	ldrb	r6, [r4, #0]
   11b48:	7822      	ldrb	r2, [r4, #0]
   11b4a:	6801      	ldr	r1, [r0, #0]
   11b4c:	1aaa      	subs	r2, r5, r2
   11b4e:	b2d2      	uxtb	r2, r2
   11b50:	1989      	adds	r1, r1, r6
   11b52:	2000      	movs	r0, #0
   11b54:	e7e2      	b.n	11b1c <Radio_FSKTxPayloadHandler+0x24>
   11b56:	7822      	ldrb	r2, [r4, #0]
   11b58:	6801      	ldr	r1, [r0, #0]
   11b5a:	2000      	movs	r0, #0
   11b5c:	1889      	adds	r1, r1, r2
   11b5e:	2214      	movs	r2, #20
   11b60:	4798      	blx	r3
   11b62:	7823      	ldrb	r3, [r4, #0]
   11b64:	3314      	adds	r3, #20
   11b66:	b2db      	uxtb	r3, r3
   11b68:	e7e1      	b.n	11b2e <Radio_FSKTxPayloadHandler+0x36>
   11b6a:	46c0      	nop			; (mov r8, r8)
   11b6c:	000001ad 	.word	0x000001ad
   11b70:	20002214 	.word	0x20002214
   11b74:	20001008 	.word	0x20001008
   11b78:	00005401 	.word	0x00005401
   11b7c:	000001ed 	.word	0x000001ed

00011b80 <RADIO_FSKSyncAddr>:
   11b80:	4b08      	ldr	r3, [pc, #32]	; (11ba4 <RADIO_FSKSyncAddr+0x24>)
   11b82:	b510      	push	{r4, lr}
   11b84:	4798      	blx	r3
   11b86:	4b08      	ldr	r3, [pc, #32]	; (11ba8 <RADIO_FSKSyncAddr+0x28>)
   11b88:	001a      	movs	r2, r3
   11b8a:	3234      	adds	r2, #52	; 0x34
   11b8c:	7812      	ldrb	r2, [r2, #0]
   11b8e:	2a00      	cmp	r2, #0
   11b90:	d104      	bne.n	11b9c <RADIO_FSKSyncAddr+0x1c>
   11b92:	0019      	movs	r1, r3
   11b94:	3357      	adds	r3, #87	; 0x57
   11b96:	312c      	adds	r1, #44	; 0x2c
   11b98:	700a      	strb	r2, [r1, #0]
   11b9a:	701a      	strb	r2, [r3, #0]
   11b9c:	4b03      	ldr	r3, [pc, #12]	; (11bac <RADIO_FSKSyncAddr+0x2c>)
   11b9e:	4798      	blx	r3
   11ba0:	bd10      	pop	{r4, pc}
   11ba2:	46c0      	nop			; (mov r8, r8)
   11ba4:	000001ad 	.word	0x000001ad
   11ba8:	20002214 	.word	0x20002214
   11bac:	000001ed 	.word	0x000001ed

00011bb0 <RADIO_FSKFifoLevel>:
   11bb0:	b570      	push	{r4, r5, r6, lr}
   11bb2:	4b22      	ldr	r3, [pc, #136]	; (11c3c <RADIO_FSKFifoLevel+0x8c>)
   11bb4:	4798      	blx	r3
   11bb6:	4d22      	ldr	r5, [pc, #136]	; (11c40 <RADIO_FSKFifoLevel+0x90>)
   11bb8:	002a      	movs	r2, r5
   11bba:	002b      	movs	r3, r5
   11bbc:	322c      	adds	r2, #44	; 0x2c
   11bbe:	3357      	adds	r3, #87	; 0x57
   11bc0:	7810      	ldrb	r0, [r2, #0]
   11bc2:	7819      	ldrb	r1, [r3, #0]
   11bc4:	4288      	cmp	r0, r1
   11bc6:	d105      	bne.n	11bd4 <RADIO_FSKFifoLevel+0x24>
   11bc8:	7812      	ldrb	r2, [r2, #0]
   11bca:	2a00      	cmp	r2, #0
   11bcc:	d002      	beq.n	11bd4 <RADIO_FSKFifoLevel+0x24>
   11bce:	781b      	ldrb	r3, [r3, #0]
   11bd0:	2b00      	cmp	r3, #0
   11bd2:	d11f      	bne.n	11c14 <RADIO_FSKFifoLevel+0x64>
   11bd4:	0029      	movs	r1, r5
   11bd6:	312c      	adds	r1, #44	; 0x2c
   11bd8:	7808      	ldrb	r0, [r1, #0]
   11bda:	b2c0      	uxtb	r0, r0
   11bdc:	2800      	cmp	r0, #0
   11bde:	d102      	bne.n	11be6 <RADIO_FSKFifoLevel+0x36>
   11be0:	2201      	movs	r2, #1
   11be2:	4b18      	ldr	r3, [pc, #96]	; (11c44 <RADIO_FSKFifoLevel+0x94>)
   11be4:	4798      	blx	r3
   11be6:	002e      	movs	r6, r5
   11be8:	002c      	movs	r4, r5
   11bea:	362c      	adds	r6, #44	; 0x2c
   11bec:	3457      	adds	r4, #87	; 0x57
   11bee:	7833      	ldrb	r3, [r6, #0]
   11bf0:	7822      	ldrb	r2, [r4, #0]
   11bf2:	1a9b      	subs	r3, r3, r2
   11bf4:	b2db      	uxtb	r3, r3
   11bf6:	2b1f      	cmp	r3, #31
   11bf8:	d80f      	bhi.n	11c1a <RADIO_FSKFifoLevel+0x6a>
   11bfa:	7823      	ldrb	r3, [r4, #0]
   11bfc:	7832      	ldrb	r2, [r6, #0]
   11bfe:	7821      	ldrb	r1, [r4, #0]
   11c00:	2000      	movs	r0, #0
   11c02:	1a52      	subs	r2, r2, r1
   11c04:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   11c06:	b2d2      	uxtb	r2, r2
   11c08:	18c9      	adds	r1, r1, r3
   11c0a:	4b0e      	ldr	r3, [pc, #56]	; (11c44 <RADIO_FSKFifoLevel+0x94>)
   11c0c:	4798      	blx	r3
   11c0e:	7833      	ldrb	r3, [r6, #0]
   11c10:	b2db      	uxtb	r3, r3
   11c12:	7023      	strb	r3, [r4, #0]
   11c14:	4b0c      	ldr	r3, [pc, #48]	; (11c48 <RADIO_FSKFifoLevel+0x98>)
   11c16:	4798      	blx	r3
   11c18:	bd70      	pop	{r4, r5, r6, pc}
   11c1a:	7833      	ldrb	r3, [r6, #0]
   11c1c:	7822      	ldrb	r2, [r4, #0]
   11c1e:	1a9b      	subs	r3, r3, r2
   11c20:	b2db      	uxtb	r3, r3
   11c22:	2b20      	cmp	r3, #32
   11c24:	d9f6      	bls.n	11c14 <RADIO_FSKFifoLevel+0x64>
   11c26:	7823      	ldrb	r3, [r4, #0]
   11c28:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   11c2a:	2220      	movs	r2, #32
   11c2c:	18c9      	adds	r1, r1, r3
   11c2e:	2000      	movs	r0, #0
   11c30:	4b04      	ldr	r3, [pc, #16]	; (11c44 <RADIO_FSKFifoLevel+0x94>)
   11c32:	4798      	blx	r3
   11c34:	7823      	ldrb	r3, [r4, #0]
   11c36:	3320      	adds	r3, #32
   11c38:	e7ea      	b.n	11c10 <RADIO_FSKFifoLevel+0x60>
   11c3a:	46c0      	nop			; (mov r8, r8)
   11c3c:	000001ad 	.word	0x000001ad
   11c40:	20002214 	.word	0x20002214
   11c44:	00005441 	.word	0x00005441
   11c48:	000001ed 	.word	0x000001ed

00011c4c <RADIO_FSKFifoEmpty>:
   11c4c:	b510      	push	{r4, lr}
   11c4e:	4b03      	ldr	r3, [pc, #12]	; (11c5c <RADIO_FSKFifoEmpty+0x10>)
   11c50:	7819      	ldrb	r1, [r3, #0]
   11c52:	4b03      	ldr	r3, [pc, #12]	; (11c60 <RADIO_FSKFifoEmpty+0x14>)
   11c54:	6818      	ldr	r0, [r3, #0]
   11c56:	4b03      	ldr	r3, [pc, #12]	; (11c64 <RADIO_FSKFifoEmpty+0x18>)
   11c58:	4798      	blx	r3
   11c5a:	bd10      	pop	{r4, pc}
   11c5c:	2000100c 	.word	0x2000100c
   11c60:	20001008 	.word	0x20001008
   11c64:	00011af9 	.word	0x00011af9

00011c68 <RADIO_GetData>:
   11c68:	4b03      	ldr	r3, [pc, #12]	; (11c78 <RADIO_GetData+0x10>)
   11c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   11c6c:	332c      	adds	r3, #44	; 0x2c
   11c6e:	6002      	str	r2, [r0, #0]
   11c70:	781b      	ldrb	r3, [r3, #0]
   11c72:	2000      	movs	r0, #0
   11c74:	800b      	strh	r3, [r1, #0]
   11c76:	4770      	bx	lr
   11c78:	20002214 	.word	0x20002214

00011c7c <Radio_EnableRfControl>:
   11c7c:	b510      	push	{r4, lr}
   11c7e:	4b08      	ldr	r3, [pc, #32]	; (11ca0 <Radio_EnableRfControl+0x24>)
   11c80:	0001      	movs	r1, r0
   11c82:	681a      	ldr	r2, [r3, #0]
   11c84:	4807      	ldr	r0, [pc, #28]	; (11ca4 <Radio_EnableRfControl+0x28>)
   11c86:	4c08      	ldr	r4, [pc, #32]	; (11ca8 <Radio_EnableRfControl+0x2c>)
   11c88:	1812      	adds	r2, r2, r0
   11c8a:	2000      	movs	r0, #0
   11c8c:	42a2      	cmp	r2, r4
   11c8e:	d804      	bhi.n	11c9a <Radio_EnableRfControl+0x1e>
   11c90:	3305      	adds	r3, #5
   11c92:	7fdb      	ldrb	r3, [r3, #31]
   11c94:	1e58      	subs	r0, r3, #1
   11c96:	4183      	sbcs	r3, r0
   11c98:	1c58      	adds	r0, r3, #1
   11c9a:	4b04      	ldr	r3, [pc, #16]	; (11cac <Radio_EnableRfControl+0x30>)
   11c9c:	4798      	blx	r3
   11c9e:	bd10      	pop	{r4, pc}
   11ca0:	20002214 	.word	0x20002214
   11ca4:	cc9eec80 	.word	0xcc9eec80
   11ca8:	096ae380 	.word	0x096ae380
   11cac:	000054ad 	.word	0x000054ad

00011cb0 <RADIO_RxHandler>:
   11cb0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11cb2:	4b33      	ldr	r3, [pc, #204]	; (11d80 <RADIO_RxHandler+0xd0>)
   11cb4:	2000      	movs	r0, #0
   11cb6:	4798      	blx	r3
   11cb8:	4e32      	ldr	r6, [pc, #200]	; (11d84 <RADIO_RxHandler+0xd4>)
   11cba:	4b33      	ldr	r3, [pc, #204]	; (11d88 <RADIO_RxHandler+0xd8>)
   11cbc:	8830      	ldrh	r0, [r6, #0]
   11cbe:	2800      	cmp	r0, #0
   11cc0:	d100      	bne.n	11cc4 <RADIO_RxHandler+0x14>
   11cc2:	3004      	adds	r0, #4
   11cc4:	4798      	blx	r3
   11cc6:	4c31      	ldr	r4, [pc, #196]	; (11d8c <RADIO_RxHandler+0xdc>)
   11cc8:	4d31      	ldr	r5, [pc, #196]	; (11d90 <RADIO_RxHandler+0xe0>)
   11cca:	0023      	movs	r3, r4
   11ccc:	3334      	adds	r3, #52	; 0x34
   11cce:	7819      	ldrb	r1, [r3, #0]
   11cd0:	2901      	cmp	r1, #1
   11cd2:	d122      	bne.n	11d1a <RADIO_RxHandler+0x6a>
   11cd4:	2022      	movs	r0, #34	; 0x22
   11cd6:	47a8      	blx	r5
   11cd8:	2100      	movs	r1, #0
   11cda:	2040      	movs	r0, #64	; 0x40
   11cdc:	47a8      	blx	r5
   11cde:	2100      	movs	r1, #0
   11ce0:	2041      	movs	r0, #65	; 0x41
   11ce2:	47a8      	blx	r5
   11ce4:	8832      	ldrh	r2, [r6, #0]
   11ce6:	4b2b      	ldr	r3, [pc, #172]	; (11d94 <RADIO_RxHandler+0xe4>)
   11ce8:	2a00      	cmp	r2, #0
   11cea:	d131      	bne.n	11d50 <RADIO_RxHandler+0xa0>
   11cec:	0021      	movs	r1, r4
   11cee:	2005      	movs	r0, #5
   11cf0:	3134      	adds	r1, #52	; 0x34
   11cf2:	7809      	ldrb	r1, [r1, #0]
   11cf4:	4798      	blx	r3
   11cf6:	68e3      	ldr	r3, [r4, #12]
   11cf8:	2b00      	cmp	r3, #0
   11cfa:	d00c      	beq.n	11d16 <RADIO_RxHandler+0x66>
   11cfc:	8832      	ldrh	r2, [r6, #0]
   11cfe:	2a00      	cmp	r2, #0
   11d00:	d009      	beq.n	11d16 <RADIO_RxHandler+0x66>
   11d02:	21fa      	movs	r1, #250	; 0xfa
   11d04:	2200      	movs	r2, #0
   11d06:	342f      	adds	r4, #47	; 0x2f
   11d08:	0089      	lsls	r1, r1, #2
   11d0a:	7820      	ldrb	r0, [r4, #0]
   11d0c:	4359      	muls	r1, r3
   11d0e:	9200      	str	r2, [sp, #0]
   11d10:	4b21      	ldr	r3, [pc, #132]	; (11d98 <RADIO_RxHandler+0xe8>)
   11d12:	4c22      	ldr	r4, [pc, #136]	; (11d9c <RADIO_RxHandler+0xec>)
   11d14:	47a0      	blx	r4
   11d16:	2000      	movs	r0, #0
   11d18:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   11d1a:	0023      	movs	r3, r4
   11d1c:	3338      	adds	r3, #56	; 0x38
   11d1e:	7819      	ldrb	r1, [r3, #0]
   11d20:	2012      	movs	r0, #18
   11d22:	47a8      	blx	r5
   11d24:	0023      	movs	r3, r4
   11d26:	3339      	adds	r3, #57	; 0x39
   11d28:	7819      	ldrb	r1, [r3, #0]
   11d2a:	2013      	movs	r0, #19
   11d2c:	47a8      	blx	r5
   11d2e:	210c      	movs	r1, #12
   11d30:	2040      	movs	r0, #64	; 0x40
   11d32:	47a8      	blx	r5
   11d34:	2100      	movs	r1, #0
   11d36:	2041      	movs	r0, #65	; 0x41
   11d38:	47a8      	blx	r5
   11d3a:	0022      	movs	r2, r4
   11d3c:	2300      	movs	r3, #0
   11d3e:	3256      	adds	r2, #86	; 0x56
   11d40:	7013      	strb	r3, [r2, #0]
   11d42:	0022      	movs	r2, r4
   11d44:	322c      	adds	r2, #44	; 0x2c
   11d46:	7013      	strb	r3, [r2, #0]
   11d48:	0022      	movs	r2, r4
   11d4a:	3257      	adds	r2, #87	; 0x57
   11d4c:	7013      	strb	r3, [r2, #0]
   11d4e:	e7c9      	b.n	11ce4 <RADIO_RxHandler+0x34>
   11d50:	0022      	movs	r2, r4
   11d52:	3234      	adds	r2, #52	; 0x34
   11d54:	7811      	ldrb	r1, [r2, #0]
   11d56:	2200      	movs	r2, #0
   11d58:	2901      	cmp	r1, #1
   11d5a:	d101      	bne.n	11d60 <RADIO_RxHandler+0xb0>
   11d5c:	2006      	movs	r0, #6
   11d5e:	e7c9      	b.n	11cf4 <RADIO_RxHandler+0x44>
   11d60:	0011      	movs	r1, r2
   11d62:	2005      	movs	r0, #5
   11d64:	4798      	blx	r3
   11d66:	21fa      	movs	r1, #250	; 0xfa
   11d68:	8833      	ldrh	r3, [r6, #0]
   11d6a:	0089      	lsls	r1, r1, #2
   11d6c:	4359      	muls	r1, r3
   11d6e:	0023      	movs	r3, r4
   11d70:	2200      	movs	r2, #0
   11d72:	332e      	adds	r3, #46	; 0x2e
   11d74:	7818      	ldrb	r0, [r3, #0]
   11d76:	4d09      	ldr	r5, [pc, #36]	; (11d9c <RADIO_RxHandler+0xec>)
   11d78:	9200      	str	r2, [sp, #0]
   11d7a:	4b09      	ldr	r3, [pc, #36]	; (11da0 <RADIO_RxHandler+0xf0>)
   11d7c:	47a8      	blx	r5
   11d7e:	e7ba      	b.n	11cf6 <RADIO_RxHandler+0x46>
   11d80:	00011c7d 	.word	0x00011c7d
   11d84:	20000ff8 	.word	0x20000ff8
   11d88:	00011419 	.word	0x00011419
   11d8c:	20002214 	.word	0x20002214
   11d90:	000053ad 	.word	0x000053ad
   11d94:	0000c58d 	.word	0x0000c58d
   11d98:	00011dd9 	.word	0x00011dd9
   11d9c:	0000bf29 	.word	0x0000bf29
   11da0:	00011e69 	.word	0x00011e69

00011da4 <Radio_DisableRfControl>:
   11da4:	b510      	push	{r4, lr}
   11da6:	4b08      	ldr	r3, [pc, #32]	; (11dc8 <Radio_DisableRfControl+0x24>)
   11da8:	0001      	movs	r1, r0
   11daa:	681a      	ldr	r2, [r3, #0]
   11dac:	4807      	ldr	r0, [pc, #28]	; (11dcc <Radio_DisableRfControl+0x28>)
   11dae:	4c08      	ldr	r4, [pc, #32]	; (11dd0 <Radio_DisableRfControl+0x2c>)
   11db0:	1812      	adds	r2, r2, r0
   11db2:	2000      	movs	r0, #0
   11db4:	42a2      	cmp	r2, r4
   11db6:	d804      	bhi.n	11dc2 <Radio_DisableRfControl+0x1e>
   11db8:	3305      	adds	r3, #5
   11dba:	7fdb      	ldrb	r3, [r3, #31]
   11dbc:	1e58      	subs	r0, r3, #1
   11dbe:	4183      	sbcs	r3, r0
   11dc0:	1c58      	adds	r0, r3, #1
   11dc2:	4b04      	ldr	r3, [pc, #16]	; (11dd4 <Radio_DisableRfControl+0x30>)
   11dc4:	4798      	blx	r3
   11dc6:	bd10      	pop	{r4, pc}
   11dc8:	20002214 	.word	0x20002214
   11dcc:	cc9eec80 	.word	0xcc9eec80
   11dd0:	096ae380 	.word	0x096ae380
   11dd4:	000054c5 	.word	0x000054c5

00011dd8 <Radio_WatchdogTimeout>:
   11dd8:	b510      	push	{r4, lr}
   11dda:	4b0e      	ldr	r3, [pc, #56]	; (11e14 <Radio_WatchdogTimeout+0x3c>)
   11ddc:	781a      	ldrb	r2, [r3, #0]
   11dde:	2a04      	cmp	r2, #4
   11de0:	d10b      	bne.n	11dfa <Radio_WatchdogTimeout+0x22>
   11de2:	2320      	movs	r3, #32
   11de4:	4a0c      	ldr	r2, [pc, #48]	; (11e18 <Radio_WatchdogTimeout+0x40>)
   11de6:	2000      	movs	r0, #0
   11de8:	8811      	ldrh	r1, [r2, #0]
   11dea:	430b      	orrs	r3, r1
   11dec:	8013      	strh	r3, [r2, #0]
   11dee:	4b0b      	ldr	r3, [pc, #44]	; (11e1c <Radio_WatchdogTimeout+0x44>)
   11df0:	4798      	blx	r3
   11df2:	2002      	movs	r0, #2
   11df4:	4b0a      	ldr	r3, [pc, #40]	; (11e20 <Radio_WatchdogTimeout+0x48>)
   11df6:	4798      	blx	r3
   11df8:	bd10      	pop	{r4, pc}
   11dfa:	781b      	ldrb	r3, [r3, #0]
   11dfc:	2b02      	cmp	r3, #2
   11dfe:	d1fb      	bne.n	11df8 <Radio_WatchdogTimeout+0x20>
   11e00:	4a05      	ldr	r2, [pc, #20]	; (11e18 <Radio_WatchdogTimeout+0x40>)
   11e02:	330e      	adds	r3, #14
   11e04:	8811      	ldrh	r1, [r2, #0]
   11e06:	2001      	movs	r0, #1
   11e08:	430b      	orrs	r3, r1
   11e0a:	8013      	strh	r3, [r2, #0]
   11e0c:	4b03      	ldr	r3, [pc, #12]	; (11e1c <Radio_WatchdogTimeout+0x44>)
   11e0e:	4798      	blx	r3
   11e10:	2001      	movs	r0, #1
   11e12:	e7ef      	b.n	11df4 <Radio_WatchdogTimeout+0x1c>
   11e14:	200027d3 	.word	0x200027d3
   11e18:	200027d0 	.word	0x200027d0
   11e1c:	00011da5 	.word	0x00011da5
   11e20:	000119d9 	.word	0x000119d9

00011e24 <RADIO_RxTimeout>:
   11e24:	b510      	push	{r4, lr}
   11e26:	4b0a      	ldr	r3, [pc, #40]	; (11e50 <RADIO_RxTimeout+0x2c>)
   11e28:	332f      	adds	r3, #47	; 0x2f
   11e2a:	7818      	ldrb	r0, [r3, #0]
   11e2c:	4b09      	ldr	r3, [pc, #36]	; (11e54 <RADIO_RxTimeout+0x30>)
   11e2e:	4798      	blx	r3
   11e30:	2000      	movs	r0, #0
   11e32:	4b09      	ldr	r3, [pc, #36]	; (11e58 <RADIO_RxTimeout+0x34>)
   11e34:	4798      	blx	r3
   11e36:	2180      	movs	r1, #128	; 0x80
   11e38:	2012      	movs	r0, #18
   11e3a:	4b08      	ldr	r3, [pc, #32]	; (11e5c <RADIO_RxTimeout+0x38>)
   11e3c:	4798      	blx	r3
   11e3e:	2340      	movs	r3, #64	; 0x40
   11e40:	4a07      	ldr	r2, [pc, #28]	; (11e60 <RADIO_RxTimeout+0x3c>)
   11e42:	2002      	movs	r0, #2
   11e44:	8811      	ldrh	r1, [r2, #0]
   11e46:	430b      	orrs	r3, r1
   11e48:	8013      	strh	r3, [r2, #0]
   11e4a:	4b06      	ldr	r3, [pc, #24]	; (11e64 <RADIO_RxTimeout+0x40>)
   11e4c:	4798      	blx	r3
   11e4e:	bd10      	pop	{r4, pc}
   11e50:	20002214 	.word	0x20002214
   11e54:	0000c235 	.word	0x0000c235
   11e58:	00011da5 	.word	0x00011da5
   11e5c:	000053ad 	.word	0x000053ad
   11e60:	200027d0 	.word	0x200027d0
   11e64:	000119d9 	.word	0x000119d9

00011e68 <Radio_RxFSKTimeout>:
   11e68:	b510      	push	{r4, lr}
   11e6a:	4b08      	ldr	r3, [pc, #32]	; (11e8c <Radio_RxFSKTimeout+0x24>)
   11e6c:	332f      	adds	r3, #47	; 0x2f
   11e6e:	7818      	ldrb	r0, [r3, #0]
   11e70:	4b07      	ldr	r3, [pc, #28]	; (11e90 <Radio_RxFSKTimeout+0x28>)
   11e72:	4798      	blx	r3
   11e74:	2000      	movs	r0, #0
   11e76:	4b07      	ldr	r3, [pc, #28]	; (11e94 <Radio_RxFSKTimeout+0x2c>)
   11e78:	4798      	blx	r3
   11e7a:	2380      	movs	r3, #128	; 0x80
   11e7c:	4a06      	ldr	r2, [pc, #24]	; (11e98 <Radio_RxFSKTimeout+0x30>)
   11e7e:	2002      	movs	r0, #2
   11e80:	8811      	ldrh	r1, [r2, #0]
   11e82:	430b      	orrs	r3, r1
   11e84:	8013      	strh	r3, [r2, #0]
   11e86:	4b05      	ldr	r3, [pc, #20]	; (11e9c <Radio_RxFSKTimeout+0x34>)
   11e88:	4798      	blx	r3
   11e8a:	bd10      	pop	{r4, pc}
   11e8c:	20002214 	.word	0x20002214
   11e90:	0000c235 	.word	0x0000c235
   11e94:	00011da5 	.word	0x00011da5
   11e98:	200027d0 	.word	0x200027d0
   11e9c:	000119d9 	.word	0x000119d9

00011ea0 <RADIO_TxDone>:
   11ea0:	b570      	push	{r4, r5, r6, lr}
   11ea2:	4b14      	ldr	r3, [pc, #80]	; (11ef4 <RADIO_TxDone+0x54>)
   11ea4:	332f      	adds	r3, #47	; 0x2f
   11ea6:	7818      	ldrb	r0, [r3, #0]
   11ea8:	4b13      	ldr	r3, [pc, #76]	; (11ef8 <RADIO_TxDone+0x58>)
   11eaa:	4798      	blx	r3
   11eac:	2001      	movs	r0, #1
   11eae:	4b13      	ldr	r3, [pc, #76]	; (11efc <RADIO_TxDone+0x5c>)
   11eb0:	4798      	blx	r3
   11eb2:	4b13      	ldr	r3, [pc, #76]	; (11f00 <RADIO_TxDone+0x60>)
   11eb4:	2108      	movs	r1, #8
   11eb6:	2012      	movs	r0, #18
   11eb8:	4798      	blx	r3
   11eba:	4b12      	ldr	r3, [pc, #72]	; (11f04 <RADIO_TxDone+0x64>)
   11ebc:	781a      	ldrb	r2, [r3, #0]
   11ebe:	4b12      	ldr	r3, [pc, #72]	; (11f08 <RADIO_TxDone+0x68>)
   11ec0:	2a02      	cmp	r2, #2
   11ec2:	d002      	beq.n	11eca <RADIO_TxDone+0x2a>
   11ec4:	881a      	ldrh	r2, [r3, #0]
   11ec6:	0692      	lsls	r2, r2, #26
   11ec8:	d413      	bmi.n	11ef2 <RADIO_TxDone+0x52>
   11eca:	2001      	movs	r0, #1
   11ecc:	881a      	ldrh	r2, [r3, #0]
   11ece:	4302      	orrs	r2, r0
   11ed0:	801a      	strh	r2, [r3, #0]
   11ed2:	4b0e      	ldr	r3, [pc, #56]	; (11f0c <RADIO_TxDone+0x6c>)
   11ed4:	4798      	blx	r3
   11ed6:	4b0e      	ldr	r3, [pc, #56]	; (11f10 <RADIO_TxDone+0x70>)
   11ed8:	4798      	blx	r3
   11eda:	4c0e      	ldr	r4, [pc, #56]	; (11f14 <RADIO_TxDone+0x74>)
   11edc:	4d0e      	ldr	r5, [pc, #56]	; (11f18 <RADIO_TxDone+0x78>)
   11ede:	6822      	ldr	r2, [r4, #0]
   11ee0:	6863      	ldr	r3, [r4, #4]
   11ee2:	1a80      	subs	r0, r0, r2
   11ee4:	4199      	sbcs	r1, r3
   11ee6:	22fa      	movs	r2, #250	; 0xfa
   11ee8:	2300      	movs	r3, #0
   11eea:	0092      	lsls	r2, r2, #2
   11eec:	47a8      	blx	r5
   11eee:	6020      	str	r0, [r4, #0]
   11ef0:	6061      	str	r1, [r4, #4]
   11ef2:	bd70      	pop	{r4, r5, r6, pc}
   11ef4:	20002214 	.word	0x20002214
   11ef8:	0000c235 	.word	0x0000c235
   11efc:	00011da5 	.word	0x00011da5
   11f00:	000053ad 	.word	0x000053ad
   11f04:	200027d3 	.word	0x200027d3
   11f08:	200027d0 	.word	0x200027d0
   11f0c:	000119d9 	.word	0x000119d9
   11f10:	0000bed1 	.word	0x0000bed1
   11f14:	20001000 	.word	0x20001000
   11f18:	00013071 	.word	0x00013071

00011f1c <RADIO_FSKPacketSent>:
   11f1c:	b570      	push	{r4, r5, r6, lr}
   11f1e:	4b15      	ldr	r3, [pc, #84]	; (11f74 <RADIO_FSKPacketSent+0x58>)
   11f20:	203f      	movs	r0, #63	; 0x3f
   11f22:	4798      	blx	r3
   11f24:	0703      	lsls	r3, r0, #28
   11f26:	d524      	bpl.n	11f72 <RADIO_FSKPacketSent+0x56>
   11f28:	4b13      	ldr	r3, [pc, #76]	; (11f78 <RADIO_FSKPacketSent+0x5c>)
   11f2a:	332f      	adds	r3, #47	; 0x2f
   11f2c:	7818      	ldrb	r0, [r3, #0]
   11f2e:	4b13      	ldr	r3, [pc, #76]	; (11f7c <RADIO_FSKPacketSent+0x60>)
   11f30:	4798      	blx	r3
   11f32:	4b13      	ldr	r3, [pc, #76]	; (11f80 <RADIO_FSKPacketSent+0x64>)
   11f34:	2001      	movs	r0, #1
   11f36:	4798      	blx	r3
   11f38:	4b12      	ldr	r3, [pc, #72]	; (11f84 <RADIO_FSKPacketSent+0x68>)
   11f3a:	4c13      	ldr	r4, [pc, #76]	; (11f88 <RADIO_FSKPacketSent+0x6c>)
   11f3c:	781b      	ldrb	r3, [r3, #0]
   11f3e:	2b02      	cmp	r3, #2
   11f40:	d002      	beq.n	11f48 <RADIO_FSKPacketSent+0x2c>
   11f42:	8823      	ldrh	r3, [r4, #0]
   11f44:	069b      	lsls	r3, r3, #26
   11f46:	d414      	bmi.n	11f72 <RADIO_FSKPacketSent+0x56>
   11f48:	4b10      	ldr	r3, [pc, #64]	; (11f8c <RADIO_FSKPacketSent+0x70>)
   11f4a:	4798      	blx	r3
   11f4c:	4d10      	ldr	r5, [pc, #64]	; (11f90 <RADIO_FSKPacketSent+0x74>)
   11f4e:	4e11      	ldr	r6, [pc, #68]	; (11f94 <RADIO_FSKPacketSent+0x78>)
   11f50:	682a      	ldr	r2, [r5, #0]
   11f52:	686b      	ldr	r3, [r5, #4]
   11f54:	1a80      	subs	r0, r0, r2
   11f56:	4199      	sbcs	r1, r3
   11f58:	22fa      	movs	r2, #250	; 0xfa
   11f5a:	2300      	movs	r3, #0
   11f5c:	0092      	lsls	r2, r2, #2
   11f5e:	47b0      	blx	r6
   11f60:	4b0d      	ldr	r3, [pc, #52]	; (11f98 <RADIO_FSKPacketSent+0x7c>)
   11f62:	6028      	str	r0, [r5, #0]
   11f64:	6069      	str	r1, [r5, #4]
   11f66:	2001      	movs	r0, #1
   11f68:	4798      	blx	r3
   11f6a:	2304      	movs	r3, #4
   11f6c:	8822      	ldrh	r2, [r4, #0]
   11f6e:	4313      	orrs	r3, r2
   11f70:	8023      	strh	r3, [r4, #0]
   11f72:	bd70      	pop	{r4, r5, r6, pc}
   11f74:	000053d5 	.word	0x000053d5
   11f78:	20002214 	.word	0x20002214
   11f7c:	0000c235 	.word	0x0000c235
   11f80:	00011da5 	.word	0x00011da5
   11f84:	200027d3 	.word	0x200027d3
   11f88:	200027d0 	.word	0x200027d0
   11f8c:	0000bed1 	.word	0x0000bed1
   11f90:	20001000 	.word	0x20001000
   11f94:	00013071 	.word	0x00013071
   11f98:	000119d9 	.word	0x000119d9

00011f9c <RADIO_RxDone>:
   11f9c:	b570      	push	{r4, r5, r6, lr}
   11f9e:	2012      	movs	r0, #18
   11fa0:	4e16      	ldr	r6, [pc, #88]	; (11ffc <RADIO_RxDone+0x60>)
   11fa2:	47b0      	blx	r6
   11fa4:	4b16      	ldr	r3, [pc, #88]	; (12000 <RADIO_RxDone+0x64>)
   11fa6:	0005      	movs	r5, r0
   11fa8:	2170      	movs	r1, #112	; 0x70
   11faa:	2012      	movs	r0, #18
   11fac:	4798      	blx	r3
   11fae:	2350      	movs	r3, #80	; 0x50
   11fb0:	402b      	ands	r3, r5
   11fb2:	2b50      	cmp	r3, #80	; 0x50
   11fb4:	d119      	bne.n	11fea <RADIO_RxDone+0x4e>
   11fb6:	4c13      	ldr	r4, [pc, #76]	; (12004 <RADIO_RxDone+0x68>)
   11fb8:	0023      	movs	r3, r4
   11fba:	332f      	adds	r3, #47	; 0x2f
   11fbc:	7818      	ldrb	r0, [r3, #0]
   11fbe:	4b12      	ldr	r3, [pc, #72]	; (12008 <RADIO_RxDone+0x6c>)
   11fc0:	4798      	blx	r3
   11fc2:	4b12      	ldr	r3, [pc, #72]	; (1200c <RADIO_RxDone+0x70>)
   11fc4:	2000      	movs	r0, #0
   11fc6:	4798      	blx	r3
   11fc8:	3404      	adds	r4, #4
   11fca:	201c      	movs	r0, #28
   11fcc:	47b0      	blx	r6
   11fce:	7fe2      	ldrb	r2, [r4, #31]
   11fd0:	4b0f      	ldr	r3, [pc, #60]	; (12010 <RADIO_RxDone+0x74>)
   11fd2:	4910      	ldr	r1, [pc, #64]	; (12014 <RADIO_RxDone+0x78>)
   11fd4:	2a00      	cmp	r2, #0
   11fd6:	d003      	beq.n	11fe0 <RADIO_RxDone+0x44>
   11fd8:	06aa      	lsls	r2, r5, #26
   11fda:	d407      	bmi.n	11fec <RADIO_RxDone+0x50>
   11fdc:	0642      	lsls	r2, r0, #25
   11fde:	d505      	bpl.n	11fec <RADIO_RxDone+0x50>
   11fe0:	2002      	movs	r0, #2
   11fe2:	881a      	ldrh	r2, [r3, #0]
   11fe4:	4302      	orrs	r2, r0
   11fe6:	801a      	strh	r2, [r3, #0]
   11fe8:	4788      	blx	r1
   11fea:	bd70      	pop	{r4, r5, r6, pc}
   11fec:	2280      	movs	r2, #128	; 0x80
   11fee:	8818      	ldrh	r0, [r3, #0]
   11ff0:	0052      	lsls	r2, r2, #1
   11ff2:	4302      	orrs	r2, r0
   11ff4:	801a      	strh	r2, [r3, #0]
   11ff6:	2002      	movs	r0, #2
   11ff8:	e7f6      	b.n	11fe8 <RADIO_RxDone+0x4c>
   11ffa:	46c0      	nop			; (mov r8, r8)
   11ffc:	000053d5 	.word	0x000053d5
   12000:	000053ad 	.word	0x000053ad
   12004:	20002214 	.word	0x20002214
   12008:	0000c235 	.word	0x0000c235
   1200c:	00011da5 	.word	0x00011da5
   12010:	200027d0 	.word	0x200027d0
   12014:	000119d9 	.word	0x000119d9

00012018 <RADIO_FSKPayloadReady>:
   12018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1201a:	203f      	movs	r0, #63	; 0x3f
   1201c:	4b39      	ldr	r3, [pc, #228]	; (12104 <RADIO_FSKPayloadReady+0xec>)
   1201e:	4798      	blx	r3
   12020:	0743      	lsls	r3, r0, #29
   12022:	d559      	bpl.n	120d8 <RADIO_FSKPayloadReady+0xc0>
   12024:	4c38      	ldr	r4, [pc, #224]	; (12108 <RADIO_FSKPayloadReady+0xf0>)
   12026:	4d39      	ldr	r5, [pc, #228]	; (1210c <RADIO_FSKPayloadReady+0xf4>)
   12028:	1d23      	adds	r3, r4, #4
   1202a:	7fdb      	ldrb	r3, [r3, #31]
   1202c:	2b01      	cmp	r3, #1
   1202e:	d154      	bne.n	120da <RADIO_FSKPayloadReady+0xc2>
   12030:	2202      	movs	r2, #2
   12032:	4210      	tst	r0, r2
   12034:	d048      	beq.n	120c8 <RADIO_FSKPayloadReady+0xb0>
   12036:	0023      	movs	r3, r4
   12038:	332f      	adds	r3, #47	; 0x2f
   1203a:	7818      	ldrb	r0, [r3, #0]
   1203c:	4e34      	ldr	r6, [pc, #208]	; (12110 <RADIO_FSKPayloadReady+0xf8>)
   1203e:	47b0      	blx	r6
   12040:	0023      	movs	r3, r4
   12042:	332e      	adds	r3, #46	; 0x2e
   12044:	7818      	ldrb	r0, [r3, #0]
   12046:	47b0      	blx	r6
   12048:	4b32      	ldr	r3, [pc, #200]	; (12114 <RADIO_FSKPayloadReady+0xfc>)
   1204a:	4798      	blx	r3
   1204c:	0022      	movs	r2, r4
   1204e:	0023      	movs	r3, r4
   12050:	322c      	adds	r2, #44	; 0x2c
   12052:	3357      	adds	r3, #87	; 0x57
   12054:	7810      	ldrb	r0, [r2, #0]
   12056:	7819      	ldrb	r1, [r3, #0]
   12058:	4288      	cmp	r0, r1
   1205a:	d105      	bne.n	12068 <RADIO_FSKPayloadReady+0x50>
   1205c:	7812      	ldrb	r2, [r2, #0]
   1205e:	2a00      	cmp	r2, #0
   12060:	d002      	beq.n	12068 <RADIO_FSKPayloadReady+0x50>
   12062:	781b      	ldrb	r3, [r3, #0]
   12064:	2b00      	cmp	r3, #0
   12066:	d118      	bne.n	1209a <RADIO_FSKPayloadReady+0x82>
   12068:	0021      	movs	r1, r4
   1206a:	312c      	adds	r1, #44	; 0x2c
   1206c:	7808      	ldrb	r0, [r1, #0]
   1206e:	b2c0      	uxtb	r0, r0
   12070:	2800      	cmp	r0, #0
   12072:	d102      	bne.n	1207a <RADIO_FSKPayloadReady+0x62>
   12074:	2201      	movs	r2, #1
   12076:	4b28      	ldr	r3, [pc, #160]	; (12118 <RADIO_FSKPayloadReady+0x100>)
   12078:	4798      	blx	r3
   1207a:	0026      	movs	r6, r4
   1207c:	0027      	movs	r7, r4
   1207e:	3657      	adds	r6, #87	; 0x57
   12080:	7830      	ldrb	r0, [r6, #0]
   12082:	372c      	adds	r7, #44	; 0x2c
   12084:	b2c0      	uxtb	r0, r0
   12086:	2800      	cmp	r0, #0
   12088:	d110      	bne.n	120ac <RADIO_FSKPayloadReady+0x94>
   1208a:	783a      	ldrb	r2, [r7, #0]
   1208c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1208e:	b2d2      	uxtb	r2, r2
   12090:	4b21      	ldr	r3, [pc, #132]	; (12118 <RADIO_FSKPayloadReady+0x100>)
   12092:	4798      	blx	r3
   12094:	783b      	ldrb	r3, [r7, #0]
   12096:	b2db      	uxtb	r3, r3
   12098:	7033      	strb	r3, [r6, #0]
   1209a:	4b20      	ldr	r3, [pc, #128]	; (1211c <RADIO_FSKPayloadReady+0x104>)
   1209c:	4798      	blx	r3
   1209e:	4b20      	ldr	r3, [pc, #128]	; (12120 <RADIO_FSKPayloadReady+0x108>)
   120a0:	2000      	movs	r0, #0
   120a2:	4798      	blx	r3
   120a4:	2308      	movs	r3, #8
   120a6:	882a      	ldrh	r2, [r5, #0]
   120a8:	4313      	orrs	r3, r2
   120aa:	e011      	b.n	120d0 <RADIO_FSKPayloadReady+0xb8>
   120ac:	783b      	ldrb	r3, [r7, #0]
   120ae:	7832      	ldrb	r2, [r6, #0]
   120b0:	1a9b      	subs	r3, r3, r2
   120b2:	2b00      	cmp	r3, #0
   120b4:	ddf1      	ble.n	1209a <RADIO_FSKPayloadReady+0x82>
   120b6:	7833      	ldrb	r3, [r6, #0]
   120b8:	783a      	ldrb	r2, [r7, #0]
   120ba:	7831      	ldrb	r1, [r6, #0]
   120bc:	2000      	movs	r0, #0
   120be:	1a52      	subs	r2, r2, r1
   120c0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   120c2:	b2d2      	uxtb	r2, r2
   120c4:	18c9      	adds	r1, r1, r3
   120c6:	e7e3      	b.n	12090 <RADIO_FSKPayloadReady+0x78>
   120c8:	2380      	movs	r3, #128	; 0x80
   120ca:	8829      	ldrh	r1, [r5, #0]
   120cc:	005b      	lsls	r3, r3, #1
   120ce:	430b      	orrs	r3, r1
   120d0:	802b      	strh	r3, [r5, #0]
   120d2:	2002      	movs	r0, #2
   120d4:	4b13      	ldr	r3, [pc, #76]	; (12124 <RADIO_FSKPayloadReady+0x10c>)
   120d6:	4798      	blx	r3
   120d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   120da:	0023      	movs	r3, r4
   120dc:	332f      	adds	r3, #47	; 0x2f
   120de:	4e0c      	ldr	r6, [pc, #48]	; (12110 <RADIO_FSKPayloadReady+0xf8>)
   120e0:	7818      	ldrb	r0, [r3, #0]
   120e2:	47b0      	blx	r6
   120e4:	0023      	movs	r3, r4
   120e6:	332e      	adds	r3, #46	; 0x2e
   120e8:	7818      	ldrb	r0, [r3, #0]
   120ea:	47b0      	blx	r6
   120ec:	4e0e      	ldr	r6, [pc, #56]	; (12128 <RADIO_FSKPayloadReady+0x110>)
   120ee:	2201      	movs	r2, #1
   120f0:	0031      	movs	r1, r6
   120f2:	2000      	movs	r0, #0
   120f4:	4f08      	ldr	r7, [pc, #32]	; (12118 <RADIO_FSKPayloadReady+0x100>)
   120f6:	47b8      	blx	r7
   120f8:	7832      	ldrb	r2, [r6, #0]
   120fa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   120fc:	b2d2      	uxtb	r2, r2
   120fe:	2000      	movs	r0, #0
   12100:	47b8      	blx	r7
   12102:	e7cc      	b.n	1209e <RADIO_FSKPayloadReady+0x86>
   12104:	000053d5 	.word	0x000053d5
   12108:	20002214 	.word	0x20002214
   1210c:	200027d0 	.word	0x200027d0
   12110:	0000c235 	.word	0x0000c235
   12114:	000001ad 	.word	0x000001ad
   12118:	00005441 	.word	0x00005441
   1211c:	000001ed 	.word	0x000001ed
   12120:	00011da5 	.word	0x00011da5
   12124:	000119d9 	.word	0x000119d9
   12128:	20002240 	.word	0x20002240

0001212c <Radio_SetClockInput>:
   1212c:	b510      	push	{r4, lr}
   1212e:	4b08      	ldr	r3, [pc, #32]	; (12150 <Radio_SetClockInput+0x24>)
   12130:	3355      	adds	r3, #85	; 0x55
   12132:	781b      	ldrb	r3, [r3, #0]
   12134:	2b00      	cmp	r3, #0
   12136:	d10a      	bne.n	1214e <Radio_SetClockInput+0x22>
   12138:	4b06      	ldr	r3, [pc, #24]	; (12154 <Radio_SetClockInput+0x28>)
   1213a:	204b      	movs	r0, #75	; 0x4b
   1213c:	4798      	blx	r3
   1213e:	2110      	movs	r1, #16
   12140:	4301      	orrs	r1, r0
   12142:	4b05      	ldr	r3, [pc, #20]	; (12158 <Radio_SetClockInput+0x2c>)
   12144:	b2c9      	uxtb	r1, r1
   12146:	204b      	movs	r0, #75	; 0x4b
   12148:	4798      	blx	r3
   1214a:	4b04      	ldr	r3, [pc, #16]	; (1215c <Radio_SetClockInput+0x30>)
   1214c:	4798      	blx	r3
   1214e:	bd10      	pop	{r4, pc}
   12150:	20002214 	.word	0x20002214
   12154:	000053d5 	.word	0x000053d5
   12158:	000053ad 	.word	0x000053ad
   1215c:	000054e5 	.word	0x000054e5

00012160 <Radio_ResetClockInput>:
   12160:	b510      	push	{r4, lr}
   12162:	4b04      	ldr	r3, [pc, #16]	; (12174 <Radio_ResetClockInput+0x14>)
   12164:	3355      	adds	r3, #85	; 0x55
   12166:	781b      	ldrb	r3, [r3, #0]
   12168:	2b00      	cmp	r3, #0
   1216a:	d101      	bne.n	12170 <Radio_ResetClockInput+0x10>
   1216c:	4b02      	ldr	r3, [pc, #8]	; (12178 <Radio_ResetClockInput+0x18>)
   1216e:	4798      	blx	r3
   12170:	bd10      	pop	{r4, pc}
   12172:	46c0      	nop			; (mov r8, r8)
   12174:	20002214 	.word	0x20002214
   12178:	00005501 	.word	0x00005501

0001217c <RADIO_InitDefaultAttributes>:
   1217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1217e:	2501      	movs	r5, #1
   12180:	4b64      	ldr	r3, [pc, #400]	; (12314 <RADIO_InitDefaultAttributes+0x198>)
   12182:	4c65      	ldr	r4, [pc, #404]	; (12318 <RADIO_InitDefaultAttributes+0x19c>)
   12184:	701d      	strb	r5, [r3, #0]
   12186:	4b65      	ldr	r3, [pc, #404]	; (1231c <RADIO_InitDefaultAttributes+0x1a0>)
   12188:	2207      	movs	r2, #7
   1218a:	6023      	str	r3, [r4, #0]
   1218c:	4b64      	ldr	r3, [pc, #400]	; (12320 <RADIO_InitDefaultAttributes+0x1a4>)
   1218e:	18a1      	adds	r1, r4, r2
   12190:	6063      	str	r3, [r4, #4]
   12192:	4b64      	ldr	r3, [pc, #400]	; (12324 <RADIO_InitDefaultAttributes+0x1a8>)
   12194:	0027      	movs	r7, r4
   12196:	60a3      	str	r3, [r4, #8]
   12198:	0023      	movs	r3, r4
   1219a:	3334      	adds	r3, #52	; 0x34
   1219c:	701d      	strb	r5, [r3, #0]
   1219e:	0023      	movs	r3, r4
   121a0:	3336      	adds	r3, #54	; 0x36
   121a2:	701a      	strb	r2, [r3, #0]
   121a4:	1ce3      	adds	r3, r4, #3
   121a6:	77dd      	strb	r5, [r3, #31]
   121a8:	0023      	movs	r3, r4
   121aa:	3333      	adds	r3, #51	; 0x33
   121ac:	701d      	strb	r5, [r3, #0]
   121ae:	2300      	movs	r3, #0
   121b0:	77cb      	strb	r3, [r1, #31]
   121b2:	2108      	movs	r1, #8
   121b4:	82a1      	strh	r1, [r4, #20]
   121b6:	0021      	movs	r1, r4
   121b8:	3135      	adds	r1, #53	; 0x35
   121ba:	700a      	strb	r2, [r1, #0]
   121bc:	1d22      	adds	r2, r4, #4
   121be:	77d5      	strb	r5, [r2, #31]
   121c0:	1d62      	adds	r2, r4, #5
   121c2:	77d3      	strb	r3, [r2, #31]
   121c4:	1da2      	adds	r2, r4, #6
   121c6:	77d3      	strb	r3, [r2, #31]
   121c8:	2194      	movs	r1, #148	; 0x94
   121ca:	22c1      	movs	r2, #193	; 0xc1
   121cc:	76a1      	strb	r1, [r4, #26]
   121ce:	7662      	strb	r2, [r4, #25]
   121d0:	76e2      	strb	r2, [r4, #27]
   121d2:	3991      	subs	r1, #145	; 0x91
   121d4:	1ca2      	adds	r2, r4, #2
   121d6:	77d1      	strb	r1, [r2, #31]
   121d8:	2234      	movs	r2, #52	; 0x34
   121da:	7622      	strb	r2, [r4, #24]
   121dc:	0022      	movs	r2, r4
   121de:	317d      	adds	r1, #125	; 0x7d
   121e0:	3232      	adds	r2, #50	; 0x32
   121e2:	7011      	strb	r1, [r2, #0]
   121e4:	4a50      	ldr	r2, [pc, #320]	; (12328 <RADIO_InitDefaultAttributes+0x1ac>)
   121e6:	397e      	subs	r1, #126	; 0x7e
   121e8:	60e2      	str	r2, [r4, #12]
   121ea:	0022      	movs	r2, r4
   121ec:	3237      	adds	r2, #55	; 0x37
   121ee:	7011      	strb	r1, [r2, #0]
   121f0:	0022      	movs	r2, r4
   121f2:	3109      	adds	r1, #9
   121f4:	3238      	adds	r2, #56	; 0x38
   121f6:	7011      	strb	r1, [r2, #0]
   121f8:	0022      	movs	r2, r4
   121fa:	3107      	adds	r1, #7
   121fc:	3239      	adds	r2, #57	; 0x39
   121fe:	7011      	strb	r1, [r2, #0]
   12200:	0022      	movs	r2, r4
   12202:	322c      	adds	r2, #44	; 0x2c
   12204:	7013      	strb	r3, [r2, #0]
   12206:	4a49      	ldr	r2, [pc, #292]	; (1232c <RADIO_InitDefaultAttributes+0x1b0>)
   12208:	82e3      	strh	r3, [r4, #22]
   1220a:	62a2      	str	r2, [r4, #40]	; 0x28
   1220c:	0022      	movs	r2, r4
   1220e:	324c      	adds	r2, #76	; 0x4c
   12210:	8013      	strh	r3, [r2, #0]
   12212:	0022      	movs	r2, r4
   12214:	324e      	adds	r2, #78	; 0x4e
   12216:	7013      	strb	r3, [r2, #0]
   12218:	0022      	movs	r2, r4
   1221a:	324f      	adds	r2, #79	; 0x4f
   1221c:	7013      	strb	r3, [r2, #0]
   1221e:	0022      	movs	r2, r4
   12220:	3240      	adds	r2, #64	; 0x40
   12222:	7013      	strb	r3, [r2, #0]
   12224:	0022      	movs	r2, r4
   12226:	3241      	adds	r2, #65	; 0x41
   12228:	7013      	strb	r3, [r2, #0]
   1222a:	0022      	movs	r2, r4
   1222c:	3254      	adds	r2, #84	; 0x54
   1222e:	7013      	strb	r3, [r2, #0]
   12230:	0022      	movs	r2, r4
   12232:	3255      	adds	r2, #85	; 0x55
   12234:	7015      	strb	r5, [r2, #0]
   12236:	0022      	movs	r2, r4
   12238:	3257      	adds	r2, #87	; 0x57
   1223a:	6463      	str	r3, [r4, #68]	; 0x44
   1223c:	64a3      	str	r3, [r4, #72]	; 0x48
   1223e:	87a3      	strh	r3, [r4, #60]	; 0x3c
   12240:	87e3      	strh	r3, [r4, #62]	; 0x3e
   12242:	7013      	strb	r3, [r2, #0]
   12244:	3730      	adds	r7, #48	; 0x30
   12246:	783b      	ldrb	r3, [r7, #0]
   12248:	2b00      	cmp	r3, #0
   1224a:	d151      	bne.n	122f0 <RADIO_InitDefaultAttributes+0x174>
   1224c:	4838      	ldr	r0, [pc, #224]	; (12330 <RADIO_InitDefaultAttributes+0x1b4>)
   1224e:	4e39      	ldr	r6, [pc, #228]	; (12334 <RADIO_InitDefaultAttributes+0x1b8>)
   12250:	47b0      	blx	r6
   12252:	2808      	cmp	r0, #8
   12254:	d149      	bne.n	122ea <RADIO_InitDefaultAttributes+0x16e>
   12256:	4838      	ldr	r0, [pc, #224]	; (12338 <RADIO_InitDefaultAttributes+0x1bc>)
   12258:	47b0      	blx	r6
   1225a:	2808      	cmp	r0, #8
   1225c:	d145      	bne.n	122ea <RADIO_InitDefaultAttributes+0x16e>
   1225e:	4837      	ldr	r0, [pc, #220]	; (1233c <RADIO_InitDefaultAttributes+0x1c0>)
   12260:	47b0      	blx	r6
   12262:	2808      	cmp	r0, #8
   12264:	d141      	bne.n	122ea <RADIO_InitDefaultAttributes+0x16e>
   12266:	4836      	ldr	r0, [pc, #216]	; (12340 <RADIO_InitDefaultAttributes+0x1c4>)
   12268:	47b0      	blx	r6
   1226a:	2808      	cmp	r0, #8
   1226c:	d13d      	bne.n	122ea <RADIO_InitDefaultAttributes+0x16e>
   1226e:	703d      	strb	r5, [r7, #0]
   12270:	4b34      	ldr	r3, [pc, #208]	; (12344 <RADIO_InitDefaultAttributes+0x1c8>)
   12272:	4798      	blx	r3
   12274:	4b34      	ldr	r3, [pc, #208]	; (12348 <RADIO_InitDefaultAttributes+0x1cc>)
   12276:	4798      	blx	r3
   12278:	2800      	cmp	r0, #0
   1227a:	d107      	bne.n	1228c <RADIO_InitDefaultAttributes+0x110>
   1227c:	0023      	movs	r3, r4
   1227e:	3355      	adds	r3, #85	; 0x55
   12280:	7018      	strb	r0, [r3, #0]
   12282:	4b32      	ldr	r3, [pc, #200]	; (1234c <RADIO_InitDefaultAttributes+0x1d0>)
   12284:	4798      	blx	r3
   12286:	0023      	movs	r3, r4
   12288:	3354      	adds	r3, #84	; 0x54
   1228a:	7018      	strb	r0, [r3, #0]
   1228c:	4b30      	ldr	r3, [pc, #192]	; (12350 <RADIO_InitDefaultAttributes+0x1d4>)
   1228e:	4798      	blx	r3
   12290:	2201      	movs	r2, #1
   12292:	2100      	movs	r1, #0
   12294:	0010      	movs	r0, r2
   12296:	4f2f      	ldr	r7, [pc, #188]	; (12354 <RADIO_InitDefaultAttributes+0x1d8>)
   12298:	47b8      	blx	r7
   1229a:	6820      	ldr	r0, [r4, #0]
   1229c:	4b2e      	ldr	r3, [pc, #184]	; (12358 <RADIO_InitDefaultAttributes+0x1dc>)
   1229e:	4798      	blx	r3
   122a0:	2142      	movs	r1, #66	; 0x42
   122a2:	203b      	movs	r0, #59	; 0x3b
   122a4:	4d2d      	ldr	r5, [pc, #180]	; (1235c <RADIO_InitDefaultAttributes+0x1e0>)
   122a6:	47a8      	blx	r5
   122a8:	203b      	movs	r0, #59	; 0x3b
   122aa:	4b2d      	ldr	r3, [pc, #180]	; (12360 <RADIO_InitDefaultAttributes+0x1e4>)
   122ac:	4798      	blx	r3
   122ae:	2620      	movs	r6, #32
   122b0:	4006      	ands	r6, r0
   122b2:	d1f9      	bne.n	122a8 <RADIO_InitDefaultAttributes+0x12c>
   122b4:	2123      	movs	r1, #35	; 0x23
   122b6:	200c      	movs	r0, #12
   122b8:	47a8      	blx	r5
   122ba:	21aa      	movs	r1, #170	; 0xaa
   122bc:	201f      	movs	r0, #31
   122be:	47a8      	blx	r5
   122c0:	21ff      	movs	r1, #255	; 0xff
   122c2:	2032      	movs	r0, #50	; 0x32
   122c4:	47a8      	blx	r5
   122c6:	2140      	movs	r1, #64	; 0x40
   122c8:	2031      	movs	r0, #49	; 0x31
   122ca:	47a8      	blx	r5
   122cc:	2201      	movs	r2, #1
   122ce:	0030      	movs	r0, r6
   122d0:	0011      	movs	r1, r2
   122d2:	47b8      	blx	r7
   122d4:	21ff      	movs	r1, #255	; 0xff
   122d6:	2023      	movs	r0, #35	; 0x23
   122d8:	47a8      	blx	r5
   122da:	4b21      	ldr	r3, [pc, #132]	; (12360 <RADIO_InitDefaultAttributes+0x1e4>)
   122dc:	2042      	movs	r0, #66	; 0x42
   122de:	4798      	blx	r3
   122e0:	3431      	adds	r4, #49	; 0x31
   122e2:	4b20      	ldr	r3, [pc, #128]	; (12364 <RADIO_InitDefaultAttributes+0x1e8>)
   122e4:	7020      	strb	r0, [r4, #0]
   122e6:	4798      	blx	r3
   122e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   122ea:	4b1f      	ldr	r3, [pc, #124]	; (12368 <RADIO_InitDefaultAttributes+0x1ec>)
   122ec:	4798      	blx	r3
   122ee:	e7bf      	b.n	12270 <RADIO_InitDefaultAttributes+0xf4>
   122f0:	0023      	movs	r3, r4
   122f2:	332d      	adds	r3, #45	; 0x2d
   122f4:	4d1d      	ldr	r5, [pc, #116]	; (1236c <RADIO_InitDefaultAttributes+0x1f0>)
   122f6:	7818      	ldrb	r0, [r3, #0]
   122f8:	47a8      	blx	r5
   122fa:	0023      	movs	r3, r4
   122fc:	332e      	adds	r3, #46	; 0x2e
   122fe:	7818      	ldrb	r0, [r3, #0]
   12300:	47a8      	blx	r5
   12302:	0023      	movs	r3, r4
   12304:	332f      	adds	r3, #47	; 0x2f
   12306:	7818      	ldrb	r0, [r3, #0]
   12308:	47a8      	blx	r5
   1230a:	0023      	movs	r3, r4
   1230c:	3350      	adds	r3, #80	; 0x50
   1230e:	7818      	ldrb	r0, [r3, #0]
   12310:	47a8      	blx	r5
   12312:	e7ad      	b.n	12270 <RADIO_InitDefaultAttributes+0xf4>
   12314:	200027d3 	.word	0x200027d3
   12318:	20002214 	.word	0x20002214
   1231c:	33be27a0 	.word	0x33be27a0
   12320:	000061a8 	.word	0x000061a8
   12324:	0000c350 	.word	0x0000c350
   12328:	00003a98 	.word	0x00003a98
   1232c:	200026d0 	.word	0x200026d0
   12330:	20002241 	.word	0x20002241
   12334:	0000bef5 	.word	0x0000bef5
   12338:	20002242 	.word	0x20002242
   1233c:	20002243 	.word	0x20002243
   12340:	20002264 	.word	0x20002264
   12344:	0000536d 	.word	0x0000536d
   12348:	000054e1 	.word	0x000054e1
   1234c:	000054dd 	.word	0x000054dd
   12350:	0001212d 	.word	0x0001212d
   12354:	0000c58d 	.word	0x0000c58d
   12358:	000113d1 	.word	0x000113d1
   1235c:	000053ad 	.word	0x000053ad
   12360:	000053d5 	.word	0x000053d5
   12364:	00012161 	.word	0x00012161
   12368:	0000be39 	.word	0x0000be39
   1236c:	0000c235 	.word	0x0000c235

00012370 <RADIO_Receive>:
   12370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12372:	7803      	ldrb	r3, [r0, #0]
   12374:	0006      	movs	r6, r0
   12376:	4d24      	ldr	r5, [pc, #144]	; (12408 <RADIO_Receive+0x98>)
   12378:	2b00      	cmp	r3, #0
   1237a:	d11d      	bne.n	123b8 <RADIO_Receive+0x48>
   1237c:	782b      	ldrb	r3, [r5, #0]
   1237e:	2004      	movs	r0, #4
   12380:	2b01      	cmp	r3, #1
   12382:	d118      	bne.n	123b6 <RADIO_Receive+0x46>
   12384:	4c21      	ldr	r4, [pc, #132]	; (1240c <RADIO_Receive+0x9c>)
   12386:	4f22      	ldr	r7, [pc, #136]	; (12410 <RADIO_Receive+0xa0>)
   12388:	0023      	movs	r3, r4
   1238a:	332f      	adds	r3, #47	; 0x2f
   1238c:	7818      	ldrb	r0, [r3, #0]
   1238e:	47b8      	blx	r7
   12390:	0023      	movs	r3, r4
   12392:	3334      	adds	r3, #52	; 0x34
   12394:	781b      	ldrb	r3, [r3, #0]
   12396:	2b00      	cmp	r3, #0
   12398:	d102      	bne.n	123a0 <RADIO_Receive+0x30>
   1239a:	342e      	adds	r4, #46	; 0x2e
   1239c:	7820      	ldrb	r0, [r4, #0]
   1239e:	47b8      	blx	r7
   123a0:	8872      	ldrh	r2, [r6, #2]
   123a2:	4b1c      	ldr	r3, [pc, #112]	; (12414 <RADIO_Receive+0xa4>)
   123a4:	2008      	movs	r0, #8
   123a6:	801a      	strh	r2, [r3, #0]
   123a8:	2304      	movs	r3, #4
   123aa:	702b      	strb	r3, [r5, #0]
   123ac:	4b1a      	ldr	r3, [pc, #104]	; (12418 <RADIO_Receive+0xa8>)
   123ae:	4798      	blx	r3
   123b0:	4b1a      	ldr	r3, [pc, #104]	; (1241c <RADIO_Receive+0xac>)
   123b2:	4798      	blx	r3
   123b4:	2000      	movs	r0, #0
   123b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   123b8:	782b      	ldrb	r3, [r5, #0]
   123ba:	2000      	movs	r0, #0
   123bc:	2b01      	cmp	r3, #1
   123be:	d0fa      	beq.n	123b6 <RADIO_Receive+0x46>
   123c0:	782b      	ldrb	r3, [r5, #0]
   123c2:	3003      	adds	r0, #3
   123c4:	2b04      	cmp	r3, #4
   123c6:	d1f6      	bne.n	123b6 <RADIO_Receive+0x46>
   123c8:	4c10      	ldr	r4, [pc, #64]	; (1240c <RADIO_Receive+0x9c>)
   123ca:	4e11      	ldr	r6, [pc, #68]	; (12410 <RADIO_Receive+0xa0>)
   123cc:	0023      	movs	r3, r4
   123ce:	332f      	adds	r3, #47	; 0x2f
   123d0:	7818      	ldrb	r0, [r3, #0]
   123d2:	47b0      	blx	r6
   123d4:	0023      	movs	r3, r4
   123d6:	3334      	adds	r3, #52	; 0x34
   123d8:	781b      	ldrb	r3, [r3, #0]
   123da:	2b00      	cmp	r3, #0
   123dc:	d103      	bne.n	123e6 <RADIO_Receive+0x76>
   123de:	0023      	movs	r3, r4
   123e0:	332e      	adds	r3, #46	; 0x2e
   123e2:	7818      	ldrb	r0, [r3, #0]
   123e4:	47b0      	blx	r6
   123e6:	2200      	movs	r2, #0
   123e8:	3434      	adds	r4, #52	; 0x34
   123ea:	7821      	ldrb	r1, [r4, #0]
   123ec:	0010      	movs	r0, r2
   123ee:	4b0c      	ldr	r3, [pc, #48]	; (12420 <RADIO_Receive+0xb0>)
   123f0:	4798      	blx	r3
   123f2:	4b0c      	ldr	r3, [pc, #48]	; (12424 <RADIO_Receive+0xb4>)
   123f4:	4798      	blx	r3
   123f6:	2301      	movs	r3, #1
   123f8:	2008      	movs	r0, #8
   123fa:	4c0b      	ldr	r4, [pc, #44]	; (12428 <RADIO_Receive+0xb8>)
   123fc:	702b      	strb	r3, [r5, #0]
   123fe:	47a0      	blx	r4
   12400:	2002      	movs	r0, #2
   12402:	47a0      	blx	r4
   12404:	e7d6      	b.n	123b4 <RADIO_Receive+0x44>
   12406:	46c0      	nop			; (mov r8, r8)
   12408:	200027d3 	.word	0x200027d3
   1240c:	20002214 	.word	0x20002214
   12410:	0000c235 	.word	0x0000c235
   12414:	20000ff8 	.word	0x20000ff8
   12418:	000119d9 	.word	0x000119d9
   1241c:	0001212d 	.word	0x0001212d
   12420:	0000c58d 	.word	0x0000c58d
   12424:	00012161 	.word	0x00012161
   12428:	00011a05 	.word	0x00011a05

0001242c <RADIO_TxHandler>:
   1242c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1242e:	4d5d      	ldr	r5, [pc, #372]	; (125a4 <RADIO_TxHandler+0x178>)
   12430:	b087      	sub	sp, #28
   12432:	47a8      	blx	r5
   12434:	2001      	movs	r0, #1
   12436:	4c5c      	ldr	r4, [pc, #368]	; (125a8 <RADIO_TxHandler+0x17c>)
   12438:	47a0      	blx	r4
   1243a:	4f5c      	ldr	r7, [pc, #368]	; (125ac <RADIO_TxHandler+0x180>)
   1243c:	003b      	movs	r3, r7
   1243e:	332d      	adds	r3, #45	; 0x2d
   12440:	7818      	ldrb	r0, [r3, #0]
   12442:	4b5b      	ldr	r3, [pc, #364]	; (125b0 <RADIO_TxHandler+0x184>)
   12444:	4798      	blx	r3
   12446:	003b      	movs	r3, r7
   12448:	3341      	adds	r3, #65	; 0x41
   1244a:	781b      	ldrb	r3, [r3, #0]
   1244c:	2b00      	cmp	r3, #0
   1244e:	d035      	beq.n	124bc <RADIO_TxHandler+0x90>
   12450:	8fbe      	ldrh	r6, [r7, #60]	; 0x3c
   12452:	47a8      	blx	r5
   12454:	2000      	movs	r0, #0
   12456:	47a0      	blx	r4
   12458:	6838      	ldr	r0, [r7, #0]
   1245a:	4b56      	ldr	r3, [pc, #344]	; (125b4 <RADIO_TxHandler+0x188>)
   1245c:	4798      	blx	r3
   1245e:	003b      	movs	r3, r7
   12460:	2400      	movs	r4, #0
   12462:	334c      	adds	r3, #76	; 0x4c
   12464:	801c      	strh	r4, [r3, #0]
   12466:	2201      	movs	r2, #1
   12468:	0021      	movs	r1, r4
   1246a:	0020      	movs	r0, r4
   1246c:	4b52      	ldr	r3, [pc, #328]	; (125b8 <RADIO_TxHandler+0x18c>)
   1246e:	4798      	blx	r3
   12470:	2109      	movs	r1, #9
   12472:	2012      	movs	r0, #18
   12474:	4b51      	ldr	r3, [pc, #324]	; (125bc <RADIO_TxHandler+0x190>)
   12476:	4798      	blx	r3
   12478:	2201      	movs	r2, #1
   1247a:	0021      	movs	r1, r4
   1247c:	2005      	movs	r0, #5
   1247e:	4b4e      	ldr	r3, [pc, #312]	; (125b8 <RADIO_TxHandler+0x18c>)
   12480:	4798      	blx	r3
   12482:	4b4f      	ldr	r3, [pc, #316]	; (125c0 <RADIO_TxHandler+0x194>)
   12484:	4798      	blx	r3
   12486:	22fa      	movs	r2, #250	; 0xfa
   12488:	2300      	movs	r3, #0
   1248a:	0092      	lsls	r2, r2, #2
   1248c:	4c4d      	ldr	r4, [pc, #308]	; (125c4 <RADIO_TxHandler+0x198>)
   1248e:	47a0      	blx	r4
   12490:	4b4d      	ldr	r3, [pc, #308]	; (125c8 <RADIO_TxHandler+0x19c>)
   12492:	3601      	adds	r6, #1
   12494:	6018      	str	r0, [r3, #0]
   12496:	6059      	str	r1, [r3, #4]
   12498:	b2b6      	uxth	r6, r6
   1249a:	4b49      	ldr	r3, [pc, #292]	; (125c0 <RADIO_TxHandler+0x194>)
   1249c:	4798      	blx	r3
   1249e:	22fa      	movs	r2, #250	; 0xfa
   124a0:	2300      	movs	r3, #0
   124a2:	0092      	lsls	r2, r2, #2
   124a4:	4d47      	ldr	r5, [pc, #284]	; (125c4 <RADIO_TxHandler+0x198>)
   124a6:	47a8      	blx	r5
   124a8:	4b47      	ldr	r3, [pc, #284]	; (125c8 <RADIO_TxHandler+0x19c>)
   124aa:	2400      	movs	r4, #0
   124ac:	681a      	ldr	r2, [r3, #0]
   124ae:	685b      	ldr	r3, [r3, #4]
   124b0:	1a80      	subs	r0, r0, r2
   124b2:	4199      	sbcs	r1, r3
   124b4:	428c      	cmp	r4, r1
   124b6:	d101      	bne.n	124bc <RADIO_TxHandler+0x90>
   124b8:	4286      	cmp	r6, r0
   124ba:	d842      	bhi.n	12542 <RADIO_TxHandler+0x116>
   124bc:	4b43      	ldr	r3, [pc, #268]	; (125cc <RADIO_TxHandler+0x1a0>)
   124be:	2004      	movs	r0, #4
   124c0:	4798      	blx	r3
   124c2:	4b43      	ldr	r3, [pc, #268]	; (125d0 <RADIO_TxHandler+0x1a4>)
   124c4:	4c3d      	ldr	r4, [pc, #244]	; (125bc <RADIO_TxHandler+0x190>)
   124c6:	781e      	ldrb	r6, [r3, #0]
   124c8:	4d42      	ldr	r5, [pc, #264]	; (125d4 <RADIO_TxHandler+0x1a8>)
   124ca:	2e01      	cmp	r6, #1
   124cc:	d158      	bne.n	12580 <RADIO_TxHandler+0x154>
   124ce:	7829      	ldrb	r1, [r5, #0]
   124d0:	2022      	movs	r0, #34	; 0x22
   124d2:	47a0      	blx	r4
   124d4:	4b40      	ldr	r3, [pc, #256]	; (125d8 <RADIO_TxHandler+0x1ac>)
   124d6:	200a      	movs	r0, #10
   124d8:	4798      	blx	r3
   124da:	21f0      	movs	r1, #240	; 0xf0
   124dc:	4008      	ands	r0, r1
   124de:	39e8      	subs	r1, #232	; 0xe8
   124e0:	4301      	orrs	r1, r0
   124e2:	200a      	movs	r0, #10
   124e4:	47a0      	blx	r4
   124e6:	2140      	movs	r1, #64	; 0x40
   124e8:	0008      	movs	r0, r1
   124ea:	47a0      	blx	r4
   124ec:	2100      	movs	r1, #0
   124ee:	2041      	movs	r0, #65	; 0x41
   124f0:	47a0      	blx	r4
   124f2:	4b37      	ldr	r3, [pc, #220]	; (125d0 <RADIO_TxHandler+0x1a4>)
   124f4:	0032      	movs	r2, r6
   124f6:	7819      	ldrb	r1, [r3, #0]
   124f8:	0030      	movs	r0, r6
   124fa:	4b2f      	ldr	r3, [pc, #188]	; (125b8 <RADIO_TxHandler+0x18c>)
   124fc:	4798      	blx	r3
   124fe:	4b37      	ldr	r3, [pc, #220]	; (125dc <RADIO_TxHandler+0x1b0>)
   12500:	782a      	ldrb	r2, [r5, #0]
   12502:	6819      	ldr	r1, [r3, #0]
   12504:	2000      	movs	r0, #0
   12506:	4b36      	ldr	r3, [pc, #216]	; (125e0 <RADIO_TxHandler+0x1b4>)
   12508:	4798      	blx	r3
   1250a:	003b      	movs	r3, r7
   1250c:	3334      	adds	r3, #52	; 0x34
   1250e:	7819      	ldrb	r1, [r3, #0]
   12510:	2200      	movs	r2, #0
   12512:	2003      	movs	r0, #3
   12514:	4b28      	ldr	r3, [pc, #160]	; (125b8 <RADIO_TxHandler+0x18c>)
   12516:	4798      	blx	r3
   12518:	4b29      	ldr	r3, [pc, #164]	; (125c0 <RADIO_TxHandler+0x194>)
   1251a:	4798      	blx	r3
   1251c:	4b31      	ldr	r3, [pc, #196]	; (125e4 <RADIO_TxHandler+0x1b8>)
   1251e:	6018      	str	r0, [r3, #0]
   12520:	6059      	str	r1, [r3, #4]
   12522:	68fb      	ldr	r3, [r7, #12]
   12524:	2b00      	cmp	r3, #0
   12526:	d009      	beq.n	1253c <RADIO_TxHandler+0x110>
   12528:	21fa      	movs	r1, #250	; 0xfa
   1252a:	2200      	movs	r2, #0
   1252c:	0089      	lsls	r1, r1, #2
   1252e:	372f      	adds	r7, #47	; 0x2f
   12530:	4359      	muls	r1, r3
   12532:	7838      	ldrb	r0, [r7, #0]
   12534:	4b2c      	ldr	r3, [pc, #176]	; (125e8 <RADIO_TxHandler+0x1bc>)
   12536:	9200      	str	r2, [sp, #0]
   12538:	4c2c      	ldr	r4, [pc, #176]	; (125ec <RADIO_TxHandler+0x1c0>)
   1253a:	47a0      	blx	r4
   1253c:	2000      	movs	r0, #0
   1253e:	b007      	add	sp, #28
   12540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12542:	4d2b      	ldr	r5, [pc, #172]	; (125f0 <RADIO_TxHandler+0x1c4>)
   12544:	4b2b      	ldr	r3, [pc, #172]	; (125f4 <RADIO_TxHandler+0x1c8>)
   12546:	0028      	movs	r0, r5
   12548:	4798      	blx	r3
   1254a:	233e      	movs	r3, #62	; 0x3e
   1254c:	5efa      	ldrsh	r2, [r7, r3]
   1254e:	2100      	movs	r1, #0
   12550:	5e6b      	ldrsh	r3, [r5, r1]
   12552:	429a      	cmp	r2, r3
   12554:	daa1      	bge.n	1249a <RADIO_TxHandler+0x6e>
   12556:	0020      	movs	r0, r4
   12558:	4b27      	ldr	r3, [pc, #156]	; (125f8 <RADIO_TxHandler+0x1cc>)
   1255a:	4798      	blx	r3
   1255c:	4b27      	ldr	r3, [pc, #156]	; (125fc <RADIO_TxHandler+0x1d0>)
   1255e:	4798      	blx	r3
   12560:	2307      	movs	r3, #7
   12562:	2201      	movs	r2, #1
   12564:	a903      	add	r1, sp, #12
   12566:	700b      	strb	r3, [r1, #0]
   12568:	4b25      	ldr	r3, [pc, #148]	; (12600 <RADIO_TxHandler+0x1d4>)
   1256a:	701a      	strb	r2, [r3, #0]
   1256c:	4b25      	ldr	r3, [pc, #148]	; (12604 <RADIO_TxHandler+0x1d8>)
   1256e:	781b      	ldrb	r3, [r3, #0]
   12570:	079b      	lsls	r3, r3, #30
   12572:	d5a3      	bpl.n	124bc <RADIO_TxHandler+0x90>
   12574:	693b      	ldr	r3, [r7, #16]
   12576:	2b00      	cmp	r3, #0
   12578:	d0a0      	beq.n	124bc <RADIO_TxHandler+0x90>
   1257a:	2002      	movs	r0, #2
   1257c:	4798      	blx	r3
   1257e:	e79d      	b.n	124bc <RADIO_TxHandler+0x90>
   12580:	2110      	movs	r1, #16
   12582:	2040      	movs	r0, #64	; 0x40
   12584:	47a0      	blx	r4
   12586:	2100      	movs	r1, #0
   12588:	2041      	movs	r0, #65	; 0x41
   1258a:	47a0      	blx	r4
   1258c:	003b      	movs	r3, r7
   1258e:	2000      	movs	r0, #0
   12590:	3357      	adds	r3, #87	; 0x57
   12592:	7829      	ldrb	r1, [r5, #0]
   12594:	7018      	strb	r0, [r3, #0]
   12596:	47a0      	blx	r4
   12598:	4b10      	ldr	r3, [pc, #64]	; (125dc <RADIO_TxHandler+0x1b0>)
   1259a:	7829      	ldrb	r1, [r5, #0]
   1259c:	6818      	ldr	r0, [r3, #0]
   1259e:	4b1a      	ldr	r3, [pc, #104]	; (12608 <RADIO_TxHandler+0x1dc>)
   125a0:	4798      	blx	r3
   125a2:	e7b2      	b.n	1250a <RADIO_TxHandler+0xde>
   125a4:	0001212d 	.word	0x0001212d
   125a8:	00011c7d 	.word	0x00011c7d
   125ac:	20002214 	.word	0x20002214
   125b0:	0000c235 	.word	0x0000c235
   125b4:	000113d1 	.word	0x000113d1
   125b8:	0000c58d 	.word	0x0000c58d
   125bc:	000053ad 	.word	0x000053ad
   125c0:	0000bed1 	.word	0x0000bed1
   125c4:	00013071 	.word	0x00013071
   125c8:	20000ff0 	.word	0x20000ff0
   125cc:	00011419 	.word	0x00011419
   125d0:	20002248 	.word	0x20002248
   125d4:	2000100c 	.word	0x2000100c
   125d8:	000053d5 	.word	0x000053d5
   125dc:	20001008 	.word	0x20001008
   125e0:	00005401 	.word	0x00005401
   125e4:	20001000 	.word	0x20001000
   125e8:	00011dd9 	.word	0x00011dd9
   125ec:	0000bf29 	.word	0x0000bf29
   125f0:	20000fee 	.word	0x20000fee
   125f4:	0000c751 	.word	0x0000c751
   125f8:	00011da5 	.word	0x00011da5
   125fc:	00012161 	.word	0x00012161
   12600:	200027d3 	.word	0x200027d3
   12604:	200027d2 	.word	0x200027d2
   12608:	00011af9 	.word	0x00011af9

0001260c <RADIO_TxDoneHandler>:
   1260c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1260e:	4b35      	ldr	r3, [pc, #212]	; (126e4 <RADIO_TxDoneHandler+0xd8>)
   12610:	b087      	sub	sp, #28
   12612:	881a      	ldrh	r2, [r3, #0]
   12614:	06d2      	lsls	r2, r2, #27
   12616:	0fd2      	lsrs	r2, r2, #31
   12618:	9200      	str	r2, [sp, #0]
   1261a:	466a      	mov	r2, sp
   1261c:	7810      	ldrb	r0, [r2, #0]
   1261e:	881a      	ldrh	r2, [r3, #0]
   12620:	2801      	cmp	r0, #1
   12622:	d12b      	bne.n	1267c <RADIO_TxDoneHandler+0x70>
   12624:	4c30      	ldr	r4, [pc, #192]	; (126e8 <RADIO_TxDoneHandler+0xdc>)
   12626:	2110      	movs	r1, #16
   12628:	0027      	movs	r7, r4
   1262a:	2500      	movs	r5, #0
   1262c:	438a      	bics	r2, r1
   1262e:	801a      	strh	r2, [r3, #0]
   12630:	3734      	adds	r7, #52	; 0x34
   12632:	0002      	movs	r2, r0
   12634:	7839      	ldrb	r1, [r7, #0]
   12636:	4b2d      	ldr	r3, [pc, #180]	; (126ec <RADIO_TxDoneHandler+0xe0>)
   12638:	4798      	blx	r3
   1263a:	68e3      	ldr	r3, [r4, #12]
   1263c:	ae03      	add	r6, sp, #12
   1263e:	9304      	str	r3, [sp, #16]
   12640:	7035      	strb	r5, [r6, #0]
   12642:	002a      	movs	r2, r5
   12644:	4b29      	ldr	r3, [pc, #164]	; (126ec <RADIO_TxDoneHandler+0xe0>)
   12646:	7839      	ldrb	r1, [r7, #0]
   12648:	0028      	movs	r0, r5
   1264a:	4798      	blx	r3
   1264c:	466a      	mov	r2, sp
   1264e:	4b28      	ldr	r3, [pc, #160]	; (126f0 <RADIO_TxDoneHandler+0xe4>)
   12650:	7812      	ldrb	r2, [r2, #0]
   12652:	701a      	strb	r2, [r3, #0]
   12654:	0023      	movs	r3, r4
   12656:	3357      	adds	r3, #87	; 0x57
   12658:	701d      	strb	r5, [r3, #0]
   1265a:	4b26      	ldr	r3, [pc, #152]	; (126f4 <RADIO_TxDoneHandler+0xe8>)
   1265c:	781b      	ldrb	r3, [r3, #0]
   1265e:	075b      	lsls	r3, r3, #29
   12660:	d505      	bpl.n	1266e <RADIO_TxDoneHandler+0x62>
   12662:	6923      	ldr	r3, [r4, #16]
   12664:	42ab      	cmp	r3, r5
   12666:	d002      	beq.n	1266e <RADIO_TxDoneHandler+0x62>
   12668:	0031      	movs	r1, r6
   1266a:	2004      	movs	r0, #4
   1266c:	4798      	blx	r3
   1266e:	4b22      	ldr	r3, [pc, #136]	; (126f8 <RADIO_TxDoneHandler+0xec>)
   12670:	4798      	blx	r3
   12672:	4b22      	ldr	r3, [pc, #136]	; (126fc <RADIO_TxDoneHandler+0xf0>)
   12674:	4798      	blx	r3
   12676:	2000      	movs	r0, #0
   12678:	b007      	add	sp, #28
   1267a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1267c:	07d2      	lsls	r2, r2, #31
   1267e:	d402      	bmi.n	12686 <RADIO_TxDoneHandler+0x7a>
   12680:	881a      	ldrh	r2, [r3, #0]
   12682:	0752      	lsls	r2, r2, #29
   12684:	d527      	bpl.n	126d6 <RADIO_TxDoneHandler+0xca>
   12686:	2601      	movs	r6, #1
   12688:	2104      	movs	r1, #4
   1268a:	881a      	ldrh	r2, [r3, #0]
   1268c:	4f16      	ldr	r7, [pc, #88]	; (126e8 <RADIO_TxDoneHandler+0xdc>)
   1268e:	43b2      	bics	r2, r6
   12690:	801a      	strh	r2, [r3, #0]
   12692:	881a      	ldrh	r2, [r3, #0]
   12694:	2400      	movs	r4, #0
   12696:	438a      	bics	r2, r1
   12698:	801a      	strh	r2, [r3, #0]
   1269a:	4b19      	ldr	r3, [pc, #100]	; (12700 <RADIO_TxDoneHandler+0xf4>)
   1269c:	ad03      	add	r5, sp, #12
   1269e:	681b      	ldr	r3, [r3, #0]
   126a0:	702c      	strb	r4, [r5, #0]
   126a2:	9304      	str	r3, [sp, #16]
   126a4:	003b      	movs	r3, r7
   126a6:	3334      	adds	r3, #52	; 0x34
   126a8:	7819      	ldrb	r1, [r3, #0]
   126aa:	0022      	movs	r2, r4
   126ac:	0020      	movs	r0, r4
   126ae:	4b0f      	ldr	r3, [pc, #60]	; (126ec <RADIO_TxDoneHandler+0xe0>)
   126b0:	4798      	blx	r3
   126b2:	4b14      	ldr	r3, [pc, #80]	; (12704 <RADIO_TxDoneHandler+0xf8>)
   126b4:	4798      	blx	r3
   126b6:	4b0e      	ldr	r3, [pc, #56]	; (126f0 <RADIO_TxDoneHandler+0xe4>)
   126b8:	701e      	strb	r6, [r3, #0]
   126ba:	003b      	movs	r3, r7
   126bc:	3357      	adds	r3, #87	; 0x57
   126be:	701c      	strb	r4, [r3, #0]
   126c0:	4b0c      	ldr	r3, [pc, #48]	; (126f4 <RADIO_TxDoneHandler+0xe8>)
   126c2:	781b      	ldrb	r3, [r3, #0]
   126c4:	079b      	lsls	r3, r3, #30
   126c6:	d5d6      	bpl.n	12676 <RADIO_TxDoneHandler+0x6a>
   126c8:	693b      	ldr	r3, [r7, #16]
   126ca:	42a3      	cmp	r3, r4
   126cc:	d0d3      	beq.n	12676 <RADIO_TxDoneHandler+0x6a>
   126ce:	0029      	movs	r1, r5
   126d0:	2002      	movs	r0, #2
   126d2:	4798      	blx	r3
   126d4:	e7cf      	b.n	12676 <RADIO_TxDoneHandler+0x6a>
   126d6:	881b      	ldrh	r3, [r3, #0]
   126d8:	059b      	lsls	r3, r3, #22
   126da:	d5cc      	bpl.n	12676 <RADIO_TxDoneHandler+0x6a>
   126dc:	4b0a      	ldr	r3, [pc, #40]	; (12708 <RADIO_TxDoneHandler+0xfc>)
   126de:	4798      	blx	r3
   126e0:	e7c9      	b.n	12676 <RADIO_TxDoneHandler+0x6a>
   126e2:	46c0      	nop			; (mov r8, r8)
   126e4:	200027d0 	.word	0x200027d0
   126e8:	20002214 	.word	0x20002214
   126ec:	0000c58d 	.word	0x0000c58d
   126f0:	200027d3 	.word	0x200027d3
   126f4:	200027d2 	.word	0x200027d2
   126f8:	0000536d 	.word	0x0000536d
   126fc:	0001217d 	.word	0x0001217d
   12700:	20001000 	.word	0x20001000
   12704:	00012161 	.word	0x00012161
   12708:	00012a9d 	.word	0x00012a9d

0001270c <RADIO_RxDoneHandler>:
   1270c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1270e:	4b95      	ldr	r3, [pc, #596]	; (12964 <RADIO_RxDoneHandler+0x258>)
   12710:	b085      	sub	sp, #20
   12712:	881c      	ldrh	r4, [r3, #0]
   12714:	881a      	ldrh	r2, [r3, #0]
   12716:	06a4      	lsls	r4, r4, #26
   12718:	0fe4      	lsrs	r4, r4, #31
   1271a:	b2e0      	uxtb	r0, r4
   1271c:	2801      	cmp	r0, #1
   1271e:	d126      	bne.n	1276e <RADIO_RxDoneHandler+0x62>
   12720:	4d91      	ldr	r5, [pc, #580]	; (12968 <RADIO_RxDoneHandler+0x25c>)
   12722:	2120      	movs	r1, #32
   12724:	002e      	movs	r6, r5
   12726:	438a      	bics	r2, r1
   12728:	801a      	strh	r2, [r3, #0]
   1272a:	3634      	adds	r6, #52	; 0x34
   1272c:	0002      	movs	r2, r0
   1272e:	7831      	ldrb	r1, [r6, #0]
   12730:	4f8e      	ldr	r7, [pc, #568]	; (1296c <RADIO_RxDoneHandler+0x260>)
   12732:	47b8      	blx	r7
   12734:	2200      	movs	r2, #0
   12736:	7831      	ldrb	r1, [r6, #0]
   12738:	0010      	movs	r0, r2
   1273a:	47b8      	blx	r7
   1273c:	4b8c      	ldr	r3, [pc, #560]	; (12970 <RADIO_RxDoneHandler+0x264>)
   1273e:	4798      	blx	r3
   12740:	4b8c      	ldr	r3, [pc, #560]	; (12974 <RADIO_RxDoneHandler+0x268>)
   12742:	002a      	movs	r2, r5
   12744:	701c      	strb	r4, [r3, #0]
   12746:	2300      	movs	r3, #0
   12748:	322c      	adds	r2, #44	; 0x2c
   1274a:	7013      	strb	r3, [r2, #0]
   1274c:	002a      	movs	r2, r5
   1274e:	a901      	add	r1, sp, #4
   12750:	3257      	adds	r2, #87	; 0x57
   12752:	7013      	strb	r3, [r2, #0]
   12754:	700b      	strb	r3, [r1, #0]
   12756:	4b88      	ldr	r3, [pc, #544]	; (12978 <RADIO_RxDoneHandler+0x26c>)
   12758:	781b      	ldrb	r3, [r3, #0]
   1275a:	071b      	lsls	r3, r3, #28
   1275c:	d504      	bpl.n	12768 <RADIO_RxDoneHandler+0x5c>
   1275e:	692b      	ldr	r3, [r5, #16]
   12760:	2008      	movs	r0, #8
   12762:	2b00      	cmp	r3, #0
   12764:	d000      	beq.n	12768 <RADIO_RxDoneHandler+0x5c>
   12766:	e084      	b.n	12872 <RADIO_RxDoneHandler+0x166>
   12768:	2000      	movs	r0, #0
   1276a:	b005      	add	sp, #20
   1276c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1276e:	0652      	lsls	r2, r2, #25
   12770:	d402      	bmi.n	12778 <RADIO_RxDoneHandler+0x6c>
   12772:	881a      	ldrh	r2, [r3, #0]
   12774:	0612      	lsls	r2, r2, #24
   12776:	d523      	bpl.n	127c0 <RADIO_RxDoneHandler+0xb4>
   12778:	2140      	movs	r1, #64	; 0x40
   1277a:	881a      	ldrh	r2, [r3, #0]
   1277c:	4c7a      	ldr	r4, [pc, #488]	; (12968 <RADIO_RxDoneHandler+0x25c>)
   1277e:	438a      	bics	r2, r1
   12780:	801a      	strh	r2, [r3, #0]
   12782:	881a      	ldrh	r2, [r3, #0]
   12784:	1849      	adds	r1, r1, r1
   12786:	438a      	bics	r2, r1
   12788:	801a      	strh	r2, [r3, #0]
   1278a:	0023      	movs	r3, r4
   1278c:	2200      	movs	r2, #0
   1278e:	3334      	adds	r3, #52	; 0x34
   12790:	7819      	ldrb	r1, [r3, #0]
   12792:	0010      	movs	r0, r2
   12794:	4b75      	ldr	r3, [pc, #468]	; (1296c <RADIO_RxDoneHandler+0x260>)
   12796:	4798      	blx	r3
   12798:	4b75      	ldr	r3, [pc, #468]	; (12970 <RADIO_RxDoneHandler+0x264>)
   1279a:	4798      	blx	r3
   1279c:	2201      	movs	r2, #1
   1279e:	4b75      	ldr	r3, [pc, #468]	; (12974 <RADIO_RxDoneHandler+0x268>)
   127a0:	a901      	add	r1, sp, #4
   127a2:	701a      	strb	r2, [r3, #0]
   127a4:	0022      	movs	r2, r4
   127a6:	2300      	movs	r3, #0
   127a8:	322c      	adds	r2, #44	; 0x2c
   127aa:	7013      	strb	r3, [r2, #0]
   127ac:	0022      	movs	r2, r4
   127ae:	3257      	adds	r2, #87	; 0x57
   127b0:	7013      	strb	r3, [r2, #0]
   127b2:	700b      	strb	r3, [r1, #0]
   127b4:	4b70      	ldr	r3, [pc, #448]	; (12978 <RADIO_RxDoneHandler+0x26c>)
   127b6:	781b      	ldrb	r3, [r3, #0]
   127b8:	071b      	lsls	r3, r3, #28
   127ba:	d5d5      	bpl.n	12768 <RADIO_RxDoneHandler+0x5c>
   127bc:	6923      	ldr	r3, [r4, #16]
   127be:	e7cf      	b.n	12760 <RADIO_RxDoneHandler+0x54>
   127c0:	881a      	ldrh	r2, [r3, #0]
   127c2:	0792      	lsls	r2, r2, #30
   127c4:	d56e      	bpl.n	128a4 <RADIO_RxDoneHandler+0x198>
   127c6:	2102      	movs	r1, #2
   127c8:	881a      	ldrh	r2, [r3, #0]
   127ca:	4d6c      	ldr	r5, [pc, #432]	; (1297c <RADIO_RxDoneHandler+0x270>)
   127cc:	438a      	bics	r2, r1
   127ce:	801a      	strh	r2, [r3, #0]
   127d0:	2013      	movs	r0, #19
   127d2:	47a8      	blx	r5
   127d4:	4c64      	ldr	r4, [pc, #400]	; (12968 <RADIO_RxDoneHandler+0x25c>)
   127d6:	2100      	movs	r1, #0
   127d8:	0026      	movs	r6, r4
   127da:	362c      	adds	r6, #44	; 0x2c
   127dc:	7030      	strb	r0, [r6, #0]
   127de:	4b68      	ldr	r3, [pc, #416]	; (12980 <RADIO_RxDoneHandler+0x274>)
   127e0:	200d      	movs	r0, #13
   127e2:	4798      	blx	r3
   127e4:	7832      	ldrb	r2, [r6, #0]
   127e6:	4b67      	ldr	r3, [pc, #412]	; (12984 <RADIO_RxDoneHandler+0x278>)
   127e8:	b2d2      	uxtb	r2, r2
   127ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   127ec:	2000      	movs	r0, #0
   127ee:	4798      	blx	r3
   127f0:	2019      	movs	r0, #25
   127f2:	47a8      	blx	r5
   127f4:	0023      	movs	r3, r4
   127f6:	b240      	sxtb	r0, r0
   127f8:	3332      	adds	r3, #50	; 0x32
   127fa:	2800      	cmp	r0, #0
   127fc:	da3b      	bge.n	12876 <RADIO_RxDoneHandler+0x16a>
   127fe:	4240      	negs	r0, r0
   12800:	1080      	asrs	r0, r0, #2
   12802:	4240      	negs	r0, r0
   12804:	7018      	strb	r0, [r3, #0]
   12806:	201a      	movs	r0, #26
   12808:	47a8      	blx	r5
   1280a:	0022      	movs	r2, r4
   1280c:	3232      	adds	r2, #50	; 0x32
   1280e:	7812      	ldrb	r2, [r2, #0]
   12810:	b203      	sxth	r3, r0
   12812:	b252      	sxtb	r2, r2
   12814:	4d5c      	ldr	r5, [pc, #368]	; (12988 <RADIO_RxDoneHandler+0x27c>)
   12816:	2a00      	cmp	r2, #0
   12818:	da36      	bge.n	12888 <RADIO_RxDoneHandler+0x17c>
   1281a:	6821      	ldr	r1, [r4, #0]
   1281c:	4e5b      	ldr	r6, [pc, #364]	; (1298c <RADIO_RxDoneHandler+0x280>)
   1281e:	198e      	adds	r6, r1, r6
   12820:	42ae      	cmp	r6, r5
   12822:	d82a      	bhi.n	1287a <RADIO_RxDoneHandler+0x16e>
   12824:	3263      	adds	r2, #99	; 0x63
   12826:	1880      	adds	r0, r0, r2
   12828:	111b      	asrs	r3, r3, #4
   1282a:	1818      	adds	r0, r3, r0
   1282c:	0023      	movs	r3, r4
   1282e:	3356      	adds	r3, #86	; 0x56
   12830:	7018      	strb	r0, [r3, #0]
   12832:	0023      	movs	r3, r4
   12834:	2200      	movs	r2, #0
   12836:	3334      	adds	r3, #52	; 0x34
   12838:	7819      	ldrb	r1, [r3, #0]
   1283a:	0010      	movs	r0, r2
   1283c:	4b4b      	ldr	r3, [pc, #300]	; (1296c <RADIO_RxDoneHandler+0x260>)
   1283e:	4798      	blx	r3
   12840:	4b4b      	ldr	r3, [pc, #300]	; (12970 <RADIO_RxDoneHandler+0x264>)
   12842:	4798      	blx	r3
   12844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12846:	a901      	add	r1, sp, #4
   12848:	604b      	str	r3, [r1, #4]
   1284a:	0023      	movs	r3, r4
   1284c:	332c      	adds	r3, #44	; 0x2c
   1284e:	781b      	ldrb	r3, [r3, #0]
   12850:	2201      	movs	r2, #1
   12852:	720b      	strb	r3, [r1, #8]
   12854:	2300      	movs	r3, #0
   12856:	700b      	strb	r3, [r1, #0]
   12858:	4b46      	ldr	r3, [pc, #280]	; (12974 <RADIO_RxDoneHandler+0x268>)
   1285a:	701a      	strb	r2, [r3, #0]
   1285c:	4b46      	ldr	r3, [pc, #280]	; (12978 <RADIO_RxDoneHandler+0x26c>)
   1285e:	7818      	ldrb	r0, [r3, #0]
   12860:	07c0      	lsls	r0, r0, #31
   12862:	0fc0      	lsrs	r0, r0, #31
   12864:	4290      	cmp	r0, r2
   12866:	d000      	beq.n	1286a <RADIO_RxDoneHandler+0x15e>
   12868:	e77e      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   1286a:	6923      	ldr	r3, [r4, #16]
   1286c:	2b00      	cmp	r3, #0
   1286e:	d100      	bne.n	12872 <RADIO_RxDoneHandler+0x166>
   12870:	e77a      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   12872:	4798      	blx	r3
   12874:	e778      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   12876:	1080      	asrs	r0, r0, #2
   12878:	e7c4      	b.n	12804 <RADIO_RxDoneHandler+0xf8>
   1287a:	4d45      	ldr	r5, [pc, #276]	; (12990 <RADIO_RxDoneHandler+0x284>)
   1287c:	1949      	adds	r1, r1, r5
   1287e:	4d45      	ldr	r5, [pc, #276]	; (12994 <RADIO_RxDoneHandler+0x288>)
   12880:	42a9      	cmp	r1, r5
   12882:	d8d6      	bhi.n	12832 <RADIO_RxDoneHandler+0x126>
   12884:	325c      	adds	r2, #92	; 0x5c
   12886:	e7ce      	b.n	12826 <RADIO_RxDoneHandler+0x11a>
   12888:	6822      	ldr	r2, [r4, #0]
   1288a:	4940      	ldr	r1, [pc, #256]	; (1298c <RADIO_RxDoneHandler+0x280>)
   1288c:	1851      	adds	r1, r2, r1
   1288e:	42a9      	cmp	r1, r5
   12890:	d801      	bhi.n	12896 <RADIO_RxDoneHandler+0x18a>
   12892:	3063      	adds	r0, #99	; 0x63
   12894:	e7c8      	b.n	12828 <RADIO_RxDoneHandler+0x11c>
   12896:	493e      	ldr	r1, [pc, #248]	; (12990 <RADIO_RxDoneHandler+0x284>)
   12898:	1852      	adds	r2, r2, r1
   1289a:	493e      	ldr	r1, [pc, #248]	; (12994 <RADIO_RxDoneHandler+0x288>)
   1289c:	428a      	cmp	r2, r1
   1289e:	d8c8      	bhi.n	12832 <RADIO_RxDoneHandler+0x126>
   128a0:	305c      	adds	r0, #92	; 0x5c
   128a2:	e7c1      	b.n	12828 <RADIO_RxDoneHandler+0x11c>
   128a4:	881a      	ldrh	r2, [r3, #0]
   128a6:	0712      	lsls	r2, r2, #28
   128a8:	0fd5      	lsrs	r5, r2, #31
   128aa:	2a00      	cmp	r2, #0
   128ac:	da27      	bge.n	128fe <RADIO_RxDoneHandler+0x1f2>
   128ae:	2108      	movs	r1, #8
   128b0:	881a      	ldrh	r2, [r3, #0]
   128b2:	4c2d      	ldr	r4, [pc, #180]	; (12968 <RADIO_RxDoneHandler+0x25c>)
   128b4:	438a      	bics	r2, r1
   128b6:	801a      	strh	r2, [r3, #0]
   128b8:	0023      	movs	r3, r4
   128ba:	2280      	movs	r2, #128	; 0x80
   128bc:	3332      	adds	r3, #50	; 0x32
   128be:	701a      	strb	r2, [r3, #0]
   128c0:	0023      	movs	r3, r4
   128c2:	2200      	movs	r2, #0
   128c4:	3334      	adds	r3, #52	; 0x34
   128c6:	7819      	ldrb	r1, [r3, #0]
   128c8:	0010      	movs	r0, r2
   128ca:	4b28      	ldr	r3, [pc, #160]	; (1296c <RADIO_RxDoneHandler+0x260>)
   128cc:	4798      	blx	r3
   128ce:	4b28      	ldr	r3, [pc, #160]	; (12970 <RADIO_RxDoneHandler+0x264>)
   128d0:	4798      	blx	r3
   128d2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   128d4:	a901      	add	r1, sp, #4
   128d6:	604b      	str	r3, [r1, #4]
   128d8:	0023      	movs	r3, r4
   128da:	332c      	adds	r3, #44	; 0x2c
   128dc:	781b      	ldrb	r3, [r3, #0]
   128de:	0022      	movs	r2, r4
   128e0:	720b      	strb	r3, [r1, #8]
   128e2:	2300      	movs	r3, #0
   128e4:	3257      	adds	r2, #87	; 0x57
   128e6:	7013      	strb	r3, [r2, #0]
   128e8:	700b      	strb	r3, [r1, #0]
   128ea:	4b22      	ldr	r3, [pc, #136]	; (12974 <RADIO_RxDoneHandler+0x268>)
   128ec:	701d      	strb	r5, [r3, #0]
   128ee:	4b22      	ldr	r3, [pc, #136]	; (12978 <RADIO_RxDoneHandler+0x26c>)
   128f0:	7818      	ldrb	r0, [r3, #0]
   128f2:	07c0      	lsls	r0, r0, #31
   128f4:	0fc0      	lsrs	r0, r0, #31
   128f6:	2801      	cmp	r0, #1
   128f8:	d000      	beq.n	128fc <RADIO_RxDoneHandler+0x1f0>
   128fa:	e735      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   128fc:	e7b5      	b.n	1286a <RADIO_RxDoneHandler+0x15e>
   128fe:	881a      	ldrh	r2, [r3, #0]
   12900:	05d2      	lsls	r2, r2, #23
   12902:	0fd5      	lsrs	r5, r2, #31
   12904:	2a00      	cmp	r2, #0
   12906:	db00      	blt.n	1290a <RADIO_RxDoneHandler+0x1fe>
   12908:	e72e      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   1290a:	4c17      	ldr	r4, [pc, #92]	; (12968 <RADIO_RxDoneHandler+0x25c>)
   1290c:	881a      	ldrh	r2, [r3, #0]
   1290e:	0026      	movs	r6, r4
   12910:	4921      	ldr	r1, [pc, #132]	; (12998 <RADIO_RxDoneHandler+0x28c>)
   12912:	362c      	adds	r6, #44	; 0x2c
   12914:	400a      	ands	r2, r1
   12916:	801a      	strh	r2, [r3, #0]
   12918:	7832      	ldrb	r2, [r6, #0]
   1291a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   1291c:	b2d2      	uxtb	r2, r2
   1291e:	2000      	movs	r0, #0
   12920:	4b18      	ldr	r3, [pc, #96]	; (12984 <RADIO_RxDoneHandler+0x278>)
   12922:	4798      	blx	r3
   12924:	0023      	movs	r3, r4
   12926:	2200      	movs	r2, #0
   12928:	3334      	adds	r3, #52	; 0x34
   1292a:	7819      	ldrb	r1, [r3, #0]
   1292c:	0010      	movs	r0, r2
   1292e:	4b0f      	ldr	r3, [pc, #60]	; (1296c <RADIO_RxDoneHandler+0x260>)
   12930:	4798      	blx	r3
   12932:	4b0f      	ldr	r3, [pc, #60]	; (12970 <RADIO_RxDoneHandler+0x264>)
   12934:	4798      	blx	r3
   12936:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   12938:	a901      	add	r1, sp, #4
   1293a:	604b      	str	r3, [r1, #4]
   1293c:	7833      	ldrb	r3, [r6, #0]
   1293e:	0022      	movs	r2, r4
   12940:	720b      	strb	r3, [r1, #8]
   12942:	2300      	movs	r3, #0
   12944:	3257      	adds	r2, #87	; 0x57
   12946:	7013      	strb	r3, [r2, #0]
   12948:	700b      	strb	r3, [r1, #0]
   1294a:	4b0a      	ldr	r3, [pc, #40]	; (12974 <RADIO_RxDoneHandler+0x268>)
   1294c:	701d      	strb	r5, [r3, #0]
   1294e:	4b0a      	ldr	r3, [pc, #40]	; (12978 <RADIO_RxDoneHandler+0x26c>)
   12950:	781b      	ldrb	r3, [r3, #0]
   12952:	06db      	lsls	r3, r3, #27
   12954:	d400      	bmi.n	12958 <RADIO_RxDoneHandler+0x24c>
   12956:	e707      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   12958:	6923      	ldr	r3, [r4, #16]
   1295a:	2b00      	cmp	r3, #0
   1295c:	d100      	bne.n	12960 <RADIO_RxDoneHandler+0x254>
   1295e:	e703      	b.n	12768 <RADIO_RxDoneHandler+0x5c>
   12960:	2010      	movs	r0, #16
   12962:	e786      	b.n	12872 <RADIO_RxDoneHandler+0x166>
   12964:	200027d0 	.word	0x200027d0
   12968:	20002214 	.word	0x20002214
   1296c:	0000c58d 	.word	0x0000c58d
   12970:	00012161 	.word	0x00012161
   12974:	200027d3 	.word	0x200027d3
   12978:	200027d2 	.word	0x200027d2
   1297c:	000053d5 	.word	0x000053d5
   12980:	000053ad 	.word	0x000053ad
   12984:	00005441 	.word	0x00005441
   12988:	096ae380 	.word	0x096ae380
   1298c:	cc9eec80 	.word	0xcc9eec80
   12990:	e78fe580 	.word	0xe78fe580
   12994:	06dac2c0 	.word	0x06dac2c0
   12998:	fffffeff 	.word	0xfffffeff

0001299c <Radio_LBTScanTimeout>:
   1299c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1299e:	4c1c      	ldr	r4, [pc, #112]	; (12a10 <Radio_LBTScanTimeout+0x74>)
   129a0:	0025      	movs	r5, r4
   129a2:	0023      	movs	r3, r4
   129a4:	354f      	adds	r5, #79	; 0x4f
   129a6:	7829      	ldrb	r1, [r5, #0]
   129a8:	3340      	adds	r3, #64	; 0x40
   129aa:	3101      	adds	r1, #1
   129ac:	b2c9      	uxtb	r1, r1
   129ae:	7029      	strb	r1, [r5, #0]
   129b0:	781b      	ldrb	r3, [r3, #0]
   129b2:	428b      	cmp	r3, r1
   129b4:	d315      	bcc.n	129e2 <Radio_LBTScanTimeout+0x46>
   129b6:	260e      	movs	r6, #14
   129b8:	446e      	add	r6, sp
   129ba:	4b16      	ldr	r3, [pc, #88]	; (12a14 <Radio_LBTScanTimeout+0x78>)
   129bc:	0030      	movs	r0, r6
   129be:	4798      	blx	r3
   129c0:	2300      	movs	r3, #0
   129c2:	5ef2      	ldrsh	r2, [r6, r3]
   129c4:	782b      	ldrb	r3, [r5, #0]
   129c6:	4353      	muls	r3, r2
   129c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
   129ca:	189b      	adds	r3, r3, r2
   129cc:	6463      	str	r3, [r4, #68]	; 0x44
   129ce:	0023      	movs	r3, r4
   129d0:	2200      	movs	r2, #0
   129d2:	3350      	adds	r3, #80	; 0x50
   129d4:	7818      	ldrb	r0, [r3, #0]
   129d6:	9200      	str	r2, [sp, #0]
   129d8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   129da:	4b0f      	ldr	r3, [pc, #60]	; (12a18 <Radio_LBTScanTimeout+0x7c>)
   129dc:	4c0f      	ldr	r4, [pc, #60]	; (12a1c <Radio_LBTScanTimeout+0x80>)
   129de:	47a0      	blx	r4
   129e0:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
   129e2:	2380      	movs	r3, #128	; 0x80
   129e4:	4a0e      	ldr	r2, [pc, #56]	; (12a20 <Radio_LBTScanTimeout+0x84>)
   129e6:	009b      	lsls	r3, r3, #2
   129e8:	8810      	ldrh	r0, [r2, #0]
   129ea:	4303      	orrs	r3, r0
   129ec:	8013      	strh	r3, [r2, #0]
   129ee:	6c63      	ldr	r3, [r4, #68]	; 0x44
   129f0:	0058      	lsls	r0, r3, #1
   129f2:	1e4b      	subs	r3, r1, #1
   129f4:	4359      	muls	r1, r3
   129f6:	4b0b      	ldr	r3, [pc, #44]	; (12a24 <Radio_LBTScanTimeout+0x88>)
   129f8:	b289      	uxth	r1, r1
   129fa:	4798      	blx	r3
   129fc:	0023      	movs	r3, r4
   129fe:	334c      	adds	r3, #76	; 0x4c
   12a00:	8018      	strh	r0, [r3, #0]
   12a02:	2300      	movs	r3, #0
   12a04:	2001      	movs	r0, #1
   12a06:	702b      	strb	r3, [r5, #0]
   12a08:	6463      	str	r3, [r4, #68]	; 0x44
   12a0a:	4b07      	ldr	r3, [pc, #28]	; (12a28 <Radio_LBTScanTimeout+0x8c>)
   12a0c:	4798      	blx	r3
   12a0e:	e7e7      	b.n	129e0 <Radio_LBTScanTimeout+0x44>
   12a10:	20002214 	.word	0x20002214
   12a14:	0000c751 	.word	0x0000c751
   12a18:	0001299d 	.word	0x0001299d
   12a1c:	0000bf29 	.word	0x0000bf29
   12a20:	200027d0 	.word	0x200027d0
   12a24:	00012e25 	.word	0x00012e25
   12a28:	000119d9 	.word	0x000119d9

00012a2c <RADIO_ScanHandler>:
   12a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   12a2e:	4b12      	ldr	r3, [pc, #72]	; (12a78 <RADIO_ScanHandler+0x4c>)
   12a30:	4798      	blx	r3
   12a32:	2000      	movs	r0, #0
   12a34:	4b11      	ldr	r3, [pc, #68]	; (12a7c <RADIO_ScanHandler+0x50>)
   12a36:	4798      	blx	r3
   12a38:	4d11      	ldr	r5, [pc, #68]	; (12a80 <RADIO_ScanHandler+0x54>)
   12a3a:	4b12      	ldr	r3, [pc, #72]	; (12a84 <RADIO_ScanHandler+0x58>)
   12a3c:	6828      	ldr	r0, [r5, #0]
   12a3e:	2400      	movs	r4, #0
   12a40:	4798      	blx	r3
   12a42:	002b      	movs	r3, r5
   12a44:	4e10      	ldr	r6, [pc, #64]	; (12a88 <RADIO_ScanHandler+0x5c>)
   12a46:	334c      	adds	r3, #76	; 0x4c
   12a48:	2201      	movs	r2, #1
   12a4a:	0021      	movs	r1, r4
   12a4c:	0020      	movs	r0, r4
   12a4e:	801c      	strh	r4, [r3, #0]
   12a50:	47b0      	blx	r6
   12a52:	4b0e      	ldr	r3, [pc, #56]	; (12a8c <RADIO_ScanHandler+0x60>)
   12a54:	2109      	movs	r1, #9
   12a56:	2012      	movs	r0, #18
   12a58:	4798      	blx	r3
   12a5a:	3550      	adds	r5, #80	; 0x50
   12a5c:	0022      	movs	r2, r4
   12a5e:	0021      	movs	r1, r4
   12a60:	2005      	movs	r0, #5
   12a62:	47b0      	blx	r6
   12a64:	7828      	ldrb	r0, [r5, #0]
   12a66:	4b0a      	ldr	r3, [pc, #40]	; (12a90 <RADIO_ScanHandler+0x64>)
   12a68:	4d0a      	ldr	r5, [pc, #40]	; (12a94 <RADIO_ScanHandler+0x68>)
   12a6a:	9400      	str	r4, [sp, #0]
   12a6c:	0022      	movs	r2, r4
   12a6e:	490a      	ldr	r1, [pc, #40]	; (12a98 <RADIO_ScanHandler+0x6c>)
   12a70:	47a8      	blx	r5
   12a72:	0020      	movs	r0, r4
   12a74:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
   12a76:	46c0      	nop			; (mov r8, r8)
   12a78:	0001212d 	.word	0x0001212d
   12a7c:	00011c7d 	.word	0x00011c7d
   12a80:	20002214 	.word	0x20002214
   12a84:	000113d1 	.word	0x000113d1
   12a88:	0000c58d 	.word	0x0000c58d
   12a8c:	000053ad 	.word	0x000053ad
   12a90:	0001299d 	.word	0x0001299d
   12a94:	0000bf29 	.word	0x0000bf29
   12a98:	00002328 	.word	0x00002328

00012a9c <radioScanDoneHandler>:
   12a9c:	b530      	push	{r4, r5, lr}
   12a9e:	4a18      	ldr	r2, [pc, #96]	; (12b00 <radioScanDoneHandler+0x64>)
   12aa0:	4918      	ldr	r1, [pc, #96]	; (12b04 <radioScanDoneHandler+0x68>)
   12aa2:	8813      	ldrh	r3, [r2, #0]
   12aa4:	b085      	sub	sp, #20
   12aa6:	400b      	ands	r3, r1
   12aa8:	8013      	strh	r3, [r2, #0]
   12aaa:	2200      	movs	r2, #0
   12aac:	4b16      	ldr	r3, [pc, #88]	; (12b08 <radioScanDoneHandler+0x6c>)
   12aae:	0011      	movs	r1, r2
   12ab0:	0010      	movs	r0, r2
   12ab2:	4798      	blx	r3
   12ab4:	2000      	movs	r0, #0
   12ab6:	4b15      	ldr	r3, [pc, #84]	; (12b0c <radioScanDoneHandler+0x70>)
   12ab8:	4798      	blx	r3
   12aba:	4b15      	ldr	r3, [pc, #84]	; (12b10 <radioScanDoneHandler+0x74>)
   12abc:	4798      	blx	r3
   12abe:	4c15      	ldr	r4, [pc, #84]	; (12b14 <radioScanDoneHandler+0x78>)
   12ac0:	0023      	movs	r3, r4
   12ac2:	334c      	adds	r3, #76	; 0x4c
   12ac4:	2100      	movs	r1, #0
   12ac6:	5e59      	ldrsh	r1, [r3, r1]
   12ac8:	233e      	movs	r3, #62	; 0x3e
   12aca:	5ee2      	ldrsh	r2, [r4, r3]
   12acc:	4b12      	ldr	r3, [pc, #72]	; (12b18 <radioScanDoneHandler+0x7c>)
   12ace:	4291      	cmp	r1, r2
   12ad0:	da06      	bge.n	12ae0 <radioScanDoneHandler+0x44>
   12ad2:	2002      	movs	r0, #2
   12ad4:	4798      	blx	r3
   12ad6:	4b11      	ldr	r3, [pc, #68]	; (12b1c <radioScanDoneHandler+0x80>)
   12ad8:	4798      	blx	r3
   12ada:	2000      	movs	r0, #0
   12adc:	b005      	add	sp, #20
   12ade:	bd30      	pop	{r4, r5, pc}
   12ae0:	2207      	movs	r2, #7
   12ae2:	ad01      	add	r5, sp, #4
   12ae4:	2001      	movs	r0, #1
   12ae6:	702a      	strb	r2, [r5, #0]
   12ae8:	4798      	blx	r3
   12aea:	4b0d      	ldr	r3, [pc, #52]	; (12b20 <radioScanDoneHandler+0x84>)
   12aec:	781b      	ldrb	r3, [r3, #0]
   12aee:	079b      	lsls	r3, r3, #30
   12af0:	d5f3      	bpl.n	12ada <radioScanDoneHandler+0x3e>
   12af2:	6923      	ldr	r3, [r4, #16]
   12af4:	2b00      	cmp	r3, #0
   12af6:	d0f0      	beq.n	12ada <radioScanDoneHandler+0x3e>
   12af8:	0029      	movs	r1, r5
   12afa:	2002      	movs	r0, #2
   12afc:	4798      	blx	r3
   12afe:	e7ec      	b.n	12ada <radioScanDoneHandler+0x3e>
   12b00:	200027d0 	.word	0x200027d0
   12b04:	fffffdff 	.word	0xfffffdff
   12b08:	0000c58d 	.word	0x0000c58d
   12b0c:	00011da5 	.word	0x00011da5
   12b10:	00012161 	.word	0x00012161
   12b14:	20002214 	.word	0x20002214
   12b18:	00011a85 	.word	0x00011a85
   12b1c:	0001242d 	.word	0x0001242d
   12b20:	200027d2 	.word	0x200027d2

00012b24 <common_tc_read_count>:
   12b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b26:	4b0d      	ldr	r3, [pc, #52]	; (12b5c <common_tc_read_count+0x38>)
   12b28:	4798      	blx	r3
   12b2a:	4b0d      	ldr	r3, [pc, #52]	; (12b60 <common_tc_read_count+0x3c>)
   12b2c:	781b      	ldrb	r3, [r3, #0]
   12b2e:	2b00      	cmp	r3, #0
   12b30:	d00e      	beq.n	12b50 <common_tc_read_count+0x2c>
   12b32:	4b0c      	ldr	r3, [pc, #48]	; (12b64 <common_tc_read_count+0x40>)
   12b34:	781d      	ldrb	r5, [r3, #0]
   12b36:	4b0a      	ldr	r3, [pc, #40]	; (12b60 <common_tc_read_count+0x3c>)
   12b38:	781f      	ldrb	r7, [r3, #0]
   12b3a:	4c0b      	ldr	r4, [pc, #44]	; (12b68 <common_tc_read_count+0x44>)
   12b3c:	1c29      	adds	r1, r5, #0
   12b3e:	47a0      	blx	r4
   12b40:	1c06      	adds	r6, r0, #0
   12b42:	480a      	ldr	r0, [pc, #40]	; (12b6c <common_tc_read_count+0x48>)
   12b44:	1c29      	adds	r1, r5, #0
   12b46:	47a0      	blx	r4
   12b48:	4378      	muls	r0, r7
   12b4a:	1830      	adds	r0, r6, r0
   12b4c:	b280      	uxth	r0, r0
   12b4e:	e004      	b.n	12b5a <common_tc_read_count+0x36>
   12b50:	4b04      	ldr	r3, [pc, #16]	; (12b64 <common_tc_read_count+0x40>)
   12b52:	7819      	ldrb	r1, [r3, #0]
   12b54:	4b04      	ldr	r3, [pc, #16]	; (12b68 <common_tc_read_count+0x44>)
   12b56:	4798      	blx	r3
   12b58:	b280      	uxth	r0, r0
   12b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12b5c:	0000c785 	.word	0x0000c785
   12b60:	20001010 	.word	0x20001010
   12b64:	200027d4 	.word	0x200027d4
   12b68:	00012e25 	.word	0x00012e25
   12b6c:	0000ffff 	.word	0x0000ffff

00012b70 <common_tc_compare_stop>:
   12b70:	b508      	push	{r3, lr}
   12b72:	4b05      	ldr	r3, [pc, #20]	; (12b88 <common_tc_compare_stop+0x18>)
   12b74:	4798      	blx	r3
   12b76:	4b05      	ldr	r3, [pc, #20]	; (12b8c <common_tc_compare_stop+0x1c>)
   12b78:	4798      	blx	r3
   12b7a:	4b05      	ldr	r3, [pc, #20]	; (12b90 <common_tc_compare_stop+0x20>)
   12b7c:	2200      	movs	r2, #0
   12b7e:	605a      	str	r2, [r3, #4]
   12b80:	811a      	strh	r2, [r3, #8]
   12b82:	4b04      	ldr	r3, [pc, #16]	; (12b94 <common_tc_compare_stop+0x24>)
   12b84:	4798      	blx	r3
   12b86:	bd08      	pop	{r3, pc}
   12b88:	0000c799 	.word	0x0000c799
   12b8c:	0000c835 	.word	0x0000c835
   12b90:	20001010 	.word	0x20001010
   12b94:	0000c859 	.word	0x0000c859

00012b98 <common_tc_overflow_stop>:
   12b98:	b508      	push	{r3, lr}
   12b9a:	4b03      	ldr	r3, [pc, #12]	; (12ba8 <common_tc_overflow_stop+0x10>)
   12b9c:	4798      	blx	r3
   12b9e:	2200      	movs	r2, #0
   12ba0:	4b02      	ldr	r3, [pc, #8]	; (12bac <common_tc_overflow_stop+0x14>)
   12ba2:	701a      	strb	r2, [r3, #0]
   12ba4:	bd08      	pop	{r3, pc}
   12ba6:	46c0      	nop			; (mov r8, r8)
   12ba8:	0000c7e9 	.word	0x0000c7e9
   12bac:	20001010 	.word	0x20001010

00012bb0 <common_tc_stop>:
   12bb0:	b508      	push	{r3, lr}
   12bb2:	4b03      	ldr	r3, [pc, #12]	; (12bc0 <common_tc_stop+0x10>)
   12bb4:	4798      	blx	r3
   12bb6:	4b03      	ldr	r3, [pc, #12]	; (12bc4 <common_tc_stop+0x14>)
   12bb8:	4798      	blx	r3
   12bba:	4b03      	ldr	r3, [pc, #12]	; (12bc8 <common_tc_stop+0x18>)
   12bbc:	4798      	blx	r3
   12bbe:	bd08      	pop	{r3, pc}
   12bc0:	00012b71 	.word	0x00012b71
   12bc4:	00012b99 	.word	0x00012b99
   12bc8:	0000c7fd 	.word	0x0000c7fd

00012bcc <common_tc_delay>:
   12bcc:	b510      	push	{r4, lr}
   12bce:	1c04      	adds	r4, r0, #0
   12bd0:	4b13      	ldr	r3, [pc, #76]	; (12c20 <common_tc_delay+0x54>)
   12bd2:	4798      	blx	r3
   12bd4:	4b13      	ldr	r3, [pc, #76]	; (12c24 <common_tc_delay+0x58>)
   12bd6:	781a      	ldrb	r2, [r3, #0]
   12bd8:	4362      	muls	r2, r4
   12bda:	1881      	adds	r1, r0, r2
   12bdc:	4b12      	ldr	r3, [pc, #72]	; (12c28 <common_tc_delay+0x5c>)
   12bde:	6059      	str	r1, [r3, #4]
   12be0:	6859      	ldr	r1, [r3, #4]
   12be2:	0c09      	lsrs	r1, r1, #16
   12be4:	6059      	str	r1, [r3, #4]
   12be6:	685b      	ldr	r3, [r3, #4]
   12be8:	2b00      	cmp	r3, #0
   12bea:	d007      	beq.n	12bfc <common_tc_delay+0x30>
   12bec:	4b0e      	ldr	r3, [pc, #56]	; (12c28 <common_tc_delay+0x5c>)
   12bee:	6859      	ldr	r1, [r3, #4]
   12bf0:	3201      	adds	r2, #1
   12bf2:	1880      	adds	r0, r0, r2
   12bf4:	8118      	strh	r0, [r3, #8]
   12bf6:	4b0d      	ldr	r3, [pc, #52]	; (12c2c <common_tc_delay+0x60>)
   12bf8:	4798      	blx	r3
   12bfa:	e004      	b.n	12c06 <common_tc_delay+0x3a>
   12bfc:	1882      	adds	r2, r0, r2
   12bfe:	4b0a      	ldr	r3, [pc, #40]	; (12c28 <common_tc_delay+0x5c>)
   12c00:	811a      	strh	r2, [r3, #8]
   12c02:	4b0b      	ldr	r3, [pc, #44]	; (12c30 <common_tc_delay+0x64>)
   12c04:	4798      	blx	r3
   12c06:	4b08      	ldr	r3, [pc, #32]	; (12c28 <common_tc_delay+0x5c>)
   12c08:	891b      	ldrh	r3, [r3, #8]
   12c0a:	2b63      	cmp	r3, #99	; 0x63
   12c0c:	d802      	bhi.n	12c14 <common_tc_delay+0x48>
   12c0e:	3364      	adds	r3, #100	; 0x64
   12c10:	4a05      	ldr	r2, [pc, #20]	; (12c28 <common_tc_delay+0x5c>)
   12c12:	8113      	strh	r3, [r2, #8]
   12c14:	4b04      	ldr	r3, [pc, #16]	; (12c28 <common_tc_delay+0x5c>)
   12c16:	8918      	ldrh	r0, [r3, #8]
   12c18:	4b06      	ldr	r3, [pc, #24]	; (12c34 <common_tc_delay+0x68>)
   12c1a:	4798      	blx	r3
   12c1c:	bd10      	pop	{r4, pc}
   12c1e:	46c0      	nop			; (mov r8, r8)
   12c20:	0000c785 	.word	0x0000c785
   12c24:	200027d4 	.word	0x200027d4
   12c28:	20001010 	.word	0x20001010
   12c2c:	0000c799 	.word	0x0000c799
   12c30:	0000c7ad 	.word	0x0000c7ad
   12c34:	0000c81d 	.word	0x0000c81d

00012c38 <common_tc_init>:
   12c38:	b508      	push	{r3, lr}
   12c3a:	2200      	movs	r2, #0
   12c3c:	4b03      	ldr	r3, [pc, #12]	; (12c4c <common_tc_init+0x14>)
   12c3e:	701a      	strb	r2, [r3, #0]
   12c40:	4b03      	ldr	r3, [pc, #12]	; (12c50 <common_tc_init+0x18>)
   12c42:	4798      	blx	r3
   12c44:	4b03      	ldr	r3, [pc, #12]	; (12c54 <common_tc_init+0x1c>)
   12c46:	7018      	strb	r0, [r3, #0]
   12c48:	bd08      	pop	{r3, pc}
   12c4a:	46c0      	nop			; (mov r8, r8)
   12c4c:	20001010 	.word	0x20001010
   12c50:	0000c871 	.word	0x0000c871
   12c54:	200027d4 	.word	0x200027d4

00012c58 <tmr_ovf_callback>:
   12c58:	b508      	push	{r3, lr}
   12c5a:	4b0e      	ldr	r3, [pc, #56]	; (12c94 <tmr_ovf_callback+0x3c>)
   12c5c:	685b      	ldr	r3, [r3, #4]
   12c5e:	2b00      	cmp	r3, #0
   12c60:	d007      	beq.n	12c72 <tmr_ovf_callback+0x1a>
   12c62:	4a0c      	ldr	r2, [pc, #48]	; (12c94 <tmr_ovf_callback+0x3c>)
   12c64:	6853      	ldr	r3, [r2, #4]
   12c66:	3b01      	subs	r3, #1
   12c68:	6053      	str	r3, [r2, #4]
   12c6a:	2b00      	cmp	r3, #0
   12c6c:	d101      	bne.n	12c72 <tmr_ovf_callback+0x1a>
   12c6e:	4b0a      	ldr	r3, [pc, #40]	; (12c98 <tmr_ovf_callback+0x40>)
   12c70:	4798      	blx	r3
   12c72:	4a08      	ldr	r2, [pc, #32]	; (12c94 <tmr_ovf_callback+0x3c>)
   12c74:	7813      	ldrb	r3, [r2, #0]
   12c76:	3301      	adds	r3, #1
   12c78:	b2db      	uxtb	r3, r3
   12c7a:	7013      	strb	r3, [r2, #0]
   12c7c:	4a07      	ldr	r2, [pc, #28]	; (12c9c <tmr_ovf_callback+0x44>)
   12c7e:	7812      	ldrb	r2, [r2, #0]
   12c80:	429a      	cmp	r2, r3
   12c82:	d806      	bhi.n	12c92 <tmr_ovf_callback+0x3a>
   12c84:	4b03      	ldr	r3, [pc, #12]	; (12c94 <tmr_ovf_callback+0x3c>)
   12c86:	2200      	movs	r2, #0
   12c88:	701a      	strb	r2, [r3, #0]
   12c8a:	68db      	ldr	r3, [r3, #12]
   12c8c:	2b00      	cmp	r3, #0
   12c8e:	d000      	beq.n	12c92 <tmr_ovf_callback+0x3a>
   12c90:	4798      	blx	r3
   12c92:	bd08      	pop	{r3, pc}
   12c94:	20001010 	.word	0x20001010
   12c98:	0000c7ad 	.word	0x0000c7ad
   12c9c:	200027d4 	.word	0x200027d4

00012ca0 <tmr_cca_callback>:
   12ca0:	b508      	push	{r3, lr}
   12ca2:	4b04      	ldr	r3, [pc, #16]	; (12cb4 <tmr_cca_callback+0x14>)
   12ca4:	4798      	blx	r3
   12ca6:	4b04      	ldr	r3, [pc, #16]	; (12cb8 <tmr_cca_callback+0x18>)
   12ca8:	691b      	ldr	r3, [r3, #16]
   12caa:	2b00      	cmp	r3, #0
   12cac:	d000      	beq.n	12cb0 <tmr_cca_callback+0x10>
   12cae:	4798      	blx	r3
   12cb0:	bd08      	pop	{r3, pc}
   12cb2:	46c0      	nop			; (mov r8, r8)
   12cb4:	0000c799 	.word	0x0000c799
   12cb8:	20001010 	.word	0x20001010

00012cbc <set_common_tc_overflow_callback>:
   12cbc:	4b01      	ldr	r3, [pc, #4]	; (12cc4 <set_common_tc_overflow_callback+0x8>)
   12cbe:	60d8      	str	r0, [r3, #12]
   12cc0:	4770      	bx	lr
   12cc2:	46c0      	nop			; (mov r8, r8)
   12cc4:	20001010 	.word	0x20001010

00012cc8 <set_common_tc_expiry_callback>:
   12cc8:	4b01      	ldr	r3, [pc, #4]	; (12cd0 <set_common_tc_expiry_callback+0x8>)
   12cca:	6118      	str	r0, [r3, #16]
   12ccc:	4770      	bx	lr
   12cce:	46c0      	nop			; (mov r8, r8)
   12cd0:	20001010 	.word	0x20001010

00012cd4 <__gnu_thumb1_case_sqi>:
   12cd4:	b402      	push	{r1}
   12cd6:	4671      	mov	r1, lr
   12cd8:	0849      	lsrs	r1, r1, #1
   12cda:	0049      	lsls	r1, r1, #1
   12cdc:	5609      	ldrsb	r1, [r1, r0]
   12cde:	0049      	lsls	r1, r1, #1
   12ce0:	448e      	add	lr, r1
   12ce2:	bc02      	pop	{r1}
   12ce4:	4770      	bx	lr
   12ce6:	46c0      	nop			; (mov r8, r8)

00012ce8 <__gnu_thumb1_case_uqi>:
   12ce8:	b402      	push	{r1}
   12cea:	4671      	mov	r1, lr
   12cec:	0849      	lsrs	r1, r1, #1
   12cee:	0049      	lsls	r1, r1, #1
   12cf0:	5c09      	ldrb	r1, [r1, r0]
   12cf2:	0049      	lsls	r1, r1, #1
   12cf4:	448e      	add	lr, r1
   12cf6:	bc02      	pop	{r1}
   12cf8:	4770      	bx	lr
   12cfa:	46c0      	nop			; (mov r8, r8)

00012cfc <__gnu_thumb1_case_uhi>:
   12cfc:	b403      	push	{r0, r1}
   12cfe:	4671      	mov	r1, lr
   12d00:	0849      	lsrs	r1, r1, #1
   12d02:	0040      	lsls	r0, r0, #1
   12d04:	0049      	lsls	r1, r1, #1
   12d06:	5a09      	ldrh	r1, [r1, r0]
   12d08:	0049      	lsls	r1, r1, #1
   12d0a:	448e      	add	lr, r1
   12d0c:	bc03      	pop	{r0, r1}
   12d0e:	4770      	bx	lr

00012d10 <__udivsi3>:
   12d10:	2200      	movs	r2, #0
   12d12:	0843      	lsrs	r3, r0, #1
   12d14:	428b      	cmp	r3, r1
   12d16:	d374      	bcc.n	12e02 <__udivsi3+0xf2>
   12d18:	0903      	lsrs	r3, r0, #4
   12d1a:	428b      	cmp	r3, r1
   12d1c:	d35f      	bcc.n	12dde <__udivsi3+0xce>
   12d1e:	0a03      	lsrs	r3, r0, #8
   12d20:	428b      	cmp	r3, r1
   12d22:	d344      	bcc.n	12dae <__udivsi3+0x9e>
   12d24:	0b03      	lsrs	r3, r0, #12
   12d26:	428b      	cmp	r3, r1
   12d28:	d328      	bcc.n	12d7c <__udivsi3+0x6c>
   12d2a:	0c03      	lsrs	r3, r0, #16
   12d2c:	428b      	cmp	r3, r1
   12d2e:	d30d      	bcc.n	12d4c <__udivsi3+0x3c>
   12d30:	22ff      	movs	r2, #255	; 0xff
   12d32:	0209      	lsls	r1, r1, #8
   12d34:	ba12      	rev	r2, r2
   12d36:	0c03      	lsrs	r3, r0, #16
   12d38:	428b      	cmp	r3, r1
   12d3a:	d302      	bcc.n	12d42 <__udivsi3+0x32>
   12d3c:	1212      	asrs	r2, r2, #8
   12d3e:	0209      	lsls	r1, r1, #8
   12d40:	d065      	beq.n	12e0e <__udivsi3+0xfe>
   12d42:	0b03      	lsrs	r3, r0, #12
   12d44:	428b      	cmp	r3, r1
   12d46:	d319      	bcc.n	12d7c <__udivsi3+0x6c>
   12d48:	e000      	b.n	12d4c <__udivsi3+0x3c>
   12d4a:	0a09      	lsrs	r1, r1, #8
   12d4c:	0bc3      	lsrs	r3, r0, #15
   12d4e:	428b      	cmp	r3, r1
   12d50:	d301      	bcc.n	12d56 <__udivsi3+0x46>
   12d52:	03cb      	lsls	r3, r1, #15
   12d54:	1ac0      	subs	r0, r0, r3
   12d56:	4152      	adcs	r2, r2
   12d58:	0b83      	lsrs	r3, r0, #14
   12d5a:	428b      	cmp	r3, r1
   12d5c:	d301      	bcc.n	12d62 <__udivsi3+0x52>
   12d5e:	038b      	lsls	r3, r1, #14
   12d60:	1ac0      	subs	r0, r0, r3
   12d62:	4152      	adcs	r2, r2
   12d64:	0b43      	lsrs	r3, r0, #13
   12d66:	428b      	cmp	r3, r1
   12d68:	d301      	bcc.n	12d6e <__udivsi3+0x5e>
   12d6a:	034b      	lsls	r3, r1, #13
   12d6c:	1ac0      	subs	r0, r0, r3
   12d6e:	4152      	adcs	r2, r2
   12d70:	0b03      	lsrs	r3, r0, #12
   12d72:	428b      	cmp	r3, r1
   12d74:	d301      	bcc.n	12d7a <__udivsi3+0x6a>
   12d76:	030b      	lsls	r3, r1, #12
   12d78:	1ac0      	subs	r0, r0, r3
   12d7a:	4152      	adcs	r2, r2
   12d7c:	0ac3      	lsrs	r3, r0, #11
   12d7e:	428b      	cmp	r3, r1
   12d80:	d301      	bcc.n	12d86 <__udivsi3+0x76>
   12d82:	02cb      	lsls	r3, r1, #11
   12d84:	1ac0      	subs	r0, r0, r3
   12d86:	4152      	adcs	r2, r2
   12d88:	0a83      	lsrs	r3, r0, #10
   12d8a:	428b      	cmp	r3, r1
   12d8c:	d301      	bcc.n	12d92 <__udivsi3+0x82>
   12d8e:	028b      	lsls	r3, r1, #10
   12d90:	1ac0      	subs	r0, r0, r3
   12d92:	4152      	adcs	r2, r2
   12d94:	0a43      	lsrs	r3, r0, #9
   12d96:	428b      	cmp	r3, r1
   12d98:	d301      	bcc.n	12d9e <__udivsi3+0x8e>
   12d9a:	024b      	lsls	r3, r1, #9
   12d9c:	1ac0      	subs	r0, r0, r3
   12d9e:	4152      	adcs	r2, r2
   12da0:	0a03      	lsrs	r3, r0, #8
   12da2:	428b      	cmp	r3, r1
   12da4:	d301      	bcc.n	12daa <__udivsi3+0x9a>
   12da6:	020b      	lsls	r3, r1, #8
   12da8:	1ac0      	subs	r0, r0, r3
   12daa:	4152      	adcs	r2, r2
   12dac:	d2cd      	bcs.n	12d4a <__udivsi3+0x3a>
   12dae:	09c3      	lsrs	r3, r0, #7
   12db0:	428b      	cmp	r3, r1
   12db2:	d301      	bcc.n	12db8 <__udivsi3+0xa8>
   12db4:	01cb      	lsls	r3, r1, #7
   12db6:	1ac0      	subs	r0, r0, r3
   12db8:	4152      	adcs	r2, r2
   12dba:	0983      	lsrs	r3, r0, #6
   12dbc:	428b      	cmp	r3, r1
   12dbe:	d301      	bcc.n	12dc4 <__udivsi3+0xb4>
   12dc0:	018b      	lsls	r3, r1, #6
   12dc2:	1ac0      	subs	r0, r0, r3
   12dc4:	4152      	adcs	r2, r2
   12dc6:	0943      	lsrs	r3, r0, #5
   12dc8:	428b      	cmp	r3, r1
   12dca:	d301      	bcc.n	12dd0 <__udivsi3+0xc0>
   12dcc:	014b      	lsls	r3, r1, #5
   12dce:	1ac0      	subs	r0, r0, r3
   12dd0:	4152      	adcs	r2, r2
   12dd2:	0903      	lsrs	r3, r0, #4
   12dd4:	428b      	cmp	r3, r1
   12dd6:	d301      	bcc.n	12ddc <__udivsi3+0xcc>
   12dd8:	010b      	lsls	r3, r1, #4
   12dda:	1ac0      	subs	r0, r0, r3
   12ddc:	4152      	adcs	r2, r2
   12dde:	08c3      	lsrs	r3, r0, #3
   12de0:	428b      	cmp	r3, r1
   12de2:	d301      	bcc.n	12de8 <__udivsi3+0xd8>
   12de4:	00cb      	lsls	r3, r1, #3
   12de6:	1ac0      	subs	r0, r0, r3
   12de8:	4152      	adcs	r2, r2
   12dea:	0883      	lsrs	r3, r0, #2
   12dec:	428b      	cmp	r3, r1
   12dee:	d301      	bcc.n	12df4 <__udivsi3+0xe4>
   12df0:	008b      	lsls	r3, r1, #2
   12df2:	1ac0      	subs	r0, r0, r3
   12df4:	4152      	adcs	r2, r2
   12df6:	0843      	lsrs	r3, r0, #1
   12df8:	428b      	cmp	r3, r1
   12dfa:	d301      	bcc.n	12e00 <__udivsi3+0xf0>
   12dfc:	004b      	lsls	r3, r1, #1
   12dfe:	1ac0      	subs	r0, r0, r3
   12e00:	4152      	adcs	r2, r2
   12e02:	1a41      	subs	r1, r0, r1
   12e04:	d200      	bcs.n	12e08 <__udivsi3+0xf8>
   12e06:	4601      	mov	r1, r0
   12e08:	4152      	adcs	r2, r2
   12e0a:	4610      	mov	r0, r2
   12e0c:	4770      	bx	lr
   12e0e:	e7ff      	b.n	12e10 <__udivsi3+0x100>
   12e10:	b501      	push	{r0, lr}
   12e12:	2000      	movs	r0, #0
   12e14:	f000 f8f0 	bl	12ff8 <__aeabi_idiv0>
   12e18:	bd02      	pop	{r1, pc}
   12e1a:	46c0      	nop			; (mov r8, r8)

00012e1c <__aeabi_uidivmod>:
   12e1c:	2900      	cmp	r1, #0
   12e1e:	d0f7      	beq.n	12e10 <__udivsi3+0x100>
   12e20:	e776      	b.n	12d10 <__udivsi3>
   12e22:	4770      	bx	lr

00012e24 <__divsi3>:
   12e24:	4603      	mov	r3, r0
   12e26:	430b      	orrs	r3, r1
   12e28:	d47f      	bmi.n	12f2a <__divsi3+0x106>
   12e2a:	2200      	movs	r2, #0
   12e2c:	0843      	lsrs	r3, r0, #1
   12e2e:	428b      	cmp	r3, r1
   12e30:	d374      	bcc.n	12f1c <__divsi3+0xf8>
   12e32:	0903      	lsrs	r3, r0, #4
   12e34:	428b      	cmp	r3, r1
   12e36:	d35f      	bcc.n	12ef8 <__divsi3+0xd4>
   12e38:	0a03      	lsrs	r3, r0, #8
   12e3a:	428b      	cmp	r3, r1
   12e3c:	d344      	bcc.n	12ec8 <__divsi3+0xa4>
   12e3e:	0b03      	lsrs	r3, r0, #12
   12e40:	428b      	cmp	r3, r1
   12e42:	d328      	bcc.n	12e96 <__divsi3+0x72>
   12e44:	0c03      	lsrs	r3, r0, #16
   12e46:	428b      	cmp	r3, r1
   12e48:	d30d      	bcc.n	12e66 <__divsi3+0x42>
   12e4a:	22ff      	movs	r2, #255	; 0xff
   12e4c:	0209      	lsls	r1, r1, #8
   12e4e:	ba12      	rev	r2, r2
   12e50:	0c03      	lsrs	r3, r0, #16
   12e52:	428b      	cmp	r3, r1
   12e54:	d302      	bcc.n	12e5c <__divsi3+0x38>
   12e56:	1212      	asrs	r2, r2, #8
   12e58:	0209      	lsls	r1, r1, #8
   12e5a:	d065      	beq.n	12f28 <__divsi3+0x104>
   12e5c:	0b03      	lsrs	r3, r0, #12
   12e5e:	428b      	cmp	r3, r1
   12e60:	d319      	bcc.n	12e96 <__divsi3+0x72>
   12e62:	e000      	b.n	12e66 <__divsi3+0x42>
   12e64:	0a09      	lsrs	r1, r1, #8
   12e66:	0bc3      	lsrs	r3, r0, #15
   12e68:	428b      	cmp	r3, r1
   12e6a:	d301      	bcc.n	12e70 <__divsi3+0x4c>
   12e6c:	03cb      	lsls	r3, r1, #15
   12e6e:	1ac0      	subs	r0, r0, r3
   12e70:	4152      	adcs	r2, r2
   12e72:	0b83      	lsrs	r3, r0, #14
   12e74:	428b      	cmp	r3, r1
   12e76:	d301      	bcc.n	12e7c <__divsi3+0x58>
   12e78:	038b      	lsls	r3, r1, #14
   12e7a:	1ac0      	subs	r0, r0, r3
   12e7c:	4152      	adcs	r2, r2
   12e7e:	0b43      	lsrs	r3, r0, #13
   12e80:	428b      	cmp	r3, r1
   12e82:	d301      	bcc.n	12e88 <__divsi3+0x64>
   12e84:	034b      	lsls	r3, r1, #13
   12e86:	1ac0      	subs	r0, r0, r3
   12e88:	4152      	adcs	r2, r2
   12e8a:	0b03      	lsrs	r3, r0, #12
   12e8c:	428b      	cmp	r3, r1
   12e8e:	d301      	bcc.n	12e94 <__divsi3+0x70>
   12e90:	030b      	lsls	r3, r1, #12
   12e92:	1ac0      	subs	r0, r0, r3
   12e94:	4152      	adcs	r2, r2
   12e96:	0ac3      	lsrs	r3, r0, #11
   12e98:	428b      	cmp	r3, r1
   12e9a:	d301      	bcc.n	12ea0 <__divsi3+0x7c>
   12e9c:	02cb      	lsls	r3, r1, #11
   12e9e:	1ac0      	subs	r0, r0, r3
   12ea0:	4152      	adcs	r2, r2
   12ea2:	0a83      	lsrs	r3, r0, #10
   12ea4:	428b      	cmp	r3, r1
   12ea6:	d301      	bcc.n	12eac <__divsi3+0x88>
   12ea8:	028b      	lsls	r3, r1, #10
   12eaa:	1ac0      	subs	r0, r0, r3
   12eac:	4152      	adcs	r2, r2
   12eae:	0a43      	lsrs	r3, r0, #9
   12eb0:	428b      	cmp	r3, r1
   12eb2:	d301      	bcc.n	12eb8 <__divsi3+0x94>
   12eb4:	024b      	lsls	r3, r1, #9
   12eb6:	1ac0      	subs	r0, r0, r3
   12eb8:	4152      	adcs	r2, r2
   12eba:	0a03      	lsrs	r3, r0, #8
   12ebc:	428b      	cmp	r3, r1
   12ebe:	d301      	bcc.n	12ec4 <__divsi3+0xa0>
   12ec0:	020b      	lsls	r3, r1, #8
   12ec2:	1ac0      	subs	r0, r0, r3
   12ec4:	4152      	adcs	r2, r2
   12ec6:	d2cd      	bcs.n	12e64 <__divsi3+0x40>
   12ec8:	09c3      	lsrs	r3, r0, #7
   12eca:	428b      	cmp	r3, r1
   12ecc:	d301      	bcc.n	12ed2 <__divsi3+0xae>
   12ece:	01cb      	lsls	r3, r1, #7
   12ed0:	1ac0      	subs	r0, r0, r3
   12ed2:	4152      	adcs	r2, r2
   12ed4:	0983      	lsrs	r3, r0, #6
   12ed6:	428b      	cmp	r3, r1
   12ed8:	d301      	bcc.n	12ede <__divsi3+0xba>
   12eda:	018b      	lsls	r3, r1, #6
   12edc:	1ac0      	subs	r0, r0, r3
   12ede:	4152      	adcs	r2, r2
   12ee0:	0943      	lsrs	r3, r0, #5
   12ee2:	428b      	cmp	r3, r1
   12ee4:	d301      	bcc.n	12eea <__divsi3+0xc6>
   12ee6:	014b      	lsls	r3, r1, #5
   12ee8:	1ac0      	subs	r0, r0, r3
   12eea:	4152      	adcs	r2, r2
   12eec:	0903      	lsrs	r3, r0, #4
   12eee:	428b      	cmp	r3, r1
   12ef0:	d301      	bcc.n	12ef6 <__divsi3+0xd2>
   12ef2:	010b      	lsls	r3, r1, #4
   12ef4:	1ac0      	subs	r0, r0, r3
   12ef6:	4152      	adcs	r2, r2
   12ef8:	08c3      	lsrs	r3, r0, #3
   12efa:	428b      	cmp	r3, r1
   12efc:	d301      	bcc.n	12f02 <__divsi3+0xde>
   12efe:	00cb      	lsls	r3, r1, #3
   12f00:	1ac0      	subs	r0, r0, r3
   12f02:	4152      	adcs	r2, r2
   12f04:	0883      	lsrs	r3, r0, #2
   12f06:	428b      	cmp	r3, r1
   12f08:	d301      	bcc.n	12f0e <__divsi3+0xea>
   12f0a:	008b      	lsls	r3, r1, #2
   12f0c:	1ac0      	subs	r0, r0, r3
   12f0e:	4152      	adcs	r2, r2
   12f10:	0843      	lsrs	r3, r0, #1
   12f12:	428b      	cmp	r3, r1
   12f14:	d301      	bcc.n	12f1a <__divsi3+0xf6>
   12f16:	004b      	lsls	r3, r1, #1
   12f18:	1ac0      	subs	r0, r0, r3
   12f1a:	4152      	adcs	r2, r2
   12f1c:	1a41      	subs	r1, r0, r1
   12f1e:	d200      	bcs.n	12f22 <__divsi3+0xfe>
   12f20:	4601      	mov	r1, r0
   12f22:	4152      	adcs	r2, r2
   12f24:	4610      	mov	r0, r2
   12f26:	4770      	bx	lr
   12f28:	e05d      	b.n	12fe6 <__divsi3+0x1c2>
   12f2a:	0fca      	lsrs	r2, r1, #31
   12f2c:	d000      	beq.n	12f30 <__divsi3+0x10c>
   12f2e:	4249      	negs	r1, r1
   12f30:	1003      	asrs	r3, r0, #32
   12f32:	d300      	bcc.n	12f36 <__divsi3+0x112>
   12f34:	4240      	negs	r0, r0
   12f36:	4053      	eors	r3, r2
   12f38:	2200      	movs	r2, #0
   12f3a:	469c      	mov	ip, r3
   12f3c:	0903      	lsrs	r3, r0, #4
   12f3e:	428b      	cmp	r3, r1
   12f40:	d32d      	bcc.n	12f9e <__divsi3+0x17a>
   12f42:	0a03      	lsrs	r3, r0, #8
   12f44:	428b      	cmp	r3, r1
   12f46:	d312      	bcc.n	12f6e <__divsi3+0x14a>
   12f48:	22fc      	movs	r2, #252	; 0xfc
   12f4a:	0189      	lsls	r1, r1, #6
   12f4c:	ba12      	rev	r2, r2
   12f4e:	0a03      	lsrs	r3, r0, #8
   12f50:	428b      	cmp	r3, r1
   12f52:	d30c      	bcc.n	12f6e <__divsi3+0x14a>
   12f54:	0189      	lsls	r1, r1, #6
   12f56:	1192      	asrs	r2, r2, #6
   12f58:	428b      	cmp	r3, r1
   12f5a:	d308      	bcc.n	12f6e <__divsi3+0x14a>
   12f5c:	0189      	lsls	r1, r1, #6
   12f5e:	1192      	asrs	r2, r2, #6
   12f60:	428b      	cmp	r3, r1
   12f62:	d304      	bcc.n	12f6e <__divsi3+0x14a>
   12f64:	0189      	lsls	r1, r1, #6
   12f66:	d03a      	beq.n	12fde <__divsi3+0x1ba>
   12f68:	1192      	asrs	r2, r2, #6
   12f6a:	e000      	b.n	12f6e <__divsi3+0x14a>
   12f6c:	0989      	lsrs	r1, r1, #6
   12f6e:	09c3      	lsrs	r3, r0, #7
   12f70:	428b      	cmp	r3, r1
   12f72:	d301      	bcc.n	12f78 <__divsi3+0x154>
   12f74:	01cb      	lsls	r3, r1, #7
   12f76:	1ac0      	subs	r0, r0, r3
   12f78:	4152      	adcs	r2, r2
   12f7a:	0983      	lsrs	r3, r0, #6
   12f7c:	428b      	cmp	r3, r1
   12f7e:	d301      	bcc.n	12f84 <__divsi3+0x160>
   12f80:	018b      	lsls	r3, r1, #6
   12f82:	1ac0      	subs	r0, r0, r3
   12f84:	4152      	adcs	r2, r2
   12f86:	0943      	lsrs	r3, r0, #5
   12f88:	428b      	cmp	r3, r1
   12f8a:	d301      	bcc.n	12f90 <__divsi3+0x16c>
   12f8c:	014b      	lsls	r3, r1, #5
   12f8e:	1ac0      	subs	r0, r0, r3
   12f90:	4152      	adcs	r2, r2
   12f92:	0903      	lsrs	r3, r0, #4
   12f94:	428b      	cmp	r3, r1
   12f96:	d301      	bcc.n	12f9c <__divsi3+0x178>
   12f98:	010b      	lsls	r3, r1, #4
   12f9a:	1ac0      	subs	r0, r0, r3
   12f9c:	4152      	adcs	r2, r2
   12f9e:	08c3      	lsrs	r3, r0, #3
   12fa0:	428b      	cmp	r3, r1
   12fa2:	d301      	bcc.n	12fa8 <__divsi3+0x184>
   12fa4:	00cb      	lsls	r3, r1, #3
   12fa6:	1ac0      	subs	r0, r0, r3
   12fa8:	4152      	adcs	r2, r2
   12faa:	0883      	lsrs	r3, r0, #2
   12fac:	428b      	cmp	r3, r1
   12fae:	d301      	bcc.n	12fb4 <__divsi3+0x190>
   12fb0:	008b      	lsls	r3, r1, #2
   12fb2:	1ac0      	subs	r0, r0, r3
   12fb4:	4152      	adcs	r2, r2
   12fb6:	d2d9      	bcs.n	12f6c <__divsi3+0x148>
   12fb8:	0843      	lsrs	r3, r0, #1
   12fba:	428b      	cmp	r3, r1
   12fbc:	d301      	bcc.n	12fc2 <__divsi3+0x19e>
   12fbe:	004b      	lsls	r3, r1, #1
   12fc0:	1ac0      	subs	r0, r0, r3
   12fc2:	4152      	adcs	r2, r2
   12fc4:	1a41      	subs	r1, r0, r1
   12fc6:	d200      	bcs.n	12fca <__divsi3+0x1a6>
   12fc8:	4601      	mov	r1, r0
   12fca:	4663      	mov	r3, ip
   12fcc:	4152      	adcs	r2, r2
   12fce:	105b      	asrs	r3, r3, #1
   12fd0:	4610      	mov	r0, r2
   12fd2:	d301      	bcc.n	12fd8 <__divsi3+0x1b4>
   12fd4:	4240      	negs	r0, r0
   12fd6:	2b00      	cmp	r3, #0
   12fd8:	d500      	bpl.n	12fdc <__divsi3+0x1b8>
   12fda:	4249      	negs	r1, r1
   12fdc:	4770      	bx	lr
   12fde:	4663      	mov	r3, ip
   12fe0:	105b      	asrs	r3, r3, #1
   12fe2:	d300      	bcc.n	12fe6 <__divsi3+0x1c2>
   12fe4:	4240      	negs	r0, r0
   12fe6:	b501      	push	{r0, lr}
   12fe8:	2000      	movs	r0, #0
   12fea:	f000 f805 	bl	12ff8 <__aeabi_idiv0>
   12fee:	bd02      	pop	{r1, pc}

00012ff0 <__aeabi_idivmod>:
   12ff0:	2900      	cmp	r1, #0
   12ff2:	d0f8      	beq.n	12fe6 <__divsi3+0x1c2>
   12ff4:	e716      	b.n	12e24 <__divsi3>
   12ff6:	4770      	bx	lr

00012ff8 <__aeabi_idiv0>:
   12ff8:	4770      	bx	lr
   12ffa:	46c0      	nop			; (mov r8, r8)

00012ffc <__aeabi_cfrcmple>:
   12ffc:	4684      	mov	ip, r0
   12ffe:	1c08      	adds	r0, r1, #0
   13000:	4661      	mov	r1, ip
   13002:	e7ff      	b.n	13004 <__aeabi_cfcmpeq>

00013004 <__aeabi_cfcmpeq>:
   13004:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   13006:	f000 fcb5 	bl	13974 <__lesf2>
   1300a:	2800      	cmp	r0, #0
   1300c:	d401      	bmi.n	13012 <__aeabi_cfcmpeq+0xe>
   1300e:	2100      	movs	r1, #0
   13010:	42c8      	cmn	r0, r1
   13012:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00013014 <__aeabi_fcmpeq>:
   13014:	b510      	push	{r4, lr}
   13016:	f000 fc47 	bl	138a8 <__eqsf2>
   1301a:	4240      	negs	r0, r0
   1301c:	3001      	adds	r0, #1
   1301e:	bd10      	pop	{r4, pc}

00013020 <__aeabi_fcmplt>:
   13020:	b510      	push	{r4, lr}
   13022:	f000 fca7 	bl	13974 <__lesf2>
   13026:	2800      	cmp	r0, #0
   13028:	db01      	blt.n	1302e <__aeabi_fcmplt+0xe>
   1302a:	2000      	movs	r0, #0
   1302c:	bd10      	pop	{r4, pc}
   1302e:	2001      	movs	r0, #1
   13030:	bd10      	pop	{r4, pc}
   13032:	46c0      	nop			; (mov r8, r8)

00013034 <__aeabi_fcmple>:
   13034:	b510      	push	{r4, lr}
   13036:	f000 fc9d 	bl	13974 <__lesf2>
   1303a:	2800      	cmp	r0, #0
   1303c:	dd01      	ble.n	13042 <__aeabi_fcmple+0xe>
   1303e:	2000      	movs	r0, #0
   13040:	bd10      	pop	{r4, pc}
   13042:	2001      	movs	r0, #1
   13044:	bd10      	pop	{r4, pc}
   13046:	46c0      	nop			; (mov r8, r8)

00013048 <__aeabi_fcmpgt>:
   13048:	b510      	push	{r4, lr}
   1304a:	f000 fc53 	bl	138f4 <__gesf2>
   1304e:	2800      	cmp	r0, #0
   13050:	dc01      	bgt.n	13056 <__aeabi_fcmpgt+0xe>
   13052:	2000      	movs	r0, #0
   13054:	bd10      	pop	{r4, pc}
   13056:	2001      	movs	r0, #1
   13058:	bd10      	pop	{r4, pc}
   1305a:	46c0      	nop			; (mov r8, r8)

0001305c <__aeabi_fcmpge>:
   1305c:	b510      	push	{r4, lr}
   1305e:	f000 fc49 	bl	138f4 <__gesf2>
   13062:	2800      	cmp	r0, #0
   13064:	da01      	bge.n	1306a <__aeabi_fcmpge+0xe>
   13066:	2000      	movs	r0, #0
   13068:	bd10      	pop	{r4, pc}
   1306a:	2001      	movs	r0, #1
   1306c:	bd10      	pop	{r4, pc}
   1306e:	46c0      	nop			; (mov r8, r8)

00013070 <__aeabi_uldivmod>:
   13070:	2b00      	cmp	r3, #0
   13072:	d111      	bne.n	13098 <__aeabi_uldivmod+0x28>
   13074:	2a00      	cmp	r2, #0
   13076:	d10f      	bne.n	13098 <__aeabi_uldivmod+0x28>
   13078:	2900      	cmp	r1, #0
   1307a:	d100      	bne.n	1307e <__aeabi_uldivmod+0xe>
   1307c:	2800      	cmp	r0, #0
   1307e:	d002      	beq.n	13086 <__aeabi_uldivmod+0x16>
   13080:	2100      	movs	r1, #0
   13082:	43c9      	mvns	r1, r1
   13084:	1c08      	adds	r0, r1, #0
   13086:	b407      	push	{r0, r1, r2}
   13088:	4802      	ldr	r0, [pc, #8]	; (13094 <__aeabi_uldivmod+0x24>)
   1308a:	a102      	add	r1, pc, #8	; (adr r1, 13094 <__aeabi_uldivmod+0x24>)
   1308c:	1840      	adds	r0, r0, r1
   1308e:	9002      	str	r0, [sp, #8]
   13090:	bd03      	pop	{r0, r1, pc}
   13092:	46c0      	nop			; (mov r8, r8)
   13094:	ffffff65 	.word	0xffffff65
   13098:	b403      	push	{r0, r1}
   1309a:	4668      	mov	r0, sp
   1309c:	b501      	push	{r0, lr}
   1309e:	9802      	ldr	r0, [sp, #8]
   130a0:	f000 f868 	bl	13174 <__udivmoddi4>
   130a4:	9b01      	ldr	r3, [sp, #4]
   130a6:	469e      	mov	lr, r3
   130a8:	b002      	add	sp, #8
   130aa:	bc0c      	pop	{r2, r3}
   130ac:	4770      	bx	lr
   130ae:	46c0      	nop			; (mov r8, r8)

000130b0 <__aeabi_lmul>:
   130b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   130b2:	46ce      	mov	lr, r9
   130b4:	4647      	mov	r7, r8
   130b6:	0415      	lsls	r5, r2, #16
   130b8:	0c2d      	lsrs	r5, r5, #16
   130ba:	002e      	movs	r6, r5
   130bc:	b580      	push	{r7, lr}
   130be:	0407      	lsls	r7, r0, #16
   130c0:	0c14      	lsrs	r4, r2, #16
   130c2:	0c3f      	lsrs	r7, r7, #16
   130c4:	4699      	mov	r9, r3
   130c6:	0c03      	lsrs	r3, r0, #16
   130c8:	437e      	muls	r6, r7
   130ca:	435d      	muls	r5, r3
   130cc:	4367      	muls	r7, r4
   130ce:	4363      	muls	r3, r4
   130d0:	197f      	adds	r7, r7, r5
   130d2:	0c34      	lsrs	r4, r6, #16
   130d4:	19e4      	adds	r4, r4, r7
   130d6:	469c      	mov	ip, r3
   130d8:	42a5      	cmp	r5, r4
   130da:	d903      	bls.n	130e4 <__aeabi_lmul+0x34>
   130dc:	2380      	movs	r3, #128	; 0x80
   130de:	025b      	lsls	r3, r3, #9
   130e0:	4698      	mov	r8, r3
   130e2:	44c4      	add	ip, r8
   130e4:	464b      	mov	r3, r9
   130e6:	4351      	muls	r1, r2
   130e8:	4343      	muls	r3, r0
   130ea:	0436      	lsls	r6, r6, #16
   130ec:	0c36      	lsrs	r6, r6, #16
   130ee:	0c25      	lsrs	r5, r4, #16
   130f0:	0424      	lsls	r4, r4, #16
   130f2:	4465      	add	r5, ip
   130f4:	19a4      	adds	r4, r4, r6
   130f6:	1859      	adds	r1, r3, r1
   130f8:	1949      	adds	r1, r1, r5
   130fa:	0020      	movs	r0, r4
   130fc:	bc0c      	pop	{r2, r3}
   130fe:	4690      	mov	r8, r2
   13100:	4699      	mov	r9, r3
   13102:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013104 <__aeabi_f2uiz>:
   13104:	219e      	movs	r1, #158	; 0x9e
   13106:	b510      	push	{r4, lr}
   13108:	05c9      	lsls	r1, r1, #23
   1310a:	1c04      	adds	r4, r0, #0
   1310c:	f7ff ffa6 	bl	1305c <__aeabi_fcmpge>
   13110:	2800      	cmp	r0, #0
   13112:	d103      	bne.n	1311c <__aeabi_f2uiz+0x18>
   13114:	1c20      	adds	r0, r4, #0
   13116:	f000 ff2b 	bl	13f70 <__aeabi_f2iz>
   1311a:	bd10      	pop	{r4, pc}
   1311c:	219e      	movs	r1, #158	; 0x9e
   1311e:	1c20      	adds	r0, r4, #0
   13120:	05c9      	lsls	r1, r1, #23
   13122:	f000 fd89 	bl	13c38 <__aeabi_fsub>
   13126:	f000 ff23 	bl	13f70 <__aeabi_f2iz>
   1312a:	2380      	movs	r3, #128	; 0x80
   1312c:	061b      	lsls	r3, r3, #24
   1312e:	469c      	mov	ip, r3
   13130:	4460      	add	r0, ip
   13132:	e7f2      	b.n	1311a <__aeabi_f2uiz+0x16>

00013134 <__aeabi_f2ulz>:
   13134:	b570      	push	{r4, r5, r6, lr}
   13136:	f002 fc59 	bl	159ec <__aeabi_f2d>
   1313a:	2200      	movs	r2, #0
   1313c:	4b0b      	ldr	r3, [pc, #44]	; (1316c <__aeabi_f2ulz+0x38>)
   1313e:	000d      	movs	r5, r1
   13140:	0004      	movs	r4, r0
   13142:	f001 fe0f 	bl	14d64 <__aeabi_dmul>
   13146:	f002 fd57 	bl	15bf8 <__aeabi_d2uiz>
   1314a:	0006      	movs	r6, r0
   1314c:	f002 fc16 	bl	1597c <__aeabi_ui2d>
   13150:	2200      	movs	r2, #0
   13152:	4b07      	ldr	r3, [pc, #28]	; (13170 <__aeabi_f2ulz+0x3c>)
   13154:	f001 fe06 	bl	14d64 <__aeabi_dmul>
   13158:	0002      	movs	r2, r0
   1315a:	000b      	movs	r3, r1
   1315c:	0020      	movs	r0, r4
   1315e:	0029      	movs	r1, r5
   13160:	f002 f880 	bl	15264 <__aeabi_dsub>
   13164:	f002 fd48 	bl	15bf8 <__aeabi_d2uiz>
   13168:	0031      	movs	r1, r6
   1316a:	bd70      	pop	{r4, r5, r6, pc}
   1316c:	3df00000 	.word	0x3df00000
   13170:	41f00000 	.word	0x41f00000

00013174 <__udivmoddi4>:
   13174:	b5f0      	push	{r4, r5, r6, r7, lr}
   13176:	4657      	mov	r7, sl
   13178:	464e      	mov	r6, r9
   1317a:	4645      	mov	r5, r8
   1317c:	46de      	mov	lr, fp
   1317e:	b5e0      	push	{r5, r6, r7, lr}
   13180:	0004      	movs	r4, r0
   13182:	b083      	sub	sp, #12
   13184:	000d      	movs	r5, r1
   13186:	4692      	mov	sl, r2
   13188:	4699      	mov	r9, r3
   1318a:	428b      	cmp	r3, r1
   1318c:	d82f      	bhi.n	131ee <__udivmoddi4+0x7a>
   1318e:	d02c      	beq.n	131ea <__udivmoddi4+0x76>
   13190:	4649      	mov	r1, r9
   13192:	4650      	mov	r0, sl
   13194:	f002 fd24 	bl	15be0 <__clzdi2>
   13198:	0029      	movs	r1, r5
   1319a:	0006      	movs	r6, r0
   1319c:	0020      	movs	r0, r4
   1319e:	f002 fd1f 	bl	15be0 <__clzdi2>
   131a2:	1a33      	subs	r3, r6, r0
   131a4:	4698      	mov	r8, r3
   131a6:	3b20      	subs	r3, #32
   131a8:	469b      	mov	fp, r3
   131aa:	d500      	bpl.n	131ae <__udivmoddi4+0x3a>
   131ac:	e074      	b.n	13298 <__udivmoddi4+0x124>
   131ae:	4653      	mov	r3, sl
   131b0:	465a      	mov	r2, fp
   131b2:	4093      	lsls	r3, r2
   131b4:	001f      	movs	r7, r3
   131b6:	4653      	mov	r3, sl
   131b8:	4642      	mov	r2, r8
   131ba:	4093      	lsls	r3, r2
   131bc:	001e      	movs	r6, r3
   131be:	42af      	cmp	r7, r5
   131c0:	d829      	bhi.n	13216 <__udivmoddi4+0xa2>
   131c2:	d026      	beq.n	13212 <__udivmoddi4+0x9e>
   131c4:	465b      	mov	r3, fp
   131c6:	1ba4      	subs	r4, r4, r6
   131c8:	41bd      	sbcs	r5, r7
   131ca:	2b00      	cmp	r3, #0
   131cc:	da00      	bge.n	131d0 <__udivmoddi4+0x5c>
   131ce:	e079      	b.n	132c4 <__udivmoddi4+0x150>
   131d0:	2200      	movs	r2, #0
   131d2:	2300      	movs	r3, #0
   131d4:	9200      	str	r2, [sp, #0]
   131d6:	9301      	str	r3, [sp, #4]
   131d8:	2301      	movs	r3, #1
   131da:	465a      	mov	r2, fp
   131dc:	4093      	lsls	r3, r2
   131de:	9301      	str	r3, [sp, #4]
   131e0:	2301      	movs	r3, #1
   131e2:	4642      	mov	r2, r8
   131e4:	4093      	lsls	r3, r2
   131e6:	9300      	str	r3, [sp, #0]
   131e8:	e019      	b.n	1321e <__udivmoddi4+0xaa>
   131ea:	4282      	cmp	r2, r0
   131ec:	d9d0      	bls.n	13190 <__udivmoddi4+0x1c>
   131ee:	2200      	movs	r2, #0
   131f0:	2300      	movs	r3, #0
   131f2:	9200      	str	r2, [sp, #0]
   131f4:	9301      	str	r3, [sp, #4]
   131f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   131f8:	2b00      	cmp	r3, #0
   131fa:	d001      	beq.n	13200 <__udivmoddi4+0x8c>
   131fc:	601c      	str	r4, [r3, #0]
   131fe:	605d      	str	r5, [r3, #4]
   13200:	9800      	ldr	r0, [sp, #0]
   13202:	9901      	ldr	r1, [sp, #4]
   13204:	b003      	add	sp, #12
   13206:	bc3c      	pop	{r2, r3, r4, r5}
   13208:	4690      	mov	r8, r2
   1320a:	4699      	mov	r9, r3
   1320c:	46a2      	mov	sl, r4
   1320e:	46ab      	mov	fp, r5
   13210:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13212:	42a3      	cmp	r3, r4
   13214:	d9d6      	bls.n	131c4 <__udivmoddi4+0x50>
   13216:	2200      	movs	r2, #0
   13218:	2300      	movs	r3, #0
   1321a:	9200      	str	r2, [sp, #0]
   1321c:	9301      	str	r3, [sp, #4]
   1321e:	4643      	mov	r3, r8
   13220:	2b00      	cmp	r3, #0
   13222:	d0e8      	beq.n	131f6 <__udivmoddi4+0x82>
   13224:	07fb      	lsls	r3, r7, #31
   13226:	0872      	lsrs	r2, r6, #1
   13228:	431a      	orrs	r2, r3
   1322a:	4646      	mov	r6, r8
   1322c:	087b      	lsrs	r3, r7, #1
   1322e:	e00e      	b.n	1324e <__udivmoddi4+0xda>
   13230:	42ab      	cmp	r3, r5
   13232:	d101      	bne.n	13238 <__udivmoddi4+0xc4>
   13234:	42a2      	cmp	r2, r4
   13236:	d80c      	bhi.n	13252 <__udivmoddi4+0xde>
   13238:	1aa4      	subs	r4, r4, r2
   1323a:	419d      	sbcs	r5, r3
   1323c:	2001      	movs	r0, #1
   1323e:	1924      	adds	r4, r4, r4
   13240:	416d      	adcs	r5, r5
   13242:	2100      	movs	r1, #0
   13244:	3e01      	subs	r6, #1
   13246:	1824      	adds	r4, r4, r0
   13248:	414d      	adcs	r5, r1
   1324a:	2e00      	cmp	r6, #0
   1324c:	d006      	beq.n	1325c <__udivmoddi4+0xe8>
   1324e:	42ab      	cmp	r3, r5
   13250:	d9ee      	bls.n	13230 <__udivmoddi4+0xbc>
   13252:	3e01      	subs	r6, #1
   13254:	1924      	adds	r4, r4, r4
   13256:	416d      	adcs	r5, r5
   13258:	2e00      	cmp	r6, #0
   1325a:	d1f8      	bne.n	1324e <__udivmoddi4+0xda>
   1325c:	465b      	mov	r3, fp
   1325e:	9800      	ldr	r0, [sp, #0]
   13260:	9901      	ldr	r1, [sp, #4]
   13262:	1900      	adds	r0, r0, r4
   13264:	4169      	adcs	r1, r5
   13266:	2b00      	cmp	r3, #0
   13268:	db22      	blt.n	132b0 <__udivmoddi4+0x13c>
   1326a:	002b      	movs	r3, r5
   1326c:	465a      	mov	r2, fp
   1326e:	40d3      	lsrs	r3, r2
   13270:	002a      	movs	r2, r5
   13272:	4644      	mov	r4, r8
   13274:	40e2      	lsrs	r2, r4
   13276:	001c      	movs	r4, r3
   13278:	465b      	mov	r3, fp
   1327a:	0015      	movs	r5, r2
   1327c:	2b00      	cmp	r3, #0
   1327e:	db2c      	blt.n	132da <__udivmoddi4+0x166>
   13280:	0026      	movs	r6, r4
   13282:	409e      	lsls	r6, r3
   13284:	0033      	movs	r3, r6
   13286:	0026      	movs	r6, r4
   13288:	4647      	mov	r7, r8
   1328a:	40be      	lsls	r6, r7
   1328c:	0032      	movs	r2, r6
   1328e:	1a80      	subs	r0, r0, r2
   13290:	4199      	sbcs	r1, r3
   13292:	9000      	str	r0, [sp, #0]
   13294:	9101      	str	r1, [sp, #4]
   13296:	e7ae      	b.n	131f6 <__udivmoddi4+0x82>
   13298:	4642      	mov	r2, r8
   1329a:	2320      	movs	r3, #32
   1329c:	1a9b      	subs	r3, r3, r2
   1329e:	4652      	mov	r2, sl
   132a0:	40da      	lsrs	r2, r3
   132a2:	4641      	mov	r1, r8
   132a4:	0013      	movs	r3, r2
   132a6:	464a      	mov	r2, r9
   132a8:	408a      	lsls	r2, r1
   132aa:	0017      	movs	r7, r2
   132ac:	431f      	orrs	r7, r3
   132ae:	e782      	b.n	131b6 <__udivmoddi4+0x42>
   132b0:	4642      	mov	r2, r8
   132b2:	2320      	movs	r3, #32
   132b4:	1a9b      	subs	r3, r3, r2
   132b6:	002a      	movs	r2, r5
   132b8:	4646      	mov	r6, r8
   132ba:	409a      	lsls	r2, r3
   132bc:	0023      	movs	r3, r4
   132be:	40f3      	lsrs	r3, r6
   132c0:	4313      	orrs	r3, r2
   132c2:	e7d5      	b.n	13270 <__udivmoddi4+0xfc>
   132c4:	4642      	mov	r2, r8
   132c6:	2320      	movs	r3, #32
   132c8:	2100      	movs	r1, #0
   132ca:	1a9b      	subs	r3, r3, r2
   132cc:	2200      	movs	r2, #0
   132ce:	9100      	str	r1, [sp, #0]
   132d0:	9201      	str	r2, [sp, #4]
   132d2:	2201      	movs	r2, #1
   132d4:	40da      	lsrs	r2, r3
   132d6:	9201      	str	r2, [sp, #4]
   132d8:	e782      	b.n	131e0 <__udivmoddi4+0x6c>
   132da:	4642      	mov	r2, r8
   132dc:	2320      	movs	r3, #32
   132de:	0026      	movs	r6, r4
   132e0:	1a9b      	subs	r3, r3, r2
   132e2:	40de      	lsrs	r6, r3
   132e4:	002f      	movs	r7, r5
   132e6:	46b4      	mov	ip, r6
   132e8:	4097      	lsls	r7, r2
   132ea:	4666      	mov	r6, ip
   132ec:	003b      	movs	r3, r7
   132ee:	4333      	orrs	r3, r6
   132f0:	e7c9      	b.n	13286 <__udivmoddi4+0x112>
   132f2:	46c0      	nop			; (mov r8, r8)

000132f4 <__aeabi_fadd>:
   132f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   132f6:	46c6      	mov	lr, r8
   132f8:	024e      	lsls	r6, r1, #9
   132fa:	0247      	lsls	r7, r0, #9
   132fc:	0a76      	lsrs	r6, r6, #9
   132fe:	0a7b      	lsrs	r3, r7, #9
   13300:	0044      	lsls	r4, r0, #1
   13302:	0fc5      	lsrs	r5, r0, #31
   13304:	00f7      	lsls	r7, r6, #3
   13306:	0048      	lsls	r0, r1, #1
   13308:	4698      	mov	r8, r3
   1330a:	b500      	push	{lr}
   1330c:	0e24      	lsrs	r4, r4, #24
   1330e:	002a      	movs	r2, r5
   13310:	00db      	lsls	r3, r3, #3
   13312:	0e00      	lsrs	r0, r0, #24
   13314:	0fc9      	lsrs	r1, r1, #31
   13316:	46bc      	mov	ip, r7
   13318:	428d      	cmp	r5, r1
   1331a:	d067      	beq.n	133ec <__aeabi_fadd+0xf8>
   1331c:	1a22      	subs	r2, r4, r0
   1331e:	2a00      	cmp	r2, #0
   13320:	dc00      	bgt.n	13324 <__aeabi_fadd+0x30>
   13322:	e0a5      	b.n	13470 <__aeabi_fadd+0x17c>
   13324:	2800      	cmp	r0, #0
   13326:	d13a      	bne.n	1339e <__aeabi_fadd+0xaa>
   13328:	2f00      	cmp	r7, #0
   1332a:	d100      	bne.n	1332e <__aeabi_fadd+0x3a>
   1332c:	e093      	b.n	13456 <__aeabi_fadd+0x162>
   1332e:	1e51      	subs	r1, r2, #1
   13330:	2900      	cmp	r1, #0
   13332:	d000      	beq.n	13336 <__aeabi_fadd+0x42>
   13334:	e0bc      	b.n	134b0 <__aeabi_fadd+0x1bc>
   13336:	2401      	movs	r4, #1
   13338:	1bdb      	subs	r3, r3, r7
   1333a:	015a      	lsls	r2, r3, #5
   1333c:	d546      	bpl.n	133cc <__aeabi_fadd+0xd8>
   1333e:	019b      	lsls	r3, r3, #6
   13340:	099e      	lsrs	r6, r3, #6
   13342:	0030      	movs	r0, r6
   13344:	f002 fc2e 	bl	15ba4 <__clzsi2>
   13348:	3805      	subs	r0, #5
   1334a:	4086      	lsls	r6, r0
   1334c:	4284      	cmp	r4, r0
   1334e:	dd00      	ble.n	13352 <__aeabi_fadd+0x5e>
   13350:	e09d      	b.n	1348e <__aeabi_fadd+0x19a>
   13352:	1b04      	subs	r4, r0, r4
   13354:	0032      	movs	r2, r6
   13356:	2020      	movs	r0, #32
   13358:	3401      	adds	r4, #1
   1335a:	40e2      	lsrs	r2, r4
   1335c:	1b04      	subs	r4, r0, r4
   1335e:	40a6      	lsls	r6, r4
   13360:	0033      	movs	r3, r6
   13362:	1e5e      	subs	r6, r3, #1
   13364:	41b3      	sbcs	r3, r6
   13366:	2400      	movs	r4, #0
   13368:	4313      	orrs	r3, r2
   1336a:	075a      	lsls	r2, r3, #29
   1336c:	d004      	beq.n	13378 <__aeabi_fadd+0x84>
   1336e:	220f      	movs	r2, #15
   13370:	401a      	ands	r2, r3
   13372:	2a04      	cmp	r2, #4
   13374:	d000      	beq.n	13378 <__aeabi_fadd+0x84>
   13376:	3304      	adds	r3, #4
   13378:	015a      	lsls	r2, r3, #5
   1337a:	d529      	bpl.n	133d0 <__aeabi_fadd+0xdc>
   1337c:	3401      	adds	r4, #1
   1337e:	2cff      	cmp	r4, #255	; 0xff
   13380:	d100      	bne.n	13384 <__aeabi_fadd+0x90>
   13382:	e081      	b.n	13488 <__aeabi_fadd+0x194>
   13384:	002a      	movs	r2, r5
   13386:	019b      	lsls	r3, r3, #6
   13388:	0a5b      	lsrs	r3, r3, #9
   1338a:	b2e4      	uxtb	r4, r4
   1338c:	025b      	lsls	r3, r3, #9
   1338e:	05e4      	lsls	r4, r4, #23
   13390:	0a58      	lsrs	r0, r3, #9
   13392:	07d2      	lsls	r2, r2, #31
   13394:	4320      	orrs	r0, r4
   13396:	4310      	orrs	r0, r2
   13398:	bc04      	pop	{r2}
   1339a:	4690      	mov	r8, r2
   1339c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1339e:	2cff      	cmp	r4, #255	; 0xff
   133a0:	d0e3      	beq.n	1336a <__aeabi_fadd+0x76>
   133a2:	2180      	movs	r1, #128	; 0x80
   133a4:	0038      	movs	r0, r7
   133a6:	04c9      	lsls	r1, r1, #19
   133a8:	4308      	orrs	r0, r1
   133aa:	4684      	mov	ip, r0
   133ac:	2a1b      	cmp	r2, #27
   133ae:	dd00      	ble.n	133b2 <__aeabi_fadd+0xbe>
   133b0:	e082      	b.n	134b8 <__aeabi_fadd+0x1c4>
   133b2:	2020      	movs	r0, #32
   133b4:	4661      	mov	r1, ip
   133b6:	40d1      	lsrs	r1, r2
   133b8:	1a82      	subs	r2, r0, r2
   133ba:	4660      	mov	r0, ip
   133bc:	4090      	lsls	r0, r2
   133be:	0002      	movs	r2, r0
   133c0:	1e50      	subs	r0, r2, #1
   133c2:	4182      	sbcs	r2, r0
   133c4:	430a      	orrs	r2, r1
   133c6:	1a9b      	subs	r3, r3, r2
   133c8:	015a      	lsls	r2, r3, #5
   133ca:	d4b8      	bmi.n	1333e <__aeabi_fadd+0x4a>
   133cc:	075a      	lsls	r2, r3, #29
   133ce:	d1ce      	bne.n	1336e <__aeabi_fadd+0x7a>
   133d0:	08de      	lsrs	r6, r3, #3
   133d2:	002a      	movs	r2, r5
   133d4:	2cff      	cmp	r4, #255	; 0xff
   133d6:	d13a      	bne.n	1344e <__aeabi_fadd+0x15a>
   133d8:	2e00      	cmp	r6, #0
   133da:	d100      	bne.n	133de <__aeabi_fadd+0xea>
   133dc:	e0ae      	b.n	1353c <__aeabi_fadd+0x248>
   133de:	2380      	movs	r3, #128	; 0x80
   133e0:	03db      	lsls	r3, r3, #15
   133e2:	4333      	orrs	r3, r6
   133e4:	025b      	lsls	r3, r3, #9
   133e6:	0a5b      	lsrs	r3, r3, #9
   133e8:	24ff      	movs	r4, #255	; 0xff
   133ea:	e7cf      	b.n	1338c <__aeabi_fadd+0x98>
   133ec:	1a21      	subs	r1, r4, r0
   133ee:	2900      	cmp	r1, #0
   133f0:	dd52      	ble.n	13498 <__aeabi_fadd+0x1a4>
   133f2:	2800      	cmp	r0, #0
   133f4:	d031      	beq.n	1345a <__aeabi_fadd+0x166>
   133f6:	2cff      	cmp	r4, #255	; 0xff
   133f8:	d0b7      	beq.n	1336a <__aeabi_fadd+0x76>
   133fa:	2080      	movs	r0, #128	; 0x80
   133fc:	003e      	movs	r6, r7
   133fe:	04c0      	lsls	r0, r0, #19
   13400:	4306      	orrs	r6, r0
   13402:	46b4      	mov	ip, r6
   13404:	291b      	cmp	r1, #27
   13406:	dd00      	ble.n	1340a <__aeabi_fadd+0x116>
   13408:	e0aa      	b.n	13560 <__aeabi_fadd+0x26c>
   1340a:	2620      	movs	r6, #32
   1340c:	4660      	mov	r0, ip
   1340e:	40c8      	lsrs	r0, r1
   13410:	1a71      	subs	r1, r6, r1
   13412:	4666      	mov	r6, ip
   13414:	408e      	lsls	r6, r1
   13416:	0031      	movs	r1, r6
   13418:	1e4e      	subs	r6, r1, #1
   1341a:	41b1      	sbcs	r1, r6
   1341c:	4301      	orrs	r1, r0
   1341e:	185b      	adds	r3, r3, r1
   13420:	0159      	lsls	r1, r3, #5
   13422:	d5d3      	bpl.n	133cc <__aeabi_fadd+0xd8>
   13424:	3401      	adds	r4, #1
   13426:	2cff      	cmp	r4, #255	; 0xff
   13428:	d100      	bne.n	1342c <__aeabi_fadd+0x138>
   1342a:	e087      	b.n	1353c <__aeabi_fadd+0x248>
   1342c:	2201      	movs	r2, #1
   1342e:	4978      	ldr	r1, [pc, #480]	; (13610 <__aeabi_fadd+0x31c>)
   13430:	401a      	ands	r2, r3
   13432:	085b      	lsrs	r3, r3, #1
   13434:	400b      	ands	r3, r1
   13436:	4313      	orrs	r3, r2
   13438:	e797      	b.n	1336a <__aeabi_fadd+0x76>
   1343a:	2c00      	cmp	r4, #0
   1343c:	d000      	beq.n	13440 <__aeabi_fadd+0x14c>
   1343e:	e0a7      	b.n	13590 <__aeabi_fadd+0x29c>
   13440:	2b00      	cmp	r3, #0
   13442:	d000      	beq.n	13446 <__aeabi_fadd+0x152>
   13444:	e0b6      	b.n	135b4 <__aeabi_fadd+0x2c0>
   13446:	1e3b      	subs	r3, r7, #0
   13448:	d162      	bne.n	13510 <__aeabi_fadd+0x21c>
   1344a:	2600      	movs	r6, #0
   1344c:	2200      	movs	r2, #0
   1344e:	0273      	lsls	r3, r6, #9
   13450:	0a5b      	lsrs	r3, r3, #9
   13452:	b2e4      	uxtb	r4, r4
   13454:	e79a      	b.n	1338c <__aeabi_fadd+0x98>
   13456:	0014      	movs	r4, r2
   13458:	e787      	b.n	1336a <__aeabi_fadd+0x76>
   1345a:	2f00      	cmp	r7, #0
   1345c:	d04d      	beq.n	134fa <__aeabi_fadd+0x206>
   1345e:	1e48      	subs	r0, r1, #1
   13460:	2800      	cmp	r0, #0
   13462:	d157      	bne.n	13514 <__aeabi_fadd+0x220>
   13464:	4463      	add	r3, ip
   13466:	2401      	movs	r4, #1
   13468:	015a      	lsls	r2, r3, #5
   1346a:	d5af      	bpl.n	133cc <__aeabi_fadd+0xd8>
   1346c:	2402      	movs	r4, #2
   1346e:	e7dd      	b.n	1342c <__aeabi_fadd+0x138>
   13470:	2a00      	cmp	r2, #0
   13472:	d124      	bne.n	134be <__aeabi_fadd+0x1ca>
   13474:	1c62      	adds	r2, r4, #1
   13476:	b2d2      	uxtb	r2, r2
   13478:	2a01      	cmp	r2, #1
   1347a:	ddde      	ble.n	1343a <__aeabi_fadd+0x146>
   1347c:	1bde      	subs	r6, r3, r7
   1347e:	0172      	lsls	r2, r6, #5
   13480:	d535      	bpl.n	134ee <__aeabi_fadd+0x1fa>
   13482:	1afe      	subs	r6, r7, r3
   13484:	000d      	movs	r5, r1
   13486:	e75c      	b.n	13342 <__aeabi_fadd+0x4e>
   13488:	002a      	movs	r2, r5
   1348a:	2300      	movs	r3, #0
   1348c:	e77e      	b.n	1338c <__aeabi_fadd+0x98>
   1348e:	0033      	movs	r3, r6
   13490:	4a60      	ldr	r2, [pc, #384]	; (13614 <__aeabi_fadd+0x320>)
   13492:	1a24      	subs	r4, r4, r0
   13494:	4013      	ands	r3, r2
   13496:	e768      	b.n	1336a <__aeabi_fadd+0x76>
   13498:	2900      	cmp	r1, #0
   1349a:	d163      	bne.n	13564 <__aeabi_fadd+0x270>
   1349c:	1c61      	adds	r1, r4, #1
   1349e:	b2c8      	uxtb	r0, r1
   134a0:	2801      	cmp	r0, #1
   134a2:	dd4e      	ble.n	13542 <__aeabi_fadd+0x24e>
   134a4:	29ff      	cmp	r1, #255	; 0xff
   134a6:	d049      	beq.n	1353c <__aeabi_fadd+0x248>
   134a8:	4463      	add	r3, ip
   134aa:	085b      	lsrs	r3, r3, #1
   134ac:	000c      	movs	r4, r1
   134ae:	e75c      	b.n	1336a <__aeabi_fadd+0x76>
   134b0:	2aff      	cmp	r2, #255	; 0xff
   134b2:	d041      	beq.n	13538 <__aeabi_fadd+0x244>
   134b4:	000a      	movs	r2, r1
   134b6:	e779      	b.n	133ac <__aeabi_fadd+0xb8>
   134b8:	2201      	movs	r2, #1
   134ba:	1a9b      	subs	r3, r3, r2
   134bc:	e784      	b.n	133c8 <__aeabi_fadd+0xd4>
   134be:	2c00      	cmp	r4, #0
   134c0:	d01d      	beq.n	134fe <__aeabi_fadd+0x20a>
   134c2:	28ff      	cmp	r0, #255	; 0xff
   134c4:	d022      	beq.n	1350c <__aeabi_fadd+0x218>
   134c6:	2480      	movs	r4, #128	; 0x80
   134c8:	04e4      	lsls	r4, r4, #19
   134ca:	4252      	negs	r2, r2
   134cc:	4323      	orrs	r3, r4
   134ce:	2a1b      	cmp	r2, #27
   134d0:	dd00      	ble.n	134d4 <__aeabi_fadd+0x1e0>
   134d2:	e08a      	b.n	135ea <__aeabi_fadd+0x2f6>
   134d4:	001c      	movs	r4, r3
   134d6:	2520      	movs	r5, #32
   134d8:	40d4      	lsrs	r4, r2
   134da:	1aaa      	subs	r2, r5, r2
   134dc:	4093      	lsls	r3, r2
   134de:	1e5a      	subs	r2, r3, #1
   134e0:	4193      	sbcs	r3, r2
   134e2:	4323      	orrs	r3, r4
   134e4:	4662      	mov	r2, ip
   134e6:	0004      	movs	r4, r0
   134e8:	1ad3      	subs	r3, r2, r3
   134ea:	000d      	movs	r5, r1
   134ec:	e725      	b.n	1333a <__aeabi_fadd+0x46>
   134ee:	2e00      	cmp	r6, #0
   134f0:	d000      	beq.n	134f4 <__aeabi_fadd+0x200>
   134f2:	e726      	b.n	13342 <__aeabi_fadd+0x4e>
   134f4:	2200      	movs	r2, #0
   134f6:	2400      	movs	r4, #0
   134f8:	e7a9      	b.n	1344e <__aeabi_fadd+0x15a>
   134fa:	000c      	movs	r4, r1
   134fc:	e735      	b.n	1336a <__aeabi_fadd+0x76>
   134fe:	2b00      	cmp	r3, #0
   13500:	d04d      	beq.n	1359e <__aeabi_fadd+0x2aa>
   13502:	43d2      	mvns	r2, r2
   13504:	2a00      	cmp	r2, #0
   13506:	d0ed      	beq.n	134e4 <__aeabi_fadd+0x1f0>
   13508:	28ff      	cmp	r0, #255	; 0xff
   1350a:	d1e0      	bne.n	134ce <__aeabi_fadd+0x1da>
   1350c:	4663      	mov	r3, ip
   1350e:	24ff      	movs	r4, #255	; 0xff
   13510:	000d      	movs	r5, r1
   13512:	e72a      	b.n	1336a <__aeabi_fadd+0x76>
   13514:	29ff      	cmp	r1, #255	; 0xff
   13516:	d00f      	beq.n	13538 <__aeabi_fadd+0x244>
   13518:	0001      	movs	r1, r0
   1351a:	e773      	b.n	13404 <__aeabi_fadd+0x110>
   1351c:	2b00      	cmp	r3, #0
   1351e:	d061      	beq.n	135e4 <__aeabi_fadd+0x2f0>
   13520:	24ff      	movs	r4, #255	; 0xff
   13522:	2f00      	cmp	r7, #0
   13524:	d100      	bne.n	13528 <__aeabi_fadd+0x234>
   13526:	e720      	b.n	1336a <__aeabi_fadd+0x76>
   13528:	2280      	movs	r2, #128	; 0x80
   1352a:	4641      	mov	r1, r8
   1352c:	03d2      	lsls	r2, r2, #15
   1352e:	4211      	tst	r1, r2
   13530:	d002      	beq.n	13538 <__aeabi_fadd+0x244>
   13532:	4216      	tst	r6, r2
   13534:	d100      	bne.n	13538 <__aeabi_fadd+0x244>
   13536:	003b      	movs	r3, r7
   13538:	24ff      	movs	r4, #255	; 0xff
   1353a:	e716      	b.n	1336a <__aeabi_fadd+0x76>
   1353c:	24ff      	movs	r4, #255	; 0xff
   1353e:	2300      	movs	r3, #0
   13540:	e724      	b.n	1338c <__aeabi_fadd+0x98>
   13542:	2c00      	cmp	r4, #0
   13544:	d1ea      	bne.n	1351c <__aeabi_fadd+0x228>
   13546:	2b00      	cmp	r3, #0
   13548:	d058      	beq.n	135fc <__aeabi_fadd+0x308>
   1354a:	2f00      	cmp	r7, #0
   1354c:	d100      	bne.n	13550 <__aeabi_fadd+0x25c>
   1354e:	e70c      	b.n	1336a <__aeabi_fadd+0x76>
   13550:	4463      	add	r3, ip
   13552:	015a      	lsls	r2, r3, #5
   13554:	d400      	bmi.n	13558 <__aeabi_fadd+0x264>
   13556:	e739      	b.n	133cc <__aeabi_fadd+0xd8>
   13558:	4a2e      	ldr	r2, [pc, #184]	; (13614 <__aeabi_fadd+0x320>)
   1355a:	000c      	movs	r4, r1
   1355c:	4013      	ands	r3, r2
   1355e:	e704      	b.n	1336a <__aeabi_fadd+0x76>
   13560:	2101      	movs	r1, #1
   13562:	e75c      	b.n	1341e <__aeabi_fadd+0x12a>
   13564:	2c00      	cmp	r4, #0
   13566:	d11e      	bne.n	135a6 <__aeabi_fadd+0x2b2>
   13568:	2b00      	cmp	r3, #0
   1356a:	d040      	beq.n	135ee <__aeabi_fadd+0x2fa>
   1356c:	43c9      	mvns	r1, r1
   1356e:	2900      	cmp	r1, #0
   13570:	d00b      	beq.n	1358a <__aeabi_fadd+0x296>
   13572:	28ff      	cmp	r0, #255	; 0xff
   13574:	d036      	beq.n	135e4 <__aeabi_fadd+0x2f0>
   13576:	291b      	cmp	r1, #27
   13578:	dc47      	bgt.n	1360a <__aeabi_fadd+0x316>
   1357a:	001c      	movs	r4, r3
   1357c:	2620      	movs	r6, #32
   1357e:	40cc      	lsrs	r4, r1
   13580:	1a71      	subs	r1, r6, r1
   13582:	408b      	lsls	r3, r1
   13584:	1e59      	subs	r1, r3, #1
   13586:	418b      	sbcs	r3, r1
   13588:	4323      	orrs	r3, r4
   1358a:	4463      	add	r3, ip
   1358c:	0004      	movs	r4, r0
   1358e:	e747      	b.n	13420 <__aeabi_fadd+0x12c>
   13590:	2b00      	cmp	r3, #0
   13592:	d118      	bne.n	135c6 <__aeabi_fadd+0x2d2>
   13594:	1e3b      	subs	r3, r7, #0
   13596:	d02d      	beq.n	135f4 <__aeabi_fadd+0x300>
   13598:	000d      	movs	r5, r1
   1359a:	24ff      	movs	r4, #255	; 0xff
   1359c:	e6e5      	b.n	1336a <__aeabi_fadd+0x76>
   1359e:	003b      	movs	r3, r7
   135a0:	0004      	movs	r4, r0
   135a2:	000d      	movs	r5, r1
   135a4:	e6e1      	b.n	1336a <__aeabi_fadd+0x76>
   135a6:	28ff      	cmp	r0, #255	; 0xff
   135a8:	d01c      	beq.n	135e4 <__aeabi_fadd+0x2f0>
   135aa:	2480      	movs	r4, #128	; 0x80
   135ac:	04e4      	lsls	r4, r4, #19
   135ae:	4249      	negs	r1, r1
   135b0:	4323      	orrs	r3, r4
   135b2:	e7e0      	b.n	13576 <__aeabi_fadd+0x282>
   135b4:	2f00      	cmp	r7, #0
   135b6:	d100      	bne.n	135ba <__aeabi_fadd+0x2c6>
   135b8:	e6d7      	b.n	1336a <__aeabi_fadd+0x76>
   135ba:	1bde      	subs	r6, r3, r7
   135bc:	0172      	lsls	r2, r6, #5
   135be:	d51f      	bpl.n	13600 <__aeabi_fadd+0x30c>
   135c0:	1afb      	subs	r3, r7, r3
   135c2:	000d      	movs	r5, r1
   135c4:	e6d1      	b.n	1336a <__aeabi_fadd+0x76>
   135c6:	24ff      	movs	r4, #255	; 0xff
   135c8:	2f00      	cmp	r7, #0
   135ca:	d100      	bne.n	135ce <__aeabi_fadd+0x2da>
   135cc:	e6cd      	b.n	1336a <__aeabi_fadd+0x76>
   135ce:	2280      	movs	r2, #128	; 0x80
   135d0:	4640      	mov	r0, r8
   135d2:	03d2      	lsls	r2, r2, #15
   135d4:	4210      	tst	r0, r2
   135d6:	d0af      	beq.n	13538 <__aeabi_fadd+0x244>
   135d8:	4216      	tst	r6, r2
   135da:	d1ad      	bne.n	13538 <__aeabi_fadd+0x244>
   135dc:	003b      	movs	r3, r7
   135de:	000d      	movs	r5, r1
   135e0:	24ff      	movs	r4, #255	; 0xff
   135e2:	e6c2      	b.n	1336a <__aeabi_fadd+0x76>
   135e4:	4663      	mov	r3, ip
   135e6:	24ff      	movs	r4, #255	; 0xff
   135e8:	e6bf      	b.n	1336a <__aeabi_fadd+0x76>
   135ea:	2301      	movs	r3, #1
   135ec:	e77a      	b.n	134e4 <__aeabi_fadd+0x1f0>
   135ee:	003b      	movs	r3, r7
   135f0:	0004      	movs	r4, r0
   135f2:	e6ba      	b.n	1336a <__aeabi_fadd+0x76>
   135f4:	2680      	movs	r6, #128	; 0x80
   135f6:	2200      	movs	r2, #0
   135f8:	03f6      	lsls	r6, r6, #15
   135fa:	e6f0      	b.n	133de <__aeabi_fadd+0xea>
   135fc:	003b      	movs	r3, r7
   135fe:	e6b4      	b.n	1336a <__aeabi_fadd+0x76>
   13600:	1e33      	subs	r3, r6, #0
   13602:	d000      	beq.n	13606 <__aeabi_fadd+0x312>
   13604:	e6e2      	b.n	133cc <__aeabi_fadd+0xd8>
   13606:	2200      	movs	r2, #0
   13608:	e721      	b.n	1344e <__aeabi_fadd+0x15a>
   1360a:	2301      	movs	r3, #1
   1360c:	e7bd      	b.n	1358a <__aeabi_fadd+0x296>
   1360e:	46c0      	nop			; (mov r8, r8)
   13610:	7dffffff 	.word	0x7dffffff
   13614:	fbffffff 	.word	0xfbffffff

00013618 <__aeabi_fdiv>:
   13618:	b5f0      	push	{r4, r5, r6, r7, lr}
   1361a:	4657      	mov	r7, sl
   1361c:	464e      	mov	r6, r9
   1361e:	46de      	mov	lr, fp
   13620:	4645      	mov	r5, r8
   13622:	b5e0      	push	{r5, r6, r7, lr}
   13624:	0244      	lsls	r4, r0, #9
   13626:	0043      	lsls	r3, r0, #1
   13628:	0fc6      	lsrs	r6, r0, #31
   1362a:	b083      	sub	sp, #12
   1362c:	1c0f      	adds	r7, r1, #0
   1362e:	0a64      	lsrs	r4, r4, #9
   13630:	0e1b      	lsrs	r3, r3, #24
   13632:	46b2      	mov	sl, r6
   13634:	d053      	beq.n	136de <__aeabi_fdiv+0xc6>
   13636:	2bff      	cmp	r3, #255	; 0xff
   13638:	d027      	beq.n	1368a <__aeabi_fdiv+0x72>
   1363a:	2280      	movs	r2, #128	; 0x80
   1363c:	00e4      	lsls	r4, r4, #3
   1363e:	04d2      	lsls	r2, r2, #19
   13640:	4314      	orrs	r4, r2
   13642:	227f      	movs	r2, #127	; 0x7f
   13644:	4252      	negs	r2, r2
   13646:	4690      	mov	r8, r2
   13648:	4498      	add	r8, r3
   1364a:	2300      	movs	r3, #0
   1364c:	4699      	mov	r9, r3
   1364e:	469b      	mov	fp, r3
   13650:	027d      	lsls	r5, r7, #9
   13652:	0078      	lsls	r0, r7, #1
   13654:	0ffb      	lsrs	r3, r7, #31
   13656:	0a6d      	lsrs	r5, r5, #9
   13658:	0e00      	lsrs	r0, r0, #24
   1365a:	9300      	str	r3, [sp, #0]
   1365c:	d024      	beq.n	136a8 <__aeabi_fdiv+0x90>
   1365e:	28ff      	cmp	r0, #255	; 0xff
   13660:	d046      	beq.n	136f0 <__aeabi_fdiv+0xd8>
   13662:	2380      	movs	r3, #128	; 0x80
   13664:	2100      	movs	r1, #0
   13666:	00ed      	lsls	r5, r5, #3
   13668:	04db      	lsls	r3, r3, #19
   1366a:	431d      	orrs	r5, r3
   1366c:	387f      	subs	r0, #127	; 0x7f
   1366e:	4647      	mov	r7, r8
   13670:	1a38      	subs	r0, r7, r0
   13672:	464f      	mov	r7, r9
   13674:	430f      	orrs	r7, r1
   13676:	00bf      	lsls	r7, r7, #2
   13678:	46b9      	mov	r9, r7
   1367a:	0033      	movs	r3, r6
   1367c:	9a00      	ldr	r2, [sp, #0]
   1367e:	4f87      	ldr	r7, [pc, #540]	; (1389c <__aeabi_fdiv+0x284>)
   13680:	4053      	eors	r3, r2
   13682:	464a      	mov	r2, r9
   13684:	58ba      	ldr	r2, [r7, r2]
   13686:	9301      	str	r3, [sp, #4]
   13688:	4697      	mov	pc, r2
   1368a:	2c00      	cmp	r4, #0
   1368c:	d14e      	bne.n	1372c <__aeabi_fdiv+0x114>
   1368e:	2308      	movs	r3, #8
   13690:	4699      	mov	r9, r3
   13692:	33f7      	adds	r3, #247	; 0xf7
   13694:	4698      	mov	r8, r3
   13696:	3bfd      	subs	r3, #253	; 0xfd
   13698:	469b      	mov	fp, r3
   1369a:	027d      	lsls	r5, r7, #9
   1369c:	0078      	lsls	r0, r7, #1
   1369e:	0ffb      	lsrs	r3, r7, #31
   136a0:	0a6d      	lsrs	r5, r5, #9
   136a2:	0e00      	lsrs	r0, r0, #24
   136a4:	9300      	str	r3, [sp, #0]
   136a6:	d1da      	bne.n	1365e <__aeabi_fdiv+0x46>
   136a8:	2d00      	cmp	r5, #0
   136aa:	d126      	bne.n	136fa <__aeabi_fdiv+0xe2>
   136ac:	2000      	movs	r0, #0
   136ae:	2101      	movs	r1, #1
   136b0:	0033      	movs	r3, r6
   136b2:	9a00      	ldr	r2, [sp, #0]
   136b4:	4f7a      	ldr	r7, [pc, #488]	; (138a0 <__aeabi_fdiv+0x288>)
   136b6:	4053      	eors	r3, r2
   136b8:	4642      	mov	r2, r8
   136ba:	1a10      	subs	r0, r2, r0
   136bc:	464a      	mov	r2, r9
   136be:	430a      	orrs	r2, r1
   136c0:	0092      	lsls	r2, r2, #2
   136c2:	58ba      	ldr	r2, [r7, r2]
   136c4:	001d      	movs	r5, r3
   136c6:	4697      	mov	pc, r2
   136c8:	9b00      	ldr	r3, [sp, #0]
   136ca:	002c      	movs	r4, r5
   136cc:	469a      	mov	sl, r3
   136ce:	468b      	mov	fp, r1
   136d0:	465b      	mov	r3, fp
   136d2:	2b02      	cmp	r3, #2
   136d4:	d131      	bne.n	1373a <__aeabi_fdiv+0x122>
   136d6:	4653      	mov	r3, sl
   136d8:	21ff      	movs	r1, #255	; 0xff
   136da:	2400      	movs	r4, #0
   136dc:	e038      	b.n	13750 <__aeabi_fdiv+0x138>
   136de:	2c00      	cmp	r4, #0
   136e0:	d117      	bne.n	13712 <__aeabi_fdiv+0xfa>
   136e2:	2304      	movs	r3, #4
   136e4:	4699      	mov	r9, r3
   136e6:	2300      	movs	r3, #0
   136e8:	4698      	mov	r8, r3
   136ea:	3301      	adds	r3, #1
   136ec:	469b      	mov	fp, r3
   136ee:	e7af      	b.n	13650 <__aeabi_fdiv+0x38>
   136f0:	20ff      	movs	r0, #255	; 0xff
   136f2:	2d00      	cmp	r5, #0
   136f4:	d10b      	bne.n	1370e <__aeabi_fdiv+0xf6>
   136f6:	2102      	movs	r1, #2
   136f8:	e7da      	b.n	136b0 <__aeabi_fdiv+0x98>
   136fa:	0028      	movs	r0, r5
   136fc:	f002 fa52 	bl	15ba4 <__clzsi2>
   13700:	1f43      	subs	r3, r0, #5
   13702:	409d      	lsls	r5, r3
   13704:	2376      	movs	r3, #118	; 0x76
   13706:	425b      	negs	r3, r3
   13708:	1a18      	subs	r0, r3, r0
   1370a:	2100      	movs	r1, #0
   1370c:	e7af      	b.n	1366e <__aeabi_fdiv+0x56>
   1370e:	2103      	movs	r1, #3
   13710:	e7ad      	b.n	1366e <__aeabi_fdiv+0x56>
   13712:	0020      	movs	r0, r4
   13714:	f002 fa46 	bl	15ba4 <__clzsi2>
   13718:	1f43      	subs	r3, r0, #5
   1371a:	409c      	lsls	r4, r3
   1371c:	2376      	movs	r3, #118	; 0x76
   1371e:	425b      	negs	r3, r3
   13720:	1a1b      	subs	r3, r3, r0
   13722:	4698      	mov	r8, r3
   13724:	2300      	movs	r3, #0
   13726:	4699      	mov	r9, r3
   13728:	469b      	mov	fp, r3
   1372a:	e791      	b.n	13650 <__aeabi_fdiv+0x38>
   1372c:	230c      	movs	r3, #12
   1372e:	4699      	mov	r9, r3
   13730:	33f3      	adds	r3, #243	; 0xf3
   13732:	4698      	mov	r8, r3
   13734:	3bfc      	subs	r3, #252	; 0xfc
   13736:	469b      	mov	fp, r3
   13738:	e78a      	b.n	13650 <__aeabi_fdiv+0x38>
   1373a:	2b03      	cmp	r3, #3
   1373c:	d100      	bne.n	13740 <__aeabi_fdiv+0x128>
   1373e:	e0a5      	b.n	1388c <__aeabi_fdiv+0x274>
   13740:	4655      	mov	r5, sl
   13742:	2b01      	cmp	r3, #1
   13744:	d000      	beq.n	13748 <__aeabi_fdiv+0x130>
   13746:	e081      	b.n	1384c <__aeabi_fdiv+0x234>
   13748:	2301      	movs	r3, #1
   1374a:	2100      	movs	r1, #0
   1374c:	2400      	movs	r4, #0
   1374e:	402b      	ands	r3, r5
   13750:	0264      	lsls	r4, r4, #9
   13752:	05c9      	lsls	r1, r1, #23
   13754:	0a60      	lsrs	r0, r4, #9
   13756:	07db      	lsls	r3, r3, #31
   13758:	4308      	orrs	r0, r1
   1375a:	4318      	orrs	r0, r3
   1375c:	b003      	add	sp, #12
   1375e:	bc3c      	pop	{r2, r3, r4, r5}
   13760:	4690      	mov	r8, r2
   13762:	4699      	mov	r9, r3
   13764:	46a2      	mov	sl, r4
   13766:	46ab      	mov	fp, r5
   13768:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1376a:	2480      	movs	r4, #128	; 0x80
   1376c:	2300      	movs	r3, #0
   1376e:	03e4      	lsls	r4, r4, #15
   13770:	21ff      	movs	r1, #255	; 0xff
   13772:	e7ed      	b.n	13750 <__aeabi_fdiv+0x138>
   13774:	21ff      	movs	r1, #255	; 0xff
   13776:	2400      	movs	r4, #0
   13778:	e7ea      	b.n	13750 <__aeabi_fdiv+0x138>
   1377a:	2301      	movs	r3, #1
   1377c:	1a59      	subs	r1, r3, r1
   1377e:	291b      	cmp	r1, #27
   13780:	dd66      	ble.n	13850 <__aeabi_fdiv+0x238>
   13782:	9a01      	ldr	r2, [sp, #4]
   13784:	4013      	ands	r3, r2
   13786:	2100      	movs	r1, #0
   13788:	2400      	movs	r4, #0
   1378a:	e7e1      	b.n	13750 <__aeabi_fdiv+0x138>
   1378c:	2380      	movs	r3, #128	; 0x80
   1378e:	03db      	lsls	r3, r3, #15
   13790:	421c      	tst	r4, r3
   13792:	d038      	beq.n	13806 <__aeabi_fdiv+0x1ee>
   13794:	421d      	tst	r5, r3
   13796:	d051      	beq.n	1383c <__aeabi_fdiv+0x224>
   13798:	431c      	orrs	r4, r3
   1379a:	0264      	lsls	r4, r4, #9
   1379c:	0a64      	lsrs	r4, r4, #9
   1379e:	0033      	movs	r3, r6
   137a0:	21ff      	movs	r1, #255	; 0xff
   137a2:	e7d5      	b.n	13750 <__aeabi_fdiv+0x138>
   137a4:	0163      	lsls	r3, r4, #5
   137a6:	016c      	lsls	r4, r5, #5
   137a8:	42a3      	cmp	r3, r4
   137aa:	d23b      	bcs.n	13824 <__aeabi_fdiv+0x20c>
   137ac:	261b      	movs	r6, #27
   137ae:	2100      	movs	r1, #0
   137b0:	3801      	subs	r0, #1
   137b2:	2501      	movs	r5, #1
   137b4:	001f      	movs	r7, r3
   137b6:	0049      	lsls	r1, r1, #1
   137b8:	005b      	lsls	r3, r3, #1
   137ba:	2f00      	cmp	r7, #0
   137bc:	db01      	blt.n	137c2 <__aeabi_fdiv+0x1aa>
   137be:	429c      	cmp	r4, r3
   137c0:	d801      	bhi.n	137c6 <__aeabi_fdiv+0x1ae>
   137c2:	1b1b      	subs	r3, r3, r4
   137c4:	4329      	orrs	r1, r5
   137c6:	3e01      	subs	r6, #1
   137c8:	2e00      	cmp	r6, #0
   137ca:	d1f3      	bne.n	137b4 <__aeabi_fdiv+0x19c>
   137cc:	001c      	movs	r4, r3
   137ce:	1e63      	subs	r3, r4, #1
   137d0:	419c      	sbcs	r4, r3
   137d2:	430c      	orrs	r4, r1
   137d4:	0001      	movs	r1, r0
   137d6:	317f      	adds	r1, #127	; 0x7f
   137d8:	2900      	cmp	r1, #0
   137da:	ddce      	ble.n	1377a <__aeabi_fdiv+0x162>
   137dc:	0763      	lsls	r3, r4, #29
   137de:	d004      	beq.n	137ea <__aeabi_fdiv+0x1d2>
   137e0:	230f      	movs	r3, #15
   137e2:	4023      	ands	r3, r4
   137e4:	2b04      	cmp	r3, #4
   137e6:	d000      	beq.n	137ea <__aeabi_fdiv+0x1d2>
   137e8:	3404      	adds	r4, #4
   137ea:	0123      	lsls	r3, r4, #4
   137ec:	d503      	bpl.n	137f6 <__aeabi_fdiv+0x1de>
   137ee:	0001      	movs	r1, r0
   137f0:	4b2c      	ldr	r3, [pc, #176]	; (138a4 <__aeabi_fdiv+0x28c>)
   137f2:	3180      	adds	r1, #128	; 0x80
   137f4:	401c      	ands	r4, r3
   137f6:	29fe      	cmp	r1, #254	; 0xfe
   137f8:	dd0d      	ble.n	13816 <__aeabi_fdiv+0x1fe>
   137fa:	2301      	movs	r3, #1
   137fc:	9a01      	ldr	r2, [sp, #4]
   137fe:	21ff      	movs	r1, #255	; 0xff
   13800:	4013      	ands	r3, r2
   13802:	2400      	movs	r4, #0
   13804:	e7a4      	b.n	13750 <__aeabi_fdiv+0x138>
   13806:	2380      	movs	r3, #128	; 0x80
   13808:	03db      	lsls	r3, r3, #15
   1380a:	431c      	orrs	r4, r3
   1380c:	0264      	lsls	r4, r4, #9
   1380e:	0a64      	lsrs	r4, r4, #9
   13810:	0033      	movs	r3, r6
   13812:	21ff      	movs	r1, #255	; 0xff
   13814:	e79c      	b.n	13750 <__aeabi_fdiv+0x138>
   13816:	2301      	movs	r3, #1
   13818:	9a01      	ldr	r2, [sp, #4]
   1381a:	01a4      	lsls	r4, r4, #6
   1381c:	0a64      	lsrs	r4, r4, #9
   1381e:	b2c9      	uxtb	r1, r1
   13820:	4013      	ands	r3, r2
   13822:	e795      	b.n	13750 <__aeabi_fdiv+0x138>
   13824:	1b1b      	subs	r3, r3, r4
   13826:	261a      	movs	r6, #26
   13828:	2101      	movs	r1, #1
   1382a:	e7c2      	b.n	137b2 <__aeabi_fdiv+0x19a>
   1382c:	9b00      	ldr	r3, [sp, #0]
   1382e:	468b      	mov	fp, r1
   13830:	469a      	mov	sl, r3
   13832:	2400      	movs	r4, #0
   13834:	e74c      	b.n	136d0 <__aeabi_fdiv+0xb8>
   13836:	0263      	lsls	r3, r4, #9
   13838:	d5e5      	bpl.n	13806 <__aeabi_fdiv+0x1ee>
   1383a:	2500      	movs	r5, #0
   1383c:	2480      	movs	r4, #128	; 0x80
   1383e:	03e4      	lsls	r4, r4, #15
   13840:	432c      	orrs	r4, r5
   13842:	0264      	lsls	r4, r4, #9
   13844:	0a64      	lsrs	r4, r4, #9
   13846:	9b00      	ldr	r3, [sp, #0]
   13848:	21ff      	movs	r1, #255	; 0xff
   1384a:	e781      	b.n	13750 <__aeabi_fdiv+0x138>
   1384c:	9501      	str	r5, [sp, #4]
   1384e:	e7c1      	b.n	137d4 <__aeabi_fdiv+0x1bc>
   13850:	0023      	movs	r3, r4
   13852:	2020      	movs	r0, #32
   13854:	40cb      	lsrs	r3, r1
   13856:	1a41      	subs	r1, r0, r1
   13858:	408c      	lsls	r4, r1
   1385a:	1e61      	subs	r1, r4, #1
   1385c:	418c      	sbcs	r4, r1
   1385e:	431c      	orrs	r4, r3
   13860:	0763      	lsls	r3, r4, #29
   13862:	d004      	beq.n	1386e <__aeabi_fdiv+0x256>
   13864:	230f      	movs	r3, #15
   13866:	4023      	ands	r3, r4
   13868:	2b04      	cmp	r3, #4
   1386a:	d000      	beq.n	1386e <__aeabi_fdiv+0x256>
   1386c:	3404      	adds	r4, #4
   1386e:	0163      	lsls	r3, r4, #5
   13870:	d505      	bpl.n	1387e <__aeabi_fdiv+0x266>
   13872:	2301      	movs	r3, #1
   13874:	9a01      	ldr	r2, [sp, #4]
   13876:	2101      	movs	r1, #1
   13878:	4013      	ands	r3, r2
   1387a:	2400      	movs	r4, #0
   1387c:	e768      	b.n	13750 <__aeabi_fdiv+0x138>
   1387e:	2301      	movs	r3, #1
   13880:	9a01      	ldr	r2, [sp, #4]
   13882:	01a4      	lsls	r4, r4, #6
   13884:	0a64      	lsrs	r4, r4, #9
   13886:	4013      	ands	r3, r2
   13888:	2100      	movs	r1, #0
   1388a:	e761      	b.n	13750 <__aeabi_fdiv+0x138>
   1388c:	2380      	movs	r3, #128	; 0x80
   1388e:	03db      	lsls	r3, r3, #15
   13890:	431c      	orrs	r4, r3
   13892:	0264      	lsls	r4, r4, #9
   13894:	0a64      	lsrs	r4, r4, #9
   13896:	4653      	mov	r3, sl
   13898:	21ff      	movs	r1, #255	; 0xff
   1389a:	e759      	b.n	13750 <__aeabi_fdiv+0x138>
   1389c:	0001dd9c 	.word	0x0001dd9c
   138a0:	0001dddc 	.word	0x0001dddc
   138a4:	f7ffffff 	.word	0xf7ffffff

000138a8 <__eqsf2>:
   138a8:	b570      	push	{r4, r5, r6, lr}
   138aa:	0042      	lsls	r2, r0, #1
   138ac:	0245      	lsls	r5, r0, #9
   138ae:	024e      	lsls	r6, r1, #9
   138b0:	004c      	lsls	r4, r1, #1
   138b2:	0fc3      	lsrs	r3, r0, #31
   138b4:	0a6d      	lsrs	r5, r5, #9
   138b6:	0e12      	lsrs	r2, r2, #24
   138b8:	0a76      	lsrs	r6, r6, #9
   138ba:	0e24      	lsrs	r4, r4, #24
   138bc:	0fc9      	lsrs	r1, r1, #31
   138be:	2001      	movs	r0, #1
   138c0:	2aff      	cmp	r2, #255	; 0xff
   138c2:	d006      	beq.n	138d2 <__eqsf2+0x2a>
   138c4:	2cff      	cmp	r4, #255	; 0xff
   138c6:	d003      	beq.n	138d0 <__eqsf2+0x28>
   138c8:	42a2      	cmp	r2, r4
   138ca:	d101      	bne.n	138d0 <__eqsf2+0x28>
   138cc:	42b5      	cmp	r5, r6
   138ce:	d006      	beq.n	138de <__eqsf2+0x36>
   138d0:	bd70      	pop	{r4, r5, r6, pc}
   138d2:	2d00      	cmp	r5, #0
   138d4:	d1fc      	bne.n	138d0 <__eqsf2+0x28>
   138d6:	2cff      	cmp	r4, #255	; 0xff
   138d8:	d1fa      	bne.n	138d0 <__eqsf2+0x28>
   138da:	2e00      	cmp	r6, #0
   138dc:	d1f8      	bne.n	138d0 <__eqsf2+0x28>
   138de:	428b      	cmp	r3, r1
   138e0:	d006      	beq.n	138f0 <__eqsf2+0x48>
   138e2:	2001      	movs	r0, #1
   138e4:	2a00      	cmp	r2, #0
   138e6:	d1f3      	bne.n	138d0 <__eqsf2+0x28>
   138e8:	0028      	movs	r0, r5
   138ea:	1e45      	subs	r5, r0, #1
   138ec:	41a8      	sbcs	r0, r5
   138ee:	e7ef      	b.n	138d0 <__eqsf2+0x28>
   138f0:	2000      	movs	r0, #0
   138f2:	e7ed      	b.n	138d0 <__eqsf2+0x28>

000138f4 <__gesf2>:
   138f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   138f6:	0042      	lsls	r2, r0, #1
   138f8:	0245      	lsls	r5, r0, #9
   138fa:	024c      	lsls	r4, r1, #9
   138fc:	0fc3      	lsrs	r3, r0, #31
   138fe:	0048      	lsls	r0, r1, #1
   13900:	0a6d      	lsrs	r5, r5, #9
   13902:	0e12      	lsrs	r2, r2, #24
   13904:	0a64      	lsrs	r4, r4, #9
   13906:	0e00      	lsrs	r0, r0, #24
   13908:	0fc9      	lsrs	r1, r1, #31
   1390a:	2aff      	cmp	r2, #255	; 0xff
   1390c:	d01e      	beq.n	1394c <__gesf2+0x58>
   1390e:	28ff      	cmp	r0, #255	; 0xff
   13910:	d021      	beq.n	13956 <__gesf2+0x62>
   13912:	2a00      	cmp	r2, #0
   13914:	d10a      	bne.n	1392c <__gesf2+0x38>
   13916:	426e      	negs	r6, r5
   13918:	416e      	adcs	r6, r5
   1391a:	b2f6      	uxtb	r6, r6
   1391c:	2800      	cmp	r0, #0
   1391e:	d10f      	bne.n	13940 <__gesf2+0x4c>
   13920:	2c00      	cmp	r4, #0
   13922:	d10d      	bne.n	13940 <__gesf2+0x4c>
   13924:	2000      	movs	r0, #0
   13926:	2d00      	cmp	r5, #0
   13928:	d009      	beq.n	1393e <__gesf2+0x4a>
   1392a:	e005      	b.n	13938 <__gesf2+0x44>
   1392c:	2800      	cmp	r0, #0
   1392e:	d101      	bne.n	13934 <__gesf2+0x40>
   13930:	2c00      	cmp	r4, #0
   13932:	d001      	beq.n	13938 <__gesf2+0x44>
   13934:	428b      	cmp	r3, r1
   13936:	d011      	beq.n	1395c <__gesf2+0x68>
   13938:	2101      	movs	r1, #1
   1393a:	4258      	negs	r0, r3
   1393c:	4308      	orrs	r0, r1
   1393e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13940:	2e00      	cmp	r6, #0
   13942:	d0f7      	beq.n	13934 <__gesf2+0x40>
   13944:	2001      	movs	r0, #1
   13946:	3901      	subs	r1, #1
   13948:	4308      	orrs	r0, r1
   1394a:	e7f8      	b.n	1393e <__gesf2+0x4a>
   1394c:	2d00      	cmp	r5, #0
   1394e:	d0de      	beq.n	1390e <__gesf2+0x1a>
   13950:	2002      	movs	r0, #2
   13952:	4240      	negs	r0, r0
   13954:	e7f3      	b.n	1393e <__gesf2+0x4a>
   13956:	2c00      	cmp	r4, #0
   13958:	d0db      	beq.n	13912 <__gesf2+0x1e>
   1395a:	e7f9      	b.n	13950 <__gesf2+0x5c>
   1395c:	4282      	cmp	r2, r0
   1395e:	dceb      	bgt.n	13938 <__gesf2+0x44>
   13960:	db04      	blt.n	1396c <__gesf2+0x78>
   13962:	42a5      	cmp	r5, r4
   13964:	d8e8      	bhi.n	13938 <__gesf2+0x44>
   13966:	2000      	movs	r0, #0
   13968:	42a5      	cmp	r5, r4
   1396a:	d2e8      	bcs.n	1393e <__gesf2+0x4a>
   1396c:	2101      	movs	r1, #1
   1396e:	1e58      	subs	r0, r3, #1
   13970:	4308      	orrs	r0, r1
   13972:	e7e4      	b.n	1393e <__gesf2+0x4a>

00013974 <__lesf2>:
   13974:	b5f0      	push	{r4, r5, r6, r7, lr}
   13976:	0042      	lsls	r2, r0, #1
   13978:	024d      	lsls	r5, r1, #9
   1397a:	004c      	lsls	r4, r1, #1
   1397c:	0246      	lsls	r6, r0, #9
   1397e:	0a76      	lsrs	r6, r6, #9
   13980:	0e12      	lsrs	r2, r2, #24
   13982:	0fc3      	lsrs	r3, r0, #31
   13984:	0a6d      	lsrs	r5, r5, #9
   13986:	0e24      	lsrs	r4, r4, #24
   13988:	0fc9      	lsrs	r1, r1, #31
   1398a:	2aff      	cmp	r2, #255	; 0xff
   1398c:	d016      	beq.n	139bc <__lesf2+0x48>
   1398e:	2cff      	cmp	r4, #255	; 0xff
   13990:	d018      	beq.n	139c4 <__lesf2+0x50>
   13992:	2a00      	cmp	r2, #0
   13994:	d10a      	bne.n	139ac <__lesf2+0x38>
   13996:	4270      	negs	r0, r6
   13998:	4170      	adcs	r0, r6
   1399a:	b2c0      	uxtb	r0, r0
   1399c:	2c00      	cmp	r4, #0
   1399e:	d015      	beq.n	139cc <__lesf2+0x58>
   139a0:	2800      	cmp	r0, #0
   139a2:	d005      	beq.n	139b0 <__lesf2+0x3c>
   139a4:	2001      	movs	r0, #1
   139a6:	3901      	subs	r1, #1
   139a8:	4308      	orrs	r0, r1
   139aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   139ac:	2c00      	cmp	r4, #0
   139ae:	d013      	beq.n	139d8 <__lesf2+0x64>
   139b0:	4299      	cmp	r1, r3
   139b2:	d014      	beq.n	139de <__lesf2+0x6a>
   139b4:	2001      	movs	r0, #1
   139b6:	425b      	negs	r3, r3
   139b8:	4318      	orrs	r0, r3
   139ba:	e7f6      	b.n	139aa <__lesf2+0x36>
   139bc:	2002      	movs	r0, #2
   139be:	2e00      	cmp	r6, #0
   139c0:	d1f3      	bne.n	139aa <__lesf2+0x36>
   139c2:	e7e4      	b.n	1398e <__lesf2+0x1a>
   139c4:	2002      	movs	r0, #2
   139c6:	2d00      	cmp	r5, #0
   139c8:	d1ef      	bne.n	139aa <__lesf2+0x36>
   139ca:	e7e2      	b.n	13992 <__lesf2+0x1e>
   139cc:	2d00      	cmp	r5, #0
   139ce:	d1e7      	bne.n	139a0 <__lesf2+0x2c>
   139d0:	2000      	movs	r0, #0
   139d2:	2e00      	cmp	r6, #0
   139d4:	d0e9      	beq.n	139aa <__lesf2+0x36>
   139d6:	e7ed      	b.n	139b4 <__lesf2+0x40>
   139d8:	2d00      	cmp	r5, #0
   139da:	d1e9      	bne.n	139b0 <__lesf2+0x3c>
   139dc:	e7ea      	b.n	139b4 <__lesf2+0x40>
   139de:	42a2      	cmp	r2, r4
   139e0:	dc06      	bgt.n	139f0 <__lesf2+0x7c>
   139e2:	dbdf      	blt.n	139a4 <__lesf2+0x30>
   139e4:	42ae      	cmp	r6, r5
   139e6:	d803      	bhi.n	139f0 <__lesf2+0x7c>
   139e8:	2000      	movs	r0, #0
   139ea:	42ae      	cmp	r6, r5
   139ec:	d3da      	bcc.n	139a4 <__lesf2+0x30>
   139ee:	e7dc      	b.n	139aa <__lesf2+0x36>
   139f0:	2001      	movs	r0, #1
   139f2:	4249      	negs	r1, r1
   139f4:	4308      	orrs	r0, r1
   139f6:	e7d8      	b.n	139aa <__lesf2+0x36>

000139f8 <__aeabi_fmul>:
   139f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   139fa:	4657      	mov	r7, sl
   139fc:	464e      	mov	r6, r9
   139fe:	4645      	mov	r5, r8
   13a00:	46de      	mov	lr, fp
   13a02:	b5e0      	push	{r5, r6, r7, lr}
   13a04:	0247      	lsls	r7, r0, #9
   13a06:	0046      	lsls	r6, r0, #1
   13a08:	4688      	mov	r8, r1
   13a0a:	0a7f      	lsrs	r7, r7, #9
   13a0c:	0e36      	lsrs	r6, r6, #24
   13a0e:	0fc4      	lsrs	r4, r0, #31
   13a10:	2e00      	cmp	r6, #0
   13a12:	d047      	beq.n	13aa4 <__aeabi_fmul+0xac>
   13a14:	2eff      	cmp	r6, #255	; 0xff
   13a16:	d024      	beq.n	13a62 <__aeabi_fmul+0x6a>
   13a18:	00fb      	lsls	r3, r7, #3
   13a1a:	2780      	movs	r7, #128	; 0x80
   13a1c:	04ff      	lsls	r7, r7, #19
   13a1e:	431f      	orrs	r7, r3
   13a20:	2300      	movs	r3, #0
   13a22:	4699      	mov	r9, r3
   13a24:	469a      	mov	sl, r3
   13a26:	3e7f      	subs	r6, #127	; 0x7f
   13a28:	4643      	mov	r3, r8
   13a2a:	025d      	lsls	r5, r3, #9
   13a2c:	0058      	lsls	r0, r3, #1
   13a2e:	0fdb      	lsrs	r3, r3, #31
   13a30:	0a6d      	lsrs	r5, r5, #9
   13a32:	0e00      	lsrs	r0, r0, #24
   13a34:	4698      	mov	r8, r3
   13a36:	d043      	beq.n	13ac0 <__aeabi_fmul+0xc8>
   13a38:	28ff      	cmp	r0, #255	; 0xff
   13a3a:	d03b      	beq.n	13ab4 <__aeabi_fmul+0xbc>
   13a3c:	00eb      	lsls	r3, r5, #3
   13a3e:	2580      	movs	r5, #128	; 0x80
   13a40:	2200      	movs	r2, #0
   13a42:	04ed      	lsls	r5, r5, #19
   13a44:	431d      	orrs	r5, r3
   13a46:	387f      	subs	r0, #127	; 0x7f
   13a48:	1836      	adds	r6, r6, r0
   13a4a:	1c73      	adds	r3, r6, #1
   13a4c:	4641      	mov	r1, r8
   13a4e:	469b      	mov	fp, r3
   13a50:	464b      	mov	r3, r9
   13a52:	4061      	eors	r1, r4
   13a54:	4313      	orrs	r3, r2
   13a56:	2b0f      	cmp	r3, #15
   13a58:	d864      	bhi.n	13b24 <__aeabi_fmul+0x12c>
   13a5a:	4875      	ldr	r0, [pc, #468]	; (13c30 <__aeabi_fmul+0x238>)
   13a5c:	009b      	lsls	r3, r3, #2
   13a5e:	58c3      	ldr	r3, [r0, r3]
   13a60:	469f      	mov	pc, r3
   13a62:	2f00      	cmp	r7, #0
   13a64:	d142      	bne.n	13aec <__aeabi_fmul+0xf4>
   13a66:	2308      	movs	r3, #8
   13a68:	4699      	mov	r9, r3
   13a6a:	3b06      	subs	r3, #6
   13a6c:	26ff      	movs	r6, #255	; 0xff
   13a6e:	469a      	mov	sl, r3
   13a70:	e7da      	b.n	13a28 <__aeabi_fmul+0x30>
   13a72:	4641      	mov	r1, r8
   13a74:	2a02      	cmp	r2, #2
   13a76:	d028      	beq.n	13aca <__aeabi_fmul+0xd2>
   13a78:	2a03      	cmp	r2, #3
   13a7a:	d100      	bne.n	13a7e <__aeabi_fmul+0x86>
   13a7c:	e0ce      	b.n	13c1c <__aeabi_fmul+0x224>
   13a7e:	2a01      	cmp	r2, #1
   13a80:	d000      	beq.n	13a84 <__aeabi_fmul+0x8c>
   13a82:	e0ac      	b.n	13bde <__aeabi_fmul+0x1e6>
   13a84:	4011      	ands	r1, r2
   13a86:	2000      	movs	r0, #0
   13a88:	2200      	movs	r2, #0
   13a8a:	b2cc      	uxtb	r4, r1
   13a8c:	0240      	lsls	r0, r0, #9
   13a8e:	05d2      	lsls	r2, r2, #23
   13a90:	0a40      	lsrs	r0, r0, #9
   13a92:	07e4      	lsls	r4, r4, #31
   13a94:	4310      	orrs	r0, r2
   13a96:	4320      	orrs	r0, r4
   13a98:	bc3c      	pop	{r2, r3, r4, r5}
   13a9a:	4690      	mov	r8, r2
   13a9c:	4699      	mov	r9, r3
   13a9e:	46a2      	mov	sl, r4
   13aa0:	46ab      	mov	fp, r5
   13aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13aa4:	2f00      	cmp	r7, #0
   13aa6:	d115      	bne.n	13ad4 <__aeabi_fmul+0xdc>
   13aa8:	2304      	movs	r3, #4
   13aaa:	4699      	mov	r9, r3
   13aac:	3b03      	subs	r3, #3
   13aae:	2600      	movs	r6, #0
   13ab0:	469a      	mov	sl, r3
   13ab2:	e7b9      	b.n	13a28 <__aeabi_fmul+0x30>
   13ab4:	20ff      	movs	r0, #255	; 0xff
   13ab6:	2202      	movs	r2, #2
   13ab8:	2d00      	cmp	r5, #0
   13aba:	d0c5      	beq.n	13a48 <__aeabi_fmul+0x50>
   13abc:	2203      	movs	r2, #3
   13abe:	e7c3      	b.n	13a48 <__aeabi_fmul+0x50>
   13ac0:	2d00      	cmp	r5, #0
   13ac2:	d119      	bne.n	13af8 <__aeabi_fmul+0x100>
   13ac4:	2000      	movs	r0, #0
   13ac6:	2201      	movs	r2, #1
   13ac8:	e7be      	b.n	13a48 <__aeabi_fmul+0x50>
   13aca:	2401      	movs	r4, #1
   13acc:	22ff      	movs	r2, #255	; 0xff
   13ace:	400c      	ands	r4, r1
   13ad0:	2000      	movs	r0, #0
   13ad2:	e7db      	b.n	13a8c <__aeabi_fmul+0x94>
   13ad4:	0038      	movs	r0, r7
   13ad6:	f002 f865 	bl	15ba4 <__clzsi2>
   13ada:	2676      	movs	r6, #118	; 0x76
   13adc:	1f43      	subs	r3, r0, #5
   13ade:	409f      	lsls	r7, r3
   13ae0:	2300      	movs	r3, #0
   13ae2:	4276      	negs	r6, r6
   13ae4:	1a36      	subs	r6, r6, r0
   13ae6:	4699      	mov	r9, r3
   13ae8:	469a      	mov	sl, r3
   13aea:	e79d      	b.n	13a28 <__aeabi_fmul+0x30>
   13aec:	230c      	movs	r3, #12
   13aee:	4699      	mov	r9, r3
   13af0:	3b09      	subs	r3, #9
   13af2:	26ff      	movs	r6, #255	; 0xff
   13af4:	469a      	mov	sl, r3
   13af6:	e797      	b.n	13a28 <__aeabi_fmul+0x30>
   13af8:	0028      	movs	r0, r5
   13afa:	f002 f853 	bl	15ba4 <__clzsi2>
   13afe:	1f43      	subs	r3, r0, #5
   13b00:	409d      	lsls	r5, r3
   13b02:	2376      	movs	r3, #118	; 0x76
   13b04:	425b      	negs	r3, r3
   13b06:	1a18      	subs	r0, r3, r0
   13b08:	2200      	movs	r2, #0
   13b0a:	e79d      	b.n	13a48 <__aeabi_fmul+0x50>
   13b0c:	2080      	movs	r0, #128	; 0x80
   13b0e:	2400      	movs	r4, #0
   13b10:	03c0      	lsls	r0, r0, #15
   13b12:	22ff      	movs	r2, #255	; 0xff
   13b14:	e7ba      	b.n	13a8c <__aeabi_fmul+0x94>
   13b16:	003d      	movs	r5, r7
   13b18:	4652      	mov	r2, sl
   13b1a:	e7ab      	b.n	13a74 <__aeabi_fmul+0x7c>
   13b1c:	003d      	movs	r5, r7
   13b1e:	0021      	movs	r1, r4
   13b20:	4652      	mov	r2, sl
   13b22:	e7a7      	b.n	13a74 <__aeabi_fmul+0x7c>
   13b24:	0c3b      	lsrs	r3, r7, #16
   13b26:	469c      	mov	ip, r3
   13b28:	042a      	lsls	r2, r5, #16
   13b2a:	0c12      	lsrs	r2, r2, #16
   13b2c:	0c2b      	lsrs	r3, r5, #16
   13b2e:	0014      	movs	r4, r2
   13b30:	4660      	mov	r0, ip
   13b32:	4665      	mov	r5, ip
   13b34:	043f      	lsls	r7, r7, #16
   13b36:	0c3f      	lsrs	r7, r7, #16
   13b38:	437c      	muls	r4, r7
   13b3a:	4342      	muls	r2, r0
   13b3c:	435d      	muls	r5, r3
   13b3e:	437b      	muls	r3, r7
   13b40:	0c27      	lsrs	r7, r4, #16
   13b42:	189b      	adds	r3, r3, r2
   13b44:	18ff      	adds	r7, r7, r3
   13b46:	42ba      	cmp	r2, r7
   13b48:	d903      	bls.n	13b52 <__aeabi_fmul+0x15a>
   13b4a:	2380      	movs	r3, #128	; 0x80
   13b4c:	025b      	lsls	r3, r3, #9
   13b4e:	469c      	mov	ip, r3
   13b50:	4465      	add	r5, ip
   13b52:	0424      	lsls	r4, r4, #16
   13b54:	043a      	lsls	r2, r7, #16
   13b56:	0c24      	lsrs	r4, r4, #16
   13b58:	1912      	adds	r2, r2, r4
   13b5a:	0193      	lsls	r3, r2, #6
   13b5c:	1e5c      	subs	r4, r3, #1
   13b5e:	41a3      	sbcs	r3, r4
   13b60:	0c3f      	lsrs	r7, r7, #16
   13b62:	0e92      	lsrs	r2, r2, #26
   13b64:	197d      	adds	r5, r7, r5
   13b66:	431a      	orrs	r2, r3
   13b68:	01ad      	lsls	r5, r5, #6
   13b6a:	4315      	orrs	r5, r2
   13b6c:	012b      	lsls	r3, r5, #4
   13b6e:	d504      	bpl.n	13b7a <__aeabi_fmul+0x182>
   13b70:	2301      	movs	r3, #1
   13b72:	465e      	mov	r6, fp
   13b74:	086a      	lsrs	r2, r5, #1
   13b76:	401d      	ands	r5, r3
   13b78:	4315      	orrs	r5, r2
   13b7a:	0032      	movs	r2, r6
   13b7c:	327f      	adds	r2, #127	; 0x7f
   13b7e:	2a00      	cmp	r2, #0
   13b80:	dd25      	ble.n	13bce <__aeabi_fmul+0x1d6>
   13b82:	076b      	lsls	r3, r5, #29
   13b84:	d004      	beq.n	13b90 <__aeabi_fmul+0x198>
   13b86:	230f      	movs	r3, #15
   13b88:	402b      	ands	r3, r5
   13b8a:	2b04      	cmp	r3, #4
   13b8c:	d000      	beq.n	13b90 <__aeabi_fmul+0x198>
   13b8e:	3504      	adds	r5, #4
   13b90:	012b      	lsls	r3, r5, #4
   13b92:	d503      	bpl.n	13b9c <__aeabi_fmul+0x1a4>
   13b94:	0032      	movs	r2, r6
   13b96:	4b27      	ldr	r3, [pc, #156]	; (13c34 <__aeabi_fmul+0x23c>)
   13b98:	3280      	adds	r2, #128	; 0x80
   13b9a:	401d      	ands	r5, r3
   13b9c:	2afe      	cmp	r2, #254	; 0xfe
   13b9e:	dc94      	bgt.n	13aca <__aeabi_fmul+0xd2>
   13ba0:	2401      	movs	r4, #1
   13ba2:	01a8      	lsls	r0, r5, #6
   13ba4:	0a40      	lsrs	r0, r0, #9
   13ba6:	b2d2      	uxtb	r2, r2
   13ba8:	400c      	ands	r4, r1
   13baa:	e76f      	b.n	13a8c <__aeabi_fmul+0x94>
   13bac:	2080      	movs	r0, #128	; 0x80
   13bae:	03c0      	lsls	r0, r0, #15
   13bb0:	4207      	tst	r7, r0
   13bb2:	d007      	beq.n	13bc4 <__aeabi_fmul+0x1cc>
   13bb4:	4205      	tst	r5, r0
   13bb6:	d105      	bne.n	13bc4 <__aeabi_fmul+0x1cc>
   13bb8:	4328      	orrs	r0, r5
   13bba:	0240      	lsls	r0, r0, #9
   13bbc:	0a40      	lsrs	r0, r0, #9
   13bbe:	4644      	mov	r4, r8
   13bc0:	22ff      	movs	r2, #255	; 0xff
   13bc2:	e763      	b.n	13a8c <__aeabi_fmul+0x94>
   13bc4:	4338      	orrs	r0, r7
   13bc6:	0240      	lsls	r0, r0, #9
   13bc8:	0a40      	lsrs	r0, r0, #9
   13bca:	22ff      	movs	r2, #255	; 0xff
   13bcc:	e75e      	b.n	13a8c <__aeabi_fmul+0x94>
   13bce:	2401      	movs	r4, #1
   13bd0:	1aa3      	subs	r3, r4, r2
   13bd2:	2b1b      	cmp	r3, #27
   13bd4:	dd05      	ble.n	13be2 <__aeabi_fmul+0x1ea>
   13bd6:	400c      	ands	r4, r1
   13bd8:	2200      	movs	r2, #0
   13bda:	2000      	movs	r0, #0
   13bdc:	e756      	b.n	13a8c <__aeabi_fmul+0x94>
   13bde:	465e      	mov	r6, fp
   13be0:	e7cb      	b.n	13b7a <__aeabi_fmul+0x182>
   13be2:	002a      	movs	r2, r5
   13be4:	2020      	movs	r0, #32
   13be6:	40da      	lsrs	r2, r3
   13be8:	1ac3      	subs	r3, r0, r3
   13bea:	409d      	lsls	r5, r3
   13bec:	002b      	movs	r3, r5
   13bee:	1e5d      	subs	r5, r3, #1
   13bf0:	41ab      	sbcs	r3, r5
   13bf2:	4313      	orrs	r3, r2
   13bf4:	075a      	lsls	r2, r3, #29
   13bf6:	d004      	beq.n	13c02 <__aeabi_fmul+0x20a>
   13bf8:	220f      	movs	r2, #15
   13bfa:	401a      	ands	r2, r3
   13bfc:	2a04      	cmp	r2, #4
   13bfe:	d000      	beq.n	13c02 <__aeabi_fmul+0x20a>
   13c00:	3304      	adds	r3, #4
   13c02:	015a      	lsls	r2, r3, #5
   13c04:	d504      	bpl.n	13c10 <__aeabi_fmul+0x218>
   13c06:	2401      	movs	r4, #1
   13c08:	2201      	movs	r2, #1
   13c0a:	400c      	ands	r4, r1
   13c0c:	2000      	movs	r0, #0
   13c0e:	e73d      	b.n	13a8c <__aeabi_fmul+0x94>
   13c10:	2401      	movs	r4, #1
   13c12:	019b      	lsls	r3, r3, #6
   13c14:	0a58      	lsrs	r0, r3, #9
   13c16:	400c      	ands	r4, r1
   13c18:	2200      	movs	r2, #0
   13c1a:	e737      	b.n	13a8c <__aeabi_fmul+0x94>
   13c1c:	2080      	movs	r0, #128	; 0x80
   13c1e:	2401      	movs	r4, #1
   13c20:	03c0      	lsls	r0, r0, #15
   13c22:	4328      	orrs	r0, r5
   13c24:	0240      	lsls	r0, r0, #9
   13c26:	0a40      	lsrs	r0, r0, #9
   13c28:	400c      	ands	r4, r1
   13c2a:	22ff      	movs	r2, #255	; 0xff
   13c2c:	e72e      	b.n	13a8c <__aeabi_fmul+0x94>
   13c2e:	46c0      	nop			; (mov r8, r8)
   13c30:	0001de1c 	.word	0x0001de1c
   13c34:	f7ffffff 	.word	0xf7ffffff

00013c38 <__aeabi_fsub>:
   13c38:	b5f0      	push	{r4, r5, r6, r7, lr}
   13c3a:	464f      	mov	r7, r9
   13c3c:	46d6      	mov	lr, sl
   13c3e:	4646      	mov	r6, r8
   13c40:	0044      	lsls	r4, r0, #1
   13c42:	b5c0      	push	{r6, r7, lr}
   13c44:	0fc2      	lsrs	r2, r0, #31
   13c46:	0247      	lsls	r7, r0, #9
   13c48:	0248      	lsls	r0, r1, #9
   13c4a:	0a40      	lsrs	r0, r0, #9
   13c4c:	4684      	mov	ip, r0
   13c4e:	4666      	mov	r6, ip
   13c50:	0a7b      	lsrs	r3, r7, #9
   13c52:	0048      	lsls	r0, r1, #1
   13c54:	0fc9      	lsrs	r1, r1, #31
   13c56:	469a      	mov	sl, r3
   13c58:	0e24      	lsrs	r4, r4, #24
   13c5a:	0015      	movs	r5, r2
   13c5c:	00db      	lsls	r3, r3, #3
   13c5e:	0e00      	lsrs	r0, r0, #24
   13c60:	4689      	mov	r9, r1
   13c62:	00f6      	lsls	r6, r6, #3
   13c64:	28ff      	cmp	r0, #255	; 0xff
   13c66:	d100      	bne.n	13c6a <__aeabi_fsub+0x32>
   13c68:	e08f      	b.n	13d8a <__aeabi_fsub+0x152>
   13c6a:	2101      	movs	r1, #1
   13c6c:	464f      	mov	r7, r9
   13c6e:	404f      	eors	r7, r1
   13c70:	0039      	movs	r1, r7
   13c72:	4291      	cmp	r1, r2
   13c74:	d066      	beq.n	13d44 <__aeabi_fsub+0x10c>
   13c76:	1a22      	subs	r2, r4, r0
   13c78:	2a00      	cmp	r2, #0
   13c7a:	dc00      	bgt.n	13c7e <__aeabi_fsub+0x46>
   13c7c:	e09d      	b.n	13dba <__aeabi_fsub+0x182>
   13c7e:	2800      	cmp	r0, #0
   13c80:	d13d      	bne.n	13cfe <__aeabi_fsub+0xc6>
   13c82:	2e00      	cmp	r6, #0
   13c84:	d100      	bne.n	13c88 <__aeabi_fsub+0x50>
   13c86:	e08b      	b.n	13da0 <__aeabi_fsub+0x168>
   13c88:	1e51      	subs	r1, r2, #1
   13c8a:	2900      	cmp	r1, #0
   13c8c:	d000      	beq.n	13c90 <__aeabi_fsub+0x58>
   13c8e:	e0b5      	b.n	13dfc <__aeabi_fsub+0x1c4>
   13c90:	2401      	movs	r4, #1
   13c92:	1b9b      	subs	r3, r3, r6
   13c94:	015a      	lsls	r2, r3, #5
   13c96:	d544      	bpl.n	13d22 <__aeabi_fsub+0xea>
   13c98:	019b      	lsls	r3, r3, #6
   13c9a:	099f      	lsrs	r7, r3, #6
   13c9c:	0038      	movs	r0, r7
   13c9e:	f001 ff81 	bl	15ba4 <__clzsi2>
   13ca2:	3805      	subs	r0, #5
   13ca4:	4087      	lsls	r7, r0
   13ca6:	4284      	cmp	r4, r0
   13ca8:	dd00      	ble.n	13cac <__aeabi_fsub+0x74>
   13caa:	e096      	b.n	13dda <__aeabi_fsub+0x1a2>
   13cac:	1b04      	subs	r4, r0, r4
   13cae:	003a      	movs	r2, r7
   13cb0:	2020      	movs	r0, #32
   13cb2:	3401      	adds	r4, #1
   13cb4:	40e2      	lsrs	r2, r4
   13cb6:	1b04      	subs	r4, r0, r4
   13cb8:	40a7      	lsls	r7, r4
   13cba:	003b      	movs	r3, r7
   13cbc:	1e5f      	subs	r7, r3, #1
   13cbe:	41bb      	sbcs	r3, r7
   13cc0:	2400      	movs	r4, #0
   13cc2:	4313      	orrs	r3, r2
   13cc4:	075a      	lsls	r2, r3, #29
   13cc6:	d004      	beq.n	13cd2 <__aeabi_fsub+0x9a>
   13cc8:	220f      	movs	r2, #15
   13cca:	401a      	ands	r2, r3
   13ccc:	2a04      	cmp	r2, #4
   13cce:	d000      	beq.n	13cd2 <__aeabi_fsub+0x9a>
   13cd0:	3304      	adds	r3, #4
   13cd2:	015a      	lsls	r2, r3, #5
   13cd4:	d527      	bpl.n	13d26 <__aeabi_fsub+0xee>
   13cd6:	3401      	adds	r4, #1
   13cd8:	2cff      	cmp	r4, #255	; 0xff
   13cda:	d100      	bne.n	13cde <__aeabi_fsub+0xa6>
   13cdc:	e079      	b.n	13dd2 <__aeabi_fsub+0x19a>
   13cde:	2201      	movs	r2, #1
   13ce0:	019b      	lsls	r3, r3, #6
   13ce2:	0a5b      	lsrs	r3, r3, #9
   13ce4:	b2e4      	uxtb	r4, r4
   13ce6:	402a      	ands	r2, r5
   13ce8:	025b      	lsls	r3, r3, #9
   13cea:	05e4      	lsls	r4, r4, #23
   13cec:	0a58      	lsrs	r0, r3, #9
   13cee:	07d2      	lsls	r2, r2, #31
   13cf0:	4320      	orrs	r0, r4
   13cf2:	4310      	orrs	r0, r2
   13cf4:	bc1c      	pop	{r2, r3, r4}
   13cf6:	4690      	mov	r8, r2
   13cf8:	4699      	mov	r9, r3
   13cfa:	46a2      	mov	sl, r4
   13cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   13cfe:	2cff      	cmp	r4, #255	; 0xff
   13d00:	d0e0      	beq.n	13cc4 <__aeabi_fsub+0x8c>
   13d02:	2180      	movs	r1, #128	; 0x80
   13d04:	04c9      	lsls	r1, r1, #19
   13d06:	430e      	orrs	r6, r1
   13d08:	2a1b      	cmp	r2, #27
   13d0a:	dc7b      	bgt.n	13e04 <__aeabi_fsub+0x1cc>
   13d0c:	0031      	movs	r1, r6
   13d0e:	2020      	movs	r0, #32
   13d10:	40d1      	lsrs	r1, r2
   13d12:	1a82      	subs	r2, r0, r2
   13d14:	4096      	lsls	r6, r2
   13d16:	1e72      	subs	r2, r6, #1
   13d18:	4196      	sbcs	r6, r2
   13d1a:	430e      	orrs	r6, r1
   13d1c:	1b9b      	subs	r3, r3, r6
   13d1e:	015a      	lsls	r2, r3, #5
   13d20:	d4ba      	bmi.n	13c98 <__aeabi_fsub+0x60>
   13d22:	075a      	lsls	r2, r3, #29
   13d24:	d1d0      	bne.n	13cc8 <__aeabi_fsub+0x90>
   13d26:	2201      	movs	r2, #1
   13d28:	08df      	lsrs	r7, r3, #3
   13d2a:	402a      	ands	r2, r5
   13d2c:	2cff      	cmp	r4, #255	; 0xff
   13d2e:	d133      	bne.n	13d98 <__aeabi_fsub+0x160>
   13d30:	2f00      	cmp	r7, #0
   13d32:	d100      	bne.n	13d36 <__aeabi_fsub+0xfe>
   13d34:	e0a8      	b.n	13e88 <__aeabi_fsub+0x250>
   13d36:	2380      	movs	r3, #128	; 0x80
   13d38:	03db      	lsls	r3, r3, #15
   13d3a:	433b      	orrs	r3, r7
   13d3c:	025b      	lsls	r3, r3, #9
   13d3e:	0a5b      	lsrs	r3, r3, #9
   13d40:	24ff      	movs	r4, #255	; 0xff
   13d42:	e7d1      	b.n	13ce8 <__aeabi_fsub+0xb0>
   13d44:	1a21      	subs	r1, r4, r0
   13d46:	2900      	cmp	r1, #0
   13d48:	dd4c      	ble.n	13de4 <__aeabi_fsub+0x1ac>
   13d4a:	2800      	cmp	r0, #0
   13d4c:	d02a      	beq.n	13da4 <__aeabi_fsub+0x16c>
   13d4e:	2cff      	cmp	r4, #255	; 0xff
   13d50:	d0b8      	beq.n	13cc4 <__aeabi_fsub+0x8c>
   13d52:	2080      	movs	r0, #128	; 0x80
   13d54:	04c0      	lsls	r0, r0, #19
   13d56:	4306      	orrs	r6, r0
   13d58:	291b      	cmp	r1, #27
   13d5a:	dd00      	ble.n	13d5e <__aeabi_fsub+0x126>
   13d5c:	e0af      	b.n	13ebe <__aeabi_fsub+0x286>
   13d5e:	0030      	movs	r0, r6
   13d60:	2720      	movs	r7, #32
   13d62:	40c8      	lsrs	r0, r1
   13d64:	1a79      	subs	r1, r7, r1
   13d66:	408e      	lsls	r6, r1
   13d68:	1e71      	subs	r1, r6, #1
   13d6a:	418e      	sbcs	r6, r1
   13d6c:	4306      	orrs	r6, r0
   13d6e:	199b      	adds	r3, r3, r6
   13d70:	0159      	lsls	r1, r3, #5
   13d72:	d5d6      	bpl.n	13d22 <__aeabi_fsub+0xea>
   13d74:	3401      	adds	r4, #1
   13d76:	2cff      	cmp	r4, #255	; 0xff
   13d78:	d100      	bne.n	13d7c <__aeabi_fsub+0x144>
   13d7a:	e085      	b.n	13e88 <__aeabi_fsub+0x250>
   13d7c:	2201      	movs	r2, #1
   13d7e:	497a      	ldr	r1, [pc, #488]	; (13f68 <__aeabi_fsub+0x330>)
   13d80:	401a      	ands	r2, r3
   13d82:	085b      	lsrs	r3, r3, #1
   13d84:	400b      	ands	r3, r1
   13d86:	4313      	orrs	r3, r2
   13d88:	e79c      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13d8a:	2e00      	cmp	r6, #0
   13d8c:	d000      	beq.n	13d90 <__aeabi_fsub+0x158>
   13d8e:	e770      	b.n	13c72 <__aeabi_fsub+0x3a>
   13d90:	e76b      	b.n	13c6a <__aeabi_fsub+0x32>
   13d92:	1e3b      	subs	r3, r7, #0
   13d94:	d1c5      	bne.n	13d22 <__aeabi_fsub+0xea>
   13d96:	2200      	movs	r2, #0
   13d98:	027b      	lsls	r3, r7, #9
   13d9a:	0a5b      	lsrs	r3, r3, #9
   13d9c:	b2e4      	uxtb	r4, r4
   13d9e:	e7a3      	b.n	13ce8 <__aeabi_fsub+0xb0>
   13da0:	0014      	movs	r4, r2
   13da2:	e78f      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13da4:	2e00      	cmp	r6, #0
   13da6:	d04d      	beq.n	13e44 <__aeabi_fsub+0x20c>
   13da8:	1e48      	subs	r0, r1, #1
   13daa:	2800      	cmp	r0, #0
   13dac:	d157      	bne.n	13e5e <__aeabi_fsub+0x226>
   13dae:	199b      	adds	r3, r3, r6
   13db0:	2401      	movs	r4, #1
   13db2:	015a      	lsls	r2, r3, #5
   13db4:	d5b5      	bpl.n	13d22 <__aeabi_fsub+0xea>
   13db6:	2402      	movs	r4, #2
   13db8:	e7e0      	b.n	13d7c <__aeabi_fsub+0x144>
   13dba:	2a00      	cmp	r2, #0
   13dbc:	d125      	bne.n	13e0a <__aeabi_fsub+0x1d2>
   13dbe:	1c62      	adds	r2, r4, #1
   13dc0:	b2d2      	uxtb	r2, r2
   13dc2:	2a01      	cmp	r2, #1
   13dc4:	dd72      	ble.n	13eac <__aeabi_fsub+0x274>
   13dc6:	1b9f      	subs	r7, r3, r6
   13dc8:	017a      	lsls	r2, r7, #5
   13dca:	d535      	bpl.n	13e38 <__aeabi_fsub+0x200>
   13dcc:	1af7      	subs	r7, r6, r3
   13dce:	000d      	movs	r5, r1
   13dd0:	e764      	b.n	13c9c <__aeabi_fsub+0x64>
   13dd2:	2201      	movs	r2, #1
   13dd4:	2300      	movs	r3, #0
   13dd6:	402a      	ands	r2, r5
   13dd8:	e786      	b.n	13ce8 <__aeabi_fsub+0xb0>
   13dda:	003b      	movs	r3, r7
   13ddc:	4a63      	ldr	r2, [pc, #396]	; (13f6c <__aeabi_fsub+0x334>)
   13dde:	1a24      	subs	r4, r4, r0
   13de0:	4013      	ands	r3, r2
   13de2:	e76f      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13de4:	2900      	cmp	r1, #0
   13de6:	d16c      	bne.n	13ec2 <__aeabi_fsub+0x28a>
   13de8:	1c61      	adds	r1, r4, #1
   13dea:	b2c8      	uxtb	r0, r1
   13dec:	2801      	cmp	r0, #1
   13dee:	dd4e      	ble.n	13e8e <__aeabi_fsub+0x256>
   13df0:	29ff      	cmp	r1, #255	; 0xff
   13df2:	d049      	beq.n	13e88 <__aeabi_fsub+0x250>
   13df4:	199b      	adds	r3, r3, r6
   13df6:	085b      	lsrs	r3, r3, #1
   13df8:	000c      	movs	r4, r1
   13dfa:	e763      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13dfc:	2aff      	cmp	r2, #255	; 0xff
   13dfe:	d041      	beq.n	13e84 <__aeabi_fsub+0x24c>
   13e00:	000a      	movs	r2, r1
   13e02:	e781      	b.n	13d08 <__aeabi_fsub+0xd0>
   13e04:	2601      	movs	r6, #1
   13e06:	1b9b      	subs	r3, r3, r6
   13e08:	e789      	b.n	13d1e <__aeabi_fsub+0xe6>
   13e0a:	2c00      	cmp	r4, #0
   13e0c:	d01c      	beq.n	13e48 <__aeabi_fsub+0x210>
   13e0e:	28ff      	cmp	r0, #255	; 0xff
   13e10:	d021      	beq.n	13e56 <__aeabi_fsub+0x21e>
   13e12:	2480      	movs	r4, #128	; 0x80
   13e14:	04e4      	lsls	r4, r4, #19
   13e16:	4252      	negs	r2, r2
   13e18:	4323      	orrs	r3, r4
   13e1a:	2a1b      	cmp	r2, #27
   13e1c:	dd00      	ble.n	13e20 <__aeabi_fsub+0x1e8>
   13e1e:	e096      	b.n	13f4e <__aeabi_fsub+0x316>
   13e20:	001c      	movs	r4, r3
   13e22:	2520      	movs	r5, #32
   13e24:	40d4      	lsrs	r4, r2
   13e26:	1aaa      	subs	r2, r5, r2
   13e28:	4093      	lsls	r3, r2
   13e2a:	1e5a      	subs	r2, r3, #1
   13e2c:	4193      	sbcs	r3, r2
   13e2e:	4323      	orrs	r3, r4
   13e30:	1af3      	subs	r3, r6, r3
   13e32:	0004      	movs	r4, r0
   13e34:	000d      	movs	r5, r1
   13e36:	e72d      	b.n	13c94 <__aeabi_fsub+0x5c>
   13e38:	2f00      	cmp	r7, #0
   13e3a:	d000      	beq.n	13e3e <__aeabi_fsub+0x206>
   13e3c:	e72e      	b.n	13c9c <__aeabi_fsub+0x64>
   13e3e:	2200      	movs	r2, #0
   13e40:	2400      	movs	r4, #0
   13e42:	e7a9      	b.n	13d98 <__aeabi_fsub+0x160>
   13e44:	000c      	movs	r4, r1
   13e46:	e73d      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13e48:	2b00      	cmp	r3, #0
   13e4a:	d058      	beq.n	13efe <__aeabi_fsub+0x2c6>
   13e4c:	43d2      	mvns	r2, r2
   13e4e:	2a00      	cmp	r2, #0
   13e50:	d0ee      	beq.n	13e30 <__aeabi_fsub+0x1f8>
   13e52:	28ff      	cmp	r0, #255	; 0xff
   13e54:	d1e1      	bne.n	13e1a <__aeabi_fsub+0x1e2>
   13e56:	0033      	movs	r3, r6
   13e58:	24ff      	movs	r4, #255	; 0xff
   13e5a:	000d      	movs	r5, r1
   13e5c:	e732      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13e5e:	29ff      	cmp	r1, #255	; 0xff
   13e60:	d010      	beq.n	13e84 <__aeabi_fsub+0x24c>
   13e62:	0001      	movs	r1, r0
   13e64:	e778      	b.n	13d58 <__aeabi_fsub+0x120>
   13e66:	2b00      	cmp	r3, #0
   13e68:	d06e      	beq.n	13f48 <__aeabi_fsub+0x310>
   13e6a:	24ff      	movs	r4, #255	; 0xff
   13e6c:	2e00      	cmp	r6, #0
   13e6e:	d100      	bne.n	13e72 <__aeabi_fsub+0x23a>
   13e70:	e728      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13e72:	2280      	movs	r2, #128	; 0x80
   13e74:	4651      	mov	r1, sl
   13e76:	03d2      	lsls	r2, r2, #15
   13e78:	4211      	tst	r1, r2
   13e7a:	d003      	beq.n	13e84 <__aeabi_fsub+0x24c>
   13e7c:	4661      	mov	r1, ip
   13e7e:	4211      	tst	r1, r2
   13e80:	d100      	bne.n	13e84 <__aeabi_fsub+0x24c>
   13e82:	0033      	movs	r3, r6
   13e84:	24ff      	movs	r4, #255	; 0xff
   13e86:	e71d      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13e88:	24ff      	movs	r4, #255	; 0xff
   13e8a:	2300      	movs	r3, #0
   13e8c:	e72c      	b.n	13ce8 <__aeabi_fsub+0xb0>
   13e8e:	2c00      	cmp	r4, #0
   13e90:	d1e9      	bne.n	13e66 <__aeabi_fsub+0x22e>
   13e92:	2b00      	cmp	r3, #0
   13e94:	d063      	beq.n	13f5e <__aeabi_fsub+0x326>
   13e96:	2e00      	cmp	r6, #0
   13e98:	d100      	bne.n	13e9c <__aeabi_fsub+0x264>
   13e9a:	e713      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13e9c:	199b      	adds	r3, r3, r6
   13e9e:	015a      	lsls	r2, r3, #5
   13ea0:	d400      	bmi.n	13ea4 <__aeabi_fsub+0x26c>
   13ea2:	e73e      	b.n	13d22 <__aeabi_fsub+0xea>
   13ea4:	4a31      	ldr	r2, [pc, #196]	; (13f6c <__aeabi_fsub+0x334>)
   13ea6:	000c      	movs	r4, r1
   13ea8:	4013      	ands	r3, r2
   13eaa:	e70b      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13eac:	2c00      	cmp	r4, #0
   13eae:	d11e      	bne.n	13eee <__aeabi_fsub+0x2b6>
   13eb0:	2b00      	cmp	r3, #0
   13eb2:	d12f      	bne.n	13f14 <__aeabi_fsub+0x2dc>
   13eb4:	2e00      	cmp	r6, #0
   13eb6:	d04f      	beq.n	13f58 <__aeabi_fsub+0x320>
   13eb8:	0033      	movs	r3, r6
   13eba:	000d      	movs	r5, r1
   13ebc:	e702      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13ebe:	2601      	movs	r6, #1
   13ec0:	e755      	b.n	13d6e <__aeabi_fsub+0x136>
   13ec2:	2c00      	cmp	r4, #0
   13ec4:	d11f      	bne.n	13f06 <__aeabi_fsub+0x2ce>
   13ec6:	2b00      	cmp	r3, #0
   13ec8:	d043      	beq.n	13f52 <__aeabi_fsub+0x31a>
   13eca:	43c9      	mvns	r1, r1
   13ecc:	2900      	cmp	r1, #0
   13ece:	d00b      	beq.n	13ee8 <__aeabi_fsub+0x2b0>
   13ed0:	28ff      	cmp	r0, #255	; 0xff
   13ed2:	d039      	beq.n	13f48 <__aeabi_fsub+0x310>
   13ed4:	291b      	cmp	r1, #27
   13ed6:	dc44      	bgt.n	13f62 <__aeabi_fsub+0x32a>
   13ed8:	001c      	movs	r4, r3
   13eda:	2720      	movs	r7, #32
   13edc:	40cc      	lsrs	r4, r1
   13ede:	1a79      	subs	r1, r7, r1
   13ee0:	408b      	lsls	r3, r1
   13ee2:	1e59      	subs	r1, r3, #1
   13ee4:	418b      	sbcs	r3, r1
   13ee6:	4323      	orrs	r3, r4
   13ee8:	199b      	adds	r3, r3, r6
   13eea:	0004      	movs	r4, r0
   13eec:	e740      	b.n	13d70 <__aeabi_fsub+0x138>
   13eee:	2b00      	cmp	r3, #0
   13ef0:	d11a      	bne.n	13f28 <__aeabi_fsub+0x2f0>
   13ef2:	2e00      	cmp	r6, #0
   13ef4:	d124      	bne.n	13f40 <__aeabi_fsub+0x308>
   13ef6:	2780      	movs	r7, #128	; 0x80
   13ef8:	2200      	movs	r2, #0
   13efa:	03ff      	lsls	r7, r7, #15
   13efc:	e71b      	b.n	13d36 <__aeabi_fsub+0xfe>
   13efe:	0033      	movs	r3, r6
   13f00:	0004      	movs	r4, r0
   13f02:	000d      	movs	r5, r1
   13f04:	e6de      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f06:	28ff      	cmp	r0, #255	; 0xff
   13f08:	d01e      	beq.n	13f48 <__aeabi_fsub+0x310>
   13f0a:	2480      	movs	r4, #128	; 0x80
   13f0c:	04e4      	lsls	r4, r4, #19
   13f0e:	4249      	negs	r1, r1
   13f10:	4323      	orrs	r3, r4
   13f12:	e7df      	b.n	13ed4 <__aeabi_fsub+0x29c>
   13f14:	2e00      	cmp	r6, #0
   13f16:	d100      	bne.n	13f1a <__aeabi_fsub+0x2e2>
   13f18:	e6d4      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f1a:	1b9f      	subs	r7, r3, r6
   13f1c:	017a      	lsls	r2, r7, #5
   13f1e:	d400      	bmi.n	13f22 <__aeabi_fsub+0x2ea>
   13f20:	e737      	b.n	13d92 <__aeabi_fsub+0x15a>
   13f22:	1af3      	subs	r3, r6, r3
   13f24:	000d      	movs	r5, r1
   13f26:	e6cd      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f28:	24ff      	movs	r4, #255	; 0xff
   13f2a:	2e00      	cmp	r6, #0
   13f2c:	d100      	bne.n	13f30 <__aeabi_fsub+0x2f8>
   13f2e:	e6c9      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f30:	2280      	movs	r2, #128	; 0x80
   13f32:	4650      	mov	r0, sl
   13f34:	03d2      	lsls	r2, r2, #15
   13f36:	4210      	tst	r0, r2
   13f38:	d0a4      	beq.n	13e84 <__aeabi_fsub+0x24c>
   13f3a:	4660      	mov	r0, ip
   13f3c:	4210      	tst	r0, r2
   13f3e:	d1a1      	bne.n	13e84 <__aeabi_fsub+0x24c>
   13f40:	0033      	movs	r3, r6
   13f42:	000d      	movs	r5, r1
   13f44:	24ff      	movs	r4, #255	; 0xff
   13f46:	e6bd      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f48:	0033      	movs	r3, r6
   13f4a:	24ff      	movs	r4, #255	; 0xff
   13f4c:	e6ba      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f4e:	2301      	movs	r3, #1
   13f50:	e76e      	b.n	13e30 <__aeabi_fsub+0x1f8>
   13f52:	0033      	movs	r3, r6
   13f54:	0004      	movs	r4, r0
   13f56:	e6b5      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f58:	2700      	movs	r7, #0
   13f5a:	2200      	movs	r2, #0
   13f5c:	e71c      	b.n	13d98 <__aeabi_fsub+0x160>
   13f5e:	0033      	movs	r3, r6
   13f60:	e6b0      	b.n	13cc4 <__aeabi_fsub+0x8c>
   13f62:	2301      	movs	r3, #1
   13f64:	e7c0      	b.n	13ee8 <__aeabi_fsub+0x2b0>
   13f66:	46c0      	nop			; (mov r8, r8)
   13f68:	7dffffff 	.word	0x7dffffff
   13f6c:	fbffffff 	.word	0xfbffffff

00013f70 <__aeabi_f2iz>:
   13f70:	0241      	lsls	r1, r0, #9
   13f72:	0043      	lsls	r3, r0, #1
   13f74:	0fc2      	lsrs	r2, r0, #31
   13f76:	0a49      	lsrs	r1, r1, #9
   13f78:	0e1b      	lsrs	r3, r3, #24
   13f7a:	2000      	movs	r0, #0
   13f7c:	2b7e      	cmp	r3, #126	; 0x7e
   13f7e:	dd0d      	ble.n	13f9c <__aeabi_f2iz+0x2c>
   13f80:	2b9d      	cmp	r3, #157	; 0x9d
   13f82:	dc0c      	bgt.n	13f9e <__aeabi_f2iz+0x2e>
   13f84:	2080      	movs	r0, #128	; 0x80
   13f86:	0400      	lsls	r0, r0, #16
   13f88:	4301      	orrs	r1, r0
   13f8a:	2b95      	cmp	r3, #149	; 0x95
   13f8c:	dc0a      	bgt.n	13fa4 <__aeabi_f2iz+0x34>
   13f8e:	2096      	movs	r0, #150	; 0x96
   13f90:	1ac3      	subs	r3, r0, r3
   13f92:	40d9      	lsrs	r1, r3
   13f94:	4248      	negs	r0, r1
   13f96:	2a00      	cmp	r2, #0
   13f98:	d100      	bne.n	13f9c <__aeabi_f2iz+0x2c>
   13f9a:	0008      	movs	r0, r1
   13f9c:	4770      	bx	lr
   13f9e:	4b03      	ldr	r3, [pc, #12]	; (13fac <__aeabi_f2iz+0x3c>)
   13fa0:	18d0      	adds	r0, r2, r3
   13fa2:	e7fb      	b.n	13f9c <__aeabi_f2iz+0x2c>
   13fa4:	3b96      	subs	r3, #150	; 0x96
   13fa6:	4099      	lsls	r1, r3
   13fa8:	e7f4      	b.n	13f94 <__aeabi_f2iz+0x24>
   13faa:	46c0      	nop			; (mov r8, r8)
   13fac:	7fffffff 	.word	0x7fffffff

00013fb0 <__aeabi_i2f>:
   13fb0:	b570      	push	{r4, r5, r6, lr}
   13fb2:	2800      	cmp	r0, #0
   13fb4:	d030      	beq.n	14018 <__aeabi_i2f+0x68>
   13fb6:	17c3      	asrs	r3, r0, #31
   13fb8:	18c4      	adds	r4, r0, r3
   13fba:	405c      	eors	r4, r3
   13fbc:	0fc5      	lsrs	r5, r0, #31
   13fbe:	0020      	movs	r0, r4
   13fc0:	f001 fdf0 	bl	15ba4 <__clzsi2>
   13fc4:	239e      	movs	r3, #158	; 0x9e
   13fc6:	1a1b      	subs	r3, r3, r0
   13fc8:	2b96      	cmp	r3, #150	; 0x96
   13fca:	dc0d      	bgt.n	13fe8 <__aeabi_i2f+0x38>
   13fcc:	2296      	movs	r2, #150	; 0x96
   13fce:	1ad2      	subs	r2, r2, r3
   13fd0:	4094      	lsls	r4, r2
   13fd2:	002a      	movs	r2, r5
   13fd4:	0264      	lsls	r4, r4, #9
   13fd6:	0a64      	lsrs	r4, r4, #9
   13fd8:	b2db      	uxtb	r3, r3
   13fda:	0264      	lsls	r4, r4, #9
   13fdc:	05db      	lsls	r3, r3, #23
   13fde:	0a60      	lsrs	r0, r4, #9
   13fe0:	07d2      	lsls	r2, r2, #31
   13fe2:	4318      	orrs	r0, r3
   13fe4:	4310      	orrs	r0, r2
   13fe6:	bd70      	pop	{r4, r5, r6, pc}
   13fe8:	2b99      	cmp	r3, #153	; 0x99
   13fea:	dc19      	bgt.n	14020 <__aeabi_i2f+0x70>
   13fec:	2299      	movs	r2, #153	; 0x99
   13fee:	1ad2      	subs	r2, r2, r3
   13ff0:	2a00      	cmp	r2, #0
   13ff2:	dd29      	ble.n	14048 <__aeabi_i2f+0x98>
   13ff4:	4094      	lsls	r4, r2
   13ff6:	0022      	movs	r2, r4
   13ff8:	4c14      	ldr	r4, [pc, #80]	; (1404c <__aeabi_i2f+0x9c>)
   13ffa:	4014      	ands	r4, r2
   13ffc:	0751      	lsls	r1, r2, #29
   13ffe:	d004      	beq.n	1400a <__aeabi_i2f+0x5a>
   14000:	210f      	movs	r1, #15
   14002:	400a      	ands	r2, r1
   14004:	2a04      	cmp	r2, #4
   14006:	d000      	beq.n	1400a <__aeabi_i2f+0x5a>
   14008:	3404      	adds	r4, #4
   1400a:	0162      	lsls	r2, r4, #5
   1400c:	d413      	bmi.n	14036 <__aeabi_i2f+0x86>
   1400e:	01a4      	lsls	r4, r4, #6
   14010:	0a64      	lsrs	r4, r4, #9
   14012:	b2db      	uxtb	r3, r3
   14014:	002a      	movs	r2, r5
   14016:	e7e0      	b.n	13fda <__aeabi_i2f+0x2a>
   14018:	2200      	movs	r2, #0
   1401a:	2300      	movs	r3, #0
   1401c:	2400      	movs	r4, #0
   1401e:	e7dc      	b.n	13fda <__aeabi_i2f+0x2a>
   14020:	2205      	movs	r2, #5
   14022:	0021      	movs	r1, r4
   14024:	1a12      	subs	r2, r2, r0
   14026:	40d1      	lsrs	r1, r2
   14028:	22b9      	movs	r2, #185	; 0xb9
   1402a:	1ad2      	subs	r2, r2, r3
   1402c:	4094      	lsls	r4, r2
   1402e:	1e62      	subs	r2, r4, #1
   14030:	4194      	sbcs	r4, r2
   14032:	430c      	orrs	r4, r1
   14034:	e7da      	b.n	13fec <__aeabi_i2f+0x3c>
   14036:	4b05      	ldr	r3, [pc, #20]	; (1404c <__aeabi_i2f+0x9c>)
   14038:	002a      	movs	r2, r5
   1403a:	401c      	ands	r4, r3
   1403c:	239f      	movs	r3, #159	; 0x9f
   1403e:	01a4      	lsls	r4, r4, #6
   14040:	1a1b      	subs	r3, r3, r0
   14042:	0a64      	lsrs	r4, r4, #9
   14044:	b2db      	uxtb	r3, r3
   14046:	e7c8      	b.n	13fda <__aeabi_i2f+0x2a>
   14048:	0022      	movs	r2, r4
   1404a:	e7d5      	b.n	13ff8 <__aeabi_i2f+0x48>
   1404c:	fbffffff 	.word	0xfbffffff

00014050 <__aeabi_ui2f>:
   14050:	b510      	push	{r4, lr}
   14052:	1e04      	subs	r4, r0, #0
   14054:	d027      	beq.n	140a6 <__aeabi_ui2f+0x56>
   14056:	f001 fda5 	bl	15ba4 <__clzsi2>
   1405a:	239e      	movs	r3, #158	; 0x9e
   1405c:	1a1b      	subs	r3, r3, r0
   1405e:	2b96      	cmp	r3, #150	; 0x96
   14060:	dc0a      	bgt.n	14078 <__aeabi_ui2f+0x28>
   14062:	2296      	movs	r2, #150	; 0x96
   14064:	1ad2      	subs	r2, r2, r3
   14066:	4094      	lsls	r4, r2
   14068:	0264      	lsls	r4, r4, #9
   1406a:	0a64      	lsrs	r4, r4, #9
   1406c:	b2db      	uxtb	r3, r3
   1406e:	0264      	lsls	r4, r4, #9
   14070:	05db      	lsls	r3, r3, #23
   14072:	0a60      	lsrs	r0, r4, #9
   14074:	4318      	orrs	r0, r3
   14076:	bd10      	pop	{r4, pc}
   14078:	2b99      	cmp	r3, #153	; 0x99
   1407a:	dc17      	bgt.n	140ac <__aeabi_ui2f+0x5c>
   1407c:	2299      	movs	r2, #153	; 0x99
   1407e:	1ad2      	subs	r2, r2, r3
   14080:	2a00      	cmp	r2, #0
   14082:	dd27      	ble.n	140d4 <__aeabi_ui2f+0x84>
   14084:	4094      	lsls	r4, r2
   14086:	0022      	movs	r2, r4
   14088:	4c13      	ldr	r4, [pc, #76]	; (140d8 <__aeabi_ui2f+0x88>)
   1408a:	4014      	ands	r4, r2
   1408c:	0751      	lsls	r1, r2, #29
   1408e:	d004      	beq.n	1409a <__aeabi_ui2f+0x4a>
   14090:	210f      	movs	r1, #15
   14092:	400a      	ands	r2, r1
   14094:	2a04      	cmp	r2, #4
   14096:	d000      	beq.n	1409a <__aeabi_ui2f+0x4a>
   14098:	3404      	adds	r4, #4
   1409a:	0162      	lsls	r2, r4, #5
   1409c:	d412      	bmi.n	140c4 <__aeabi_ui2f+0x74>
   1409e:	01a4      	lsls	r4, r4, #6
   140a0:	0a64      	lsrs	r4, r4, #9
   140a2:	b2db      	uxtb	r3, r3
   140a4:	e7e3      	b.n	1406e <__aeabi_ui2f+0x1e>
   140a6:	2300      	movs	r3, #0
   140a8:	2400      	movs	r4, #0
   140aa:	e7e0      	b.n	1406e <__aeabi_ui2f+0x1e>
   140ac:	22b9      	movs	r2, #185	; 0xb9
   140ae:	0021      	movs	r1, r4
   140b0:	1ad2      	subs	r2, r2, r3
   140b2:	4091      	lsls	r1, r2
   140b4:	000a      	movs	r2, r1
   140b6:	1e51      	subs	r1, r2, #1
   140b8:	418a      	sbcs	r2, r1
   140ba:	2105      	movs	r1, #5
   140bc:	1a09      	subs	r1, r1, r0
   140be:	40cc      	lsrs	r4, r1
   140c0:	4314      	orrs	r4, r2
   140c2:	e7db      	b.n	1407c <__aeabi_ui2f+0x2c>
   140c4:	4b04      	ldr	r3, [pc, #16]	; (140d8 <__aeabi_ui2f+0x88>)
   140c6:	401c      	ands	r4, r3
   140c8:	239f      	movs	r3, #159	; 0x9f
   140ca:	01a4      	lsls	r4, r4, #6
   140cc:	1a1b      	subs	r3, r3, r0
   140ce:	0a64      	lsrs	r4, r4, #9
   140d0:	b2db      	uxtb	r3, r3
   140d2:	e7cc      	b.n	1406e <__aeabi_ui2f+0x1e>
   140d4:	0022      	movs	r2, r4
   140d6:	e7d7      	b.n	14088 <__aeabi_ui2f+0x38>
   140d8:	fbffffff 	.word	0xfbffffff

000140dc <__aeabi_dadd>:
   140dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   140de:	4645      	mov	r5, r8
   140e0:	46de      	mov	lr, fp
   140e2:	4657      	mov	r7, sl
   140e4:	464e      	mov	r6, r9
   140e6:	030c      	lsls	r4, r1, #12
   140e8:	b5e0      	push	{r5, r6, r7, lr}
   140ea:	004e      	lsls	r6, r1, #1
   140ec:	0fc9      	lsrs	r1, r1, #31
   140ee:	4688      	mov	r8, r1
   140f0:	000d      	movs	r5, r1
   140f2:	0a61      	lsrs	r1, r4, #9
   140f4:	0f44      	lsrs	r4, r0, #29
   140f6:	430c      	orrs	r4, r1
   140f8:	00c7      	lsls	r7, r0, #3
   140fa:	0319      	lsls	r1, r3, #12
   140fc:	0058      	lsls	r0, r3, #1
   140fe:	0fdb      	lsrs	r3, r3, #31
   14100:	469b      	mov	fp, r3
   14102:	0a4b      	lsrs	r3, r1, #9
   14104:	0f51      	lsrs	r1, r2, #29
   14106:	430b      	orrs	r3, r1
   14108:	0d76      	lsrs	r6, r6, #21
   1410a:	0d40      	lsrs	r0, r0, #21
   1410c:	0019      	movs	r1, r3
   1410e:	00d2      	lsls	r2, r2, #3
   14110:	45d8      	cmp	r8, fp
   14112:	d100      	bne.n	14116 <__aeabi_dadd+0x3a>
   14114:	e0ae      	b.n	14274 <__aeabi_dadd+0x198>
   14116:	1a35      	subs	r5, r6, r0
   14118:	2d00      	cmp	r5, #0
   1411a:	dc00      	bgt.n	1411e <__aeabi_dadd+0x42>
   1411c:	e0f6      	b.n	1430c <__aeabi_dadd+0x230>
   1411e:	2800      	cmp	r0, #0
   14120:	d10f      	bne.n	14142 <__aeabi_dadd+0x66>
   14122:	4313      	orrs	r3, r2
   14124:	d100      	bne.n	14128 <__aeabi_dadd+0x4c>
   14126:	e0db      	b.n	142e0 <__aeabi_dadd+0x204>
   14128:	1e6b      	subs	r3, r5, #1
   1412a:	2b00      	cmp	r3, #0
   1412c:	d000      	beq.n	14130 <__aeabi_dadd+0x54>
   1412e:	e137      	b.n	143a0 <__aeabi_dadd+0x2c4>
   14130:	1aba      	subs	r2, r7, r2
   14132:	4297      	cmp	r7, r2
   14134:	41bf      	sbcs	r7, r7
   14136:	1a64      	subs	r4, r4, r1
   14138:	427f      	negs	r7, r7
   1413a:	1be4      	subs	r4, r4, r7
   1413c:	2601      	movs	r6, #1
   1413e:	0017      	movs	r7, r2
   14140:	e024      	b.n	1418c <__aeabi_dadd+0xb0>
   14142:	4bc6      	ldr	r3, [pc, #792]	; (1445c <__aeabi_dadd+0x380>)
   14144:	429e      	cmp	r6, r3
   14146:	d04d      	beq.n	141e4 <__aeabi_dadd+0x108>
   14148:	2380      	movs	r3, #128	; 0x80
   1414a:	041b      	lsls	r3, r3, #16
   1414c:	4319      	orrs	r1, r3
   1414e:	2d38      	cmp	r5, #56	; 0x38
   14150:	dd00      	ble.n	14154 <__aeabi_dadd+0x78>
   14152:	e107      	b.n	14364 <__aeabi_dadd+0x288>
   14154:	2d1f      	cmp	r5, #31
   14156:	dd00      	ble.n	1415a <__aeabi_dadd+0x7e>
   14158:	e138      	b.n	143cc <__aeabi_dadd+0x2f0>
   1415a:	2020      	movs	r0, #32
   1415c:	1b43      	subs	r3, r0, r5
   1415e:	469a      	mov	sl, r3
   14160:	000b      	movs	r3, r1
   14162:	4650      	mov	r0, sl
   14164:	4083      	lsls	r3, r0
   14166:	4699      	mov	r9, r3
   14168:	0013      	movs	r3, r2
   1416a:	4648      	mov	r0, r9
   1416c:	40eb      	lsrs	r3, r5
   1416e:	4318      	orrs	r0, r3
   14170:	0003      	movs	r3, r0
   14172:	4650      	mov	r0, sl
   14174:	4082      	lsls	r2, r0
   14176:	1e50      	subs	r0, r2, #1
   14178:	4182      	sbcs	r2, r0
   1417a:	40e9      	lsrs	r1, r5
   1417c:	431a      	orrs	r2, r3
   1417e:	1aba      	subs	r2, r7, r2
   14180:	1a61      	subs	r1, r4, r1
   14182:	4297      	cmp	r7, r2
   14184:	41a4      	sbcs	r4, r4
   14186:	0017      	movs	r7, r2
   14188:	4264      	negs	r4, r4
   1418a:	1b0c      	subs	r4, r1, r4
   1418c:	0223      	lsls	r3, r4, #8
   1418e:	d562      	bpl.n	14256 <__aeabi_dadd+0x17a>
   14190:	0264      	lsls	r4, r4, #9
   14192:	0a65      	lsrs	r5, r4, #9
   14194:	2d00      	cmp	r5, #0
   14196:	d100      	bne.n	1419a <__aeabi_dadd+0xbe>
   14198:	e0df      	b.n	1435a <__aeabi_dadd+0x27e>
   1419a:	0028      	movs	r0, r5
   1419c:	f001 fd02 	bl	15ba4 <__clzsi2>
   141a0:	0003      	movs	r3, r0
   141a2:	3b08      	subs	r3, #8
   141a4:	2b1f      	cmp	r3, #31
   141a6:	dd00      	ble.n	141aa <__aeabi_dadd+0xce>
   141a8:	e0d2      	b.n	14350 <__aeabi_dadd+0x274>
   141aa:	2220      	movs	r2, #32
   141ac:	003c      	movs	r4, r7
   141ae:	1ad2      	subs	r2, r2, r3
   141b0:	409d      	lsls	r5, r3
   141b2:	40d4      	lsrs	r4, r2
   141b4:	409f      	lsls	r7, r3
   141b6:	4325      	orrs	r5, r4
   141b8:	429e      	cmp	r6, r3
   141ba:	dd00      	ble.n	141be <__aeabi_dadd+0xe2>
   141bc:	e0c4      	b.n	14348 <__aeabi_dadd+0x26c>
   141be:	1b9e      	subs	r6, r3, r6
   141c0:	1c73      	adds	r3, r6, #1
   141c2:	2b1f      	cmp	r3, #31
   141c4:	dd00      	ble.n	141c8 <__aeabi_dadd+0xec>
   141c6:	e0f1      	b.n	143ac <__aeabi_dadd+0x2d0>
   141c8:	2220      	movs	r2, #32
   141ca:	0038      	movs	r0, r7
   141cc:	0029      	movs	r1, r5
   141ce:	1ad2      	subs	r2, r2, r3
   141d0:	40d8      	lsrs	r0, r3
   141d2:	4091      	lsls	r1, r2
   141d4:	4097      	lsls	r7, r2
   141d6:	002c      	movs	r4, r5
   141d8:	4301      	orrs	r1, r0
   141da:	1e78      	subs	r0, r7, #1
   141dc:	4187      	sbcs	r7, r0
   141de:	40dc      	lsrs	r4, r3
   141e0:	2600      	movs	r6, #0
   141e2:	430f      	orrs	r7, r1
   141e4:	077b      	lsls	r3, r7, #29
   141e6:	d009      	beq.n	141fc <__aeabi_dadd+0x120>
   141e8:	230f      	movs	r3, #15
   141ea:	403b      	ands	r3, r7
   141ec:	2b04      	cmp	r3, #4
   141ee:	d005      	beq.n	141fc <__aeabi_dadd+0x120>
   141f0:	1d3b      	adds	r3, r7, #4
   141f2:	42bb      	cmp	r3, r7
   141f4:	41bf      	sbcs	r7, r7
   141f6:	427f      	negs	r7, r7
   141f8:	19e4      	adds	r4, r4, r7
   141fa:	001f      	movs	r7, r3
   141fc:	0223      	lsls	r3, r4, #8
   141fe:	d52c      	bpl.n	1425a <__aeabi_dadd+0x17e>
   14200:	4b96      	ldr	r3, [pc, #600]	; (1445c <__aeabi_dadd+0x380>)
   14202:	3601      	adds	r6, #1
   14204:	429e      	cmp	r6, r3
   14206:	d100      	bne.n	1420a <__aeabi_dadd+0x12e>
   14208:	e09a      	b.n	14340 <__aeabi_dadd+0x264>
   1420a:	4645      	mov	r5, r8
   1420c:	4b94      	ldr	r3, [pc, #592]	; (14460 <__aeabi_dadd+0x384>)
   1420e:	08ff      	lsrs	r7, r7, #3
   14210:	401c      	ands	r4, r3
   14212:	0760      	lsls	r0, r4, #29
   14214:	0576      	lsls	r6, r6, #21
   14216:	0264      	lsls	r4, r4, #9
   14218:	4307      	orrs	r7, r0
   1421a:	0b24      	lsrs	r4, r4, #12
   1421c:	0d76      	lsrs	r6, r6, #21
   1421e:	2100      	movs	r1, #0
   14220:	0324      	lsls	r4, r4, #12
   14222:	0b23      	lsrs	r3, r4, #12
   14224:	0d0c      	lsrs	r4, r1, #20
   14226:	4a8f      	ldr	r2, [pc, #572]	; (14464 <__aeabi_dadd+0x388>)
   14228:	0524      	lsls	r4, r4, #20
   1422a:	431c      	orrs	r4, r3
   1422c:	4014      	ands	r4, r2
   1422e:	0533      	lsls	r3, r6, #20
   14230:	4323      	orrs	r3, r4
   14232:	005b      	lsls	r3, r3, #1
   14234:	07ed      	lsls	r5, r5, #31
   14236:	085b      	lsrs	r3, r3, #1
   14238:	432b      	orrs	r3, r5
   1423a:	0038      	movs	r0, r7
   1423c:	0019      	movs	r1, r3
   1423e:	bc3c      	pop	{r2, r3, r4, r5}
   14240:	4690      	mov	r8, r2
   14242:	4699      	mov	r9, r3
   14244:	46a2      	mov	sl, r4
   14246:	46ab      	mov	fp, r5
   14248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1424a:	4664      	mov	r4, ip
   1424c:	4304      	orrs	r4, r0
   1424e:	d100      	bne.n	14252 <__aeabi_dadd+0x176>
   14250:	e211      	b.n	14676 <__aeabi_dadd+0x59a>
   14252:	0004      	movs	r4, r0
   14254:	4667      	mov	r7, ip
   14256:	077b      	lsls	r3, r7, #29
   14258:	d1c6      	bne.n	141e8 <__aeabi_dadd+0x10c>
   1425a:	4645      	mov	r5, r8
   1425c:	0760      	lsls	r0, r4, #29
   1425e:	08ff      	lsrs	r7, r7, #3
   14260:	4307      	orrs	r7, r0
   14262:	08e4      	lsrs	r4, r4, #3
   14264:	4b7d      	ldr	r3, [pc, #500]	; (1445c <__aeabi_dadd+0x380>)
   14266:	429e      	cmp	r6, r3
   14268:	d030      	beq.n	142cc <__aeabi_dadd+0x1f0>
   1426a:	0324      	lsls	r4, r4, #12
   1426c:	0576      	lsls	r6, r6, #21
   1426e:	0b24      	lsrs	r4, r4, #12
   14270:	0d76      	lsrs	r6, r6, #21
   14272:	e7d4      	b.n	1421e <__aeabi_dadd+0x142>
   14274:	1a33      	subs	r3, r6, r0
   14276:	469a      	mov	sl, r3
   14278:	2b00      	cmp	r3, #0
   1427a:	dd78      	ble.n	1436e <__aeabi_dadd+0x292>
   1427c:	2800      	cmp	r0, #0
   1427e:	d031      	beq.n	142e4 <__aeabi_dadd+0x208>
   14280:	4876      	ldr	r0, [pc, #472]	; (1445c <__aeabi_dadd+0x380>)
   14282:	4286      	cmp	r6, r0
   14284:	d0ae      	beq.n	141e4 <__aeabi_dadd+0x108>
   14286:	2080      	movs	r0, #128	; 0x80
   14288:	0400      	lsls	r0, r0, #16
   1428a:	4301      	orrs	r1, r0
   1428c:	4653      	mov	r3, sl
   1428e:	2b38      	cmp	r3, #56	; 0x38
   14290:	dc00      	bgt.n	14294 <__aeabi_dadd+0x1b8>
   14292:	e0e9      	b.n	14468 <__aeabi_dadd+0x38c>
   14294:	430a      	orrs	r2, r1
   14296:	1e51      	subs	r1, r2, #1
   14298:	418a      	sbcs	r2, r1
   1429a:	2100      	movs	r1, #0
   1429c:	19d2      	adds	r2, r2, r7
   1429e:	42ba      	cmp	r2, r7
   142a0:	41bf      	sbcs	r7, r7
   142a2:	1909      	adds	r1, r1, r4
   142a4:	427c      	negs	r4, r7
   142a6:	0017      	movs	r7, r2
   142a8:	190c      	adds	r4, r1, r4
   142aa:	0223      	lsls	r3, r4, #8
   142ac:	d5d3      	bpl.n	14256 <__aeabi_dadd+0x17a>
   142ae:	4b6b      	ldr	r3, [pc, #428]	; (1445c <__aeabi_dadd+0x380>)
   142b0:	3601      	adds	r6, #1
   142b2:	429e      	cmp	r6, r3
   142b4:	d100      	bne.n	142b8 <__aeabi_dadd+0x1dc>
   142b6:	e13a      	b.n	1452e <__aeabi_dadd+0x452>
   142b8:	2001      	movs	r0, #1
   142ba:	4b69      	ldr	r3, [pc, #420]	; (14460 <__aeabi_dadd+0x384>)
   142bc:	401c      	ands	r4, r3
   142be:	087b      	lsrs	r3, r7, #1
   142c0:	4007      	ands	r7, r0
   142c2:	431f      	orrs	r7, r3
   142c4:	07e0      	lsls	r0, r4, #31
   142c6:	4307      	orrs	r7, r0
   142c8:	0864      	lsrs	r4, r4, #1
   142ca:	e78b      	b.n	141e4 <__aeabi_dadd+0x108>
   142cc:	0023      	movs	r3, r4
   142ce:	433b      	orrs	r3, r7
   142d0:	d100      	bne.n	142d4 <__aeabi_dadd+0x1f8>
   142d2:	e1cb      	b.n	1466c <__aeabi_dadd+0x590>
   142d4:	2280      	movs	r2, #128	; 0x80
   142d6:	0312      	lsls	r2, r2, #12
   142d8:	4314      	orrs	r4, r2
   142da:	0324      	lsls	r4, r4, #12
   142dc:	0b24      	lsrs	r4, r4, #12
   142de:	e79e      	b.n	1421e <__aeabi_dadd+0x142>
   142e0:	002e      	movs	r6, r5
   142e2:	e77f      	b.n	141e4 <__aeabi_dadd+0x108>
   142e4:	0008      	movs	r0, r1
   142e6:	4310      	orrs	r0, r2
   142e8:	d100      	bne.n	142ec <__aeabi_dadd+0x210>
   142ea:	e0b4      	b.n	14456 <__aeabi_dadd+0x37a>
   142ec:	1e58      	subs	r0, r3, #1
   142ee:	2800      	cmp	r0, #0
   142f0:	d000      	beq.n	142f4 <__aeabi_dadd+0x218>
   142f2:	e0de      	b.n	144b2 <__aeabi_dadd+0x3d6>
   142f4:	18ba      	adds	r2, r7, r2
   142f6:	42ba      	cmp	r2, r7
   142f8:	419b      	sbcs	r3, r3
   142fa:	1864      	adds	r4, r4, r1
   142fc:	425b      	negs	r3, r3
   142fe:	18e4      	adds	r4, r4, r3
   14300:	0017      	movs	r7, r2
   14302:	2601      	movs	r6, #1
   14304:	0223      	lsls	r3, r4, #8
   14306:	d5a6      	bpl.n	14256 <__aeabi_dadd+0x17a>
   14308:	2602      	movs	r6, #2
   1430a:	e7d5      	b.n	142b8 <__aeabi_dadd+0x1dc>
   1430c:	2d00      	cmp	r5, #0
   1430e:	d16e      	bne.n	143ee <__aeabi_dadd+0x312>
   14310:	1c70      	adds	r0, r6, #1
   14312:	0540      	lsls	r0, r0, #21
   14314:	0d40      	lsrs	r0, r0, #21
   14316:	2801      	cmp	r0, #1
   14318:	dc00      	bgt.n	1431c <__aeabi_dadd+0x240>
   1431a:	e0f9      	b.n	14510 <__aeabi_dadd+0x434>
   1431c:	1ab8      	subs	r0, r7, r2
   1431e:	4684      	mov	ip, r0
   14320:	4287      	cmp	r7, r0
   14322:	4180      	sbcs	r0, r0
   14324:	1ae5      	subs	r5, r4, r3
   14326:	4240      	negs	r0, r0
   14328:	1a2d      	subs	r5, r5, r0
   1432a:	0228      	lsls	r0, r5, #8
   1432c:	d400      	bmi.n	14330 <__aeabi_dadd+0x254>
   1432e:	e089      	b.n	14444 <__aeabi_dadd+0x368>
   14330:	1bd7      	subs	r7, r2, r7
   14332:	42ba      	cmp	r2, r7
   14334:	4192      	sbcs	r2, r2
   14336:	1b1c      	subs	r4, r3, r4
   14338:	4252      	negs	r2, r2
   1433a:	1aa5      	subs	r5, r4, r2
   1433c:	46d8      	mov	r8, fp
   1433e:	e729      	b.n	14194 <__aeabi_dadd+0xb8>
   14340:	4645      	mov	r5, r8
   14342:	2400      	movs	r4, #0
   14344:	2700      	movs	r7, #0
   14346:	e76a      	b.n	1421e <__aeabi_dadd+0x142>
   14348:	4c45      	ldr	r4, [pc, #276]	; (14460 <__aeabi_dadd+0x384>)
   1434a:	1af6      	subs	r6, r6, r3
   1434c:	402c      	ands	r4, r5
   1434e:	e749      	b.n	141e4 <__aeabi_dadd+0x108>
   14350:	003d      	movs	r5, r7
   14352:	3828      	subs	r0, #40	; 0x28
   14354:	4085      	lsls	r5, r0
   14356:	2700      	movs	r7, #0
   14358:	e72e      	b.n	141b8 <__aeabi_dadd+0xdc>
   1435a:	0038      	movs	r0, r7
   1435c:	f001 fc22 	bl	15ba4 <__clzsi2>
   14360:	3020      	adds	r0, #32
   14362:	e71d      	b.n	141a0 <__aeabi_dadd+0xc4>
   14364:	430a      	orrs	r2, r1
   14366:	1e51      	subs	r1, r2, #1
   14368:	418a      	sbcs	r2, r1
   1436a:	2100      	movs	r1, #0
   1436c:	e707      	b.n	1417e <__aeabi_dadd+0xa2>
   1436e:	2b00      	cmp	r3, #0
   14370:	d000      	beq.n	14374 <__aeabi_dadd+0x298>
   14372:	e0f3      	b.n	1455c <__aeabi_dadd+0x480>
   14374:	1c70      	adds	r0, r6, #1
   14376:	0543      	lsls	r3, r0, #21
   14378:	0d5b      	lsrs	r3, r3, #21
   1437a:	2b01      	cmp	r3, #1
   1437c:	dc00      	bgt.n	14380 <__aeabi_dadd+0x2a4>
   1437e:	e0ad      	b.n	144dc <__aeabi_dadd+0x400>
   14380:	4b36      	ldr	r3, [pc, #216]	; (1445c <__aeabi_dadd+0x380>)
   14382:	4298      	cmp	r0, r3
   14384:	d100      	bne.n	14388 <__aeabi_dadd+0x2ac>
   14386:	e0d1      	b.n	1452c <__aeabi_dadd+0x450>
   14388:	18ba      	adds	r2, r7, r2
   1438a:	42ba      	cmp	r2, r7
   1438c:	41bf      	sbcs	r7, r7
   1438e:	1864      	adds	r4, r4, r1
   14390:	427f      	negs	r7, r7
   14392:	19e4      	adds	r4, r4, r7
   14394:	07e7      	lsls	r7, r4, #31
   14396:	0852      	lsrs	r2, r2, #1
   14398:	4317      	orrs	r7, r2
   1439a:	0864      	lsrs	r4, r4, #1
   1439c:	0006      	movs	r6, r0
   1439e:	e721      	b.n	141e4 <__aeabi_dadd+0x108>
   143a0:	482e      	ldr	r0, [pc, #184]	; (1445c <__aeabi_dadd+0x380>)
   143a2:	4285      	cmp	r5, r0
   143a4:	d100      	bne.n	143a8 <__aeabi_dadd+0x2cc>
   143a6:	e093      	b.n	144d0 <__aeabi_dadd+0x3f4>
   143a8:	001d      	movs	r5, r3
   143aa:	e6d0      	b.n	1414e <__aeabi_dadd+0x72>
   143ac:	0029      	movs	r1, r5
   143ae:	3e1f      	subs	r6, #31
   143b0:	40f1      	lsrs	r1, r6
   143b2:	2b20      	cmp	r3, #32
   143b4:	d100      	bne.n	143b8 <__aeabi_dadd+0x2dc>
   143b6:	e08d      	b.n	144d4 <__aeabi_dadd+0x3f8>
   143b8:	2240      	movs	r2, #64	; 0x40
   143ba:	1ad3      	subs	r3, r2, r3
   143bc:	409d      	lsls	r5, r3
   143be:	432f      	orrs	r7, r5
   143c0:	1e7d      	subs	r5, r7, #1
   143c2:	41af      	sbcs	r7, r5
   143c4:	2400      	movs	r4, #0
   143c6:	430f      	orrs	r7, r1
   143c8:	2600      	movs	r6, #0
   143ca:	e744      	b.n	14256 <__aeabi_dadd+0x17a>
   143cc:	002b      	movs	r3, r5
   143ce:	0008      	movs	r0, r1
   143d0:	3b20      	subs	r3, #32
   143d2:	40d8      	lsrs	r0, r3
   143d4:	0003      	movs	r3, r0
   143d6:	2d20      	cmp	r5, #32
   143d8:	d100      	bne.n	143dc <__aeabi_dadd+0x300>
   143da:	e07d      	b.n	144d8 <__aeabi_dadd+0x3fc>
   143dc:	2040      	movs	r0, #64	; 0x40
   143de:	1b45      	subs	r5, r0, r5
   143e0:	40a9      	lsls	r1, r5
   143e2:	430a      	orrs	r2, r1
   143e4:	1e51      	subs	r1, r2, #1
   143e6:	418a      	sbcs	r2, r1
   143e8:	2100      	movs	r1, #0
   143ea:	431a      	orrs	r2, r3
   143ec:	e6c7      	b.n	1417e <__aeabi_dadd+0xa2>
   143ee:	2e00      	cmp	r6, #0
   143f0:	d050      	beq.n	14494 <__aeabi_dadd+0x3b8>
   143f2:	4e1a      	ldr	r6, [pc, #104]	; (1445c <__aeabi_dadd+0x380>)
   143f4:	42b0      	cmp	r0, r6
   143f6:	d057      	beq.n	144a8 <__aeabi_dadd+0x3cc>
   143f8:	2680      	movs	r6, #128	; 0x80
   143fa:	426b      	negs	r3, r5
   143fc:	4699      	mov	r9, r3
   143fe:	0436      	lsls	r6, r6, #16
   14400:	4334      	orrs	r4, r6
   14402:	464b      	mov	r3, r9
   14404:	2b38      	cmp	r3, #56	; 0x38
   14406:	dd00      	ble.n	1440a <__aeabi_dadd+0x32e>
   14408:	e0d6      	b.n	145b8 <__aeabi_dadd+0x4dc>
   1440a:	2b1f      	cmp	r3, #31
   1440c:	dd00      	ble.n	14410 <__aeabi_dadd+0x334>
   1440e:	e135      	b.n	1467c <__aeabi_dadd+0x5a0>
   14410:	2620      	movs	r6, #32
   14412:	1af5      	subs	r5, r6, r3
   14414:	0026      	movs	r6, r4
   14416:	40ae      	lsls	r6, r5
   14418:	46b2      	mov	sl, r6
   1441a:	003e      	movs	r6, r7
   1441c:	40de      	lsrs	r6, r3
   1441e:	46ac      	mov	ip, r5
   14420:	0035      	movs	r5, r6
   14422:	4656      	mov	r6, sl
   14424:	432e      	orrs	r6, r5
   14426:	4665      	mov	r5, ip
   14428:	40af      	lsls	r7, r5
   1442a:	1e7d      	subs	r5, r7, #1
   1442c:	41af      	sbcs	r7, r5
   1442e:	40dc      	lsrs	r4, r3
   14430:	4337      	orrs	r7, r6
   14432:	1bd7      	subs	r7, r2, r7
   14434:	42ba      	cmp	r2, r7
   14436:	4192      	sbcs	r2, r2
   14438:	1b0c      	subs	r4, r1, r4
   1443a:	4252      	negs	r2, r2
   1443c:	1aa4      	subs	r4, r4, r2
   1443e:	0006      	movs	r6, r0
   14440:	46d8      	mov	r8, fp
   14442:	e6a3      	b.n	1418c <__aeabi_dadd+0xb0>
   14444:	4664      	mov	r4, ip
   14446:	4667      	mov	r7, ip
   14448:	432c      	orrs	r4, r5
   1444a:	d000      	beq.n	1444e <__aeabi_dadd+0x372>
   1444c:	e6a2      	b.n	14194 <__aeabi_dadd+0xb8>
   1444e:	2500      	movs	r5, #0
   14450:	2600      	movs	r6, #0
   14452:	2700      	movs	r7, #0
   14454:	e706      	b.n	14264 <__aeabi_dadd+0x188>
   14456:	001e      	movs	r6, r3
   14458:	e6c4      	b.n	141e4 <__aeabi_dadd+0x108>
   1445a:	46c0      	nop			; (mov r8, r8)
   1445c:	000007ff 	.word	0x000007ff
   14460:	ff7fffff 	.word	0xff7fffff
   14464:	800fffff 	.word	0x800fffff
   14468:	2b1f      	cmp	r3, #31
   1446a:	dc63      	bgt.n	14534 <__aeabi_dadd+0x458>
   1446c:	2020      	movs	r0, #32
   1446e:	1ac3      	subs	r3, r0, r3
   14470:	0008      	movs	r0, r1
   14472:	4098      	lsls	r0, r3
   14474:	469c      	mov	ip, r3
   14476:	4683      	mov	fp, r0
   14478:	4653      	mov	r3, sl
   1447a:	0010      	movs	r0, r2
   1447c:	40d8      	lsrs	r0, r3
   1447e:	0003      	movs	r3, r0
   14480:	4658      	mov	r0, fp
   14482:	4318      	orrs	r0, r3
   14484:	4663      	mov	r3, ip
   14486:	409a      	lsls	r2, r3
   14488:	1e53      	subs	r3, r2, #1
   1448a:	419a      	sbcs	r2, r3
   1448c:	4653      	mov	r3, sl
   1448e:	4302      	orrs	r2, r0
   14490:	40d9      	lsrs	r1, r3
   14492:	e703      	b.n	1429c <__aeabi_dadd+0x1c0>
   14494:	0026      	movs	r6, r4
   14496:	433e      	orrs	r6, r7
   14498:	d006      	beq.n	144a8 <__aeabi_dadd+0x3cc>
   1449a:	43eb      	mvns	r3, r5
   1449c:	4699      	mov	r9, r3
   1449e:	2b00      	cmp	r3, #0
   144a0:	d0c7      	beq.n	14432 <__aeabi_dadd+0x356>
   144a2:	4e94      	ldr	r6, [pc, #592]	; (146f4 <__aeabi_dadd+0x618>)
   144a4:	42b0      	cmp	r0, r6
   144a6:	d1ac      	bne.n	14402 <__aeabi_dadd+0x326>
   144a8:	000c      	movs	r4, r1
   144aa:	0017      	movs	r7, r2
   144ac:	0006      	movs	r6, r0
   144ae:	46d8      	mov	r8, fp
   144b0:	e698      	b.n	141e4 <__aeabi_dadd+0x108>
   144b2:	4b90      	ldr	r3, [pc, #576]	; (146f4 <__aeabi_dadd+0x618>)
   144b4:	459a      	cmp	sl, r3
   144b6:	d00b      	beq.n	144d0 <__aeabi_dadd+0x3f4>
   144b8:	4682      	mov	sl, r0
   144ba:	e6e7      	b.n	1428c <__aeabi_dadd+0x1b0>
   144bc:	2800      	cmp	r0, #0
   144be:	d000      	beq.n	144c2 <__aeabi_dadd+0x3e6>
   144c0:	e09e      	b.n	14600 <__aeabi_dadd+0x524>
   144c2:	0018      	movs	r0, r3
   144c4:	4310      	orrs	r0, r2
   144c6:	d100      	bne.n	144ca <__aeabi_dadd+0x3ee>
   144c8:	e0e9      	b.n	1469e <__aeabi_dadd+0x5c2>
   144ca:	001c      	movs	r4, r3
   144cc:	0017      	movs	r7, r2
   144ce:	46d8      	mov	r8, fp
   144d0:	4e88      	ldr	r6, [pc, #544]	; (146f4 <__aeabi_dadd+0x618>)
   144d2:	e687      	b.n	141e4 <__aeabi_dadd+0x108>
   144d4:	2500      	movs	r5, #0
   144d6:	e772      	b.n	143be <__aeabi_dadd+0x2e2>
   144d8:	2100      	movs	r1, #0
   144da:	e782      	b.n	143e2 <__aeabi_dadd+0x306>
   144dc:	0023      	movs	r3, r4
   144de:	433b      	orrs	r3, r7
   144e0:	2e00      	cmp	r6, #0
   144e2:	d000      	beq.n	144e6 <__aeabi_dadd+0x40a>
   144e4:	e0ab      	b.n	1463e <__aeabi_dadd+0x562>
   144e6:	2b00      	cmp	r3, #0
   144e8:	d100      	bne.n	144ec <__aeabi_dadd+0x410>
   144ea:	e0e7      	b.n	146bc <__aeabi_dadd+0x5e0>
   144ec:	000b      	movs	r3, r1
   144ee:	4313      	orrs	r3, r2
   144f0:	d100      	bne.n	144f4 <__aeabi_dadd+0x418>
   144f2:	e677      	b.n	141e4 <__aeabi_dadd+0x108>
   144f4:	18ba      	adds	r2, r7, r2
   144f6:	42ba      	cmp	r2, r7
   144f8:	41bf      	sbcs	r7, r7
   144fa:	1864      	adds	r4, r4, r1
   144fc:	427f      	negs	r7, r7
   144fe:	19e4      	adds	r4, r4, r7
   14500:	0223      	lsls	r3, r4, #8
   14502:	d400      	bmi.n	14506 <__aeabi_dadd+0x42a>
   14504:	e0f2      	b.n	146ec <__aeabi_dadd+0x610>
   14506:	4b7c      	ldr	r3, [pc, #496]	; (146f8 <__aeabi_dadd+0x61c>)
   14508:	0017      	movs	r7, r2
   1450a:	401c      	ands	r4, r3
   1450c:	0006      	movs	r6, r0
   1450e:	e669      	b.n	141e4 <__aeabi_dadd+0x108>
   14510:	0020      	movs	r0, r4
   14512:	4338      	orrs	r0, r7
   14514:	2e00      	cmp	r6, #0
   14516:	d1d1      	bne.n	144bc <__aeabi_dadd+0x3e0>
   14518:	2800      	cmp	r0, #0
   1451a:	d15b      	bne.n	145d4 <__aeabi_dadd+0x4f8>
   1451c:	001c      	movs	r4, r3
   1451e:	4314      	orrs	r4, r2
   14520:	d100      	bne.n	14524 <__aeabi_dadd+0x448>
   14522:	e0a8      	b.n	14676 <__aeabi_dadd+0x59a>
   14524:	001c      	movs	r4, r3
   14526:	0017      	movs	r7, r2
   14528:	46d8      	mov	r8, fp
   1452a:	e65b      	b.n	141e4 <__aeabi_dadd+0x108>
   1452c:	0006      	movs	r6, r0
   1452e:	2400      	movs	r4, #0
   14530:	2700      	movs	r7, #0
   14532:	e697      	b.n	14264 <__aeabi_dadd+0x188>
   14534:	4650      	mov	r0, sl
   14536:	000b      	movs	r3, r1
   14538:	3820      	subs	r0, #32
   1453a:	40c3      	lsrs	r3, r0
   1453c:	4699      	mov	r9, r3
   1453e:	4653      	mov	r3, sl
   14540:	2b20      	cmp	r3, #32
   14542:	d100      	bne.n	14546 <__aeabi_dadd+0x46a>
   14544:	e095      	b.n	14672 <__aeabi_dadd+0x596>
   14546:	2340      	movs	r3, #64	; 0x40
   14548:	4650      	mov	r0, sl
   1454a:	1a1b      	subs	r3, r3, r0
   1454c:	4099      	lsls	r1, r3
   1454e:	430a      	orrs	r2, r1
   14550:	1e51      	subs	r1, r2, #1
   14552:	418a      	sbcs	r2, r1
   14554:	464b      	mov	r3, r9
   14556:	2100      	movs	r1, #0
   14558:	431a      	orrs	r2, r3
   1455a:	e69f      	b.n	1429c <__aeabi_dadd+0x1c0>
   1455c:	2e00      	cmp	r6, #0
   1455e:	d130      	bne.n	145c2 <__aeabi_dadd+0x4e6>
   14560:	0026      	movs	r6, r4
   14562:	433e      	orrs	r6, r7
   14564:	d067      	beq.n	14636 <__aeabi_dadd+0x55a>
   14566:	43db      	mvns	r3, r3
   14568:	469a      	mov	sl, r3
   1456a:	2b00      	cmp	r3, #0
   1456c:	d01c      	beq.n	145a8 <__aeabi_dadd+0x4cc>
   1456e:	4e61      	ldr	r6, [pc, #388]	; (146f4 <__aeabi_dadd+0x618>)
   14570:	42b0      	cmp	r0, r6
   14572:	d060      	beq.n	14636 <__aeabi_dadd+0x55a>
   14574:	4653      	mov	r3, sl
   14576:	2b38      	cmp	r3, #56	; 0x38
   14578:	dd00      	ble.n	1457c <__aeabi_dadd+0x4a0>
   1457a:	e096      	b.n	146aa <__aeabi_dadd+0x5ce>
   1457c:	2b1f      	cmp	r3, #31
   1457e:	dd00      	ble.n	14582 <__aeabi_dadd+0x4a6>
   14580:	e09f      	b.n	146c2 <__aeabi_dadd+0x5e6>
   14582:	2620      	movs	r6, #32
   14584:	1af3      	subs	r3, r6, r3
   14586:	0026      	movs	r6, r4
   14588:	409e      	lsls	r6, r3
   1458a:	469c      	mov	ip, r3
   1458c:	46b3      	mov	fp, r6
   1458e:	4653      	mov	r3, sl
   14590:	003e      	movs	r6, r7
   14592:	40de      	lsrs	r6, r3
   14594:	0033      	movs	r3, r6
   14596:	465e      	mov	r6, fp
   14598:	431e      	orrs	r6, r3
   1459a:	4663      	mov	r3, ip
   1459c:	409f      	lsls	r7, r3
   1459e:	1e7b      	subs	r3, r7, #1
   145a0:	419f      	sbcs	r7, r3
   145a2:	4653      	mov	r3, sl
   145a4:	40dc      	lsrs	r4, r3
   145a6:	4337      	orrs	r7, r6
   145a8:	18bf      	adds	r7, r7, r2
   145aa:	4297      	cmp	r7, r2
   145ac:	4192      	sbcs	r2, r2
   145ae:	1864      	adds	r4, r4, r1
   145b0:	4252      	negs	r2, r2
   145b2:	18a4      	adds	r4, r4, r2
   145b4:	0006      	movs	r6, r0
   145b6:	e678      	b.n	142aa <__aeabi_dadd+0x1ce>
   145b8:	4327      	orrs	r7, r4
   145ba:	1e7c      	subs	r4, r7, #1
   145bc:	41a7      	sbcs	r7, r4
   145be:	2400      	movs	r4, #0
   145c0:	e737      	b.n	14432 <__aeabi_dadd+0x356>
   145c2:	4e4c      	ldr	r6, [pc, #304]	; (146f4 <__aeabi_dadd+0x618>)
   145c4:	42b0      	cmp	r0, r6
   145c6:	d036      	beq.n	14636 <__aeabi_dadd+0x55a>
   145c8:	2680      	movs	r6, #128	; 0x80
   145ca:	425b      	negs	r3, r3
   145cc:	0436      	lsls	r6, r6, #16
   145ce:	469a      	mov	sl, r3
   145d0:	4334      	orrs	r4, r6
   145d2:	e7cf      	b.n	14574 <__aeabi_dadd+0x498>
   145d4:	0018      	movs	r0, r3
   145d6:	4310      	orrs	r0, r2
   145d8:	d100      	bne.n	145dc <__aeabi_dadd+0x500>
   145da:	e603      	b.n	141e4 <__aeabi_dadd+0x108>
   145dc:	1ab8      	subs	r0, r7, r2
   145de:	4684      	mov	ip, r0
   145e0:	4567      	cmp	r7, ip
   145e2:	41ad      	sbcs	r5, r5
   145e4:	1ae0      	subs	r0, r4, r3
   145e6:	426d      	negs	r5, r5
   145e8:	1b40      	subs	r0, r0, r5
   145ea:	0205      	lsls	r5, r0, #8
   145ec:	d400      	bmi.n	145f0 <__aeabi_dadd+0x514>
   145ee:	e62c      	b.n	1424a <__aeabi_dadd+0x16e>
   145f0:	1bd7      	subs	r7, r2, r7
   145f2:	42ba      	cmp	r2, r7
   145f4:	4192      	sbcs	r2, r2
   145f6:	1b1c      	subs	r4, r3, r4
   145f8:	4252      	negs	r2, r2
   145fa:	1aa4      	subs	r4, r4, r2
   145fc:	46d8      	mov	r8, fp
   145fe:	e5f1      	b.n	141e4 <__aeabi_dadd+0x108>
   14600:	0018      	movs	r0, r3
   14602:	4310      	orrs	r0, r2
   14604:	d100      	bne.n	14608 <__aeabi_dadd+0x52c>
   14606:	e763      	b.n	144d0 <__aeabi_dadd+0x3f4>
   14608:	08f8      	lsrs	r0, r7, #3
   1460a:	0767      	lsls	r7, r4, #29
   1460c:	4307      	orrs	r7, r0
   1460e:	2080      	movs	r0, #128	; 0x80
   14610:	08e4      	lsrs	r4, r4, #3
   14612:	0300      	lsls	r0, r0, #12
   14614:	4204      	tst	r4, r0
   14616:	d008      	beq.n	1462a <__aeabi_dadd+0x54e>
   14618:	08dd      	lsrs	r5, r3, #3
   1461a:	4205      	tst	r5, r0
   1461c:	d105      	bne.n	1462a <__aeabi_dadd+0x54e>
   1461e:	08d2      	lsrs	r2, r2, #3
   14620:	0759      	lsls	r1, r3, #29
   14622:	4311      	orrs	r1, r2
   14624:	000f      	movs	r7, r1
   14626:	002c      	movs	r4, r5
   14628:	46d8      	mov	r8, fp
   1462a:	0f7b      	lsrs	r3, r7, #29
   1462c:	00e4      	lsls	r4, r4, #3
   1462e:	431c      	orrs	r4, r3
   14630:	00ff      	lsls	r7, r7, #3
   14632:	4e30      	ldr	r6, [pc, #192]	; (146f4 <__aeabi_dadd+0x618>)
   14634:	e5d6      	b.n	141e4 <__aeabi_dadd+0x108>
   14636:	000c      	movs	r4, r1
   14638:	0017      	movs	r7, r2
   1463a:	0006      	movs	r6, r0
   1463c:	e5d2      	b.n	141e4 <__aeabi_dadd+0x108>
   1463e:	2b00      	cmp	r3, #0
   14640:	d038      	beq.n	146b4 <__aeabi_dadd+0x5d8>
   14642:	000b      	movs	r3, r1
   14644:	4313      	orrs	r3, r2
   14646:	d100      	bne.n	1464a <__aeabi_dadd+0x56e>
   14648:	e742      	b.n	144d0 <__aeabi_dadd+0x3f4>
   1464a:	08f8      	lsrs	r0, r7, #3
   1464c:	0767      	lsls	r7, r4, #29
   1464e:	4307      	orrs	r7, r0
   14650:	2080      	movs	r0, #128	; 0x80
   14652:	08e4      	lsrs	r4, r4, #3
   14654:	0300      	lsls	r0, r0, #12
   14656:	4204      	tst	r4, r0
   14658:	d0e7      	beq.n	1462a <__aeabi_dadd+0x54e>
   1465a:	08cb      	lsrs	r3, r1, #3
   1465c:	4203      	tst	r3, r0
   1465e:	d1e4      	bne.n	1462a <__aeabi_dadd+0x54e>
   14660:	08d2      	lsrs	r2, r2, #3
   14662:	0749      	lsls	r1, r1, #29
   14664:	4311      	orrs	r1, r2
   14666:	000f      	movs	r7, r1
   14668:	001c      	movs	r4, r3
   1466a:	e7de      	b.n	1462a <__aeabi_dadd+0x54e>
   1466c:	2700      	movs	r7, #0
   1466e:	2400      	movs	r4, #0
   14670:	e5d5      	b.n	1421e <__aeabi_dadd+0x142>
   14672:	2100      	movs	r1, #0
   14674:	e76b      	b.n	1454e <__aeabi_dadd+0x472>
   14676:	2500      	movs	r5, #0
   14678:	2700      	movs	r7, #0
   1467a:	e5f3      	b.n	14264 <__aeabi_dadd+0x188>
   1467c:	464e      	mov	r6, r9
   1467e:	0025      	movs	r5, r4
   14680:	3e20      	subs	r6, #32
   14682:	40f5      	lsrs	r5, r6
   14684:	464b      	mov	r3, r9
   14686:	002e      	movs	r6, r5
   14688:	2b20      	cmp	r3, #32
   1468a:	d02d      	beq.n	146e8 <__aeabi_dadd+0x60c>
   1468c:	2540      	movs	r5, #64	; 0x40
   1468e:	1aed      	subs	r5, r5, r3
   14690:	40ac      	lsls	r4, r5
   14692:	4327      	orrs	r7, r4
   14694:	1e7c      	subs	r4, r7, #1
   14696:	41a7      	sbcs	r7, r4
   14698:	2400      	movs	r4, #0
   1469a:	4337      	orrs	r7, r6
   1469c:	e6c9      	b.n	14432 <__aeabi_dadd+0x356>
   1469e:	2480      	movs	r4, #128	; 0x80
   146a0:	2500      	movs	r5, #0
   146a2:	0324      	lsls	r4, r4, #12
   146a4:	4e13      	ldr	r6, [pc, #76]	; (146f4 <__aeabi_dadd+0x618>)
   146a6:	2700      	movs	r7, #0
   146a8:	e5dc      	b.n	14264 <__aeabi_dadd+0x188>
   146aa:	4327      	orrs	r7, r4
   146ac:	1e7c      	subs	r4, r7, #1
   146ae:	41a7      	sbcs	r7, r4
   146b0:	2400      	movs	r4, #0
   146b2:	e779      	b.n	145a8 <__aeabi_dadd+0x4cc>
   146b4:	000c      	movs	r4, r1
   146b6:	0017      	movs	r7, r2
   146b8:	4e0e      	ldr	r6, [pc, #56]	; (146f4 <__aeabi_dadd+0x618>)
   146ba:	e593      	b.n	141e4 <__aeabi_dadd+0x108>
   146bc:	000c      	movs	r4, r1
   146be:	0017      	movs	r7, r2
   146c0:	e590      	b.n	141e4 <__aeabi_dadd+0x108>
   146c2:	4656      	mov	r6, sl
   146c4:	0023      	movs	r3, r4
   146c6:	3e20      	subs	r6, #32
   146c8:	40f3      	lsrs	r3, r6
   146ca:	4699      	mov	r9, r3
   146cc:	4653      	mov	r3, sl
   146ce:	2b20      	cmp	r3, #32
   146d0:	d00e      	beq.n	146f0 <__aeabi_dadd+0x614>
   146d2:	2340      	movs	r3, #64	; 0x40
   146d4:	4656      	mov	r6, sl
   146d6:	1b9b      	subs	r3, r3, r6
   146d8:	409c      	lsls	r4, r3
   146da:	4327      	orrs	r7, r4
   146dc:	1e7c      	subs	r4, r7, #1
   146de:	41a7      	sbcs	r7, r4
   146e0:	464b      	mov	r3, r9
   146e2:	2400      	movs	r4, #0
   146e4:	431f      	orrs	r7, r3
   146e6:	e75f      	b.n	145a8 <__aeabi_dadd+0x4cc>
   146e8:	2400      	movs	r4, #0
   146ea:	e7d2      	b.n	14692 <__aeabi_dadd+0x5b6>
   146ec:	0017      	movs	r7, r2
   146ee:	e5b2      	b.n	14256 <__aeabi_dadd+0x17a>
   146f0:	2400      	movs	r4, #0
   146f2:	e7f2      	b.n	146da <__aeabi_dadd+0x5fe>
   146f4:	000007ff 	.word	0x000007ff
   146f8:	ff7fffff 	.word	0xff7fffff

000146fc <__aeabi_ddiv>:
   146fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   146fe:	4657      	mov	r7, sl
   14700:	4645      	mov	r5, r8
   14702:	46de      	mov	lr, fp
   14704:	464e      	mov	r6, r9
   14706:	b5e0      	push	{r5, r6, r7, lr}
   14708:	004c      	lsls	r4, r1, #1
   1470a:	030e      	lsls	r6, r1, #12
   1470c:	b087      	sub	sp, #28
   1470e:	4683      	mov	fp, r0
   14710:	4692      	mov	sl, r2
   14712:	001d      	movs	r5, r3
   14714:	4680      	mov	r8, r0
   14716:	0b36      	lsrs	r6, r6, #12
   14718:	0d64      	lsrs	r4, r4, #21
   1471a:	0fcf      	lsrs	r7, r1, #31
   1471c:	2c00      	cmp	r4, #0
   1471e:	d04f      	beq.n	147c0 <__aeabi_ddiv+0xc4>
   14720:	4b6f      	ldr	r3, [pc, #444]	; (148e0 <__aeabi_ddiv+0x1e4>)
   14722:	429c      	cmp	r4, r3
   14724:	d035      	beq.n	14792 <__aeabi_ddiv+0x96>
   14726:	2380      	movs	r3, #128	; 0x80
   14728:	0f42      	lsrs	r2, r0, #29
   1472a:	041b      	lsls	r3, r3, #16
   1472c:	00f6      	lsls	r6, r6, #3
   1472e:	4313      	orrs	r3, r2
   14730:	4333      	orrs	r3, r6
   14732:	4699      	mov	r9, r3
   14734:	00c3      	lsls	r3, r0, #3
   14736:	4698      	mov	r8, r3
   14738:	4b6a      	ldr	r3, [pc, #424]	; (148e4 <__aeabi_ddiv+0x1e8>)
   1473a:	2600      	movs	r6, #0
   1473c:	469c      	mov	ip, r3
   1473e:	2300      	movs	r3, #0
   14740:	4464      	add	r4, ip
   14742:	9303      	str	r3, [sp, #12]
   14744:	032b      	lsls	r3, r5, #12
   14746:	0b1b      	lsrs	r3, r3, #12
   14748:	469b      	mov	fp, r3
   1474a:	006b      	lsls	r3, r5, #1
   1474c:	0fed      	lsrs	r5, r5, #31
   1474e:	4650      	mov	r0, sl
   14750:	0d5b      	lsrs	r3, r3, #21
   14752:	9501      	str	r5, [sp, #4]
   14754:	d05e      	beq.n	14814 <__aeabi_ddiv+0x118>
   14756:	4a62      	ldr	r2, [pc, #392]	; (148e0 <__aeabi_ddiv+0x1e4>)
   14758:	4293      	cmp	r3, r2
   1475a:	d053      	beq.n	14804 <__aeabi_ddiv+0x108>
   1475c:	465a      	mov	r2, fp
   1475e:	00d1      	lsls	r1, r2, #3
   14760:	2280      	movs	r2, #128	; 0x80
   14762:	0f40      	lsrs	r0, r0, #29
   14764:	0412      	lsls	r2, r2, #16
   14766:	4302      	orrs	r2, r0
   14768:	430a      	orrs	r2, r1
   1476a:	4693      	mov	fp, r2
   1476c:	4652      	mov	r2, sl
   1476e:	00d1      	lsls	r1, r2, #3
   14770:	4a5c      	ldr	r2, [pc, #368]	; (148e4 <__aeabi_ddiv+0x1e8>)
   14772:	4694      	mov	ip, r2
   14774:	2200      	movs	r2, #0
   14776:	4463      	add	r3, ip
   14778:	0038      	movs	r0, r7
   1477a:	4068      	eors	r0, r5
   1477c:	4684      	mov	ip, r0
   1477e:	9002      	str	r0, [sp, #8]
   14780:	1ae4      	subs	r4, r4, r3
   14782:	4316      	orrs	r6, r2
   14784:	2e0f      	cmp	r6, #15
   14786:	d900      	bls.n	1478a <__aeabi_ddiv+0x8e>
   14788:	e0b4      	b.n	148f4 <__aeabi_ddiv+0x1f8>
   1478a:	4b57      	ldr	r3, [pc, #348]	; (148e8 <__aeabi_ddiv+0x1ec>)
   1478c:	00b6      	lsls	r6, r6, #2
   1478e:	599b      	ldr	r3, [r3, r6]
   14790:	469f      	mov	pc, r3
   14792:	0003      	movs	r3, r0
   14794:	4333      	orrs	r3, r6
   14796:	4699      	mov	r9, r3
   14798:	d16c      	bne.n	14874 <__aeabi_ddiv+0x178>
   1479a:	2300      	movs	r3, #0
   1479c:	4698      	mov	r8, r3
   1479e:	3302      	adds	r3, #2
   147a0:	2608      	movs	r6, #8
   147a2:	9303      	str	r3, [sp, #12]
   147a4:	e7ce      	b.n	14744 <__aeabi_ddiv+0x48>
   147a6:	46cb      	mov	fp, r9
   147a8:	4641      	mov	r1, r8
   147aa:	9a03      	ldr	r2, [sp, #12]
   147ac:	9701      	str	r7, [sp, #4]
   147ae:	2a02      	cmp	r2, #2
   147b0:	d165      	bne.n	1487e <__aeabi_ddiv+0x182>
   147b2:	9b01      	ldr	r3, [sp, #4]
   147b4:	4c4a      	ldr	r4, [pc, #296]	; (148e0 <__aeabi_ddiv+0x1e4>)
   147b6:	469c      	mov	ip, r3
   147b8:	2300      	movs	r3, #0
   147ba:	2200      	movs	r2, #0
   147bc:	4698      	mov	r8, r3
   147be:	e06b      	b.n	14898 <__aeabi_ddiv+0x19c>
   147c0:	0003      	movs	r3, r0
   147c2:	4333      	orrs	r3, r6
   147c4:	4699      	mov	r9, r3
   147c6:	d04e      	beq.n	14866 <__aeabi_ddiv+0x16a>
   147c8:	2e00      	cmp	r6, #0
   147ca:	d100      	bne.n	147ce <__aeabi_ddiv+0xd2>
   147cc:	e1bc      	b.n	14b48 <__aeabi_ddiv+0x44c>
   147ce:	0030      	movs	r0, r6
   147d0:	f001 f9e8 	bl	15ba4 <__clzsi2>
   147d4:	0003      	movs	r3, r0
   147d6:	3b0b      	subs	r3, #11
   147d8:	2b1c      	cmp	r3, #28
   147da:	dd00      	ble.n	147de <__aeabi_ddiv+0xe2>
   147dc:	e1ac      	b.n	14b38 <__aeabi_ddiv+0x43c>
   147de:	221d      	movs	r2, #29
   147e0:	1ad3      	subs	r3, r2, r3
   147e2:	465a      	mov	r2, fp
   147e4:	0001      	movs	r1, r0
   147e6:	40da      	lsrs	r2, r3
   147e8:	3908      	subs	r1, #8
   147ea:	408e      	lsls	r6, r1
   147ec:	0013      	movs	r3, r2
   147ee:	4333      	orrs	r3, r6
   147f0:	4699      	mov	r9, r3
   147f2:	465b      	mov	r3, fp
   147f4:	408b      	lsls	r3, r1
   147f6:	4698      	mov	r8, r3
   147f8:	2300      	movs	r3, #0
   147fa:	4c3c      	ldr	r4, [pc, #240]	; (148ec <__aeabi_ddiv+0x1f0>)
   147fc:	2600      	movs	r6, #0
   147fe:	1a24      	subs	r4, r4, r0
   14800:	9303      	str	r3, [sp, #12]
   14802:	e79f      	b.n	14744 <__aeabi_ddiv+0x48>
   14804:	4651      	mov	r1, sl
   14806:	465a      	mov	r2, fp
   14808:	4311      	orrs	r1, r2
   1480a:	d129      	bne.n	14860 <__aeabi_ddiv+0x164>
   1480c:	2200      	movs	r2, #0
   1480e:	4693      	mov	fp, r2
   14810:	3202      	adds	r2, #2
   14812:	e7b1      	b.n	14778 <__aeabi_ddiv+0x7c>
   14814:	4659      	mov	r1, fp
   14816:	4301      	orrs	r1, r0
   14818:	d01e      	beq.n	14858 <__aeabi_ddiv+0x15c>
   1481a:	465b      	mov	r3, fp
   1481c:	2b00      	cmp	r3, #0
   1481e:	d100      	bne.n	14822 <__aeabi_ddiv+0x126>
   14820:	e19e      	b.n	14b60 <__aeabi_ddiv+0x464>
   14822:	4658      	mov	r0, fp
   14824:	f001 f9be 	bl	15ba4 <__clzsi2>
   14828:	0003      	movs	r3, r0
   1482a:	3b0b      	subs	r3, #11
   1482c:	2b1c      	cmp	r3, #28
   1482e:	dd00      	ble.n	14832 <__aeabi_ddiv+0x136>
   14830:	e18f      	b.n	14b52 <__aeabi_ddiv+0x456>
   14832:	0002      	movs	r2, r0
   14834:	4659      	mov	r1, fp
   14836:	3a08      	subs	r2, #8
   14838:	4091      	lsls	r1, r2
   1483a:	468b      	mov	fp, r1
   1483c:	211d      	movs	r1, #29
   1483e:	1acb      	subs	r3, r1, r3
   14840:	4651      	mov	r1, sl
   14842:	40d9      	lsrs	r1, r3
   14844:	000b      	movs	r3, r1
   14846:	4659      	mov	r1, fp
   14848:	430b      	orrs	r3, r1
   1484a:	4651      	mov	r1, sl
   1484c:	469b      	mov	fp, r3
   1484e:	4091      	lsls	r1, r2
   14850:	4b26      	ldr	r3, [pc, #152]	; (148ec <__aeabi_ddiv+0x1f0>)
   14852:	2200      	movs	r2, #0
   14854:	1a1b      	subs	r3, r3, r0
   14856:	e78f      	b.n	14778 <__aeabi_ddiv+0x7c>
   14858:	2300      	movs	r3, #0
   1485a:	2201      	movs	r2, #1
   1485c:	469b      	mov	fp, r3
   1485e:	e78b      	b.n	14778 <__aeabi_ddiv+0x7c>
   14860:	4651      	mov	r1, sl
   14862:	2203      	movs	r2, #3
   14864:	e788      	b.n	14778 <__aeabi_ddiv+0x7c>
   14866:	2300      	movs	r3, #0
   14868:	4698      	mov	r8, r3
   1486a:	3301      	adds	r3, #1
   1486c:	2604      	movs	r6, #4
   1486e:	2400      	movs	r4, #0
   14870:	9303      	str	r3, [sp, #12]
   14872:	e767      	b.n	14744 <__aeabi_ddiv+0x48>
   14874:	2303      	movs	r3, #3
   14876:	46b1      	mov	r9, r6
   14878:	9303      	str	r3, [sp, #12]
   1487a:	260c      	movs	r6, #12
   1487c:	e762      	b.n	14744 <__aeabi_ddiv+0x48>
   1487e:	2a03      	cmp	r2, #3
   14880:	d100      	bne.n	14884 <__aeabi_ddiv+0x188>
   14882:	e25c      	b.n	14d3e <__aeabi_ddiv+0x642>
   14884:	9b01      	ldr	r3, [sp, #4]
   14886:	2a01      	cmp	r2, #1
   14888:	d000      	beq.n	1488c <__aeabi_ddiv+0x190>
   1488a:	e1e4      	b.n	14c56 <__aeabi_ddiv+0x55a>
   1488c:	4013      	ands	r3, r2
   1488e:	469c      	mov	ip, r3
   14890:	2300      	movs	r3, #0
   14892:	2400      	movs	r4, #0
   14894:	2200      	movs	r2, #0
   14896:	4698      	mov	r8, r3
   14898:	2100      	movs	r1, #0
   1489a:	0312      	lsls	r2, r2, #12
   1489c:	0b13      	lsrs	r3, r2, #12
   1489e:	0d0a      	lsrs	r2, r1, #20
   148a0:	0512      	lsls	r2, r2, #20
   148a2:	431a      	orrs	r2, r3
   148a4:	0523      	lsls	r3, r4, #20
   148a6:	4c12      	ldr	r4, [pc, #72]	; (148f0 <__aeabi_ddiv+0x1f4>)
   148a8:	4640      	mov	r0, r8
   148aa:	4022      	ands	r2, r4
   148ac:	4313      	orrs	r3, r2
   148ae:	4662      	mov	r2, ip
   148b0:	005b      	lsls	r3, r3, #1
   148b2:	07d2      	lsls	r2, r2, #31
   148b4:	085b      	lsrs	r3, r3, #1
   148b6:	4313      	orrs	r3, r2
   148b8:	0019      	movs	r1, r3
   148ba:	b007      	add	sp, #28
   148bc:	bc3c      	pop	{r2, r3, r4, r5}
   148be:	4690      	mov	r8, r2
   148c0:	4699      	mov	r9, r3
   148c2:	46a2      	mov	sl, r4
   148c4:	46ab      	mov	fp, r5
   148c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   148c8:	2300      	movs	r3, #0
   148ca:	2280      	movs	r2, #128	; 0x80
   148cc:	469c      	mov	ip, r3
   148ce:	0312      	lsls	r2, r2, #12
   148d0:	4698      	mov	r8, r3
   148d2:	4c03      	ldr	r4, [pc, #12]	; (148e0 <__aeabi_ddiv+0x1e4>)
   148d4:	e7e0      	b.n	14898 <__aeabi_ddiv+0x19c>
   148d6:	2300      	movs	r3, #0
   148d8:	4c01      	ldr	r4, [pc, #4]	; (148e0 <__aeabi_ddiv+0x1e4>)
   148da:	2200      	movs	r2, #0
   148dc:	4698      	mov	r8, r3
   148de:	e7db      	b.n	14898 <__aeabi_ddiv+0x19c>
   148e0:	000007ff 	.word	0x000007ff
   148e4:	fffffc01 	.word	0xfffffc01
   148e8:	0001de5c 	.word	0x0001de5c
   148ec:	fffffc0d 	.word	0xfffffc0d
   148f0:	800fffff 	.word	0x800fffff
   148f4:	45d9      	cmp	r9, fp
   148f6:	d900      	bls.n	148fa <__aeabi_ddiv+0x1fe>
   148f8:	e139      	b.n	14b6e <__aeabi_ddiv+0x472>
   148fa:	d100      	bne.n	148fe <__aeabi_ddiv+0x202>
   148fc:	e134      	b.n	14b68 <__aeabi_ddiv+0x46c>
   148fe:	2300      	movs	r3, #0
   14900:	4646      	mov	r6, r8
   14902:	464d      	mov	r5, r9
   14904:	469a      	mov	sl, r3
   14906:	3c01      	subs	r4, #1
   14908:	465b      	mov	r3, fp
   1490a:	0e0a      	lsrs	r2, r1, #24
   1490c:	021b      	lsls	r3, r3, #8
   1490e:	431a      	orrs	r2, r3
   14910:	020b      	lsls	r3, r1, #8
   14912:	0c17      	lsrs	r7, r2, #16
   14914:	9303      	str	r3, [sp, #12]
   14916:	0413      	lsls	r3, r2, #16
   14918:	0c1b      	lsrs	r3, r3, #16
   1491a:	0039      	movs	r1, r7
   1491c:	0028      	movs	r0, r5
   1491e:	4690      	mov	r8, r2
   14920:	9301      	str	r3, [sp, #4]
   14922:	f7fe f9f5 	bl	12d10 <__udivsi3>
   14926:	0002      	movs	r2, r0
   14928:	9b01      	ldr	r3, [sp, #4]
   1492a:	4683      	mov	fp, r0
   1492c:	435a      	muls	r2, r3
   1492e:	0028      	movs	r0, r5
   14930:	0039      	movs	r1, r7
   14932:	4691      	mov	r9, r2
   14934:	f7fe fa72 	bl	12e1c <__aeabi_uidivmod>
   14938:	0c35      	lsrs	r5, r6, #16
   1493a:	0409      	lsls	r1, r1, #16
   1493c:	430d      	orrs	r5, r1
   1493e:	45a9      	cmp	r9, r5
   14940:	d90d      	bls.n	1495e <__aeabi_ddiv+0x262>
   14942:	465b      	mov	r3, fp
   14944:	4445      	add	r5, r8
   14946:	3b01      	subs	r3, #1
   14948:	45a8      	cmp	r8, r5
   1494a:	d900      	bls.n	1494e <__aeabi_ddiv+0x252>
   1494c:	e13a      	b.n	14bc4 <__aeabi_ddiv+0x4c8>
   1494e:	45a9      	cmp	r9, r5
   14950:	d800      	bhi.n	14954 <__aeabi_ddiv+0x258>
   14952:	e137      	b.n	14bc4 <__aeabi_ddiv+0x4c8>
   14954:	2302      	movs	r3, #2
   14956:	425b      	negs	r3, r3
   14958:	469c      	mov	ip, r3
   1495a:	4445      	add	r5, r8
   1495c:	44e3      	add	fp, ip
   1495e:	464b      	mov	r3, r9
   14960:	1aeb      	subs	r3, r5, r3
   14962:	0039      	movs	r1, r7
   14964:	0018      	movs	r0, r3
   14966:	9304      	str	r3, [sp, #16]
   14968:	f7fe f9d2 	bl	12d10 <__udivsi3>
   1496c:	9b01      	ldr	r3, [sp, #4]
   1496e:	0005      	movs	r5, r0
   14970:	4343      	muls	r3, r0
   14972:	0039      	movs	r1, r7
   14974:	9804      	ldr	r0, [sp, #16]
   14976:	4699      	mov	r9, r3
   14978:	f7fe fa50 	bl	12e1c <__aeabi_uidivmod>
   1497c:	0433      	lsls	r3, r6, #16
   1497e:	0409      	lsls	r1, r1, #16
   14980:	0c1b      	lsrs	r3, r3, #16
   14982:	430b      	orrs	r3, r1
   14984:	4599      	cmp	r9, r3
   14986:	d909      	bls.n	1499c <__aeabi_ddiv+0x2a0>
   14988:	4443      	add	r3, r8
   1498a:	1e6a      	subs	r2, r5, #1
   1498c:	4598      	cmp	r8, r3
   1498e:	d900      	bls.n	14992 <__aeabi_ddiv+0x296>
   14990:	e11a      	b.n	14bc8 <__aeabi_ddiv+0x4cc>
   14992:	4599      	cmp	r9, r3
   14994:	d800      	bhi.n	14998 <__aeabi_ddiv+0x29c>
   14996:	e117      	b.n	14bc8 <__aeabi_ddiv+0x4cc>
   14998:	3d02      	subs	r5, #2
   1499a:	4443      	add	r3, r8
   1499c:	464a      	mov	r2, r9
   1499e:	1a9b      	subs	r3, r3, r2
   149a0:	465a      	mov	r2, fp
   149a2:	0412      	lsls	r2, r2, #16
   149a4:	432a      	orrs	r2, r5
   149a6:	9903      	ldr	r1, [sp, #12]
   149a8:	4693      	mov	fp, r2
   149aa:	0c10      	lsrs	r0, r2, #16
   149ac:	0c0a      	lsrs	r2, r1, #16
   149ae:	4691      	mov	r9, r2
   149b0:	0409      	lsls	r1, r1, #16
   149b2:	465a      	mov	r2, fp
   149b4:	0c09      	lsrs	r1, r1, #16
   149b6:	464e      	mov	r6, r9
   149b8:	000d      	movs	r5, r1
   149ba:	0412      	lsls	r2, r2, #16
   149bc:	0c12      	lsrs	r2, r2, #16
   149be:	4345      	muls	r5, r0
   149c0:	9105      	str	r1, [sp, #20]
   149c2:	4351      	muls	r1, r2
   149c4:	4372      	muls	r2, r6
   149c6:	4370      	muls	r0, r6
   149c8:	1952      	adds	r2, r2, r5
   149ca:	0c0e      	lsrs	r6, r1, #16
   149cc:	18b2      	adds	r2, r6, r2
   149ce:	4295      	cmp	r5, r2
   149d0:	d903      	bls.n	149da <__aeabi_ddiv+0x2de>
   149d2:	2580      	movs	r5, #128	; 0x80
   149d4:	026d      	lsls	r5, r5, #9
   149d6:	46ac      	mov	ip, r5
   149d8:	4460      	add	r0, ip
   149da:	0c15      	lsrs	r5, r2, #16
   149dc:	0409      	lsls	r1, r1, #16
   149de:	0412      	lsls	r2, r2, #16
   149e0:	0c09      	lsrs	r1, r1, #16
   149e2:	1828      	adds	r0, r5, r0
   149e4:	1852      	adds	r2, r2, r1
   149e6:	4283      	cmp	r3, r0
   149e8:	d200      	bcs.n	149ec <__aeabi_ddiv+0x2f0>
   149ea:	e0ce      	b.n	14b8a <__aeabi_ddiv+0x48e>
   149ec:	d100      	bne.n	149f0 <__aeabi_ddiv+0x2f4>
   149ee:	e0c8      	b.n	14b82 <__aeabi_ddiv+0x486>
   149f0:	1a1d      	subs	r5, r3, r0
   149f2:	4653      	mov	r3, sl
   149f4:	1a9e      	subs	r6, r3, r2
   149f6:	45b2      	cmp	sl, r6
   149f8:	4192      	sbcs	r2, r2
   149fa:	4252      	negs	r2, r2
   149fc:	1aab      	subs	r3, r5, r2
   149fe:	469a      	mov	sl, r3
   14a00:	4598      	cmp	r8, r3
   14a02:	d100      	bne.n	14a06 <__aeabi_ddiv+0x30a>
   14a04:	e117      	b.n	14c36 <__aeabi_ddiv+0x53a>
   14a06:	0039      	movs	r1, r7
   14a08:	0018      	movs	r0, r3
   14a0a:	f7fe f981 	bl	12d10 <__udivsi3>
   14a0e:	9b01      	ldr	r3, [sp, #4]
   14a10:	0005      	movs	r5, r0
   14a12:	4343      	muls	r3, r0
   14a14:	0039      	movs	r1, r7
   14a16:	4650      	mov	r0, sl
   14a18:	9304      	str	r3, [sp, #16]
   14a1a:	f7fe f9ff 	bl	12e1c <__aeabi_uidivmod>
   14a1e:	9804      	ldr	r0, [sp, #16]
   14a20:	040b      	lsls	r3, r1, #16
   14a22:	0c31      	lsrs	r1, r6, #16
   14a24:	4319      	orrs	r1, r3
   14a26:	4288      	cmp	r0, r1
   14a28:	d909      	bls.n	14a3e <__aeabi_ddiv+0x342>
   14a2a:	4441      	add	r1, r8
   14a2c:	1e6b      	subs	r3, r5, #1
   14a2e:	4588      	cmp	r8, r1
   14a30:	d900      	bls.n	14a34 <__aeabi_ddiv+0x338>
   14a32:	e107      	b.n	14c44 <__aeabi_ddiv+0x548>
   14a34:	4288      	cmp	r0, r1
   14a36:	d800      	bhi.n	14a3a <__aeabi_ddiv+0x33e>
   14a38:	e104      	b.n	14c44 <__aeabi_ddiv+0x548>
   14a3a:	3d02      	subs	r5, #2
   14a3c:	4441      	add	r1, r8
   14a3e:	9b04      	ldr	r3, [sp, #16]
   14a40:	1acb      	subs	r3, r1, r3
   14a42:	0018      	movs	r0, r3
   14a44:	0039      	movs	r1, r7
   14a46:	9304      	str	r3, [sp, #16]
   14a48:	f7fe f962 	bl	12d10 <__udivsi3>
   14a4c:	9b01      	ldr	r3, [sp, #4]
   14a4e:	4682      	mov	sl, r0
   14a50:	4343      	muls	r3, r0
   14a52:	0039      	movs	r1, r7
   14a54:	9804      	ldr	r0, [sp, #16]
   14a56:	9301      	str	r3, [sp, #4]
   14a58:	f7fe f9e0 	bl	12e1c <__aeabi_uidivmod>
   14a5c:	9801      	ldr	r0, [sp, #4]
   14a5e:	040b      	lsls	r3, r1, #16
   14a60:	0431      	lsls	r1, r6, #16
   14a62:	0c09      	lsrs	r1, r1, #16
   14a64:	4319      	orrs	r1, r3
   14a66:	4288      	cmp	r0, r1
   14a68:	d90d      	bls.n	14a86 <__aeabi_ddiv+0x38a>
   14a6a:	4653      	mov	r3, sl
   14a6c:	4441      	add	r1, r8
   14a6e:	3b01      	subs	r3, #1
   14a70:	4588      	cmp	r8, r1
   14a72:	d900      	bls.n	14a76 <__aeabi_ddiv+0x37a>
   14a74:	e0e8      	b.n	14c48 <__aeabi_ddiv+0x54c>
   14a76:	4288      	cmp	r0, r1
   14a78:	d800      	bhi.n	14a7c <__aeabi_ddiv+0x380>
   14a7a:	e0e5      	b.n	14c48 <__aeabi_ddiv+0x54c>
   14a7c:	2302      	movs	r3, #2
   14a7e:	425b      	negs	r3, r3
   14a80:	469c      	mov	ip, r3
   14a82:	4441      	add	r1, r8
   14a84:	44e2      	add	sl, ip
   14a86:	9b01      	ldr	r3, [sp, #4]
   14a88:	042d      	lsls	r5, r5, #16
   14a8a:	1ace      	subs	r6, r1, r3
   14a8c:	4651      	mov	r1, sl
   14a8e:	4329      	orrs	r1, r5
   14a90:	9d05      	ldr	r5, [sp, #20]
   14a92:	464f      	mov	r7, r9
   14a94:	002a      	movs	r2, r5
   14a96:	040b      	lsls	r3, r1, #16
   14a98:	0c08      	lsrs	r0, r1, #16
   14a9a:	0c1b      	lsrs	r3, r3, #16
   14a9c:	435a      	muls	r2, r3
   14a9e:	4345      	muls	r5, r0
   14aa0:	437b      	muls	r3, r7
   14aa2:	4378      	muls	r0, r7
   14aa4:	195b      	adds	r3, r3, r5
   14aa6:	0c17      	lsrs	r7, r2, #16
   14aa8:	18fb      	adds	r3, r7, r3
   14aaa:	429d      	cmp	r5, r3
   14aac:	d903      	bls.n	14ab6 <__aeabi_ddiv+0x3ba>
   14aae:	2580      	movs	r5, #128	; 0x80
   14ab0:	026d      	lsls	r5, r5, #9
   14ab2:	46ac      	mov	ip, r5
   14ab4:	4460      	add	r0, ip
   14ab6:	0c1d      	lsrs	r5, r3, #16
   14ab8:	0412      	lsls	r2, r2, #16
   14aba:	041b      	lsls	r3, r3, #16
   14abc:	0c12      	lsrs	r2, r2, #16
   14abe:	1828      	adds	r0, r5, r0
   14ac0:	189b      	adds	r3, r3, r2
   14ac2:	4286      	cmp	r6, r0
   14ac4:	d200      	bcs.n	14ac8 <__aeabi_ddiv+0x3cc>
   14ac6:	e093      	b.n	14bf0 <__aeabi_ddiv+0x4f4>
   14ac8:	d100      	bne.n	14acc <__aeabi_ddiv+0x3d0>
   14aca:	e08e      	b.n	14bea <__aeabi_ddiv+0x4ee>
   14acc:	2301      	movs	r3, #1
   14ace:	4319      	orrs	r1, r3
   14ad0:	4ba0      	ldr	r3, [pc, #640]	; (14d54 <__aeabi_ddiv+0x658>)
   14ad2:	18e3      	adds	r3, r4, r3
   14ad4:	2b00      	cmp	r3, #0
   14ad6:	dc00      	bgt.n	14ada <__aeabi_ddiv+0x3de>
   14ad8:	e099      	b.n	14c0e <__aeabi_ddiv+0x512>
   14ada:	074a      	lsls	r2, r1, #29
   14adc:	d000      	beq.n	14ae0 <__aeabi_ddiv+0x3e4>
   14ade:	e09e      	b.n	14c1e <__aeabi_ddiv+0x522>
   14ae0:	465a      	mov	r2, fp
   14ae2:	01d2      	lsls	r2, r2, #7
   14ae4:	d506      	bpl.n	14af4 <__aeabi_ddiv+0x3f8>
   14ae6:	465a      	mov	r2, fp
   14ae8:	4b9b      	ldr	r3, [pc, #620]	; (14d58 <__aeabi_ddiv+0x65c>)
   14aea:	401a      	ands	r2, r3
   14aec:	2380      	movs	r3, #128	; 0x80
   14aee:	4693      	mov	fp, r2
   14af0:	00db      	lsls	r3, r3, #3
   14af2:	18e3      	adds	r3, r4, r3
   14af4:	4a99      	ldr	r2, [pc, #612]	; (14d5c <__aeabi_ddiv+0x660>)
   14af6:	4293      	cmp	r3, r2
   14af8:	dd68      	ble.n	14bcc <__aeabi_ddiv+0x4d0>
   14afa:	2301      	movs	r3, #1
   14afc:	9a02      	ldr	r2, [sp, #8]
   14afe:	4c98      	ldr	r4, [pc, #608]	; (14d60 <__aeabi_ddiv+0x664>)
   14b00:	401a      	ands	r2, r3
   14b02:	2300      	movs	r3, #0
   14b04:	4694      	mov	ip, r2
   14b06:	4698      	mov	r8, r3
   14b08:	2200      	movs	r2, #0
   14b0a:	e6c5      	b.n	14898 <__aeabi_ddiv+0x19c>
   14b0c:	2280      	movs	r2, #128	; 0x80
   14b0e:	464b      	mov	r3, r9
   14b10:	0312      	lsls	r2, r2, #12
   14b12:	4213      	tst	r3, r2
   14b14:	d00a      	beq.n	14b2c <__aeabi_ddiv+0x430>
   14b16:	465b      	mov	r3, fp
   14b18:	4213      	tst	r3, r2
   14b1a:	d106      	bne.n	14b2a <__aeabi_ddiv+0x42e>
   14b1c:	431a      	orrs	r2, r3
   14b1e:	0312      	lsls	r2, r2, #12
   14b20:	0b12      	lsrs	r2, r2, #12
   14b22:	46ac      	mov	ip, r5
   14b24:	4688      	mov	r8, r1
   14b26:	4c8e      	ldr	r4, [pc, #568]	; (14d60 <__aeabi_ddiv+0x664>)
   14b28:	e6b6      	b.n	14898 <__aeabi_ddiv+0x19c>
   14b2a:	464b      	mov	r3, r9
   14b2c:	431a      	orrs	r2, r3
   14b2e:	0312      	lsls	r2, r2, #12
   14b30:	0b12      	lsrs	r2, r2, #12
   14b32:	46bc      	mov	ip, r7
   14b34:	4c8a      	ldr	r4, [pc, #552]	; (14d60 <__aeabi_ddiv+0x664>)
   14b36:	e6af      	b.n	14898 <__aeabi_ddiv+0x19c>
   14b38:	0003      	movs	r3, r0
   14b3a:	465a      	mov	r2, fp
   14b3c:	3b28      	subs	r3, #40	; 0x28
   14b3e:	409a      	lsls	r2, r3
   14b40:	2300      	movs	r3, #0
   14b42:	4691      	mov	r9, r2
   14b44:	4698      	mov	r8, r3
   14b46:	e657      	b.n	147f8 <__aeabi_ddiv+0xfc>
   14b48:	4658      	mov	r0, fp
   14b4a:	f001 f82b 	bl	15ba4 <__clzsi2>
   14b4e:	3020      	adds	r0, #32
   14b50:	e640      	b.n	147d4 <__aeabi_ddiv+0xd8>
   14b52:	0003      	movs	r3, r0
   14b54:	4652      	mov	r2, sl
   14b56:	3b28      	subs	r3, #40	; 0x28
   14b58:	409a      	lsls	r2, r3
   14b5a:	2100      	movs	r1, #0
   14b5c:	4693      	mov	fp, r2
   14b5e:	e677      	b.n	14850 <__aeabi_ddiv+0x154>
   14b60:	f001 f820 	bl	15ba4 <__clzsi2>
   14b64:	3020      	adds	r0, #32
   14b66:	e65f      	b.n	14828 <__aeabi_ddiv+0x12c>
   14b68:	4588      	cmp	r8, r1
   14b6a:	d200      	bcs.n	14b6e <__aeabi_ddiv+0x472>
   14b6c:	e6c7      	b.n	148fe <__aeabi_ddiv+0x202>
   14b6e:	464b      	mov	r3, r9
   14b70:	07de      	lsls	r6, r3, #31
   14b72:	085d      	lsrs	r5, r3, #1
   14b74:	4643      	mov	r3, r8
   14b76:	085b      	lsrs	r3, r3, #1
   14b78:	431e      	orrs	r6, r3
   14b7a:	4643      	mov	r3, r8
   14b7c:	07db      	lsls	r3, r3, #31
   14b7e:	469a      	mov	sl, r3
   14b80:	e6c2      	b.n	14908 <__aeabi_ddiv+0x20c>
   14b82:	2500      	movs	r5, #0
   14b84:	4592      	cmp	sl, r2
   14b86:	d300      	bcc.n	14b8a <__aeabi_ddiv+0x48e>
   14b88:	e733      	b.n	149f2 <__aeabi_ddiv+0x2f6>
   14b8a:	9e03      	ldr	r6, [sp, #12]
   14b8c:	4659      	mov	r1, fp
   14b8e:	46b4      	mov	ip, r6
   14b90:	44e2      	add	sl, ip
   14b92:	45b2      	cmp	sl, r6
   14b94:	41ad      	sbcs	r5, r5
   14b96:	426d      	negs	r5, r5
   14b98:	4445      	add	r5, r8
   14b9a:	18eb      	adds	r3, r5, r3
   14b9c:	3901      	subs	r1, #1
   14b9e:	4598      	cmp	r8, r3
   14ba0:	d207      	bcs.n	14bb2 <__aeabi_ddiv+0x4b6>
   14ba2:	4298      	cmp	r0, r3
   14ba4:	d900      	bls.n	14ba8 <__aeabi_ddiv+0x4ac>
   14ba6:	e07f      	b.n	14ca8 <__aeabi_ddiv+0x5ac>
   14ba8:	d100      	bne.n	14bac <__aeabi_ddiv+0x4b0>
   14baa:	e0bc      	b.n	14d26 <__aeabi_ddiv+0x62a>
   14bac:	1a1d      	subs	r5, r3, r0
   14bae:	468b      	mov	fp, r1
   14bb0:	e71f      	b.n	149f2 <__aeabi_ddiv+0x2f6>
   14bb2:	4598      	cmp	r8, r3
   14bb4:	d1fa      	bne.n	14bac <__aeabi_ddiv+0x4b0>
   14bb6:	9d03      	ldr	r5, [sp, #12]
   14bb8:	4555      	cmp	r5, sl
   14bba:	d9f2      	bls.n	14ba2 <__aeabi_ddiv+0x4a6>
   14bbc:	4643      	mov	r3, r8
   14bbe:	468b      	mov	fp, r1
   14bc0:	1a1d      	subs	r5, r3, r0
   14bc2:	e716      	b.n	149f2 <__aeabi_ddiv+0x2f6>
   14bc4:	469b      	mov	fp, r3
   14bc6:	e6ca      	b.n	1495e <__aeabi_ddiv+0x262>
   14bc8:	0015      	movs	r5, r2
   14bca:	e6e7      	b.n	1499c <__aeabi_ddiv+0x2a0>
   14bcc:	465a      	mov	r2, fp
   14bce:	08c9      	lsrs	r1, r1, #3
   14bd0:	0752      	lsls	r2, r2, #29
   14bd2:	430a      	orrs	r2, r1
   14bd4:	055b      	lsls	r3, r3, #21
   14bd6:	4690      	mov	r8, r2
   14bd8:	0d5c      	lsrs	r4, r3, #21
   14bda:	465a      	mov	r2, fp
   14bdc:	2301      	movs	r3, #1
   14bde:	9902      	ldr	r1, [sp, #8]
   14be0:	0252      	lsls	r2, r2, #9
   14be2:	4019      	ands	r1, r3
   14be4:	0b12      	lsrs	r2, r2, #12
   14be6:	468c      	mov	ip, r1
   14be8:	e656      	b.n	14898 <__aeabi_ddiv+0x19c>
   14bea:	2b00      	cmp	r3, #0
   14bec:	d100      	bne.n	14bf0 <__aeabi_ddiv+0x4f4>
   14bee:	e76f      	b.n	14ad0 <__aeabi_ddiv+0x3d4>
   14bf0:	4446      	add	r6, r8
   14bf2:	1e4a      	subs	r2, r1, #1
   14bf4:	45b0      	cmp	r8, r6
   14bf6:	d929      	bls.n	14c4c <__aeabi_ddiv+0x550>
   14bf8:	0011      	movs	r1, r2
   14bfa:	4286      	cmp	r6, r0
   14bfc:	d000      	beq.n	14c00 <__aeabi_ddiv+0x504>
   14bfe:	e765      	b.n	14acc <__aeabi_ddiv+0x3d0>
   14c00:	9a03      	ldr	r2, [sp, #12]
   14c02:	4293      	cmp	r3, r2
   14c04:	d000      	beq.n	14c08 <__aeabi_ddiv+0x50c>
   14c06:	e761      	b.n	14acc <__aeabi_ddiv+0x3d0>
   14c08:	e762      	b.n	14ad0 <__aeabi_ddiv+0x3d4>
   14c0a:	2101      	movs	r1, #1
   14c0c:	4249      	negs	r1, r1
   14c0e:	2001      	movs	r0, #1
   14c10:	1ac2      	subs	r2, r0, r3
   14c12:	2a38      	cmp	r2, #56	; 0x38
   14c14:	dd21      	ble.n	14c5a <__aeabi_ddiv+0x55e>
   14c16:	9b02      	ldr	r3, [sp, #8]
   14c18:	4003      	ands	r3, r0
   14c1a:	469c      	mov	ip, r3
   14c1c:	e638      	b.n	14890 <__aeabi_ddiv+0x194>
   14c1e:	220f      	movs	r2, #15
   14c20:	400a      	ands	r2, r1
   14c22:	2a04      	cmp	r2, #4
   14c24:	d100      	bne.n	14c28 <__aeabi_ddiv+0x52c>
   14c26:	e75b      	b.n	14ae0 <__aeabi_ddiv+0x3e4>
   14c28:	000a      	movs	r2, r1
   14c2a:	1d11      	adds	r1, r2, #4
   14c2c:	4291      	cmp	r1, r2
   14c2e:	4192      	sbcs	r2, r2
   14c30:	4252      	negs	r2, r2
   14c32:	4493      	add	fp, r2
   14c34:	e754      	b.n	14ae0 <__aeabi_ddiv+0x3e4>
   14c36:	4b47      	ldr	r3, [pc, #284]	; (14d54 <__aeabi_ddiv+0x658>)
   14c38:	18e3      	adds	r3, r4, r3
   14c3a:	2b00      	cmp	r3, #0
   14c3c:	dde5      	ble.n	14c0a <__aeabi_ddiv+0x50e>
   14c3e:	2201      	movs	r2, #1
   14c40:	4252      	negs	r2, r2
   14c42:	e7f2      	b.n	14c2a <__aeabi_ddiv+0x52e>
   14c44:	001d      	movs	r5, r3
   14c46:	e6fa      	b.n	14a3e <__aeabi_ddiv+0x342>
   14c48:	469a      	mov	sl, r3
   14c4a:	e71c      	b.n	14a86 <__aeabi_ddiv+0x38a>
   14c4c:	42b0      	cmp	r0, r6
   14c4e:	d839      	bhi.n	14cc4 <__aeabi_ddiv+0x5c8>
   14c50:	d06e      	beq.n	14d30 <__aeabi_ddiv+0x634>
   14c52:	0011      	movs	r1, r2
   14c54:	e73a      	b.n	14acc <__aeabi_ddiv+0x3d0>
   14c56:	9302      	str	r3, [sp, #8]
   14c58:	e73a      	b.n	14ad0 <__aeabi_ddiv+0x3d4>
   14c5a:	2a1f      	cmp	r2, #31
   14c5c:	dc3c      	bgt.n	14cd8 <__aeabi_ddiv+0x5dc>
   14c5e:	2320      	movs	r3, #32
   14c60:	1a9b      	subs	r3, r3, r2
   14c62:	000c      	movs	r4, r1
   14c64:	4658      	mov	r0, fp
   14c66:	4099      	lsls	r1, r3
   14c68:	4098      	lsls	r0, r3
   14c6a:	1e4b      	subs	r3, r1, #1
   14c6c:	4199      	sbcs	r1, r3
   14c6e:	465b      	mov	r3, fp
   14c70:	40d4      	lsrs	r4, r2
   14c72:	40d3      	lsrs	r3, r2
   14c74:	4320      	orrs	r0, r4
   14c76:	4308      	orrs	r0, r1
   14c78:	001a      	movs	r2, r3
   14c7a:	0743      	lsls	r3, r0, #29
   14c7c:	d009      	beq.n	14c92 <__aeabi_ddiv+0x596>
   14c7e:	230f      	movs	r3, #15
   14c80:	4003      	ands	r3, r0
   14c82:	2b04      	cmp	r3, #4
   14c84:	d005      	beq.n	14c92 <__aeabi_ddiv+0x596>
   14c86:	0001      	movs	r1, r0
   14c88:	1d08      	adds	r0, r1, #4
   14c8a:	4288      	cmp	r0, r1
   14c8c:	419b      	sbcs	r3, r3
   14c8e:	425b      	negs	r3, r3
   14c90:	18d2      	adds	r2, r2, r3
   14c92:	0213      	lsls	r3, r2, #8
   14c94:	d53a      	bpl.n	14d0c <__aeabi_ddiv+0x610>
   14c96:	2301      	movs	r3, #1
   14c98:	9a02      	ldr	r2, [sp, #8]
   14c9a:	2401      	movs	r4, #1
   14c9c:	401a      	ands	r2, r3
   14c9e:	2300      	movs	r3, #0
   14ca0:	4694      	mov	ip, r2
   14ca2:	4698      	mov	r8, r3
   14ca4:	2200      	movs	r2, #0
   14ca6:	e5f7      	b.n	14898 <__aeabi_ddiv+0x19c>
   14ca8:	2102      	movs	r1, #2
   14caa:	4249      	negs	r1, r1
   14cac:	468c      	mov	ip, r1
   14cae:	9d03      	ldr	r5, [sp, #12]
   14cb0:	44e3      	add	fp, ip
   14cb2:	46ac      	mov	ip, r5
   14cb4:	44e2      	add	sl, ip
   14cb6:	45aa      	cmp	sl, r5
   14cb8:	41ad      	sbcs	r5, r5
   14cba:	426d      	negs	r5, r5
   14cbc:	4445      	add	r5, r8
   14cbe:	18ed      	adds	r5, r5, r3
   14cc0:	1a2d      	subs	r5, r5, r0
   14cc2:	e696      	b.n	149f2 <__aeabi_ddiv+0x2f6>
   14cc4:	1e8a      	subs	r2, r1, #2
   14cc6:	9903      	ldr	r1, [sp, #12]
   14cc8:	004d      	lsls	r5, r1, #1
   14cca:	428d      	cmp	r5, r1
   14ccc:	4189      	sbcs	r1, r1
   14cce:	4249      	negs	r1, r1
   14cd0:	4441      	add	r1, r8
   14cd2:	1876      	adds	r6, r6, r1
   14cd4:	9503      	str	r5, [sp, #12]
   14cd6:	e78f      	b.n	14bf8 <__aeabi_ddiv+0x4fc>
   14cd8:	201f      	movs	r0, #31
   14cda:	4240      	negs	r0, r0
   14cdc:	1ac3      	subs	r3, r0, r3
   14cde:	4658      	mov	r0, fp
   14ce0:	40d8      	lsrs	r0, r3
   14ce2:	0003      	movs	r3, r0
   14ce4:	2a20      	cmp	r2, #32
   14ce6:	d028      	beq.n	14d3a <__aeabi_ddiv+0x63e>
   14ce8:	2040      	movs	r0, #64	; 0x40
   14cea:	465d      	mov	r5, fp
   14cec:	1a82      	subs	r2, r0, r2
   14cee:	4095      	lsls	r5, r2
   14cf0:	4329      	orrs	r1, r5
   14cf2:	1e4a      	subs	r2, r1, #1
   14cf4:	4191      	sbcs	r1, r2
   14cf6:	4319      	orrs	r1, r3
   14cf8:	2307      	movs	r3, #7
   14cfa:	2200      	movs	r2, #0
   14cfc:	400b      	ands	r3, r1
   14cfe:	d009      	beq.n	14d14 <__aeabi_ddiv+0x618>
   14d00:	230f      	movs	r3, #15
   14d02:	2200      	movs	r2, #0
   14d04:	400b      	ands	r3, r1
   14d06:	0008      	movs	r0, r1
   14d08:	2b04      	cmp	r3, #4
   14d0a:	d1bd      	bne.n	14c88 <__aeabi_ddiv+0x58c>
   14d0c:	0001      	movs	r1, r0
   14d0e:	0753      	lsls	r3, r2, #29
   14d10:	0252      	lsls	r2, r2, #9
   14d12:	0b12      	lsrs	r2, r2, #12
   14d14:	08c9      	lsrs	r1, r1, #3
   14d16:	4319      	orrs	r1, r3
   14d18:	2301      	movs	r3, #1
   14d1a:	4688      	mov	r8, r1
   14d1c:	9902      	ldr	r1, [sp, #8]
   14d1e:	2400      	movs	r4, #0
   14d20:	4019      	ands	r1, r3
   14d22:	468c      	mov	ip, r1
   14d24:	e5b8      	b.n	14898 <__aeabi_ddiv+0x19c>
   14d26:	4552      	cmp	r2, sl
   14d28:	d8be      	bhi.n	14ca8 <__aeabi_ddiv+0x5ac>
   14d2a:	468b      	mov	fp, r1
   14d2c:	2500      	movs	r5, #0
   14d2e:	e660      	b.n	149f2 <__aeabi_ddiv+0x2f6>
   14d30:	9d03      	ldr	r5, [sp, #12]
   14d32:	429d      	cmp	r5, r3
   14d34:	d3c6      	bcc.n	14cc4 <__aeabi_ddiv+0x5c8>
   14d36:	0011      	movs	r1, r2
   14d38:	e762      	b.n	14c00 <__aeabi_ddiv+0x504>
   14d3a:	2500      	movs	r5, #0
   14d3c:	e7d8      	b.n	14cf0 <__aeabi_ddiv+0x5f4>
   14d3e:	2280      	movs	r2, #128	; 0x80
   14d40:	465b      	mov	r3, fp
   14d42:	0312      	lsls	r2, r2, #12
   14d44:	431a      	orrs	r2, r3
   14d46:	9b01      	ldr	r3, [sp, #4]
   14d48:	0312      	lsls	r2, r2, #12
   14d4a:	0b12      	lsrs	r2, r2, #12
   14d4c:	469c      	mov	ip, r3
   14d4e:	4688      	mov	r8, r1
   14d50:	4c03      	ldr	r4, [pc, #12]	; (14d60 <__aeabi_ddiv+0x664>)
   14d52:	e5a1      	b.n	14898 <__aeabi_ddiv+0x19c>
   14d54:	000003ff 	.word	0x000003ff
   14d58:	feffffff 	.word	0xfeffffff
   14d5c:	000007fe 	.word	0x000007fe
   14d60:	000007ff 	.word	0x000007ff

00014d64 <__aeabi_dmul>:
   14d64:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d66:	4657      	mov	r7, sl
   14d68:	4645      	mov	r5, r8
   14d6a:	46de      	mov	lr, fp
   14d6c:	464e      	mov	r6, r9
   14d6e:	b5e0      	push	{r5, r6, r7, lr}
   14d70:	030c      	lsls	r4, r1, #12
   14d72:	4698      	mov	r8, r3
   14d74:	004e      	lsls	r6, r1, #1
   14d76:	0b23      	lsrs	r3, r4, #12
   14d78:	b087      	sub	sp, #28
   14d7a:	0007      	movs	r7, r0
   14d7c:	4692      	mov	sl, r2
   14d7e:	469b      	mov	fp, r3
   14d80:	0d76      	lsrs	r6, r6, #21
   14d82:	0fcd      	lsrs	r5, r1, #31
   14d84:	2e00      	cmp	r6, #0
   14d86:	d06b      	beq.n	14e60 <__aeabi_dmul+0xfc>
   14d88:	4b6d      	ldr	r3, [pc, #436]	; (14f40 <__aeabi_dmul+0x1dc>)
   14d8a:	429e      	cmp	r6, r3
   14d8c:	d035      	beq.n	14dfa <__aeabi_dmul+0x96>
   14d8e:	2480      	movs	r4, #128	; 0x80
   14d90:	465b      	mov	r3, fp
   14d92:	0f42      	lsrs	r2, r0, #29
   14d94:	0424      	lsls	r4, r4, #16
   14d96:	00db      	lsls	r3, r3, #3
   14d98:	4314      	orrs	r4, r2
   14d9a:	431c      	orrs	r4, r3
   14d9c:	00c3      	lsls	r3, r0, #3
   14d9e:	4699      	mov	r9, r3
   14da0:	4b68      	ldr	r3, [pc, #416]	; (14f44 <__aeabi_dmul+0x1e0>)
   14da2:	46a3      	mov	fp, r4
   14da4:	469c      	mov	ip, r3
   14da6:	2300      	movs	r3, #0
   14da8:	2700      	movs	r7, #0
   14daa:	4466      	add	r6, ip
   14dac:	9302      	str	r3, [sp, #8]
   14dae:	4643      	mov	r3, r8
   14db0:	031c      	lsls	r4, r3, #12
   14db2:	005a      	lsls	r2, r3, #1
   14db4:	0fdb      	lsrs	r3, r3, #31
   14db6:	4650      	mov	r0, sl
   14db8:	0b24      	lsrs	r4, r4, #12
   14dba:	0d52      	lsrs	r2, r2, #21
   14dbc:	4698      	mov	r8, r3
   14dbe:	d100      	bne.n	14dc2 <__aeabi_dmul+0x5e>
   14dc0:	e076      	b.n	14eb0 <__aeabi_dmul+0x14c>
   14dc2:	4b5f      	ldr	r3, [pc, #380]	; (14f40 <__aeabi_dmul+0x1dc>)
   14dc4:	429a      	cmp	r2, r3
   14dc6:	d06d      	beq.n	14ea4 <__aeabi_dmul+0x140>
   14dc8:	2380      	movs	r3, #128	; 0x80
   14dca:	0f41      	lsrs	r1, r0, #29
   14dcc:	041b      	lsls	r3, r3, #16
   14dce:	430b      	orrs	r3, r1
   14dd0:	495c      	ldr	r1, [pc, #368]	; (14f44 <__aeabi_dmul+0x1e0>)
   14dd2:	00e4      	lsls	r4, r4, #3
   14dd4:	468c      	mov	ip, r1
   14dd6:	431c      	orrs	r4, r3
   14dd8:	00c3      	lsls	r3, r0, #3
   14dda:	2000      	movs	r0, #0
   14ddc:	4462      	add	r2, ip
   14dde:	4641      	mov	r1, r8
   14de0:	18b6      	adds	r6, r6, r2
   14de2:	4069      	eors	r1, r5
   14de4:	1c72      	adds	r2, r6, #1
   14de6:	9101      	str	r1, [sp, #4]
   14de8:	4694      	mov	ip, r2
   14dea:	4307      	orrs	r7, r0
   14dec:	2f0f      	cmp	r7, #15
   14dee:	d900      	bls.n	14df2 <__aeabi_dmul+0x8e>
   14df0:	e0b0      	b.n	14f54 <__aeabi_dmul+0x1f0>
   14df2:	4a55      	ldr	r2, [pc, #340]	; (14f48 <__aeabi_dmul+0x1e4>)
   14df4:	00bf      	lsls	r7, r7, #2
   14df6:	59d2      	ldr	r2, [r2, r7]
   14df8:	4697      	mov	pc, r2
   14dfa:	465b      	mov	r3, fp
   14dfc:	4303      	orrs	r3, r0
   14dfe:	4699      	mov	r9, r3
   14e00:	d000      	beq.n	14e04 <__aeabi_dmul+0xa0>
   14e02:	e087      	b.n	14f14 <__aeabi_dmul+0x1b0>
   14e04:	2300      	movs	r3, #0
   14e06:	469b      	mov	fp, r3
   14e08:	3302      	adds	r3, #2
   14e0a:	2708      	movs	r7, #8
   14e0c:	9302      	str	r3, [sp, #8]
   14e0e:	e7ce      	b.n	14dae <__aeabi_dmul+0x4a>
   14e10:	4642      	mov	r2, r8
   14e12:	9201      	str	r2, [sp, #4]
   14e14:	2802      	cmp	r0, #2
   14e16:	d067      	beq.n	14ee8 <__aeabi_dmul+0x184>
   14e18:	2803      	cmp	r0, #3
   14e1a:	d100      	bne.n	14e1e <__aeabi_dmul+0xba>
   14e1c:	e20e      	b.n	1523c <__aeabi_dmul+0x4d8>
   14e1e:	2801      	cmp	r0, #1
   14e20:	d000      	beq.n	14e24 <__aeabi_dmul+0xc0>
   14e22:	e162      	b.n	150ea <__aeabi_dmul+0x386>
   14e24:	2300      	movs	r3, #0
   14e26:	2400      	movs	r4, #0
   14e28:	2200      	movs	r2, #0
   14e2a:	4699      	mov	r9, r3
   14e2c:	9901      	ldr	r1, [sp, #4]
   14e2e:	4001      	ands	r1, r0
   14e30:	b2cd      	uxtb	r5, r1
   14e32:	2100      	movs	r1, #0
   14e34:	0312      	lsls	r2, r2, #12
   14e36:	0d0b      	lsrs	r3, r1, #20
   14e38:	0b12      	lsrs	r2, r2, #12
   14e3a:	051b      	lsls	r3, r3, #20
   14e3c:	4313      	orrs	r3, r2
   14e3e:	4a43      	ldr	r2, [pc, #268]	; (14f4c <__aeabi_dmul+0x1e8>)
   14e40:	0524      	lsls	r4, r4, #20
   14e42:	4013      	ands	r3, r2
   14e44:	431c      	orrs	r4, r3
   14e46:	0064      	lsls	r4, r4, #1
   14e48:	07ed      	lsls	r5, r5, #31
   14e4a:	0864      	lsrs	r4, r4, #1
   14e4c:	432c      	orrs	r4, r5
   14e4e:	4648      	mov	r0, r9
   14e50:	0021      	movs	r1, r4
   14e52:	b007      	add	sp, #28
   14e54:	bc3c      	pop	{r2, r3, r4, r5}
   14e56:	4690      	mov	r8, r2
   14e58:	4699      	mov	r9, r3
   14e5a:	46a2      	mov	sl, r4
   14e5c:	46ab      	mov	fp, r5
   14e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14e60:	4303      	orrs	r3, r0
   14e62:	4699      	mov	r9, r3
   14e64:	d04f      	beq.n	14f06 <__aeabi_dmul+0x1a2>
   14e66:	465b      	mov	r3, fp
   14e68:	2b00      	cmp	r3, #0
   14e6a:	d100      	bne.n	14e6e <__aeabi_dmul+0x10a>
   14e6c:	e189      	b.n	15182 <__aeabi_dmul+0x41e>
   14e6e:	4658      	mov	r0, fp
   14e70:	f000 fe98 	bl	15ba4 <__clzsi2>
   14e74:	0003      	movs	r3, r0
   14e76:	3b0b      	subs	r3, #11
   14e78:	2b1c      	cmp	r3, #28
   14e7a:	dd00      	ble.n	14e7e <__aeabi_dmul+0x11a>
   14e7c:	e17a      	b.n	15174 <__aeabi_dmul+0x410>
   14e7e:	221d      	movs	r2, #29
   14e80:	1ad3      	subs	r3, r2, r3
   14e82:	003a      	movs	r2, r7
   14e84:	0001      	movs	r1, r0
   14e86:	465c      	mov	r4, fp
   14e88:	40da      	lsrs	r2, r3
   14e8a:	3908      	subs	r1, #8
   14e8c:	408c      	lsls	r4, r1
   14e8e:	0013      	movs	r3, r2
   14e90:	408f      	lsls	r7, r1
   14e92:	4323      	orrs	r3, r4
   14e94:	469b      	mov	fp, r3
   14e96:	46b9      	mov	r9, r7
   14e98:	2300      	movs	r3, #0
   14e9a:	4e2d      	ldr	r6, [pc, #180]	; (14f50 <__aeabi_dmul+0x1ec>)
   14e9c:	2700      	movs	r7, #0
   14e9e:	1a36      	subs	r6, r6, r0
   14ea0:	9302      	str	r3, [sp, #8]
   14ea2:	e784      	b.n	14dae <__aeabi_dmul+0x4a>
   14ea4:	4653      	mov	r3, sl
   14ea6:	4323      	orrs	r3, r4
   14ea8:	d12a      	bne.n	14f00 <__aeabi_dmul+0x19c>
   14eaa:	2400      	movs	r4, #0
   14eac:	2002      	movs	r0, #2
   14eae:	e796      	b.n	14dde <__aeabi_dmul+0x7a>
   14eb0:	4653      	mov	r3, sl
   14eb2:	4323      	orrs	r3, r4
   14eb4:	d020      	beq.n	14ef8 <__aeabi_dmul+0x194>
   14eb6:	2c00      	cmp	r4, #0
   14eb8:	d100      	bne.n	14ebc <__aeabi_dmul+0x158>
   14eba:	e157      	b.n	1516c <__aeabi_dmul+0x408>
   14ebc:	0020      	movs	r0, r4
   14ebe:	f000 fe71 	bl	15ba4 <__clzsi2>
   14ec2:	0003      	movs	r3, r0
   14ec4:	3b0b      	subs	r3, #11
   14ec6:	2b1c      	cmp	r3, #28
   14ec8:	dd00      	ble.n	14ecc <__aeabi_dmul+0x168>
   14eca:	e149      	b.n	15160 <__aeabi_dmul+0x3fc>
   14ecc:	211d      	movs	r1, #29
   14ece:	1acb      	subs	r3, r1, r3
   14ed0:	4651      	mov	r1, sl
   14ed2:	0002      	movs	r2, r0
   14ed4:	40d9      	lsrs	r1, r3
   14ed6:	4653      	mov	r3, sl
   14ed8:	3a08      	subs	r2, #8
   14eda:	4094      	lsls	r4, r2
   14edc:	4093      	lsls	r3, r2
   14ede:	430c      	orrs	r4, r1
   14ee0:	4a1b      	ldr	r2, [pc, #108]	; (14f50 <__aeabi_dmul+0x1ec>)
   14ee2:	1a12      	subs	r2, r2, r0
   14ee4:	2000      	movs	r0, #0
   14ee6:	e77a      	b.n	14dde <__aeabi_dmul+0x7a>
   14ee8:	2501      	movs	r5, #1
   14eea:	9b01      	ldr	r3, [sp, #4]
   14eec:	4c14      	ldr	r4, [pc, #80]	; (14f40 <__aeabi_dmul+0x1dc>)
   14eee:	401d      	ands	r5, r3
   14ef0:	2300      	movs	r3, #0
   14ef2:	2200      	movs	r2, #0
   14ef4:	4699      	mov	r9, r3
   14ef6:	e79c      	b.n	14e32 <__aeabi_dmul+0xce>
   14ef8:	2400      	movs	r4, #0
   14efa:	2200      	movs	r2, #0
   14efc:	2001      	movs	r0, #1
   14efe:	e76e      	b.n	14dde <__aeabi_dmul+0x7a>
   14f00:	4653      	mov	r3, sl
   14f02:	2003      	movs	r0, #3
   14f04:	e76b      	b.n	14dde <__aeabi_dmul+0x7a>
   14f06:	2300      	movs	r3, #0
   14f08:	469b      	mov	fp, r3
   14f0a:	3301      	adds	r3, #1
   14f0c:	2704      	movs	r7, #4
   14f0e:	2600      	movs	r6, #0
   14f10:	9302      	str	r3, [sp, #8]
   14f12:	e74c      	b.n	14dae <__aeabi_dmul+0x4a>
   14f14:	2303      	movs	r3, #3
   14f16:	4681      	mov	r9, r0
   14f18:	270c      	movs	r7, #12
   14f1a:	9302      	str	r3, [sp, #8]
   14f1c:	e747      	b.n	14dae <__aeabi_dmul+0x4a>
   14f1e:	2280      	movs	r2, #128	; 0x80
   14f20:	2300      	movs	r3, #0
   14f22:	2500      	movs	r5, #0
   14f24:	0312      	lsls	r2, r2, #12
   14f26:	4699      	mov	r9, r3
   14f28:	4c05      	ldr	r4, [pc, #20]	; (14f40 <__aeabi_dmul+0x1dc>)
   14f2a:	e782      	b.n	14e32 <__aeabi_dmul+0xce>
   14f2c:	465c      	mov	r4, fp
   14f2e:	464b      	mov	r3, r9
   14f30:	9802      	ldr	r0, [sp, #8]
   14f32:	e76f      	b.n	14e14 <__aeabi_dmul+0xb0>
   14f34:	465c      	mov	r4, fp
   14f36:	464b      	mov	r3, r9
   14f38:	9501      	str	r5, [sp, #4]
   14f3a:	9802      	ldr	r0, [sp, #8]
   14f3c:	e76a      	b.n	14e14 <__aeabi_dmul+0xb0>
   14f3e:	46c0      	nop			; (mov r8, r8)
   14f40:	000007ff 	.word	0x000007ff
   14f44:	fffffc01 	.word	0xfffffc01
   14f48:	0001de9c 	.word	0x0001de9c
   14f4c:	800fffff 	.word	0x800fffff
   14f50:	fffffc0d 	.word	0xfffffc0d
   14f54:	464a      	mov	r2, r9
   14f56:	4649      	mov	r1, r9
   14f58:	0c17      	lsrs	r7, r2, #16
   14f5a:	0c1a      	lsrs	r2, r3, #16
   14f5c:	041b      	lsls	r3, r3, #16
   14f5e:	0c1b      	lsrs	r3, r3, #16
   14f60:	0408      	lsls	r0, r1, #16
   14f62:	0019      	movs	r1, r3
   14f64:	0c00      	lsrs	r0, r0, #16
   14f66:	4341      	muls	r1, r0
   14f68:	0015      	movs	r5, r2
   14f6a:	4688      	mov	r8, r1
   14f6c:	0019      	movs	r1, r3
   14f6e:	437d      	muls	r5, r7
   14f70:	4379      	muls	r1, r7
   14f72:	9503      	str	r5, [sp, #12]
   14f74:	4689      	mov	r9, r1
   14f76:	0029      	movs	r1, r5
   14f78:	0015      	movs	r5, r2
   14f7a:	4345      	muls	r5, r0
   14f7c:	444d      	add	r5, r9
   14f7e:	9502      	str	r5, [sp, #8]
   14f80:	4645      	mov	r5, r8
   14f82:	0c2d      	lsrs	r5, r5, #16
   14f84:	46aa      	mov	sl, r5
   14f86:	9d02      	ldr	r5, [sp, #8]
   14f88:	4455      	add	r5, sl
   14f8a:	45a9      	cmp	r9, r5
   14f8c:	d906      	bls.n	14f9c <__aeabi_dmul+0x238>
   14f8e:	468a      	mov	sl, r1
   14f90:	2180      	movs	r1, #128	; 0x80
   14f92:	0249      	lsls	r1, r1, #9
   14f94:	4689      	mov	r9, r1
   14f96:	44ca      	add	sl, r9
   14f98:	4651      	mov	r1, sl
   14f9a:	9103      	str	r1, [sp, #12]
   14f9c:	0c29      	lsrs	r1, r5, #16
   14f9e:	9104      	str	r1, [sp, #16]
   14fa0:	4641      	mov	r1, r8
   14fa2:	0409      	lsls	r1, r1, #16
   14fa4:	042d      	lsls	r5, r5, #16
   14fa6:	0c09      	lsrs	r1, r1, #16
   14fa8:	4688      	mov	r8, r1
   14faa:	0029      	movs	r1, r5
   14fac:	0c25      	lsrs	r5, r4, #16
   14fae:	0424      	lsls	r4, r4, #16
   14fb0:	4441      	add	r1, r8
   14fb2:	0c24      	lsrs	r4, r4, #16
   14fb4:	9105      	str	r1, [sp, #20]
   14fb6:	0021      	movs	r1, r4
   14fb8:	4341      	muls	r1, r0
   14fba:	4688      	mov	r8, r1
   14fbc:	0021      	movs	r1, r4
   14fbe:	4379      	muls	r1, r7
   14fc0:	468a      	mov	sl, r1
   14fc2:	4368      	muls	r0, r5
   14fc4:	4641      	mov	r1, r8
   14fc6:	4450      	add	r0, sl
   14fc8:	4681      	mov	r9, r0
   14fca:	0c08      	lsrs	r0, r1, #16
   14fcc:	4448      	add	r0, r9
   14fce:	436f      	muls	r7, r5
   14fd0:	4582      	cmp	sl, r0
   14fd2:	d903      	bls.n	14fdc <__aeabi_dmul+0x278>
   14fd4:	2180      	movs	r1, #128	; 0x80
   14fd6:	0249      	lsls	r1, r1, #9
   14fd8:	4689      	mov	r9, r1
   14fda:	444f      	add	r7, r9
   14fdc:	0c01      	lsrs	r1, r0, #16
   14fde:	4689      	mov	r9, r1
   14fe0:	0039      	movs	r1, r7
   14fe2:	4449      	add	r1, r9
   14fe4:	9102      	str	r1, [sp, #8]
   14fe6:	4641      	mov	r1, r8
   14fe8:	040f      	lsls	r7, r1, #16
   14fea:	9904      	ldr	r1, [sp, #16]
   14fec:	0c3f      	lsrs	r7, r7, #16
   14fee:	4688      	mov	r8, r1
   14ff0:	0400      	lsls	r0, r0, #16
   14ff2:	19c0      	adds	r0, r0, r7
   14ff4:	4480      	add	r8, r0
   14ff6:	4641      	mov	r1, r8
   14ff8:	9104      	str	r1, [sp, #16]
   14ffa:	4659      	mov	r1, fp
   14ffc:	0c0f      	lsrs	r7, r1, #16
   14ffe:	0409      	lsls	r1, r1, #16
   15000:	0c09      	lsrs	r1, r1, #16
   15002:	4688      	mov	r8, r1
   15004:	4359      	muls	r1, r3
   15006:	468a      	mov	sl, r1
   15008:	0039      	movs	r1, r7
   1500a:	4351      	muls	r1, r2
   1500c:	4689      	mov	r9, r1
   1500e:	4641      	mov	r1, r8
   15010:	434a      	muls	r2, r1
   15012:	4651      	mov	r1, sl
   15014:	0c09      	lsrs	r1, r1, #16
   15016:	468b      	mov	fp, r1
   15018:	437b      	muls	r3, r7
   1501a:	18d2      	adds	r2, r2, r3
   1501c:	445a      	add	r2, fp
   1501e:	4293      	cmp	r3, r2
   15020:	d903      	bls.n	1502a <__aeabi_dmul+0x2c6>
   15022:	2380      	movs	r3, #128	; 0x80
   15024:	025b      	lsls	r3, r3, #9
   15026:	469b      	mov	fp, r3
   15028:	44d9      	add	r9, fp
   1502a:	4651      	mov	r1, sl
   1502c:	0409      	lsls	r1, r1, #16
   1502e:	0c09      	lsrs	r1, r1, #16
   15030:	468a      	mov	sl, r1
   15032:	4641      	mov	r1, r8
   15034:	4361      	muls	r1, r4
   15036:	437c      	muls	r4, r7
   15038:	0c13      	lsrs	r3, r2, #16
   1503a:	0412      	lsls	r2, r2, #16
   1503c:	444b      	add	r3, r9
   1503e:	4452      	add	r2, sl
   15040:	46a1      	mov	r9, r4
   15042:	468a      	mov	sl, r1
   15044:	003c      	movs	r4, r7
   15046:	4641      	mov	r1, r8
   15048:	436c      	muls	r4, r5
   1504a:	434d      	muls	r5, r1
   1504c:	4651      	mov	r1, sl
   1504e:	444d      	add	r5, r9
   15050:	0c0f      	lsrs	r7, r1, #16
   15052:	197d      	adds	r5, r7, r5
   15054:	45a9      	cmp	r9, r5
   15056:	d903      	bls.n	15060 <__aeabi_dmul+0x2fc>
   15058:	2180      	movs	r1, #128	; 0x80
   1505a:	0249      	lsls	r1, r1, #9
   1505c:	4688      	mov	r8, r1
   1505e:	4444      	add	r4, r8
   15060:	9f04      	ldr	r7, [sp, #16]
   15062:	9903      	ldr	r1, [sp, #12]
   15064:	46b8      	mov	r8, r7
   15066:	4441      	add	r1, r8
   15068:	468b      	mov	fp, r1
   1506a:	4583      	cmp	fp, r0
   1506c:	4180      	sbcs	r0, r0
   1506e:	4241      	negs	r1, r0
   15070:	4688      	mov	r8, r1
   15072:	4651      	mov	r1, sl
   15074:	0408      	lsls	r0, r1, #16
   15076:	042f      	lsls	r7, r5, #16
   15078:	0c00      	lsrs	r0, r0, #16
   1507a:	183f      	adds	r7, r7, r0
   1507c:	4658      	mov	r0, fp
   1507e:	9902      	ldr	r1, [sp, #8]
   15080:	1810      	adds	r0, r2, r0
   15082:	4689      	mov	r9, r1
   15084:	4290      	cmp	r0, r2
   15086:	4192      	sbcs	r2, r2
   15088:	444f      	add	r7, r9
   1508a:	46ba      	mov	sl, r7
   1508c:	4252      	negs	r2, r2
   1508e:	4699      	mov	r9, r3
   15090:	4693      	mov	fp, r2
   15092:	44c2      	add	sl, r8
   15094:	44d1      	add	r9, sl
   15096:	44cb      	add	fp, r9
   15098:	428f      	cmp	r7, r1
   1509a:	41bf      	sbcs	r7, r7
   1509c:	45c2      	cmp	sl, r8
   1509e:	4189      	sbcs	r1, r1
   150a0:	4599      	cmp	r9, r3
   150a2:	419b      	sbcs	r3, r3
   150a4:	4593      	cmp	fp, r2
   150a6:	4192      	sbcs	r2, r2
   150a8:	427f      	negs	r7, r7
   150aa:	4249      	negs	r1, r1
   150ac:	0c2d      	lsrs	r5, r5, #16
   150ae:	4252      	negs	r2, r2
   150b0:	430f      	orrs	r7, r1
   150b2:	425b      	negs	r3, r3
   150b4:	4313      	orrs	r3, r2
   150b6:	197f      	adds	r7, r7, r5
   150b8:	18ff      	adds	r7, r7, r3
   150ba:	465b      	mov	r3, fp
   150bc:	193c      	adds	r4, r7, r4
   150be:	0ddb      	lsrs	r3, r3, #23
   150c0:	9a05      	ldr	r2, [sp, #20]
   150c2:	0264      	lsls	r4, r4, #9
   150c4:	431c      	orrs	r4, r3
   150c6:	0243      	lsls	r3, r0, #9
   150c8:	4313      	orrs	r3, r2
   150ca:	1e5d      	subs	r5, r3, #1
   150cc:	41ab      	sbcs	r3, r5
   150ce:	465a      	mov	r2, fp
   150d0:	0dc0      	lsrs	r0, r0, #23
   150d2:	4303      	orrs	r3, r0
   150d4:	0252      	lsls	r2, r2, #9
   150d6:	4313      	orrs	r3, r2
   150d8:	01e2      	lsls	r2, r4, #7
   150da:	d556      	bpl.n	1518a <__aeabi_dmul+0x426>
   150dc:	2001      	movs	r0, #1
   150de:	085a      	lsrs	r2, r3, #1
   150e0:	4003      	ands	r3, r0
   150e2:	4313      	orrs	r3, r2
   150e4:	07e2      	lsls	r2, r4, #31
   150e6:	4313      	orrs	r3, r2
   150e8:	0864      	lsrs	r4, r4, #1
   150ea:	485a      	ldr	r0, [pc, #360]	; (15254 <__aeabi_dmul+0x4f0>)
   150ec:	4460      	add	r0, ip
   150ee:	2800      	cmp	r0, #0
   150f0:	dd4d      	ble.n	1518e <__aeabi_dmul+0x42a>
   150f2:	075a      	lsls	r2, r3, #29
   150f4:	d009      	beq.n	1510a <__aeabi_dmul+0x3a6>
   150f6:	220f      	movs	r2, #15
   150f8:	401a      	ands	r2, r3
   150fa:	2a04      	cmp	r2, #4
   150fc:	d005      	beq.n	1510a <__aeabi_dmul+0x3a6>
   150fe:	1d1a      	adds	r2, r3, #4
   15100:	429a      	cmp	r2, r3
   15102:	419b      	sbcs	r3, r3
   15104:	425b      	negs	r3, r3
   15106:	18e4      	adds	r4, r4, r3
   15108:	0013      	movs	r3, r2
   1510a:	01e2      	lsls	r2, r4, #7
   1510c:	d504      	bpl.n	15118 <__aeabi_dmul+0x3b4>
   1510e:	2080      	movs	r0, #128	; 0x80
   15110:	4a51      	ldr	r2, [pc, #324]	; (15258 <__aeabi_dmul+0x4f4>)
   15112:	00c0      	lsls	r0, r0, #3
   15114:	4014      	ands	r4, r2
   15116:	4460      	add	r0, ip
   15118:	4a50      	ldr	r2, [pc, #320]	; (1525c <__aeabi_dmul+0x4f8>)
   1511a:	4290      	cmp	r0, r2
   1511c:	dd00      	ble.n	15120 <__aeabi_dmul+0x3bc>
   1511e:	e6e3      	b.n	14ee8 <__aeabi_dmul+0x184>
   15120:	2501      	movs	r5, #1
   15122:	08db      	lsrs	r3, r3, #3
   15124:	0762      	lsls	r2, r4, #29
   15126:	431a      	orrs	r2, r3
   15128:	0264      	lsls	r4, r4, #9
   1512a:	9b01      	ldr	r3, [sp, #4]
   1512c:	4691      	mov	r9, r2
   1512e:	0b22      	lsrs	r2, r4, #12
   15130:	0544      	lsls	r4, r0, #21
   15132:	0d64      	lsrs	r4, r4, #21
   15134:	401d      	ands	r5, r3
   15136:	e67c      	b.n	14e32 <__aeabi_dmul+0xce>
   15138:	2280      	movs	r2, #128	; 0x80
   1513a:	4659      	mov	r1, fp
   1513c:	0312      	lsls	r2, r2, #12
   1513e:	4211      	tst	r1, r2
   15140:	d008      	beq.n	15154 <__aeabi_dmul+0x3f0>
   15142:	4214      	tst	r4, r2
   15144:	d106      	bne.n	15154 <__aeabi_dmul+0x3f0>
   15146:	4322      	orrs	r2, r4
   15148:	0312      	lsls	r2, r2, #12
   1514a:	0b12      	lsrs	r2, r2, #12
   1514c:	4645      	mov	r5, r8
   1514e:	4699      	mov	r9, r3
   15150:	4c43      	ldr	r4, [pc, #268]	; (15260 <__aeabi_dmul+0x4fc>)
   15152:	e66e      	b.n	14e32 <__aeabi_dmul+0xce>
   15154:	465b      	mov	r3, fp
   15156:	431a      	orrs	r2, r3
   15158:	0312      	lsls	r2, r2, #12
   1515a:	0b12      	lsrs	r2, r2, #12
   1515c:	4c40      	ldr	r4, [pc, #256]	; (15260 <__aeabi_dmul+0x4fc>)
   1515e:	e668      	b.n	14e32 <__aeabi_dmul+0xce>
   15160:	0003      	movs	r3, r0
   15162:	4654      	mov	r4, sl
   15164:	3b28      	subs	r3, #40	; 0x28
   15166:	409c      	lsls	r4, r3
   15168:	2300      	movs	r3, #0
   1516a:	e6b9      	b.n	14ee0 <__aeabi_dmul+0x17c>
   1516c:	f000 fd1a 	bl	15ba4 <__clzsi2>
   15170:	3020      	adds	r0, #32
   15172:	e6a6      	b.n	14ec2 <__aeabi_dmul+0x15e>
   15174:	0003      	movs	r3, r0
   15176:	3b28      	subs	r3, #40	; 0x28
   15178:	409f      	lsls	r7, r3
   1517a:	2300      	movs	r3, #0
   1517c:	46bb      	mov	fp, r7
   1517e:	4699      	mov	r9, r3
   15180:	e68a      	b.n	14e98 <__aeabi_dmul+0x134>
   15182:	f000 fd0f 	bl	15ba4 <__clzsi2>
   15186:	3020      	adds	r0, #32
   15188:	e674      	b.n	14e74 <__aeabi_dmul+0x110>
   1518a:	46b4      	mov	ip, r6
   1518c:	e7ad      	b.n	150ea <__aeabi_dmul+0x386>
   1518e:	2501      	movs	r5, #1
   15190:	1a2a      	subs	r2, r5, r0
   15192:	2a38      	cmp	r2, #56	; 0x38
   15194:	dd06      	ble.n	151a4 <__aeabi_dmul+0x440>
   15196:	9b01      	ldr	r3, [sp, #4]
   15198:	2400      	movs	r4, #0
   1519a:	401d      	ands	r5, r3
   1519c:	2300      	movs	r3, #0
   1519e:	2200      	movs	r2, #0
   151a0:	4699      	mov	r9, r3
   151a2:	e646      	b.n	14e32 <__aeabi_dmul+0xce>
   151a4:	2a1f      	cmp	r2, #31
   151a6:	dc21      	bgt.n	151ec <__aeabi_dmul+0x488>
   151a8:	2520      	movs	r5, #32
   151aa:	0020      	movs	r0, r4
   151ac:	1aad      	subs	r5, r5, r2
   151ae:	001e      	movs	r6, r3
   151b0:	40ab      	lsls	r3, r5
   151b2:	40a8      	lsls	r0, r5
   151b4:	40d6      	lsrs	r6, r2
   151b6:	1e5d      	subs	r5, r3, #1
   151b8:	41ab      	sbcs	r3, r5
   151ba:	4330      	orrs	r0, r6
   151bc:	4318      	orrs	r0, r3
   151be:	40d4      	lsrs	r4, r2
   151c0:	0743      	lsls	r3, r0, #29
   151c2:	d009      	beq.n	151d8 <__aeabi_dmul+0x474>
   151c4:	230f      	movs	r3, #15
   151c6:	4003      	ands	r3, r0
   151c8:	2b04      	cmp	r3, #4
   151ca:	d005      	beq.n	151d8 <__aeabi_dmul+0x474>
   151cc:	0003      	movs	r3, r0
   151ce:	1d18      	adds	r0, r3, #4
   151d0:	4298      	cmp	r0, r3
   151d2:	419b      	sbcs	r3, r3
   151d4:	425b      	negs	r3, r3
   151d6:	18e4      	adds	r4, r4, r3
   151d8:	0223      	lsls	r3, r4, #8
   151da:	d521      	bpl.n	15220 <__aeabi_dmul+0x4bc>
   151dc:	2501      	movs	r5, #1
   151de:	9b01      	ldr	r3, [sp, #4]
   151e0:	2401      	movs	r4, #1
   151e2:	401d      	ands	r5, r3
   151e4:	2300      	movs	r3, #0
   151e6:	2200      	movs	r2, #0
   151e8:	4699      	mov	r9, r3
   151ea:	e622      	b.n	14e32 <__aeabi_dmul+0xce>
   151ec:	251f      	movs	r5, #31
   151ee:	0021      	movs	r1, r4
   151f0:	426d      	negs	r5, r5
   151f2:	1a28      	subs	r0, r5, r0
   151f4:	40c1      	lsrs	r1, r0
   151f6:	0008      	movs	r0, r1
   151f8:	2a20      	cmp	r2, #32
   151fa:	d01d      	beq.n	15238 <__aeabi_dmul+0x4d4>
   151fc:	355f      	adds	r5, #95	; 0x5f
   151fe:	1aaa      	subs	r2, r5, r2
   15200:	4094      	lsls	r4, r2
   15202:	4323      	orrs	r3, r4
   15204:	1e5c      	subs	r4, r3, #1
   15206:	41a3      	sbcs	r3, r4
   15208:	2507      	movs	r5, #7
   1520a:	4303      	orrs	r3, r0
   1520c:	401d      	ands	r5, r3
   1520e:	2200      	movs	r2, #0
   15210:	2d00      	cmp	r5, #0
   15212:	d009      	beq.n	15228 <__aeabi_dmul+0x4c4>
   15214:	220f      	movs	r2, #15
   15216:	2400      	movs	r4, #0
   15218:	401a      	ands	r2, r3
   1521a:	0018      	movs	r0, r3
   1521c:	2a04      	cmp	r2, #4
   1521e:	d1d6      	bne.n	151ce <__aeabi_dmul+0x46a>
   15220:	0003      	movs	r3, r0
   15222:	0765      	lsls	r5, r4, #29
   15224:	0264      	lsls	r4, r4, #9
   15226:	0b22      	lsrs	r2, r4, #12
   15228:	08db      	lsrs	r3, r3, #3
   1522a:	432b      	orrs	r3, r5
   1522c:	2501      	movs	r5, #1
   1522e:	4699      	mov	r9, r3
   15230:	9b01      	ldr	r3, [sp, #4]
   15232:	2400      	movs	r4, #0
   15234:	401d      	ands	r5, r3
   15236:	e5fc      	b.n	14e32 <__aeabi_dmul+0xce>
   15238:	2400      	movs	r4, #0
   1523a:	e7e2      	b.n	15202 <__aeabi_dmul+0x49e>
   1523c:	2280      	movs	r2, #128	; 0x80
   1523e:	2501      	movs	r5, #1
   15240:	0312      	lsls	r2, r2, #12
   15242:	4322      	orrs	r2, r4
   15244:	9901      	ldr	r1, [sp, #4]
   15246:	0312      	lsls	r2, r2, #12
   15248:	0b12      	lsrs	r2, r2, #12
   1524a:	400d      	ands	r5, r1
   1524c:	4699      	mov	r9, r3
   1524e:	4c04      	ldr	r4, [pc, #16]	; (15260 <__aeabi_dmul+0x4fc>)
   15250:	e5ef      	b.n	14e32 <__aeabi_dmul+0xce>
   15252:	46c0      	nop			; (mov r8, r8)
   15254:	000003ff 	.word	0x000003ff
   15258:	feffffff 	.word	0xfeffffff
   1525c:	000007fe 	.word	0x000007fe
   15260:	000007ff 	.word	0x000007ff

00015264 <__aeabi_dsub>:
   15264:	b5f0      	push	{r4, r5, r6, r7, lr}
   15266:	4646      	mov	r6, r8
   15268:	46d6      	mov	lr, sl
   1526a:	464f      	mov	r7, r9
   1526c:	030c      	lsls	r4, r1, #12
   1526e:	b5c0      	push	{r6, r7, lr}
   15270:	0fcd      	lsrs	r5, r1, #31
   15272:	004e      	lsls	r6, r1, #1
   15274:	0a61      	lsrs	r1, r4, #9
   15276:	0f44      	lsrs	r4, r0, #29
   15278:	430c      	orrs	r4, r1
   1527a:	00c1      	lsls	r1, r0, #3
   1527c:	0058      	lsls	r0, r3, #1
   1527e:	0d40      	lsrs	r0, r0, #21
   15280:	4684      	mov	ip, r0
   15282:	468a      	mov	sl, r1
   15284:	000f      	movs	r7, r1
   15286:	0319      	lsls	r1, r3, #12
   15288:	0f50      	lsrs	r0, r2, #29
   1528a:	0a49      	lsrs	r1, r1, #9
   1528c:	4301      	orrs	r1, r0
   1528e:	48c6      	ldr	r0, [pc, #792]	; (155a8 <__aeabi_dsub+0x344>)
   15290:	0d76      	lsrs	r6, r6, #21
   15292:	46a8      	mov	r8, r5
   15294:	0fdb      	lsrs	r3, r3, #31
   15296:	00d2      	lsls	r2, r2, #3
   15298:	4584      	cmp	ip, r0
   1529a:	d100      	bne.n	1529e <__aeabi_dsub+0x3a>
   1529c:	e0d8      	b.n	15450 <__aeabi_dsub+0x1ec>
   1529e:	2001      	movs	r0, #1
   152a0:	4043      	eors	r3, r0
   152a2:	42ab      	cmp	r3, r5
   152a4:	d100      	bne.n	152a8 <__aeabi_dsub+0x44>
   152a6:	e0a6      	b.n	153f6 <__aeabi_dsub+0x192>
   152a8:	4660      	mov	r0, ip
   152aa:	1a35      	subs	r5, r6, r0
   152ac:	2d00      	cmp	r5, #0
   152ae:	dc00      	bgt.n	152b2 <__aeabi_dsub+0x4e>
   152b0:	e105      	b.n	154be <__aeabi_dsub+0x25a>
   152b2:	2800      	cmp	r0, #0
   152b4:	d110      	bne.n	152d8 <__aeabi_dsub+0x74>
   152b6:	000b      	movs	r3, r1
   152b8:	4313      	orrs	r3, r2
   152ba:	d100      	bne.n	152be <__aeabi_dsub+0x5a>
   152bc:	e0d7      	b.n	1546e <__aeabi_dsub+0x20a>
   152be:	1e6b      	subs	r3, r5, #1
   152c0:	2b00      	cmp	r3, #0
   152c2:	d000      	beq.n	152c6 <__aeabi_dsub+0x62>
   152c4:	e14b      	b.n	1555e <__aeabi_dsub+0x2fa>
   152c6:	4653      	mov	r3, sl
   152c8:	1a9f      	subs	r7, r3, r2
   152ca:	45ba      	cmp	sl, r7
   152cc:	4180      	sbcs	r0, r0
   152ce:	1a64      	subs	r4, r4, r1
   152d0:	4240      	negs	r0, r0
   152d2:	1a24      	subs	r4, r4, r0
   152d4:	2601      	movs	r6, #1
   152d6:	e01e      	b.n	15316 <__aeabi_dsub+0xb2>
   152d8:	4bb3      	ldr	r3, [pc, #716]	; (155a8 <__aeabi_dsub+0x344>)
   152da:	429e      	cmp	r6, r3
   152dc:	d048      	beq.n	15370 <__aeabi_dsub+0x10c>
   152de:	2380      	movs	r3, #128	; 0x80
   152e0:	041b      	lsls	r3, r3, #16
   152e2:	4319      	orrs	r1, r3
   152e4:	2d38      	cmp	r5, #56	; 0x38
   152e6:	dd00      	ble.n	152ea <__aeabi_dsub+0x86>
   152e8:	e119      	b.n	1551e <__aeabi_dsub+0x2ba>
   152ea:	2d1f      	cmp	r5, #31
   152ec:	dd00      	ble.n	152f0 <__aeabi_dsub+0x8c>
   152ee:	e14c      	b.n	1558a <__aeabi_dsub+0x326>
   152f0:	2320      	movs	r3, #32
   152f2:	000f      	movs	r7, r1
   152f4:	1b5b      	subs	r3, r3, r5
   152f6:	0010      	movs	r0, r2
   152f8:	409a      	lsls	r2, r3
   152fa:	409f      	lsls	r7, r3
   152fc:	40e8      	lsrs	r0, r5
   152fe:	1e53      	subs	r3, r2, #1
   15300:	419a      	sbcs	r2, r3
   15302:	40e9      	lsrs	r1, r5
   15304:	4307      	orrs	r7, r0
   15306:	4317      	orrs	r7, r2
   15308:	4653      	mov	r3, sl
   1530a:	1bdf      	subs	r7, r3, r7
   1530c:	1a61      	subs	r1, r4, r1
   1530e:	45ba      	cmp	sl, r7
   15310:	41a4      	sbcs	r4, r4
   15312:	4264      	negs	r4, r4
   15314:	1b0c      	subs	r4, r1, r4
   15316:	0223      	lsls	r3, r4, #8
   15318:	d400      	bmi.n	1531c <__aeabi_dsub+0xb8>
   1531a:	e0c5      	b.n	154a8 <__aeabi_dsub+0x244>
   1531c:	0264      	lsls	r4, r4, #9
   1531e:	0a65      	lsrs	r5, r4, #9
   15320:	2d00      	cmp	r5, #0
   15322:	d100      	bne.n	15326 <__aeabi_dsub+0xc2>
   15324:	e0f6      	b.n	15514 <__aeabi_dsub+0x2b0>
   15326:	0028      	movs	r0, r5
   15328:	f000 fc3c 	bl	15ba4 <__clzsi2>
   1532c:	0003      	movs	r3, r0
   1532e:	3b08      	subs	r3, #8
   15330:	2b1f      	cmp	r3, #31
   15332:	dd00      	ble.n	15336 <__aeabi_dsub+0xd2>
   15334:	e0e9      	b.n	1550a <__aeabi_dsub+0x2a6>
   15336:	2220      	movs	r2, #32
   15338:	003c      	movs	r4, r7
   1533a:	1ad2      	subs	r2, r2, r3
   1533c:	409d      	lsls	r5, r3
   1533e:	40d4      	lsrs	r4, r2
   15340:	409f      	lsls	r7, r3
   15342:	4325      	orrs	r5, r4
   15344:	429e      	cmp	r6, r3
   15346:	dd00      	ble.n	1534a <__aeabi_dsub+0xe6>
   15348:	e0db      	b.n	15502 <__aeabi_dsub+0x29e>
   1534a:	1b9e      	subs	r6, r3, r6
   1534c:	1c73      	adds	r3, r6, #1
   1534e:	2b1f      	cmp	r3, #31
   15350:	dd00      	ble.n	15354 <__aeabi_dsub+0xf0>
   15352:	e10a      	b.n	1556a <__aeabi_dsub+0x306>
   15354:	2220      	movs	r2, #32
   15356:	0038      	movs	r0, r7
   15358:	1ad2      	subs	r2, r2, r3
   1535a:	0029      	movs	r1, r5
   1535c:	4097      	lsls	r7, r2
   1535e:	002c      	movs	r4, r5
   15360:	4091      	lsls	r1, r2
   15362:	40d8      	lsrs	r0, r3
   15364:	1e7a      	subs	r2, r7, #1
   15366:	4197      	sbcs	r7, r2
   15368:	40dc      	lsrs	r4, r3
   1536a:	2600      	movs	r6, #0
   1536c:	4301      	orrs	r1, r0
   1536e:	430f      	orrs	r7, r1
   15370:	077b      	lsls	r3, r7, #29
   15372:	d009      	beq.n	15388 <__aeabi_dsub+0x124>
   15374:	230f      	movs	r3, #15
   15376:	403b      	ands	r3, r7
   15378:	2b04      	cmp	r3, #4
   1537a:	d005      	beq.n	15388 <__aeabi_dsub+0x124>
   1537c:	1d3b      	adds	r3, r7, #4
   1537e:	42bb      	cmp	r3, r7
   15380:	41bf      	sbcs	r7, r7
   15382:	427f      	negs	r7, r7
   15384:	19e4      	adds	r4, r4, r7
   15386:	001f      	movs	r7, r3
   15388:	0223      	lsls	r3, r4, #8
   1538a:	d525      	bpl.n	153d8 <__aeabi_dsub+0x174>
   1538c:	4b86      	ldr	r3, [pc, #536]	; (155a8 <__aeabi_dsub+0x344>)
   1538e:	3601      	adds	r6, #1
   15390:	429e      	cmp	r6, r3
   15392:	d100      	bne.n	15396 <__aeabi_dsub+0x132>
   15394:	e0af      	b.n	154f6 <__aeabi_dsub+0x292>
   15396:	4b85      	ldr	r3, [pc, #532]	; (155ac <__aeabi_dsub+0x348>)
   15398:	2501      	movs	r5, #1
   1539a:	401c      	ands	r4, r3
   1539c:	4643      	mov	r3, r8
   1539e:	0762      	lsls	r2, r4, #29
   153a0:	08ff      	lsrs	r7, r7, #3
   153a2:	0264      	lsls	r4, r4, #9
   153a4:	0576      	lsls	r6, r6, #21
   153a6:	4317      	orrs	r7, r2
   153a8:	0b24      	lsrs	r4, r4, #12
   153aa:	0d76      	lsrs	r6, r6, #21
   153ac:	401d      	ands	r5, r3
   153ae:	2100      	movs	r1, #0
   153b0:	0324      	lsls	r4, r4, #12
   153b2:	0b23      	lsrs	r3, r4, #12
   153b4:	0d0c      	lsrs	r4, r1, #20
   153b6:	4a7e      	ldr	r2, [pc, #504]	; (155b0 <__aeabi_dsub+0x34c>)
   153b8:	0524      	lsls	r4, r4, #20
   153ba:	431c      	orrs	r4, r3
   153bc:	4014      	ands	r4, r2
   153be:	0533      	lsls	r3, r6, #20
   153c0:	4323      	orrs	r3, r4
   153c2:	005b      	lsls	r3, r3, #1
   153c4:	07ed      	lsls	r5, r5, #31
   153c6:	085b      	lsrs	r3, r3, #1
   153c8:	432b      	orrs	r3, r5
   153ca:	0038      	movs	r0, r7
   153cc:	0019      	movs	r1, r3
   153ce:	bc1c      	pop	{r2, r3, r4}
   153d0:	4690      	mov	r8, r2
   153d2:	4699      	mov	r9, r3
   153d4:	46a2      	mov	sl, r4
   153d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   153d8:	2501      	movs	r5, #1
   153da:	4643      	mov	r3, r8
   153dc:	0762      	lsls	r2, r4, #29
   153de:	08ff      	lsrs	r7, r7, #3
   153e0:	4317      	orrs	r7, r2
   153e2:	08e4      	lsrs	r4, r4, #3
   153e4:	401d      	ands	r5, r3
   153e6:	4b70      	ldr	r3, [pc, #448]	; (155a8 <__aeabi_dsub+0x344>)
   153e8:	429e      	cmp	r6, r3
   153ea:	d036      	beq.n	1545a <__aeabi_dsub+0x1f6>
   153ec:	0324      	lsls	r4, r4, #12
   153ee:	0576      	lsls	r6, r6, #21
   153f0:	0b24      	lsrs	r4, r4, #12
   153f2:	0d76      	lsrs	r6, r6, #21
   153f4:	e7db      	b.n	153ae <__aeabi_dsub+0x14a>
   153f6:	4663      	mov	r3, ip
   153f8:	1af3      	subs	r3, r6, r3
   153fa:	2b00      	cmp	r3, #0
   153fc:	dc00      	bgt.n	15400 <__aeabi_dsub+0x19c>
   153fe:	e094      	b.n	1552a <__aeabi_dsub+0x2c6>
   15400:	4660      	mov	r0, ip
   15402:	2800      	cmp	r0, #0
   15404:	d035      	beq.n	15472 <__aeabi_dsub+0x20e>
   15406:	4868      	ldr	r0, [pc, #416]	; (155a8 <__aeabi_dsub+0x344>)
   15408:	4286      	cmp	r6, r0
   1540a:	d0b1      	beq.n	15370 <__aeabi_dsub+0x10c>
   1540c:	2780      	movs	r7, #128	; 0x80
   1540e:	043f      	lsls	r7, r7, #16
   15410:	4339      	orrs	r1, r7
   15412:	2b38      	cmp	r3, #56	; 0x38
   15414:	dc00      	bgt.n	15418 <__aeabi_dsub+0x1b4>
   15416:	e0fd      	b.n	15614 <__aeabi_dsub+0x3b0>
   15418:	430a      	orrs	r2, r1
   1541a:	0017      	movs	r7, r2
   1541c:	2100      	movs	r1, #0
   1541e:	1e7a      	subs	r2, r7, #1
   15420:	4197      	sbcs	r7, r2
   15422:	4457      	add	r7, sl
   15424:	4557      	cmp	r7, sl
   15426:	4180      	sbcs	r0, r0
   15428:	1909      	adds	r1, r1, r4
   1542a:	4244      	negs	r4, r0
   1542c:	190c      	adds	r4, r1, r4
   1542e:	0223      	lsls	r3, r4, #8
   15430:	d53a      	bpl.n	154a8 <__aeabi_dsub+0x244>
   15432:	4b5d      	ldr	r3, [pc, #372]	; (155a8 <__aeabi_dsub+0x344>)
   15434:	3601      	adds	r6, #1
   15436:	429e      	cmp	r6, r3
   15438:	d100      	bne.n	1543c <__aeabi_dsub+0x1d8>
   1543a:	e14b      	b.n	156d4 <__aeabi_dsub+0x470>
   1543c:	2201      	movs	r2, #1
   1543e:	4b5b      	ldr	r3, [pc, #364]	; (155ac <__aeabi_dsub+0x348>)
   15440:	401c      	ands	r4, r3
   15442:	087b      	lsrs	r3, r7, #1
   15444:	4017      	ands	r7, r2
   15446:	431f      	orrs	r7, r3
   15448:	07e2      	lsls	r2, r4, #31
   1544a:	4317      	orrs	r7, r2
   1544c:	0864      	lsrs	r4, r4, #1
   1544e:	e78f      	b.n	15370 <__aeabi_dsub+0x10c>
   15450:	0008      	movs	r0, r1
   15452:	4310      	orrs	r0, r2
   15454:	d000      	beq.n	15458 <__aeabi_dsub+0x1f4>
   15456:	e724      	b.n	152a2 <__aeabi_dsub+0x3e>
   15458:	e721      	b.n	1529e <__aeabi_dsub+0x3a>
   1545a:	0023      	movs	r3, r4
   1545c:	433b      	orrs	r3, r7
   1545e:	d100      	bne.n	15462 <__aeabi_dsub+0x1fe>
   15460:	e1b9      	b.n	157d6 <__aeabi_dsub+0x572>
   15462:	2280      	movs	r2, #128	; 0x80
   15464:	0312      	lsls	r2, r2, #12
   15466:	4314      	orrs	r4, r2
   15468:	0324      	lsls	r4, r4, #12
   1546a:	0b24      	lsrs	r4, r4, #12
   1546c:	e79f      	b.n	153ae <__aeabi_dsub+0x14a>
   1546e:	002e      	movs	r6, r5
   15470:	e77e      	b.n	15370 <__aeabi_dsub+0x10c>
   15472:	0008      	movs	r0, r1
   15474:	4310      	orrs	r0, r2
   15476:	d100      	bne.n	1547a <__aeabi_dsub+0x216>
   15478:	e0ca      	b.n	15610 <__aeabi_dsub+0x3ac>
   1547a:	1e58      	subs	r0, r3, #1
   1547c:	4684      	mov	ip, r0
   1547e:	2800      	cmp	r0, #0
   15480:	d000      	beq.n	15484 <__aeabi_dsub+0x220>
   15482:	e0e7      	b.n	15654 <__aeabi_dsub+0x3f0>
   15484:	4452      	add	r2, sl
   15486:	4552      	cmp	r2, sl
   15488:	4180      	sbcs	r0, r0
   1548a:	1864      	adds	r4, r4, r1
   1548c:	4240      	negs	r0, r0
   1548e:	1824      	adds	r4, r4, r0
   15490:	0017      	movs	r7, r2
   15492:	2601      	movs	r6, #1
   15494:	0223      	lsls	r3, r4, #8
   15496:	d507      	bpl.n	154a8 <__aeabi_dsub+0x244>
   15498:	2602      	movs	r6, #2
   1549a:	e7cf      	b.n	1543c <__aeabi_dsub+0x1d8>
   1549c:	4664      	mov	r4, ip
   1549e:	432c      	orrs	r4, r5
   154a0:	d100      	bne.n	154a4 <__aeabi_dsub+0x240>
   154a2:	e1b3      	b.n	1580c <__aeabi_dsub+0x5a8>
   154a4:	002c      	movs	r4, r5
   154a6:	4667      	mov	r7, ip
   154a8:	077b      	lsls	r3, r7, #29
   154aa:	d000      	beq.n	154ae <__aeabi_dsub+0x24a>
   154ac:	e762      	b.n	15374 <__aeabi_dsub+0x110>
   154ae:	0763      	lsls	r3, r4, #29
   154b0:	08ff      	lsrs	r7, r7, #3
   154b2:	431f      	orrs	r7, r3
   154b4:	2501      	movs	r5, #1
   154b6:	4643      	mov	r3, r8
   154b8:	08e4      	lsrs	r4, r4, #3
   154ba:	401d      	ands	r5, r3
   154bc:	e793      	b.n	153e6 <__aeabi_dsub+0x182>
   154be:	2d00      	cmp	r5, #0
   154c0:	d178      	bne.n	155b4 <__aeabi_dsub+0x350>
   154c2:	1c75      	adds	r5, r6, #1
   154c4:	056d      	lsls	r5, r5, #21
   154c6:	0d6d      	lsrs	r5, r5, #21
   154c8:	2d01      	cmp	r5, #1
   154ca:	dc00      	bgt.n	154ce <__aeabi_dsub+0x26a>
   154cc:	e0f2      	b.n	156b4 <__aeabi_dsub+0x450>
   154ce:	4650      	mov	r0, sl
   154d0:	1a80      	subs	r0, r0, r2
   154d2:	4582      	cmp	sl, r0
   154d4:	41bf      	sbcs	r7, r7
   154d6:	1a65      	subs	r5, r4, r1
   154d8:	427f      	negs	r7, r7
   154da:	1bed      	subs	r5, r5, r7
   154dc:	4684      	mov	ip, r0
   154de:	0228      	lsls	r0, r5, #8
   154e0:	d400      	bmi.n	154e4 <__aeabi_dsub+0x280>
   154e2:	e08c      	b.n	155fe <__aeabi_dsub+0x39a>
   154e4:	4650      	mov	r0, sl
   154e6:	1a17      	subs	r7, r2, r0
   154e8:	42ba      	cmp	r2, r7
   154ea:	4192      	sbcs	r2, r2
   154ec:	1b0c      	subs	r4, r1, r4
   154ee:	4255      	negs	r5, r2
   154f0:	1b65      	subs	r5, r4, r5
   154f2:	4698      	mov	r8, r3
   154f4:	e714      	b.n	15320 <__aeabi_dsub+0xbc>
   154f6:	2501      	movs	r5, #1
   154f8:	4643      	mov	r3, r8
   154fa:	2400      	movs	r4, #0
   154fc:	401d      	ands	r5, r3
   154fe:	2700      	movs	r7, #0
   15500:	e755      	b.n	153ae <__aeabi_dsub+0x14a>
   15502:	4c2a      	ldr	r4, [pc, #168]	; (155ac <__aeabi_dsub+0x348>)
   15504:	1af6      	subs	r6, r6, r3
   15506:	402c      	ands	r4, r5
   15508:	e732      	b.n	15370 <__aeabi_dsub+0x10c>
   1550a:	003d      	movs	r5, r7
   1550c:	3828      	subs	r0, #40	; 0x28
   1550e:	4085      	lsls	r5, r0
   15510:	2700      	movs	r7, #0
   15512:	e717      	b.n	15344 <__aeabi_dsub+0xe0>
   15514:	0038      	movs	r0, r7
   15516:	f000 fb45 	bl	15ba4 <__clzsi2>
   1551a:	3020      	adds	r0, #32
   1551c:	e706      	b.n	1532c <__aeabi_dsub+0xc8>
   1551e:	430a      	orrs	r2, r1
   15520:	0017      	movs	r7, r2
   15522:	2100      	movs	r1, #0
   15524:	1e7a      	subs	r2, r7, #1
   15526:	4197      	sbcs	r7, r2
   15528:	e6ee      	b.n	15308 <__aeabi_dsub+0xa4>
   1552a:	2b00      	cmp	r3, #0
   1552c:	d000      	beq.n	15530 <__aeabi_dsub+0x2cc>
   1552e:	e0e5      	b.n	156fc <__aeabi_dsub+0x498>
   15530:	1c73      	adds	r3, r6, #1
   15532:	469c      	mov	ip, r3
   15534:	055b      	lsls	r3, r3, #21
   15536:	0d5b      	lsrs	r3, r3, #21
   15538:	2b01      	cmp	r3, #1
   1553a:	dc00      	bgt.n	1553e <__aeabi_dsub+0x2da>
   1553c:	e09f      	b.n	1567e <__aeabi_dsub+0x41a>
   1553e:	4b1a      	ldr	r3, [pc, #104]	; (155a8 <__aeabi_dsub+0x344>)
   15540:	459c      	cmp	ip, r3
   15542:	d100      	bne.n	15546 <__aeabi_dsub+0x2e2>
   15544:	e0c5      	b.n	156d2 <__aeabi_dsub+0x46e>
   15546:	4452      	add	r2, sl
   15548:	4552      	cmp	r2, sl
   1554a:	4180      	sbcs	r0, r0
   1554c:	1864      	adds	r4, r4, r1
   1554e:	4240      	negs	r0, r0
   15550:	1824      	adds	r4, r4, r0
   15552:	07e7      	lsls	r7, r4, #31
   15554:	0852      	lsrs	r2, r2, #1
   15556:	4317      	orrs	r7, r2
   15558:	0864      	lsrs	r4, r4, #1
   1555a:	4666      	mov	r6, ip
   1555c:	e708      	b.n	15370 <__aeabi_dsub+0x10c>
   1555e:	4812      	ldr	r0, [pc, #72]	; (155a8 <__aeabi_dsub+0x344>)
   15560:	4285      	cmp	r5, r0
   15562:	d100      	bne.n	15566 <__aeabi_dsub+0x302>
   15564:	e085      	b.n	15672 <__aeabi_dsub+0x40e>
   15566:	001d      	movs	r5, r3
   15568:	e6bc      	b.n	152e4 <__aeabi_dsub+0x80>
   1556a:	0029      	movs	r1, r5
   1556c:	3e1f      	subs	r6, #31
   1556e:	40f1      	lsrs	r1, r6
   15570:	2b20      	cmp	r3, #32
   15572:	d100      	bne.n	15576 <__aeabi_dsub+0x312>
   15574:	e07f      	b.n	15676 <__aeabi_dsub+0x412>
   15576:	2240      	movs	r2, #64	; 0x40
   15578:	1ad3      	subs	r3, r2, r3
   1557a:	409d      	lsls	r5, r3
   1557c:	432f      	orrs	r7, r5
   1557e:	1e7d      	subs	r5, r7, #1
   15580:	41af      	sbcs	r7, r5
   15582:	2400      	movs	r4, #0
   15584:	430f      	orrs	r7, r1
   15586:	2600      	movs	r6, #0
   15588:	e78e      	b.n	154a8 <__aeabi_dsub+0x244>
   1558a:	002b      	movs	r3, r5
   1558c:	000f      	movs	r7, r1
   1558e:	3b20      	subs	r3, #32
   15590:	40df      	lsrs	r7, r3
   15592:	2d20      	cmp	r5, #32
   15594:	d071      	beq.n	1567a <__aeabi_dsub+0x416>
   15596:	2340      	movs	r3, #64	; 0x40
   15598:	1b5d      	subs	r5, r3, r5
   1559a:	40a9      	lsls	r1, r5
   1559c:	430a      	orrs	r2, r1
   1559e:	1e51      	subs	r1, r2, #1
   155a0:	418a      	sbcs	r2, r1
   155a2:	2100      	movs	r1, #0
   155a4:	4317      	orrs	r7, r2
   155a6:	e6af      	b.n	15308 <__aeabi_dsub+0xa4>
   155a8:	000007ff 	.word	0x000007ff
   155ac:	ff7fffff 	.word	0xff7fffff
   155b0:	800fffff 	.word	0x800fffff
   155b4:	2e00      	cmp	r6, #0
   155b6:	d03e      	beq.n	15636 <__aeabi_dsub+0x3d2>
   155b8:	4eb3      	ldr	r6, [pc, #716]	; (15888 <__aeabi_dsub+0x624>)
   155ba:	45b4      	cmp	ip, r6
   155bc:	d045      	beq.n	1564a <__aeabi_dsub+0x3e6>
   155be:	2680      	movs	r6, #128	; 0x80
   155c0:	0436      	lsls	r6, r6, #16
   155c2:	426d      	negs	r5, r5
   155c4:	4334      	orrs	r4, r6
   155c6:	2d38      	cmp	r5, #56	; 0x38
   155c8:	dd00      	ble.n	155cc <__aeabi_dsub+0x368>
   155ca:	e0a8      	b.n	1571e <__aeabi_dsub+0x4ba>
   155cc:	2d1f      	cmp	r5, #31
   155ce:	dd00      	ble.n	155d2 <__aeabi_dsub+0x36e>
   155d0:	e11f      	b.n	15812 <__aeabi_dsub+0x5ae>
   155d2:	2620      	movs	r6, #32
   155d4:	0027      	movs	r7, r4
   155d6:	4650      	mov	r0, sl
   155d8:	1b76      	subs	r6, r6, r5
   155da:	40b7      	lsls	r7, r6
   155dc:	40e8      	lsrs	r0, r5
   155de:	4307      	orrs	r7, r0
   155e0:	4650      	mov	r0, sl
   155e2:	40b0      	lsls	r0, r6
   155e4:	1e46      	subs	r6, r0, #1
   155e6:	41b0      	sbcs	r0, r6
   155e8:	40ec      	lsrs	r4, r5
   155ea:	4338      	orrs	r0, r7
   155ec:	1a17      	subs	r7, r2, r0
   155ee:	42ba      	cmp	r2, r7
   155f0:	4192      	sbcs	r2, r2
   155f2:	1b0c      	subs	r4, r1, r4
   155f4:	4252      	negs	r2, r2
   155f6:	1aa4      	subs	r4, r4, r2
   155f8:	4666      	mov	r6, ip
   155fa:	4698      	mov	r8, r3
   155fc:	e68b      	b.n	15316 <__aeabi_dsub+0xb2>
   155fe:	4664      	mov	r4, ip
   15600:	4667      	mov	r7, ip
   15602:	432c      	orrs	r4, r5
   15604:	d000      	beq.n	15608 <__aeabi_dsub+0x3a4>
   15606:	e68b      	b.n	15320 <__aeabi_dsub+0xbc>
   15608:	2500      	movs	r5, #0
   1560a:	2600      	movs	r6, #0
   1560c:	2700      	movs	r7, #0
   1560e:	e6ea      	b.n	153e6 <__aeabi_dsub+0x182>
   15610:	001e      	movs	r6, r3
   15612:	e6ad      	b.n	15370 <__aeabi_dsub+0x10c>
   15614:	2b1f      	cmp	r3, #31
   15616:	dc60      	bgt.n	156da <__aeabi_dsub+0x476>
   15618:	2720      	movs	r7, #32
   1561a:	1af8      	subs	r0, r7, r3
   1561c:	000f      	movs	r7, r1
   1561e:	4684      	mov	ip, r0
   15620:	4087      	lsls	r7, r0
   15622:	0010      	movs	r0, r2
   15624:	40d8      	lsrs	r0, r3
   15626:	4307      	orrs	r7, r0
   15628:	4660      	mov	r0, ip
   1562a:	4082      	lsls	r2, r0
   1562c:	1e50      	subs	r0, r2, #1
   1562e:	4182      	sbcs	r2, r0
   15630:	40d9      	lsrs	r1, r3
   15632:	4317      	orrs	r7, r2
   15634:	e6f5      	b.n	15422 <__aeabi_dsub+0x1be>
   15636:	0026      	movs	r6, r4
   15638:	4650      	mov	r0, sl
   1563a:	4306      	orrs	r6, r0
   1563c:	d005      	beq.n	1564a <__aeabi_dsub+0x3e6>
   1563e:	43ed      	mvns	r5, r5
   15640:	2d00      	cmp	r5, #0
   15642:	d0d3      	beq.n	155ec <__aeabi_dsub+0x388>
   15644:	4e90      	ldr	r6, [pc, #576]	; (15888 <__aeabi_dsub+0x624>)
   15646:	45b4      	cmp	ip, r6
   15648:	d1bd      	bne.n	155c6 <__aeabi_dsub+0x362>
   1564a:	000c      	movs	r4, r1
   1564c:	0017      	movs	r7, r2
   1564e:	4666      	mov	r6, ip
   15650:	4698      	mov	r8, r3
   15652:	e68d      	b.n	15370 <__aeabi_dsub+0x10c>
   15654:	488c      	ldr	r0, [pc, #560]	; (15888 <__aeabi_dsub+0x624>)
   15656:	4283      	cmp	r3, r0
   15658:	d00b      	beq.n	15672 <__aeabi_dsub+0x40e>
   1565a:	4663      	mov	r3, ip
   1565c:	e6d9      	b.n	15412 <__aeabi_dsub+0x1ae>
   1565e:	2d00      	cmp	r5, #0
   15660:	d000      	beq.n	15664 <__aeabi_dsub+0x400>
   15662:	e096      	b.n	15792 <__aeabi_dsub+0x52e>
   15664:	0008      	movs	r0, r1
   15666:	4310      	orrs	r0, r2
   15668:	d100      	bne.n	1566c <__aeabi_dsub+0x408>
   1566a:	e0e2      	b.n	15832 <__aeabi_dsub+0x5ce>
   1566c:	000c      	movs	r4, r1
   1566e:	0017      	movs	r7, r2
   15670:	4698      	mov	r8, r3
   15672:	4e85      	ldr	r6, [pc, #532]	; (15888 <__aeabi_dsub+0x624>)
   15674:	e67c      	b.n	15370 <__aeabi_dsub+0x10c>
   15676:	2500      	movs	r5, #0
   15678:	e780      	b.n	1557c <__aeabi_dsub+0x318>
   1567a:	2100      	movs	r1, #0
   1567c:	e78e      	b.n	1559c <__aeabi_dsub+0x338>
   1567e:	0023      	movs	r3, r4
   15680:	4650      	mov	r0, sl
   15682:	4303      	orrs	r3, r0
   15684:	2e00      	cmp	r6, #0
   15686:	d000      	beq.n	1568a <__aeabi_dsub+0x426>
   15688:	e0a8      	b.n	157dc <__aeabi_dsub+0x578>
   1568a:	2b00      	cmp	r3, #0
   1568c:	d100      	bne.n	15690 <__aeabi_dsub+0x42c>
   1568e:	e0de      	b.n	1584e <__aeabi_dsub+0x5ea>
   15690:	000b      	movs	r3, r1
   15692:	4313      	orrs	r3, r2
   15694:	d100      	bne.n	15698 <__aeabi_dsub+0x434>
   15696:	e66b      	b.n	15370 <__aeabi_dsub+0x10c>
   15698:	4452      	add	r2, sl
   1569a:	4552      	cmp	r2, sl
   1569c:	4180      	sbcs	r0, r0
   1569e:	1864      	adds	r4, r4, r1
   156a0:	4240      	negs	r0, r0
   156a2:	1824      	adds	r4, r4, r0
   156a4:	0017      	movs	r7, r2
   156a6:	0223      	lsls	r3, r4, #8
   156a8:	d400      	bmi.n	156ac <__aeabi_dsub+0x448>
   156aa:	e6fd      	b.n	154a8 <__aeabi_dsub+0x244>
   156ac:	4b77      	ldr	r3, [pc, #476]	; (1588c <__aeabi_dsub+0x628>)
   156ae:	4666      	mov	r6, ip
   156b0:	401c      	ands	r4, r3
   156b2:	e65d      	b.n	15370 <__aeabi_dsub+0x10c>
   156b4:	0025      	movs	r5, r4
   156b6:	4650      	mov	r0, sl
   156b8:	4305      	orrs	r5, r0
   156ba:	2e00      	cmp	r6, #0
   156bc:	d1cf      	bne.n	1565e <__aeabi_dsub+0x3fa>
   156be:	2d00      	cmp	r5, #0
   156c0:	d14f      	bne.n	15762 <__aeabi_dsub+0x4fe>
   156c2:	000c      	movs	r4, r1
   156c4:	4314      	orrs	r4, r2
   156c6:	d100      	bne.n	156ca <__aeabi_dsub+0x466>
   156c8:	e0a0      	b.n	1580c <__aeabi_dsub+0x5a8>
   156ca:	000c      	movs	r4, r1
   156cc:	0017      	movs	r7, r2
   156ce:	4698      	mov	r8, r3
   156d0:	e64e      	b.n	15370 <__aeabi_dsub+0x10c>
   156d2:	4666      	mov	r6, ip
   156d4:	2400      	movs	r4, #0
   156d6:	2700      	movs	r7, #0
   156d8:	e685      	b.n	153e6 <__aeabi_dsub+0x182>
   156da:	001f      	movs	r7, r3
   156dc:	0008      	movs	r0, r1
   156de:	3f20      	subs	r7, #32
   156e0:	40f8      	lsrs	r0, r7
   156e2:	0007      	movs	r7, r0
   156e4:	2b20      	cmp	r3, #32
   156e6:	d100      	bne.n	156ea <__aeabi_dsub+0x486>
   156e8:	e08e      	b.n	15808 <__aeabi_dsub+0x5a4>
   156ea:	2040      	movs	r0, #64	; 0x40
   156ec:	1ac3      	subs	r3, r0, r3
   156ee:	4099      	lsls	r1, r3
   156f0:	430a      	orrs	r2, r1
   156f2:	1e51      	subs	r1, r2, #1
   156f4:	418a      	sbcs	r2, r1
   156f6:	2100      	movs	r1, #0
   156f8:	4317      	orrs	r7, r2
   156fa:	e692      	b.n	15422 <__aeabi_dsub+0x1be>
   156fc:	2e00      	cmp	r6, #0
   156fe:	d114      	bne.n	1572a <__aeabi_dsub+0x4c6>
   15700:	0026      	movs	r6, r4
   15702:	4650      	mov	r0, sl
   15704:	4306      	orrs	r6, r0
   15706:	d062      	beq.n	157ce <__aeabi_dsub+0x56a>
   15708:	43db      	mvns	r3, r3
   1570a:	2b00      	cmp	r3, #0
   1570c:	d15c      	bne.n	157c8 <__aeabi_dsub+0x564>
   1570e:	1887      	adds	r7, r0, r2
   15710:	4297      	cmp	r7, r2
   15712:	4192      	sbcs	r2, r2
   15714:	1864      	adds	r4, r4, r1
   15716:	4252      	negs	r2, r2
   15718:	18a4      	adds	r4, r4, r2
   1571a:	4666      	mov	r6, ip
   1571c:	e687      	b.n	1542e <__aeabi_dsub+0x1ca>
   1571e:	4650      	mov	r0, sl
   15720:	4320      	orrs	r0, r4
   15722:	1e44      	subs	r4, r0, #1
   15724:	41a0      	sbcs	r0, r4
   15726:	2400      	movs	r4, #0
   15728:	e760      	b.n	155ec <__aeabi_dsub+0x388>
   1572a:	4e57      	ldr	r6, [pc, #348]	; (15888 <__aeabi_dsub+0x624>)
   1572c:	45b4      	cmp	ip, r6
   1572e:	d04e      	beq.n	157ce <__aeabi_dsub+0x56a>
   15730:	2680      	movs	r6, #128	; 0x80
   15732:	0436      	lsls	r6, r6, #16
   15734:	425b      	negs	r3, r3
   15736:	4334      	orrs	r4, r6
   15738:	2b38      	cmp	r3, #56	; 0x38
   1573a:	dd00      	ble.n	1573e <__aeabi_dsub+0x4da>
   1573c:	e07f      	b.n	1583e <__aeabi_dsub+0x5da>
   1573e:	2b1f      	cmp	r3, #31
   15740:	dd00      	ble.n	15744 <__aeabi_dsub+0x4e0>
   15742:	e08b      	b.n	1585c <__aeabi_dsub+0x5f8>
   15744:	2620      	movs	r6, #32
   15746:	0027      	movs	r7, r4
   15748:	4650      	mov	r0, sl
   1574a:	1af6      	subs	r6, r6, r3
   1574c:	40b7      	lsls	r7, r6
   1574e:	40d8      	lsrs	r0, r3
   15750:	4307      	orrs	r7, r0
   15752:	4650      	mov	r0, sl
   15754:	40b0      	lsls	r0, r6
   15756:	1e46      	subs	r6, r0, #1
   15758:	41b0      	sbcs	r0, r6
   1575a:	4307      	orrs	r7, r0
   1575c:	40dc      	lsrs	r4, r3
   1575e:	18bf      	adds	r7, r7, r2
   15760:	e7d6      	b.n	15710 <__aeabi_dsub+0x4ac>
   15762:	000d      	movs	r5, r1
   15764:	4315      	orrs	r5, r2
   15766:	d100      	bne.n	1576a <__aeabi_dsub+0x506>
   15768:	e602      	b.n	15370 <__aeabi_dsub+0x10c>
   1576a:	4650      	mov	r0, sl
   1576c:	1a80      	subs	r0, r0, r2
   1576e:	4582      	cmp	sl, r0
   15770:	41bf      	sbcs	r7, r7
   15772:	1a65      	subs	r5, r4, r1
   15774:	427f      	negs	r7, r7
   15776:	1bed      	subs	r5, r5, r7
   15778:	4684      	mov	ip, r0
   1577a:	0228      	lsls	r0, r5, #8
   1577c:	d400      	bmi.n	15780 <__aeabi_dsub+0x51c>
   1577e:	e68d      	b.n	1549c <__aeabi_dsub+0x238>
   15780:	4650      	mov	r0, sl
   15782:	1a17      	subs	r7, r2, r0
   15784:	42ba      	cmp	r2, r7
   15786:	4192      	sbcs	r2, r2
   15788:	1b0c      	subs	r4, r1, r4
   1578a:	4252      	negs	r2, r2
   1578c:	1aa4      	subs	r4, r4, r2
   1578e:	4698      	mov	r8, r3
   15790:	e5ee      	b.n	15370 <__aeabi_dsub+0x10c>
   15792:	000d      	movs	r5, r1
   15794:	4315      	orrs	r5, r2
   15796:	d100      	bne.n	1579a <__aeabi_dsub+0x536>
   15798:	e76b      	b.n	15672 <__aeabi_dsub+0x40e>
   1579a:	4650      	mov	r0, sl
   1579c:	0767      	lsls	r7, r4, #29
   1579e:	08c0      	lsrs	r0, r0, #3
   157a0:	4307      	orrs	r7, r0
   157a2:	2080      	movs	r0, #128	; 0x80
   157a4:	08e4      	lsrs	r4, r4, #3
   157a6:	0300      	lsls	r0, r0, #12
   157a8:	4204      	tst	r4, r0
   157aa:	d007      	beq.n	157bc <__aeabi_dsub+0x558>
   157ac:	08cd      	lsrs	r5, r1, #3
   157ae:	4205      	tst	r5, r0
   157b0:	d104      	bne.n	157bc <__aeabi_dsub+0x558>
   157b2:	002c      	movs	r4, r5
   157b4:	4698      	mov	r8, r3
   157b6:	08d7      	lsrs	r7, r2, #3
   157b8:	0749      	lsls	r1, r1, #29
   157ba:	430f      	orrs	r7, r1
   157bc:	0f7b      	lsrs	r3, r7, #29
   157be:	00e4      	lsls	r4, r4, #3
   157c0:	431c      	orrs	r4, r3
   157c2:	00ff      	lsls	r7, r7, #3
   157c4:	4e30      	ldr	r6, [pc, #192]	; (15888 <__aeabi_dsub+0x624>)
   157c6:	e5d3      	b.n	15370 <__aeabi_dsub+0x10c>
   157c8:	4e2f      	ldr	r6, [pc, #188]	; (15888 <__aeabi_dsub+0x624>)
   157ca:	45b4      	cmp	ip, r6
   157cc:	d1b4      	bne.n	15738 <__aeabi_dsub+0x4d4>
   157ce:	000c      	movs	r4, r1
   157d0:	0017      	movs	r7, r2
   157d2:	4666      	mov	r6, ip
   157d4:	e5cc      	b.n	15370 <__aeabi_dsub+0x10c>
   157d6:	2700      	movs	r7, #0
   157d8:	2400      	movs	r4, #0
   157da:	e5e8      	b.n	153ae <__aeabi_dsub+0x14a>
   157dc:	2b00      	cmp	r3, #0
   157de:	d039      	beq.n	15854 <__aeabi_dsub+0x5f0>
   157e0:	000b      	movs	r3, r1
   157e2:	4313      	orrs	r3, r2
   157e4:	d100      	bne.n	157e8 <__aeabi_dsub+0x584>
   157e6:	e744      	b.n	15672 <__aeabi_dsub+0x40e>
   157e8:	08c0      	lsrs	r0, r0, #3
   157ea:	0767      	lsls	r7, r4, #29
   157ec:	4307      	orrs	r7, r0
   157ee:	2080      	movs	r0, #128	; 0x80
   157f0:	08e4      	lsrs	r4, r4, #3
   157f2:	0300      	lsls	r0, r0, #12
   157f4:	4204      	tst	r4, r0
   157f6:	d0e1      	beq.n	157bc <__aeabi_dsub+0x558>
   157f8:	08cb      	lsrs	r3, r1, #3
   157fa:	4203      	tst	r3, r0
   157fc:	d1de      	bne.n	157bc <__aeabi_dsub+0x558>
   157fe:	08d7      	lsrs	r7, r2, #3
   15800:	0749      	lsls	r1, r1, #29
   15802:	430f      	orrs	r7, r1
   15804:	001c      	movs	r4, r3
   15806:	e7d9      	b.n	157bc <__aeabi_dsub+0x558>
   15808:	2100      	movs	r1, #0
   1580a:	e771      	b.n	156f0 <__aeabi_dsub+0x48c>
   1580c:	2500      	movs	r5, #0
   1580e:	2700      	movs	r7, #0
   15810:	e5e9      	b.n	153e6 <__aeabi_dsub+0x182>
   15812:	002e      	movs	r6, r5
   15814:	0027      	movs	r7, r4
   15816:	3e20      	subs	r6, #32
   15818:	40f7      	lsrs	r7, r6
   1581a:	2d20      	cmp	r5, #32
   1581c:	d02f      	beq.n	1587e <__aeabi_dsub+0x61a>
   1581e:	2640      	movs	r6, #64	; 0x40
   15820:	1b75      	subs	r5, r6, r5
   15822:	40ac      	lsls	r4, r5
   15824:	4650      	mov	r0, sl
   15826:	4320      	orrs	r0, r4
   15828:	1e44      	subs	r4, r0, #1
   1582a:	41a0      	sbcs	r0, r4
   1582c:	2400      	movs	r4, #0
   1582e:	4338      	orrs	r0, r7
   15830:	e6dc      	b.n	155ec <__aeabi_dsub+0x388>
   15832:	2480      	movs	r4, #128	; 0x80
   15834:	2500      	movs	r5, #0
   15836:	0324      	lsls	r4, r4, #12
   15838:	4e13      	ldr	r6, [pc, #76]	; (15888 <__aeabi_dsub+0x624>)
   1583a:	2700      	movs	r7, #0
   1583c:	e5d3      	b.n	153e6 <__aeabi_dsub+0x182>
   1583e:	4650      	mov	r0, sl
   15840:	4320      	orrs	r0, r4
   15842:	0007      	movs	r7, r0
   15844:	1e78      	subs	r0, r7, #1
   15846:	4187      	sbcs	r7, r0
   15848:	2400      	movs	r4, #0
   1584a:	18bf      	adds	r7, r7, r2
   1584c:	e760      	b.n	15710 <__aeabi_dsub+0x4ac>
   1584e:	000c      	movs	r4, r1
   15850:	0017      	movs	r7, r2
   15852:	e58d      	b.n	15370 <__aeabi_dsub+0x10c>
   15854:	000c      	movs	r4, r1
   15856:	0017      	movs	r7, r2
   15858:	4e0b      	ldr	r6, [pc, #44]	; (15888 <__aeabi_dsub+0x624>)
   1585a:	e589      	b.n	15370 <__aeabi_dsub+0x10c>
   1585c:	001e      	movs	r6, r3
   1585e:	0027      	movs	r7, r4
   15860:	3e20      	subs	r6, #32
   15862:	40f7      	lsrs	r7, r6
   15864:	2b20      	cmp	r3, #32
   15866:	d00c      	beq.n	15882 <__aeabi_dsub+0x61e>
   15868:	2640      	movs	r6, #64	; 0x40
   1586a:	1af3      	subs	r3, r6, r3
   1586c:	409c      	lsls	r4, r3
   1586e:	4650      	mov	r0, sl
   15870:	4320      	orrs	r0, r4
   15872:	1e44      	subs	r4, r0, #1
   15874:	41a0      	sbcs	r0, r4
   15876:	4307      	orrs	r7, r0
   15878:	2400      	movs	r4, #0
   1587a:	18bf      	adds	r7, r7, r2
   1587c:	e748      	b.n	15710 <__aeabi_dsub+0x4ac>
   1587e:	2400      	movs	r4, #0
   15880:	e7d0      	b.n	15824 <__aeabi_dsub+0x5c0>
   15882:	2400      	movs	r4, #0
   15884:	e7f3      	b.n	1586e <__aeabi_dsub+0x60a>
   15886:	46c0      	nop			; (mov r8, r8)
   15888:	000007ff 	.word	0x000007ff
   1588c:	ff7fffff 	.word	0xff7fffff

00015890 <__aeabi_d2iz>:
   15890:	b530      	push	{r4, r5, lr}
   15892:	4d13      	ldr	r5, [pc, #76]	; (158e0 <__aeabi_d2iz+0x50>)
   15894:	030a      	lsls	r2, r1, #12
   15896:	004b      	lsls	r3, r1, #1
   15898:	0b12      	lsrs	r2, r2, #12
   1589a:	0d5b      	lsrs	r3, r3, #21
   1589c:	0fc9      	lsrs	r1, r1, #31
   1589e:	2400      	movs	r4, #0
   158a0:	42ab      	cmp	r3, r5
   158a2:	dd10      	ble.n	158c6 <__aeabi_d2iz+0x36>
   158a4:	4c0f      	ldr	r4, [pc, #60]	; (158e4 <__aeabi_d2iz+0x54>)
   158a6:	42a3      	cmp	r3, r4
   158a8:	dc0f      	bgt.n	158ca <__aeabi_d2iz+0x3a>
   158aa:	2480      	movs	r4, #128	; 0x80
   158ac:	4d0e      	ldr	r5, [pc, #56]	; (158e8 <__aeabi_d2iz+0x58>)
   158ae:	0364      	lsls	r4, r4, #13
   158b0:	4322      	orrs	r2, r4
   158b2:	1aed      	subs	r5, r5, r3
   158b4:	2d1f      	cmp	r5, #31
   158b6:	dd0b      	ble.n	158d0 <__aeabi_d2iz+0x40>
   158b8:	480c      	ldr	r0, [pc, #48]	; (158ec <__aeabi_d2iz+0x5c>)
   158ba:	1ac3      	subs	r3, r0, r3
   158bc:	40da      	lsrs	r2, r3
   158be:	4254      	negs	r4, r2
   158c0:	2900      	cmp	r1, #0
   158c2:	d100      	bne.n	158c6 <__aeabi_d2iz+0x36>
   158c4:	0014      	movs	r4, r2
   158c6:	0020      	movs	r0, r4
   158c8:	bd30      	pop	{r4, r5, pc}
   158ca:	4b09      	ldr	r3, [pc, #36]	; (158f0 <__aeabi_d2iz+0x60>)
   158cc:	18cc      	adds	r4, r1, r3
   158ce:	e7fa      	b.n	158c6 <__aeabi_d2iz+0x36>
   158d0:	4c08      	ldr	r4, [pc, #32]	; (158f4 <__aeabi_d2iz+0x64>)
   158d2:	40e8      	lsrs	r0, r5
   158d4:	46a4      	mov	ip, r4
   158d6:	4463      	add	r3, ip
   158d8:	409a      	lsls	r2, r3
   158da:	4302      	orrs	r2, r0
   158dc:	e7ef      	b.n	158be <__aeabi_d2iz+0x2e>
   158de:	46c0      	nop			; (mov r8, r8)
   158e0:	000003fe 	.word	0x000003fe
   158e4:	0000041d 	.word	0x0000041d
   158e8:	00000433 	.word	0x00000433
   158ec:	00000413 	.word	0x00000413
   158f0:	7fffffff 	.word	0x7fffffff
   158f4:	fffffbed 	.word	0xfffffbed

000158f8 <__aeabi_i2d>:
   158f8:	b570      	push	{r4, r5, r6, lr}
   158fa:	2800      	cmp	r0, #0
   158fc:	d030      	beq.n	15960 <__aeabi_i2d+0x68>
   158fe:	17c3      	asrs	r3, r0, #31
   15900:	18c4      	adds	r4, r0, r3
   15902:	405c      	eors	r4, r3
   15904:	0fc5      	lsrs	r5, r0, #31
   15906:	0020      	movs	r0, r4
   15908:	f000 f94c 	bl	15ba4 <__clzsi2>
   1590c:	4b17      	ldr	r3, [pc, #92]	; (1596c <__aeabi_i2d+0x74>)
   1590e:	4a18      	ldr	r2, [pc, #96]	; (15970 <__aeabi_i2d+0x78>)
   15910:	1a1b      	subs	r3, r3, r0
   15912:	1ad2      	subs	r2, r2, r3
   15914:	2a1f      	cmp	r2, #31
   15916:	dd18      	ble.n	1594a <__aeabi_i2d+0x52>
   15918:	4a16      	ldr	r2, [pc, #88]	; (15974 <__aeabi_i2d+0x7c>)
   1591a:	1ad2      	subs	r2, r2, r3
   1591c:	4094      	lsls	r4, r2
   1591e:	2200      	movs	r2, #0
   15920:	0324      	lsls	r4, r4, #12
   15922:	055b      	lsls	r3, r3, #21
   15924:	0b24      	lsrs	r4, r4, #12
   15926:	0d5b      	lsrs	r3, r3, #21
   15928:	2100      	movs	r1, #0
   1592a:	0010      	movs	r0, r2
   1592c:	0324      	lsls	r4, r4, #12
   1592e:	0d0a      	lsrs	r2, r1, #20
   15930:	0b24      	lsrs	r4, r4, #12
   15932:	0512      	lsls	r2, r2, #20
   15934:	4322      	orrs	r2, r4
   15936:	4c10      	ldr	r4, [pc, #64]	; (15978 <__aeabi_i2d+0x80>)
   15938:	051b      	lsls	r3, r3, #20
   1593a:	4022      	ands	r2, r4
   1593c:	4313      	orrs	r3, r2
   1593e:	005b      	lsls	r3, r3, #1
   15940:	07ed      	lsls	r5, r5, #31
   15942:	085b      	lsrs	r3, r3, #1
   15944:	432b      	orrs	r3, r5
   15946:	0019      	movs	r1, r3
   15948:	bd70      	pop	{r4, r5, r6, pc}
   1594a:	0021      	movs	r1, r4
   1594c:	4091      	lsls	r1, r2
   1594e:	000a      	movs	r2, r1
   15950:	210b      	movs	r1, #11
   15952:	1a08      	subs	r0, r1, r0
   15954:	40c4      	lsrs	r4, r0
   15956:	055b      	lsls	r3, r3, #21
   15958:	0324      	lsls	r4, r4, #12
   1595a:	0b24      	lsrs	r4, r4, #12
   1595c:	0d5b      	lsrs	r3, r3, #21
   1595e:	e7e3      	b.n	15928 <__aeabi_i2d+0x30>
   15960:	2500      	movs	r5, #0
   15962:	2300      	movs	r3, #0
   15964:	2400      	movs	r4, #0
   15966:	2200      	movs	r2, #0
   15968:	e7de      	b.n	15928 <__aeabi_i2d+0x30>
   1596a:	46c0      	nop			; (mov r8, r8)
   1596c:	0000041e 	.word	0x0000041e
   15970:	00000433 	.word	0x00000433
   15974:	00000413 	.word	0x00000413
   15978:	800fffff 	.word	0x800fffff

0001597c <__aeabi_ui2d>:
   1597c:	b510      	push	{r4, lr}
   1597e:	1e04      	subs	r4, r0, #0
   15980:	d028      	beq.n	159d4 <__aeabi_ui2d+0x58>
   15982:	f000 f90f 	bl	15ba4 <__clzsi2>
   15986:	4b15      	ldr	r3, [pc, #84]	; (159dc <__aeabi_ui2d+0x60>)
   15988:	4a15      	ldr	r2, [pc, #84]	; (159e0 <__aeabi_ui2d+0x64>)
   1598a:	1a1b      	subs	r3, r3, r0
   1598c:	1ad2      	subs	r2, r2, r3
   1598e:	2a1f      	cmp	r2, #31
   15990:	dd15      	ble.n	159be <__aeabi_ui2d+0x42>
   15992:	4a14      	ldr	r2, [pc, #80]	; (159e4 <__aeabi_ui2d+0x68>)
   15994:	1ad2      	subs	r2, r2, r3
   15996:	4094      	lsls	r4, r2
   15998:	2200      	movs	r2, #0
   1599a:	0324      	lsls	r4, r4, #12
   1599c:	055b      	lsls	r3, r3, #21
   1599e:	0b24      	lsrs	r4, r4, #12
   159a0:	0d5b      	lsrs	r3, r3, #21
   159a2:	2100      	movs	r1, #0
   159a4:	0010      	movs	r0, r2
   159a6:	0324      	lsls	r4, r4, #12
   159a8:	0d0a      	lsrs	r2, r1, #20
   159aa:	0b24      	lsrs	r4, r4, #12
   159ac:	0512      	lsls	r2, r2, #20
   159ae:	4322      	orrs	r2, r4
   159b0:	4c0d      	ldr	r4, [pc, #52]	; (159e8 <__aeabi_ui2d+0x6c>)
   159b2:	051b      	lsls	r3, r3, #20
   159b4:	4022      	ands	r2, r4
   159b6:	4313      	orrs	r3, r2
   159b8:	005b      	lsls	r3, r3, #1
   159ba:	0859      	lsrs	r1, r3, #1
   159bc:	bd10      	pop	{r4, pc}
   159be:	0021      	movs	r1, r4
   159c0:	4091      	lsls	r1, r2
   159c2:	000a      	movs	r2, r1
   159c4:	210b      	movs	r1, #11
   159c6:	1a08      	subs	r0, r1, r0
   159c8:	40c4      	lsrs	r4, r0
   159ca:	055b      	lsls	r3, r3, #21
   159cc:	0324      	lsls	r4, r4, #12
   159ce:	0b24      	lsrs	r4, r4, #12
   159d0:	0d5b      	lsrs	r3, r3, #21
   159d2:	e7e6      	b.n	159a2 <__aeabi_ui2d+0x26>
   159d4:	2300      	movs	r3, #0
   159d6:	2400      	movs	r4, #0
   159d8:	2200      	movs	r2, #0
   159da:	e7e2      	b.n	159a2 <__aeabi_ui2d+0x26>
   159dc:	0000041e 	.word	0x0000041e
   159e0:	00000433 	.word	0x00000433
   159e4:	00000413 	.word	0x00000413
   159e8:	800fffff 	.word	0x800fffff

000159ec <__aeabi_f2d>:
   159ec:	0041      	lsls	r1, r0, #1
   159ee:	0e09      	lsrs	r1, r1, #24
   159f0:	1c4b      	adds	r3, r1, #1
   159f2:	b570      	push	{r4, r5, r6, lr}
   159f4:	b2db      	uxtb	r3, r3
   159f6:	0246      	lsls	r6, r0, #9
   159f8:	0a75      	lsrs	r5, r6, #9
   159fa:	0fc4      	lsrs	r4, r0, #31
   159fc:	2b01      	cmp	r3, #1
   159fe:	dd14      	ble.n	15a2a <__aeabi_f2d+0x3e>
   15a00:	23e0      	movs	r3, #224	; 0xe0
   15a02:	009b      	lsls	r3, r3, #2
   15a04:	076d      	lsls	r5, r5, #29
   15a06:	0b36      	lsrs	r6, r6, #12
   15a08:	18cb      	adds	r3, r1, r3
   15a0a:	2100      	movs	r1, #0
   15a0c:	0d0a      	lsrs	r2, r1, #20
   15a0e:	0028      	movs	r0, r5
   15a10:	0512      	lsls	r2, r2, #20
   15a12:	4d1c      	ldr	r5, [pc, #112]	; (15a84 <__aeabi_f2d+0x98>)
   15a14:	4332      	orrs	r2, r6
   15a16:	055b      	lsls	r3, r3, #21
   15a18:	402a      	ands	r2, r5
   15a1a:	085b      	lsrs	r3, r3, #1
   15a1c:	4313      	orrs	r3, r2
   15a1e:	005b      	lsls	r3, r3, #1
   15a20:	07e4      	lsls	r4, r4, #31
   15a22:	085b      	lsrs	r3, r3, #1
   15a24:	4323      	orrs	r3, r4
   15a26:	0019      	movs	r1, r3
   15a28:	bd70      	pop	{r4, r5, r6, pc}
   15a2a:	2900      	cmp	r1, #0
   15a2c:	d114      	bne.n	15a58 <__aeabi_f2d+0x6c>
   15a2e:	2d00      	cmp	r5, #0
   15a30:	d01e      	beq.n	15a70 <__aeabi_f2d+0x84>
   15a32:	0028      	movs	r0, r5
   15a34:	f000 f8b6 	bl	15ba4 <__clzsi2>
   15a38:	280a      	cmp	r0, #10
   15a3a:	dc1c      	bgt.n	15a76 <__aeabi_f2d+0x8a>
   15a3c:	230b      	movs	r3, #11
   15a3e:	002a      	movs	r2, r5
   15a40:	1a1b      	subs	r3, r3, r0
   15a42:	40da      	lsrs	r2, r3
   15a44:	0003      	movs	r3, r0
   15a46:	3315      	adds	r3, #21
   15a48:	409d      	lsls	r5, r3
   15a4a:	4b0f      	ldr	r3, [pc, #60]	; (15a88 <__aeabi_f2d+0x9c>)
   15a4c:	0312      	lsls	r2, r2, #12
   15a4e:	1a1b      	subs	r3, r3, r0
   15a50:	055b      	lsls	r3, r3, #21
   15a52:	0b16      	lsrs	r6, r2, #12
   15a54:	0d5b      	lsrs	r3, r3, #21
   15a56:	e7d8      	b.n	15a0a <__aeabi_f2d+0x1e>
   15a58:	2d00      	cmp	r5, #0
   15a5a:	d006      	beq.n	15a6a <__aeabi_f2d+0x7e>
   15a5c:	0b32      	lsrs	r2, r6, #12
   15a5e:	2680      	movs	r6, #128	; 0x80
   15a60:	0336      	lsls	r6, r6, #12
   15a62:	076d      	lsls	r5, r5, #29
   15a64:	4316      	orrs	r6, r2
   15a66:	4b09      	ldr	r3, [pc, #36]	; (15a8c <__aeabi_f2d+0xa0>)
   15a68:	e7cf      	b.n	15a0a <__aeabi_f2d+0x1e>
   15a6a:	4b08      	ldr	r3, [pc, #32]	; (15a8c <__aeabi_f2d+0xa0>)
   15a6c:	2600      	movs	r6, #0
   15a6e:	e7cc      	b.n	15a0a <__aeabi_f2d+0x1e>
   15a70:	2300      	movs	r3, #0
   15a72:	2600      	movs	r6, #0
   15a74:	e7c9      	b.n	15a0a <__aeabi_f2d+0x1e>
   15a76:	0003      	movs	r3, r0
   15a78:	002a      	movs	r2, r5
   15a7a:	3b0b      	subs	r3, #11
   15a7c:	409a      	lsls	r2, r3
   15a7e:	2500      	movs	r5, #0
   15a80:	e7e3      	b.n	15a4a <__aeabi_f2d+0x5e>
   15a82:	46c0      	nop			; (mov r8, r8)
   15a84:	800fffff 	.word	0x800fffff
   15a88:	00000389 	.word	0x00000389
   15a8c:	000007ff 	.word	0x000007ff

00015a90 <__aeabi_d2f>:
   15a90:	b5f0      	push	{r4, r5, r6, r7, lr}
   15a92:	004c      	lsls	r4, r1, #1
   15a94:	0d64      	lsrs	r4, r4, #21
   15a96:	030b      	lsls	r3, r1, #12
   15a98:	1c62      	adds	r2, r4, #1
   15a9a:	0f45      	lsrs	r5, r0, #29
   15a9c:	0a5b      	lsrs	r3, r3, #9
   15a9e:	0552      	lsls	r2, r2, #21
   15aa0:	432b      	orrs	r3, r5
   15aa2:	0fc9      	lsrs	r1, r1, #31
   15aa4:	00c5      	lsls	r5, r0, #3
   15aa6:	0d52      	lsrs	r2, r2, #21
   15aa8:	2a01      	cmp	r2, #1
   15aaa:	dd28      	ble.n	15afe <__aeabi_d2f+0x6e>
   15aac:	4a3a      	ldr	r2, [pc, #232]	; (15b98 <__aeabi_d2f+0x108>)
   15aae:	18a6      	adds	r6, r4, r2
   15ab0:	2efe      	cmp	r6, #254	; 0xfe
   15ab2:	dc1b      	bgt.n	15aec <__aeabi_d2f+0x5c>
   15ab4:	2e00      	cmp	r6, #0
   15ab6:	dd3e      	ble.n	15b36 <__aeabi_d2f+0xa6>
   15ab8:	0180      	lsls	r0, r0, #6
   15aba:	0002      	movs	r2, r0
   15abc:	1e50      	subs	r0, r2, #1
   15abe:	4182      	sbcs	r2, r0
   15ac0:	0f6d      	lsrs	r5, r5, #29
   15ac2:	432a      	orrs	r2, r5
   15ac4:	00db      	lsls	r3, r3, #3
   15ac6:	4313      	orrs	r3, r2
   15ac8:	075a      	lsls	r2, r3, #29
   15aca:	d004      	beq.n	15ad6 <__aeabi_d2f+0x46>
   15acc:	220f      	movs	r2, #15
   15ace:	401a      	ands	r2, r3
   15ad0:	2a04      	cmp	r2, #4
   15ad2:	d000      	beq.n	15ad6 <__aeabi_d2f+0x46>
   15ad4:	3304      	adds	r3, #4
   15ad6:	2280      	movs	r2, #128	; 0x80
   15ad8:	04d2      	lsls	r2, r2, #19
   15ada:	401a      	ands	r2, r3
   15adc:	d05a      	beq.n	15b94 <__aeabi_d2f+0x104>
   15ade:	3601      	adds	r6, #1
   15ae0:	2eff      	cmp	r6, #255	; 0xff
   15ae2:	d003      	beq.n	15aec <__aeabi_d2f+0x5c>
   15ae4:	019b      	lsls	r3, r3, #6
   15ae6:	0a5b      	lsrs	r3, r3, #9
   15ae8:	b2f4      	uxtb	r4, r6
   15aea:	e001      	b.n	15af0 <__aeabi_d2f+0x60>
   15aec:	24ff      	movs	r4, #255	; 0xff
   15aee:	2300      	movs	r3, #0
   15af0:	0258      	lsls	r0, r3, #9
   15af2:	05e4      	lsls	r4, r4, #23
   15af4:	0a40      	lsrs	r0, r0, #9
   15af6:	07c9      	lsls	r1, r1, #31
   15af8:	4320      	orrs	r0, r4
   15afa:	4308      	orrs	r0, r1
   15afc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15afe:	2c00      	cmp	r4, #0
   15b00:	d007      	beq.n	15b12 <__aeabi_d2f+0x82>
   15b02:	431d      	orrs	r5, r3
   15b04:	d0f2      	beq.n	15aec <__aeabi_d2f+0x5c>
   15b06:	2080      	movs	r0, #128	; 0x80
   15b08:	00db      	lsls	r3, r3, #3
   15b0a:	0480      	lsls	r0, r0, #18
   15b0c:	4303      	orrs	r3, r0
   15b0e:	26ff      	movs	r6, #255	; 0xff
   15b10:	e7da      	b.n	15ac8 <__aeabi_d2f+0x38>
   15b12:	432b      	orrs	r3, r5
   15b14:	d003      	beq.n	15b1e <__aeabi_d2f+0x8e>
   15b16:	2305      	movs	r3, #5
   15b18:	08db      	lsrs	r3, r3, #3
   15b1a:	2cff      	cmp	r4, #255	; 0xff
   15b1c:	d003      	beq.n	15b26 <__aeabi_d2f+0x96>
   15b1e:	025b      	lsls	r3, r3, #9
   15b20:	0a5b      	lsrs	r3, r3, #9
   15b22:	b2e4      	uxtb	r4, r4
   15b24:	e7e4      	b.n	15af0 <__aeabi_d2f+0x60>
   15b26:	2b00      	cmp	r3, #0
   15b28:	d032      	beq.n	15b90 <__aeabi_d2f+0x100>
   15b2a:	2080      	movs	r0, #128	; 0x80
   15b2c:	03c0      	lsls	r0, r0, #15
   15b2e:	4303      	orrs	r3, r0
   15b30:	025b      	lsls	r3, r3, #9
   15b32:	0a5b      	lsrs	r3, r3, #9
   15b34:	e7dc      	b.n	15af0 <__aeabi_d2f+0x60>
   15b36:	0032      	movs	r2, r6
   15b38:	3217      	adds	r2, #23
   15b3a:	db14      	blt.n	15b66 <__aeabi_d2f+0xd6>
   15b3c:	2280      	movs	r2, #128	; 0x80
   15b3e:	271e      	movs	r7, #30
   15b40:	0412      	lsls	r2, r2, #16
   15b42:	4313      	orrs	r3, r2
   15b44:	1bbf      	subs	r7, r7, r6
   15b46:	2f1f      	cmp	r7, #31
   15b48:	dc0f      	bgt.n	15b6a <__aeabi_d2f+0xda>
   15b4a:	4a14      	ldr	r2, [pc, #80]	; (15b9c <__aeabi_d2f+0x10c>)
   15b4c:	4694      	mov	ip, r2
   15b4e:	4464      	add	r4, ip
   15b50:	002a      	movs	r2, r5
   15b52:	40a5      	lsls	r5, r4
   15b54:	002e      	movs	r6, r5
   15b56:	40a3      	lsls	r3, r4
   15b58:	1e75      	subs	r5, r6, #1
   15b5a:	41ae      	sbcs	r6, r5
   15b5c:	40fa      	lsrs	r2, r7
   15b5e:	4333      	orrs	r3, r6
   15b60:	4313      	orrs	r3, r2
   15b62:	2600      	movs	r6, #0
   15b64:	e7b0      	b.n	15ac8 <__aeabi_d2f+0x38>
   15b66:	2400      	movs	r4, #0
   15b68:	e7d5      	b.n	15b16 <__aeabi_d2f+0x86>
   15b6a:	2202      	movs	r2, #2
   15b6c:	4252      	negs	r2, r2
   15b6e:	1b96      	subs	r6, r2, r6
   15b70:	001a      	movs	r2, r3
   15b72:	40f2      	lsrs	r2, r6
   15b74:	2f20      	cmp	r7, #32
   15b76:	d009      	beq.n	15b8c <__aeabi_d2f+0xfc>
   15b78:	4809      	ldr	r0, [pc, #36]	; (15ba0 <__aeabi_d2f+0x110>)
   15b7a:	4684      	mov	ip, r0
   15b7c:	4464      	add	r4, ip
   15b7e:	40a3      	lsls	r3, r4
   15b80:	432b      	orrs	r3, r5
   15b82:	1e5d      	subs	r5, r3, #1
   15b84:	41ab      	sbcs	r3, r5
   15b86:	2600      	movs	r6, #0
   15b88:	4313      	orrs	r3, r2
   15b8a:	e79d      	b.n	15ac8 <__aeabi_d2f+0x38>
   15b8c:	2300      	movs	r3, #0
   15b8e:	e7f7      	b.n	15b80 <__aeabi_d2f+0xf0>
   15b90:	2300      	movs	r3, #0
   15b92:	e7ad      	b.n	15af0 <__aeabi_d2f+0x60>
   15b94:	0034      	movs	r4, r6
   15b96:	e7bf      	b.n	15b18 <__aeabi_d2f+0x88>
   15b98:	fffffc80 	.word	0xfffffc80
   15b9c:	fffffc82 	.word	0xfffffc82
   15ba0:	fffffca2 	.word	0xfffffca2

00015ba4 <__clzsi2>:
   15ba4:	211c      	movs	r1, #28
   15ba6:	2301      	movs	r3, #1
   15ba8:	041b      	lsls	r3, r3, #16
   15baa:	4298      	cmp	r0, r3
   15bac:	d301      	bcc.n	15bb2 <__clzsi2+0xe>
   15bae:	0c00      	lsrs	r0, r0, #16
   15bb0:	3910      	subs	r1, #16
   15bb2:	0a1b      	lsrs	r3, r3, #8
   15bb4:	4298      	cmp	r0, r3
   15bb6:	d301      	bcc.n	15bbc <__clzsi2+0x18>
   15bb8:	0a00      	lsrs	r0, r0, #8
   15bba:	3908      	subs	r1, #8
   15bbc:	091b      	lsrs	r3, r3, #4
   15bbe:	4298      	cmp	r0, r3
   15bc0:	d301      	bcc.n	15bc6 <__clzsi2+0x22>
   15bc2:	0900      	lsrs	r0, r0, #4
   15bc4:	3904      	subs	r1, #4
   15bc6:	a202      	add	r2, pc, #8	; (adr r2, 15bd0 <__clzsi2+0x2c>)
   15bc8:	5c10      	ldrb	r0, [r2, r0]
   15bca:	1840      	adds	r0, r0, r1
   15bcc:	4770      	bx	lr
   15bce:	46c0      	nop			; (mov r8, r8)
   15bd0:	02020304 	.word	0x02020304
   15bd4:	01010101 	.word	0x01010101
	...

00015be0 <__clzdi2>:
   15be0:	b510      	push	{r4, lr}
   15be2:	2900      	cmp	r1, #0
   15be4:	d103      	bne.n	15bee <__clzdi2+0xe>
   15be6:	f7ff ffdd 	bl	15ba4 <__clzsi2>
   15bea:	3020      	adds	r0, #32
   15bec:	e002      	b.n	15bf4 <__clzdi2+0x14>
   15bee:	1c08      	adds	r0, r1, #0
   15bf0:	f7ff ffd8 	bl	15ba4 <__clzsi2>
   15bf4:	bd10      	pop	{r4, pc}
   15bf6:	46c0      	nop			; (mov r8, r8)

00015bf8 <__aeabi_d2uiz>:
   15bf8:	b570      	push	{r4, r5, r6, lr}
   15bfa:	2200      	movs	r2, #0
   15bfc:	4b0c      	ldr	r3, [pc, #48]	; (15c30 <__aeabi_d2uiz+0x38>)
   15bfe:	0004      	movs	r4, r0
   15c00:	000d      	movs	r5, r1
   15c02:	f000 f84b 	bl	15c9c <__aeabi_dcmpge>
   15c06:	2800      	cmp	r0, #0
   15c08:	d104      	bne.n	15c14 <__aeabi_d2uiz+0x1c>
   15c0a:	0020      	movs	r0, r4
   15c0c:	0029      	movs	r1, r5
   15c0e:	f7ff fe3f 	bl	15890 <__aeabi_d2iz>
   15c12:	bd70      	pop	{r4, r5, r6, pc}
   15c14:	4b06      	ldr	r3, [pc, #24]	; (15c30 <__aeabi_d2uiz+0x38>)
   15c16:	2200      	movs	r2, #0
   15c18:	0020      	movs	r0, r4
   15c1a:	0029      	movs	r1, r5
   15c1c:	f7ff fb22 	bl	15264 <__aeabi_dsub>
   15c20:	f7ff fe36 	bl	15890 <__aeabi_d2iz>
   15c24:	2380      	movs	r3, #128	; 0x80
   15c26:	061b      	lsls	r3, r3, #24
   15c28:	469c      	mov	ip, r3
   15c2a:	4460      	add	r0, ip
   15c2c:	e7f1      	b.n	15c12 <__aeabi_d2uiz+0x1a>
   15c2e:	46c0      	nop			; (mov r8, r8)
   15c30:	41e00000 	.word	0x41e00000

00015c34 <__aeabi_cdrcmple>:
   15c34:	4684      	mov	ip, r0
   15c36:	1c10      	adds	r0, r2, #0
   15c38:	4662      	mov	r2, ip
   15c3a:	468c      	mov	ip, r1
   15c3c:	1c19      	adds	r1, r3, #0
   15c3e:	4663      	mov	r3, ip
   15c40:	e000      	b.n	15c44 <__aeabi_cdcmpeq>
   15c42:	46c0      	nop			; (mov r8, r8)

00015c44 <__aeabi_cdcmpeq>:
   15c44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   15c46:	f000 f8d1 	bl	15dec <__ledf2>
   15c4a:	2800      	cmp	r0, #0
   15c4c:	d401      	bmi.n	15c52 <__aeabi_cdcmpeq+0xe>
   15c4e:	2100      	movs	r1, #0
   15c50:	42c8      	cmn	r0, r1
   15c52:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00015c54 <__aeabi_dcmpeq>:
   15c54:	b510      	push	{r4, lr}
   15c56:	f000 f82b 	bl	15cb0 <__eqdf2>
   15c5a:	4240      	negs	r0, r0
   15c5c:	3001      	adds	r0, #1
   15c5e:	bd10      	pop	{r4, pc}

00015c60 <__aeabi_dcmplt>:
   15c60:	b510      	push	{r4, lr}
   15c62:	f000 f8c3 	bl	15dec <__ledf2>
   15c66:	2800      	cmp	r0, #0
   15c68:	db01      	blt.n	15c6e <__aeabi_dcmplt+0xe>
   15c6a:	2000      	movs	r0, #0
   15c6c:	bd10      	pop	{r4, pc}
   15c6e:	2001      	movs	r0, #1
   15c70:	bd10      	pop	{r4, pc}
   15c72:	46c0      	nop			; (mov r8, r8)

00015c74 <__aeabi_dcmple>:
   15c74:	b510      	push	{r4, lr}
   15c76:	f000 f8b9 	bl	15dec <__ledf2>
   15c7a:	2800      	cmp	r0, #0
   15c7c:	dd01      	ble.n	15c82 <__aeabi_dcmple+0xe>
   15c7e:	2000      	movs	r0, #0
   15c80:	bd10      	pop	{r4, pc}
   15c82:	2001      	movs	r0, #1
   15c84:	bd10      	pop	{r4, pc}
   15c86:	46c0      	nop			; (mov r8, r8)

00015c88 <__aeabi_dcmpgt>:
   15c88:	b510      	push	{r4, lr}
   15c8a:	f000 f84b 	bl	15d24 <__gedf2>
   15c8e:	2800      	cmp	r0, #0
   15c90:	dc01      	bgt.n	15c96 <__aeabi_dcmpgt+0xe>
   15c92:	2000      	movs	r0, #0
   15c94:	bd10      	pop	{r4, pc}
   15c96:	2001      	movs	r0, #1
   15c98:	bd10      	pop	{r4, pc}
   15c9a:	46c0      	nop			; (mov r8, r8)

00015c9c <__aeabi_dcmpge>:
   15c9c:	b510      	push	{r4, lr}
   15c9e:	f000 f841 	bl	15d24 <__gedf2>
   15ca2:	2800      	cmp	r0, #0
   15ca4:	da01      	bge.n	15caa <__aeabi_dcmpge+0xe>
   15ca6:	2000      	movs	r0, #0
   15ca8:	bd10      	pop	{r4, pc}
   15caa:	2001      	movs	r0, #1
   15cac:	bd10      	pop	{r4, pc}
   15cae:	46c0      	nop			; (mov r8, r8)

00015cb0 <__eqdf2>:
   15cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   15cb2:	464f      	mov	r7, r9
   15cb4:	4646      	mov	r6, r8
   15cb6:	46d6      	mov	lr, sl
   15cb8:	005c      	lsls	r4, r3, #1
   15cba:	b5c0      	push	{r6, r7, lr}
   15cbc:	031f      	lsls	r7, r3, #12
   15cbe:	0fdb      	lsrs	r3, r3, #31
   15cc0:	469a      	mov	sl, r3
   15cc2:	4b17      	ldr	r3, [pc, #92]	; (15d20 <__eqdf2+0x70>)
   15cc4:	030e      	lsls	r6, r1, #12
   15cc6:	004d      	lsls	r5, r1, #1
   15cc8:	4684      	mov	ip, r0
   15cca:	4680      	mov	r8, r0
   15ccc:	0b36      	lsrs	r6, r6, #12
   15cce:	0d6d      	lsrs	r5, r5, #21
   15cd0:	0fc9      	lsrs	r1, r1, #31
   15cd2:	4691      	mov	r9, r2
   15cd4:	0b3f      	lsrs	r7, r7, #12
   15cd6:	0d64      	lsrs	r4, r4, #21
   15cd8:	2001      	movs	r0, #1
   15cda:	429d      	cmp	r5, r3
   15cdc:	d008      	beq.n	15cf0 <__eqdf2+0x40>
   15cde:	429c      	cmp	r4, r3
   15ce0:	d001      	beq.n	15ce6 <__eqdf2+0x36>
   15ce2:	42a5      	cmp	r5, r4
   15ce4:	d00b      	beq.n	15cfe <__eqdf2+0x4e>
   15ce6:	bc1c      	pop	{r2, r3, r4}
   15ce8:	4690      	mov	r8, r2
   15cea:	4699      	mov	r9, r3
   15cec:	46a2      	mov	sl, r4
   15cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15cf0:	4663      	mov	r3, ip
   15cf2:	4333      	orrs	r3, r6
   15cf4:	d1f7      	bne.n	15ce6 <__eqdf2+0x36>
   15cf6:	42ac      	cmp	r4, r5
   15cf8:	d1f5      	bne.n	15ce6 <__eqdf2+0x36>
   15cfa:	433a      	orrs	r2, r7
   15cfc:	d1f3      	bne.n	15ce6 <__eqdf2+0x36>
   15cfe:	2001      	movs	r0, #1
   15d00:	42be      	cmp	r6, r7
   15d02:	d1f0      	bne.n	15ce6 <__eqdf2+0x36>
   15d04:	45c8      	cmp	r8, r9
   15d06:	d1ee      	bne.n	15ce6 <__eqdf2+0x36>
   15d08:	4551      	cmp	r1, sl
   15d0a:	d007      	beq.n	15d1c <__eqdf2+0x6c>
   15d0c:	2d00      	cmp	r5, #0
   15d0e:	d1ea      	bne.n	15ce6 <__eqdf2+0x36>
   15d10:	4663      	mov	r3, ip
   15d12:	431e      	orrs	r6, r3
   15d14:	0030      	movs	r0, r6
   15d16:	1e46      	subs	r6, r0, #1
   15d18:	41b0      	sbcs	r0, r6
   15d1a:	e7e4      	b.n	15ce6 <__eqdf2+0x36>
   15d1c:	2000      	movs	r0, #0
   15d1e:	e7e2      	b.n	15ce6 <__eqdf2+0x36>
   15d20:	000007ff 	.word	0x000007ff

00015d24 <__gedf2>:
   15d24:	b5f0      	push	{r4, r5, r6, r7, lr}
   15d26:	4645      	mov	r5, r8
   15d28:	46de      	mov	lr, fp
   15d2a:	4657      	mov	r7, sl
   15d2c:	464e      	mov	r6, r9
   15d2e:	b5e0      	push	{r5, r6, r7, lr}
   15d30:	031f      	lsls	r7, r3, #12
   15d32:	0b3d      	lsrs	r5, r7, #12
   15d34:	4f2c      	ldr	r7, [pc, #176]	; (15de8 <__gedf2+0xc4>)
   15d36:	030e      	lsls	r6, r1, #12
   15d38:	004c      	lsls	r4, r1, #1
   15d3a:	46ab      	mov	fp, r5
   15d3c:	005d      	lsls	r5, r3, #1
   15d3e:	4684      	mov	ip, r0
   15d40:	0b36      	lsrs	r6, r6, #12
   15d42:	0d64      	lsrs	r4, r4, #21
   15d44:	0fc9      	lsrs	r1, r1, #31
   15d46:	4690      	mov	r8, r2
   15d48:	0d6d      	lsrs	r5, r5, #21
   15d4a:	0fdb      	lsrs	r3, r3, #31
   15d4c:	42bc      	cmp	r4, r7
   15d4e:	d02a      	beq.n	15da6 <__gedf2+0x82>
   15d50:	4f25      	ldr	r7, [pc, #148]	; (15de8 <__gedf2+0xc4>)
   15d52:	42bd      	cmp	r5, r7
   15d54:	d02d      	beq.n	15db2 <__gedf2+0x8e>
   15d56:	2c00      	cmp	r4, #0
   15d58:	d10f      	bne.n	15d7a <__gedf2+0x56>
   15d5a:	4330      	orrs	r0, r6
   15d5c:	0007      	movs	r7, r0
   15d5e:	4681      	mov	r9, r0
   15d60:	4278      	negs	r0, r7
   15d62:	4178      	adcs	r0, r7
   15d64:	b2c0      	uxtb	r0, r0
   15d66:	2d00      	cmp	r5, #0
   15d68:	d117      	bne.n	15d9a <__gedf2+0x76>
   15d6a:	465f      	mov	r7, fp
   15d6c:	433a      	orrs	r2, r7
   15d6e:	d114      	bne.n	15d9a <__gedf2+0x76>
   15d70:	464b      	mov	r3, r9
   15d72:	2000      	movs	r0, #0
   15d74:	2b00      	cmp	r3, #0
   15d76:	d00a      	beq.n	15d8e <__gedf2+0x6a>
   15d78:	e006      	b.n	15d88 <__gedf2+0x64>
   15d7a:	2d00      	cmp	r5, #0
   15d7c:	d102      	bne.n	15d84 <__gedf2+0x60>
   15d7e:	4658      	mov	r0, fp
   15d80:	4302      	orrs	r2, r0
   15d82:	d001      	beq.n	15d88 <__gedf2+0x64>
   15d84:	4299      	cmp	r1, r3
   15d86:	d018      	beq.n	15dba <__gedf2+0x96>
   15d88:	4248      	negs	r0, r1
   15d8a:	2101      	movs	r1, #1
   15d8c:	4308      	orrs	r0, r1
   15d8e:	bc3c      	pop	{r2, r3, r4, r5}
   15d90:	4690      	mov	r8, r2
   15d92:	4699      	mov	r9, r3
   15d94:	46a2      	mov	sl, r4
   15d96:	46ab      	mov	fp, r5
   15d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15d9a:	2800      	cmp	r0, #0
   15d9c:	d0f2      	beq.n	15d84 <__gedf2+0x60>
   15d9e:	2001      	movs	r0, #1
   15da0:	3b01      	subs	r3, #1
   15da2:	4318      	orrs	r0, r3
   15da4:	e7f3      	b.n	15d8e <__gedf2+0x6a>
   15da6:	0037      	movs	r7, r6
   15da8:	4307      	orrs	r7, r0
   15daa:	d0d1      	beq.n	15d50 <__gedf2+0x2c>
   15dac:	2002      	movs	r0, #2
   15dae:	4240      	negs	r0, r0
   15db0:	e7ed      	b.n	15d8e <__gedf2+0x6a>
   15db2:	465f      	mov	r7, fp
   15db4:	4317      	orrs	r7, r2
   15db6:	d0ce      	beq.n	15d56 <__gedf2+0x32>
   15db8:	e7f8      	b.n	15dac <__gedf2+0x88>
   15dba:	42ac      	cmp	r4, r5
   15dbc:	dce4      	bgt.n	15d88 <__gedf2+0x64>
   15dbe:	da03      	bge.n	15dc8 <__gedf2+0xa4>
   15dc0:	1e48      	subs	r0, r1, #1
   15dc2:	2101      	movs	r1, #1
   15dc4:	4308      	orrs	r0, r1
   15dc6:	e7e2      	b.n	15d8e <__gedf2+0x6a>
   15dc8:	455e      	cmp	r6, fp
   15dca:	d8dd      	bhi.n	15d88 <__gedf2+0x64>
   15dcc:	d006      	beq.n	15ddc <__gedf2+0xb8>
   15dce:	2000      	movs	r0, #0
   15dd0:	455e      	cmp	r6, fp
   15dd2:	d2dc      	bcs.n	15d8e <__gedf2+0x6a>
   15dd4:	2301      	movs	r3, #1
   15dd6:	1e48      	subs	r0, r1, #1
   15dd8:	4318      	orrs	r0, r3
   15dda:	e7d8      	b.n	15d8e <__gedf2+0x6a>
   15ddc:	45c4      	cmp	ip, r8
   15dde:	d8d3      	bhi.n	15d88 <__gedf2+0x64>
   15de0:	2000      	movs	r0, #0
   15de2:	45c4      	cmp	ip, r8
   15de4:	d3f6      	bcc.n	15dd4 <__gedf2+0xb0>
   15de6:	e7d2      	b.n	15d8e <__gedf2+0x6a>
   15de8:	000007ff 	.word	0x000007ff

00015dec <__ledf2>:
   15dec:	b5f0      	push	{r4, r5, r6, r7, lr}
   15dee:	464e      	mov	r6, r9
   15df0:	4645      	mov	r5, r8
   15df2:	46de      	mov	lr, fp
   15df4:	4657      	mov	r7, sl
   15df6:	005c      	lsls	r4, r3, #1
   15df8:	b5e0      	push	{r5, r6, r7, lr}
   15dfa:	031f      	lsls	r7, r3, #12
   15dfc:	0fdb      	lsrs	r3, r3, #31
   15dfe:	4699      	mov	r9, r3
   15e00:	4b2a      	ldr	r3, [pc, #168]	; (15eac <__ledf2+0xc0>)
   15e02:	030e      	lsls	r6, r1, #12
   15e04:	004d      	lsls	r5, r1, #1
   15e06:	0fc9      	lsrs	r1, r1, #31
   15e08:	4684      	mov	ip, r0
   15e0a:	0b36      	lsrs	r6, r6, #12
   15e0c:	0d6d      	lsrs	r5, r5, #21
   15e0e:	468b      	mov	fp, r1
   15e10:	4690      	mov	r8, r2
   15e12:	0b3f      	lsrs	r7, r7, #12
   15e14:	0d64      	lsrs	r4, r4, #21
   15e16:	429d      	cmp	r5, r3
   15e18:	d020      	beq.n	15e5c <__ledf2+0x70>
   15e1a:	4b24      	ldr	r3, [pc, #144]	; (15eac <__ledf2+0xc0>)
   15e1c:	429c      	cmp	r4, r3
   15e1e:	d022      	beq.n	15e66 <__ledf2+0x7a>
   15e20:	2d00      	cmp	r5, #0
   15e22:	d112      	bne.n	15e4a <__ledf2+0x5e>
   15e24:	4330      	orrs	r0, r6
   15e26:	4243      	negs	r3, r0
   15e28:	4143      	adcs	r3, r0
   15e2a:	b2db      	uxtb	r3, r3
   15e2c:	2c00      	cmp	r4, #0
   15e2e:	d01f      	beq.n	15e70 <__ledf2+0x84>
   15e30:	2b00      	cmp	r3, #0
   15e32:	d00c      	beq.n	15e4e <__ledf2+0x62>
   15e34:	464b      	mov	r3, r9
   15e36:	2001      	movs	r0, #1
   15e38:	3b01      	subs	r3, #1
   15e3a:	4303      	orrs	r3, r0
   15e3c:	0018      	movs	r0, r3
   15e3e:	bc3c      	pop	{r2, r3, r4, r5}
   15e40:	4690      	mov	r8, r2
   15e42:	4699      	mov	r9, r3
   15e44:	46a2      	mov	sl, r4
   15e46:	46ab      	mov	fp, r5
   15e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15e4a:	2c00      	cmp	r4, #0
   15e4c:	d016      	beq.n	15e7c <__ledf2+0x90>
   15e4e:	45cb      	cmp	fp, r9
   15e50:	d017      	beq.n	15e82 <__ledf2+0x96>
   15e52:	465b      	mov	r3, fp
   15e54:	4259      	negs	r1, r3
   15e56:	2301      	movs	r3, #1
   15e58:	430b      	orrs	r3, r1
   15e5a:	e7ef      	b.n	15e3c <__ledf2+0x50>
   15e5c:	0031      	movs	r1, r6
   15e5e:	2302      	movs	r3, #2
   15e60:	4301      	orrs	r1, r0
   15e62:	d1eb      	bne.n	15e3c <__ledf2+0x50>
   15e64:	e7d9      	b.n	15e1a <__ledf2+0x2e>
   15e66:	0039      	movs	r1, r7
   15e68:	2302      	movs	r3, #2
   15e6a:	4311      	orrs	r1, r2
   15e6c:	d1e6      	bne.n	15e3c <__ledf2+0x50>
   15e6e:	e7d7      	b.n	15e20 <__ledf2+0x34>
   15e70:	433a      	orrs	r2, r7
   15e72:	d1dd      	bne.n	15e30 <__ledf2+0x44>
   15e74:	2300      	movs	r3, #0
   15e76:	2800      	cmp	r0, #0
   15e78:	d0e0      	beq.n	15e3c <__ledf2+0x50>
   15e7a:	e7ea      	b.n	15e52 <__ledf2+0x66>
   15e7c:	433a      	orrs	r2, r7
   15e7e:	d1e6      	bne.n	15e4e <__ledf2+0x62>
   15e80:	e7e7      	b.n	15e52 <__ledf2+0x66>
   15e82:	42a5      	cmp	r5, r4
   15e84:	dce5      	bgt.n	15e52 <__ledf2+0x66>
   15e86:	db05      	blt.n	15e94 <__ledf2+0xa8>
   15e88:	42be      	cmp	r6, r7
   15e8a:	d8e2      	bhi.n	15e52 <__ledf2+0x66>
   15e8c:	d007      	beq.n	15e9e <__ledf2+0xb2>
   15e8e:	2300      	movs	r3, #0
   15e90:	42be      	cmp	r6, r7
   15e92:	d2d3      	bcs.n	15e3c <__ledf2+0x50>
   15e94:	4659      	mov	r1, fp
   15e96:	2301      	movs	r3, #1
   15e98:	3901      	subs	r1, #1
   15e9a:	430b      	orrs	r3, r1
   15e9c:	e7ce      	b.n	15e3c <__ledf2+0x50>
   15e9e:	45c4      	cmp	ip, r8
   15ea0:	d8d7      	bhi.n	15e52 <__ledf2+0x66>
   15ea2:	2300      	movs	r3, #0
   15ea4:	45c4      	cmp	ip, r8
   15ea6:	d3f5      	bcc.n	15e94 <__ledf2+0xa8>
   15ea8:	e7c8      	b.n	15e3c <__ledf2+0x50>
   15eaa:	46c0      	nop			; (mov r8, r8)
   15eac:	000007ff 	.word	0x000007ff

00015eb0 <__libc_init_array>:
   15eb0:	b570      	push	{r4, r5, r6, lr}
   15eb2:	4e0d      	ldr	r6, [pc, #52]	; (15ee8 <__libc_init_array+0x38>)
   15eb4:	4d0d      	ldr	r5, [pc, #52]	; (15eec <__libc_init_array+0x3c>)
   15eb6:	2400      	movs	r4, #0
   15eb8:	1bad      	subs	r5, r5, r6
   15eba:	10ad      	asrs	r5, r5, #2
   15ebc:	d005      	beq.n	15eca <__libc_init_array+0x1a>
   15ebe:	00a3      	lsls	r3, r4, #2
   15ec0:	58f3      	ldr	r3, [r6, r3]
   15ec2:	3401      	adds	r4, #1
   15ec4:	4798      	blx	r3
   15ec6:	42a5      	cmp	r5, r4
   15ec8:	d1f9      	bne.n	15ebe <__libc_init_array+0xe>
   15eca:	f008 fabd 	bl	1e448 <_init>
   15ece:	4e08      	ldr	r6, [pc, #32]	; (15ef0 <__libc_init_array+0x40>)
   15ed0:	4d08      	ldr	r5, [pc, #32]	; (15ef4 <__libc_init_array+0x44>)
   15ed2:	2400      	movs	r4, #0
   15ed4:	1bad      	subs	r5, r5, r6
   15ed6:	10ad      	asrs	r5, r5, #2
   15ed8:	d005      	beq.n	15ee6 <__libc_init_array+0x36>
   15eda:	00a3      	lsls	r3, r4, #2
   15edc:	58f3      	ldr	r3, [r6, r3]
   15ede:	3401      	adds	r4, #1
   15ee0:	4798      	blx	r3
   15ee2:	42a5      	cmp	r5, r4
   15ee4:	d1f9      	bne.n	15eda <__libc_init_array+0x2a>
   15ee6:	bd70      	pop	{r4, r5, r6, pc}
   15ee8:	0001e454 	.word	0x0001e454
   15eec:	0001e454 	.word	0x0001e454
   15ef0:	0001e454 	.word	0x0001e454
   15ef4:	0001e45c 	.word	0x0001e45c

00015ef8 <memcmp>:
   15ef8:	b510      	push	{r4, lr}
   15efa:	2a03      	cmp	r2, #3
   15efc:	d91c      	bls.n	15f38 <memcmp+0x40>
   15efe:	0003      	movs	r3, r0
   15f00:	430b      	orrs	r3, r1
   15f02:	079b      	lsls	r3, r3, #30
   15f04:	d00f      	beq.n	15f26 <memcmp+0x2e>
   15f06:	7803      	ldrb	r3, [r0, #0]
   15f08:	780c      	ldrb	r4, [r1, #0]
   15f0a:	1882      	adds	r2, r0, r2
   15f0c:	42a3      	cmp	r3, r4
   15f0e:	d004      	beq.n	15f1a <memcmp+0x22>
   15f10:	e015      	b.n	15f3e <memcmp+0x46>
   15f12:	7803      	ldrb	r3, [r0, #0]
   15f14:	780c      	ldrb	r4, [r1, #0]
   15f16:	42a3      	cmp	r3, r4
   15f18:	d111      	bne.n	15f3e <memcmp+0x46>
   15f1a:	3001      	adds	r0, #1
   15f1c:	3101      	adds	r1, #1
   15f1e:	4282      	cmp	r2, r0
   15f20:	d1f7      	bne.n	15f12 <memcmp+0x1a>
   15f22:	2000      	movs	r0, #0
   15f24:	bd10      	pop	{r4, pc}
   15f26:	6803      	ldr	r3, [r0, #0]
   15f28:	680c      	ldr	r4, [r1, #0]
   15f2a:	42a3      	cmp	r3, r4
   15f2c:	d1eb      	bne.n	15f06 <memcmp+0xe>
   15f2e:	3a04      	subs	r2, #4
   15f30:	3004      	adds	r0, #4
   15f32:	3104      	adds	r1, #4
   15f34:	2a03      	cmp	r2, #3
   15f36:	d8f6      	bhi.n	15f26 <memcmp+0x2e>
   15f38:	2a00      	cmp	r2, #0
   15f3a:	d1e4      	bne.n	15f06 <memcmp+0xe>
   15f3c:	e7f1      	b.n	15f22 <memcmp+0x2a>
   15f3e:	1b18      	subs	r0, r3, r4
   15f40:	e7f0      	b.n	15f24 <memcmp+0x2c>
   15f42:	46c0      	nop			; (mov r8, r8)

00015f44 <memcpy>:
   15f44:	b5f0      	push	{r4, r5, r6, r7, lr}
   15f46:	0005      	movs	r5, r0
   15f48:	2a0f      	cmp	r2, #15
   15f4a:	d92f      	bls.n	15fac <memcpy+0x68>
   15f4c:	000b      	movs	r3, r1
   15f4e:	4303      	orrs	r3, r0
   15f50:	079b      	lsls	r3, r3, #30
   15f52:	d134      	bne.n	15fbe <memcpy+0x7a>
   15f54:	0016      	movs	r6, r2
   15f56:	000c      	movs	r4, r1
   15f58:	0003      	movs	r3, r0
   15f5a:	3e10      	subs	r6, #16
   15f5c:	0935      	lsrs	r5, r6, #4
   15f5e:	3501      	adds	r5, #1
   15f60:	012d      	lsls	r5, r5, #4
   15f62:	1945      	adds	r5, r0, r5
   15f64:	6827      	ldr	r7, [r4, #0]
   15f66:	601f      	str	r7, [r3, #0]
   15f68:	6867      	ldr	r7, [r4, #4]
   15f6a:	605f      	str	r7, [r3, #4]
   15f6c:	68a7      	ldr	r7, [r4, #8]
   15f6e:	609f      	str	r7, [r3, #8]
   15f70:	68e7      	ldr	r7, [r4, #12]
   15f72:	3410      	adds	r4, #16
   15f74:	60df      	str	r7, [r3, #12]
   15f76:	3310      	adds	r3, #16
   15f78:	429d      	cmp	r5, r3
   15f7a:	d1f3      	bne.n	15f64 <memcpy+0x20>
   15f7c:	230f      	movs	r3, #15
   15f7e:	439e      	bics	r6, r3
   15f80:	3610      	adds	r6, #16
   15f82:	1985      	adds	r5, r0, r6
   15f84:	1989      	adds	r1, r1, r6
   15f86:	4013      	ands	r3, r2
   15f88:	2b03      	cmp	r3, #3
   15f8a:	d91a      	bls.n	15fc2 <memcpy+0x7e>
   15f8c:	1f1e      	subs	r6, r3, #4
   15f8e:	2300      	movs	r3, #0
   15f90:	08b4      	lsrs	r4, r6, #2
   15f92:	3401      	adds	r4, #1
   15f94:	00a4      	lsls	r4, r4, #2
   15f96:	58cf      	ldr	r7, [r1, r3]
   15f98:	50ef      	str	r7, [r5, r3]
   15f9a:	3304      	adds	r3, #4
   15f9c:	42a3      	cmp	r3, r4
   15f9e:	d1fa      	bne.n	15f96 <memcpy+0x52>
   15fa0:	2403      	movs	r4, #3
   15fa2:	43a6      	bics	r6, r4
   15fa4:	1d33      	adds	r3, r6, #4
   15fa6:	4022      	ands	r2, r4
   15fa8:	18c9      	adds	r1, r1, r3
   15faa:	18ed      	adds	r5, r5, r3
   15fac:	2a00      	cmp	r2, #0
   15fae:	d005      	beq.n	15fbc <memcpy+0x78>
   15fb0:	2300      	movs	r3, #0
   15fb2:	5ccc      	ldrb	r4, [r1, r3]
   15fb4:	54ec      	strb	r4, [r5, r3]
   15fb6:	3301      	adds	r3, #1
   15fb8:	4293      	cmp	r3, r2
   15fba:	d1fa      	bne.n	15fb2 <memcpy+0x6e>
   15fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15fbe:	0005      	movs	r5, r0
   15fc0:	e7f6      	b.n	15fb0 <memcpy+0x6c>
   15fc2:	001a      	movs	r2, r3
   15fc4:	e7f2      	b.n	15fac <memcpy+0x68>
   15fc6:	46c0      	nop			; (mov r8, r8)

00015fc8 <memset>:
   15fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   15fca:	0783      	lsls	r3, r0, #30
   15fcc:	d043      	beq.n	16056 <memset+0x8e>
   15fce:	1e54      	subs	r4, r2, #1
   15fd0:	2a00      	cmp	r2, #0
   15fd2:	d03f      	beq.n	16054 <memset+0x8c>
   15fd4:	b2ce      	uxtb	r6, r1
   15fd6:	0002      	movs	r2, r0
   15fd8:	2503      	movs	r5, #3
   15fda:	e002      	b.n	15fe2 <memset+0x1a>
   15fdc:	001a      	movs	r2, r3
   15fde:	3c01      	subs	r4, #1
   15fe0:	d338      	bcc.n	16054 <memset+0x8c>
   15fe2:	1c53      	adds	r3, r2, #1
   15fe4:	7016      	strb	r6, [r2, #0]
   15fe6:	422b      	tst	r3, r5
   15fe8:	d1f8      	bne.n	15fdc <memset+0x14>
   15fea:	2c03      	cmp	r4, #3
   15fec:	d92a      	bls.n	16044 <memset+0x7c>
   15fee:	22ff      	movs	r2, #255	; 0xff
   15ff0:	400a      	ands	r2, r1
   15ff2:	0215      	lsls	r5, r2, #8
   15ff4:	4315      	orrs	r5, r2
   15ff6:	042a      	lsls	r2, r5, #16
   15ff8:	4315      	orrs	r5, r2
   15ffa:	2c0f      	cmp	r4, #15
   15ffc:	d914      	bls.n	16028 <memset+0x60>
   15ffe:	0027      	movs	r7, r4
   16000:	001a      	movs	r2, r3
   16002:	3f10      	subs	r7, #16
   16004:	093e      	lsrs	r6, r7, #4
   16006:	3601      	adds	r6, #1
   16008:	0136      	lsls	r6, r6, #4
   1600a:	199e      	adds	r6, r3, r6
   1600c:	6015      	str	r5, [r2, #0]
   1600e:	6055      	str	r5, [r2, #4]
   16010:	6095      	str	r5, [r2, #8]
   16012:	60d5      	str	r5, [r2, #12]
   16014:	3210      	adds	r2, #16
   16016:	4296      	cmp	r6, r2
   16018:	d1f8      	bne.n	1600c <memset+0x44>
   1601a:	220f      	movs	r2, #15
   1601c:	4397      	bics	r7, r2
   1601e:	3710      	adds	r7, #16
   16020:	19db      	adds	r3, r3, r7
   16022:	4014      	ands	r4, r2
   16024:	2c03      	cmp	r4, #3
   16026:	d90d      	bls.n	16044 <memset+0x7c>
   16028:	001a      	movs	r2, r3
   1602a:	1f27      	subs	r7, r4, #4
   1602c:	08be      	lsrs	r6, r7, #2
   1602e:	3601      	adds	r6, #1
   16030:	00b6      	lsls	r6, r6, #2
   16032:	199e      	adds	r6, r3, r6
   16034:	c220      	stmia	r2!, {r5}
   16036:	42b2      	cmp	r2, r6
   16038:	d1fc      	bne.n	16034 <memset+0x6c>
   1603a:	2203      	movs	r2, #3
   1603c:	4397      	bics	r7, r2
   1603e:	3704      	adds	r7, #4
   16040:	19db      	adds	r3, r3, r7
   16042:	4014      	ands	r4, r2
   16044:	2c00      	cmp	r4, #0
   16046:	d005      	beq.n	16054 <memset+0x8c>
   16048:	b2c9      	uxtb	r1, r1
   1604a:	191c      	adds	r4, r3, r4
   1604c:	7019      	strb	r1, [r3, #0]
   1604e:	3301      	adds	r3, #1
   16050:	429c      	cmp	r4, r3
   16052:	d1fb      	bne.n	1604c <memset+0x84>
   16054:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16056:	0014      	movs	r4, r2
   16058:	0003      	movs	r3, r0
   1605a:	e7c6      	b.n	15fea <memset+0x22>

0001605c <printf>:
   1605c:	b40f      	push	{r0, r1, r2, r3}
   1605e:	b500      	push	{lr}
   16060:	4906      	ldr	r1, [pc, #24]	; (1607c <printf+0x20>)
   16062:	b083      	sub	sp, #12
   16064:	ab04      	add	r3, sp, #16
   16066:	6808      	ldr	r0, [r1, #0]
   16068:	cb04      	ldmia	r3!, {r2}
   1606a:	6881      	ldr	r1, [r0, #8]
   1606c:	9301      	str	r3, [sp, #4]
   1606e:	f001 fcd7 	bl	17a20 <_vfprintf_r>
   16072:	b003      	add	sp, #12
   16074:	bc08      	pop	{r3}
   16076:	b004      	add	sp, #16
   16078:	4718      	bx	r3
   1607a:	46c0      	nop			; (mov r8, r8)
   1607c:	20000068 	.word	0x20000068

00016080 <_puts_r>:
   16080:	b530      	push	{r4, r5, lr}
   16082:	0004      	movs	r4, r0
   16084:	b089      	sub	sp, #36	; 0x24
   16086:	0008      	movs	r0, r1
   16088:	000d      	movs	r5, r1
   1608a:	f000 f993 	bl	163b4 <strlen>
   1608e:	ab04      	add	r3, sp, #16
   16090:	4a21      	ldr	r2, [pc, #132]	; (16118 <_puts_r+0x98>)
   16092:	9301      	str	r3, [sp, #4]
   16094:	2302      	movs	r3, #2
   16096:	9206      	str	r2, [sp, #24]
   16098:	2201      	movs	r2, #1
   1609a:	9302      	str	r3, [sp, #8]
   1609c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1609e:	9005      	str	r0, [sp, #20]
   160a0:	3001      	adds	r0, #1
   160a2:	9504      	str	r5, [sp, #16]
   160a4:	9207      	str	r2, [sp, #28]
   160a6:	9003      	str	r0, [sp, #12]
   160a8:	68a5      	ldr	r5, [r4, #8]
   160aa:	2b00      	cmp	r3, #0
   160ac:	d02f      	beq.n	1610e <_puts_r+0x8e>
   160ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   160b0:	07db      	lsls	r3, r3, #31
   160b2:	d424      	bmi.n	160fe <_puts_r+0x7e>
   160b4:	230c      	movs	r3, #12
   160b6:	5eea      	ldrsh	r2, [r5, r3]
   160b8:	b291      	uxth	r1, r2
   160ba:	058b      	lsls	r3, r1, #22
   160bc:	d51c      	bpl.n	160f8 <_puts_r+0x78>
   160be:	2380      	movs	r3, #128	; 0x80
   160c0:	019b      	lsls	r3, r3, #6
   160c2:	4219      	tst	r1, r3
   160c4:	d105      	bne.n	160d2 <_puts_r+0x52>
   160c6:	4313      	orrs	r3, r2
   160c8:	81ab      	strh	r3, [r5, #12]
   160ca:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   160cc:	4b13      	ldr	r3, [pc, #76]	; (1611c <_puts_r+0x9c>)
   160ce:	4013      	ands	r3, r2
   160d0:	666b      	str	r3, [r5, #100]	; 0x64
   160d2:	0020      	movs	r0, r4
   160d4:	aa01      	add	r2, sp, #4
   160d6:	0029      	movs	r1, r5
   160d8:	f004 fbc8 	bl	1a86c <__sfvwrite_r>
   160dc:	1e44      	subs	r4, r0, #1
   160de:	41a0      	sbcs	r0, r4
   160e0:	4244      	negs	r4, r0
   160e2:	200a      	movs	r0, #10
   160e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   160e6:	4304      	orrs	r4, r0
   160e8:	07db      	lsls	r3, r3, #31
   160ea:	d402      	bmi.n	160f2 <_puts_r+0x72>
   160ec:	89ab      	ldrh	r3, [r5, #12]
   160ee:	059b      	lsls	r3, r3, #22
   160f0:	d509      	bpl.n	16106 <_puts_r+0x86>
   160f2:	0020      	movs	r0, r4
   160f4:	b009      	add	sp, #36	; 0x24
   160f6:	bd30      	pop	{r4, r5, pc}
   160f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
   160fa:	f004 fd71 	bl	1abe0 <__retarget_lock_acquire_recursive>
   160fe:	230c      	movs	r3, #12
   16100:	5eea      	ldrsh	r2, [r5, r3]
   16102:	b291      	uxth	r1, r2
   16104:	e7db      	b.n	160be <_puts_r+0x3e>
   16106:	6da8      	ldr	r0, [r5, #88]	; 0x58
   16108:	f004 fd6c 	bl	1abe4 <__retarget_lock_release_recursive>
   1610c:	e7f1      	b.n	160f2 <_puts_r+0x72>
   1610e:	0020      	movs	r0, r4
   16110:	f004 fa24 	bl	1a55c <__sinit>
   16114:	e7cb      	b.n	160ae <_puts_r+0x2e>
   16116:	46c0      	nop			; (mov r8, r8)
   16118:	0001d438 	.word	0x0001d438
   1611c:	ffffdfff 	.word	0xffffdfff

00016120 <puts>:
   16120:	b510      	push	{r4, lr}
   16122:	4b03      	ldr	r3, [pc, #12]	; (16130 <puts+0x10>)
   16124:	0001      	movs	r1, r0
   16126:	6818      	ldr	r0, [r3, #0]
   16128:	f7ff ffaa 	bl	16080 <_puts_r>
   1612c:	bd10      	pop	{r4, pc}
   1612e:	46c0      	nop			; (mov r8, r8)
   16130:	20000068 	.word	0x20000068

00016134 <srand>:
   16134:	2200      	movs	r2, #0
   16136:	4b03      	ldr	r3, [pc, #12]	; (16144 <srand+0x10>)
   16138:	681b      	ldr	r3, [r3, #0]
   1613a:	33a8      	adds	r3, #168	; 0xa8
   1613c:	6018      	str	r0, [r3, #0]
   1613e:	605a      	str	r2, [r3, #4]
   16140:	4770      	bx	lr
   16142:	46c0      	nop			; (mov r8, r8)
   16144:	20000068 	.word	0x20000068

00016148 <rand>:
   16148:	b510      	push	{r4, lr}
   1614a:	4b09      	ldr	r3, [pc, #36]	; (16170 <rand+0x28>)
   1614c:	4a09      	ldr	r2, [pc, #36]	; (16174 <rand+0x2c>)
   1614e:	681c      	ldr	r4, [r3, #0]
   16150:	4b09      	ldr	r3, [pc, #36]	; (16178 <rand+0x30>)
   16152:	34a8      	adds	r4, #168	; 0xa8
   16154:	6820      	ldr	r0, [r4, #0]
   16156:	6861      	ldr	r1, [r4, #4]
   16158:	f7fc ffaa 	bl	130b0 <__aeabi_lmul>
   1615c:	2201      	movs	r2, #1
   1615e:	2300      	movs	r3, #0
   16160:	1880      	adds	r0, r0, r2
   16162:	4159      	adcs	r1, r3
   16164:	6020      	str	r0, [r4, #0]
   16166:	6061      	str	r1, [r4, #4]
   16168:	0048      	lsls	r0, r1, #1
   1616a:	0840      	lsrs	r0, r0, #1
   1616c:	bd10      	pop	{r4, pc}
   1616e:	46c0      	nop			; (mov r8, r8)
   16170:	20000068 	.word	0x20000068
   16174:	4c957f2d 	.word	0x4c957f2d
   16178:	5851f42d 	.word	0x5851f42d

0001617c <setbuf>:
   1617c:	424a      	negs	r2, r1
   1617e:	414a      	adcs	r2, r1
   16180:	2380      	movs	r3, #128	; 0x80
   16182:	b510      	push	{r4, lr}
   16184:	0052      	lsls	r2, r2, #1
   16186:	00db      	lsls	r3, r3, #3
   16188:	f000 f802 	bl	16190 <setvbuf>
   1618c:	bd10      	pop	{r4, pc}
   1618e:	46c0      	nop			; (mov r8, r8)

00016190 <setvbuf>:
   16190:	b5f0      	push	{r4, r5, r6, r7, lr}
   16192:	4647      	mov	r7, r8
   16194:	46ce      	mov	lr, r9
   16196:	b580      	push	{r7, lr}
   16198:	001f      	movs	r7, r3
   1619a:	4b63      	ldr	r3, [pc, #396]	; (16328 <setvbuf+0x198>)
   1619c:	b083      	sub	sp, #12
   1619e:	681d      	ldr	r5, [r3, #0]
   161a0:	0004      	movs	r4, r0
   161a2:	4688      	mov	r8, r1
   161a4:	0016      	movs	r6, r2
   161a6:	2d00      	cmp	r5, #0
   161a8:	d002      	beq.n	161b0 <setvbuf+0x20>
   161aa:	6bab      	ldr	r3, [r5, #56]	; 0x38
   161ac:	2b00      	cmp	r3, #0
   161ae:	d066      	beq.n	1627e <setvbuf+0xee>
   161b0:	2e02      	cmp	r6, #2
   161b2:	d005      	beq.n	161c0 <setvbuf+0x30>
   161b4:	2e01      	cmp	r6, #1
   161b6:	d900      	bls.n	161ba <setvbuf+0x2a>
   161b8:	e0a1      	b.n	162fe <setvbuf+0x16e>
   161ba:	2f00      	cmp	r7, #0
   161bc:	da00      	bge.n	161c0 <setvbuf+0x30>
   161be:	e09e      	b.n	162fe <setvbuf+0x16e>
   161c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   161c2:	07db      	lsls	r3, r3, #31
   161c4:	d533      	bpl.n	1622e <setvbuf+0x9e>
   161c6:	0021      	movs	r1, r4
   161c8:	0028      	movs	r0, r5
   161ca:	f004 f96d 	bl	1a4a8 <_fflush_r>
   161ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
   161d0:	2900      	cmp	r1, #0
   161d2:	d008      	beq.n	161e6 <setvbuf+0x56>
   161d4:	0023      	movs	r3, r4
   161d6:	3340      	adds	r3, #64	; 0x40
   161d8:	4299      	cmp	r1, r3
   161da:	d002      	beq.n	161e2 <setvbuf+0x52>
   161dc:	0028      	movs	r0, r5
   161de:	f004 fa67 	bl	1a6b0 <_free_r>
   161e2:	2300      	movs	r3, #0
   161e4:	6323      	str	r3, [r4, #48]	; 0x30
   161e6:	2300      	movs	r3, #0
   161e8:	61a3      	str	r3, [r4, #24]
   161ea:	6063      	str	r3, [r4, #4]
   161ec:	220c      	movs	r2, #12
   161ee:	5ea3      	ldrsh	r3, [r4, r2]
   161f0:	061a      	lsls	r2, r3, #24
   161f2:	d43d      	bmi.n	16270 <setvbuf+0xe0>
   161f4:	4a4d      	ldr	r2, [pc, #308]	; (1632c <setvbuf+0x19c>)
   161f6:	4013      	ands	r3, r2
   161f8:	81a3      	strh	r3, [r4, #12]
   161fa:	2e02      	cmp	r6, #2
   161fc:	d01e      	beq.n	1623c <setvbuf+0xac>
   161fe:	ab01      	add	r3, sp, #4
   16200:	466a      	mov	r2, sp
   16202:	0021      	movs	r1, r4
   16204:	0028      	movs	r0, r5
   16206:	f004 fcef 	bl	1abe8 <__swhatbuf_r>
   1620a:	89a3      	ldrh	r3, [r4, #12]
   1620c:	4318      	orrs	r0, r3
   1620e:	81a0      	strh	r0, [r4, #12]
   16210:	2f00      	cmp	r7, #0
   16212:	d138      	bne.n	16286 <setvbuf+0xf6>
   16214:	9f00      	ldr	r7, [sp, #0]
   16216:	0038      	movs	r0, r7
   16218:	f004 fd5e 	bl	1acd8 <malloc>
   1621c:	4680      	mov	r8, r0
   1621e:	2800      	cmp	r0, #0
   16220:	d100      	bne.n	16224 <setvbuf+0x94>
   16222:	e06f      	b.n	16304 <setvbuf+0x174>
   16224:	2280      	movs	r2, #128	; 0x80
   16226:	89a3      	ldrh	r3, [r4, #12]
   16228:	4313      	orrs	r3, r2
   1622a:	81a3      	strh	r3, [r4, #12]
   1622c:	e02e      	b.n	1628c <setvbuf+0xfc>
   1622e:	89a3      	ldrh	r3, [r4, #12]
   16230:	059b      	lsls	r3, r3, #22
   16232:	d4c8      	bmi.n	161c6 <setvbuf+0x36>
   16234:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16236:	f004 fcd3 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1623a:	e7c4      	b.n	161c6 <setvbuf+0x36>
   1623c:	2500      	movs	r5, #0
   1623e:	2202      	movs	r2, #2
   16240:	4313      	orrs	r3, r2
   16242:	2200      	movs	r2, #0
   16244:	60a2      	str	r2, [r4, #8]
   16246:	0022      	movs	r2, r4
   16248:	3243      	adds	r2, #67	; 0x43
   1624a:	6022      	str	r2, [r4, #0]
   1624c:	6122      	str	r2, [r4, #16]
   1624e:	2201      	movs	r2, #1
   16250:	6e61      	ldr	r1, [r4, #100]	; 0x64
   16252:	81a3      	strh	r3, [r4, #12]
   16254:	6162      	str	r2, [r4, #20]
   16256:	4211      	tst	r1, r2
   16258:	d104      	bne.n	16264 <setvbuf+0xd4>
   1625a:	059b      	lsls	r3, r3, #22
   1625c:	d402      	bmi.n	16264 <setvbuf+0xd4>
   1625e:	6da0      	ldr	r0, [r4, #88]	; 0x58
   16260:	f004 fcc0 	bl	1abe4 <__retarget_lock_release_recursive>
   16264:	0028      	movs	r0, r5
   16266:	b003      	add	sp, #12
   16268:	bc0c      	pop	{r2, r3}
   1626a:	4690      	mov	r8, r2
   1626c:	4699      	mov	r9, r3
   1626e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16270:	6921      	ldr	r1, [r4, #16]
   16272:	0028      	movs	r0, r5
   16274:	f004 fa1c 	bl	1a6b0 <_free_r>
   16278:	220c      	movs	r2, #12
   1627a:	5ea3      	ldrsh	r3, [r4, r2]
   1627c:	e7ba      	b.n	161f4 <setvbuf+0x64>
   1627e:	0028      	movs	r0, r5
   16280:	f004 f96c 	bl	1a55c <__sinit>
   16284:	e794      	b.n	161b0 <setvbuf+0x20>
   16286:	4643      	mov	r3, r8
   16288:	2b00      	cmp	r3, #0
   1628a:	d0c4      	beq.n	16216 <setvbuf+0x86>
   1628c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1628e:	2b00      	cmp	r3, #0
   16290:	d027      	beq.n	162e2 <setvbuf+0x152>
   16292:	9b00      	ldr	r3, [sp, #0]
   16294:	429f      	cmp	r7, r3
   16296:	d02a      	beq.n	162ee <setvbuf+0x15e>
   16298:	2380      	movs	r3, #128	; 0x80
   1629a:	89a2      	ldrh	r2, [r4, #12]
   1629c:	011b      	lsls	r3, r3, #4
   1629e:	4313      	orrs	r3, r2
   162a0:	b21b      	sxth	r3, r3
   162a2:	81a3      	strh	r3, [r4, #12]
   162a4:	2e01      	cmp	r6, #1
   162a6:	d026      	beq.n	162f6 <setvbuf+0x166>
   162a8:	4642      	mov	r2, r8
   162aa:	6022      	str	r2, [r4, #0]
   162ac:	6122      	str	r2, [r4, #16]
   162ae:	2208      	movs	r2, #8
   162b0:	b29b      	uxth	r3, r3
   162b2:	6167      	str	r7, [r4, #20]
   162b4:	401a      	ands	r2, r3
   162b6:	d00b      	beq.n	162d0 <setvbuf+0x140>
   162b8:	07da      	lsls	r2, r3, #31
   162ba:	d510      	bpl.n	162de <setvbuf+0x14e>
   162bc:	2200      	movs	r2, #0
   162be:	2501      	movs	r5, #1
   162c0:	60a2      	str	r2, [r4, #8]
   162c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   162c4:	427f      	negs	r7, r7
   162c6:	61a7      	str	r7, [r4, #24]
   162c8:	4015      	ands	r5, r2
   162ca:	d0c6      	beq.n	1625a <setvbuf+0xca>
   162cc:	2500      	movs	r5, #0
   162ce:	e7c9      	b.n	16264 <setvbuf+0xd4>
   162d0:	60a2      	str	r2, [r4, #8]
   162d2:	2501      	movs	r5, #1
   162d4:	6e62      	ldr	r2, [r4, #100]	; 0x64
   162d6:	4015      	ands	r5, r2
   162d8:	d0bf      	beq.n	1625a <setvbuf+0xca>
   162da:	2500      	movs	r5, #0
   162dc:	e7c2      	b.n	16264 <setvbuf+0xd4>
   162de:	60a7      	str	r7, [r4, #8]
   162e0:	e7f7      	b.n	162d2 <setvbuf+0x142>
   162e2:	0028      	movs	r0, r5
   162e4:	f004 f93a 	bl	1a55c <__sinit>
   162e8:	9b00      	ldr	r3, [sp, #0]
   162ea:	429f      	cmp	r7, r3
   162ec:	d1d4      	bne.n	16298 <setvbuf+0x108>
   162ee:	220c      	movs	r2, #12
   162f0:	5ea3      	ldrsh	r3, [r4, r2]
   162f2:	2e01      	cmp	r6, #1
   162f4:	d1d8      	bne.n	162a8 <setvbuf+0x118>
   162f6:	2201      	movs	r2, #1
   162f8:	4313      	orrs	r3, r2
   162fa:	81a3      	strh	r3, [r4, #12]
   162fc:	e7d4      	b.n	162a8 <setvbuf+0x118>
   162fe:	2501      	movs	r5, #1
   16300:	426d      	negs	r5, r5
   16302:	e7af      	b.n	16264 <setvbuf+0xd4>
   16304:	9b00      	ldr	r3, [sp, #0]
   16306:	4699      	mov	r9, r3
   16308:	42bb      	cmp	r3, r7
   1630a:	d005      	beq.n	16318 <setvbuf+0x188>
   1630c:	0018      	movs	r0, r3
   1630e:	f004 fce3 	bl	1acd8 <malloc>
   16312:	4680      	mov	r8, r0
   16314:	2800      	cmp	r0, #0
   16316:	d104      	bne.n	16322 <setvbuf+0x192>
   16318:	2501      	movs	r5, #1
   1631a:	220c      	movs	r2, #12
   1631c:	5ea3      	ldrsh	r3, [r4, r2]
   1631e:	426d      	negs	r5, r5
   16320:	e78d      	b.n	1623e <setvbuf+0xae>
   16322:	464f      	mov	r7, r9
   16324:	e77e      	b.n	16224 <setvbuf+0x94>
   16326:	46c0      	nop			; (mov r8, r8)
   16328:	20000068 	.word	0x20000068
   1632c:	fffff35c 	.word	0xfffff35c

00016330 <snprintf>:
   16330:	b40c      	push	{r2, r3}
   16332:	b530      	push	{r4, r5, lr}
   16334:	4b1e      	ldr	r3, [pc, #120]	; (163b0 <snprintf+0x80>)
   16336:	b09d      	sub	sp, #116	; 0x74
   16338:	681d      	ldr	r5, [r3, #0]
   1633a:	2900      	cmp	r1, #0
   1633c:	db33      	blt.n	163a6 <snprintf+0x76>
   1633e:	2382      	movs	r3, #130	; 0x82
   16340:	ac02      	add	r4, sp, #8
   16342:	009b      	lsls	r3, r3, #2
   16344:	81a3      	strh	r3, [r4, #12]
   16346:	9002      	str	r0, [sp, #8]
   16348:	6120      	str	r0, [r4, #16]
   1634a:	2900      	cmp	r1, #0
   1634c:	d012      	beq.n	16374 <snprintf+0x44>
   1634e:	2301      	movs	r3, #1
   16350:	3901      	subs	r1, #1
   16352:	425b      	negs	r3, r3
   16354:	60a1      	str	r1, [r4, #8]
   16356:	6161      	str	r1, [r4, #20]
   16358:	81e3      	strh	r3, [r4, #14]
   1635a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1635c:	ab21      	add	r3, sp, #132	; 0x84
   1635e:	0021      	movs	r1, r4
   16360:	0028      	movs	r0, r5
   16362:	9301      	str	r3, [sp, #4]
   16364:	f000 f858 	bl	16418 <_svfprintf_r>
   16368:	1c43      	adds	r3, r0, #1
   1636a:	db16      	blt.n	1639a <snprintf+0x6a>
   1636c:	2300      	movs	r3, #0
   1636e:	9a02      	ldr	r2, [sp, #8]
   16370:	7013      	strb	r3, [r2, #0]
   16372:	e00d      	b.n	16390 <snprintf+0x60>
   16374:	2301      	movs	r3, #1
   16376:	425b      	negs	r3, r3
   16378:	60a1      	str	r1, [r4, #8]
   1637a:	6161      	str	r1, [r4, #20]
   1637c:	81e3      	strh	r3, [r4, #14]
   1637e:	9a20      	ldr	r2, [sp, #128]	; 0x80
   16380:	ab21      	add	r3, sp, #132	; 0x84
   16382:	0021      	movs	r1, r4
   16384:	0028      	movs	r0, r5
   16386:	9301      	str	r3, [sp, #4]
   16388:	f000 f846 	bl	16418 <_svfprintf_r>
   1638c:	1c43      	adds	r3, r0, #1
   1638e:	db07      	blt.n	163a0 <snprintf+0x70>
   16390:	b01d      	add	sp, #116	; 0x74
   16392:	bc30      	pop	{r4, r5}
   16394:	bc08      	pop	{r3}
   16396:	b002      	add	sp, #8
   16398:	4718      	bx	r3
   1639a:	238b      	movs	r3, #139	; 0x8b
   1639c:	602b      	str	r3, [r5, #0]
   1639e:	e7e5      	b.n	1636c <snprintf+0x3c>
   163a0:	238b      	movs	r3, #139	; 0x8b
   163a2:	602b      	str	r3, [r5, #0]
   163a4:	e7f4      	b.n	16390 <snprintf+0x60>
   163a6:	238b      	movs	r3, #139	; 0x8b
   163a8:	2001      	movs	r0, #1
   163aa:	602b      	str	r3, [r5, #0]
   163ac:	4240      	negs	r0, r0
   163ae:	e7ef      	b.n	16390 <snprintf+0x60>
   163b0:	20000068 	.word	0x20000068

000163b4 <strlen>:
   163b4:	b510      	push	{r4, lr}
   163b6:	0783      	lsls	r3, r0, #30
   163b8:	d025      	beq.n	16406 <strlen+0x52>
   163ba:	7803      	ldrb	r3, [r0, #0]
   163bc:	2b00      	cmp	r3, #0
   163be:	d024      	beq.n	1640a <strlen+0x56>
   163c0:	0003      	movs	r3, r0
   163c2:	2103      	movs	r1, #3
   163c4:	e002      	b.n	163cc <strlen+0x18>
   163c6:	781a      	ldrb	r2, [r3, #0]
   163c8:	2a00      	cmp	r2, #0
   163ca:	d01a      	beq.n	16402 <strlen+0x4e>
   163cc:	3301      	adds	r3, #1
   163ce:	420b      	tst	r3, r1
   163d0:	d1f9      	bne.n	163c6 <strlen+0x12>
   163d2:	6819      	ldr	r1, [r3, #0]
   163d4:	4a0e      	ldr	r2, [pc, #56]	; (16410 <strlen+0x5c>)
   163d6:	4c0f      	ldr	r4, [pc, #60]	; (16414 <strlen+0x60>)
   163d8:	188a      	adds	r2, r1, r2
   163da:	438a      	bics	r2, r1
   163dc:	4222      	tst	r2, r4
   163de:	d106      	bne.n	163ee <strlen+0x3a>
   163e0:	3304      	adds	r3, #4
   163e2:	6819      	ldr	r1, [r3, #0]
   163e4:	4a0a      	ldr	r2, [pc, #40]	; (16410 <strlen+0x5c>)
   163e6:	188a      	adds	r2, r1, r2
   163e8:	438a      	bics	r2, r1
   163ea:	4222      	tst	r2, r4
   163ec:	d0f8      	beq.n	163e0 <strlen+0x2c>
   163ee:	001a      	movs	r2, r3
   163f0:	781b      	ldrb	r3, [r3, #0]
   163f2:	2b00      	cmp	r3, #0
   163f4:	d003      	beq.n	163fe <strlen+0x4a>
   163f6:	3201      	adds	r2, #1
   163f8:	7811      	ldrb	r1, [r2, #0]
   163fa:	2900      	cmp	r1, #0
   163fc:	d1fb      	bne.n	163f6 <strlen+0x42>
   163fe:	1a10      	subs	r0, r2, r0
   16400:	bd10      	pop	{r4, pc}
   16402:	1a18      	subs	r0, r3, r0
   16404:	e7fc      	b.n	16400 <strlen+0x4c>
   16406:	0003      	movs	r3, r0
   16408:	e7e3      	b.n	163d2 <strlen+0x1e>
   1640a:	2000      	movs	r0, #0
   1640c:	e7f8      	b.n	16400 <strlen+0x4c>
   1640e:	46c0      	nop			; (mov r8, r8)
   16410:	fefefeff 	.word	0xfefefeff
   16414:	80808080 	.word	0x80808080

00016418 <_svfprintf_r>:
   16418:	b5f0      	push	{r4, r5, r6, r7, lr}
   1641a:	46de      	mov	lr, fp
   1641c:	4645      	mov	r5, r8
   1641e:	4657      	mov	r7, sl
   16420:	464e      	mov	r6, r9
   16422:	b5e0      	push	{r5, r6, r7, lr}
   16424:	b0c3      	sub	sp, #268	; 0x10c
   16426:	000d      	movs	r5, r1
   16428:	9106      	str	r1, [sp, #24]
   1642a:	0014      	movs	r4, r2
   1642c:	930f      	str	r3, [sp, #60]	; 0x3c
   1642e:	9009      	str	r0, [sp, #36]	; 0x24
   16430:	f004 fbc4 	bl	1abbc <_localeconv_r>
   16434:	6803      	ldr	r3, [r0, #0]
   16436:	0018      	movs	r0, r3
   16438:	9319      	str	r3, [sp, #100]	; 0x64
   1643a:	f7ff ffbb 	bl	163b4 <strlen>
   1643e:	9018      	str	r0, [sp, #96]	; 0x60
   16440:	89ab      	ldrh	r3, [r5, #12]
   16442:	061b      	lsls	r3, r3, #24
   16444:	d505      	bpl.n	16452 <_svfprintf_r+0x3a>
   16446:	692b      	ldr	r3, [r5, #16]
   16448:	9307      	str	r3, [sp, #28]
   1644a:	2b00      	cmp	r3, #0
   1644c:	d101      	bne.n	16452 <_svfprintf_r+0x3a>
   1644e:	f001 f863 	bl	17518 <_svfprintf_r+0x1100>
   16452:	ab32      	add	r3, sp, #200	; 0xc8
   16454:	9325      	str	r3, [sp, #148]	; 0x94
   16456:	2300      	movs	r3, #0
   16458:	46a3      	mov	fp, r4
   1645a:	af25      	add	r7, sp, #148	; 0x94
   1645c:	60bb      	str	r3, [r7, #8]
   1645e:	607b      	str	r3, [r7, #4]
   16460:	9314      	str	r3, [sp, #80]	; 0x50
   16462:	9316      	str	r3, [sp, #88]	; 0x58
   16464:	9315      	str	r3, [sp, #84]	; 0x54
   16466:	ae32      	add	r6, sp, #200	; 0xc8
   16468:	9317      	str	r3, [sp, #92]	; 0x5c
   1646a:	931a      	str	r3, [sp, #104]	; 0x68
   1646c:	930a      	str	r3, [sp, #40]	; 0x28
   1646e:	465b      	mov	r3, fp
   16470:	781b      	ldrb	r3, [r3, #0]
   16472:	465c      	mov	r4, fp
   16474:	2b00      	cmp	r3, #0
   16476:	d01c      	beq.n	164b2 <_svfprintf_r+0x9a>
   16478:	2b25      	cmp	r3, #37	; 0x25
   1647a:	d102      	bne.n	16482 <_svfprintf_r+0x6a>
   1647c:	e019      	b.n	164b2 <_svfprintf_r+0x9a>
   1647e:	2b25      	cmp	r3, #37	; 0x25
   16480:	d003      	beq.n	1648a <_svfprintf_r+0x72>
   16482:	3401      	adds	r4, #1
   16484:	7823      	ldrb	r3, [r4, #0]
   16486:	2b00      	cmp	r3, #0
   16488:	d1f9      	bne.n	1647e <_svfprintf_r+0x66>
   1648a:	465b      	mov	r3, fp
   1648c:	1ae5      	subs	r5, r4, r3
   1648e:	d010      	beq.n	164b2 <_svfprintf_r+0x9a>
   16490:	465b      	mov	r3, fp
   16492:	6033      	str	r3, [r6, #0]
   16494:	68bb      	ldr	r3, [r7, #8]
   16496:	6075      	str	r5, [r6, #4]
   16498:	195b      	adds	r3, r3, r5
   1649a:	60bb      	str	r3, [r7, #8]
   1649c:	687b      	ldr	r3, [r7, #4]
   1649e:	3301      	adds	r3, #1
   164a0:	607b      	str	r3, [r7, #4]
   164a2:	2b07      	cmp	r3, #7
   164a4:	dc2e      	bgt.n	16504 <_svfprintf_r+0xec>
   164a6:	3608      	adds	r6, #8
   164a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   164aa:	469c      	mov	ip, r3
   164ac:	44ac      	add	ip, r5
   164ae:	4663      	mov	r3, ip
   164b0:	930a      	str	r3, [sp, #40]	; 0x28
   164b2:	7823      	ldrb	r3, [r4, #0]
   164b4:	2b00      	cmp	r3, #0
   164b6:	d02e      	beq.n	16516 <_svfprintf_r+0xfe>
   164b8:	1c63      	adds	r3, r4, #1
   164ba:	469b      	mov	fp, r3
   164bc:	2300      	movs	r3, #0
   164be:	aa16      	add	r2, sp, #88	; 0x58
   164c0:	77d3      	strb	r3, [r2, #31]
   164c2:	2201      	movs	r2, #1
   164c4:	4252      	negs	r2, r2
   164c6:	4692      	mov	sl, r2
   164c8:	2200      	movs	r2, #0
   164ca:	2100      	movs	r1, #0
   164cc:	920b      	str	r2, [sp, #44]	; 0x2c
   164ce:	3220      	adds	r2, #32
   164d0:	4691      	mov	r9, r2
   164d2:	3220      	adds	r2, #32
   164d4:	7863      	ldrb	r3, [r4, #1]
   164d6:	4688      	mov	r8, r1
   164d8:	2000      	movs	r0, #0
   164da:	2400      	movs	r4, #0
   164dc:	4694      	mov	ip, r2
   164de:	4659      	mov	r1, fp
   164e0:	3101      	adds	r1, #1
   164e2:	001a      	movs	r2, r3
   164e4:	3a20      	subs	r2, #32
   164e6:	2a58      	cmp	r2, #88	; 0x58
   164e8:	d900      	bls.n	164ec <_svfprintf_r+0xd4>
   164ea:	e2fd      	b.n	16ae8 <_svfprintf_r+0x6d0>
   164ec:	4dd7      	ldr	r5, [pc, #860]	; (1684c <_svfprintf_r+0x434>)
   164ee:	0092      	lsls	r2, r2, #2
   164f0:	58aa      	ldr	r2, [r5, r2]
   164f2:	4697      	mov	pc, r2
   164f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   164f6:	920f      	str	r2, [sp, #60]	; 0x3c
   164f8:	425b      	negs	r3, r3
   164fa:	930b      	str	r3, [sp, #44]	; 0x2c
   164fc:	2304      	movs	r3, #4
   164fe:	431c      	orrs	r4, r3
   16500:	780b      	ldrb	r3, [r1, #0]
   16502:	e7ed      	b.n	164e0 <_svfprintf_r+0xc8>
   16504:	003a      	movs	r2, r7
   16506:	9906      	ldr	r1, [sp, #24]
   16508:	9809      	ldr	r0, [sp, #36]	; 0x24
   1650a:	f005 fca9 	bl	1be60 <__ssprint_r>
   1650e:	2800      	cmp	r0, #0
   16510:	d109      	bne.n	16526 <_svfprintf_r+0x10e>
   16512:	ae32      	add	r6, sp, #200	; 0xc8
   16514:	e7c8      	b.n	164a8 <_svfprintf_r+0x90>
   16516:	68bb      	ldr	r3, [r7, #8]
   16518:	2b00      	cmp	r3, #0
   1651a:	d004      	beq.n	16526 <_svfprintf_r+0x10e>
   1651c:	003a      	movs	r2, r7
   1651e:	9906      	ldr	r1, [sp, #24]
   16520:	9809      	ldr	r0, [sp, #36]	; 0x24
   16522:	f005 fc9d 	bl	1be60 <__ssprint_r>
   16526:	9b06      	ldr	r3, [sp, #24]
   16528:	899b      	ldrh	r3, [r3, #12]
   1652a:	065b      	lsls	r3, r3, #25
   1652c:	d501      	bpl.n	16532 <_svfprintf_r+0x11a>
   1652e:	f001 f8ce 	bl	176ce <_svfprintf_r+0x12b6>
   16532:	980a      	ldr	r0, [sp, #40]	; 0x28
   16534:	b043      	add	sp, #268	; 0x10c
   16536:	bc3c      	pop	{r2, r3, r4, r5}
   16538:	4690      	mov	r8, r2
   1653a:	4699      	mov	r9, r3
   1653c:	46a2      	mov	sl, r4
   1653e:	46ab      	mov	fp, r5
   16540:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16542:	2201      	movs	r2, #1
   16544:	780b      	ldrb	r3, [r1, #0]
   16546:	4690      	mov	r8, r2
   16548:	202b      	movs	r0, #43	; 0x2b
   1654a:	e7c9      	b.n	164e0 <_svfprintf_r+0xc8>
   1654c:	1c4b      	adds	r3, r1, #1
   1654e:	469b      	mov	fp, r3
   16550:	780b      	ldrb	r3, [r1, #0]
   16552:	2b2a      	cmp	r3, #42	; 0x2a
   16554:	d101      	bne.n	1655a <_svfprintf_r+0x142>
   16556:	f001 fa1b 	bl	17990 <_svfprintf_r+0x1578>
   1655a:	001a      	movs	r2, r3
   1655c:	2100      	movs	r1, #0
   1655e:	3a30      	subs	r2, #48	; 0x30
   16560:	468a      	mov	sl, r1
   16562:	4659      	mov	r1, fp
   16564:	2a09      	cmp	r2, #9
   16566:	d8bc      	bhi.n	164e2 <_svfprintf_r+0xca>
   16568:	0003      	movs	r3, r0
   1656a:	0011      	movs	r1, r2
   1656c:	4650      	mov	r0, sl
   1656e:	465a      	mov	r2, fp
   16570:	469a      	mov	sl, r3
   16572:	46a3      	mov	fp, r4
   16574:	0083      	lsls	r3, r0, #2
   16576:	181b      	adds	r3, r3, r0
   16578:	7814      	ldrb	r4, [r2, #0]
   1657a:	005b      	lsls	r3, r3, #1
   1657c:	1858      	adds	r0, r3, r1
   1657e:	0021      	movs	r1, r4
   16580:	1c53      	adds	r3, r2, #1
   16582:	3930      	subs	r1, #48	; 0x30
   16584:	001a      	movs	r2, r3
   16586:	2909      	cmp	r1, #9
   16588:	d9f4      	bls.n	16574 <_svfprintf_r+0x15c>
   1658a:	4652      	mov	r2, sl
   1658c:	0019      	movs	r1, r3
   1658e:	4682      	mov	sl, r0
   16590:	0023      	movs	r3, r4
   16592:	0010      	movs	r0, r2
   16594:	465c      	mov	r4, fp
   16596:	e7a4      	b.n	164e2 <_svfprintf_r+0xca>
   16598:	2380      	movs	r3, #128	; 0x80
   1659a:	431c      	orrs	r4, r3
   1659c:	780b      	ldrb	r3, [r1, #0]
   1659e:	e79f      	b.n	164e0 <_svfprintf_r+0xc8>
   165a0:	468b      	mov	fp, r1
   165a2:	4641      	mov	r1, r8
   165a4:	9312      	str	r3, [sp, #72]	; 0x48
   165a6:	2900      	cmp	r1, #0
   165a8:	d001      	beq.n	165ae <_svfprintf_r+0x196>
   165aa:	f001 fa1f 	bl	179ec <_svfprintf_r+0x15d4>
   165ae:	2310      	movs	r3, #16
   165b0:	431c      	orrs	r4, r3
   165b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   165b4:	06a3      	lsls	r3, r4, #26
   165b6:	d501      	bpl.n	165bc <_svfprintf_r+0x1a4>
   165b8:	f000 fe88 	bl	172cc <_svfprintf_r+0xeb4>
   165bc:	06e3      	lsls	r3, r4, #27
   165be:	d501      	bpl.n	165c4 <_svfprintf_r+0x1ac>
   165c0:	f000 fd80 	bl	170c4 <_svfprintf_r+0xcac>
   165c4:	0663      	lsls	r3, r4, #25
   165c6:	d401      	bmi.n	165cc <_svfprintf_r+0x1b4>
   165c8:	f000 fd7c 	bl	170c4 <_svfprintf_r+0xcac>
   165cc:	2100      	movs	r1, #0
   165ce:	5e53      	ldrsh	r3, [r2, r1]
   165d0:	930c      	str	r3, [sp, #48]	; 0x30
   165d2:	3204      	adds	r2, #4
   165d4:	17db      	asrs	r3, r3, #31
   165d6:	930d      	str	r3, [sp, #52]	; 0x34
   165d8:	920f      	str	r2, [sp, #60]	; 0x3c
   165da:	d501      	bpl.n	165e0 <_svfprintf_r+0x1c8>
   165dc:	f000 fe86 	bl	172ec <_svfprintf_r+0xed4>
   165e0:	990c      	ldr	r1, [sp, #48]	; 0x30
   165e2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   165e4:	0008      	movs	r0, r1
   165e6:	ab16      	add	r3, sp, #88	; 0x58
   165e8:	7fdb      	ldrb	r3, [r3, #31]
   165ea:	4310      	orrs	r0, r2
   165ec:	4698      	mov	r8, r3
   165ee:	0002      	movs	r2, r0
   165f0:	2301      	movs	r3, #1
   165f2:	4651      	mov	r1, sl
   165f4:	3101      	adds	r1, #1
   165f6:	d100      	bne.n	165fa <_svfprintf_r+0x1e2>
   165f8:	e0ff      	b.n	167fa <_svfprintf_r+0x3e2>
   165fa:	2180      	movs	r1, #128	; 0x80
   165fc:	0020      	movs	r0, r4
   165fe:	4388      	bics	r0, r1
   16600:	9008      	str	r0, [sp, #32]
   16602:	2a00      	cmp	r2, #0
   16604:	d000      	beq.n	16608 <_svfprintf_r+0x1f0>
   16606:	e0fc      	b.n	16802 <_svfprintf_r+0x3ea>
   16608:	4652      	mov	r2, sl
   1660a:	2a00      	cmp	r2, #0
   1660c:	d001      	beq.n	16612 <_svfprintf_r+0x1fa>
   1660e:	f000 fc2c 	bl	16e6a <_svfprintf_r+0xa52>
   16612:	2b00      	cmp	r3, #0
   16614:	d001      	beq.n	1661a <_svfprintf_r+0x202>
   16616:	f000 fd04 	bl	17022 <_svfprintf_r+0xc0a>
   1661a:	2001      	movs	r0, #1
   1661c:	ab32      	add	r3, sp, #200	; 0xc8
   1661e:	4020      	ands	r0, r4
   16620:	900e      	str	r0, [sp, #56]	; 0x38
   16622:	9311      	str	r3, [sp, #68]	; 0x44
   16624:	d008      	beq.n	16638 <_svfprintf_r+0x220>
   16626:	2327      	movs	r3, #39	; 0x27
   16628:	2130      	movs	r1, #48	; 0x30
   1662a:	aa28      	add	r2, sp, #160	; 0xa0
   1662c:	54d1      	strb	r1, [r2, r3]
   1662e:	aa16      	add	r2, sp, #88	; 0x58
   16630:	4694      	mov	ip, r2
   16632:	3348      	adds	r3, #72	; 0x48
   16634:	4463      	add	r3, ip
   16636:	9311      	str	r3, [sp, #68]	; 0x44
   16638:	4653      	mov	r3, sl
   1663a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1663c:	9307      	str	r3, [sp, #28]
   1663e:	4592      	cmp	sl, r2
   16640:	da00      	bge.n	16644 <_svfprintf_r+0x22c>
   16642:	9207      	str	r2, [sp, #28]
   16644:	2300      	movs	r3, #0
   16646:	9313      	str	r3, [sp, #76]	; 0x4c
   16648:	4643      	mov	r3, r8
   1664a:	2b00      	cmp	r3, #0
   1664c:	d002      	beq.n	16654 <_svfprintf_r+0x23c>
   1664e:	9b07      	ldr	r3, [sp, #28]
   16650:	3301      	adds	r3, #1
   16652:	9307      	str	r3, [sp, #28]
   16654:	2302      	movs	r3, #2
   16656:	9a08      	ldr	r2, [sp, #32]
   16658:	401a      	ands	r2, r3
   1665a:	4691      	mov	r9, r2
   1665c:	d002      	beq.n	16664 <_svfprintf_r+0x24c>
   1665e:	9b07      	ldr	r3, [sp, #28]
   16660:	3302      	adds	r3, #2
   16662:	9307      	str	r3, [sp, #28]
   16664:	2384      	movs	r3, #132	; 0x84
   16666:	9a08      	ldr	r2, [sp, #32]
   16668:	401a      	ands	r2, r3
   1666a:	9210      	str	r2, [sp, #64]	; 0x40
   1666c:	d000      	beq.n	16670 <_svfprintf_r+0x258>
   1666e:	e24d      	b.n	16b0c <_svfprintf_r+0x6f4>
   16670:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16672:	9a07      	ldr	r2, [sp, #28]
   16674:	1a9c      	subs	r4, r3, r2
   16676:	2c00      	cmp	r4, #0
   16678:	dc00      	bgt.n	1667c <_svfprintf_r+0x264>
   1667a:	e247      	b.n	16b0c <_svfprintf_r+0x6f4>
   1667c:	4974      	ldr	r1, [pc, #464]	; (16850 <_svfprintf_r+0x438>)
   1667e:	68ba      	ldr	r2, [r7, #8]
   16680:	687b      	ldr	r3, [r7, #4]
   16682:	4688      	mov	r8, r1
   16684:	2c10      	cmp	r4, #16
   16686:	dd1f      	ble.n	166c8 <_svfprintf_r+0x2b0>
   16688:	0031      	movs	r1, r6
   1668a:	2510      	movs	r5, #16
   1668c:	4646      	mov	r6, r8
   1668e:	e003      	b.n	16698 <_svfprintf_r+0x280>
   16690:	3c10      	subs	r4, #16
   16692:	3108      	adds	r1, #8
   16694:	2c10      	cmp	r4, #16
   16696:	dd15      	ble.n	166c4 <_svfprintf_r+0x2ac>
   16698:	3210      	adds	r2, #16
   1669a:	3301      	adds	r3, #1
   1669c:	600e      	str	r6, [r1, #0]
   1669e:	604d      	str	r5, [r1, #4]
   166a0:	60ba      	str	r2, [r7, #8]
   166a2:	607b      	str	r3, [r7, #4]
   166a4:	2b07      	cmp	r3, #7
   166a6:	ddf3      	ble.n	16690 <_svfprintf_r+0x278>
   166a8:	003a      	movs	r2, r7
   166aa:	9906      	ldr	r1, [sp, #24]
   166ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   166ae:	f005 fbd7 	bl	1be60 <__ssprint_r>
   166b2:	2800      	cmp	r0, #0
   166b4:	d000      	beq.n	166b8 <_svfprintf_r+0x2a0>
   166b6:	e736      	b.n	16526 <_svfprintf_r+0x10e>
   166b8:	3c10      	subs	r4, #16
   166ba:	68ba      	ldr	r2, [r7, #8]
   166bc:	687b      	ldr	r3, [r7, #4]
   166be:	a932      	add	r1, sp, #200	; 0xc8
   166c0:	2c10      	cmp	r4, #16
   166c2:	dce9      	bgt.n	16698 <_svfprintf_r+0x280>
   166c4:	46b0      	mov	r8, r6
   166c6:	000e      	movs	r6, r1
   166c8:	4641      	mov	r1, r8
   166ca:	6074      	str	r4, [r6, #4]
   166cc:	3301      	adds	r3, #1
   166ce:	18a4      	adds	r4, r4, r2
   166d0:	6031      	str	r1, [r6, #0]
   166d2:	60bc      	str	r4, [r7, #8]
   166d4:	607b      	str	r3, [r7, #4]
   166d6:	2b07      	cmp	r3, #7
   166d8:	dd01      	ble.n	166de <_svfprintf_r+0x2c6>
   166da:	f000 fca8 	bl	1702e <_svfprintf_r+0xc16>
   166de:	ab16      	add	r3, sp, #88	; 0x58
   166e0:	7fdb      	ldrb	r3, [r3, #31]
   166e2:	3608      	adds	r6, #8
   166e4:	4698      	mov	r8, r3
   166e6:	e212      	b.n	16b0e <_svfprintf_r+0x6f6>
   166e8:	468b      	mov	fp, r1
   166ea:	4641      	mov	r1, r8
   166ec:	9312      	str	r3, [sp, #72]	; 0x48
   166ee:	2900      	cmp	r1, #0
   166f0:	d001      	beq.n	166f6 <_svfprintf_r+0x2de>
   166f2:	f001 f977 	bl	179e4 <_svfprintf_r+0x15cc>
   166f6:	2207      	movs	r2, #7
   166f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   166fa:	3307      	adds	r3, #7
   166fc:	4393      	bics	r3, r2
   166fe:	3201      	adds	r2, #1
   16700:	4694      	mov	ip, r2
   16702:	449c      	add	ip, r3
   16704:	4662      	mov	r2, ip
   16706:	920f      	str	r2, [sp, #60]	; 0x3c
   16708:	681a      	ldr	r2, [r3, #0]
   1670a:	9216      	str	r2, [sp, #88]	; 0x58
   1670c:	685b      	ldr	r3, [r3, #4]
   1670e:	2201      	movs	r2, #1
   16710:	9315      	str	r3, [sp, #84]	; 0x54
   16712:	9b15      	ldr	r3, [sp, #84]	; 0x54
   16714:	9d16      	ldr	r5, [sp, #88]	; 0x58
   16716:	005b      	lsls	r3, r3, #1
   16718:	085b      	lsrs	r3, r3, #1
   1671a:	4698      	mov	r8, r3
   1671c:	4252      	negs	r2, r2
   1671e:	4b4d      	ldr	r3, [pc, #308]	; (16854 <_svfprintf_r+0x43c>)
   16720:	0028      	movs	r0, r5
   16722:	4641      	mov	r1, r8
   16724:	f005 ff2e 	bl	1c584 <__aeabi_dcmpun>
   16728:	2800      	cmp	r0, #0
   1672a:	d001      	beq.n	16730 <_svfprintf_r+0x318>
   1672c:	f000 fdfd 	bl	1732a <_svfprintf_r+0xf12>
   16730:	2201      	movs	r2, #1
   16732:	4b48      	ldr	r3, [pc, #288]	; (16854 <_svfprintf_r+0x43c>)
   16734:	4252      	negs	r2, r2
   16736:	0028      	movs	r0, r5
   16738:	4641      	mov	r1, r8
   1673a:	f7ff fa9b 	bl	15c74 <__aeabi_dcmple>
   1673e:	2800      	cmp	r0, #0
   16740:	d001      	beq.n	16746 <_svfprintf_r+0x32e>
   16742:	f000 fdf2 	bl	1732a <_svfprintf_r+0xf12>
   16746:	2200      	movs	r2, #0
   16748:	2300      	movs	r3, #0
   1674a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1674c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1674e:	f7ff fa87 	bl	15c60 <__aeabi_dcmplt>
   16752:	2800      	cmp	r0, #0
   16754:	d001      	beq.n	1675a <_svfprintf_r+0x342>
   16756:	f001 f822 	bl	1779e <_svfprintf_r+0x1386>
   1675a:	ab16      	add	r3, sp, #88	; 0x58
   1675c:	7fdb      	ldrb	r3, [r3, #31]
   1675e:	4698      	mov	r8, r3
   16760:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16762:	2b47      	cmp	r3, #71	; 0x47
   16764:	dd01      	ble.n	1676a <_svfprintf_r+0x352>
   16766:	f000 fec7 	bl	174f8 <_svfprintf_r+0x10e0>
   1676a:	4b3b      	ldr	r3, [pc, #236]	; (16858 <_svfprintf_r+0x440>)
   1676c:	9311      	str	r3, [sp, #68]	; 0x44
   1676e:	2380      	movs	r3, #128	; 0x80
   16770:	439c      	bics	r4, r3
   16772:	3b7d      	subs	r3, #125	; 0x7d
   16774:	9307      	str	r3, [sp, #28]
   16776:	930e      	str	r3, [sp, #56]	; 0x38
   16778:	2300      	movs	r3, #0
   1677a:	9408      	str	r4, [sp, #32]
   1677c:	469a      	mov	sl, r3
   1677e:	9313      	str	r3, [sp, #76]	; 0x4c
   16780:	e762      	b.n	16648 <_svfprintf_r+0x230>
   16782:	2200      	movs	r2, #0
   16784:	3b30      	subs	r3, #48	; 0x30
   16786:	0015      	movs	r5, r2
   16788:	001a      	movs	r2, r3
   1678a:	0003      	movs	r3, r0
   1678c:	9407      	str	r4, [sp, #28]
   1678e:	0008      	movs	r0, r1
   16790:	002c      	movs	r4, r5
   16792:	469b      	mov	fp, r3
   16794:	00a3      	lsls	r3, r4, #2
   16796:	191c      	adds	r4, r3, r4
   16798:	7803      	ldrb	r3, [r0, #0]
   1679a:	0064      	lsls	r4, r4, #1
   1679c:	1914      	adds	r4, r2, r4
   1679e:	001a      	movs	r2, r3
   167a0:	3101      	adds	r1, #1
   167a2:	3a30      	subs	r2, #48	; 0x30
   167a4:	0008      	movs	r0, r1
   167a6:	2a09      	cmp	r2, #9
   167a8:	d9f4      	bls.n	16794 <_svfprintf_r+0x37c>
   167aa:	940b      	str	r4, [sp, #44]	; 0x2c
   167ac:	4658      	mov	r0, fp
   167ae:	9c07      	ldr	r4, [sp, #28]
   167b0:	e697      	b.n	164e2 <_svfprintf_r+0xca>
   167b2:	2308      	movs	r3, #8
   167b4:	431c      	orrs	r4, r3
   167b6:	780b      	ldrb	r3, [r1, #0]
   167b8:	e692      	b.n	164e0 <_svfprintf_r+0xc8>
   167ba:	9312      	str	r3, [sp, #72]	; 0x48
   167bc:	2310      	movs	r3, #16
   167be:	431c      	orrs	r4, r3
   167c0:	468b      	mov	fp, r1
   167c2:	06a3      	lsls	r3, r4, #26
   167c4:	d500      	bpl.n	167c8 <_svfprintf_r+0x3b0>
   167c6:	e17b      	b.n	16ac0 <_svfprintf_r+0x6a8>
   167c8:	06e3      	lsls	r3, r4, #27
   167ca:	d501      	bpl.n	167d0 <_svfprintf_r+0x3b8>
   167cc:	f000 fc7e 	bl	170cc <_svfprintf_r+0xcb4>
   167d0:	0663      	lsls	r3, r4, #25
   167d2:	d401      	bmi.n	167d8 <_svfprintf_r+0x3c0>
   167d4:	f000 fc7a 	bl	170cc <_svfprintf_r+0xcb4>
   167d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   167da:	881a      	ldrh	r2, [r3, #0]
   167dc:	920c      	str	r2, [sp, #48]	; 0x30
   167de:	2200      	movs	r2, #0
   167e0:	3304      	adds	r3, #4
   167e2:	930f      	str	r3, [sp, #60]	; 0x3c
   167e4:	2300      	movs	r3, #0
   167e6:	920d      	str	r2, [sp, #52]	; 0x34
   167e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   167ea:	2100      	movs	r1, #0
   167ec:	a816      	add	r0, sp, #88	; 0x58
   167ee:	77c1      	strb	r1, [r0, #31]
   167f0:	4688      	mov	r8, r1
   167f2:	4651      	mov	r1, sl
   167f4:	3101      	adds	r1, #1
   167f6:	d000      	beq.n	167fa <_svfprintf_r+0x3e2>
   167f8:	e6ff      	b.n	165fa <_svfprintf_r+0x1e2>
   167fa:	2a00      	cmp	r2, #0
   167fc:	d100      	bne.n	16800 <_svfprintf_r+0x3e8>
   167fe:	e335      	b.n	16e6c <_svfprintf_r+0xa54>
   16800:	9408      	str	r4, [sp, #32]
   16802:	2b01      	cmp	r3, #1
   16804:	d100      	bne.n	16808 <_svfprintf_r+0x3f0>
   16806:	e3e5      	b.n	16fd4 <_svfprintf_r+0xbbc>
   16808:	2b02      	cmp	r3, #2
   1680a:	d000      	beq.n	1680e <_svfprintf_r+0x3f6>
   1680c:	e362      	b.n	16ed4 <_svfprintf_r+0xabc>
   1680e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
   16810:	200f      	movs	r0, #15
   16812:	46a1      	mov	r9, r4
   16814:	46b4      	mov	ip, r6
   16816:	ab32      	add	r3, sp, #200	; 0xc8
   16818:	0019      	movs	r1, r3
   1681a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1681c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1681e:	0004      	movs	r4, r0
   16820:	464d      	mov	r5, r9
   16822:	4014      	ands	r4, r2
   16824:	5d2c      	ldrb	r4, [r5, r4]
   16826:	071e      	lsls	r6, r3, #28
   16828:	0915      	lsrs	r5, r2, #4
   1682a:	3901      	subs	r1, #1
   1682c:	432e      	orrs	r6, r5
   1682e:	700c      	strb	r4, [r1, #0]
   16830:	091c      	lsrs	r4, r3, #4
   16832:	0023      	movs	r3, r4
   16834:	0034      	movs	r4, r6
   16836:	0032      	movs	r2, r6
   16838:	431c      	orrs	r4, r3
   1683a:	d1f0      	bne.n	1681e <_svfprintf_r+0x406>
   1683c:	920c      	str	r2, [sp, #48]	; 0x30
   1683e:	930d      	str	r3, [sp, #52]	; 0x34
   16840:	ab32      	add	r3, sp, #200	; 0xc8
   16842:	1a5b      	subs	r3, r3, r1
   16844:	9111      	str	r1, [sp, #68]	; 0x44
   16846:	4666      	mov	r6, ip
   16848:	930e      	str	r3, [sp, #56]	; 0x38
   1684a:	e6f5      	b.n	16638 <_svfprintf_r+0x220>
   1684c:	0001dee0 	.word	0x0001dee0
   16850:	0001e084 	.word	0x0001e084
   16854:	7fefffff 	.word	0x7fefffff
   16858:	0001e044 	.word	0x0001e044
   1685c:	9312      	str	r3, [sp, #72]	; 0x48
   1685e:	2310      	movs	r3, #16
   16860:	431c      	orrs	r4, r3
   16862:	468b      	mov	fp, r1
   16864:	06a3      	lsls	r3, r4, #26
   16866:	d500      	bpl.n	1686a <_svfprintf_r+0x452>
   16868:	e111      	b.n	16a8e <_svfprintf_r+0x676>
   1686a:	06e3      	lsls	r3, r4, #27
   1686c:	d501      	bpl.n	16872 <_svfprintf_r+0x45a>
   1686e:	f000 fc31 	bl	170d4 <_svfprintf_r+0xcbc>
   16872:	0663      	lsls	r3, r4, #25
   16874:	d401      	bmi.n	1687a <_svfprintf_r+0x462>
   16876:	f000 fc2d 	bl	170d4 <_svfprintf_r+0xcbc>
   1687a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1687c:	881a      	ldrh	r2, [r3, #0]
   1687e:	920c      	str	r2, [sp, #48]	; 0x30
   16880:	2200      	movs	r2, #0
   16882:	3304      	adds	r3, #4
   16884:	920d      	str	r2, [sp, #52]	; 0x34
   16886:	930f      	str	r3, [sp, #60]	; 0x3c
   16888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1688a:	2301      	movs	r3, #1
   1688c:	e7ad      	b.n	167ea <_svfprintf_r+0x3d2>
   1688e:	468b      	mov	fp, r1
   16890:	4641      	mov	r1, r8
   16892:	9312      	str	r3, [sp, #72]	; 0x48
   16894:	2900      	cmp	r1, #0
   16896:	d001      	beq.n	1689c <_svfprintf_r+0x484>
   16898:	f001 f890 	bl	179bc <_svfprintf_r+0x15a4>
   1689c:	4bb8      	ldr	r3, [pc, #736]	; (16b80 <_svfprintf_r+0x768>)
   1689e:	9317      	str	r3, [sp, #92]	; 0x5c
   168a0:	06a3      	lsls	r3, r4, #26
   168a2:	d500      	bpl.n	168a6 <_svfprintf_r+0x48e>
   168a4:	e0ab      	b.n	169fe <_svfprintf_r+0x5e6>
   168a6:	06e3      	lsls	r3, r4, #27
   168a8:	d501      	bpl.n	168ae <_svfprintf_r+0x496>
   168aa:	f000 fc07 	bl	170bc <_svfprintf_r+0xca4>
   168ae:	0663      	lsls	r3, r4, #25
   168b0:	d401      	bmi.n	168b6 <_svfprintf_r+0x49e>
   168b2:	f000 fc03 	bl	170bc <_svfprintf_r+0xca4>
   168b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   168b8:	881a      	ldrh	r2, [r3, #0]
   168ba:	920c      	str	r2, [sp, #48]	; 0x30
   168bc:	2200      	movs	r2, #0
   168be:	3304      	adds	r3, #4
   168c0:	920d      	str	r2, [sp, #52]	; 0x34
   168c2:	930f      	str	r3, [sp, #60]	; 0x3c
   168c4:	07e3      	lsls	r3, r4, #31
   168c6:	d400      	bmi.n	168ca <_svfprintf_r+0x4b2>
   168c8:	e0a9      	b.n	16a1e <_svfprintf_r+0x606>
   168ca:	990c      	ldr	r1, [sp, #48]	; 0x30
   168cc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   168ce:	000b      	movs	r3, r1
   168d0:	4313      	orrs	r3, r2
   168d2:	001a      	movs	r2, r3
   168d4:	2302      	movs	r3, #2
   168d6:	2a00      	cmp	r2, #0
   168d8:	d100      	bne.n	168dc <_svfprintf_r+0x4c4>
   168da:	e786      	b.n	167ea <_svfprintf_r+0x3d2>
   168dc:	2030      	movs	r0, #48	; 0x30
   168de:	a91e      	add	r1, sp, #120	; 0x78
   168e0:	7008      	strb	r0, [r1, #0]
   168e2:	2548      	movs	r5, #72	; 0x48
   168e4:	4668      	mov	r0, sp
   168e6:	1940      	adds	r0, r0, r5
   168e8:	7800      	ldrb	r0, [r0, #0]
   168ea:	431c      	orrs	r4, r3
   168ec:	7048      	strb	r0, [r1, #1]
   168ee:	e77c      	b.n	167ea <_svfprintf_r+0x3d2>
   168f0:	468b      	mov	fp, r1
   168f2:	4641      	mov	r1, r8
   168f4:	2900      	cmp	r1, #0
   168f6:	d001      	beq.n	168fc <_svfprintf_r+0x4e4>
   168f8:	f001 f883 	bl	17a02 <_svfprintf_r+0x15ea>
   168fc:	06a3      	lsls	r3, r4, #26
   168fe:	d501      	bpl.n	16904 <_svfprintf_r+0x4ec>
   16900:	f000 fde9 	bl	174d6 <_svfprintf_r+0x10be>
   16904:	06e3      	lsls	r3, r4, #27
   16906:	d501      	bpl.n	1690c <_svfprintf_r+0x4f4>
   16908:	f000 fd9b 	bl	17442 <_svfprintf_r+0x102a>
   1690c:	0663      	lsls	r3, r4, #25
   1690e:	d401      	bmi.n	16914 <_svfprintf_r+0x4fc>
   16910:	f000 fd97 	bl	17442 <_svfprintf_r+0x102a>
   16914:	4669      	mov	r1, sp
   16916:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16918:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   1691a:	681a      	ldr	r2, [r3, #0]
   1691c:	3304      	adds	r3, #4
   1691e:	9207      	str	r2, [sp, #28]
   16920:	8011      	strh	r1, [r2, #0]
   16922:	930f      	str	r3, [sp, #60]	; 0x3c
   16924:	e5a3      	b.n	1646e <_svfprintf_r+0x56>
   16926:	464b      	mov	r3, r9
   16928:	431c      	orrs	r4, r3
   1692a:	780b      	ldrb	r3, [r1, #0]
   1692c:	e5d8      	b.n	164e0 <_svfprintf_r+0xc8>
   1692e:	9312      	str	r3, [sp, #72]	; 0x48
   16930:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16932:	468b      	mov	fp, r1
   16934:	1d1d      	adds	r5, r3, #4
   16936:	681b      	ldr	r3, [r3, #0]
   16938:	a916      	add	r1, sp, #88	; 0x58
   1693a:	001a      	movs	r2, r3
   1693c:	9311      	str	r3, [sp, #68]	; 0x44
   1693e:	2300      	movs	r3, #0
   16940:	77cb      	strb	r3, [r1, #31]
   16942:	2a00      	cmp	r2, #0
   16944:	d101      	bne.n	1694a <_svfprintf_r+0x532>
   16946:	f000 fefb 	bl	17740 <_svfprintf_r+0x1328>
   1694a:	4653      	mov	r3, sl
   1694c:	3301      	adds	r3, #1
   1694e:	d101      	bne.n	16954 <_svfprintf_r+0x53c>
   16950:	f000 fe38 	bl	175c4 <_svfprintf_r+0x11ac>
   16954:	4652      	mov	r2, sl
   16956:	2100      	movs	r1, #0
   16958:	9811      	ldr	r0, [sp, #68]	; 0x44
   1695a:	f004 fc7b 	bl	1b254 <memchr>
   1695e:	2800      	cmp	r0, #0
   16960:	d101      	bne.n	16966 <_svfprintf_r+0x54e>
   16962:	f000 ff54 	bl	1780e <_svfprintf_r+0x13f6>
   16966:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16968:	1ac3      	subs	r3, r0, r3
   1696a:	001a      	movs	r2, r3
   1696c:	930e      	str	r3, [sp, #56]	; 0x38
   1696e:	43db      	mvns	r3, r3
   16970:	17db      	asrs	r3, r3, #31
   16972:	401a      	ands	r2, r3
   16974:	ab16      	add	r3, sp, #88	; 0x58
   16976:	7fdb      	ldrb	r3, [r3, #31]
   16978:	9207      	str	r2, [sp, #28]
   1697a:	4698      	mov	r8, r3
   1697c:	2300      	movs	r3, #0
   1697e:	950f      	str	r5, [sp, #60]	; 0x3c
   16980:	9408      	str	r4, [sp, #32]
   16982:	469a      	mov	sl, r3
   16984:	9313      	str	r3, [sp, #76]	; 0x4c
   16986:	e65f      	b.n	16648 <_svfprintf_r+0x230>
   16988:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1698a:	9312      	str	r3, [sp, #72]	; 0x48
   1698c:	6813      	ldr	r3, [r2, #0]
   1698e:	ad28      	add	r5, sp, #160	; 0xa0
   16990:	9307      	str	r3, [sp, #28]
   16992:	466b      	mov	r3, sp
   16994:	7f1b      	ldrb	r3, [r3, #28]
   16996:	468b      	mov	fp, r1
   16998:	702b      	strb	r3, [r5, #0]
   1699a:	2300      	movs	r3, #0
   1699c:	a916      	add	r1, sp, #88	; 0x58
   1699e:	77cb      	strb	r3, [r1, #31]
   169a0:	0013      	movs	r3, r2
   169a2:	3304      	adds	r3, #4
   169a4:	930f      	str	r3, [sp, #60]	; 0x3c
   169a6:	2300      	movs	r3, #0
   169a8:	9408      	str	r4, [sp, #32]
   169aa:	4698      	mov	r8, r3
   169ac:	3301      	adds	r3, #1
   169ae:	9307      	str	r3, [sp, #28]
   169b0:	930e      	str	r3, [sp, #56]	; 0x38
   169b2:	2300      	movs	r3, #0
   169b4:	9511      	str	r5, [sp, #68]	; 0x44
   169b6:	469a      	mov	sl, r3
   169b8:	9313      	str	r3, [sp, #76]	; 0x4c
   169ba:	e64b      	b.n	16654 <_svfprintf_r+0x23c>
   169bc:	468b      	mov	fp, r1
   169be:	4641      	mov	r1, r8
   169c0:	9312      	str	r3, [sp, #72]	; 0x48
   169c2:	2900      	cmp	r1, #0
   169c4:	d100      	bne.n	169c8 <_svfprintf_r+0x5b0>
   169c6:	e5f4      	b.n	165b2 <_svfprintf_r+0x19a>
   169c8:	ab16      	add	r3, sp, #88	; 0x58
   169ca:	77d8      	strb	r0, [r3, #31]
   169cc:	e5f1      	b.n	165b2 <_svfprintf_r+0x19a>
   169ce:	4663      	mov	r3, ip
   169d0:	431c      	orrs	r4, r3
   169d2:	780b      	ldrb	r3, [r1, #0]
   169d4:	e584      	b.n	164e0 <_svfprintf_r+0xc8>
   169d6:	780b      	ldrb	r3, [r1, #0]
   169d8:	2b6c      	cmp	r3, #108	; 0x6c
   169da:	d101      	bne.n	169e0 <_svfprintf_r+0x5c8>
   169dc:	f000 fd86 	bl	174ec <_svfprintf_r+0x10d4>
   169e0:	2210      	movs	r2, #16
   169e2:	4314      	orrs	r4, r2
   169e4:	e57c      	b.n	164e0 <_svfprintf_r+0xc8>
   169e6:	468b      	mov	fp, r1
   169e8:	4641      	mov	r1, r8
   169ea:	9312      	str	r3, [sp, #72]	; 0x48
   169ec:	2900      	cmp	r1, #0
   169ee:	d001      	beq.n	169f4 <_svfprintf_r+0x5dc>
   169f0:	f000 ffe8 	bl	179c4 <_svfprintf_r+0x15ac>
   169f4:	4b63      	ldr	r3, [pc, #396]	; (16b84 <_svfprintf_r+0x76c>)
   169f6:	9317      	str	r3, [sp, #92]	; 0x5c
   169f8:	06a3      	lsls	r3, r4, #26
   169fa:	d400      	bmi.n	169fe <_svfprintf_r+0x5e6>
   169fc:	e753      	b.n	168a6 <_svfprintf_r+0x48e>
   169fe:	2207      	movs	r2, #7
   16a00:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16a02:	3307      	adds	r3, #7
   16a04:	4393      	bics	r3, r2
   16a06:	3201      	adds	r2, #1
   16a08:	4694      	mov	ip, r2
   16a0a:	449c      	add	ip, r3
   16a0c:	4662      	mov	r2, ip
   16a0e:	920f      	str	r2, [sp, #60]	; 0x3c
   16a10:	681a      	ldr	r2, [r3, #0]
   16a12:	685b      	ldr	r3, [r3, #4]
   16a14:	920c      	str	r2, [sp, #48]	; 0x30
   16a16:	930d      	str	r3, [sp, #52]	; 0x34
   16a18:	07e3      	lsls	r3, r4, #31
   16a1a:	d500      	bpl.n	16a1e <_svfprintf_r+0x606>
   16a1c:	e755      	b.n	168ca <_svfprintf_r+0x4b2>
   16a1e:	990c      	ldr	r1, [sp, #48]	; 0x30
   16a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   16a22:	0008      	movs	r0, r1
   16a24:	4310      	orrs	r0, r2
   16a26:	2302      	movs	r3, #2
   16a28:	0002      	movs	r2, r0
   16a2a:	e6de      	b.n	167ea <_svfprintf_r+0x3d2>
   16a2c:	468b      	mov	fp, r1
   16a2e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16a30:	2230      	movs	r2, #48	; 0x30
   16a32:	680b      	ldr	r3, [r1, #0]
   16a34:	930c      	str	r3, [sp, #48]	; 0x30
   16a36:	2300      	movs	r3, #0
   16a38:	930d      	str	r3, [sp, #52]	; 0x34
   16a3a:	3302      	adds	r3, #2
   16a3c:	431c      	orrs	r4, r3
   16a3e:	ab1e      	add	r3, sp, #120	; 0x78
   16a40:	701a      	strb	r2, [r3, #0]
   16a42:	3248      	adds	r2, #72	; 0x48
   16a44:	705a      	strb	r2, [r3, #1]
   16a46:	000b      	movs	r3, r1
   16a48:	3304      	adds	r3, #4
   16a4a:	930f      	str	r3, [sp, #60]	; 0x3c
   16a4c:	4b4d      	ldr	r3, [pc, #308]	; (16b84 <_svfprintf_r+0x76c>)
   16a4e:	9212      	str	r2, [sp, #72]	; 0x48
   16a50:	9317      	str	r3, [sp, #92]	; 0x5c
   16a52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16a54:	2302      	movs	r3, #2
   16a56:	e6c8      	b.n	167ea <_svfprintf_r+0x3d2>
   16a58:	2301      	movs	r3, #1
   16a5a:	431c      	orrs	r4, r3
   16a5c:	780b      	ldrb	r3, [r1, #0]
   16a5e:	e53f      	b.n	164e0 <_svfprintf_r+0xc8>
   16a60:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16a62:	1d1a      	adds	r2, r3, #4
   16a64:	681b      	ldr	r3, [r3, #0]
   16a66:	930b      	str	r3, [sp, #44]	; 0x2c
   16a68:	2b00      	cmp	r3, #0
   16a6a:	da00      	bge.n	16a6e <_svfprintf_r+0x656>
   16a6c:	e542      	b.n	164f4 <_svfprintf_r+0xdc>
   16a6e:	780b      	ldrb	r3, [r1, #0]
   16a70:	920f      	str	r2, [sp, #60]	; 0x3c
   16a72:	e535      	b.n	164e0 <_svfprintf_r+0xc8>
   16a74:	780b      	ldrb	r3, [r1, #0]
   16a76:	2800      	cmp	r0, #0
   16a78:	d000      	beq.n	16a7c <_svfprintf_r+0x664>
   16a7a:	e531      	b.n	164e0 <_svfprintf_r+0xc8>
   16a7c:	2201      	movs	r2, #1
   16a7e:	3020      	adds	r0, #32
   16a80:	4690      	mov	r8, r2
   16a82:	e52d      	b.n	164e0 <_svfprintf_r+0xc8>
   16a84:	468b      	mov	fp, r1
   16a86:	9312      	str	r3, [sp, #72]	; 0x48
   16a88:	06a3      	lsls	r3, r4, #26
   16a8a:	d400      	bmi.n	16a8e <_svfprintf_r+0x676>
   16a8c:	e6ed      	b.n	1686a <_svfprintf_r+0x452>
   16a8e:	2207      	movs	r2, #7
   16a90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16a92:	3307      	adds	r3, #7
   16a94:	4393      	bics	r3, r2
   16a96:	3201      	adds	r2, #1
   16a98:	4694      	mov	ip, r2
   16a9a:	449c      	add	ip, r3
   16a9c:	4662      	mov	r2, ip
   16a9e:	920f      	str	r2, [sp, #60]	; 0x3c
   16aa0:	681a      	ldr	r2, [r3, #0]
   16aa2:	685b      	ldr	r3, [r3, #4]
   16aa4:	0011      	movs	r1, r2
   16aa6:	001a      	movs	r2, r3
   16aa8:	0008      	movs	r0, r1
   16aaa:	4310      	orrs	r0, r2
   16aac:	910c      	str	r1, [sp, #48]	; 0x30
   16aae:	920d      	str	r2, [sp, #52]	; 0x34
   16ab0:	2301      	movs	r3, #1
   16ab2:	0002      	movs	r2, r0
   16ab4:	e699      	b.n	167ea <_svfprintf_r+0x3d2>
   16ab6:	468b      	mov	fp, r1
   16ab8:	9312      	str	r3, [sp, #72]	; 0x48
   16aba:	06a3      	lsls	r3, r4, #26
   16abc:	d400      	bmi.n	16ac0 <_svfprintf_r+0x6a8>
   16abe:	e683      	b.n	167c8 <_svfprintf_r+0x3b0>
   16ac0:	2207      	movs	r2, #7
   16ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   16ac4:	3307      	adds	r3, #7
   16ac6:	4393      	bics	r3, r2
   16ac8:	3201      	adds	r2, #1
   16aca:	4694      	mov	ip, r2
   16acc:	449c      	add	ip, r3
   16ace:	4662      	mov	r2, ip
   16ad0:	920f      	str	r2, [sp, #60]	; 0x3c
   16ad2:	681a      	ldr	r2, [r3, #0]
   16ad4:	685b      	ldr	r3, [r3, #4]
   16ad6:	0011      	movs	r1, r2
   16ad8:	001a      	movs	r2, r3
   16ada:	0008      	movs	r0, r1
   16adc:	4310      	orrs	r0, r2
   16ade:	910c      	str	r1, [sp, #48]	; 0x30
   16ae0:	920d      	str	r2, [sp, #52]	; 0x34
   16ae2:	2300      	movs	r3, #0
   16ae4:	0002      	movs	r2, r0
   16ae6:	e680      	b.n	167ea <_svfprintf_r+0x3d2>
   16ae8:	468b      	mov	fp, r1
   16aea:	4641      	mov	r1, r8
   16aec:	9312      	str	r3, [sp, #72]	; 0x48
   16aee:	2900      	cmp	r1, #0
   16af0:	d001      	beq.n	16af6 <_svfprintf_r+0x6de>
   16af2:	f000 ff7f 	bl	179f4 <_svfprintf_r+0x15dc>
   16af6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16af8:	2b00      	cmp	r3, #0
   16afa:	d100      	bne.n	16afe <_svfprintf_r+0x6e6>
   16afc:	e50b      	b.n	16516 <_svfprintf_r+0xfe>
   16afe:	ad28      	add	r5, sp, #160	; 0xa0
   16b00:	702b      	strb	r3, [r5, #0]
   16b02:	2300      	movs	r3, #0
   16b04:	aa16      	add	r2, sp, #88	; 0x58
   16b06:	77d3      	strb	r3, [r2, #31]
   16b08:	9408      	str	r4, [sp, #32]
   16b0a:	e74e      	b.n	169aa <_svfprintf_r+0x592>
   16b0c:	68bc      	ldr	r4, [r7, #8]
   16b0e:	4643      	mov	r3, r8
   16b10:	2b00      	cmp	r3, #0
   16b12:	d00f      	beq.n	16b34 <_svfprintf_r+0x71c>
   16b14:	aa16      	add	r2, sp, #88	; 0x58
   16b16:	231f      	movs	r3, #31
   16b18:	4694      	mov	ip, r2
   16b1a:	4463      	add	r3, ip
   16b1c:	6033      	str	r3, [r6, #0]
   16b1e:	2301      	movs	r3, #1
   16b20:	6073      	str	r3, [r6, #4]
   16b22:	687b      	ldr	r3, [r7, #4]
   16b24:	3401      	adds	r4, #1
   16b26:	3301      	adds	r3, #1
   16b28:	60bc      	str	r4, [r7, #8]
   16b2a:	607b      	str	r3, [r7, #4]
   16b2c:	2b07      	cmp	r3, #7
   16b2e:	dd00      	ble.n	16b32 <_svfprintf_r+0x71a>
   16b30:	e1b3      	b.n	16e9a <_svfprintf_r+0xa82>
   16b32:	3608      	adds	r6, #8
   16b34:	464b      	mov	r3, r9
   16b36:	2b00      	cmp	r3, #0
   16b38:	d00c      	beq.n	16b54 <_svfprintf_r+0x73c>
   16b3a:	ab1e      	add	r3, sp, #120	; 0x78
   16b3c:	6033      	str	r3, [r6, #0]
   16b3e:	2302      	movs	r3, #2
   16b40:	6073      	str	r3, [r6, #4]
   16b42:	687b      	ldr	r3, [r7, #4]
   16b44:	3402      	adds	r4, #2
   16b46:	3301      	adds	r3, #1
   16b48:	60bc      	str	r4, [r7, #8]
   16b4a:	607b      	str	r3, [r7, #4]
   16b4c:	2b07      	cmp	r3, #7
   16b4e:	dd00      	ble.n	16b52 <_svfprintf_r+0x73a>
   16b50:	e1af      	b.n	16eb2 <_svfprintf_r+0xa9a>
   16b52:	3608      	adds	r6, #8
   16b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
   16b56:	2b80      	cmp	r3, #128	; 0x80
   16b58:	d100      	bne.n	16b5c <_svfprintf_r+0x744>
   16b5a:	e120      	b.n	16d9e <_svfprintf_r+0x986>
   16b5c:	4653      	mov	r3, sl
   16b5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   16b60:	1a9d      	subs	r5, r3, r2
   16b62:	2d00      	cmp	r5, #0
   16b64:	dd3c      	ble.n	16be0 <_svfprintf_r+0x7c8>
   16b66:	4a08      	ldr	r2, [pc, #32]	; (16b88 <_svfprintf_r+0x770>)
   16b68:	687b      	ldr	r3, [r7, #4]
   16b6a:	4691      	mov	r9, r2
   16b6c:	2d10      	cmp	r5, #16
   16b6e:	dd2c      	ble.n	16bca <_svfprintf_r+0x7b2>
   16b70:	2210      	movs	r2, #16
   16b72:	0021      	movs	r1, r4
   16b74:	4692      	mov	sl, r2
   16b76:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16b78:	0032      	movs	r2, r6
   16b7a:	002e      	movs	r6, r5
   16b7c:	464d      	mov	r5, r9
   16b7e:	e009      	b.n	16b94 <_svfprintf_r+0x77c>
   16b80:	0001e054 	.word	0x0001e054
   16b84:	0001e068 	.word	0x0001e068
   16b88:	0001e094 	.word	0x0001e094
   16b8c:	3e10      	subs	r6, #16
   16b8e:	3208      	adds	r2, #8
   16b90:	2e10      	cmp	r6, #16
   16b92:	dd16      	ble.n	16bc2 <_svfprintf_r+0x7aa>
   16b94:	4650      	mov	r0, sl
   16b96:	3110      	adds	r1, #16
   16b98:	3301      	adds	r3, #1
   16b9a:	6015      	str	r5, [r2, #0]
   16b9c:	6050      	str	r0, [r2, #4]
   16b9e:	60b9      	str	r1, [r7, #8]
   16ba0:	607b      	str	r3, [r7, #4]
   16ba2:	2b07      	cmp	r3, #7
   16ba4:	ddf2      	ble.n	16b8c <_svfprintf_r+0x774>
   16ba6:	003a      	movs	r2, r7
   16ba8:	9906      	ldr	r1, [sp, #24]
   16baa:	0020      	movs	r0, r4
   16bac:	f005 f958 	bl	1be60 <__ssprint_r>
   16bb0:	2800      	cmp	r0, #0
   16bb2:	d000      	beq.n	16bb6 <_svfprintf_r+0x79e>
   16bb4:	e4b7      	b.n	16526 <_svfprintf_r+0x10e>
   16bb6:	3e10      	subs	r6, #16
   16bb8:	68b9      	ldr	r1, [r7, #8]
   16bba:	687b      	ldr	r3, [r7, #4]
   16bbc:	aa32      	add	r2, sp, #200	; 0xc8
   16bbe:	2e10      	cmp	r6, #16
   16bc0:	dce8      	bgt.n	16b94 <_svfprintf_r+0x77c>
   16bc2:	46a9      	mov	r9, r5
   16bc4:	000c      	movs	r4, r1
   16bc6:	0035      	movs	r5, r6
   16bc8:	0016      	movs	r6, r2
   16bca:	464a      	mov	r2, r9
   16bcc:	1964      	adds	r4, r4, r5
   16bce:	3301      	adds	r3, #1
   16bd0:	6032      	str	r2, [r6, #0]
   16bd2:	6075      	str	r5, [r6, #4]
   16bd4:	60bc      	str	r4, [r7, #8]
   16bd6:	607b      	str	r3, [r7, #4]
   16bd8:	2b07      	cmp	r3, #7
   16bda:	dd00      	ble.n	16bde <_svfprintf_r+0x7c6>
   16bdc:	e151      	b.n	16e82 <_svfprintf_r+0xa6a>
   16bde:	3608      	adds	r6, #8
   16be0:	9b08      	ldr	r3, [sp, #32]
   16be2:	05db      	lsls	r3, r3, #23
   16be4:	d500      	bpl.n	16be8 <_svfprintf_r+0x7d0>
   16be6:	e0b6      	b.n	16d56 <_svfprintf_r+0x93e>
   16be8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16bea:	6033      	str	r3, [r6, #0]
   16bec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   16bee:	469c      	mov	ip, r3
   16bf0:	6073      	str	r3, [r6, #4]
   16bf2:	687b      	ldr	r3, [r7, #4]
   16bf4:	4464      	add	r4, ip
   16bf6:	3301      	adds	r3, #1
   16bf8:	60bc      	str	r4, [r7, #8]
   16bfa:	607b      	str	r3, [r7, #4]
   16bfc:	2b07      	cmp	r3, #7
   16bfe:	dd00      	ble.n	16c02 <_svfprintf_r+0x7ea>
   16c00:	e09d      	b.n	16d3e <_svfprintf_r+0x926>
   16c02:	3608      	adds	r6, #8
   16c04:	9b08      	ldr	r3, [sp, #32]
   16c06:	075b      	lsls	r3, r3, #29
   16c08:	d541      	bpl.n	16c8e <_svfprintf_r+0x876>
   16c0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16c0c:	9a07      	ldr	r2, [sp, #28]
   16c0e:	1a9d      	subs	r5, r3, r2
   16c10:	2d00      	cmp	r5, #0
   16c12:	dd3c      	ble.n	16c8e <_svfprintf_r+0x876>
   16c14:	4ac4      	ldr	r2, [pc, #784]	; (16f28 <_svfprintf_r+0xb10>)
   16c16:	687b      	ldr	r3, [r7, #4]
   16c18:	4690      	mov	r8, r2
   16c1a:	2d10      	cmp	r5, #16
   16c1c:	dd26      	ble.n	16c6c <_svfprintf_r+0x854>
   16c1e:	2210      	movs	r2, #16
   16c20:	0021      	movs	r1, r4
   16c22:	4691      	mov	r9, r2
   16c24:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16c26:	0032      	movs	r2, r6
   16c28:	002e      	movs	r6, r5
   16c2a:	9d06      	ldr	r5, [sp, #24]
   16c2c:	e003      	b.n	16c36 <_svfprintf_r+0x81e>
   16c2e:	3e10      	subs	r6, #16
   16c30:	3208      	adds	r2, #8
   16c32:	2e10      	cmp	r6, #16
   16c34:	dd17      	ble.n	16c66 <_svfprintf_r+0x84e>
   16c36:	48bc      	ldr	r0, [pc, #752]	; (16f28 <_svfprintf_r+0xb10>)
   16c38:	3110      	adds	r1, #16
   16c3a:	6010      	str	r0, [r2, #0]
   16c3c:	4648      	mov	r0, r9
   16c3e:	3301      	adds	r3, #1
   16c40:	6050      	str	r0, [r2, #4]
   16c42:	60b9      	str	r1, [r7, #8]
   16c44:	607b      	str	r3, [r7, #4]
   16c46:	2b07      	cmp	r3, #7
   16c48:	ddf1      	ble.n	16c2e <_svfprintf_r+0x816>
   16c4a:	003a      	movs	r2, r7
   16c4c:	0029      	movs	r1, r5
   16c4e:	0020      	movs	r0, r4
   16c50:	f005 f906 	bl	1be60 <__ssprint_r>
   16c54:	2800      	cmp	r0, #0
   16c56:	d000      	beq.n	16c5a <_svfprintf_r+0x842>
   16c58:	e465      	b.n	16526 <_svfprintf_r+0x10e>
   16c5a:	3e10      	subs	r6, #16
   16c5c:	68b9      	ldr	r1, [r7, #8]
   16c5e:	687b      	ldr	r3, [r7, #4]
   16c60:	aa32      	add	r2, sp, #200	; 0xc8
   16c62:	2e10      	cmp	r6, #16
   16c64:	dce7      	bgt.n	16c36 <_svfprintf_r+0x81e>
   16c66:	0035      	movs	r5, r6
   16c68:	000c      	movs	r4, r1
   16c6a:	0016      	movs	r6, r2
   16c6c:	4642      	mov	r2, r8
   16c6e:	1964      	adds	r4, r4, r5
   16c70:	3301      	adds	r3, #1
   16c72:	c624      	stmia	r6!, {r2, r5}
   16c74:	60bc      	str	r4, [r7, #8]
   16c76:	607b      	str	r3, [r7, #4]
   16c78:	2b07      	cmp	r3, #7
   16c7a:	dd08      	ble.n	16c8e <_svfprintf_r+0x876>
   16c7c:	003a      	movs	r2, r7
   16c7e:	9906      	ldr	r1, [sp, #24]
   16c80:	9809      	ldr	r0, [sp, #36]	; 0x24
   16c82:	f005 f8ed 	bl	1be60 <__ssprint_r>
   16c86:	2800      	cmp	r0, #0
   16c88:	d000      	beq.n	16c8c <_svfprintf_r+0x874>
   16c8a:	e44c      	b.n	16526 <_svfprintf_r+0x10e>
   16c8c:	68bc      	ldr	r4, [r7, #8]
   16c8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16c90:	9907      	ldr	r1, [sp, #28]
   16c92:	428b      	cmp	r3, r1
   16c94:	da00      	bge.n	16c98 <_svfprintf_r+0x880>
   16c96:	000b      	movs	r3, r1
   16c98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16c9a:	4694      	mov	ip, r2
   16c9c:	449c      	add	ip, r3
   16c9e:	4663      	mov	r3, ip
   16ca0:	930a      	str	r3, [sp, #40]	; 0x28
   16ca2:	2c00      	cmp	r4, #0
   16ca4:	d000      	beq.n	16ca8 <_svfprintf_r+0x890>
   16ca6:	e0d6      	b.n	16e56 <_svfprintf_r+0xa3e>
   16ca8:	2300      	movs	r3, #0
   16caa:	ae32      	add	r6, sp, #200	; 0xc8
   16cac:	607b      	str	r3, [r7, #4]
   16cae:	f7ff fbde 	bl	1646e <_svfprintf_r+0x56>
   16cb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16cb4:	2b01      	cmp	r3, #1
   16cb6:	dc00      	bgt.n	16cba <_svfprintf_r+0x8a2>
   16cb8:	e0ae      	b.n	16e18 <_svfprintf_r+0xa00>
   16cba:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16cbc:	3401      	adds	r4, #1
   16cbe:	6033      	str	r3, [r6, #0]
   16cc0:	2301      	movs	r3, #1
   16cc2:	6073      	str	r3, [r6, #4]
   16cc4:	687b      	ldr	r3, [r7, #4]
   16cc6:	60bc      	str	r4, [r7, #8]
   16cc8:	3301      	adds	r3, #1
   16cca:	607b      	str	r3, [r7, #4]
   16ccc:	2b07      	cmp	r3, #7
   16cce:	dd00      	ble.n	16cd2 <_svfprintf_r+0x8ba>
   16cd0:	e2df      	b.n	17292 <_svfprintf_r+0xe7a>
   16cd2:	3608      	adds	r6, #8
   16cd4:	9a19      	ldr	r2, [sp, #100]	; 0x64
   16cd6:	3301      	adds	r3, #1
   16cd8:	6032      	str	r2, [r6, #0]
   16cda:	9a18      	ldr	r2, [sp, #96]	; 0x60
   16cdc:	4698      	mov	r8, r3
   16cde:	4694      	mov	ip, r2
   16ce0:	4464      	add	r4, ip
   16ce2:	6072      	str	r2, [r6, #4]
   16ce4:	60bc      	str	r4, [r7, #8]
   16ce6:	607b      	str	r3, [r7, #4]
   16ce8:	2b07      	cmp	r3, #7
   16cea:	dd00      	ble.n	16cee <_svfprintf_r+0x8d6>
   16cec:	e2de      	b.n	172ac <_svfprintf_r+0xe94>
   16cee:	3608      	adds	r6, #8
   16cf0:	2200      	movs	r2, #0
   16cf2:	2300      	movs	r3, #0
   16cf4:	9816      	ldr	r0, [sp, #88]	; 0x58
   16cf6:	9915      	ldr	r1, [sp, #84]	; 0x54
   16cf8:	f7fe ffac 	bl	15c54 <__aeabi_dcmpeq>
   16cfc:	2800      	cmp	r0, #0
   16cfe:	d000      	beq.n	16d02 <_svfprintf_r+0x8ea>
   16d00:	e1a4      	b.n	1704c <_svfprintf_r+0xc34>
   16d02:	9d11      	ldr	r5, [sp, #68]	; 0x44
   16d04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   16d06:	3501      	adds	r5, #1
   16d08:	3b01      	subs	r3, #1
   16d0a:	6035      	str	r5, [r6, #0]
   16d0c:	6073      	str	r3, [r6, #4]
   16d0e:	18e4      	adds	r4, r4, r3
   16d10:	2301      	movs	r3, #1
   16d12:	469c      	mov	ip, r3
   16d14:	44e0      	add	r8, ip
   16d16:	4643      	mov	r3, r8
   16d18:	60bc      	str	r4, [r7, #8]
   16d1a:	607b      	str	r3, [r7, #4]
   16d1c:	2b07      	cmp	r3, #7
   16d1e:	dd00      	ble.n	16d22 <_svfprintf_r+0x90a>
   16d20:	e08b      	b.n	16e3a <_svfprintf_r+0xa22>
   16d22:	3608      	adds	r6, #8
   16d24:	ab21      	add	r3, sp, #132	; 0x84
   16d26:	6033      	str	r3, [r6, #0]
   16d28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   16d2a:	469c      	mov	ip, r3
   16d2c:	6073      	str	r3, [r6, #4]
   16d2e:	4643      	mov	r3, r8
   16d30:	4464      	add	r4, ip
   16d32:	3301      	adds	r3, #1
   16d34:	60bc      	str	r4, [r7, #8]
   16d36:	607b      	str	r3, [r7, #4]
   16d38:	2b07      	cmp	r3, #7
   16d3a:	dc00      	bgt.n	16d3e <_svfprintf_r+0x926>
   16d3c:	e761      	b.n	16c02 <_svfprintf_r+0x7ea>
   16d3e:	003a      	movs	r2, r7
   16d40:	9906      	ldr	r1, [sp, #24]
   16d42:	9809      	ldr	r0, [sp, #36]	; 0x24
   16d44:	f005 f88c 	bl	1be60 <__ssprint_r>
   16d48:	2800      	cmp	r0, #0
   16d4a:	d001      	beq.n	16d50 <_svfprintf_r+0x938>
   16d4c:	f7ff fbeb 	bl	16526 <_svfprintf_r+0x10e>
   16d50:	68bc      	ldr	r4, [r7, #8]
   16d52:	ae32      	add	r6, sp, #200	; 0xc8
   16d54:	e756      	b.n	16c04 <_svfprintf_r+0x7ec>
   16d56:	9b12      	ldr	r3, [sp, #72]	; 0x48
   16d58:	2b65      	cmp	r3, #101	; 0x65
   16d5a:	ddaa      	ble.n	16cb2 <_svfprintf_r+0x89a>
   16d5c:	2200      	movs	r2, #0
   16d5e:	2300      	movs	r3, #0
   16d60:	9816      	ldr	r0, [sp, #88]	; 0x58
   16d62:	9915      	ldr	r1, [sp, #84]	; 0x54
   16d64:	f7fe ff76 	bl	15c54 <__aeabi_dcmpeq>
   16d68:	2800      	cmp	r0, #0
   16d6a:	d100      	bne.n	16d6e <_svfprintf_r+0x956>
   16d6c:	e0e2      	b.n	16f34 <_svfprintf_r+0xb1c>
   16d6e:	4b6f      	ldr	r3, [pc, #444]	; (16f2c <_svfprintf_r+0xb14>)
   16d70:	3401      	adds	r4, #1
   16d72:	6033      	str	r3, [r6, #0]
   16d74:	2301      	movs	r3, #1
   16d76:	6073      	str	r3, [r6, #4]
   16d78:	687b      	ldr	r3, [r7, #4]
   16d7a:	60bc      	str	r4, [r7, #8]
   16d7c:	3301      	adds	r3, #1
   16d7e:	607b      	str	r3, [r7, #4]
   16d80:	2b07      	cmp	r3, #7
   16d82:	dd00      	ble.n	16d86 <_svfprintf_r+0x96e>
   16d84:	e366      	b.n	17454 <_svfprintf_r+0x103c>
   16d86:	3608      	adds	r6, #8
   16d88:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   16d8a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   16d8c:	4293      	cmp	r3, r2
   16d8e:	da00      	bge.n	16d92 <_svfprintf_r+0x97a>
   16d90:	e1a4      	b.n	170dc <_svfprintf_r+0xcc4>
   16d92:	9b08      	ldr	r3, [sp, #32]
   16d94:	07db      	lsls	r3, r3, #31
   16d96:	d500      	bpl.n	16d9a <_svfprintf_r+0x982>
   16d98:	e1a0      	b.n	170dc <_svfprintf_r+0xcc4>
   16d9a:	68bc      	ldr	r4, [r7, #8]
   16d9c:	e732      	b.n	16c04 <_svfprintf_r+0x7ec>
   16d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16da0:	9a07      	ldr	r2, [sp, #28]
   16da2:	1a9d      	subs	r5, r3, r2
   16da4:	2d00      	cmp	r5, #0
   16da6:	dc00      	bgt.n	16daa <_svfprintf_r+0x992>
   16da8:	e6d8      	b.n	16b5c <_svfprintf_r+0x744>
   16daa:	4a61      	ldr	r2, [pc, #388]	; (16f30 <_svfprintf_r+0xb18>)
   16dac:	687b      	ldr	r3, [r7, #4]
   16dae:	4691      	mov	r9, r2
   16db0:	2d10      	cmp	r5, #16
   16db2:	dd25      	ble.n	16e00 <_svfprintf_r+0x9e8>
   16db4:	2210      	movs	r2, #16
   16db6:	0021      	movs	r1, r4
   16db8:	4690      	mov	r8, r2
   16dba:	9c09      	ldr	r4, [sp, #36]	; 0x24
   16dbc:	0032      	movs	r2, r6
   16dbe:	464e      	mov	r6, r9
   16dc0:	e003      	b.n	16dca <_svfprintf_r+0x9b2>
   16dc2:	3d10      	subs	r5, #16
   16dc4:	3208      	adds	r2, #8
   16dc6:	2d10      	cmp	r5, #16
   16dc8:	dd17      	ble.n	16dfa <_svfprintf_r+0x9e2>
   16dca:	4640      	mov	r0, r8
   16dcc:	3110      	adds	r1, #16
   16dce:	3301      	adds	r3, #1
   16dd0:	6016      	str	r6, [r2, #0]
   16dd2:	6050      	str	r0, [r2, #4]
   16dd4:	60b9      	str	r1, [r7, #8]
   16dd6:	607b      	str	r3, [r7, #4]
   16dd8:	2b07      	cmp	r3, #7
   16dda:	ddf2      	ble.n	16dc2 <_svfprintf_r+0x9aa>
   16ddc:	003a      	movs	r2, r7
   16dde:	9906      	ldr	r1, [sp, #24]
   16de0:	0020      	movs	r0, r4
   16de2:	f005 f83d 	bl	1be60 <__ssprint_r>
   16de6:	2800      	cmp	r0, #0
   16de8:	d001      	beq.n	16dee <_svfprintf_r+0x9d6>
   16dea:	f7ff fb9c 	bl	16526 <_svfprintf_r+0x10e>
   16dee:	3d10      	subs	r5, #16
   16df0:	68b9      	ldr	r1, [r7, #8]
   16df2:	687b      	ldr	r3, [r7, #4]
   16df4:	aa32      	add	r2, sp, #200	; 0xc8
   16df6:	2d10      	cmp	r5, #16
   16df8:	dce7      	bgt.n	16dca <_svfprintf_r+0x9b2>
   16dfa:	46b1      	mov	r9, r6
   16dfc:	000c      	movs	r4, r1
   16dfe:	0016      	movs	r6, r2
   16e00:	464a      	mov	r2, r9
   16e02:	1964      	adds	r4, r4, r5
   16e04:	3301      	adds	r3, #1
   16e06:	6032      	str	r2, [r6, #0]
   16e08:	6075      	str	r5, [r6, #4]
   16e0a:	60bc      	str	r4, [r7, #8]
   16e0c:	607b      	str	r3, [r7, #4]
   16e0e:	2b07      	cmp	r3, #7
   16e10:	dd00      	ble.n	16e14 <_svfprintf_r+0x9fc>
   16e12:	e27e      	b.n	17312 <_svfprintf_r+0xefa>
   16e14:	3608      	adds	r6, #8
   16e16:	e6a1      	b.n	16b5c <_svfprintf_r+0x744>
   16e18:	2301      	movs	r3, #1
   16e1a:	9a08      	ldr	r2, [sp, #32]
   16e1c:	4213      	tst	r3, r2
   16e1e:	d000      	beq.n	16e22 <_svfprintf_r+0xa0a>
   16e20:	e74b      	b.n	16cba <_svfprintf_r+0x8a2>
   16e22:	6073      	str	r3, [r6, #4]
   16e24:	687b      	ldr	r3, [r7, #4]
   16e26:	9a11      	ldr	r2, [sp, #68]	; 0x44
   16e28:	3301      	adds	r3, #1
   16e2a:	3401      	adds	r4, #1
   16e2c:	6032      	str	r2, [r6, #0]
   16e2e:	60bc      	str	r4, [r7, #8]
   16e30:	4698      	mov	r8, r3
   16e32:	607b      	str	r3, [r7, #4]
   16e34:	2b07      	cmp	r3, #7
   16e36:	dc00      	bgt.n	16e3a <_svfprintf_r+0xa22>
   16e38:	e773      	b.n	16d22 <_svfprintf_r+0x90a>
   16e3a:	003a      	movs	r2, r7
   16e3c:	9906      	ldr	r1, [sp, #24]
   16e3e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e40:	f005 f80e 	bl	1be60 <__ssprint_r>
   16e44:	2800      	cmp	r0, #0
   16e46:	d001      	beq.n	16e4c <_svfprintf_r+0xa34>
   16e48:	f7ff fb6d 	bl	16526 <_svfprintf_r+0x10e>
   16e4c:	687b      	ldr	r3, [r7, #4]
   16e4e:	68bc      	ldr	r4, [r7, #8]
   16e50:	4698      	mov	r8, r3
   16e52:	ae32      	add	r6, sp, #200	; 0xc8
   16e54:	e766      	b.n	16d24 <_svfprintf_r+0x90c>
   16e56:	003a      	movs	r2, r7
   16e58:	9906      	ldr	r1, [sp, #24]
   16e5a:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e5c:	f005 f800 	bl	1be60 <__ssprint_r>
   16e60:	2800      	cmp	r0, #0
   16e62:	d100      	bne.n	16e66 <_svfprintf_r+0xa4e>
   16e64:	e720      	b.n	16ca8 <_svfprintf_r+0x890>
   16e66:	f7ff fb5e 	bl	16526 <_svfprintf_r+0x10e>
   16e6a:	9c08      	ldr	r4, [sp, #32]
   16e6c:	2b01      	cmp	r3, #1
   16e6e:	d100      	bne.n	16e72 <_svfprintf_r+0xa5a>
   16e70:	e184      	b.n	1717c <_svfprintf_r+0xd64>
   16e72:	2b02      	cmp	r3, #2
   16e74:	d129      	bne.n	16eca <_svfprintf_r+0xab2>
   16e76:	9408      	str	r4, [sp, #32]
   16e78:	2300      	movs	r3, #0
   16e7a:	2400      	movs	r4, #0
   16e7c:	930c      	str	r3, [sp, #48]	; 0x30
   16e7e:	940d      	str	r4, [sp, #52]	; 0x34
   16e80:	e4c5      	b.n	1680e <_svfprintf_r+0x3f6>
   16e82:	003a      	movs	r2, r7
   16e84:	9906      	ldr	r1, [sp, #24]
   16e86:	9809      	ldr	r0, [sp, #36]	; 0x24
   16e88:	f004 ffea 	bl	1be60 <__ssprint_r>
   16e8c:	2800      	cmp	r0, #0
   16e8e:	d001      	beq.n	16e94 <_svfprintf_r+0xa7c>
   16e90:	f7ff fb49 	bl	16526 <_svfprintf_r+0x10e>
   16e94:	68bc      	ldr	r4, [r7, #8]
   16e96:	ae32      	add	r6, sp, #200	; 0xc8
   16e98:	e6a2      	b.n	16be0 <_svfprintf_r+0x7c8>
   16e9a:	003a      	movs	r2, r7
   16e9c:	9906      	ldr	r1, [sp, #24]
   16e9e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16ea0:	f004 ffde 	bl	1be60 <__ssprint_r>
   16ea4:	2800      	cmp	r0, #0
   16ea6:	d001      	beq.n	16eac <_svfprintf_r+0xa94>
   16ea8:	f7ff fb3d 	bl	16526 <_svfprintf_r+0x10e>
   16eac:	68bc      	ldr	r4, [r7, #8]
   16eae:	ae32      	add	r6, sp, #200	; 0xc8
   16eb0:	e640      	b.n	16b34 <_svfprintf_r+0x71c>
   16eb2:	003a      	movs	r2, r7
   16eb4:	9906      	ldr	r1, [sp, #24]
   16eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
   16eb8:	f004 ffd2 	bl	1be60 <__ssprint_r>
   16ebc:	2800      	cmp	r0, #0
   16ebe:	d001      	beq.n	16ec4 <_svfprintf_r+0xaac>
   16ec0:	f7ff fb31 	bl	16526 <_svfprintf_r+0x10e>
   16ec4:	68bc      	ldr	r4, [r7, #8]
   16ec6:	ae32      	add	r6, sp, #200	; 0xc8
   16ec8:	e644      	b.n	16b54 <_svfprintf_r+0x73c>
   16eca:	9408      	str	r4, [sp, #32]
   16ecc:	2300      	movs	r3, #0
   16ece:	2400      	movs	r4, #0
   16ed0:	930c      	str	r3, [sp, #48]	; 0x30
   16ed2:	940d      	str	r4, [sp, #52]	; 0x34
   16ed4:	980c      	ldr	r0, [sp, #48]	; 0x30
   16ed6:	990d      	ldr	r1, [sp, #52]	; 0x34
   16ed8:	465b      	mov	r3, fp
   16eda:	aa32      	add	r2, sp, #200	; 0xc8
   16edc:	9307      	str	r3, [sp, #28]
   16ede:	4691      	mov	r9, r2
   16ee0:	46b3      	mov	fp, r6
   16ee2:	e000      	b.n	16ee6 <_svfprintf_r+0xace>
   16ee4:	46a1      	mov	r9, r4
   16ee6:	074a      	lsls	r2, r1, #29
   16ee8:	4694      	mov	ip, r2
   16eea:	464b      	mov	r3, r9
   16eec:	4665      	mov	r5, ip
   16eee:	1e5c      	subs	r4, r3, #1
   16ef0:	08c6      	lsrs	r6, r0, #3
   16ef2:	2307      	movs	r3, #7
   16ef4:	08ca      	lsrs	r2, r1, #3
   16ef6:	4335      	orrs	r5, r6
   16ef8:	0011      	movs	r1, r2
   16efa:	002a      	movs	r2, r5
   16efc:	4003      	ands	r3, r0
   16efe:	3330      	adds	r3, #48	; 0x30
   16f00:	7023      	strb	r3, [r4, #0]
   16f02:	0028      	movs	r0, r5
   16f04:	430a      	orrs	r2, r1
   16f06:	d1ed      	bne.n	16ee4 <_svfprintf_r+0xacc>
   16f08:	900c      	str	r0, [sp, #48]	; 0x30
   16f0a:	910d      	str	r1, [sp, #52]	; 0x34
   16f0c:	9907      	ldr	r1, [sp, #28]
   16f0e:	465e      	mov	r6, fp
   16f10:	468b      	mov	fp, r1
   16f12:	9908      	ldr	r1, [sp, #32]
   16f14:	464a      	mov	r2, r9
   16f16:	9411      	str	r4, [sp, #68]	; 0x44
   16f18:	07c9      	lsls	r1, r1, #31
   16f1a:	d500      	bpl.n	16f1e <_svfprintf_r+0xb06>
   16f1c:	e13d      	b.n	1719a <_svfprintf_r+0xd82>
   16f1e:	ab32      	add	r3, sp, #200	; 0xc8
   16f20:	1b1b      	subs	r3, r3, r4
   16f22:	930e      	str	r3, [sp, #56]	; 0x38
   16f24:	f7ff fb88 	bl	16638 <_svfprintf_r+0x220>
   16f28:	0001e084 	.word	0x0001e084
   16f2c:	0001d630 	.word	0x0001d630
   16f30:	0001e094 	.word	0x0001e094
   16f34:	981f      	ldr	r0, [sp, #124]	; 0x7c
   16f36:	2800      	cmp	r0, #0
   16f38:	dc00      	bgt.n	16f3c <_svfprintf_r+0xb24>
   16f3a:	e296      	b.n	1746a <_svfprintf_r+0x1052>
   16f3c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16f3e:	9914      	ldr	r1, [sp, #80]	; 0x50
   16f40:	0013      	movs	r3, r2
   16f42:	4690      	mov	r8, r2
   16f44:	428b      	cmp	r3, r1
   16f46:	dd00      	ble.n	16f4a <_svfprintf_r+0xb32>
   16f48:	4688      	mov	r8, r1
   16f4a:	4643      	mov	r3, r8
   16f4c:	2b00      	cmp	r3, #0
   16f4e:	dd0c      	ble.n	16f6a <_svfprintf_r+0xb52>
   16f50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   16f52:	4444      	add	r4, r8
   16f54:	6033      	str	r3, [r6, #0]
   16f56:	4643      	mov	r3, r8
   16f58:	6073      	str	r3, [r6, #4]
   16f5a:	687b      	ldr	r3, [r7, #4]
   16f5c:	60bc      	str	r4, [r7, #8]
   16f5e:	3301      	adds	r3, #1
   16f60:	607b      	str	r3, [r7, #4]
   16f62:	2b07      	cmp	r3, #7
   16f64:	dd00      	ble.n	16f68 <_svfprintf_r+0xb50>
   16f66:	e3b7      	b.n	176d8 <_svfprintf_r+0x12c0>
   16f68:	3608      	adds	r6, #8
   16f6a:	4643      	mov	r3, r8
   16f6c:	43db      	mvns	r3, r3
   16f6e:	4642      	mov	r2, r8
   16f70:	17db      	asrs	r3, r3, #31
   16f72:	4013      	ands	r3, r2
   16f74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   16f76:	1ad3      	subs	r3, r2, r3
   16f78:	4698      	mov	r8, r3
   16f7a:	2b00      	cmp	r3, #0
   16f7c:	dc00      	bgt.n	16f80 <_svfprintf_r+0xb68>
   16f7e:	e128      	b.n	171d2 <_svfprintf_r+0xdba>
   16f80:	2b10      	cmp	r3, #16
   16f82:	dc01      	bgt.n	16f88 <_svfprintf_r+0xb70>
   16f84:	f000 fce7 	bl	17956 <_svfprintf_r+0x153e>
   16f88:	4acf      	ldr	r2, [pc, #828]	; (172c8 <_svfprintf_r+0xeb0>)
   16f8a:	0021      	movs	r1, r4
   16f8c:	4691      	mov	r9, r2
   16f8e:	2210      	movs	r2, #16
   16f90:	687b      	ldr	r3, [r7, #4]
   16f92:	4692      	mov	sl, r2
   16f94:	9d09      	ldr	r5, [sp, #36]	; 0x24
   16f96:	0032      	movs	r2, r6
   16f98:	464c      	mov	r4, r9
   16f9a:	4646      	mov	r6, r8
   16f9c:	e004      	b.n	16fa8 <_svfprintf_r+0xb90>
   16f9e:	3208      	adds	r2, #8
   16fa0:	3e10      	subs	r6, #16
   16fa2:	2e10      	cmp	r6, #16
   16fa4:	dc00      	bgt.n	16fa8 <_svfprintf_r+0xb90>
   16fa6:	e104      	b.n	171b2 <_svfprintf_r+0xd9a>
   16fa8:	4650      	mov	r0, sl
   16faa:	3110      	adds	r1, #16
   16fac:	3301      	adds	r3, #1
   16fae:	6014      	str	r4, [r2, #0]
   16fb0:	6050      	str	r0, [r2, #4]
   16fb2:	60b9      	str	r1, [r7, #8]
   16fb4:	607b      	str	r3, [r7, #4]
   16fb6:	2b07      	cmp	r3, #7
   16fb8:	ddf1      	ble.n	16f9e <_svfprintf_r+0xb86>
   16fba:	003a      	movs	r2, r7
   16fbc:	9906      	ldr	r1, [sp, #24]
   16fbe:	0028      	movs	r0, r5
   16fc0:	f004 ff4e 	bl	1be60 <__ssprint_r>
   16fc4:	2800      	cmp	r0, #0
   16fc6:	d001      	beq.n	16fcc <_svfprintf_r+0xbb4>
   16fc8:	f7ff faad 	bl	16526 <_svfprintf_r+0x10e>
   16fcc:	68b9      	ldr	r1, [r7, #8]
   16fce:	687b      	ldr	r3, [r7, #4]
   16fd0:	aa32      	add	r2, sp, #200	; 0xc8
   16fd2:	e7e5      	b.n	16fa0 <_svfprintf_r+0xb88>
   16fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   16fd6:	2b00      	cmp	r3, #0
   16fd8:	d100      	bne.n	16fdc <_svfprintf_r+0xbc4>
   16fda:	e0ca      	b.n	17172 <_svfprintf_r+0xd5a>
   16fdc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   16fde:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   16fe0:	ab32      	add	r3, sp, #200	; 0xc8
   16fe2:	46b1      	mov	r9, r6
   16fe4:	001e      	movs	r6, r3
   16fe6:	0020      	movs	r0, r4
   16fe8:	0029      	movs	r1, r5
   16fea:	220a      	movs	r2, #10
   16fec:	2300      	movs	r3, #0
   16fee:	f7fc f83f 	bl	13070 <__aeabi_uldivmod>
   16ff2:	3e01      	subs	r6, #1
   16ff4:	3230      	adds	r2, #48	; 0x30
   16ff6:	7032      	strb	r2, [r6, #0]
   16ff8:	2300      	movs	r3, #0
   16ffa:	0020      	movs	r0, r4
   16ffc:	0029      	movs	r1, r5
   16ffe:	220a      	movs	r2, #10
   17000:	f7fc f836 	bl	13070 <__aeabi_uldivmod>
   17004:	0003      	movs	r3, r0
   17006:	0004      	movs	r4, r0
   17008:	000d      	movs	r5, r1
   1700a:	430b      	orrs	r3, r1
   1700c:	d1eb      	bne.n	16fe6 <_svfprintf_r+0xbce>
   1700e:	0032      	movs	r2, r6
   17010:	ab32      	add	r3, sp, #200	; 0xc8
   17012:	1a9b      	subs	r3, r3, r2
   17014:	9611      	str	r6, [sp, #68]	; 0x44
   17016:	940c      	str	r4, [sp, #48]	; 0x30
   17018:	950d      	str	r5, [sp, #52]	; 0x34
   1701a:	464e      	mov	r6, r9
   1701c:	930e      	str	r3, [sp, #56]	; 0x38
   1701e:	f7ff fb0b 	bl	16638 <_svfprintf_r+0x220>
   17022:	2300      	movs	r3, #0
   17024:	930e      	str	r3, [sp, #56]	; 0x38
   17026:	ab32      	add	r3, sp, #200	; 0xc8
   17028:	9311      	str	r3, [sp, #68]	; 0x44
   1702a:	f7ff fb05 	bl	16638 <_svfprintf_r+0x220>
   1702e:	003a      	movs	r2, r7
   17030:	9906      	ldr	r1, [sp, #24]
   17032:	9809      	ldr	r0, [sp, #36]	; 0x24
   17034:	f004 ff14 	bl	1be60 <__ssprint_r>
   17038:	2800      	cmp	r0, #0
   1703a:	d001      	beq.n	17040 <_svfprintf_r+0xc28>
   1703c:	f7ff fa73 	bl	16526 <_svfprintf_r+0x10e>
   17040:	ab16      	add	r3, sp, #88	; 0x58
   17042:	7fdb      	ldrb	r3, [r3, #31]
   17044:	68bc      	ldr	r4, [r7, #8]
   17046:	4698      	mov	r8, r3
   17048:	ae32      	add	r6, sp, #200	; 0xc8
   1704a:	e560      	b.n	16b0e <_svfprintf_r+0x6f6>
   1704c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1704e:	1e5d      	subs	r5, r3, #1
   17050:	2d00      	cmp	r5, #0
   17052:	dc00      	bgt.n	17056 <_svfprintf_r+0xc3e>
   17054:	e666      	b.n	16d24 <_svfprintf_r+0x90c>
   17056:	4b9c      	ldr	r3, [pc, #624]	; (172c8 <_svfprintf_r+0xeb0>)
   17058:	4699      	mov	r9, r3
   1705a:	2d10      	cmp	r5, #16
   1705c:	dd29      	ble.n	170b2 <_svfprintf_r+0xc9a>
   1705e:	2310      	movs	r3, #16
   17060:	0032      	movs	r2, r6
   17062:	469a      	mov	sl, r3
   17064:	002e      	movs	r6, r5
   17066:	0021      	movs	r1, r4
   17068:	4643      	mov	r3, r8
   1706a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   1706c:	464d      	mov	r5, r9
   1706e:	e003      	b.n	17078 <_svfprintf_r+0xc60>
   17070:	3e10      	subs	r6, #16
   17072:	3208      	adds	r2, #8
   17074:	2e10      	cmp	r6, #16
   17076:	dd17      	ble.n	170a8 <_svfprintf_r+0xc90>
   17078:	4650      	mov	r0, sl
   1707a:	3110      	adds	r1, #16
   1707c:	3301      	adds	r3, #1
   1707e:	6015      	str	r5, [r2, #0]
   17080:	6050      	str	r0, [r2, #4]
   17082:	60b9      	str	r1, [r7, #8]
   17084:	607b      	str	r3, [r7, #4]
   17086:	2b07      	cmp	r3, #7
   17088:	ddf2      	ble.n	17070 <_svfprintf_r+0xc58>
   1708a:	003a      	movs	r2, r7
   1708c:	9906      	ldr	r1, [sp, #24]
   1708e:	0020      	movs	r0, r4
   17090:	f004 fee6 	bl	1be60 <__ssprint_r>
   17094:	2800      	cmp	r0, #0
   17096:	d001      	beq.n	1709c <_svfprintf_r+0xc84>
   17098:	f7ff fa45 	bl	16526 <_svfprintf_r+0x10e>
   1709c:	3e10      	subs	r6, #16
   1709e:	68b9      	ldr	r1, [r7, #8]
   170a0:	687b      	ldr	r3, [r7, #4]
   170a2:	aa32      	add	r2, sp, #200	; 0xc8
   170a4:	2e10      	cmp	r6, #16
   170a6:	dce7      	bgt.n	17078 <_svfprintf_r+0xc60>
   170a8:	46a9      	mov	r9, r5
   170aa:	000c      	movs	r4, r1
   170ac:	0035      	movs	r5, r6
   170ae:	4698      	mov	r8, r3
   170b0:	0016      	movs	r6, r2
   170b2:	464b      	mov	r3, r9
   170b4:	6075      	str	r5, [r6, #4]
   170b6:	6033      	str	r3, [r6, #0]
   170b8:	1964      	adds	r4, r4, r5
   170ba:	e629      	b.n	16d10 <_svfprintf_r+0x8f8>
   170bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   170be:	681a      	ldr	r2, [r3, #0]
   170c0:	f7ff fbfb 	bl	168ba <_svfprintf_r+0x4a2>
   170c4:	6813      	ldr	r3, [r2, #0]
   170c6:	9307      	str	r3, [sp, #28]
   170c8:	f7ff fa82 	bl	165d0 <_svfprintf_r+0x1b8>
   170cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   170ce:	681a      	ldr	r2, [r3, #0]
   170d0:	f7ff fb84 	bl	167dc <_svfprintf_r+0x3c4>
   170d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   170d6:	681a      	ldr	r2, [r3, #0]
   170d8:	f7ff fbd1 	bl	1687e <_svfprintf_r+0x466>
   170dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
   170de:	68ba      	ldr	r2, [r7, #8]
   170e0:	6033      	str	r3, [r6, #0]
   170e2:	9b18      	ldr	r3, [sp, #96]	; 0x60
   170e4:	469c      	mov	ip, r3
   170e6:	6073      	str	r3, [r6, #4]
   170e8:	687b      	ldr	r3, [r7, #4]
   170ea:	4462      	add	r2, ip
   170ec:	3301      	adds	r3, #1
   170ee:	0014      	movs	r4, r2
   170f0:	60ba      	str	r2, [r7, #8]
   170f2:	607b      	str	r3, [r7, #4]
   170f4:	2b07      	cmp	r3, #7
   170f6:	dd00      	ble.n	170fa <_svfprintf_r+0xce2>
   170f8:	e202      	b.n	17500 <_svfprintf_r+0x10e8>
   170fa:	3608      	adds	r6, #8
   170fc:	9b14      	ldr	r3, [sp, #80]	; 0x50
   170fe:	1e5d      	subs	r5, r3, #1
   17100:	2d00      	cmp	r5, #0
   17102:	dc00      	bgt.n	17106 <_svfprintf_r+0xcee>
   17104:	e57e      	b.n	16c04 <_svfprintf_r+0x7ec>
   17106:	4a70      	ldr	r2, [pc, #448]	; (172c8 <_svfprintf_r+0xeb0>)
   17108:	687b      	ldr	r3, [r7, #4]
   1710a:	4691      	mov	r9, r2
   1710c:	2d10      	cmp	r5, #16
   1710e:	dd25      	ble.n	1715c <_svfprintf_r+0xd44>
   17110:	2210      	movs	r2, #16
   17112:	0021      	movs	r1, r4
   17114:	4690      	mov	r8, r2
   17116:	9c09      	ldr	r4, [sp, #36]	; 0x24
   17118:	0032      	movs	r2, r6
   1711a:	002e      	movs	r6, r5
   1711c:	464d      	mov	r5, r9
   1711e:	e003      	b.n	17128 <_svfprintf_r+0xd10>
   17120:	3208      	adds	r2, #8
   17122:	3e10      	subs	r6, #16
   17124:	2e10      	cmp	r6, #16
   17126:	dd15      	ble.n	17154 <_svfprintf_r+0xd3c>
   17128:	4640      	mov	r0, r8
   1712a:	3110      	adds	r1, #16
   1712c:	3301      	adds	r3, #1
   1712e:	6015      	str	r5, [r2, #0]
   17130:	6050      	str	r0, [r2, #4]
   17132:	60b9      	str	r1, [r7, #8]
   17134:	607b      	str	r3, [r7, #4]
   17136:	2b07      	cmp	r3, #7
   17138:	ddf2      	ble.n	17120 <_svfprintf_r+0xd08>
   1713a:	003a      	movs	r2, r7
   1713c:	9906      	ldr	r1, [sp, #24]
   1713e:	0020      	movs	r0, r4
   17140:	f004 fe8e 	bl	1be60 <__ssprint_r>
   17144:	2800      	cmp	r0, #0
   17146:	d001      	beq.n	1714c <_svfprintf_r+0xd34>
   17148:	f7ff f9ed 	bl	16526 <_svfprintf_r+0x10e>
   1714c:	68b9      	ldr	r1, [r7, #8]
   1714e:	687b      	ldr	r3, [r7, #4]
   17150:	aa32      	add	r2, sp, #200	; 0xc8
   17152:	e7e6      	b.n	17122 <_svfprintf_r+0xd0a>
   17154:	46a9      	mov	r9, r5
   17156:	000c      	movs	r4, r1
   17158:	0035      	movs	r5, r6
   1715a:	0016      	movs	r6, r2
   1715c:	464a      	mov	r2, r9
   1715e:	1964      	adds	r4, r4, r5
   17160:	3301      	adds	r3, #1
   17162:	6032      	str	r2, [r6, #0]
   17164:	6075      	str	r5, [r6, #4]
   17166:	60bc      	str	r4, [r7, #8]
   17168:	607b      	str	r3, [r7, #4]
   1716a:	2b07      	cmp	r3, #7
   1716c:	dc00      	bgt.n	17170 <_svfprintf_r+0xd58>
   1716e:	e548      	b.n	16c02 <_svfprintf_r+0x7ea>
   17170:	e5e5      	b.n	16d3e <_svfprintf_r+0x926>
   17172:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17174:	2b09      	cmp	r3, #9
   17176:	d900      	bls.n	1717a <_svfprintf_r+0xd62>
   17178:	e730      	b.n	16fdc <_svfprintf_r+0xbc4>
   1717a:	9c08      	ldr	r4, [sp, #32]
   1717c:	2227      	movs	r2, #39	; 0x27
   1717e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   17180:	a928      	add	r1, sp, #160	; 0xa0
   17182:	3330      	adds	r3, #48	; 0x30
   17184:	548b      	strb	r3, [r1, r2]
   17186:	2301      	movs	r3, #1
   17188:	aa16      	add	r2, sp, #88	; 0x58
   1718a:	4694      	mov	ip, r2
   1718c:	930e      	str	r3, [sp, #56]	; 0x38
   1718e:	336e      	adds	r3, #110	; 0x6e
   17190:	4463      	add	r3, ip
   17192:	9408      	str	r4, [sp, #32]
   17194:	9311      	str	r3, [sp, #68]	; 0x44
   17196:	f7ff fa4f 	bl	16638 <_svfprintf_r+0x220>
   1719a:	2b30      	cmp	r3, #48	; 0x30
   1719c:	d100      	bne.n	171a0 <_svfprintf_r+0xd88>
   1719e:	e20b      	b.n	175b8 <_svfprintf_r+0x11a0>
   171a0:	2330      	movs	r3, #48	; 0x30
   171a2:	3a02      	subs	r2, #2
   171a4:	7013      	strb	r3, [r2, #0]
   171a6:	ab32      	add	r3, sp, #200	; 0xc8
   171a8:	1a9b      	subs	r3, r3, r2
   171aa:	930e      	str	r3, [sp, #56]	; 0x38
   171ac:	9211      	str	r2, [sp, #68]	; 0x44
   171ae:	f7ff fa43 	bl	16638 <_svfprintf_r+0x220>
   171b2:	46b0      	mov	r8, r6
   171b4:	46a1      	mov	r9, r4
   171b6:	0016      	movs	r6, r2
   171b8:	000c      	movs	r4, r1
   171ba:	464a      	mov	r2, r9
   171bc:	6032      	str	r2, [r6, #0]
   171be:	4642      	mov	r2, r8
   171c0:	4444      	add	r4, r8
   171c2:	3301      	adds	r3, #1
   171c4:	6072      	str	r2, [r6, #4]
   171c6:	60bc      	str	r4, [r7, #8]
   171c8:	607b      	str	r3, [r7, #4]
   171ca:	2b07      	cmp	r3, #7
   171cc:	dd00      	ble.n	171d0 <_svfprintf_r+0xdb8>
   171ce:	e29c      	b.n	1770a <_svfprintf_r+0x12f2>
   171d0:	3608      	adds	r6, #8
   171d2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   171d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
   171d6:	4293      	cmp	r3, r2
   171d8:	db4c      	blt.n	17274 <_svfprintf_r+0xe5c>
   171da:	9a08      	ldr	r2, [sp, #32]
   171dc:	07d2      	lsls	r2, r2, #31
   171de:	d449      	bmi.n	17274 <_svfprintf_r+0xe5c>
   171e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   171e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   171e4:	1ad3      	subs	r3, r2, r3
   171e6:	1a52      	subs	r2, r2, r1
   171e8:	4690      	mov	r8, r2
   171ea:	429a      	cmp	r2, r3
   171ec:	dd00      	ble.n	171f0 <_svfprintf_r+0xdd8>
   171ee:	4698      	mov	r8, r3
   171f0:	4642      	mov	r2, r8
   171f2:	2a00      	cmp	r2, #0
   171f4:	dd0f      	ble.n	17216 <_svfprintf_r+0xdfe>
   171f6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   171f8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   171fa:	468c      	mov	ip, r1
   171fc:	4462      	add	r2, ip
   171fe:	6032      	str	r2, [r6, #0]
   17200:	4642      	mov	r2, r8
   17202:	6072      	str	r2, [r6, #4]
   17204:	687a      	ldr	r2, [r7, #4]
   17206:	4444      	add	r4, r8
   17208:	3201      	adds	r2, #1
   1720a:	60bc      	str	r4, [r7, #8]
   1720c:	607a      	str	r2, [r7, #4]
   1720e:	2a07      	cmp	r2, #7
   17210:	dd00      	ble.n	17214 <_svfprintf_r+0xdfc>
   17212:	e286      	b.n	17722 <_svfprintf_r+0x130a>
   17214:	3608      	adds	r6, #8
   17216:	4642      	mov	r2, r8
   17218:	43d5      	mvns	r5, r2
   1721a:	17ed      	asrs	r5, r5, #31
   1721c:	4015      	ands	r5, r2
   1721e:	1b5d      	subs	r5, r3, r5
   17220:	2d00      	cmp	r5, #0
   17222:	dc00      	bgt.n	17226 <_svfprintf_r+0xe0e>
   17224:	e4ee      	b.n	16c04 <_svfprintf_r+0x7ec>
   17226:	4a28      	ldr	r2, [pc, #160]	; (172c8 <_svfprintf_r+0xeb0>)
   17228:	687b      	ldr	r3, [r7, #4]
   1722a:	4691      	mov	r9, r2
   1722c:	2d10      	cmp	r5, #16
   1722e:	dd95      	ble.n	1715c <_svfprintf_r+0xd44>
   17230:	2210      	movs	r2, #16
   17232:	0021      	movs	r1, r4
   17234:	4690      	mov	r8, r2
   17236:	9c09      	ldr	r4, [sp, #36]	; 0x24
   17238:	0032      	movs	r2, r6
   1723a:	002e      	movs	r6, r5
   1723c:	464d      	mov	r5, r9
   1723e:	e003      	b.n	17248 <_svfprintf_r+0xe30>
   17240:	3208      	adds	r2, #8
   17242:	3e10      	subs	r6, #16
   17244:	2e10      	cmp	r6, #16
   17246:	dd85      	ble.n	17154 <_svfprintf_r+0xd3c>
   17248:	4640      	mov	r0, r8
   1724a:	3110      	adds	r1, #16
   1724c:	3301      	adds	r3, #1
   1724e:	6015      	str	r5, [r2, #0]
   17250:	6050      	str	r0, [r2, #4]
   17252:	60b9      	str	r1, [r7, #8]
   17254:	607b      	str	r3, [r7, #4]
   17256:	2b07      	cmp	r3, #7
   17258:	ddf2      	ble.n	17240 <_svfprintf_r+0xe28>
   1725a:	003a      	movs	r2, r7
   1725c:	9906      	ldr	r1, [sp, #24]
   1725e:	0020      	movs	r0, r4
   17260:	f004 fdfe 	bl	1be60 <__ssprint_r>
   17264:	2800      	cmp	r0, #0
   17266:	d001      	beq.n	1726c <_svfprintf_r+0xe54>
   17268:	f7ff f95d 	bl	16526 <_svfprintf_r+0x10e>
   1726c:	68b9      	ldr	r1, [r7, #8]
   1726e:	687b      	ldr	r3, [r7, #4]
   17270:	aa32      	add	r2, sp, #200	; 0xc8
   17272:	e7e6      	b.n	17242 <_svfprintf_r+0xe2a>
   17274:	9a19      	ldr	r2, [sp, #100]	; 0x64
   17276:	6032      	str	r2, [r6, #0]
   17278:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1727a:	4694      	mov	ip, r2
   1727c:	6072      	str	r2, [r6, #4]
   1727e:	687a      	ldr	r2, [r7, #4]
   17280:	4464      	add	r4, ip
   17282:	3201      	adds	r2, #1
   17284:	60bc      	str	r4, [r7, #8]
   17286:	607a      	str	r2, [r7, #4]
   17288:	2a07      	cmp	r2, #7
   1728a:	dd00      	ble.n	1728e <_svfprintf_r+0xe76>
   1728c:	e230      	b.n	176f0 <_svfprintf_r+0x12d8>
   1728e:	3608      	adds	r6, #8
   17290:	e7a6      	b.n	171e0 <_svfprintf_r+0xdc8>
   17292:	003a      	movs	r2, r7
   17294:	9906      	ldr	r1, [sp, #24]
   17296:	9809      	ldr	r0, [sp, #36]	; 0x24
   17298:	f004 fde2 	bl	1be60 <__ssprint_r>
   1729c:	2800      	cmp	r0, #0
   1729e:	d001      	beq.n	172a4 <_svfprintf_r+0xe8c>
   172a0:	f7ff f941 	bl	16526 <_svfprintf_r+0x10e>
   172a4:	68bc      	ldr	r4, [r7, #8]
   172a6:	687b      	ldr	r3, [r7, #4]
   172a8:	ae32      	add	r6, sp, #200	; 0xc8
   172aa:	e513      	b.n	16cd4 <_svfprintf_r+0x8bc>
   172ac:	003a      	movs	r2, r7
   172ae:	9906      	ldr	r1, [sp, #24]
   172b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   172b2:	f004 fdd5 	bl	1be60 <__ssprint_r>
   172b6:	2800      	cmp	r0, #0
   172b8:	d001      	beq.n	172be <_svfprintf_r+0xea6>
   172ba:	f7ff f934 	bl	16526 <_svfprintf_r+0x10e>
   172be:	687b      	ldr	r3, [r7, #4]
   172c0:	68bc      	ldr	r4, [r7, #8]
   172c2:	4698      	mov	r8, r3
   172c4:	ae32      	add	r6, sp, #200	; 0xc8
   172c6:	e513      	b.n	16cf0 <_svfprintf_r+0x8d8>
   172c8:	0001e094 	.word	0x0001e094
   172cc:	2307      	movs	r3, #7
   172ce:	3207      	adds	r2, #7
   172d0:	439a      	bics	r2, r3
   172d2:	3301      	adds	r3, #1
   172d4:	469c      	mov	ip, r3
   172d6:	4494      	add	ip, r2
   172d8:	4663      	mov	r3, ip
   172da:	930f      	str	r3, [sp, #60]	; 0x3c
   172dc:	6853      	ldr	r3, [r2, #4]
   172de:	6812      	ldr	r2, [r2, #0]
   172e0:	930d      	str	r3, [sp, #52]	; 0x34
   172e2:	920c      	str	r2, [sp, #48]	; 0x30
   172e4:	2b00      	cmp	r3, #0
   172e6:	db01      	blt.n	172ec <_svfprintf_r+0xed4>
   172e8:	f7ff f97a 	bl	165e0 <_svfprintf_r+0x1c8>
   172ec:	980c      	ldr	r0, [sp, #48]	; 0x30
   172ee:	990d      	ldr	r1, [sp, #52]	; 0x34
   172f0:	2300      	movs	r3, #0
   172f2:	4242      	negs	r2, r0
   172f4:	418b      	sbcs	r3, r1
   172f6:	0011      	movs	r1, r2
   172f8:	001a      	movs	r2, r3
   172fa:	232d      	movs	r3, #45	; 0x2d
   172fc:	a816      	add	r0, sp, #88	; 0x58
   172fe:	77c3      	strb	r3, [r0, #31]
   17300:	0008      	movs	r0, r1
   17302:	4310      	orrs	r0, r2
   17304:	910c      	str	r1, [sp, #48]	; 0x30
   17306:	920d      	str	r2, [sp, #52]	; 0x34
   17308:	4698      	mov	r8, r3
   1730a:	0002      	movs	r2, r0
   1730c:	3b2c      	subs	r3, #44	; 0x2c
   1730e:	f7ff f970 	bl	165f2 <_svfprintf_r+0x1da>
   17312:	003a      	movs	r2, r7
   17314:	9906      	ldr	r1, [sp, #24]
   17316:	9809      	ldr	r0, [sp, #36]	; 0x24
   17318:	f004 fda2 	bl	1be60 <__ssprint_r>
   1731c:	2800      	cmp	r0, #0
   1731e:	d001      	beq.n	17324 <_svfprintf_r+0xf0c>
   17320:	f7ff f901 	bl	16526 <_svfprintf_r+0x10e>
   17324:	68bc      	ldr	r4, [r7, #8]
   17326:	ae32      	add	r6, sp, #200	; 0xc8
   17328:	e418      	b.n	16b5c <_svfprintf_r+0x744>
   1732a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1732c:	9d15      	ldr	r5, [sp, #84]	; 0x54
   1732e:	000a      	movs	r2, r1
   17330:	0008      	movs	r0, r1
   17332:	002b      	movs	r3, r5
   17334:	0029      	movs	r1, r5
   17336:	f005 f925 	bl	1c584 <__aeabi_dcmpun>
   1733a:	2800      	cmp	r0, #0
   1733c:	d000      	beq.n	17340 <_svfprintf_r+0xf28>
   1733e:	e2e6      	b.n	1790e <_svfprintf_r+0x14f6>
   17340:	4653      	mov	r3, sl
   17342:	3301      	adds	r3, #1
   17344:	d100      	bne.n	17348 <_svfprintf_r+0xf30>
   17346:	e20d      	b.n	17764 <_svfprintf_r+0x134c>
   17348:	2320      	movs	r3, #32
   1734a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1734c:	439a      	bics	r2, r3
   1734e:	920e      	str	r2, [sp, #56]	; 0x38
   17350:	2a47      	cmp	r2, #71	; 0x47
   17352:	d100      	bne.n	17356 <_svfprintf_r+0xf3e>
   17354:	e11c      	b.n	17590 <_svfprintf_r+0x1178>
   17356:	2380      	movs	r3, #128	; 0x80
   17358:	005b      	lsls	r3, r3, #1
   1735a:	4323      	orrs	r3, r4
   1735c:	9308      	str	r3, [sp, #32]
   1735e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17360:	2b00      	cmp	r3, #0
   17362:	da00      	bge.n	17366 <_svfprintf_r+0xf4e>
   17364:	e221      	b.n	177aa <_svfprintf_r+0x1392>
   17366:	9a16      	ldr	r2, [sp, #88]	; 0x58
   17368:	9307      	str	r3, [sp, #28]
   1736a:	2300      	movs	r3, #0
   1736c:	4691      	mov	r9, r2
   1736e:	9310      	str	r3, [sp, #64]	; 0x40
   17370:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17372:	2b66      	cmp	r3, #102	; 0x66
   17374:	d100      	bne.n	17378 <_svfprintf_r+0xf60>
   17376:	e1fc      	b.n	17772 <_svfprintf_r+0x135a>
   17378:	2b46      	cmp	r3, #70	; 0x46
   1737a:	d100      	bne.n	1737e <_svfprintf_r+0xf66>
   1737c:	e0db      	b.n	17536 <_svfprintf_r+0x111e>
   1737e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17380:	9809      	ldr	r0, [sp, #36]	; 0x24
   17382:	3a45      	subs	r2, #69	; 0x45
   17384:	0013      	movs	r3, r2
   17386:	4259      	negs	r1, r3
   17388:	4159      	adcs	r1, r3
   1738a:	ab20      	add	r3, sp, #128	; 0x80
   1738c:	000d      	movs	r5, r1
   1738e:	9303      	str	r3, [sp, #12]
   17390:	ab1f      	add	r3, sp, #124	; 0x7c
   17392:	9302      	str	r3, [sp, #8]
   17394:	2302      	movs	r3, #2
   17396:	aa23      	add	r2, sp, #140	; 0x8c
   17398:	4455      	add	r5, sl
   1739a:	921b      	str	r2, [sp, #108]	; 0x6c
   1739c:	9204      	str	r2, [sp, #16]
   1739e:	9300      	str	r3, [sp, #0]
   173a0:	9501      	str	r5, [sp, #4]
   173a2:	9b07      	ldr	r3, [sp, #28]
   173a4:	464a      	mov	r2, r9
   173a6:	f002 f813 	bl	193d0 <_dtoa_r>
   173aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   173ac:	9011      	str	r0, [sp, #68]	; 0x44
   173ae:	2b67      	cmp	r3, #103	; 0x67
   173b0:	d000      	beq.n	173b4 <_svfprintf_r+0xf9c>
   173b2:	e239      	b.n	17828 <_svfprintf_r+0x1410>
   173b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   173b6:	4698      	mov	r8, r3
   173b8:	44a8      	add	r8, r5
   173ba:	07e3      	lsls	r3, r4, #31
   173bc:	d400      	bmi.n	173c0 <_svfprintf_r+0xfa8>
   173be:	e28b      	b.n	178d8 <_svfprintf_r+0x14c0>
   173c0:	2300      	movs	r3, #0
   173c2:	2200      	movs	r2, #0
   173c4:	4648      	mov	r0, r9
   173c6:	9907      	ldr	r1, [sp, #28]
   173c8:	f7fe fc44 	bl	15c54 <__aeabi_dcmpeq>
   173cc:	4643      	mov	r3, r8
   173ce:	2800      	cmp	r0, #0
   173d0:	d10a      	bne.n	173e8 <_svfprintf_r+0xfd0>
   173d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   173d4:	4543      	cmp	r3, r8
   173d6:	d207      	bcs.n	173e8 <_svfprintf_r+0xfd0>
   173d8:	2130      	movs	r1, #48	; 0x30
   173da:	4640      	mov	r0, r8
   173dc:	1c5a      	adds	r2, r3, #1
   173de:	9223      	str	r2, [sp, #140]	; 0x8c
   173e0:	7019      	strb	r1, [r3, #0]
   173e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   173e4:	4298      	cmp	r0, r3
   173e6:	d8f9      	bhi.n	173dc <_svfprintf_r+0xfc4>
   173e8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   173ea:	1a9b      	subs	r3, r3, r2
   173ec:	9314      	str	r3, [sp, #80]	; 0x50
   173ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   173f0:	2b47      	cmp	r3, #71	; 0x47
   173f2:	d100      	bne.n	173f6 <_svfprintf_r+0xfde>
   173f4:	e0f6      	b.n	175e4 <_svfprintf_r+0x11cc>
   173f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   173f8:	2b65      	cmp	r3, #101	; 0x65
   173fa:	dc00      	bgt.n	173fe <_svfprintf_r+0xfe6>
   173fc:	e226      	b.n	1784c <_svfprintf_r+0x1434>
   173fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17400:	2b66      	cmp	r3, #102	; 0x66
   17402:	d100      	bne.n	17406 <_svfprintf_r+0xfee>
   17404:	e1f4      	b.n	177f0 <_svfprintf_r+0x13d8>
   17406:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17408:	9313      	str	r3, [sp, #76]	; 0x4c
   1740a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1740c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1740e:	0019      	movs	r1, r3
   17410:	4291      	cmp	r1, r2
   17412:	dd00      	ble.n	17416 <_svfprintf_r+0xffe>
   17414:	e1d4      	b.n	177c0 <_svfprintf_r+0x13a8>
   17416:	07e3      	lsls	r3, r4, #31
   17418:	d500      	bpl.n	1741c <_svfprintf_r+0x1004>
   1741a:	e249      	b.n	178b0 <_svfprintf_r+0x1498>
   1741c:	43d3      	mvns	r3, r2
   1741e:	17db      	asrs	r3, r3, #31
   17420:	0011      	movs	r1, r2
   17422:	401a      	ands	r2, r3
   17424:	2367      	movs	r3, #103	; 0x67
   17426:	9207      	str	r2, [sp, #28]
   17428:	910e      	str	r1, [sp, #56]	; 0x38
   1742a:	9312      	str	r3, [sp, #72]	; 0x48
   1742c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1742e:	2b00      	cmp	r3, #0
   17430:	d000      	beq.n	17434 <_svfprintf_r+0x101c>
   17432:	e0cf      	b.n	175d4 <_svfprintf_r+0x11bc>
   17434:	ab16      	add	r3, sp, #88	; 0x58
   17436:	7fdb      	ldrb	r3, [r3, #31]
   17438:	4698      	mov	r8, r3
   1743a:	2300      	movs	r3, #0
   1743c:	469a      	mov	sl, r3
   1743e:	f7ff f903 	bl	16648 <_svfprintf_r+0x230>
   17442:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17444:	990a      	ldr	r1, [sp, #40]	; 0x28
   17446:	6813      	ldr	r3, [r2, #0]
   17448:	6019      	str	r1, [r3, #0]
   1744a:	0013      	movs	r3, r2
   1744c:	3304      	adds	r3, #4
   1744e:	930f      	str	r3, [sp, #60]	; 0x3c
   17450:	f7ff f80d 	bl	1646e <_svfprintf_r+0x56>
   17454:	003a      	movs	r2, r7
   17456:	9906      	ldr	r1, [sp, #24]
   17458:	9809      	ldr	r0, [sp, #36]	; 0x24
   1745a:	f004 fd01 	bl	1be60 <__ssprint_r>
   1745e:	2800      	cmp	r0, #0
   17460:	d001      	beq.n	17466 <_svfprintf_r+0x104e>
   17462:	f7ff f860 	bl	16526 <_svfprintf_r+0x10e>
   17466:	ae32      	add	r6, sp, #200	; 0xc8
   17468:	e48e      	b.n	16d88 <_svfprintf_r+0x970>
   1746a:	4bde      	ldr	r3, [pc, #888]	; (177e4 <_svfprintf_r+0x13cc>)
   1746c:	3401      	adds	r4, #1
   1746e:	6033      	str	r3, [r6, #0]
   17470:	2301      	movs	r3, #1
   17472:	6073      	str	r3, [r6, #4]
   17474:	687b      	ldr	r3, [r7, #4]
   17476:	60bc      	str	r4, [r7, #8]
   17478:	3301      	adds	r3, #1
   1747a:	607b      	str	r3, [r7, #4]
   1747c:	2b07      	cmp	r3, #7
   1747e:	dc7a      	bgt.n	17576 <_svfprintf_r+0x115e>
   17480:	3608      	adds	r6, #8
   17482:	2800      	cmp	r0, #0
   17484:	d107      	bne.n	17496 <_svfprintf_r+0x107e>
   17486:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17488:	2b00      	cmp	r3, #0
   1748a:	d104      	bne.n	17496 <_svfprintf_r+0x107e>
   1748c:	9b08      	ldr	r3, [sp, #32]
   1748e:	07db      	lsls	r3, r3, #31
   17490:	d401      	bmi.n	17496 <_svfprintf_r+0x107e>
   17492:	f7ff fbb7 	bl	16c04 <_svfprintf_r+0x7ec>
   17496:	9b19      	ldr	r3, [sp, #100]	; 0x64
   17498:	6033      	str	r3, [r6, #0]
   1749a:	9b18      	ldr	r3, [sp, #96]	; 0x60
   1749c:	1919      	adds	r1, r3, r4
   1749e:	6073      	str	r3, [r6, #4]
   174a0:	687b      	ldr	r3, [r7, #4]
   174a2:	60b9      	str	r1, [r7, #8]
   174a4:	3301      	adds	r3, #1
   174a6:	607b      	str	r3, [r7, #4]
   174a8:	2b07      	cmp	r3, #7
   174aa:	dd00      	ble.n	174ae <_svfprintf_r+0x1096>
   174ac:	e1f2      	b.n	17894 <_svfprintf_r+0x147c>
   174ae:	0032      	movs	r2, r6
   174b0:	3208      	adds	r2, #8
   174b2:	2800      	cmp	r0, #0
   174b4:	da00      	bge.n	174b8 <_svfprintf_r+0x10a0>
   174b6:	e1cc      	b.n	17852 <_svfprintf_r+0x143a>
   174b8:	9811      	ldr	r0, [sp, #68]	; 0x44
   174ba:	3301      	adds	r3, #1
   174bc:	6010      	str	r0, [r2, #0]
   174be:	9814      	ldr	r0, [sp, #80]	; 0x50
   174c0:	607b      	str	r3, [r7, #4]
   174c2:	1844      	adds	r4, r0, r1
   174c4:	6050      	str	r0, [r2, #4]
   174c6:	60bc      	str	r4, [r7, #8]
   174c8:	2b07      	cmp	r3, #7
   174ca:	dd00      	ble.n	174ce <_svfprintf_r+0x10b6>
   174cc:	e437      	b.n	16d3e <_svfprintf_r+0x926>
   174ce:	3208      	adds	r2, #8
   174d0:	0016      	movs	r6, r2
   174d2:	f7ff fb97 	bl	16c04 <_svfprintf_r+0x7ec>
   174d6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   174d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   174da:	680b      	ldr	r3, [r1, #0]
   174dc:	601a      	str	r2, [r3, #0]
   174de:	17d2      	asrs	r2, r2, #31
   174e0:	605a      	str	r2, [r3, #4]
   174e2:	000b      	movs	r3, r1
   174e4:	3304      	adds	r3, #4
   174e6:	930f      	str	r3, [sp, #60]	; 0x3c
   174e8:	f7fe ffc1 	bl	1646e <_svfprintf_r+0x56>
   174ec:	464b      	mov	r3, r9
   174ee:	3101      	adds	r1, #1
   174f0:	431c      	orrs	r4, r3
   174f2:	780b      	ldrb	r3, [r1, #0]
   174f4:	f7fe fff4 	bl	164e0 <_svfprintf_r+0xc8>
   174f8:	4bbb      	ldr	r3, [pc, #748]	; (177e8 <_svfprintf_r+0x13d0>)
   174fa:	9311      	str	r3, [sp, #68]	; 0x44
   174fc:	f7ff f937 	bl	1676e <_svfprintf_r+0x356>
   17500:	003a      	movs	r2, r7
   17502:	9906      	ldr	r1, [sp, #24]
   17504:	9809      	ldr	r0, [sp, #36]	; 0x24
   17506:	f004 fcab 	bl	1be60 <__ssprint_r>
   1750a:	2800      	cmp	r0, #0
   1750c:	d001      	beq.n	17512 <_svfprintf_r+0x10fa>
   1750e:	f7ff f80a 	bl	16526 <_svfprintf_r+0x10e>
   17512:	68bc      	ldr	r4, [r7, #8]
   17514:	ae32      	add	r6, sp, #200	; 0xc8
   17516:	e5f1      	b.n	170fc <_svfprintf_r+0xce4>
   17518:	2140      	movs	r1, #64	; 0x40
   1751a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1751c:	f003 fbe6 	bl	1acec <_malloc_r>
   17520:	9b06      	ldr	r3, [sp, #24]
   17522:	6018      	str	r0, [r3, #0]
   17524:	6118      	str	r0, [r3, #16]
   17526:	2800      	cmp	r0, #0
   17528:	d100      	bne.n	1752c <_svfprintf_r+0x1114>
   1752a:	e24f      	b.n	179cc <_svfprintf_r+0x15b4>
   1752c:	2340      	movs	r3, #64	; 0x40
   1752e:	9a06      	ldr	r2, [sp, #24]
   17530:	6153      	str	r3, [r2, #20]
   17532:	f7fe ff8e 	bl	16452 <_svfprintf_r+0x3a>
   17536:	ab23      	add	r3, sp, #140	; 0x8c
   17538:	931b      	str	r3, [sp, #108]	; 0x6c
   1753a:	9304      	str	r3, [sp, #16]
   1753c:	ab20      	add	r3, sp, #128	; 0x80
   1753e:	9303      	str	r3, [sp, #12]
   17540:	ab1f      	add	r3, sp, #124	; 0x7c
   17542:	9302      	str	r3, [sp, #8]
   17544:	4653      	mov	r3, sl
   17546:	9301      	str	r3, [sp, #4]
   17548:	2303      	movs	r3, #3
   1754a:	464a      	mov	r2, r9
   1754c:	9300      	str	r3, [sp, #0]
   1754e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17550:	9b07      	ldr	r3, [sp, #28]
   17552:	f001 ff3d 	bl	193d0 <_dtoa_r>
   17556:	4655      	mov	r5, sl
   17558:	9011      	str	r0, [sp, #68]	; 0x44
   1755a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1755c:	4698      	mov	r8, r3
   1755e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   17560:	44a8      	add	r8, r5
   17562:	2b46      	cmp	r3, #70	; 0x46
   17564:	d000      	beq.n	17568 <_svfprintf_r+0x1150>
   17566:	e72b      	b.n	173c0 <_svfprintf_r+0xfa8>
   17568:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1756a:	781b      	ldrb	r3, [r3, #0]
   1756c:	2b30      	cmp	r3, #48	; 0x30
   1756e:	d016      	beq.n	1759e <_svfprintf_r+0x1186>
   17570:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17572:	4498      	add	r8, r3
   17574:	e724      	b.n	173c0 <_svfprintf_r+0xfa8>
   17576:	003a      	movs	r2, r7
   17578:	9906      	ldr	r1, [sp, #24]
   1757a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1757c:	f004 fc70 	bl	1be60 <__ssprint_r>
   17580:	2800      	cmp	r0, #0
   17582:	d001      	beq.n	17588 <_svfprintf_r+0x1170>
   17584:	f7fe ffcf 	bl	16526 <_svfprintf_r+0x10e>
   17588:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1758a:	68bc      	ldr	r4, [r7, #8]
   1758c:	ae32      	add	r6, sp, #200	; 0xc8
   1758e:	e778      	b.n	17482 <_svfprintf_r+0x106a>
   17590:	4653      	mov	r3, sl
   17592:	2b00      	cmp	r3, #0
   17594:	d000      	beq.n	17598 <_svfprintf_r+0x1180>
   17596:	e6de      	b.n	17356 <_svfprintf_r+0xf3e>
   17598:	3301      	adds	r3, #1
   1759a:	469a      	mov	sl, r3
   1759c:	e6db      	b.n	17356 <_svfprintf_r+0xf3e>
   1759e:	2200      	movs	r2, #0
   175a0:	2300      	movs	r3, #0
   175a2:	4648      	mov	r0, r9
   175a4:	9907      	ldr	r1, [sp, #28]
   175a6:	f7fe fb55 	bl	15c54 <__aeabi_dcmpeq>
   175aa:	2800      	cmp	r0, #0
   175ac:	d1e0      	bne.n	17570 <_svfprintf_r+0x1158>
   175ae:	2301      	movs	r3, #1
   175b0:	1b5b      	subs	r3, r3, r5
   175b2:	931f      	str	r3, [sp, #124]	; 0x7c
   175b4:	4498      	add	r8, r3
   175b6:	e703      	b.n	173c0 <_svfprintf_r+0xfa8>
   175b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   175ba:	ab32      	add	r3, sp, #200	; 0xc8
   175bc:	1a9b      	subs	r3, r3, r2
   175be:	930e      	str	r3, [sp, #56]	; 0x38
   175c0:	f7ff f83a 	bl	16638 <_svfprintf_r+0x220>
   175c4:	9811      	ldr	r0, [sp, #68]	; 0x44
   175c6:	f7fe fef5 	bl	163b4 <strlen>
   175ca:	0002      	movs	r2, r0
   175cc:	900e      	str	r0, [sp, #56]	; 0x38
   175ce:	0003      	movs	r3, r0
   175d0:	f7ff f9cd 	bl	1696e <_svfprintf_r+0x556>
   175d4:	232d      	movs	r3, #45	; 0x2d
   175d6:	aa16      	add	r2, sp, #88	; 0x58
   175d8:	77d3      	strb	r3, [r2, #31]
   175da:	4698      	mov	r8, r3
   175dc:	2300      	movs	r3, #0
   175de:	469a      	mov	sl, r3
   175e0:	f7ff f835 	bl	1664e <_svfprintf_r+0x236>
   175e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   175e6:	9313      	str	r3, [sp, #76]	; 0x4c
   175e8:	1cda      	adds	r2, r3, #3
   175ea:	db02      	blt.n	175f2 <_svfprintf_r+0x11da>
   175ec:	459a      	cmp	sl, r3
   175ee:	db00      	blt.n	175f2 <_svfprintf_r+0x11da>
   175f0:	e70b      	b.n	1740a <_svfprintf_r+0xff2>
   175f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   175f4:	3b02      	subs	r3, #2
   175f6:	9312      	str	r3, [sp, #72]	; 0x48
   175f8:	222c      	movs	r2, #44	; 0x2c
   175fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   175fc:	2148      	movs	r1, #72	; 0x48
   175fe:	1e5d      	subs	r5, r3, #1
   17600:	ab16      	add	r3, sp, #88	; 0x58
   17602:	189b      	adds	r3, r3, r2
   17604:	466a      	mov	r2, sp
   17606:	1852      	adds	r2, r2, r1
   17608:	7812      	ldrb	r2, [r2, #0]
   1760a:	951f      	str	r5, [sp, #124]	; 0x7c
   1760c:	701a      	strb	r2, [r3, #0]
   1760e:	2d00      	cmp	r5, #0
   17610:	da00      	bge.n	17614 <_svfprintf_r+0x11fc>
   17612:	e1a4      	b.n	1795e <_svfprintf_r+0x1546>
   17614:	212d      	movs	r1, #45	; 0x2d
   17616:	232b      	movs	r3, #43	; 0x2b
   17618:	aa16      	add	r2, sp, #88	; 0x58
   1761a:	1852      	adds	r2, r2, r1
   1761c:	7013      	strb	r3, [r2, #0]
   1761e:	2d09      	cmp	r5, #9
   17620:	dc00      	bgt.n	17624 <_svfprintf_r+0x120c>
   17622:	e14c      	b.n	178be <_svfprintf_r+0x14a6>
   17624:	aa16      	add	r2, sp, #88	; 0x58
   17626:	233b      	movs	r3, #59	; 0x3b
   17628:	4694      	mov	ip, r2
   1762a:	4463      	add	r3, ip
   1762c:	469a      	mov	sl, r3
   1762e:	46b1      	mov	r9, r6
   17630:	46a0      	mov	r8, r4
   17632:	4656      	mov	r6, sl
   17634:	e000      	b.n	17638 <_svfprintf_r+0x1220>
   17636:	0026      	movs	r6, r4
   17638:	0028      	movs	r0, r5
   1763a:	210a      	movs	r1, #10
   1763c:	f7fb fcd8 	bl	12ff0 <__aeabi_idivmod>
   17640:	1e74      	subs	r4, r6, #1
   17642:	3130      	adds	r1, #48	; 0x30
   17644:	7021      	strb	r1, [r4, #0]
   17646:	0028      	movs	r0, r5
   17648:	210a      	movs	r1, #10
   1764a:	f7fb fbeb 	bl	12e24 <__divsi3>
   1764e:	0005      	movs	r5, r0
   17650:	2809      	cmp	r0, #9
   17652:	dcf0      	bgt.n	17636 <_svfprintf_r+0x121e>
   17654:	0023      	movs	r3, r4
   17656:	4644      	mov	r4, r8
   17658:	46b0      	mov	r8, r6
   1765a:	464e      	mov	r6, r9
   1765c:	4699      	mov	r9, r3
   1765e:	0003      	movs	r3, r0
   17660:	3330      	adds	r3, #48	; 0x30
   17662:	b2d8      	uxtb	r0, r3
   17664:	4643      	mov	r3, r8
   17666:	3b02      	subs	r3, #2
   17668:	7018      	strb	r0, [r3, #0]
   1766a:	459a      	cmp	sl, r3
   1766c:	d800      	bhi.n	17670 <_svfprintf_r+0x1258>
   1766e:	e1b4      	b.n	179da <_svfprintf_r+0x15c2>
   17670:	4642      	mov	r2, r8
   17672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   17674:	4645      	mov	r5, r8
   17676:	1a99      	subs	r1, r3, r2
   17678:	2301      	movs	r3, #1
   1767a:	3107      	adds	r1, #7
   1767c:	425b      	negs	r3, r3
   1767e:	e001      	b.n	17684 <_svfprintf_r+0x126c>
   17680:	5ce8      	ldrb	r0, [r5, r3]
   17682:	3301      	adds	r3, #1
   17684:	aa21      	add	r2, sp, #132	; 0x84
   17686:	18d2      	adds	r2, r2, r3
   17688:	70d0      	strb	r0, [r2, #3]
   1768a:	428b      	cmp	r3, r1
   1768c:	d1f8      	bne.n	17680 <_svfprintf_r+0x1268>
   1768e:	a916      	add	r1, sp, #88	; 0x58
   17690:	468c      	mov	ip, r1
   17692:	222e      	movs	r2, #46	; 0x2e
   17694:	464b      	mov	r3, r9
   17696:	4462      	add	r2, ip
   17698:	4694      	mov	ip, r2
   1769a:	1afb      	subs	r3, r7, r3
   1769c:	4463      	add	r3, ip
   1769e:	aa21      	add	r2, sp, #132	; 0x84
   176a0:	9914      	ldr	r1, [sp, #80]	; 0x50
   176a2:	1a9b      	subs	r3, r3, r2
   176a4:	469c      	mov	ip, r3
   176a6:	000a      	movs	r2, r1
   176a8:	4462      	add	r2, ip
   176aa:	931a      	str	r3, [sp, #104]	; 0x68
   176ac:	920e      	str	r2, [sp, #56]	; 0x38
   176ae:	2901      	cmp	r1, #1
   176b0:	dc00      	bgt.n	176b4 <_svfprintf_r+0x129c>
   176b2:	e145      	b.n	17940 <_svfprintf_r+0x1528>
   176b4:	9a18      	ldr	r2, [sp, #96]	; 0x60
   176b6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   176b8:	4694      	mov	ip, r2
   176ba:	4463      	add	r3, ip
   176bc:	001a      	movs	r2, r3
   176be:	930e      	str	r3, [sp, #56]	; 0x38
   176c0:	43db      	mvns	r3, r3
   176c2:	17db      	asrs	r3, r3, #31
   176c4:	401a      	ands	r2, r3
   176c6:	2300      	movs	r3, #0
   176c8:	9207      	str	r2, [sp, #28]
   176ca:	9313      	str	r3, [sp, #76]	; 0x4c
   176cc:	e6ae      	b.n	1742c <_svfprintf_r+0x1014>
   176ce:	2301      	movs	r3, #1
   176d0:	425b      	negs	r3, r3
   176d2:	930a      	str	r3, [sp, #40]	; 0x28
   176d4:	f7fe ff2d 	bl	16532 <_svfprintf_r+0x11a>
   176d8:	003a      	movs	r2, r7
   176da:	9906      	ldr	r1, [sp, #24]
   176dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   176de:	f004 fbbf 	bl	1be60 <__ssprint_r>
   176e2:	2800      	cmp	r0, #0
   176e4:	d001      	beq.n	176ea <_svfprintf_r+0x12d2>
   176e6:	f7fe ff1e 	bl	16526 <_svfprintf_r+0x10e>
   176ea:	68bc      	ldr	r4, [r7, #8]
   176ec:	ae32      	add	r6, sp, #200	; 0xc8
   176ee:	e43c      	b.n	16f6a <_svfprintf_r+0xb52>
   176f0:	003a      	movs	r2, r7
   176f2:	9906      	ldr	r1, [sp, #24]
   176f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   176f6:	f004 fbb3 	bl	1be60 <__ssprint_r>
   176fa:	2800      	cmp	r0, #0
   176fc:	d001      	beq.n	17702 <_svfprintf_r+0x12ea>
   176fe:	f7fe ff12 	bl	16526 <_svfprintf_r+0x10e>
   17702:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   17704:	68bc      	ldr	r4, [r7, #8]
   17706:	ae32      	add	r6, sp, #200	; 0xc8
   17708:	e56a      	b.n	171e0 <_svfprintf_r+0xdc8>
   1770a:	003a      	movs	r2, r7
   1770c:	9906      	ldr	r1, [sp, #24]
   1770e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17710:	f004 fba6 	bl	1be60 <__ssprint_r>
   17714:	2800      	cmp	r0, #0
   17716:	d001      	beq.n	1771c <_svfprintf_r+0x1304>
   17718:	f7fe ff05 	bl	16526 <_svfprintf_r+0x10e>
   1771c:	68bc      	ldr	r4, [r7, #8]
   1771e:	ae32      	add	r6, sp, #200	; 0xc8
   17720:	e557      	b.n	171d2 <_svfprintf_r+0xdba>
   17722:	003a      	movs	r2, r7
   17724:	9906      	ldr	r1, [sp, #24]
   17726:	9809      	ldr	r0, [sp, #36]	; 0x24
   17728:	f004 fb9a 	bl	1be60 <__ssprint_r>
   1772c:	2800      	cmp	r0, #0
   1772e:	d001      	beq.n	17734 <_svfprintf_r+0x131c>
   17730:	f7fe fef9 	bl	16526 <_svfprintf_r+0x10e>
   17734:	9b14      	ldr	r3, [sp, #80]	; 0x50
   17736:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   17738:	68bc      	ldr	r4, [r7, #8]
   1773a:	1a9b      	subs	r3, r3, r2
   1773c:	ae32      	add	r6, sp, #200	; 0xc8
   1773e:	e56a      	b.n	17216 <_svfprintf_r+0xdfe>
   17740:	4653      	mov	r3, sl
   17742:	9307      	str	r3, [sp, #28]
   17744:	2b06      	cmp	r3, #6
   17746:	d901      	bls.n	1774c <_svfprintf_r+0x1334>
   17748:	2306      	movs	r3, #6
   1774a:	9307      	str	r3, [sp, #28]
   1774c:	9b07      	ldr	r3, [sp, #28]
   1774e:	950f      	str	r5, [sp, #60]	; 0x3c
   17750:	930e      	str	r3, [sp, #56]	; 0x38
   17752:	2300      	movs	r3, #0
   17754:	4698      	mov	r8, r3
   17756:	469a      	mov	sl, r3
   17758:	9313      	str	r3, [sp, #76]	; 0x4c
   1775a:	4b24      	ldr	r3, [pc, #144]	; (177ec <_svfprintf_r+0x13d4>)
   1775c:	9408      	str	r4, [sp, #32]
   1775e:	9311      	str	r3, [sp, #68]	; 0x44
   17760:	f7fe ff78 	bl	16654 <_svfprintf_r+0x23c>
   17764:	2320      	movs	r3, #32
   17766:	9a12      	ldr	r2, [sp, #72]	; 0x48
   17768:	439a      	bics	r2, r3
   1776a:	3b1a      	subs	r3, #26
   1776c:	920e      	str	r2, [sp, #56]	; 0x38
   1776e:	469a      	mov	sl, r3
   17770:	e5f1      	b.n	17356 <_svfprintf_r+0xf3e>
   17772:	ab23      	add	r3, sp, #140	; 0x8c
   17774:	931b      	str	r3, [sp, #108]	; 0x6c
   17776:	9304      	str	r3, [sp, #16]
   17778:	ab20      	add	r3, sp, #128	; 0x80
   1777a:	9303      	str	r3, [sp, #12]
   1777c:	ab1f      	add	r3, sp, #124	; 0x7c
   1777e:	9302      	str	r3, [sp, #8]
   17780:	4653      	mov	r3, sl
   17782:	9301      	str	r3, [sp, #4]
   17784:	2303      	movs	r3, #3
   17786:	464a      	mov	r2, r9
   17788:	9300      	str	r3, [sp, #0]
   1778a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1778c:	9b07      	ldr	r3, [sp, #28]
   1778e:	f001 fe1f 	bl	193d0 <_dtoa_r>
   17792:	0003      	movs	r3, r0
   17794:	4453      	add	r3, sl
   17796:	9011      	str	r0, [sp, #68]	; 0x44
   17798:	4698      	mov	r8, r3
   1779a:	4655      	mov	r5, sl
   1779c:	e6e4      	b.n	17568 <_svfprintf_r+0x1150>
   1779e:	232d      	movs	r3, #45	; 0x2d
   177a0:	aa16      	add	r2, sp, #88	; 0x58
   177a2:	77d3      	strb	r3, [r2, #31]
   177a4:	4698      	mov	r8, r3
   177a6:	f7fe ffdb 	bl	16760 <_svfprintf_r+0x348>
   177aa:	2280      	movs	r2, #128	; 0x80
   177ac:	0612      	lsls	r2, r2, #24
   177ae:	4694      	mov	ip, r2
   177b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   177b2:	4699      	mov	r9, r3
   177b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   177b6:	4463      	add	r3, ip
   177b8:	9307      	str	r3, [sp, #28]
   177ba:	232d      	movs	r3, #45	; 0x2d
   177bc:	9310      	str	r3, [sp, #64]	; 0x40
   177be:	e5d7      	b.n	17370 <_svfprintf_r+0xf58>
   177c0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   177c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
   177c4:	4694      	mov	ip, r2
   177c6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   177c8:	4463      	add	r3, ip
   177ca:	930e      	str	r3, [sp, #56]	; 0x38
   177cc:	2a00      	cmp	r2, #0
   177ce:	dc00      	bgt.n	177d2 <_svfprintf_r+0x13ba>
   177d0:	e0ce      	b.n	17970 <_svfprintf_r+0x1558>
   177d2:	001a      	movs	r2, r3
   177d4:	43db      	mvns	r3, r3
   177d6:	17db      	asrs	r3, r3, #31
   177d8:	401a      	ands	r2, r3
   177da:	2367      	movs	r3, #103	; 0x67
   177dc:	9207      	str	r2, [sp, #28]
   177de:	9312      	str	r3, [sp, #72]	; 0x48
   177e0:	e624      	b.n	1742c <_svfprintf_r+0x1014>
   177e2:	46c0      	nop			; (mov r8, r8)
   177e4:	0001d630 	.word	0x0001d630
   177e8:	0001e048 	.word	0x0001e048
   177ec:	0001e07c 	.word	0x0001e07c
   177f0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   177f2:	9313      	str	r3, [sp, #76]	; 0x4c
   177f4:	2b00      	cmp	r3, #0
   177f6:	dc00      	bgt.n	177fa <_svfprintf_r+0x13e2>
   177f8:	e0d5      	b.n	179a6 <_svfprintf_r+0x158e>
   177fa:	4652      	mov	r2, sl
   177fc:	2a00      	cmp	r2, #0
   177fe:	d000      	beq.n	17802 <_svfprintf_r+0x13ea>
   17800:	e092      	b.n	17928 <_svfprintf_r+0x1510>
   17802:	07e2      	lsls	r2, r4, #31
   17804:	d500      	bpl.n	17808 <_svfprintf_r+0x13f0>
   17806:	e08f      	b.n	17928 <_svfprintf_r+0x1510>
   17808:	9307      	str	r3, [sp, #28]
   1780a:	930e      	str	r3, [sp, #56]	; 0x38
   1780c:	e60e      	b.n	1742c <_svfprintf_r+0x1014>
   1780e:	ab16      	add	r3, sp, #88	; 0x58
   17810:	7fdb      	ldrb	r3, [r3, #31]
   17812:	950f      	str	r5, [sp, #60]	; 0x3c
   17814:	4698      	mov	r8, r3
   17816:	4653      	mov	r3, sl
   17818:	9307      	str	r3, [sp, #28]
   1781a:	930e      	str	r3, [sp, #56]	; 0x38
   1781c:	2300      	movs	r3, #0
   1781e:	9408      	str	r4, [sp, #32]
   17820:	469a      	mov	sl, r3
   17822:	9313      	str	r3, [sp, #76]	; 0x4c
   17824:	f7fe ff10 	bl	16648 <_svfprintf_r+0x230>
   17828:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1782a:	4698      	mov	r8, r3
   1782c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1782e:	44a8      	add	r8, r5
   17830:	2b47      	cmp	r3, #71	; 0x47
   17832:	d000      	beq.n	17836 <_svfprintf_r+0x141e>
   17834:	e5c4      	b.n	173c0 <_svfprintf_r+0xfa8>
   17836:	07e3      	lsls	r3, r4, #31
   17838:	d500      	bpl.n	1783c <_svfprintf_r+0x1424>
   1783a:	e68e      	b.n	1755a <_svfprintf_r+0x1142>
   1783c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1783e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   17840:	1a9b      	subs	r3, r3, r2
   17842:	9314      	str	r3, [sp, #80]	; 0x50
   17844:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17846:	2b47      	cmp	r3, #71	; 0x47
   17848:	d100      	bne.n	1784c <_svfprintf_r+0x1434>
   1784a:	e6cb      	b.n	175e4 <_svfprintf_r+0x11cc>
   1784c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1784e:	9313      	str	r3, [sp, #76]	; 0x4c
   17850:	e6d2      	b.n	175f8 <_svfprintf_r+0x11e0>
   17852:	4244      	negs	r4, r0
   17854:	3010      	adds	r0, #16
   17856:	db00      	blt.n	1785a <_svfprintf_r+0x1442>
   17858:	e0d0      	b.n	179fc <_svfprintf_r+0x15e4>
   1785a:	486e      	ldr	r0, [pc, #440]	; (17a14 <_svfprintf_r+0x15fc>)
   1785c:	2610      	movs	r6, #16
   1785e:	0005      	movs	r5, r0
   17860:	e003      	b.n	1786a <_svfprintf_r+0x1452>
   17862:	3208      	adds	r2, #8
   17864:	3c10      	subs	r4, #16
   17866:	2c10      	cmp	r4, #16
   17868:	dd38      	ble.n	178dc <_svfprintf_r+0x14c4>
   1786a:	3110      	adds	r1, #16
   1786c:	3301      	adds	r3, #1
   1786e:	6015      	str	r5, [r2, #0]
   17870:	6056      	str	r6, [r2, #4]
   17872:	60b9      	str	r1, [r7, #8]
   17874:	607b      	str	r3, [r7, #4]
   17876:	2b07      	cmp	r3, #7
   17878:	ddf3      	ble.n	17862 <_svfprintf_r+0x144a>
   1787a:	003a      	movs	r2, r7
   1787c:	9906      	ldr	r1, [sp, #24]
   1787e:	9809      	ldr	r0, [sp, #36]	; 0x24
   17880:	f004 faee 	bl	1be60 <__ssprint_r>
   17884:	2800      	cmp	r0, #0
   17886:	d001      	beq.n	1788c <_svfprintf_r+0x1474>
   17888:	f7fe fe4d 	bl	16526 <_svfprintf_r+0x10e>
   1788c:	68b9      	ldr	r1, [r7, #8]
   1788e:	687b      	ldr	r3, [r7, #4]
   17890:	aa32      	add	r2, sp, #200	; 0xc8
   17892:	e7e7      	b.n	17864 <_svfprintf_r+0x144c>
   17894:	003a      	movs	r2, r7
   17896:	9906      	ldr	r1, [sp, #24]
   17898:	9809      	ldr	r0, [sp, #36]	; 0x24
   1789a:	f004 fae1 	bl	1be60 <__ssprint_r>
   1789e:	2800      	cmp	r0, #0
   178a0:	d001      	beq.n	178a6 <_svfprintf_r+0x148e>
   178a2:	f7fe fe40 	bl	16526 <_svfprintf_r+0x10e>
   178a6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   178a8:	68b9      	ldr	r1, [r7, #8]
   178aa:	687b      	ldr	r3, [r7, #4]
   178ac:	aa32      	add	r2, sp, #200	; 0xc8
   178ae:	e600      	b.n	174b2 <_svfprintf_r+0x109a>
   178b0:	9a18      	ldr	r2, [sp, #96]	; 0x60
   178b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   178b4:	4694      	mov	ip, r2
   178b6:	4463      	add	r3, ip
   178b8:	001a      	movs	r2, r3
   178ba:	930e      	str	r3, [sp, #56]	; 0x38
   178bc:	e78a      	b.n	177d4 <_svfprintf_r+0x13bc>
   178be:	212e      	movs	r1, #46	; 0x2e
   178c0:	2330      	movs	r3, #48	; 0x30
   178c2:	aa16      	add	r2, sp, #88	; 0x58
   178c4:	1852      	adds	r2, r2, r1
   178c6:	7013      	strb	r3, [r2, #0]
   178c8:	002b      	movs	r3, r5
   178ca:	aa16      	add	r2, sp, #88	; 0x58
   178cc:	3101      	adds	r1, #1
   178ce:	3330      	adds	r3, #48	; 0x30
   178d0:	1852      	adds	r2, r2, r1
   178d2:	7013      	strb	r3, [r2, #0]
   178d4:	ab22      	add	r3, sp, #136	; 0x88
   178d6:	e6e2      	b.n	1769e <_svfprintf_r+0x1286>
   178d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   178da:	e585      	b.n	173e8 <_svfprintf_r+0xfd0>
   178dc:	46a9      	mov	r9, r5
   178de:	4648      	mov	r0, r9
   178e0:	1909      	adds	r1, r1, r4
   178e2:	3301      	adds	r3, #1
   178e4:	6010      	str	r0, [r2, #0]
   178e6:	6054      	str	r4, [r2, #4]
   178e8:	60b9      	str	r1, [r7, #8]
   178ea:	3208      	adds	r2, #8
   178ec:	607b      	str	r3, [r7, #4]
   178ee:	2b07      	cmp	r3, #7
   178f0:	dc00      	bgt.n	178f4 <_svfprintf_r+0x14dc>
   178f2:	e5e1      	b.n	174b8 <_svfprintf_r+0x10a0>
   178f4:	003a      	movs	r2, r7
   178f6:	9906      	ldr	r1, [sp, #24]
   178f8:	9809      	ldr	r0, [sp, #36]	; 0x24
   178fa:	f004 fab1 	bl	1be60 <__ssprint_r>
   178fe:	2800      	cmp	r0, #0
   17900:	d001      	beq.n	17906 <_svfprintf_r+0x14ee>
   17902:	f7fe fe10 	bl	16526 <_svfprintf_r+0x10e>
   17906:	68b9      	ldr	r1, [r7, #8]
   17908:	687b      	ldr	r3, [r7, #4]
   1790a:	aa32      	add	r2, sp, #200	; 0xc8
   1790c:	e5d4      	b.n	174b8 <_svfprintf_r+0x10a0>
   1790e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   17910:	2b00      	cmp	r3, #0
   17912:	db38      	blt.n	17986 <_svfprintf_r+0x156e>
   17914:	ab16      	add	r3, sp, #88	; 0x58
   17916:	7fdb      	ldrb	r3, [r3, #31]
   17918:	4698      	mov	r8, r3
   1791a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1791c:	2b47      	cmp	r3, #71	; 0x47
   1791e:	dc2e      	bgt.n	1797e <_svfprintf_r+0x1566>
   17920:	4b3d      	ldr	r3, [pc, #244]	; (17a18 <_svfprintf_r+0x1600>)
   17922:	9311      	str	r3, [sp, #68]	; 0x44
   17924:	f7fe ff23 	bl	1676e <_svfprintf_r+0x356>
   17928:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1792a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1792c:	4694      	mov	ip, r2
   1792e:	4463      	add	r3, ip
   17930:	4453      	add	r3, sl
   17932:	001a      	movs	r2, r3
   17934:	930e      	str	r3, [sp, #56]	; 0x38
   17936:	43db      	mvns	r3, r3
   17938:	17db      	asrs	r3, r3, #31
   1793a:	401a      	ands	r2, r3
   1793c:	9207      	str	r2, [sp, #28]
   1793e:	e575      	b.n	1742c <_svfprintf_r+0x1014>
   17940:	2301      	movs	r3, #1
   17942:	4023      	ands	r3, r4
   17944:	9313      	str	r3, [sp, #76]	; 0x4c
   17946:	d000      	beq.n	1794a <_svfprintf_r+0x1532>
   17948:	e6b4      	b.n	176b4 <_svfprintf_r+0x129c>
   1794a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1794c:	43d3      	mvns	r3, r2
   1794e:	17db      	asrs	r3, r3, #31
   17950:	401a      	ands	r2, r3
   17952:	9207      	str	r2, [sp, #28]
   17954:	e56a      	b.n	1742c <_svfprintf_r+0x1014>
   17956:	4a2f      	ldr	r2, [pc, #188]	; (17a14 <_svfprintf_r+0x15fc>)
   17958:	687b      	ldr	r3, [r7, #4]
   1795a:	4691      	mov	r9, r2
   1795c:	e42d      	b.n	171ba <_svfprintf_r+0xda2>
   1795e:	2301      	movs	r3, #1
   17960:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17962:	391b      	subs	r1, #27
   17964:	1a9d      	subs	r5, r3, r2
   17966:	aa16      	add	r2, sp, #88	; 0x58
   17968:	332c      	adds	r3, #44	; 0x2c
   1796a:	1852      	adds	r2, r2, r1
   1796c:	7013      	strb	r3, [r2, #0]
   1796e:	e656      	b.n	1761e <_svfprintf_r+0x1206>
   17970:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   17972:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   17974:	1a98      	subs	r0, r3, r2
   17976:	1c43      	adds	r3, r0, #1
   17978:	001a      	movs	r2, r3
   1797a:	930e      	str	r3, [sp, #56]	; 0x38
   1797c:	e72a      	b.n	177d4 <_svfprintf_r+0x13bc>
   1797e:	4b27      	ldr	r3, [pc, #156]	; (17a1c <_svfprintf_r+0x1604>)
   17980:	9311      	str	r3, [sp, #68]	; 0x44
   17982:	f7fe fef4 	bl	1676e <_svfprintf_r+0x356>
   17986:	232d      	movs	r3, #45	; 0x2d
   17988:	aa16      	add	r2, sp, #88	; 0x58
   1798a:	77d3      	strb	r3, [r2, #31]
   1798c:	4698      	mov	r8, r3
   1798e:	e7c4      	b.n	1791a <_svfprintf_r+0x1502>
   17990:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17992:	1d1a      	adds	r2, r3, #4
   17994:	681b      	ldr	r3, [r3, #0]
   17996:	469a      	mov	sl, r3
   17998:	2b00      	cmp	r3, #0
   1799a:	db36      	blt.n	17a0a <_svfprintf_r+0x15f2>
   1799c:	784b      	ldrb	r3, [r1, #1]
   1799e:	920f      	str	r2, [sp, #60]	; 0x3c
   179a0:	4659      	mov	r1, fp
   179a2:	f7fe fd9d 	bl	164e0 <_svfprintf_r+0xc8>
   179a6:	4653      	mov	r3, sl
   179a8:	2b00      	cmp	r3, #0
   179aa:	d101      	bne.n	179b0 <_svfprintf_r+0x1598>
   179ac:	07e3      	lsls	r3, r4, #31
   179ae:	d503      	bpl.n	179b8 <_svfprintf_r+0x15a0>
   179b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   179b2:	1c58      	adds	r0, r3, #1
   179b4:	0003      	movs	r3, r0
   179b6:	e7bb      	b.n	17930 <_svfprintf_r+0x1518>
   179b8:	2301      	movs	r3, #1
   179ba:	e725      	b.n	17808 <_svfprintf_r+0x13f0>
   179bc:	ab16      	add	r3, sp, #88	; 0x58
   179be:	77d8      	strb	r0, [r3, #31]
   179c0:	f7fe ff6c 	bl	1689c <_svfprintf_r+0x484>
   179c4:	ab16      	add	r3, sp, #88	; 0x58
   179c6:	77d8      	strb	r0, [r3, #31]
   179c8:	f7ff f814 	bl	169f4 <_svfprintf_r+0x5dc>
   179cc:	230c      	movs	r3, #12
   179ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   179d0:	6013      	str	r3, [r2, #0]
   179d2:	3b0d      	subs	r3, #13
   179d4:	930a      	str	r3, [sp, #40]	; 0x28
   179d6:	f7fe fdac 	bl	16532 <_svfprintf_r+0x11a>
   179da:	aa16      	add	r2, sp, #88	; 0x58
   179dc:	232e      	movs	r3, #46	; 0x2e
   179de:	4694      	mov	ip, r2
   179e0:	4463      	add	r3, ip
   179e2:	e65c      	b.n	1769e <_svfprintf_r+0x1286>
   179e4:	ab16      	add	r3, sp, #88	; 0x58
   179e6:	77d8      	strb	r0, [r3, #31]
   179e8:	f7fe fe85 	bl	166f6 <_svfprintf_r+0x2de>
   179ec:	ab16      	add	r3, sp, #88	; 0x58
   179ee:	77d8      	strb	r0, [r3, #31]
   179f0:	f7fe fddd 	bl	165ae <_svfprintf_r+0x196>
   179f4:	ab16      	add	r3, sp, #88	; 0x58
   179f6:	77d8      	strb	r0, [r3, #31]
   179f8:	f7ff f87d 	bl	16af6 <_svfprintf_r+0x6de>
   179fc:	4805      	ldr	r0, [pc, #20]	; (17a14 <_svfprintf_r+0x15fc>)
   179fe:	4681      	mov	r9, r0
   17a00:	e76d      	b.n	178de <_svfprintf_r+0x14c6>
   17a02:	ab16      	add	r3, sp, #88	; 0x58
   17a04:	77d8      	strb	r0, [r3, #31]
   17a06:	f7fe ff79 	bl	168fc <_svfprintf_r+0x4e4>
   17a0a:	2301      	movs	r3, #1
   17a0c:	425b      	negs	r3, r3
   17a0e:	469a      	mov	sl, r3
   17a10:	e7c4      	b.n	1799c <_svfprintf_r+0x1584>
   17a12:	46c0      	nop			; (mov r8, r8)
   17a14:	0001e094 	.word	0x0001e094
   17a18:	0001e04c 	.word	0x0001e04c
   17a1c:	0001e050 	.word	0x0001e050

00017a20 <_vfprintf_r>:
   17a20:	b5f0      	push	{r4, r5, r6, r7, lr}
   17a22:	46de      	mov	lr, fp
   17a24:	464e      	mov	r6, r9
   17a26:	4645      	mov	r5, r8
   17a28:	4657      	mov	r7, sl
   17a2a:	b5e0      	push	{r5, r6, r7, lr}
   17a2c:	b0c3      	sub	sp, #268	; 0x10c
   17a2e:	4689      	mov	r9, r1
   17a30:	0014      	movs	r4, r2
   17a32:	001d      	movs	r5, r3
   17a34:	930f      	str	r3, [sp, #60]	; 0x3c
   17a36:	0006      	movs	r6, r0
   17a38:	9006      	str	r0, [sp, #24]
   17a3a:	f003 f8bf 	bl	1abbc <_localeconv_r>
   17a3e:	6803      	ldr	r3, [r0, #0]
   17a40:	0018      	movs	r0, r3
   17a42:	9318      	str	r3, [sp, #96]	; 0x60
   17a44:	f7fe fcb6 	bl	163b4 <strlen>
   17a48:	9017      	str	r0, [sp, #92]	; 0x5c
   17a4a:	2e00      	cmp	r6, #0
   17a4c:	d004      	beq.n	17a58 <_vfprintf_r+0x38>
   17a4e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
   17a50:	9307      	str	r3, [sp, #28]
   17a52:	2b00      	cmp	r3, #0
   17a54:	d100      	bne.n	17a58 <_vfprintf_r+0x38>
   17a56:	e0a7      	b.n	17ba8 <_vfprintf_r+0x188>
   17a58:	464b      	mov	r3, r9
   17a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17a5c:	07db      	lsls	r3, r3, #31
   17a5e:	d478      	bmi.n	17b52 <_vfprintf_r+0x132>
   17a60:	464b      	mov	r3, r9
   17a62:	210c      	movs	r1, #12
   17a64:	5e59      	ldrsh	r1, [r3, r1]
   17a66:	b28b      	uxth	r3, r1
   17a68:	059a      	lsls	r2, r3, #22
   17a6a:	d56e      	bpl.n	17b4a <_vfprintf_r+0x12a>
   17a6c:	2280      	movs	r2, #128	; 0x80
   17a6e:	0192      	lsls	r2, r2, #6
   17a70:	4213      	tst	r3, r2
   17a72:	d109      	bne.n	17a88 <_vfprintf_r+0x68>
   17a74:	430a      	orrs	r2, r1
   17a76:	464b      	mov	r3, r9
   17a78:	4649      	mov	r1, r9
   17a7a:	819a      	strh	r2, [r3, #12]
   17a7c:	6e49      	ldr	r1, [r1, #100]	; 0x64
   17a7e:	4bcc      	ldr	r3, [pc, #816]	; (17db0 <_vfprintf_r+0x390>)
   17a80:	400b      	ands	r3, r1
   17a82:	4649      	mov	r1, r9
   17a84:	664b      	str	r3, [r1, #100]	; 0x64
   17a86:	b293      	uxth	r3, r2
   17a88:	071a      	lsls	r2, r3, #28
   17a8a:	d567      	bpl.n	17b5c <_vfprintf_r+0x13c>
   17a8c:	464a      	mov	r2, r9
   17a8e:	6912      	ldr	r2, [r2, #16]
   17a90:	2a00      	cmp	r2, #0
   17a92:	d063      	beq.n	17b5c <_vfprintf_r+0x13c>
   17a94:	221a      	movs	r2, #26
   17a96:	401a      	ands	r2, r3
   17a98:	2a0a      	cmp	r2, #10
   17a9a:	d100      	bne.n	17a9e <_vfprintf_r+0x7e>
   17a9c:	e088      	b.n	17bb0 <_vfprintf_r+0x190>
   17a9e:	ab32      	add	r3, sp, #200	; 0xc8
   17aa0:	9325      	str	r3, [sp, #148]	; 0x94
   17aa2:	2300      	movs	r3, #0
   17aa4:	46cb      	mov	fp, r9
   17aa6:	af25      	add	r7, sp, #148	; 0x94
   17aa8:	60bb      	str	r3, [r7, #8]
   17aaa:	607b      	str	r3, [r7, #4]
   17aac:	9407      	str	r4, [sp, #28]
   17aae:	9314      	str	r3, [sp, #80]	; 0x50
   17ab0:	9316      	str	r3, [sp, #88]	; 0x58
   17ab2:	9315      	str	r3, [sp, #84]	; 0x54
   17ab4:	ae32      	add	r6, sp, #200	; 0xc8
   17ab6:	9319      	str	r3, [sp, #100]	; 0x64
   17ab8:	931a      	str	r3, [sp, #104]	; 0x68
   17aba:	930a      	str	r3, [sp, #40]	; 0x28
   17abc:	9c07      	ldr	r4, [sp, #28]
   17abe:	7823      	ldrb	r3, [r4, #0]
   17ac0:	2b00      	cmp	r3, #0
   17ac2:	d101      	bne.n	17ac8 <_vfprintf_r+0xa8>
   17ac4:	f000 fd9e 	bl	18604 <_vfprintf_r+0xbe4>
   17ac8:	2b25      	cmp	r3, #37	; 0x25
   17aca:	d103      	bne.n	17ad4 <_vfprintf_r+0xb4>
   17acc:	f000 fd9a 	bl	18604 <_vfprintf_r+0xbe4>
   17ad0:	2b25      	cmp	r3, #37	; 0x25
   17ad2:	d003      	beq.n	17adc <_vfprintf_r+0xbc>
   17ad4:	3401      	adds	r4, #1
   17ad6:	7823      	ldrb	r3, [r4, #0]
   17ad8:	2b00      	cmp	r3, #0
   17ada:	d1f9      	bne.n	17ad0 <_vfprintf_r+0xb0>
   17adc:	9b07      	ldr	r3, [sp, #28]
   17ade:	1ae5      	subs	r5, r4, r3
   17ae0:	d010      	beq.n	17b04 <_vfprintf_r+0xe4>
   17ae2:	9b07      	ldr	r3, [sp, #28]
   17ae4:	6075      	str	r5, [r6, #4]
   17ae6:	6033      	str	r3, [r6, #0]
   17ae8:	68bb      	ldr	r3, [r7, #8]
   17aea:	195b      	adds	r3, r3, r5
   17aec:	60bb      	str	r3, [r7, #8]
   17aee:	687b      	ldr	r3, [r7, #4]
   17af0:	3301      	adds	r3, #1
   17af2:	607b      	str	r3, [r7, #4]
   17af4:	2b07      	cmp	r3, #7
   17af6:	dc4c      	bgt.n	17b92 <_vfprintf_r+0x172>
   17af8:	3608      	adds	r6, #8
   17afa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   17afc:	469c      	mov	ip, r3
   17afe:	44ac      	add	ip, r5
   17b00:	4663      	mov	r3, ip
   17b02:	930a      	str	r3, [sp, #40]	; 0x28
   17b04:	7823      	ldrb	r3, [r4, #0]
   17b06:	2b00      	cmp	r3, #0
   17b08:	d101      	bne.n	17b0e <_vfprintf_r+0xee>
   17b0a:	f000 fc99 	bl	18440 <_vfprintf_r+0xa20>
   17b0e:	1c63      	adds	r3, r4, #1
   17b10:	9307      	str	r3, [sp, #28]
   17b12:	2300      	movs	r3, #0
   17b14:	aa16      	add	r2, sp, #88	; 0x58
   17b16:	77d3      	strb	r3, [r2, #31]
   17b18:	2201      	movs	r2, #1
   17b1a:	4252      	negs	r2, r2
   17b1c:	4692      	mov	sl, r2
   17b1e:	2200      	movs	r2, #0
   17b20:	920b      	str	r2, [sp, #44]	; 0x2c
   17b22:	3220      	adds	r2, #32
   17b24:	4691      	mov	r9, r2
   17b26:	3220      	adds	r2, #32
   17b28:	7863      	ldrb	r3, [r4, #1]
   17b2a:	2100      	movs	r1, #0
   17b2c:	2000      	movs	r0, #0
   17b2e:	2400      	movs	r4, #0
   17b30:	4694      	mov	ip, r2
   17b32:	9a07      	ldr	r2, [sp, #28]
   17b34:	3201      	adds	r2, #1
   17b36:	9207      	str	r2, [sp, #28]
   17b38:	001a      	movs	r2, r3
   17b3a:	3a20      	subs	r2, #32
   17b3c:	2a58      	cmp	r2, #88	; 0x58
   17b3e:	d900      	bls.n	17b42 <_vfprintf_r+0x122>
   17b40:	e2e7      	b.n	18112 <_vfprintf_r+0x6f2>
   17b42:	4d9c      	ldr	r5, [pc, #624]	; (17db4 <_vfprintf_r+0x394>)
   17b44:	0092      	lsls	r2, r2, #2
   17b46:	58aa      	ldr	r2, [r5, r2]
   17b48:	4697      	mov	pc, r2
   17b4a:	464b      	mov	r3, r9
   17b4c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   17b4e:	f003 f847 	bl	1abe0 <__retarget_lock_acquire_recursive>
   17b52:	464b      	mov	r3, r9
   17b54:	210c      	movs	r1, #12
   17b56:	5e59      	ldrsh	r1, [r3, r1]
   17b58:	b28b      	uxth	r3, r1
   17b5a:	e787      	b.n	17a6c <_vfprintf_r+0x4c>
   17b5c:	4649      	mov	r1, r9
   17b5e:	9806      	ldr	r0, [sp, #24]
   17b60:	f001 fb0e 	bl	19180 <__swsetup_r>
   17b64:	464b      	mov	r3, r9
   17b66:	2800      	cmp	r0, #0
   17b68:	d03a      	beq.n	17be0 <_vfprintf_r+0x1c0>
   17b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   17b6c:	07db      	lsls	r3, r3, #31
   17b6e:	d405      	bmi.n	17b7c <_vfprintf_r+0x15c>
   17b70:	464b      	mov	r3, r9
   17b72:	899b      	ldrh	r3, [r3, #12]
   17b74:	059b      	lsls	r3, r3, #22
   17b76:	d401      	bmi.n	17b7c <_vfprintf_r+0x15c>
   17b78:	f000 ffcf 	bl	18b1a <_vfprintf_r+0x10fa>
   17b7c:	2301      	movs	r3, #1
   17b7e:	425b      	negs	r3, r3
   17b80:	930a      	str	r3, [sp, #40]	; 0x28
   17b82:	980a      	ldr	r0, [sp, #40]	; 0x28
   17b84:	b043      	add	sp, #268	; 0x10c
   17b86:	bc3c      	pop	{r2, r3, r4, r5}
   17b88:	4690      	mov	r8, r2
   17b8a:	4699      	mov	r9, r3
   17b8c:	46a2      	mov	sl, r4
   17b8e:	46ab      	mov	fp, r5
   17b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17b92:	003a      	movs	r2, r7
   17b94:	4659      	mov	r1, fp
   17b96:	9806      	ldr	r0, [sp, #24]
   17b98:	f004 fa34 	bl	1c004 <__sprint_r>
   17b9c:	2800      	cmp	r0, #0
   17b9e:	d001      	beq.n	17ba4 <_vfprintf_r+0x184>
   17ba0:	f000 fcce 	bl	18540 <_vfprintf_r+0xb20>
   17ba4:	ae32      	add	r6, sp, #200	; 0xc8
   17ba6:	e7a8      	b.n	17afa <_vfprintf_r+0xda>
   17ba8:	9806      	ldr	r0, [sp, #24]
   17baa:	f002 fcd7 	bl	1a55c <__sinit>
   17bae:	e753      	b.n	17a58 <_vfprintf_r+0x38>
   17bb0:	464a      	mov	r2, r9
   17bb2:	210e      	movs	r1, #14
   17bb4:	5e52      	ldrsh	r2, [r2, r1]
   17bb6:	2a00      	cmp	r2, #0
   17bb8:	da00      	bge.n	17bbc <_vfprintf_r+0x19c>
   17bba:	e770      	b.n	17a9e <_vfprintf_r+0x7e>
   17bbc:	464a      	mov	r2, r9
   17bbe:	6e52      	ldr	r2, [r2, #100]	; 0x64
   17bc0:	07d2      	lsls	r2, r2, #31
   17bc2:	d405      	bmi.n	17bd0 <_vfprintf_r+0x1b0>
   17bc4:	059b      	lsls	r3, r3, #22
   17bc6:	d403      	bmi.n	17bd0 <_vfprintf_r+0x1b0>
   17bc8:	464b      	mov	r3, r9
   17bca:	6d98      	ldr	r0, [r3, #88]	; 0x58
   17bcc:	f003 f80a 	bl	1abe4 <__retarget_lock_release_recursive>
   17bd0:	002b      	movs	r3, r5
   17bd2:	0022      	movs	r2, r4
   17bd4:	4649      	mov	r1, r9
   17bd6:	9806      	ldr	r0, [sp, #24]
   17bd8:	f001 fa8e 	bl	190f8 <__sbprintf>
   17bdc:	900a      	str	r0, [sp, #40]	; 0x28
   17bde:	e7d0      	b.n	17b82 <_vfprintf_r+0x162>
   17be0:	899b      	ldrh	r3, [r3, #12]
   17be2:	e757      	b.n	17a94 <_vfprintf_r+0x74>
   17be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17be6:	920f      	str	r2, [sp, #60]	; 0x3c
   17be8:	425b      	negs	r3, r3
   17bea:	930b      	str	r3, [sp, #44]	; 0x2c
   17bec:	2304      	movs	r3, #4
   17bee:	431c      	orrs	r4, r3
   17bf0:	9b07      	ldr	r3, [sp, #28]
   17bf2:	781b      	ldrb	r3, [r3, #0]
   17bf4:	e79d      	b.n	17b32 <_vfprintf_r+0x112>
   17bf6:	9b07      	ldr	r3, [sp, #28]
   17bf8:	2101      	movs	r1, #1
   17bfa:	781b      	ldrb	r3, [r3, #0]
   17bfc:	202b      	movs	r0, #43	; 0x2b
   17bfe:	e798      	b.n	17b32 <_vfprintf_r+0x112>
   17c00:	9b07      	ldr	r3, [sp, #28]
   17c02:	1c5a      	adds	r2, r3, #1
   17c04:	781b      	ldrb	r3, [r3, #0]
   17c06:	4690      	mov	r8, r2
   17c08:	2b2a      	cmp	r3, #42	; 0x2a
   17c0a:	d101      	bne.n	17c10 <_vfprintf_r+0x1f0>
   17c0c:	f001 fa38 	bl	19080 <_vfprintf_r+0x1660>
   17c10:	001a      	movs	r2, r3
   17c12:	2500      	movs	r5, #0
   17c14:	3a30      	subs	r2, #48	; 0x30
   17c16:	46aa      	mov	sl, r5
   17c18:	2a09      	cmp	r2, #9
   17c1a:	d901      	bls.n	17c20 <_vfprintf_r+0x200>
   17c1c:	f001 f96d 	bl	18efa <_vfprintf_r+0x14da>
   17c20:	0025      	movs	r5, r4
   17c22:	4643      	mov	r3, r8
   17c24:	4654      	mov	r4, sl
   17c26:	4688      	mov	r8, r1
   17c28:	4682      	mov	sl, r0
   17c2a:	00a1      	lsls	r1, r4, #2
   17c2c:	190c      	adds	r4, r1, r4
   17c2e:	7818      	ldrb	r0, [r3, #0]
   17c30:	0064      	lsls	r4, r4, #1
   17c32:	18a4      	adds	r4, r4, r2
   17c34:	0002      	movs	r2, r0
   17c36:	1c59      	adds	r1, r3, #1
   17c38:	3a30      	subs	r2, #48	; 0x30
   17c3a:	000b      	movs	r3, r1
   17c3c:	2a09      	cmp	r2, #9
   17c3e:	d9f4      	bls.n	17c2a <_vfprintf_r+0x20a>
   17c40:	9107      	str	r1, [sp, #28]
   17c42:	0003      	movs	r3, r0
   17c44:	4641      	mov	r1, r8
   17c46:	4650      	mov	r0, sl
   17c48:	46a2      	mov	sl, r4
   17c4a:	002c      	movs	r4, r5
   17c4c:	e774      	b.n	17b38 <_vfprintf_r+0x118>
   17c4e:	9312      	str	r3, [sp, #72]	; 0x48
   17c50:	2900      	cmp	r1, #0
   17c52:	d001      	beq.n	17c58 <_vfprintf_r+0x238>
   17c54:	f001 fa2e 	bl	190b4 <_vfprintf_r+0x1694>
   17c58:	4b57      	ldr	r3, [pc, #348]	; (17db8 <_vfprintf_r+0x398>)
   17c5a:	9319      	str	r3, [sp, #100]	; 0x64
   17c5c:	06a3      	lsls	r3, r4, #26
   17c5e:	d501      	bpl.n	17c64 <_vfprintf_r+0x244>
   17c60:	f000 fe9a 	bl	18998 <_vfprintf_r+0xf78>
   17c64:	06e3      	lsls	r3, r4, #27
   17c66:	d501      	bpl.n	17c6c <_vfprintf_r+0x24c>
   17c68:	f000 fd9a 	bl	187a0 <_vfprintf_r+0xd80>
   17c6c:	0663      	lsls	r3, r4, #25
   17c6e:	d401      	bmi.n	17c74 <_vfprintf_r+0x254>
   17c70:	f000 fd96 	bl	187a0 <_vfprintf_r+0xd80>
   17c74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17c76:	881a      	ldrh	r2, [r3, #0]
   17c78:	920c      	str	r2, [sp, #48]	; 0x30
   17c7a:	2200      	movs	r2, #0
   17c7c:	3304      	adds	r3, #4
   17c7e:	920d      	str	r2, [sp, #52]	; 0x34
   17c80:	930f      	str	r3, [sp, #60]	; 0x3c
   17c82:	07e3      	lsls	r3, r4, #31
   17c84:	d401      	bmi.n	17c8a <_vfprintf_r+0x26a>
   17c86:	f000 fd76 	bl	18776 <_vfprintf_r+0xd56>
   17c8a:	990c      	ldr	r1, [sp, #48]	; 0x30
   17c8c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17c8e:	000b      	movs	r3, r1
   17c90:	4313      	orrs	r3, r2
   17c92:	001a      	movs	r2, r3
   17c94:	2302      	movs	r3, #2
   17c96:	2a00      	cmp	r2, #0
   17c98:	d008      	beq.n	17cac <_vfprintf_r+0x28c>
   17c9a:	2030      	movs	r0, #48	; 0x30
   17c9c:	a91e      	add	r1, sp, #120	; 0x78
   17c9e:	7008      	strb	r0, [r1, #0]
   17ca0:	2548      	movs	r5, #72	; 0x48
   17ca2:	4668      	mov	r0, sp
   17ca4:	1940      	adds	r0, r0, r5
   17ca6:	7800      	ldrb	r0, [r0, #0]
   17ca8:	431c      	orrs	r4, r3
   17caa:	7048      	strb	r0, [r1, #1]
   17cac:	2100      	movs	r1, #0
   17cae:	4688      	mov	r8, r1
   17cb0:	a816      	add	r0, sp, #88	; 0x58
   17cb2:	77c1      	strb	r1, [r0, #31]
   17cb4:	4651      	mov	r1, sl
   17cb6:	3101      	adds	r1, #1
   17cb8:	d100      	bne.n	17cbc <_vfprintf_r+0x29c>
   17cba:	e0e6      	b.n	17e8a <_vfprintf_r+0x46a>
   17cbc:	2180      	movs	r1, #128	; 0x80
   17cbe:	0020      	movs	r0, r4
   17cc0:	4388      	bics	r0, r1
   17cc2:	9009      	str	r0, [sp, #36]	; 0x24
   17cc4:	2a00      	cmp	r2, #0
   17cc6:	d000      	beq.n	17cca <_vfprintf_r+0x2aa>
   17cc8:	e0e3      	b.n	17e92 <_vfprintf_r+0x472>
   17cca:	4652      	mov	r2, sl
   17ccc:	2a00      	cmp	r2, #0
   17cce:	d001      	beq.n	17cd4 <_vfprintf_r+0x2b4>
   17cd0:	f000 fc38 	bl	18544 <_vfprintf_r+0xb24>
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	d001      	beq.n	17cdc <_vfprintf_r+0x2bc>
   17cd8:	f000 fd0c 	bl	186f4 <_vfprintf_r+0xcd4>
   17cdc:	2001      	movs	r0, #1
   17cde:	ab32      	add	r3, sp, #200	; 0xc8
   17ce0:	4020      	ands	r0, r4
   17ce2:	900e      	str	r0, [sp, #56]	; 0x38
   17ce4:	9311      	str	r3, [sp, #68]	; 0x44
   17ce6:	d008      	beq.n	17cfa <_vfprintf_r+0x2da>
   17ce8:	2327      	movs	r3, #39	; 0x27
   17cea:	2130      	movs	r1, #48	; 0x30
   17cec:	aa28      	add	r2, sp, #160	; 0xa0
   17cee:	54d1      	strb	r1, [r2, r3]
   17cf0:	aa16      	add	r2, sp, #88	; 0x58
   17cf2:	4694      	mov	ip, r2
   17cf4:	3348      	adds	r3, #72	; 0x48
   17cf6:	4463      	add	r3, ip
   17cf8:	9311      	str	r3, [sp, #68]	; 0x44
   17cfa:	4653      	mov	r3, sl
   17cfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   17cfe:	9308      	str	r3, [sp, #32]
   17d00:	4592      	cmp	sl, r2
   17d02:	da00      	bge.n	17d06 <_vfprintf_r+0x2e6>
   17d04:	9208      	str	r2, [sp, #32]
   17d06:	2300      	movs	r3, #0
   17d08:	9313      	str	r3, [sp, #76]	; 0x4c
   17d0a:	4643      	mov	r3, r8
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	d002      	beq.n	17d16 <_vfprintf_r+0x2f6>
   17d10:	9b08      	ldr	r3, [sp, #32]
   17d12:	3301      	adds	r3, #1
   17d14:	9308      	str	r3, [sp, #32]
   17d16:	2302      	movs	r3, #2
   17d18:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17d1a:	401a      	ands	r2, r3
   17d1c:	4691      	mov	r9, r2
   17d1e:	d002      	beq.n	17d26 <_vfprintf_r+0x306>
   17d20:	9b08      	ldr	r3, [sp, #32]
   17d22:	3302      	adds	r3, #2
   17d24:	9308      	str	r3, [sp, #32]
   17d26:	2384      	movs	r3, #132	; 0x84
   17d28:	9a09      	ldr	r2, [sp, #36]	; 0x24
   17d2a:	401a      	ands	r2, r3
   17d2c:	9210      	str	r2, [sp, #64]	; 0x40
   17d2e:	d000      	beq.n	17d32 <_vfprintf_r+0x312>
   17d30:	e207      	b.n	18142 <_vfprintf_r+0x722>
   17d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   17d34:	9a08      	ldr	r2, [sp, #32]
   17d36:	1a9c      	subs	r4, r3, r2
   17d38:	2c00      	cmp	r4, #0
   17d3a:	dc00      	bgt.n	17d3e <_vfprintf_r+0x31e>
   17d3c:	e201      	b.n	18142 <_vfprintf_r+0x722>
   17d3e:	491f      	ldr	r1, [pc, #124]	; (17dbc <_vfprintf_r+0x39c>)
   17d40:	68ba      	ldr	r2, [r7, #8]
   17d42:	687b      	ldr	r3, [r7, #4]
   17d44:	4688      	mov	r8, r1
   17d46:	2c10      	cmp	r4, #16
   17d48:	dd21      	ble.n	17d8e <_vfprintf_r+0x36e>
   17d4a:	0031      	movs	r1, r6
   17d4c:	2510      	movs	r5, #16
   17d4e:	465e      	mov	r6, fp
   17d50:	e003      	b.n	17d5a <_vfprintf_r+0x33a>
   17d52:	3c10      	subs	r4, #16
   17d54:	3108      	adds	r1, #8
   17d56:	2c10      	cmp	r4, #16
   17d58:	dd17      	ble.n	17d8a <_vfprintf_r+0x36a>
   17d5a:	4640      	mov	r0, r8
   17d5c:	3210      	adds	r2, #16
   17d5e:	3301      	adds	r3, #1
   17d60:	6008      	str	r0, [r1, #0]
   17d62:	604d      	str	r5, [r1, #4]
   17d64:	60ba      	str	r2, [r7, #8]
   17d66:	607b      	str	r3, [r7, #4]
   17d68:	2b07      	cmp	r3, #7
   17d6a:	ddf2      	ble.n	17d52 <_vfprintf_r+0x332>
   17d6c:	003a      	movs	r2, r7
   17d6e:	0031      	movs	r1, r6
   17d70:	9806      	ldr	r0, [sp, #24]
   17d72:	f004 f947 	bl	1c004 <__sprint_r>
   17d76:	2800      	cmp	r0, #0
   17d78:	d001      	beq.n	17d7e <_vfprintf_r+0x35e>
   17d7a:	f000 fccf 	bl	1871c <_vfprintf_r+0xcfc>
   17d7e:	3c10      	subs	r4, #16
   17d80:	68ba      	ldr	r2, [r7, #8]
   17d82:	687b      	ldr	r3, [r7, #4]
   17d84:	a932      	add	r1, sp, #200	; 0xc8
   17d86:	2c10      	cmp	r4, #16
   17d88:	dce7      	bgt.n	17d5a <_vfprintf_r+0x33a>
   17d8a:	46b3      	mov	fp, r6
   17d8c:	000e      	movs	r6, r1
   17d8e:	4641      	mov	r1, r8
   17d90:	6074      	str	r4, [r6, #4]
   17d92:	3301      	adds	r3, #1
   17d94:	18a4      	adds	r4, r4, r2
   17d96:	6031      	str	r1, [r6, #0]
   17d98:	60bc      	str	r4, [r7, #8]
   17d9a:	607b      	str	r3, [r7, #4]
   17d9c:	2b07      	cmp	r3, #7
   17d9e:	dd01      	ble.n	17da4 <_vfprintf_r+0x384>
   17da0:	f000 fcae 	bl	18700 <_vfprintf_r+0xce0>
   17da4:	ab16      	add	r3, sp, #88	; 0x58
   17da6:	7fdb      	ldrb	r3, [r3, #31]
   17da8:	3608      	adds	r6, #8
   17daa:	4698      	mov	r8, r3
   17dac:	e1ca      	b.n	18144 <_vfprintf_r+0x724>
   17dae:	46c0      	nop			; (mov r8, r8)
   17db0:	ffffdfff 	.word	0xffffdfff
   17db4:	0001e0a4 	.word	0x0001e0a4
   17db8:	0001e068 	.word	0x0001e068
   17dbc:	0001e208 	.word	0x0001e208
   17dc0:	2200      	movs	r2, #0
   17dc2:	9d07      	ldr	r5, [sp, #28]
   17dc4:	3b30      	subs	r3, #48	; 0x30
   17dc6:	46a8      	mov	r8, r5
   17dc8:	920b      	str	r2, [sp, #44]	; 0x2c
   17dca:	001a      	movs	r2, r3
   17dcc:	9408      	str	r4, [sp, #32]
   17dce:	002c      	movs	r4, r5
   17dd0:	4655      	mov	r5, sl
   17dd2:	4682      	mov	sl, r0
   17dd4:	4640      	mov	r0, r8
   17dd6:	4688      	mov	r8, r1
   17dd8:	0011      	movs	r1, r2
   17dda:	2200      	movs	r2, #0
   17ddc:	0093      	lsls	r3, r2, #2
   17dde:	189a      	adds	r2, r3, r2
   17de0:	7803      	ldrb	r3, [r0, #0]
   17de2:	0052      	lsls	r2, r2, #1
   17de4:	188a      	adds	r2, r1, r2
   17de6:	0019      	movs	r1, r3
   17de8:	3401      	adds	r4, #1
   17dea:	3930      	subs	r1, #48	; 0x30
   17dec:	0020      	movs	r0, r4
   17dee:	2909      	cmp	r1, #9
   17df0:	d9f4      	bls.n	17ddc <_vfprintf_r+0x3bc>
   17df2:	9407      	str	r4, [sp, #28]
   17df4:	4650      	mov	r0, sl
   17df6:	9c08      	ldr	r4, [sp, #32]
   17df8:	920b      	str	r2, [sp, #44]	; 0x2c
   17dfa:	4641      	mov	r1, r8
   17dfc:	46aa      	mov	sl, r5
   17dfe:	e69b      	b.n	17b38 <_vfprintf_r+0x118>
   17e00:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17e02:	9312      	str	r3, [sp, #72]	; 0x48
   17e04:	6813      	ldr	r3, [r2, #0]
   17e06:	2120      	movs	r1, #32
   17e08:	9308      	str	r3, [sp, #32]
   17e0a:	466b      	mov	r3, sp
   17e0c:	185b      	adds	r3, r3, r1
   17e0e:	781b      	ldrb	r3, [r3, #0]
   17e10:	ad28      	add	r5, sp, #160	; 0xa0
   17e12:	702b      	strb	r3, [r5, #0]
   17e14:	2300      	movs	r3, #0
   17e16:	a916      	add	r1, sp, #88	; 0x58
   17e18:	77cb      	strb	r3, [r1, #31]
   17e1a:	0013      	movs	r3, r2
   17e1c:	3304      	adds	r3, #4
   17e1e:	930f      	str	r3, [sp, #60]	; 0x3c
   17e20:	2300      	movs	r3, #0
   17e22:	9409      	str	r4, [sp, #36]	; 0x24
   17e24:	4698      	mov	r8, r3
   17e26:	3301      	adds	r3, #1
   17e28:	9308      	str	r3, [sp, #32]
   17e2a:	930e      	str	r3, [sp, #56]	; 0x38
   17e2c:	2300      	movs	r3, #0
   17e2e:	9511      	str	r5, [sp, #68]	; 0x44
   17e30:	469a      	mov	sl, r3
   17e32:	9313      	str	r3, [sp, #76]	; 0x4c
   17e34:	e76f      	b.n	17d16 <_vfprintf_r+0x2f6>
   17e36:	9312      	str	r3, [sp, #72]	; 0x48
   17e38:	2900      	cmp	r1, #0
   17e3a:	d001      	beq.n	17e40 <_vfprintf_r+0x420>
   17e3c:	f001 f94d 	bl	190da <_vfprintf_r+0x16ba>
   17e40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   17e42:	06a3      	lsls	r3, r4, #26
   17e44:	d501      	bpl.n	17e4a <_vfprintf_r+0x42a>
   17e46:	f000 fd5a 	bl	188fe <_vfprintf_r+0xede>
   17e4a:	06e3      	lsls	r3, r4, #27
   17e4c:	d501      	bpl.n	17e52 <_vfprintf_r+0x432>
   17e4e:	f000 fcab 	bl	187a8 <_vfprintf_r+0xd88>
   17e52:	0663      	lsls	r3, r4, #25
   17e54:	d401      	bmi.n	17e5a <_vfprintf_r+0x43a>
   17e56:	f000 fca7 	bl	187a8 <_vfprintf_r+0xd88>
   17e5a:	2100      	movs	r1, #0
   17e5c:	5e53      	ldrsh	r3, [r2, r1]
   17e5e:	930c      	str	r3, [sp, #48]	; 0x30
   17e60:	3204      	adds	r2, #4
   17e62:	17db      	asrs	r3, r3, #31
   17e64:	930d      	str	r3, [sp, #52]	; 0x34
   17e66:	920f      	str	r2, [sp, #60]	; 0x3c
   17e68:	2b00      	cmp	r3, #0
   17e6a:	da01      	bge.n	17e70 <_vfprintf_r+0x450>
   17e6c:	f000 fdb2 	bl	189d4 <_vfprintf_r+0xfb4>
   17e70:	990c      	ldr	r1, [sp, #48]	; 0x30
   17e72:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   17e74:	0008      	movs	r0, r1
   17e76:	4651      	mov	r1, sl
   17e78:	ab16      	add	r3, sp, #88	; 0x58
   17e7a:	7fdb      	ldrb	r3, [r3, #31]
   17e7c:	4310      	orrs	r0, r2
   17e7e:	4698      	mov	r8, r3
   17e80:	0002      	movs	r2, r0
   17e82:	2301      	movs	r3, #1
   17e84:	3101      	adds	r1, #1
   17e86:	d000      	beq.n	17e8a <_vfprintf_r+0x46a>
   17e88:	e718      	b.n	17cbc <_vfprintf_r+0x29c>
   17e8a:	2a00      	cmp	r2, #0
   17e8c:	d100      	bne.n	17e90 <_vfprintf_r+0x470>
   17e8e:	e35a      	b.n	18546 <_vfprintf_r+0xb26>
   17e90:	9409      	str	r4, [sp, #36]	; 0x24
   17e92:	2b01      	cmp	r3, #1
   17e94:	d101      	bne.n	17e9a <_vfprintf_r+0x47a>
   17e96:	f000 fc06 	bl	186a6 <_vfprintf_r+0xc86>
   17e9a:	2b02      	cmp	r3, #2
   17e9c:	d000      	beq.n	17ea0 <_vfprintf_r+0x480>
   17e9e:	e380      	b.n	185a2 <_vfprintf_r+0xb82>
   17ea0:	9c19      	ldr	r4, [sp, #100]	; 0x64
   17ea2:	200f      	movs	r0, #15
   17ea4:	46a1      	mov	r9, r4
   17ea6:	46b4      	mov	ip, r6
   17ea8:	ab32      	add	r3, sp, #200	; 0xc8
   17eaa:	0019      	movs	r1, r3
   17eac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17eae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   17eb0:	0004      	movs	r4, r0
   17eb2:	464d      	mov	r5, r9
   17eb4:	4014      	ands	r4, r2
   17eb6:	5d2c      	ldrb	r4, [r5, r4]
   17eb8:	071e      	lsls	r6, r3, #28
   17eba:	0915      	lsrs	r5, r2, #4
   17ebc:	3901      	subs	r1, #1
   17ebe:	432e      	orrs	r6, r5
   17ec0:	700c      	strb	r4, [r1, #0]
   17ec2:	091c      	lsrs	r4, r3, #4
   17ec4:	0023      	movs	r3, r4
   17ec6:	0034      	movs	r4, r6
   17ec8:	0032      	movs	r2, r6
   17eca:	431c      	orrs	r4, r3
   17ecc:	d1f0      	bne.n	17eb0 <_vfprintf_r+0x490>
   17ece:	920c      	str	r2, [sp, #48]	; 0x30
   17ed0:	930d      	str	r3, [sp, #52]	; 0x34
   17ed2:	ab32      	add	r3, sp, #200	; 0xc8
   17ed4:	1a5b      	subs	r3, r3, r1
   17ed6:	9111      	str	r1, [sp, #68]	; 0x44
   17ed8:	4666      	mov	r6, ip
   17eda:	930e      	str	r3, [sp, #56]	; 0x38
   17edc:	e70d      	b.n	17cfa <_vfprintf_r+0x2da>
   17ede:	4663      	mov	r3, ip
   17ee0:	431c      	orrs	r4, r3
   17ee2:	9b07      	ldr	r3, [sp, #28]
   17ee4:	781b      	ldrb	r3, [r3, #0]
   17ee6:	e624      	b.n	17b32 <_vfprintf_r+0x112>
   17ee8:	9b07      	ldr	r3, [sp, #28]
   17eea:	781b      	ldrb	r3, [r3, #0]
   17eec:	2b6c      	cmp	r3, #108	; 0x6c
   17eee:	d101      	bne.n	17ef4 <_vfprintf_r+0x4d4>
   17ef0:	f000 fe8c 	bl	18c0c <_vfprintf_r+0x11ec>
   17ef4:	2210      	movs	r2, #16
   17ef6:	4314      	orrs	r4, r2
   17ef8:	e61b      	b.n	17b32 <_vfprintf_r+0x112>
   17efa:	2900      	cmp	r1, #0
   17efc:	d001      	beq.n	17f02 <_vfprintf_r+0x4e2>
   17efe:	f001 f8d5 	bl	190ac <_vfprintf_r+0x168c>
   17f02:	06a3      	lsls	r3, r4, #26
   17f04:	d501      	bpl.n	17f0a <_vfprintf_r+0x4ea>
   17f06:	f000 fe76 	bl	18bf6 <_vfprintf_r+0x11d6>
   17f0a:	06e3      	lsls	r3, r4, #27
   17f0c:	d500      	bpl.n	17f10 <_vfprintf_r+0x4f0>
   17f0e:	e110      	b.n	18132 <_vfprintf_r+0x712>
   17f10:	0663      	lsls	r3, r4, #25
   17f12:	d400      	bmi.n	17f16 <_vfprintf_r+0x4f6>
   17f14:	e10d      	b.n	18132 <_vfprintf_r+0x712>
   17f16:	4669      	mov	r1, sp
   17f18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17f1a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
   17f1c:	681a      	ldr	r2, [r3, #0]
   17f1e:	3304      	adds	r3, #4
   17f20:	9208      	str	r2, [sp, #32]
   17f22:	8011      	strh	r1, [r2, #0]
   17f24:	930f      	str	r3, [sp, #60]	; 0x3c
   17f26:	e5c9      	b.n	17abc <_vfprintf_r+0x9c>
   17f28:	990f      	ldr	r1, [sp, #60]	; 0x3c
   17f2a:	2230      	movs	r2, #48	; 0x30
   17f2c:	680b      	ldr	r3, [r1, #0]
   17f2e:	930c      	str	r3, [sp, #48]	; 0x30
   17f30:	2300      	movs	r3, #0
   17f32:	930d      	str	r3, [sp, #52]	; 0x34
   17f34:	3302      	adds	r3, #2
   17f36:	431c      	orrs	r4, r3
   17f38:	ab1e      	add	r3, sp, #120	; 0x78
   17f3a:	701a      	strb	r2, [r3, #0]
   17f3c:	3248      	adds	r2, #72	; 0x48
   17f3e:	705a      	strb	r2, [r3, #1]
   17f40:	000b      	movs	r3, r1
   17f42:	3304      	adds	r3, #4
   17f44:	930f      	str	r3, [sp, #60]	; 0x3c
   17f46:	4bc1      	ldr	r3, [pc, #772]	; (1824c <_vfprintf_r+0x82c>)
   17f48:	9212      	str	r2, [sp, #72]	; 0x48
   17f4a:	9319      	str	r3, [sp, #100]	; 0x64
   17f4c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17f4e:	2302      	movs	r3, #2
   17f50:	e6ac      	b.n	17cac <_vfprintf_r+0x28c>
   17f52:	464b      	mov	r3, r9
   17f54:	431c      	orrs	r4, r3
   17f56:	9b07      	ldr	r3, [sp, #28]
   17f58:	781b      	ldrb	r3, [r3, #0]
   17f5a:	e5ea      	b.n	17b32 <_vfprintf_r+0x112>
   17f5c:	9312      	str	r3, [sp, #72]	; 0x48
   17f5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17f60:	a916      	add	r1, sp, #88	; 0x58
   17f62:	1d1d      	adds	r5, r3, #4
   17f64:	681b      	ldr	r3, [r3, #0]
   17f66:	001a      	movs	r2, r3
   17f68:	9311      	str	r3, [sp, #68]	; 0x44
   17f6a:	2300      	movs	r3, #0
   17f6c:	77cb      	strb	r3, [r1, #31]
   17f6e:	2a00      	cmp	r2, #0
   17f70:	d101      	bne.n	17f76 <_vfprintf_r+0x556>
   17f72:	f000 ff01 	bl	18d78 <_vfprintf_r+0x1358>
   17f76:	4653      	mov	r3, sl
   17f78:	3301      	adds	r3, #1
   17f7a:	d101      	bne.n	17f80 <_vfprintf_r+0x560>
   17f7c:	f000 fe64 	bl	18c48 <_vfprintf_r+0x1228>
   17f80:	4652      	mov	r2, sl
   17f82:	2100      	movs	r1, #0
   17f84:	9811      	ldr	r0, [sp, #68]	; 0x44
   17f86:	f003 f965 	bl	1b254 <memchr>
   17f8a:	2800      	cmp	r0, #0
   17f8c:	d101      	bne.n	17f92 <_vfprintf_r+0x572>
   17f8e:	f000 ff78 	bl	18e82 <_vfprintf_r+0x1462>
   17f92:	9b11      	ldr	r3, [sp, #68]	; 0x44
   17f94:	1ac3      	subs	r3, r0, r3
   17f96:	001a      	movs	r2, r3
   17f98:	930e      	str	r3, [sp, #56]	; 0x38
   17f9a:	43db      	mvns	r3, r3
   17f9c:	17db      	asrs	r3, r3, #31
   17f9e:	401a      	ands	r2, r3
   17fa0:	ab16      	add	r3, sp, #88	; 0x58
   17fa2:	7fdb      	ldrb	r3, [r3, #31]
   17fa4:	9208      	str	r2, [sp, #32]
   17fa6:	4698      	mov	r8, r3
   17fa8:	2300      	movs	r3, #0
   17faa:	950f      	str	r5, [sp, #60]	; 0x3c
   17fac:	9409      	str	r4, [sp, #36]	; 0x24
   17fae:	469a      	mov	sl, r3
   17fb0:	9313      	str	r3, [sp, #76]	; 0x4c
   17fb2:	e6aa      	b.n	17d0a <_vfprintf_r+0x2ea>
   17fb4:	2308      	movs	r3, #8
   17fb6:	431c      	orrs	r4, r3
   17fb8:	9b07      	ldr	r3, [sp, #28]
   17fba:	781b      	ldrb	r3, [r3, #0]
   17fbc:	e5b9      	b.n	17b32 <_vfprintf_r+0x112>
   17fbe:	9312      	str	r3, [sp, #72]	; 0x48
   17fc0:	2310      	movs	r3, #16
   17fc2:	431c      	orrs	r4, r3
   17fc4:	06a3      	lsls	r3, r4, #26
   17fc6:	d501      	bpl.n	17fcc <_vfprintf_r+0x5ac>
   17fc8:	f000 fca7 	bl	1891a <_vfprintf_r+0xefa>
   17fcc:	06e3      	lsls	r3, r4, #27
   17fce:	d500      	bpl.n	17fd2 <_vfprintf_r+0x5b2>
   17fd0:	e3ee      	b.n	187b0 <_vfprintf_r+0xd90>
   17fd2:	0663      	lsls	r3, r4, #25
   17fd4:	d400      	bmi.n	17fd8 <_vfprintf_r+0x5b8>
   17fd6:	e3eb      	b.n	187b0 <_vfprintf_r+0xd90>
   17fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   17fda:	881a      	ldrh	r2, [r3, #0]
   17fdc:	920c      	str	r2, [sp, #48]	; 0x30
   17fde:	2200      	movs	r2, #0
   17fe0:	3304      	adds	r3, #4
   17fe2:	920d      	str	r2, [sp, #52]	; 0x34
   17fe4:	930f      	str	r3, [sp, #60]	; 0x3c
   17fe6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   17fe8:	2300      	movs	r3, #0
   17fea:	e65f      	b.n	17cac <_vfprintf_r+0x28c>
   17fec:	9312      	str	r3, [sp, #72]	; 0x48
   17fee:	2310      	movs	r3, #16
   17ff0:	431c      	orrs	r4, r3
   17ff2:	06a3      	lsls	r3, r4, #26
   17ff4:	d501      	bpl.n	17ffa <_vfprintf_r+0x5da>
   17ff6:	f000 fcba 	bl	1896e <_vfprintf_r+0xf4e>
   17ffa:	06e3      	lsls	r3, r4, #27
   17ffc:	d500      	bpl.n	18000 <_vfprintf_r+0x5e0>
   17ffe:	e3da      	b.n	187b6 <_vfprintf_r+0xd96>
   18000:	0663      	lsls	r3, r4, #25
   18002:	d400      	bmi.n	18006 <_vfprintf_r+0x5e6>
   18004:	e3d7      	b.n	187b6 <_vfprintf_r+0xd96>
   18006:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18008:	881a      	ldrh	r2, [r3, #0]
   1800a:	920c      	str	r2, [sp, #48]	; 0x30
   1800c:	2200      	movs	r2, #0
   1800e:	3304      	adds	r3, #4
   18010:	920d      	str	r2, [sp, #52]	; 0x34
   18012:	930f      	str	r3, [sp, #60]	; 0x3c
   18014:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   18016:	2301      	movs	r3, #1
   18018:	e648      	b.n	17cac <_vfprintf_r+0x28c>
   1801a:	9312      	str	r3, [sp, #72]	; 0x48
   1801c:	2900      	cmp	r1, #0
   1801e:	d001      	beq.n	18024 <_vfprintf_r+0x604>
   18020:	f001 f857 	bl	190d2 <_vfprintf_r+0x16b2>
   18024:	4b8a      	ldr	r3, [pc, #552]	; (18250 <_vfprintf_r+0x830>)
   18026:	9319      	str	r3, [sp, #100]	; 0x64
   18028:	e618      	b.n	17c5c <_vfprintf_r+0x23c>
   1802a:	2301      	movs	r3, #1
   1802c:	431c      	orrs	r4, r3
   1802e:	9b07      	ldr	r3, [sp, #28]
   18030:	781b      	ldrb	r3, [r3, #0]
   18032:	e57e      	b.n	17b32 <_vfprintf_r+0x112>
   18034:	2380      	movs	r3, #128	; 0x80
   18036:	431c      	orrs	r4, r3
   18038:	9b07      	ldr	r3, [sp, #28]
   1803a:	781b      	ldrb	r3, [r3, #0]
   1803c:	e579      	b.n	17b32 <_vfprintf_r+0x112>
   1803e:	9b07      	ldr	r3, [sp, #28]
   18040:	781b      	ldrb	r3, [r3, #0]
   18042:	2800      	cmp	r0, #0
   18044:	d000      	beq.n	18048 <_vfprintf_r+0x628>
   18046:	e574      	b.n	17b32 <_vfprintf_r+0x112>
   18048:	2101      	movs	r1, #1
   1804a:	3020      	adds	r0, #32
   1804c:	e571      	b.n	17b32 <_vfprintf_r+0x112>
   1804e:	9312      	str	r3, [sp, #72]	; 0x48
   18050:	2900      	cmp	r1, #0
   18052:	d001      	beq.n	18058 <_vfprintf_r+0x638>
   18054:	f001 f839 	bl	190ca <_vfprintf_r+0x16aa>
   18058:	2207      	movs	r2, #7
   1805a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1805c:	3307      	adds	r3, #7
   1805e:	4393      	bics	r3, r2
   18060:	3201      	adds	r2, #1
   18062:	4694      	mov	ip, r2
   18064:	449c      	add	ip, r3
   18066:	4662      	mov	r2, ip
   18068:	920f      	str	r2, [sp, #60]	; 0x3c
   1806a:	681a      	ldr	r2, [r3, #0]
   1806c:	9216      	str	r2, [sp, #88]	; 0x58
   1806e:	685b      	ldr	r3, [r3, #4]
   18070:	2201      	movs	r2, #1
   18072:	9315      	str	r3, [sp, #84]	; 0x54
   18074:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18076:	9d16      	ldr	r5, [sp, #88]	; 0x58
   18078:	005b      	lsls	r3, r3, #1
   1807a:	085b      	lsrs	r3, r3, #1
   1807c:	4698      	mov	r8, r3
   1807e:	4252      	negs	r2, r2
   18080:	4b74      	ldr	r3, [pc, #464]	; (18254 <_vfprintf_r+0x834>)
   18082:	0028      	movs	r0, r5
   18084:	4641      	mov	r1, r8
   18086:	f004 fa7d 	bl	1c584 <__aeabi_dcmpun>
   1808a:	2800      	cmp	r0, #0
   1808c:	d001      	beq.n	18092 <_vfprintf_r+0x672>
   1808e:	f000 fcb4 	bl	189fa <_vfprintf_r+0xfda>
   18092:	2201      	movs	r2, #1
   18094:	4b6f      	ldr	r3, [pc, #444]	; (18254 <_vfprintf_r+0x834>)
   18096:	4252      	negs	r2, r2
   18098:	0028      	movs	r0, r5
   1809a:	4641      	mov	r1, r8
   1809c:	f7fd fdea 	bl	15c74 <__aeabi_dcmple>
   180a0:	2800      	cmp	r0, #0
   180a2:	d001      	beq.n	180a8 <_vfprintf_r+0x688>
   180a4:	f000 fca9 	bl	189fa <_vfprintf_r+0xfda>
   180a8:	2200      	movs	r2, #0
   180aa:	2300      	movs	r3, #0
   180ac:	9816      	ldr	r0, [sp, #88]	; 0x58
   180ae:	9915      	ldr	r1, [sp, #84]	; 0x54
   180b0:	f7fd fdd6 	bl	15c60 <__aeabi_dcmplt>
   180b4:	2800      	cmp	r0, #0
   180b6:	d001      	beq.n	180bc <_vfprintf_r+0x69c>
   180b8:	f000 fd55 	bl	18b66 <_vfprintf_r+0x1146>
   180bc:	ab16      	add	r3, sp, #88	; 0x58
   180be:	7fdb      	ldrb	r3, [r3, #31]
   180c0:	4698      	mov	r8, r3
   180c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   180c4:	2b47      	cmp	r3, #71	; 0x47
   180c6:	dd01      	ble.n	180cc <_vfprintf_r+0x6ac>
   180c8:	f000 fdb4 	bl	18c34 <_vfprintf_r+0x1214>
   180cc:	4b62      	ldr	r3, [pc, #392]	; (18258 <_vfprintf_r+0x838>)
   180ce:	9311      	str	r3, [sp, #68]	; 0x44
   180d0:	2380      	movs	r3, #128	; 0x80
   180d2:	439c      	bics	r4, r3
   180d4:	3b7d      	subs	r3, #125	; 0x7d
   180d6:	9308      	str	r3, [sp, #32]
   180d8:	930e      	str	r3, [sp, #56]	; 0x38
   180da:	2300      	movs	r3, #0
   180dc:	9409      	str	r4, [sp, #36]	; 0x24
   180de:	469a      	mov	sl, r3
   180e0:	9313      	str	r3, [sp, #76]	; 0x4c
   180e2:	e612      	b.n	17d0a <_vfprintf_r+0x2ea>
   180e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   180e6:	1d1a      	adds	r2, r3, #4
   180e8:	681b      	ldr	r3, [r3, #0]
   180ea:	930b      	str	r3, [sp, #44]	; 0x2c
   180ec:	2b00      	cmp	r3, #0
   180ee:	da00      	bge.n	180f2 <_vfprintf_r+0x6d2>
   180f0:	e578      	b.n	17be4 <_vfprintf_r+0x1c4>
   180f2:	9b07      	ldr	r3, [sp, #28]
   180f4:	920f      	str	r2, [sp, #60]	; 0x3c
   180f6:	781b      	ldrb	r3, [r3, #0]
   180f8:	e51b      	b.n	17b32 <_vfprintf_r+0x112>
   180fa:	9312      	str	r3, [sp, #72]	; 0x48
   180fc:	2900      	cmp	r1, #0
   180fe:	d001      	beq.n	18104 <_vfprintf_r+0x6e4>
   18100:	f000 ffcc 	bl	1909c <_vfprintf_r+0x167c>
   18104:	2310      	movs	r3, #16
   18106:	431c      	orrs	r4, r3
   18108:	e69a      	b.n	17e40 <_vfprintf_r+0x420>
   1810a:	9312      	str	r3, [sp, #72]	; 0x48
   1810c:	e771      	b.n	17ff2 <_vfprintf_r+0x5d2>
   1810e:	9312      	str	r3, [sp, #72]	; 0x48
   18110:	e758      	b.n	17fc4 <_vfprintf_r+0x5a4>
   18112:	9312      	str	r3, [sp, #72]	; 0x48
   18114:	2900      	cmp	r1, #0
   18116:	d001      	beq.n	1811c <_vfprintf_r+0x6fc>
   18118:	f000 ffd3 	bl	190c2 <_vfprintf_r+0x16a2>
   1811c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1811e:	2b00      	cmp	r3, #0
   18120:	d100      	bne.n	18124 <_vfprintf_r+0x704>
   18122:	e18d      	b.n	18440 <_vfprintf_r+0xa20>
   18124:	ad28      	add	r5, sp, #160	; 0xa0
   18126:	702b      	strb	r3, [r5, #0]
   18128:	2300      	movs	r3, #0
   1812a:	aa16      	add	r2, sp, #88	; 0x58
   1812c:	77d3      	strb	r3, [r2, #31]
   1812e:	9409      	str	r4, [sp, #36]	; 0x24
   18130:	e678      	b.n	17e24 <_vfprintf_r+0x404>
   18132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   18134:	990a      	ldr	r1, [sp, #40]	; 0x28
   18136:	6813      	ldr	r3, [r2, #0]
   18138:	6019      	str	r1, [r3, #0]
   1813a:	0013      	movs	r3, r2
   1813c:	3304      	adds	r3, #4
   1813e:	930f      	str	r3, [sp, #60]	; 0x3c
   18140:	e4bc      	b.n	17abc <_vfprintf_r+0x9c>
   18142:	68bc      	ldr	r4, [r7, #8]
   18144:	4643      	mov	r3, r8
   18146:	2b00      	cmp	r3, #0
   18148:	d00f      	beq.n	1816a <_vfprintf_r+0x74a>
   1814a:	aa16      	add	r2, sp, #88	; 0x58
   1814c:	231f      	movs	r3, #31
   1814e:	4694      	mov	ip, r2
   18150:	4463      	add	r3, ip
   18152:	6033      	str	r3, [r6, #0]
   18154:	2301      	movs	r3, #1
   18156:	6073      	str	r3, [r6, #4]
   18158:	687b      	ldr	r3, [r7, #4]
   1815a:	3401      	adds	r4, #1
   1815c:	3301      	adds	r3, #1
   1815e:	60bc      	str	r4, [r7, #8]
   18160:	607b      	str	r3, [r7, #4]
   18162:	2b07      	cmp	r3, #7
   18164:	dd00      	ble.n	18168 <_vfprintf_r+0x748>
   18166:	e203      	b.n	18570 <_vfprintf_r+0xb50>
   18168:	3608      	adds	r6, #8
   1816a:	464b      	mov	r3, r9
   1816c:	2b00      	cmp	r3, #0
   1816e:	d00c      	beq.n	1818a <_vfprintf_r+0x76a>
   18170:	ab1e      	add	r3, sp, #120	; 0x78
   18172:	6033      	str	r3, [r6, #0]
   18174:	2302      	movs	r3, #2
   18176:	6073      	str	r3, [r6, #4]
   18178:	687b      	ldr	r3, [r7, #4]
   1817a:	3402      	adds	r4, #2
   1817c:	3301      	adds	r3, #1
   1817e:	60bc      	str	r4, [r7, #8]
   18180:	607b      	str	r3, [r7, #4]
   18182:	2b07      	cmp	r3, #7
   18184:	dd00      	ble.n	18188 <_vfprintf_r+0x768>
   18186:	e1fd      	b.n	18584 <_vfprintf_r+0xb64>
   18188:	3608      	adds	r6, #8
   1818a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1818c:	2b80      	cmp	r3, #128	; 0x80
   1818e:	d100      	bne.n	18192 <_vfprintf_r+0x772>
   18190:	e173      	b.n	1847a <_vfprintf_r+0xa5a>
   18192:	4653      	mov	r3, sl
   18194:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18196:	1a9d      	subs	r5, r3, r2
   18198:	2d00      	cmp	r5, #0
   1819a:	dd32      	ble.n	18202 <_vfprintf_r+0x7e2>
   1819c:	4a2f      	ldr	r2, [pc, #188]	; (1825c <_vfprintf_r+0x83c>)
   1819e:	687b      	ldr	r3, [r7, #4]
   181a0:	4691      	mov	r9, r2
   181a2:	2d10      	cmp	r5, #16
   181a4:	dd22      	ble.n	181ec <_vfprintf_r+0x7cc>
   181a6:	2210      	movs	r2, #16
   181a8:	4692      	mov	sl, r2
   181aa:	0022      	movs	r2, r4
   181ac:	465c      	mov	r4, fp
   181ae:	e003      	b.n	181b8 <_vfprintf_r+0x798>
   181b0:	3d10      	subs	r5, #16
   181b2:	3608      	adds	r6, #8
   181b4:	2d10      	cmp	r5, #16
   181b6:	dd17      	ble.n	181e8 <_vfprintf_r+0x7c8>
   181b8:	4649      	mov	r1, r9
   181ba:	6031      	str	r1, [r6, #0]
   181bc:	4651      	mov	r1, sl
   181be:	3210      	adds	r2, #16
   181c0:	3301      	adds	r3, #1
   181c2:	6071      	str	r1, [r6, #4]
   181c4:	60ba      	str	r2, [r7, #8]
   181c6:	607b      	str	r3, [r7, #4]
   181c8:	2b07      	cmp	r3, #7
   181ca:	ddf1      	ble.n	181b0 <_vfprintf_r+0x790>
   181cc:	003a      	movs	r2, r7
   181ce:	0021      	movs	r1, r4
   181d0:	9806      	ldr	r0, [sp, #24]
   181d2:	f003 ff17 	bl	1c004 <__sprint_r>
   181d6:	2800      	cmp	r0, #0
   181d8:	d000      	beq.n	181dc <_vfprintf_r+0x7bc>
   181da:	e18a      	b.n	184f2 <_vfprintf_r+0xad2>
   181dc:	3d10      	subs	r5, #16
   181de:	68ba      	ldr	r2, [r7, #8]
   181e0:	687b      	ldr	r3, [r7, #4]
   181e2:	ae32      	add	r6, sp, #200	; 0xc8
   181e4:	2d10      	cmp	r5, #16
   181e6:	dce7      	bgt.n	181b8 <_vfprintf_r+0x798>
   181e8:	46a3      	mov	fp, r4
   181ea:	0014      	movs	r4, r2
   181ec:	464a      	mov	r2, r9
   181ee:	1964      	adds	r4, r4, r5
   181f0:	3301      	adds	r3, #1
   181f2:	6032      	str	r2, [r6, #0]
   181f4:	6075      	str	r5, [r6, #4]
   181f6:	60bc      	str	r4, [r7, #8]
   181f8:	607b      	str	r3, [r7, #4]
   181fa:	2b07      	cmp	r3, #7
   181fc:	dd00      	ble.n	18200 <_vfprintf_r+0x7e0>
   181fe:	e1ad      	b.n	1855c <_vfprintf_r+0xb3c>
   18200:	3608      	adds	r6, #8
   18202:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18204:	05db      	lsls	r3, r3, #23
   18206:	d500      	bpl.n	1820a <_vfprintf_r+0x7ea>
   18208:	e0be      	b.n	18388 <_vfprintf_r+0x968>
   1820a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1820c:	6033      	str	r3, [r6, #0]
   1820e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18210:	469c      	mov	ip, r3
   18212:	6073      	str	r3, [r6, #4]
   18214:	687b      	ldr	r3, [r7, #4]
   18216:	4464      	add	r4, ip
   18218:	3301      	adds	r3, #1
   1821a:	60bc      	str	r4, [r7, #8]
   1821c:	607b      	str	r3, [r7, #4]
   1821e:	2b07      	cmp	r3, #7
   18220:	dd00      	ble.n	18224 <_vfprintf_r+0x804>
   18222:	e0a6      	b.n	18372 <_vfprintf_r+0x952>
   18224:	3608      	adds	r6, #8
   18226:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18228:	075b      	lsls	r3, r3, #29
   1822a:	d54a      	bpl.n	182c2 <_vfprintf_r+0x8a2>
   1822c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1822e:	9a08      	ldr	r2, [sp, #32]
   18230:	1a9d      	subs	r5, r3, r2
   18232:	2d00      	cmp	r5, #0
   18234:	dd45      	ble.n	182c2 <_vfprintf_r+0x8a2>
   18236:	4a0a      	ldr	r2, [pc, #40]	; (18260 <_vfprintf_r+0x840>)
   18238:	687b      	ldr	r3, [r7, #4]
   1823a:	4690      	mov	r8, r2
   1823c:	2d10      	cmp	r5, #16
   1823e:	dd2f      	ble.n	182a0 <_vfprintf_r+0x880>
   18240:	2210      	movs	r2, #16
   18242:	4691      	mov	r9, r2
   18244:	0022      	movs	r2, r4
   18246:	465c      	mov	r4, fp
   18248:	e010      	b.n	1826c <_vfprintf_r+0x84c>
   1824a:	46c0      	nop			; (mov r8, r8)
   1824c:	0001e068 	.word	0x0001e068
   18250:	0001e054 	.word	0x0001e054
   18254:	7fefffff 	.word	0x7fefffff
   18258:	0001e044 	.word	0x0001e044
   1825c:	0001e218 	.word	0x0001e218
   18260:	0001e208 	.word	0x0001e208
   18264:	3d10      	subs	r5, #16
   18266:	3608      	adds	r6, #8
   18268:	2d10      	cmp	r5, #16
   1826a:	dd17      	ble.n	1829c <_vfprintf_r+0x87c>
   1826c:	49d1      	ldr	r1, [pc, #836]	; (185b4 <_vfprintf_r+0xb94>)
   1826e:	3210      	adds	r2, #16
   18270:	6031      	str	r1, [r6, #0]
   18272:	4649      	mov	r1, r9
   18274:	3301      	adds	r3, #1
   18276:	6071      	str	r1, [r6, #4]
   18278:	60ba      	str	r2, [r7, #8]
   1827a:	607b      	str	r3, [r7, #4]
   1827c:	2b07      	cmp	r3, #7
   1827e:	ddf1      	ble.n	18264 <_vfprintf_r+0x844>
   18280:	003a      	movs	r2, r7
   18282:	0021      	movs	r1, r4
   18284:	9806      	ldr	r0, [sp, #24]
   18286:	f003 febd 	bl	1c004 <__sprint_r>
   1828a:	2800      	cmp	r0, #0
   1828c:	d000      	beq.n	18290 <_vfprintf_r+0x870>
   1828e:	e130      	b.n	184f2 <_vfprintf_r+0xad2>
   18290:	3d10      	subs	r5, #16
   18292:	68ba      	ldr	r2, [r7, #8]
   18294:	687b      	ldr	r3, [r7, #4]
   18296:	ae32      	add	r6, sp, #200	; 0xc8
   18298:	2d10      	cmp	r5, #16
   1829a:	dce7      	bgt.n	1826c <_vfprintf_r+0x84c>
   1829c:	46a3      	mov	fp, r4
   1829e:	0014      	movs	r4, r2
   182a0:	4642      	mov	r2, r8
   182a2:	1964      	adds	r4, r4, r5
   182a4:	3301      	adds	r3, #1
   182a6:	c624      	stmia	r6!, {r2, r5}
   182a8:	60bc      	str	r4, [r7, #8]
   182aa:	607b      	str	r3, [r7, #4]
   182ac:	2b07      	cmp	r3, #7
   182ae:	dd08      	ble.n	182c2 <_vfprintf_r+0x8a2>
   182b0:	003a      	movs	r2, r7
   182b2:	4659      	mov	r1, fp
   182b4:	9806      	ldr	r0, [sp, #24]
   182b6:	f003 fea5 	bl	1c004 <__sprint_r>
   182ba:	2800      	cmp	r0, #0
   182bc:	d000      	beq.n	182c0 <_vfprintf_r+0x8a0>
   182be:	e13f      	b.n	18540 <_vfprintf_r+0xb20>
   182c0:	68bc      	ldr	r4, [r7, #8]
   182c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   182c4:	9908      	ldr	r1, [sp, #32]
   182c6:	428b      	cmp	r3, r1
   182c8:	da00      	bge.n	182cc <_vfprintf_r+0x8ac>
   182ca:	000b      	movs	r3, r1
   182cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   182ce:	4694      	mov	ip, r2
   182d0:	449c      	add	ip, r3
   182d2:	4663      	mov	r3, ip
   182d4:	930a      	str	r3, [sp, #40]	; 0x28
   182d6:	2c00      	cmp	r4, #0
   182d8:	d000      	beq.n	182dc <_vfprintf_r+0x8bc>
   182da:	e129      	b.n	18530 <_vfprintf_r+0xb10>
   182dc:	2300      	movs	r3, #0
   182de:	ae32      	add	r6, sp, #200	; 0xc8
   182e0:	607b      	str	r3, [r7, #4]
   182e2:	f7ff fbeb 	bl	17abc <_vfprintf_r+0x9c>
   182e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   182e8:	2b01      	cmp	r3, #1
   182ea:	dc00      	bgt.n	182ee <_vfprintf_r+0x8ce>
   182ec:	e103      	b.n	184f6 <_vfprintf_r+0xad6>
   182ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
   182f0:	3401      	adds	r4, #1
   182f2:	6033      	str	r3, [r6, #0]
   182f4:	2301      	movs	r3, #1
   182f6:	6073      	str	r3, [r6, #4]
   182f8:	687b      	ldr	r3, [r7, #4]
   182fa:	60bc      	str	r4, [r7, #8]
   182fc:	3301      	adds	r3, #1
   182fe:	607b      	str	r3, [r7, #4]
   18300:	2b07      	cmp	r3, #7
   18302:	dd00      	ble.n	18306 <_vfprintf_r+0x8e6>
   18304:	e2ef      	b.n	188e6 <_vfprintf_r+0xec6>
   18306:	3608      	adds	r6, #8
   18308:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1830a:	3301      	adds	r3, #1
   1830c:	6032      	str	r2, [r6, #0]
   1830e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18310:	4698      	mov	r8, r3
   18312:	4694      	mov	ip, r2
   18314:	4464      	add	r4, ip
   18316:	6072      	str	r2, [r6, #4]
   18318:	60bc      	str	r4, [r7, #8]
   1831a:	607b      	str	r3, [r7, #4]
   1831c:	2b07      	cmp	r3, #7
   1831e:	dd00      	ble.n	18322 <_vfprintf_r+0x902>
   18320:	e318      	b.n	18954 <_vfprintf_r+0xf34>
   18322:	3608      	adds	r6, #8
   18324:	2200      	movs	r2, #0
   18326:	2300      	movs	r3, #0
   18328:	9816      	ldr	r0, [sp, #88]	; 0x58
   1832a:	9915      	ldr	r1, [sp, #84]	; 0x54
   1832c:	f7fd fc92 	bl	15c54 <__aeabi_dcmpeq>
   18330:	2800      	cmp	r0, #0
   18332:	d000      	beq.n	18336 <_vfprintf_r+0x916>
   18334:	e1f4      	b.n	18720 <_vfprintf_r+0xd00>
   18336:	9d11      	ldr	r5, [sp, #68]	; 0x44
   18338:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1833a:	3501      	adds	r5, #1
   1833c:	3b01      	subs	r3, #1
   1833e:	6035      	str	r5, [r6, #0]
   18340:	6073      	str	r3, [r6, #4]
   18342:	18e4      	adds	r4, r4, r3
   18344:	2301      	movs	r3, #1
   18346:	469c      	mov	ip, r3
   18348:	44e0      	add	r8, ip
   1834a:	4643      	mov	r3, r8
   1834c:	60bc      	str	r4, [r7, #8]
   1834e:	607b      	str	r3, [r7, #4]
   18350:	2b07      	cmp	r3, #7
   18352:	dd00      	ble.n	18356 <_vfprintf_r+0x936>
   18354:	e0e0      	b.n	18518 <_vfprintf_r+0xaf8>
   18356:	3608      	adds	r6, #8
   18358:	ab21      	add	r3, sp, #132	; 0x84
   1835a:	6033      	str	r3, [r6, #0]
   1835c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   1835e:	469c      	mov	ip, r3
   18360:	6073      	str	r3, [r6, #4]
   18362:	4643      	mov	r3, r8
   18364:	4464      	add	r4, ip
   18366:	3301      	adds	r3, #1
   18368:	60bc      	str	r4, [r7, #8]
   1836a:	607b      	str	r3, [r7, #4]
   1836c:	2b07      	cmp	r3, #7
   1836e:	dc00      	bgt.n	18372 <_vfprintf_r+0x952>
   18370:	e758      	b.n	18224 <_vfprintf_r+0x804>
   18372:	003a      	movs	r2, r7
   18374:	4659      	mov	r1, fp
   18376:	9806      	ldr	r0, [sp, #24]
   18378:	f003 fe44 	bl	1c004 <__sprint_r>
   1837c:	2800      	cmp	r0, #0
   1837e:	d000      	beq.n	18382 <_vfprintf_r+0x962>
   18380:	e0de      	b.n	18540 <_vfprintf_r+0xb20>
   18382:	68bc      	ldr	r4, [r7, #8]
   18384:	ae32      	add	r6, sp, #200	; 0xc8
   18386:	e74e      	b.n	18226 <_vfprintf_r+0x806>
   18388:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1838a:	2b65      	cmp	r3, #101	; 0x65
   1838c:	ddab      	ble.n	182e6 <_vfprintf_r+0x8c6>
   1838e:	2200      	movs	r2, #0
   18390:	2300      	movs	r3, #0
   18392:	9816      	ldr	r0, [sp, #88]	; 0x58
   18394:	9915      	ldr	r1, [sp, #84]	; 0x54
   18396:	f7fd fc5d 	bl	15c54 <__aeabi_dcmpeq>
   1839a:	2800      	cmp	r0, #0
   1839c:	d100      	bne.n	183a0 <_vfprintf_r+0x980>
   1839e:	e134      	b.n	1860a <_vfprintf_r+0xbea>
   183a0:	4b85      	ldr	r3, [pc, #532]	; (185b8 <_vfprintf_r+0xb98>)
   183a2:	3401      	adds	r4, #1
   183a4:	6033      	str	r3, [r6, #0]
   183a6:	2301      	movs	r3, #1
   183a8:	6073      	str	r3, [r6, #4]
   183aa:	687b      	ldr	r3, [r7, #4]
   183ac:	60bc      	str	r4, [r7, #8]
   183ae:	3301      	adds	r3, #1
   183b0:	607b      	str	r3, [r7, #4]
   183b2:	2b07      	cmp	r3, #7
   183b4:	dd00      	ble.n	183b8 <_vfprintf_r+0x998>
   183b6:	e3dc      	b.n	18b72 <_vfprintf_r+0x1152>
   183b8:	3608      	adds	r6, #8
   183ba:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   183bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
   183be:	4293      	cmp	r3, r2
   183c0:	db03      	blt.n	183ca <_vfprintf_r+0x9aa>
   183c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   183c4:	07db      	lsls	r3, r3, #31
   183c6:	d400      	bmi.n	183ca <_vfprintf_r+0x9aa>
   183c8:	e3b7      	b.n	18b3a <_vfprintf_r+0x111a>
   183ca:	9b18      	ldr	r3, [sp, #96]	; 0x60
   183cc:	68ba      	ldr	r2, [r7, #8]
   183ce:	6033      	str	r3, [r6, #0]
   183d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   183d2:	469c      	mov	ip, r3
   183d4:	6073      	str	r3, [r6, #4]
   183d6:	687b      	ldr	r3, [r7, #4]
   183d8:	4462      	add	r2, ip
   183da:	3301      	adds	r3, #1
   183dc:	0014      	movs	r4, r2
   183de:	60ba      	str	r2, [r7, #8]
   183e0:	607b      	str	r3, [r7, #4]
   183e2:	2b07      	cmp	r3, #7
   183e4:	dd01      	ble.n	183ea <_vfprintf_r+0x9ca>
   183e6:	f000 fc19 	bl	18c1c <_vfprintf_r+0x11fc>
   183ea:	3608      	adds	r6, #8
   183ec:	9b14      	ldr	r3, [sp, #80]	; 0x50
   183ee:	1e5d      	subs	r5, r3, #1
   183f0:	2d00      	cmp	r5, #0
   183f2:	dc00      	bgt.n	183f6 <_vfprintf_r+0x9d6>
   183f4:	e717      	b.n	18226 <_vfprintf_r+0x806>
   183f6:	4a71      	ldr	r2, [pc, #452]	; (185bc <_vfprintf_r+0xb9c>)
   183f8:	687b      	ldr	r3, [r7, #4]
   183fa:	4691      	mov	r9, r2
   183fc:	2d10      	cmp	r5, #16
   183fe:	dc00      	bgt.n	18402 <_vfprintf_r+0x9e2>
   18400:	e1c3      	b.n	1878a <_vfprintf_r+0xd6a>
   18402:	2210      	movs	r2, #16
   18404:	4690      	mov	r8, r2
   18406:	0022      	movs	r2, r4
   18408:	464c      	mov	r4, r9
   1840a:	46d9      	mov	r9, fp
   1840c:	e004      	b.n	18418 <_vfprintf_r+0x9f8>
   1840e:	3608      	adds	r6, #8
   18410:	3d10      	subs	r5, #16
   18412:	2d10      	cmp	r5, #16
   18414:	dc00      	bgt.n	18418 <_vfprintf_r+0x9f8>
   18416:	e37c      	b.n	18b12 <_vfprintf_r+0x10f2>
   18418:	4641      	mov	r1, r8
   1841a:	3210      	adds	r2, #16
   1841c:	3301      	adds	r3, #1
   1841e:	6034      	str	r4, [r6, #0]
   18420:	6071      	str	r1, [r6, #4]
   18422:	60ba      	str	r2, [r7, #8]
   18424:	607b      	str	r3, [r7, #4]
   18426:	2b07      	cmp	r3, #7
   18428:	ddf1      	ble.n	1840e <_vfprintf_r+0x9ee>
   1842a:	003a      	movs	r2, r7
   1842c:	4649      	mov	r1, r9
   1842e:	9806      	ldr	r0, [sp, #24]
   18430:	f003 fde8 	bl	1c004 <__sprint_r>
   18434:	2800      	cmp	r0, #0
   18436:	d10b      	bne.n	18450 <_vfprintf_r+0xa30>
   18438:	68ba      	ldr	r2, [r7, #8]
   1843a:	687b      	ldr	r3, [r7, #4]
   1843c:	ae32      	add	r6, sp, #200	; 0xc8
   1843e:	e7e7      	b.n	18410 <_vfprintf_r+0x9f0>
   18440:	68bb      	ldr	r3, [r7, #8]
   18442:	46d9      	mov	r9, fp
   18444:	2b00      	cmp	r3, #0
   18446:	d001      	beq.n	1844c <_vfprintf_r+0xa2c>
   18448:	f000 fd4c 	bl	18ee4 <_vfprintf_r+0x14c4>
   1844c:	2300      	movs	r3, #0
   1844e:	607b      	str	r3, [r7, #4]
   18450:	464b      	mov	r3, r9
   18452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   18454:	07db      	lsls	r3, r3, #31
   18456:	d40d      	bmi.n	18474 <_vfprintf_r+0xa54>
   18458:	464b      	mov	r3, r9
   1845a:	899b      	ldrh	r3, [r3, #12]
   1845c:	059a      	lsls	r2, r3, #22
   1845e:	d505      	bpl.n	1846c <_vfprintf_r+0xa4c>
   18460:	065b      	lsls	r3, r3, #25
   18462:	d401      	bmi.n	18468 <_vfprintf_r+0xa48>
   18464:	f7ff fb8d 	bl	17b82 <_vfprintf_r+0x162>
   18468:	f7ff fb88 	bl	17b7c <_vfprintf_r+0x15c>
   1846c:	464b      	mov	r3, r9
   1846e:	6d98      	ldr	r0, [r3, #88]	; 0x58
   18470:	f002 fbb8 	bl	1abe4 <__retarget_lock_release_recursive>
   18474:	464b      	mov	r3, r9
   18476:	899b      	ldrh	r3, [r3, #12]
   18478:	e7f2      	b.n	18460 <_vfprintf_r+0xa40>
   1847a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1847c:	9a08      	ldr	r2, [sp, #32]
   1847e:	1a9d      	subs	r5, r3, r2
   18480:	2d00      	cmp	r5, #0
   18482:	dc00      	bgt.n	18486 <_vfprintf_r+0xa66>
   18484:	e685      	b.n	18192 <_vfprintf_r+0x772>
   18486:	4a4d      	ldr	r2, [pc, #308]	; (185bc <_vfprintf_r+0xb9c>)
   18488:	687b      	ldr	r3, [r7, #4]
   1848a:	4691      	mov	r9, r2
   1848c:	2d10      	cmp	r5, #16
   1848e:	dd24      	ble.n	184da <_vfprintf_r+0xaba>
   18490:	2210      	movs	r2, #16
   18492:	0021      	movs	r1, r4
   18494:	4690      	mov	r8, r2
   18496:	465c      	mov	r4, fp
   18498:	0032      	movs	r2, r6
   1849a:	464e      	mov	r6, r9
   1849c:	e003      	b.n	184a6 <_vfprintf_r+0xa86>
   1849e:	3d10      	subs	r5, #16
   184a0:	3208      	adds	r2, #8
   184a2:	2d10      	cmp	r5, #16
   184a4:	dd15      	ble.n	184d2 <_vfprintf_r+0xab2>
   184a6:	4640      	mov	r0, r8
   184a8:	3110      	adds	r1, #16
   184aa:	3301      	adds	r3, #1
   184ac:	6016      	str	r6, [r2, #0]
   184ae:	6050      	str	r0, [r2, #4]
   184b0:	60b9      	str	r1, [r7, #8]
   184b2:	607b      	str	r3, [r7, #4]
   184b4:	2b07      	cmp	r3, #7
   184b6:	ddf2      	ble.n	1849e <_vfprintf_r+0xa7e>
   184b8:	003a      	movs	r2, r7
   184ba:	0021      	movs	r1, r4
   184bc:	9806      	ldr	r0, [sp, #24]
   184be:	f003 fda1 	bl	1c004 <__sprint_r>
   184c2:	2800      	cmp	r0, #0
   184c4:	d115      	bne.n	184f2 <_vfprintf_r+0xad2>
   184c6:	3d10      	subs	r5, #16
   184c8:	68b9      	ldr	r1, [r7, #8]
   184ca:	687b      	ldr	r3, [r7, #4]
   184cc:	aa32      	add	r2, sp, #200	; 0xc8
   184ce:	2d10      	cmp	r5, #16
   184d0:	dce9      	bgt.n	184a6 <_vfprintf_r+0xa86>
   184d2:	46a3      	mov	fp, r4
   184d4:	46b1      	mov	r9, r6
   184d6:	000c      	movs	r4, r1
   184d8:	0016      	movs	r6, r2
   184da:	464a      	mov	r2, r9
   184dc:	1964      	adds	r4, r4, r5
   184de:	3301      	adds	r3, #1
   184e0:	6032      	str	r2, [r6, #0]
   184e2:	6075      	str	r5, [r6, #4]
   184e4:	60bc      	str	r4, [r7, #8]
   184e6:	607b      	str	r3, [r7, #4]
   184e8:	2b07      	cmp	r3, #7
   184ea:	dd00      	ble.n	184ee <_vfprintf_r+0xace>
   184ec:	e263      	b.n	189b6 <_vfprintf_r+0xf96>
   184ee:	3608      	adds	r6, #8
   184f0:	e64f      	b.n	18192 <_vfprintf_r+0x772>
   184f2:	46a1      	mov	r9, r4
   184f4:	e7ac      	b.n	18450 <_vfprintf_r+0xa30>
   184f6:	2301      	movs	r3, #1
   184f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   184fa:	4213      	tst	r3, r2
   184fc:	d000      	beq.n	18500 <_vfprintf_r+0xae0>
   184fe:	e6f6      	b.n	182ee <_vfprintf_r+0x8ce>
   18500:	6073      	str	r3, [r6, #4]
   18502:	687b      	ldr	r3, [r7, #4]
   18504:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18506:	3301      	adds	r3, #1
   18508:	3401      	adds	r4, #1
   1850a:	6032      	str	r2, [r6, #0]
   1850c:	60bc      	str	r4, [r7, #8]
   1850e:	4698      	mov	r8, r3
   18510:	607b      	str	r3, [r7, #4]
   18512:	2b07      	cmp	r3, #7
   18514:	dc00      	bgt.n	18518 <_vfprintf_r+0xaf8>
   18516:	e71e      	b.n	18356 <_vfprintf_r+0x936>
   18518:	003a      	movs	r2, r7
   1851a:	4659      	mov	r1, fp
   1851c:	9806      	ldr	r0, [sp, #24]
   1851e:	f003 fd71 	bl	1c004 <__sprint_r>
   18522:	2800      	cmp	r0, #0
   18524:	d10c      	bne.n	18540 <_vfprintf_r+0xb20>
   18526:	687b      	ldr	r3, [r7, #4]
   18528:	68bc      	ldr	r4, [r7, #8]
   1852a:	4698      	mov	r8, r3
   1852c:	ae32      	add	r6, sp, #200	; 0xc8
   1852e:	e713      	b.n	18358 <_vfprintf_r+0x938>
   18530:	003a      	movs	r2, r7
   18532:	4659      	mov	r1, fp
   18534:	9806      	ldr	r0, [sp, #24]
   18536:	f003 fd65 	bl	1c004 <__sprint_r>
   1853a:	2800      	cmp	r0, #0
   1853c:	d100      	bne.n	18540 <_vfprintf_r+0xb20>
   1853e:	e6cd      	b.n	182dc <_vfprintf_r+0x8bc>
   18540:	46d9      	mov	r9, fp
   18542:	e785      	b.n	18450 <_vfprintf_r+0xa30>
   18544:	9c09      	ldr	r4, [sp, #36]	; 0x24
   18546:	2b01      	cmp	r3, #1
   18548:	d100      	bne.n	1854c <_vfprintf_r+0xb2c>
   1854a:	e148      	b.n	187de <_vfprintf_r+0xdbe>
   1854c:	2b02      	cmp	r3, #2
   1854e:	d123      	bne.n	18598 <_vfprintf_r+0xb78>
   18550:	9409      	str	r4, [sp, #36]	; 0x24
   18552:	2300      	movs	r3, #0
   18554:	2400      	movs	r4, #0
   18556:	930c      	str	r3, [sp, #48]	; 0x30
   18558:	940d      	str	r4, [sp, #52]	; 0x34
   1855a:	e4a1      	b.n	17ea0 <_vfprintf_r+0x480>
   1855c:	003a      	movs	r2, r7
   1855e:	4659      	mov	r1, fp
   18560:	9806      	ldr	r0, [sp, #24]
   18562:	f003 fd4f 	bl	1c004 <__sprint_r>
   18566:	2800      	cmp	r0, #0
   18568:	d1ea      	bne.n	18540 <_vfprintf_r+0xb20>
   1856a:	68bc      	ldr	r4, [r7, #8]
   1856c:	ae32      	add	r6, sp, #200	; 0xc8
   1856e:	e648      	b.n	18202 <_vfprintf_r+0x7e2>
   18570:	003a      	movs	r2, r7
   18572:	4659      	mov	r1, fp
   18574:	9806      	ldr	r0, [sp, #24]
   18576:	f003 fd45 	bl	1c004 <__sprint_r>
   1857a:	2800      	cmp	r0, #0
   1857c:	d1e0      	bne.n	18540 <_vfprintf_r+0xb20>
   1857e:	68bc      	ldr	r4, [r7, #8]
   18580:	ae32      	add	r6, sp, #200	; 0xc8
   18582:	e5f2      	b.n	1816a <_vfprintf_r+0x74a>
   18584:	003a      	movs	r2, r7
   18586:	4659      	mov	r1, fp
   18588:	9806      	ldr	r0, [sp, #24]
   1858a:	f003 fd3b 	bl	1c004 <__sprint_r>
   1858e:	2800      	cmp	r0, #0
   18590:	d1d6      	bne.n	18540 <_vfprintf_r+0xb20>
   18592:	68bc      	ldr	r4, [r7, #8]
   18594:	ae32      	add	r6, sp, #200	; 0xc8
   18596:	e5f8      	b.n	1818a <_vfprintf_r+0x76a>
   18598:	9409      	str	r4, [sp, #36]	; 0x24
   1859a:	2300      	movs	r3, #0
   1859c:	2400      	movs	r4, #0
   1859e:	930c      	str	r3, [sp, #48]	; 0x30
   185a0:	940d      	str	r4, [sp, #52]	; 0x34
   185a2:	980c      	ldr	r0, [sp, #48]	; 0x30
   185a4:	990d      	ldr	r1, [sp, #52]	; 0x34
   185a6:	4653      	mov	r3, sl
   185a8:	aa32      	add	r2, sp, #200	; 0xc8
   185aa:	4691      	mov	r9, r2
   185ac:	9308      	str	r3, [sp, #32]
   185ae:	46b2      	mov	sl, r6
   185b0:	e007      	b.n	185c2 <_vfprintf_r+0xba2>
   185b2:	46c0      	nop			; (mov r8, r8)
   185b4:	0001e208 	.word	0x0001e208
   185b8:	0001d630 	.word	0x0001d630
   185bc:	0001e218 	.word	0x0001e218
   185c0:	46a1      	mov	r9, r4
   185c2:	074a      	lsls	r2, r1, #29
   185c4:	4694      	mov	ip, r2
   185c6:	464b      	mov	r3, r9
   185c8:	4665      	mov	r5, ip
   185ca:	1e5c      	subs	r4, r3, #1
   185cc:	08c6      	lsrs	r6, r0, #3
   185ce:	2307      	movs	r3, #7
   185d0:	08ca      	lsrs	r2, r1, #3
   185d2:	4335      	orrs	r5, r6
   185d4:	0011      	movs	r1, r2
   185d6:	002a      	movs	r2, r5
   185d8:	4003      	ands	r3, r0
   185da:	3330      	adds	r3, #48	; 0x30
   185dc:	7023      	strb	r3, [r4, #0]
   185de:	0028      	movs	r0, r5
   185e0:	430a      	orrs	r2, r1
   185e2:	d1ed      	bne.n	185c0 <_vfprintf_r+0xba0>
   185e4:	900c      	str	r0, [sp, #48]	; 0x30
   185e6:	910d      	str	r1, [sp, #52]	; 0x34
   185e8:	9908      	ldr	r1, [sp, #32]
   185ea:	4656      	mov	r6, sl
   185ec:	468a      	mov	sl, r1
   185ee:	9909      	ldr	r1, [sp, #36]	; 0x24
   185f0:	464a      	mov	r2, r9
   185f2:	9411      	str	r4, [sp, #68]	; 0x44
   185f4:	07c9      	lsls	r1, r1, #31
   185f6:	d500      	bpl.n	185fa <_vfprintf_r+0xbda>
   185f8:	e0e0      	b.n	187bc <_vfprintf_r+0xd9c>
   185fa:	ab32      	add	r3, sp, #200	; 0xc8
   185fc:	1b1b      	subs	r3, r3, r4
   185fe:	930e      	str	r3, [sp, #56]	; 0x38
   18600:	f7ff fb7b 	bl	17cfa <_vfprintf_r+0x2da>
   18604:	9c07      	ldr	r4, [sp, #28]
   18606:	f7ff fa7d 	bl	17b04 <_vfprintf_r+0xe4>
   1860a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1860c:	2800      	cmp	r0, #0
   1860e:	dc00      	bgt.n	18612 <_vfprintf_r+0xbf2>
   18610:	e2b9      	b.n	18b86 <_vfprintf_r+0x1166>
   18612:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18614:	9914      	ldr	r1, [sp, #80]	; 0x50
   18616:	0013      	movs	r3, r2
   18618:	4690      	mov	r8, r2
   1861a:	428b      	cmp	r3, r1
   1861c:	dd00      	ble.n	18620 <_vfprintf_r+0xc00>
   1861e:	4688      	mov	r8, r1
   18620:	4643      	mov	r3, r8
   18622:	2b00      	cmp	r3, #0
   18624:	dd0c      	ble.n	18640 <_vfprintf_r+0xc20>
   18626:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18628:	4444      	add	r4, r8
   1862a:	6033      	str	r3, [r6, #0]
   1862c:	4643      	mov	r3, r8
   1862e:	6073      	str	r3, [r6, #4]
   18630:	687b      	ldr	r3, [r7, #4]
   18632:	60bc      	str	r4, [r7, #8]
   18634:	3301      	adds	r3, #1
   18636:	607b      	str	r3, [r7, #4]
   18638:	2b07      	cmp	r3, #7
   1863a:	dd00      	ble.n	1863e <_vfprintf_r+0xc1e>
   1863c:	e389      	b.n	18d52 <_vfprintf_r+0x1332>
   1863e:	3608      	adds	r6, #8
   18640:	4643      	mov	r3, r8
   18642:	43db      	mvns	r3, r3
   18644:	4642      	mov	r2, r8
   18646:	17db      	asrs	r3, r3, #31
   18648:	4013      	ands	r3, r2
   1864a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1864c:	1ad3      	subs	r3, r2, r3
   1864e:	4698      	mov	r8, r3
   18650:	2b00      	cmp	r3, #0
   18652:	dc00      	bgt.n	18656 <_vfprintf_r+0xc36>
   18654:	e0eb      	b.n	1882e <_vfprintf_r+0xe0e>
   18656:	2b10      	cmp	r3, #16
   18658:	dc01      	bgt.n	1865e <_vfprintf_r+0xc3e>
   1865a:	f000 fcd9 	bl	19010 <_vfprintf_r+0x15f0>
   1865e:	4adc      	ldr	r2, [pc, #880]	; (189d0 <_vfprintf_r+0xfb0>)
   18660:	687b      	ldr	r3, [r7, #4]
   18662:	4691      	mov	r9, r2
   18664:	2210      	movs	r2, #16
   18666:	464d      	mov	r5, r9
   18668:	4692      	mov	sl, r2
   1866a:	0022      	movs	r2, r4
   1866c:	4644      	mov	r4, r8
   1866e:	46d8      	mov	r8, fp
   18670:	e004      	b.n	1867c <_vfprintf_r+0xc5c>
   18672:	3608      	adds	r6, #8
   18674:	3c10      	subs	r4, #16
   18676:	2c10      	cmp	r4, #16
   18678:	dc00      	bgt.n	1867c <_vfprintf_r+0xc5c>
   1867a:	e0bf      	b.n	187fc <_vfprintf_r+0xddc>
   1867c:	4651      	mov	r1, sl
   1867e:	3210      	adds	r2, #16
   18680:	3301      	adds	r3, #1
   18682:	6035      	str	r5, [r6, #0]
   18684:	6071      	str	r1, [r6, #4]
   18686:	60ba      	str	r2, [r7, #8]
   18688:	607b      	str	r3, [r7, #4]
   1868a:	2b07      	cmp	r3, #7
   1868c:	ddf1      	ble.n	18672 <_vfprintf_r+0xc52>
   1868e:	003a      	movs	r2, r7
   18690:	4641      	mov	r1, r8
   18692:	9806      	ldr	r0, [sp, #24]
   18694:	f003 fcb6 	bl	1c004 <__sprint_r>
   18698:	2800      	cmp	r0, #0
   1869a:	d000      	beq.n	1869e <_vfprintf_r+0xc7e>
   1869c:	e3b6      	b.n	18e0c <_vfprintf_r+0x13ec>
   1869e:	68ba      	ldr	r2, [r7, #8]
   186a0:	687b      	ldr	r3, [r7, #4]
   186a2:	ae32      	add	r6, sp, #200	; 0xc8
   186a4:	e7e6      	b.n	18674 <_vfprintf_r+0xc54>
   186a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   186a8:	2b00      	cmp	r3, #0
   186aa:	d100      	bne.n	186ae <_vfprintf_r+0xc8e>
   186ac:	e092      	b.n	187d4 <_vfprintf_r+0xdb4>
   186ae:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   186b0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   186b2:	ab32      	add	r3, sp, #200	; 0xc8
   186b4:	46b1      	mov	r9, r6
   186b6:	001e      	movs	r6, r3
   186b8:	0020      	movs	r0, r4
   186ba:	0029      	movs	r1, r5
   186bc:	220a      	movs	r2, #10
   186be:	2300      	movs	r3, #0
   186c0:	f7fa fcd6 	bl	13070 <__aeabi_uldivmod>
   186c4:	3e01      	subs	r6, #1
   186c6:	3230      	adds	r2, #48	; 0x30
   186c8:	7032      	strb	r2, [r6, #0]
   186ca:	2300      	movs	r3, #0
   186cc:	0020      	movs	r0, r4
   186ce:	0029      	movs	r1, r5
   186d0:	220a      	movs	r2, #10
   186d2:	f7fa fccd 	bl	13070 <__aeabi_uldivmod>
   186d6:	0003      	movs	r3, r0
   186d8:	0004      	movs	r4, r0
   186da:	000d      	movs	r5, r1
   186dc:	430b      	orrs	r3, r1
   186de:	d1eb      	bne.n	186b8 <_vfprintf_r+0xc98>
   186e0:	0032      	movs	r2, r6
   186e2:	ab32      	add	r3, sp, #200	; 0xc8
   186e4:	1a9b      	subs	r3, r3, r2
   186e6:	9611      	str	r6, [sp, #68]	; 0x44
   186e8:	940c      	str	r4, [sp, #48]	; 0x30
   186ea:	950d      	str	r5, [sp, #52]	; 0x34
   186ec:	464e      	mov	r6, r9
   186ee:	930e      	str	r3, [sp, #56]	; 0x38
   186f0:	f7ff fb03 	bl	17cfa <_vfprintf_r+0x2da>
   186f4:	2300      	movs	r3, #0
   186f6:	930e      	str	r3, [sp, #56]	; 0x38
   186f8:	ab32      	add	r3, sp, #200	; 0xc8
   186fa:	9311      	str	r3, [sp, #68]	; 0x44
   186fc:	f7ff fafd 	bl	17cfa <_vfprintf_r+0x2da>
   18700:	003a      	movs	r2, r7
   18702:	4659      	mov	r1, fp
   18704:	9806      	ldr	r0, [sp, #24]
   18706:	f003 fc7d 	bl	1c004 <__sprint_r>
   1870a:	2800      	cmp	r0, #0
   1870c:	d000      	beq.n	18710 <_vfprintf_r+0xcf0>
   1870e:	e717      	b.n	18540 <_vfprintf_r+0xb20>
   18710:	ab16      	add	r3, sp, #88	; 0x58
   18712:	7fdb      	ldrb	r3, [r3, #31]
   18714:	68bc      	ldr	r4, [r7, #8]
   18716:	4698      	mov	r8, r3
   18718:	ae32      	add	r6, sp, #200	; 0xc8
   1871a:	e513      	b.n	18144 <_vfprintf_r+0x724>
   1871c:	46b1      	mov	r9, r6
   1871e:	e697      	b.n	18450 <_vfprintf_r+0xa30>
   18720:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18722:	1e5d      	subs	r5, r3, #1
   18724:	2d00      	cmp	r5, #0
   18726:	dc00      	bgt.n	1872a <_vfprintf_r+0xd0a>
   18728:	e616      	b.n	18358 <_vfprintf_r+0x938>
   1872a:	4ba9      	ldr	r3, [pc, #676]	; (189d0 <_vfprintf_r+0xfb0>)
   1872c:	4699      	mov	r9, r3
   1872e:	2d10      	cmp	r5, #16
   18730:	dc00      	bgt.n	18734 <_vfprintf_r+0xd14>
   18732:	e10a      	b.n	1894a <_vfprintf_r+0xf2a>
   18734:	2310      	movs	r3, #16
   18736:	0022      	movs	r2, r4
   18738:	469a      	mov	sl, r3
   1873a:	465c      	mov	r4, fp
   1873c:	4643      	mov	r3, r8
   1873e:	e004      	b.n	1874a <_vfprintf_r+0xd2a>
   18740:	3608      	adds	r6, #8
   18742:	3d10      	subs	r5, #16
   18744:	2d10      	cmp	r5, #16
   18746:	dc00      	bgt.n	1874a <_vfprintf_r+0xd2a>
   18748:	e0fc      	b.n	18944 <_vfprintf_r+0xf24>
   1874a:	4649      	mov	r1, r9
   1874c:	6031      	str	r1, [r6, #0]
   1874e:	4651      	mov	r1, sl
   18750:	3210      	adds	r2, #16
   18752:	3301      	adds	r3, #1
   18754:	6071      	str	r1, [r6, #4]
   18756:	60ba      	str	r2, [r7, #8]
   18758:	607b      	str	r3, [r7, #4]
   1875a:	2b07      	cmp	r3, #7
   1875c:	ddf0      	ble.n	18740 <_vfprintf_r+0xd20>
   1875e:	003a      	movs	r2, r7
   18760:	0021      	movs	r1, r4
   18762:	9806      	ldr	r0, [sp, #24]
   18764:	f003 fc4e 	bl	1c004 <__sprint_r>
   18768:	2800      	cmp	r0, #0
   1876a:	d000      	beq.n	1876e <_vfprintf_r+0xd4e>
   1876c:	e6c1      	b.n	184f2 <_vfprintf_r+0xad2>
   1876e:	68ba      	ldr	r2, [r7, #8]
   18770:	687b      	ldr	r3, [r7, #4]
   18772:	ae32      	add	r6, sp, #200	; 0xc8
   18774:	e7e5      	b.n	18742 <_vfprintf_r+0xd22>
   18776:	990c      	ldr	r1, [sp, #48]	; 0x30
   18778:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   1877a:	0008      	movs	r0, r1
   1877c:	4310      	orrs	r0, r2
   1877e:	2302      	movs	r3, #2
   18780:	0002      	movs	r2, r0
   18782:	f7ff fa93 	bl	17cac <_vfprintf_r+0x28c>
   18786:	46a3      	mov	fp, r4
   18788:	0014      	movs	r4, r2
   1878a:	464a      	mov	r2, r9
   1878c:	1964      	adds	r4, r4, r5
   1878e:	3301      	adds	r3, #1
   18790:	6032      	str	r2, [r6, #0]
   18792:	6075      	str	r5, [r6, #4]
   18794:	60bc      	str	r4, [r7, #8]
   18796:	607b      	str	r3, [r7, #4]
   18798:	2b07      	cmp	r3, #7
   1879a:	dc00      	bgt.n	1879e <_vfprintf_r+0xd7e>
   1879c:	e542      	b.n	18224 <_vfprintf_r+0x804>
   1879e:	e5e8      	b.n	18372 <_vfprintf_r+0x952>
   187a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   187a2:	681a      	ldr	r2, [r3, #0]
   187a4:	f7ff fa68 	bl	17c78 <_vfprintf_r+0x258>
   187a8:	6813      	ldr	r3, [r2, #0]
   187aa:	9308      	str	r3, [sp, #32]
   187ac:	f7ff fb57 	bl	17e5e <_vfprintf_r+0x43e>
   187b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   187b2:	681a      	ldr	r2, [r3, #0]
   187b4:	e412      	b.n	17fdc <_vfprintf_r+0x5bc>
   187b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   187b8:	681a      	ldr	r2, [r3, #0]
   187ba:	e426      	b.n	1800a <_vfprintf_r+0x5ea>
   187bc:	2b30      	cmp	r3, #48	; 0x30
   187be:	d100      	bne.n	187c2 <_vfprintf_r+0xda2>
   187c0:	e23c      	b.n	18c3c <_vfprintf_r+0x121c>
   187c2:	2330      	movs	r3, #48	; 0x30
   187c4:	3a02      	subs	r2, #2
   187c6:	7013      	strb	r3, [r2, #0]
   187c8:	ab32      	add	r3, sp, #200	; 0xc8
   187ca:	1a9b      	subs	r3, r3, r2
   187cc:	930e      	str	r3, [sp, #56]	; 0x38
   187ce:	9211      	str	r2, [sp, #68]	; 0x44
   187d0:	f7ff fa93 	bl	17cfa <_vfprintf_r+0x2da>
   187d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   187d6:	2b09      	cmp	r3, #9
   187d8:	d900      	bls.n	187dc <_vfprintf_r+0xdbc>
   187da:	e768      	b.n	186ae <_vfprintf_r+0xc8e>
   187dc:	9c09      	ldr	r4, [sp, #36]	; 0x24
   187de:	2227      	movs	r2, #39	; 0x27
   187e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   187e2:	a928      	add	r1, sp, #160	; 0xa0
   187e4:	3330      	adds	r3, #48	; 0x30
   187e6:	548b      	strb	r3, [r1, r2]
   187e8:	2301      	movs	r3, #1
   187ea:	aa16      	add	r2, sp, #88	; 0x58
   187ec:	4694      	mov	ip, r2
   187ee:	930e      	str	r3, [sp, #56]	; 0x38
   187f0:	336e      	adds	r3, #110	; 0x6e
   187f2:	4463      	add	r3, ip
   187f4:	9409      	str	r4, [sp, #36]	; 0x24
   187f6:	9311      	str	r3, [sp, #68]	; 0x44
   187f8:	f7ff fa7f 	bl	17cfa <_vfprintf_r+0x2da>
   187fc:	46c3      	mov	fp, r8
   187fe:	46a9      	mov	r9, r5
   18800:	46a0      	mov	r8, r4
   18802:	0014      	movs	r4, r2
   18804:	464a      	mov	r2, r9
   18806:	6032      	str	r2, [r6, #0]
   18808:	4642      	mov	r2, r8
   1880a:	4444      	add	r4, r8
   1880c:	3301      	adds	r3, #1
   1880e:	6072      	str	r2, [r6, #4]
   18810:	60bc      	str	r4, [r7, #8]
   18812:	607b      	str	r3, [r7, #4]
   18814:	2b07      	cmp	r3, #7
   18816:	dc00      	bgt.n	1881a <_vfprintf_r+0xdfa>
   18818:	e18d      	b.n	18b36 <_vfprintf_r+0x1116>
   1881a:	003a      	movs	r2, r7
   1881c:	4659      	mov	r1, fp
   1881e:	9806      	ldr	r0, [sp, #24]
   18820:	f003 fbf0 	bl	1c004 <__sprint_r>
   18824:	2800      	cmp	r0, #0
   18826:	d000      	beq.n	1882a <_vfprintf_r+0xe0a>
   18828:	e68a      	b.n	18540 <_vfprintf_r+0xb20>
   1882a:	68bc      	ldr	r4, [r7, #8]
   1882c:	ae32      	add	r6, sp, #200	; 0xc8
   1882e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18830:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18832:	4293      	cmp	r3, r2
   18834:	db00      	blt.n	18838 <_vfprintf_r+0xe18>
   18836:	e179      	b.n	18b2c <_vfprintf_r+0x110c>
   18838:	9a18      	ldr	r2, [sp, #96]	; 0x60
   1883a:	6032      	str	r2, [r6, #0]
   1883c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1883e:	4694      	mov	ip, r2
   18840:	6072      	str	r2, [r6, #4]
   18842:	687a      	ldr	r2, [r7, #4]
   18844:	4464      	add	r4, ip
   18846:	3201      	adds	r2, #1
   18848:	60bc      	str	r4, [r7, #8]
   1884a:	607a      	str	r2, [r7, #4]
   1884c:	2a07      	cmp	r2, #7
   1884e:	dd00      	ble.n	18852 <_vfprintf_r+0xe32>
   18850:	e176      	b.n	18b40 <_vfprintf_r+0x1120>
   18852:	3608      	adds	r6, #8
   18854:	9a14      	ldr	r2, [sp, #80]	; 0x50
   18856:	9913      	ldr	r1, [sp, #76]	; 0x4c
   18858:	1ad3      	subs	r3, r2, r3
   1885a:	1a52      	subs	r2, r2, r1
   1885c:	4690      	mov	r8, r2
   1885e:	429a      	cmp	r2, r3
   18860:	dd00      	ble.n	18864 <_vfprintf_r+0xe44>
   18862:	4698      	mov	r8, r3
   18864:	4642      	mov	r2, r8
   18866:	2a00      	cmp	r2, #0
   18868:	dd0f      	ble.n	1888a <_vfprintf_r+0xe6a>
   1886a:	9913      	ldr	r1, [sp, #76]	; 0x4c
   1886c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1886e:	468c      	mov	ip, r1
   18870:	4462      	add	r2, ip
   18872:	6032      	str	r2, [r6, #0]
   18874:	4642      	mov	r2, r8
   18876:	6072      	str	r2, [r6, #4]
   18878:	687a      	ldr	r2, [r7, #4]
   1887a:	4444      	add	r4, r8
   1887c:	3201      	adds	r2, #1
   1887e:	60bc      	str	r4, [r7, #8]
   18880:	607a      	str	r2, [r7, #4]
   18882:	2a07      	cmp	r2, #7
   18884:	dd00      	ble.n	18888 <_vfprintf_r+0xe68>
   18886:	e289      	b.n	18d9c <_vfprintf_r+0x137c>
   18888:	3608      	adds	r6, #8
   1888a:	4642      	mov	r2, r8
   1888c:	43d5      	mvns	r5, r2
   1888e:	17ed      	asrs	r5, r5, #31
   18890:	4015      	ands	r5, r2
   18892:	1b5d      	subs	r5, r3, r5
   18894:	2d00      	cmp	r5, #0
   18896:	dc00      	bgt.n	1889a <_vfprintf_r+0xe7a>
   18898:	e4c5      	b.n	18226 <_vfprintf_r+0x806>
   1889a:	4a4d      	ldr	r2, [pc, #308]	; (189d0 <_vfprintf_r+0xfb0>)
   1889c:	687b      	ldr	r3, [r7, #4]
   1889e:	4691      	mov	r9, r2
   188a0:	2d10      	cmp	r5, #16
   188a2:	dc00      	bgt.n	188a6 <_vfprintf_r+0xe86>
   188a4:	e771      	b.n	1878a <_vfprintf_r+0xd6a>
   188a6:	2210      	movs	r2, #16
   188a8:	4690      	mov	r8, r2
   188aa:	0022      	movs	r2, r4
   188ac:	465c      	mov	r4, fp
   188ae:	e004      	b.n	188ba <_vfprintf_r+0xe9a>
   188b0:	3608      	adds	r6, #8
   188b2:	3d10      	subs	r5, #16
   188b4:	2d10      	cmp	r5, #16
   188b6:	dc00      	bgt.n	188ba <_vfprintf_r+0xe9a>
   188b8:	e765      	b.n	18786 <_vfprintf_r+0xd66>
   188ba:	4649      	mov	r1, r9
   188bc:	6031      	str	r1, [r6, #0]
   188be:	4641      	mov	r1, r8
   188c0:	3210      	adds	r2, #16
   188c2:	3301      	adds	r3, #1
   188c4:	6071      	str	r1, [r6, #4]
   188c6:	60ba      	str	r2, [r7, #8]
   188c8:	607b      	str	r3, [r7, #4]
   188ca:	2b07      	cmp	r3, #7
   188cc:	ddf0      	ble.n	188b0 <_vfprintf_r+0xe90>
   188ce:	003a      	movs	r2, r7
   188d0:	0021      	movs	r1, r4
   188d2:	9806      	ldr	r0, [sp, #24]
   188d4:	f003 fb96 	bl	1c004 <__sprint_r>
   188d8:	2800      	cmp	r0, #0
   188da:	d000      	beq.n	188de <_vfprintf_r+0xebe>
   188dc:	e609      	b.n	184f2 <_vfprintf_r+0xad2>
   188de:	68ba      	ldr	r2, [r7, #8]
   188e0:	687b      	ldr	r3, [r7, #4]
   188e2:	ae32      	add	r6, sp, #200	; 0xc8
   188e4:	e7e5      	b.n	188b2 <_vfprintf_r+0xe92>
   188e6:	003a      	movs	r2, r7
   188e8:	4659      	mov	r1, fp
   188ea:	9806      	ldr	r0, [sp, #24]
   188ec:	f003 fb8a 	bl	1c004 <__sprint_r>
   188f0:	2800      	cmp	r0, #0
   188f2:	d000      	beq.n	188f6 <_vfprintf_r+0xed6>
   188f4:	e624      	b.n	18540 <_vfprintf_r+0xb20>
   188f6:	68bc      	ldr	r4, [r7, #8]
   188f8:	687b      	ldr	r3, [r7, #4]
   188fa:	ae32      	add	r6, sp, #200	; 0xc8
   188fc:	e504      	b.n	18308 <_vfprintf_r+0x8e8>
   188fe:	2307      	movs	r3, #7
   18900:	3207      	adds	r2, #7
   18902:	439a      	bics	r2, r3
   18904:	3301      	adds	r3, #1
   18906:	469c      	mov	ip, r3
   18908:	4494      	add	ip, r2
   1890a:	4663      	mov	r3, ip
   1890c:	930f      	str	r3, [sp, #60]	; 0x3c
   1890e:	6853      	ldr	r3, [r2, #4]
   18910:	6812      	ldr	r2, [r2, #0]
   18912:	930d      	str	r3, [sp, #52]	; 0x34
   18914:	920c      	str	r2, [sp, #48]	; 0x30
   18916:	f7ff faa7 	bl	17e68 <_vfprintf_r+0x448>
   1891a:	2207      	movs	r2, #7
   1891c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1891e:	3307      	adds	r3, #7
   18920:	4393      	bics	r3, r2
   18922:	3201      	adds	r2, #1
   18924:	4694      	mov	ip, r2
   18926:	449c      	add	ip, r3
   18928:	4662      	mov	r2, ip
   1892a:	920f      	str	r2, [sp, #60]	; 0x3c
   1892c:	681a      	ldr	r2, [r3, #0]
   1892e:	685b      	ldr	r3, [r3, #4]
   18930:	0011      	movs	r1, r2
   18932:	001a      	movs	r2, r3
   18934:	0008      	movs	r0, r1
   18936:	4310      	orrs	r0, r2
   18938:	910c      	str	r1, [sp, #48]	; 0x30
   1893a:	920d      	str	r2, [sp, #52]	; 0x34
   1893c:	2300      	movs	r3, #0
   1893e:	0002      	movs	r2, r0
   18940:	f7ff f9b4 	bl	17cac <_vfprintf_r+0x28c>
   18944:	46a3      	mov	fp, r4
   18946:	4698      	mov	r8, r3
   18948:	0014      	movs	r4, r2
   1894a:	464b      	mov	r3, r9
   1894c:	6075      	str	r5, [r6, #4]
   1894e:	6033      	str	r3, [r6, #0]
   18950:	1964      	adds	r4, r4, r5
   18952:	e4f7      	b.n	18344 <_vfprintf_r+0x924>
   18954:	003a      	movs	r2, r7
   18956:	4659      	mov	r1, fp
   18958:	9806      	ldr	r0, [sp, #24]
   1895a:	f003 fb53 	bl	1c004 <__sprint_r>
   1895e:	2800      	cmp	r0, #0
   18960:	d000      	beq.n	18964 <_vfprintf_r+0xf44>
   18962:	e5ed      	b.n	18540 <_vfprintf_r+0xb20>
   18964:	687b      	ldr	r3, [r7, #4]
   18966:	68bc      	ldr	r4, [r7, #8]
   18968:	4698      	mov	r8, r3
   1896a:	ae32      	add	r6, sp, #200	; 0xc8
   1896c:	e4da      	b.n	18324 <_vfprintf_r+0x904>
   1896e:	2207      	movs	r2, #7
   18970:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   18972:	3307      	adds	r3, #7
   18974:	4393      	bics	r3, r2
   18976:	3201      	adds	r2, #1
   18978:	4694      	mov	ip, r2
   1897a:	449c      	add	ip, r3
   1897c:	4662      	mov	r2, ip
   1897e:	920f      	str	r2, [sp, #60]	; 0x3c
   18980:	681a      	ldr	r2, [r3, #0]
   18982:	685b      	ldr	r3, [r3, #4]
   18984:	0011      	movs	r1, r2
   18986:	001a      	movs	r2, r3
   18988:	0008      	movs	r0, r1
   1898a:	4310      	orrs	r0, r2
   1898c:	910c      	str	r1, [sp, #48]	; 0x30
   1898e:	920d      	str	r2, [sp, #52]	; 0x34
   18990:	2301      	movs	r3, #1
   18992:	0002      	movs	r2, r0
   18994:	f7ff f98a 	bl	17cac <_vfprintf_r+0x28c>
   18998:	2207      	movs	r2, #7
   1899a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1899c:	3307      	adds	r3, #7
   1899e:	4393      	bics	r3, r2
   189a0:	3201      	adds	r2, #1
   189a2:	4694      	mov	ip, r2
   189a4:	449c      	add	ip, r3
   189a6:	4662      	mov	r2, ip
   189a8:	920f      	str	r2, [sp, #60]	; 0x3c
   189aa:	681a      	ldr	r2, [r3, #0]
   189ac:	685b      	ldr	r3, [r3, #4]
   189ae:	920c      	str	r2, [sp, #48]	; 0x30
   189b0:	930d      	str	r3, [sp, #52]	; 0x34
   189b2:	f7ff f966 	bl	17c82 <_vfprintf_r+0x262>
   189b6:	003a      	movs	r2, r7
   189b8:	4659      	mov	r1, fp
   189ba:	9806      	ldr	r0, [sp, #24]
   189bc:	f003 fb22 	bl	1c004 <__sprint_r>
   189c0:	2800      	cmp	r0, #0
   189c2:	d000      	beq.n	189c6 <_vfprintf_r+0xfa6>
   189c4:	e5bc      	b.n	18540 <_vfprintf_r+0xb20>
   189c6:	68bc      	ldr	r4, [r7, #8]
   189c8:	ae32      	add	r6, sp, #200	; 0xc8
   189ca:	f7ff fbe2 	bl	18192 <_vfprintf_r+0x772>
   189ce:	46c0      	nop			; (mov r8, r8)
   189d0:	0001e218 	.word	0x0001e218
   189d4:	980c      	ldr	r0, [sp, #48]	; 0x30
   189d6:	990d      	ldr	r1, [sp, #52]	; 0x34
   189d8:	2300      	movs	r3, #0
   189da:	4242      	negs	r2, r0
   189dc:	418b      	sbcs	r3, r1
   189de:	0011      	movs	r1, r2
   189e0:	001a      	movs	r2, r3
   189e2:	232d      	movs	r3, #45	; 0x2d
   189e4:	a816      	add	r0, sp, #88	; 0x58
   189e6:	77c3      	strb	r3, [r0, #31]
   189e8:	0008      	movs	r0, r1
   189ea:	4310      	orrs	r0, r2
   189ec:	910c      	str	r1, [sp, #48]	; 0x30
   189ee:	920d      	str	r2, [sp, #52]	; 0x34
   189f0:	4698      	mov	r8, r3
   189f2:	0002      	movs	r2, r0
   189f4:	3b2c      	subs	r3, #44	; 0x2c
   189f6:	f7ff f95d 	bl	17cb4 <_vfprintf_r+0x294>
   189fa:	9916      	ldr	r1, [sp, #88]	; 0x58
   189fc:	9d15      	ldr	r5, [sp, #84]	; 0x54
   189fe:	000a      	movs	r2, r1
   18a00:	0008      	movs	r0, r1
   18a02:	002b      	movs	r3, r5
   18a04:	0029      	movs	r1, r5
   18a06:	f003 fdbd 	bl	1c584 <__aeabi_dcmpun>
   18a0a:	2800      	cmp	r0, #0
   18a0c:	d000      	beq.n	18a10 <_vfprintf_r+0xff0>
   18a0e:	e2c6      	b.n	18f9e <_vfprintf_r+0x157e>
   18a10:	4653      	mov	r3, sl
   18a12:	3301      	adds	r3, #1
   18a14:	d100      	bne.n	18a18 <_vfprintf_r+0xff8>
   18a16:	e09f      	b.n	18b58 <_vfprintf_r+0x1138>
   18a18:	2320      	movs	r3, #32
   18a1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18a1c:	439a      	bics	r2, r3
   18a1e:	920e      	str	r2, [sp, #56]	; 0x38
   18a20:	2a47      	cmp	r2, #71	; 0x47
   18a22:	d100      	bne.n	18a26 <_vfprintf_r+0x1006>
   18a24:	e1a1      	b.n	18d6a <_vfprintf_r+0x134a>
   18a26:	2380      	movs	r3, #128	; 0x80
   18a28:	005b      	lsls	r3, r3, #1
   18a2a:	4323      	orrs	r3, r4
   18a2c:	9309      	str	r3, [sp, #36]	; 0x24
   18a2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18a30:	2b00      	cmp	r3, #0
   18a32:	da00      	bge.n	18a36 <_vfprintf_r+0x1016>
   18a34:	e1ed      	b.n	18e12 <_vfprintf_r+0x13f2>
   18a36:	9a16      	ldr	r2, [sp, #88]	; 0x58
   18a38:	9308      	str	r3, [sp, #32]
   18a3a:	2300      	movs	r3, #0
   18a3c:	4691      	mov	r9, r2
   18a3e:	9310      	str	r3, [sp, #64]	; 0x40
   18a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18a42:	2b66      	cmp	r3, #102	; 0x66
   18a44:	d100      	bne.n	18a48 <_vfprintf_r+0x1028>
   18a46:	e1b8      	b.n	18dba <_vfprintf_r+0x139a>
   18a48:	2b46      	cmp	r3, #70	; 0x46
   18a4a:	d100      	bne.n	18a4e <_vfprintf_r+0x102e>
   18a4c:	e237      	b.n	18ebe <_vfprintf_r+0x149e>
   18a4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   18a50:	9806      	ldr	r0, [sp, #24]
   18a52:	3a45      	subs	r2, #69	; 0x45
   18a54:	0013      	movs	r3, r2
   18a56:	4259      	negs	r1, r3
   18a58:	4159      	adcs	r1, r3
   18a5a:	ab20      	add	r3, sp, #128	; 0x80
   18a5c:	000d      	movs	r5, r1
   18a5e:	9303      	str	r3, [sp, #12]
   18a60:	ab1f      	add	r3, sp, #124	; 0x7c
   18a62:	9302      	str	r3, [sp, #8]
   18a64:	2302      	movs	r3, #2
   18a66:	aa23      	add	r2, sp, #140	; 0x8c
   18a68:	4455      	add	r5, sl
   18a6a:	921b      	str	r2, [sp, #108]	; 0x6c
   18a6c:	9204      	str	r2, [sp, #16]
   18a6e:	9300      	str	r3, [sp, #0]
   18a70:	9501      	str	r5, [sp, #4]
   18a72:	9b08      	ldr	r3, [sp, #32]
   18a74:	464a      	mov	r2, r9
   18a76:	f000 fcab 	bl	193d0 <_dtoa_r>
   18a7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18a7c:	9011      	str	r0, [sp, #68]	; 0x44
   18a7e:	2b67      	cmp	r3, #103	; 0x67
   18a80:	d000      	beq.n	18a84 <_vfprintf_r+0x1064>
   18a82:	e20b      	b.n	18e9c <_vfprintf_r+0x147c>
   18a84:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18a86:	4698      	mov	r8, r3
   18a88:	44a8      	add	r8, r5
   18a8a:	07e3      	lsls	r3, r4, #31
   18a8c:	d400      	bmi.n	18a90 <_vfprintf_r+0x1070>
   18a8e:	e277      	b.n	18f80 <_vfprintf_r+0x1560>
   18a90:	2300      	movs	r3, #0
   18a92:	2200      	movs	r2, #0
   18a94:	4648      	mov	r0, r9
   18a96:	9908      	ldr	r1, [sp, #32]
   18a98:	f7fd f8dc 	bl	15c54 <__aeabi_dcmpeq>
   18a9c:	4643      	mov	r3, r8
   18a9e:	2800      	cmp	r0, #0
   18aa0:	d10a      	bne.n	18ab8 <_vfprintf_r+0x1098>
   18aa2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18aa4:	4543      	cmp	r3, r8
   18aa6:	d207      	bcs.n	18ab8 <_vfprintf_r+0x1098>
   18aa8:	2130      	movs	r1, #48	; 0x30
   18aaa:	4640      	mov	r0, r8
   18aac:	1c5a      	adds	r2, r3, #1
   18aae:	9223      	str	r2, [sp, #140]	; 0x8c
   18ab0:	7019      	strb	r1, [r3, #0]
   18ab2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18ab4:	4298      	cmp	r0, r3
   18ab6:	d8f9      	bhi.n	18aac <_vfprintf_r+0x108c>
   18ab8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18aba:	1a9b      	subs	r3, r3, r2
   18abc:	9314      	str	r3, [sp, #80]	; 0x50
   18abe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18ac0:	2b47      	cmp	r3, #71	; 0x47
   18ac2:	d100      	bne.n	18ac6 <_vfprintf_r+0x10a6>
   18ac4:	e0d0      	b.n	18c68 <_vfprintf_r+0x1248>
   18ac6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18ac8:	2b65      	cmp	r3, #101	; 0x65
   18aca:	dc00      	bgt.n	18ace <_vfprintf_r+0x10ae>
   18acc:	e2d5      	b.n	1907a <_vfprintf_r+0x165a>
   18ace:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18ad0:	2b66      	cmp	r3, #102	; 0x66
   18ad2:	d100      	bne.n	18ad6 <_vfprintf_r+0x10b6>
   18ad4:	e1c6      	b.n	18e64 <_vfprintf_r+0x1444>
   18ad6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18ad8:	9313      	str	r3, [sp, #76]	; 0x4c
   18ada:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18adc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18ade:	0019      	movs	r1, r3
   18ae0:	4291      	cmp	r1, r2
   18ae2:	dd00      	ble.n	18ae6 <_vfprintf_r+0x10c6>
   18ae4:	e1a0      	b.n	18e28 <_vfprintf_r+0x1408>
   18ae6:	07e3      	lsls	r3, r4, #31
   18ae8:	d500      	bpl.n	18aec <_vfprintf_r+0x10cc>
   18aea:	e242      	b.n	18f72 <_vfprintf_r+0x1552>
   18aec:	43d3      	mvns	r3, r2
   18aee:	17db      	asrs	r3, r3, #31
   18af0:	0011      	movs	r1, r2
   18af2:	401a      	ands	r2, r3
   18af4:	2367      	movs	r3, #103	; 0x67
   18af6:	9208      	str	r2, [sp, #32]
   18af8:	910e      	str	r1, [sp, #56]	; 0x38
   18afa:	9312      	str	r3, [sp, #72]	; 0x48
   18afc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   18afe:	2b00      	cmp	r3, #0
   18b00:	d000      	beq.n	18b04 <_vfprintf_r+0x10e4>
   18b02:	e0a9      	b.n	18c58 <_vfprintf_r+0x1238>
   18b04:	ab16      	add	r3, sp, #88	; 0x58
   18b06:	7fdb      	ldrb	r3, [r3, #31]
   18b08:	4698      	mov	r8, r3
   18b0a:	2300      	movs	r3, #0
   18b0c:	469a      	mov	sl, r3
   18b0e:	f7ff f8fc 	bl	17d0a <_vfprintf_r+0x2ea>
   18b12:	46cb      	mov	fp, r9
   18b14:	46a1      	mov	r9, r4
   18b16:	0014      	movs	r4, r2
   18b18:	e637      	b.n	1878a <_vfprintf_r+0xd6a>
   18b1a:	464b      	mov	r3, r9
   18b1c:	6d98      	ldr	r0, [r3, #88]	; 0x58
   18b1e:	f002 f861 	bl	1abe4 <__retarget_lock_release_recursive>
   18b22:	2301      	movs	r3, #1
   18b24:	425b      	negs	r3, r3
   18b26:	930a      	str	r3, [sp, #40]	; 0x28
   18b28:	f7ff f82b 	bl	17b82 <_vfprintf_r+0x162>
   18b2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   18b2e:	07d2      	lsls	r2, r2, #31
   18b30:	d400      	bmi.n	18b34 <_vfprintf_r+0x1114>
   18b32:	e68f      	b.n	18854 <_vfprintf_r+0xe34>
   18b34:	e680      	b.n	18838 <_vfprintf_r+0xe18>
   18b36:	3608      	adds	r6, #8
   18b38:	e679      	b.n	1882e <_vfprintf_r+0xe0e>
   18b3a:	68bc      	ldr	r4, [r7, #8]
   18b3c:	f7ff fb73 	bl	18226 <_vfprintf_r+0x806>
   18b40:	003a      	movs	r2, r7
   18b42:	4659      	mov	r1, fp
   18b44:	9806      	ldr	r0, [sp, #24]
   18b46:	f003 fa5d 	bl	1c004 <__sprint_r>
   18b4a:	2800      	cmp	r0, #0
   18b4c:	d000      	beq.n	18b50 <_vfprintf_r+0x1130>
   18b4e:	e4f7      	b.n	18540 <_vfprintf_r+0xb20>
   18b50:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18b52:	68bc      	ldr	r4, [r7, #8]
   18b54:	ae32      	add	r6, sp, #200	; 0xc8
   18b56:	e67d      	b.n	18854 <_vfprintf_r+0xe34>
   18b58:	2320      	movs	r3, #32
   18b5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   18b5c:	439a      	bics	r2, r3
   18b5e:	3b1a      	subs	r3, #26
   18b60:	920e      	str	r2, [sp, #56]	; 0x38
   18b62:	469a      	mov	sl, r3
   18b64:	e75f      	b.n	18a26 <_vfprintf_r+0x1006>
   18b66:	232d      	movs	r3, #45	; 0x2d
   18b68:	aa16      	add	r2, sp, #88	; 0x58
   18b6a:	77d3      	strb	r3, [r2, #31]
   18b6c:	4698      	mov	r8, r3
   18b6e:	f7ff faa8 	bl	180c2 <_vfprintf_r+0x6a2>
   18b72:	003a      	movs	r2, r7
   18b74:	4659      	mov	r1, fp
   18b76:	9806      	ldr	r0, [sp, #24]
   18b78:	f003 fa44 	bl	1c004 <__sprint_r>
   18b7c:	2800      	cmp	r0, #0
   18b7e:	d000      	beq.n	18b82 <_vfprintf_r+0x1162>
   18b80:	e4de      	b.n	18540 <_vfprintf_r+0xb20>
   18b82:	ae32      	add	r6, sp, #200	; 0xc8
   18b84:	e419      	b.n	183ba <_vfprintf_r+0x99a>
   18b86:	4be3      	ldr	r3, [pc, #908]	; (18f14 <_vfprintf_r+0x14f4>)
   18b88:	3401      	adds	r4, #1
   18b8a:	6033      	str	r3, [r6, #0]
   18b8c:	2301      	movs	r3, #1
   18b8e:	6073      	str	r3, [r6, #4]
   18b90:	687b      	ldr	r3, [r7, #4]
   18b92:	60bc      	str	r4, [r7, #8]
   18b94:	3301      	adds	r3, #1
   18b96:	607b      	str	r3, [r7, #4]
   18b98:	2b07      	cmp	r3, #7
   18b9a:	dd00      	ble.n	18b9e <_vfprintf_r+0x117e>
   18b9c:	e155      	b.n	18e4a <_vfprintf_r+0x142a>
   18b9e:	3608      	adds	r6, #8
   18ba0:	2800      	cmp	r0, #0
   18ba2:	d107      	bne.n	18bb4 <_vfprintf_r+0x1194>
   18ba4:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18ba6:	2b00      	cmp	r3, #0
   18ba8:	d104      	bne.n	18bb4 <_vfprintf_r+0x1194>
   18baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
   18bac:	07db      	lsls	r3, r3, #31
   18bae:	d401      	bmi.n	18bb4 <_vfprintf_r+0x1194>
   18bb0:	f7ff fb39 	bl	18226 <_vfprintf_r+0x806>
   18bb4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   18bb6:	6033      	str	r3, [r6, #0]
   18bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   18bba:	1919      	adds	r1, r3, r4
   18bbc:	6073      	str	r3, [r6, #4]
   18bbe:	687b      	ldr	r3, [r7, #4]
   18bc0:	60b9      	str	r1, [r7, #8]
   18bc2:	3301      	adds	r3, #1
   18bc4:	607b      	str	r3, [r7, #4]
   18bc6:	2b07      	cmp	r3, #7
   18bc8:	dd00      	ble.n	18bcc <_vfprintf_r+0x11ac>
   18bca:	e1c4      	b.n	18f56 <_vfprintf_r+0x1536>
   18bcc:	0032      	movs	r2, r6
   18bce:	3208      	adds	r2, #8
   18bd0:	2800      	cmp	r0, #0
   18bd2:	da00      	bge.n	18bd6 <_vfprintf_r+0x11b6>
   18bd4:	e195      	b.n	18f02 <_vfprintf_r+0x14e2>
   18bd6:	9811      	ldr	r0, [sp, #68]	; 0x44
   18bd8:	3301      	adds	r3, #1
   18bda:	6010      	str	r0, [r2, #0]
   18bdc:	9814      	ldr	r0, [sp, #80]	; 0x50
   18bde:	607b      	str	r3, [r7, #4]
   18be0:	1844      	adds	r4, r0, r1
   18be2:	6050      	str	r0, [r2, #4]
   18be4:	60bc      	str	r4, [r7, #8]
   18be6:	2b07      	cmp	r3, #7
   18be8:	dd01      	ble.n	18bee <_vfprintf_r+0x11ce>
   18bea:	f7ff fbc2 	bl	18372 <_vfprintf_r+0x952>
   18bee:	3208      	adds	r2, #8
   18bf0:	0016      	movs	r6, r2
   18bf2:	f7ff fb18 	bl	18226 <_vfprintf_r+0x806>
   18bf6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   18bf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   18bfa:	680b      	ldr	r3, [r1, #0]
   18bfc:	601a      	str	r2, [r3, #0]
   18bfe:	17d2      	asrs	r2, r2, #31
   18c00:	605a      	str	r2, [r3, #4]
   18c02:	000b      	movs	r3, r1
   18c04:	3304      	adds	r3, #4
   18c06:	930f      	str	r3, [sp, #60]	; 0x3c
   18c08:	f7fe ff58 	bl	17abc <_vfprintf_r+0x9c>
   18c0c:	464b      	mov	r3, r9
   18c0e:	9a07      	ldr	r2, [sp, #28]
   18c10:	431c      	orrs	r4, r3
   18c12:	3201      	adds	r2, #1
   18c14:	7813      	ldrb	r3, [r2, #0]
   18c16:	9207      	str	r2, [sp, #28]
   18c18:	f7fe ff8b 	bl	17b32 <_vfprintf_r+0x112>
   18c1c:	003a      	movs	r2, r7
   18c1e:	4659      	mov	r1, fp
   18c20:	9806      	ldr	r0, [sp, #24]
   18c22:	f003 f9ef 	bl	1c004 <__sprint_r>
   18c26:	2800      	cmp	r0, #0
   18c28:	d000      	beq.n	18c2c <_vfprintf_r+0x120c>
   18c2a:	e489      	b.n	18540 <_vfprintf_r+0xb20>
   18c2c:	68bc      	ldr	r4, [r7, #8]
   18c2e:	ae32      	add	r6, sp, #200	; 0xc8
   18c30:	f7ff fbdc 	bl	183ec <_vfprintf_r+0x9cc>
   18c34:	4bb8      	ldr	r3, [pc, #736]	; (18f18 <_vfprintf_r+0x14f8>)
   18c36:	9311      	str	r3, [sp, #68]	; 0x44
   18c38:	f7ff fa4a 	bl	180d0 <_vfprintf_r+0x6b0>
   18c3c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   18c3e:	ab32      	add	r3, sp, #200	; 0xc8
   18c40:	1a9b      	subs	r3, r3, r2
   18c42:	930e      	str	r3, [sp, #56]	; 0x38
   18c44:	f7ff f859 	bl	17cfa <_vfprintf_r+0x2da>
   18c48:	9811      	ldr	r0, [sp, #68]	; 0x44
   18c4a:	f7fd fbb3 	bl	163b4 <strlen>
   18c4e:	0002      	movs	r2, r0
   18c50:	900e      	str	r0, [sp, #56]	; 0x38
   18c52:	0003      	movs	r3, r0
   18c54:	f7ff f9a1 	bl	17f9a <_vfprintf_r+0x57a>
   18c58:	232d      	movs	r3, #45	; 0x2d
   18c5a:	aa16      	add	r2, sp, #88	; 0x58
   18c5c:	77d3      	strb	r3, [r2, #31]
   18c5e:	4698      	mov	r8, r3
   18c60:	2300      	movs	r3, #0
   18c62:	469a      	mov	sl, r3
   18c64:	f7ff f854 	bl	17d10 <_vfprintf_r+0x2f0>
   18c68:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18c6a:	9313      	str	r3, [sp, #76]	; 0x4c
   18c6c:	1cda      	adds	r2, r3, #3
   18c6e:	db02      	blt.n	18c76 <_vfprintf_r+0x1256>
   18c70:	459a      	cmp	sl, r3
   18c72:	db00      	blt.n	18c76 <_vfprintf_r+0x1256>
   18c74:	e731      	b.n	18ada <_vfprintf_r+0x10ba>
   18c76:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18c78:	3b02      	subs	r3, #2
   18c7a:	9312      	str	r3, [sp, #72]	; 0x48
   18c7c:	222c      	movs	r2, #44	; 0x2c
   18c7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18c80:	2148      	movs	r1, #72	; 0x48
   18c82:	1e5d      	subs	r5, r3, #1
   18c84:	ab16      	add	r3, sp, #88	; 0x58
   18c86:	189b      	adds	r3, r3, r2
   18c88:	466a      	mov	r2, sp
   18c8a:	1852      	adds	r2, r2, r1
   18c8c:	7812      	ldrb	r2, [r2, #0]
   18c8e:	951f      	str	r5, [sp, #124]	; 0x7c
   18c90:	701a      	strb	r2, [r3, #0]
   18c92:	2d00      	cmp	r5, #0
   18c94:	da00      	bge.n	18c98 <_vfprintf_r+0x1278>
   18c96:	e1cb      	b.n	19030 <_vfprintf_r+0x1610>
   18c98:	212d      	movs	r1, #45	; 0x2d
   18c9a:	232b      	movs	r3, #43	; 0x2b
   18c9c:	aa16      	add	r2, sp, #88	; 0x58
   18c9e:	1852      	adds	r2, r2, r1
   18ca0:	7013      	strb	r3, [r2, #0]
   18ca2:	2d09      	cmp	r5, #9
   18ca4:	dc00      	bgt.n	18ca8 <_vfprintf_r+0x1288>
   18ca6:	e16d      	b.n	18f84 <_vfprintf_r+0x1564>
   18ca8:	aa16      	add	r2, sp, #88	; 0x58
   18caa:	233b      	movs	r3, #59	; 0x3b
   18cac:	4694      	mov	ip, r2
   18cae:	4463      	add	r3, ip
   18cb0:	469a      	mov	sl, r3
   18cb2:	46b1      	mov	r9, r6
   18cb4:	46a0      	mov	r8, r4
   18cb6:	4656      	mov	r6, sl
   18cb8:	e000      	b.n	18cbc <_vfprintf_r+0x129c>
   18cba:	0026      	movs	r6, r4
   18cbc:	0028      	movs	r0, r5
   18cbe:	210a      	movs	r1, #10
   18cc0:	f7fa f996 	bl	12ff0 <__aeabi_idivmod>
   18cc4:	1e74      	subs	r4, r6, #1
   18cc6:	3130      	adds	r1, #48	; 0x30
   18cc8:	7021      	strb	r1, [r4, #0]
   18cca:	0028      	movs	r0, r5
   18ccc:	210a      	movs	r1, #10
   18cce:	f7fa f8a9 	bl	12e24 <__divsi3>
   18cd2:	0005      	movs	r5, r0
   18cd4:	2809      	cmp	r0, #9
   18cd6:	dcf0      	bgt.n	18cba <_vfprintf_r+0x129a>
   18cd8:	0023      	movs	r3, r4
   18cda:	4644      	mov	r4, r8
   18cdc:	46b0      	mov	r8, r6
   18cde:	464e      	mov	r6, r9
   18ce0:	4699      	mov	r9, r3
   18ce2:	0003      	movs	r3, r0
   18ce4:	3330      	adds	r3, #48	; 0x30
   18ce6:	b2d8      	uxtb	r0, r3
   18ce8:	4643      	mov	r3, r8
   18cea:	3b02      	subs	r3, #2
   18cec:	7018      	strb	r0, [r3, #0]
   18cee:	459a      	cmp	sl, r3
   18cf0:	d800      	bhi.n	18cf4 <_vfprintf_r+0x12d4>
   18cf2:	e1f6      	b.n	190e2 <_vfprintf_r+0x16c2>
   18cf4:	4642      	mov	r2, r8
   18cf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   18cf8:	4645      	mov	r5, r8
   18cfa:	1a99      	subs	r1, r3, r2
   18cfc:	2301      	movs	r3, #1
   18cfe:	3107      	adds	r1, #7
   18d00:	425b      	negs	r3, r3
   18d02:	e001      	b.n	18d08 <_vfprintf_r+0x12e8>
   18d04:	5ce8      	ldrb	r0, [r5, r3]
   18d06:	3301      	adds	r3, #1
   18d08:	aa21      	add	r2, sp, #132	; 0x84
   18d0a:	18d2      	adds	r2, r2, r3
   18d0c:	70d0      	strb	r0, [r2, #3]
   18d0e:	428b      	cmp	r3, r1
   18d10:	d1f8      	bne.n	18d04 <_vfprintf_r+0x12e4>
   18d12:	a916      	add	r1, sp, #88	; 0x58
   18d14:	468c      	mov	ip, r1
   18d16:	222e      	movs	r2, #46	; 0x2e
   18d18:	464b      	mov	r3, r9
   18d1a:	4462      	add	r2, ip
   18d1c:	4694      	mov	ip, r2
   18d1e:	1afb      	subs	r3, r7, r3
   18d20:	4463      	add	r3, ip
   18d22:	aa21      	add	r2, sp, #132	; 0x84
   18d24:	9914      	ldr	r1, [sp, #80]	; 0x50
   18d26:	1a9b      	subs	r3, r3, r2
   18d28:	469c      	mov	ip, r3
   18d2a:	000a      	movs	r2, r1
   18d2c:	4462      	add	r2, ip
   18d2e:	931a      	str	r3, [sp, #104]	; 0x68
   18d30:	920e      	str	r2, [sp, #56]	; 0x38
   18d32:	2901      	cmp	r1, #1
   18d34:	dc00      	bgt.n	18d38 <_vfprintf_r+0x1318>
   18d36:	e170      	b.n	1901a <_vfprintf_r+0x15fa>
   18d38:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18d3a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   18d3c:	4694      	mov	ip, r2
   18d3e:	4463      	add	r3, ip
   18d40:	001a      	movs	r2, r3
   18d42:	930e      	str	r3, [sp, #56]	; 0x38
   18d44:	43db      	mvns	r3, r3
   18d46:	17db      	asrs	r3, r3, #31
   18d48:	401a      	ands	r2, r3
   18d4a:	2300      	movs	r3, #0
   18d4c:	9208      	str	r2, [sp, #32]
   18d4e:	9313      	str	r3, [sp, #76]	; 0x4c
   18d50:	e6d4      	b.n	18afc <_vfprintf_r+0x10dc>
   18d52:	003a      	movs	r2, r7
   18d54:	4659      	mov	r1, fp
   18d56:	9806      	ldr	r0, [sp, #24]
   18d58:	f003 f954 	bl	1c004 <__sprint_r>
   18d5c:	2800      	cmp	r0, #0
   18d5e:	d001      	beq.n	18d64 <_vfprintf_r+0x1344>
   18d60:	f7ff fbee 	bl	18540 <_vfprintf_r+0xb20>
   18d64:	68bc      	ldr	r4, [r7, #8]
   18d66:	ae32      	add	r6, sp, #200	; 0xc8
   18d68:	e46a      	b.n	18640 <_vfprintf_r+0xc20>
   18d6a:	4653      	mov	r3, sl
   18d6c:	2b00      	cmp	r3, #0
   18d6e:	d000      	beq.n	18d72 <_vfprintf_r+0x1352>
   18d70:	e659      	b.n	18a26 <_vfprintf_r+0x1006>
   18d72:	3301      	adds	r3, #1
   18d74:	469a      	mov	sl, r3
   18d76:	e656      	b.n	18a26 <_vfprintf_r+0x1006>
   18d78:	4653      	mov	r3, sl
   18d7a:	9308      	str	r3, [sp, #32]
   18d7c:	2b06      	cmp	r3, #6
   18d7e:	d901      	bls.n	18d84 <_vfprintf_r+0x1364>
   18d80:	2306      	movs	r3, #6
   18d82:	9308      	str	r3, [sp, #32]
   18d84:	9b08      	ldr	r3, [sp, #32]
   18d86:	950f      	str	r5, [sp, #60]	; 0x3c
   18d88:	930e      	str	r3, [sp, #56]	; 0x38
   18d8a:	2300      	movs	r3, #0
   18d8c:	4698      	mov	r8, r3
   18d8e:	469a      	mov	sl, r3
   18d90:	9313      	str	r3, [sp, #76]	; 0x4c
   18d92:	4b62      	ldr	r3, [pc, #392]	; (18f1c <_vfprintf_r+0x14fc>)
   18d94:	9409      	str	r4, [sp, #36]	; 0x24
   18d96:	9311      	str	r3, [sp, #68]	; 0x44
   18d98:	f7fe ffbd 	bl	17d16 <_vfprintf_r+0x2f6>
   18d9c:	003a      	movs	r2, r7
   18d9e:	4659      	mov	r1, fp
   18da0:	9806      	ldr	r0, [sp, #24]
   18da2:	f003 f92f 	bl	1c004 <__sprint_r>
   18da6:	2800      	cmp	r0, #0
   18da8:	d001      	beq.n	18dae <_vfprintf_r+0x138e>
   18daa:	f7ff fbc9 	bl	18540 <_vfprintf_r+0xb20>
   18dae:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18db0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   18db2:	68bc      	ldr	r4, [r7, #8]
   18db4:	1a9b      	subs	r3, r3, r2
   18db6:	ae32      	add	r6, sp, #200	; 0xc8
   18db8:	e567      	b.n	1888a <_vfprintf_r+0xe6a>
   18dba:	ab23      	add	r3, sp, #140	; 0x8c
   18dbc:	931b      	str	r3, [sp, #108]	; 0x6c
   18dbe:	9304      	str	r3, [sp, #16]
   18dc0:	ab20      	add	r3, sp, #128	; 0x80
   18dc2:	9303      	str	r3, [sp, #12]
   18dc4:	ab1f      	add	r3, sp, #124	; 0x7c
   18dc6:	9302      	str	r3, [sp, #8]
   18dc8:	4653      	mov	r3, sl
   18dca:	9301      	str	r3, [sp, #4]
   18dcc:	2303      	movs	r3, #3
   18dce:	464a      	mov	r2, r9
   18dd0:	9300      	str	r3, [sp, #0]
   18dd2:	9806      	ldr	r0, [sp, #24]
   18dd4:	9b08      	ldr	r3, [sp, #32]
   18dd6:	f000 fafb 	bl	193d0 <_dtoa_r>
   18dda:	0003      	movs	r3, r0
   18ddc:	4453      	add	r3, sl
   18dde:	4698      	mov	r8, r3
   18de0:	4655      	mov	r5, sl
   18de2:	9011      	str	r0, [sp, #68]	; 0x44
   18de4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18de6:	781b      	ldrb	r3, [r3, #0]
   18de8:	2b30      	cmp	r3, #48	; 0x30
   18dea:	d002      	beq.n	18df2 <_vfprintf_r+0x13d2>
   18dec:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18dee:	4498      	add	r8, r3
   18df0:	e64e      	b.n	18a90 <_vfprintf_r+0x1070>
   18df2:	2200      	movs	r2, #0
   18df4:	2300      	movs	r3, #0
   18df6:	4648      	mov	r0, r9
   18df8:	9908      	ldr	r1, [sp, #32]
   18dfa:	f7fc ff2b 	bl	15c54 <__aeabi_dcmpeq>
   18dfe:	2800      	cmp	r0, #0
   18e00:	d1f4      	bne.n	18dec <_vfprintf_r+0x13cc>
   18e02:	2301      	movs	r3, #1
   18e04:	1b5b      	subs	r3, r3, r5
   18e06:	931f      	str	r3, [sp, #124]	; 0x7c
   18e08:	4498      	add	r8, r3
   18e0a:	e641      	b.n	18a90 <_vfprintf_r+0x1070>
   18e0c:	46c1      	mov	r9, r8
   18e0e:	f7ff fb1f 	bl	18450 <_vfprintf_r+0xa30>
   18e12:	2280      	movs	r2, #128	; 0x80
   18e14:	0612      	lsls	r2, r2, #24
   18e16:	4694      	mov	ip, r2
   18e18:	9b16      	ldr	r3, [sp, #88]	; 0x58
   18e1a:	4699      	mov	r9, r3
   18e1c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18e1e:	4463      	add	r3, ip
   18e20:	9308      	str	r3, [sp, #32]
   18e22:	232d      	movs	r3, #45	; 0x2d
   18e24:	9310      	str	r3, [sp, #64]	; 0x40
   18e26:	e60b      	b.n	18a40 <_vfprintf_r+0x1020>
   18e28:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18e2a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   18e2c:	4694      	mov	ip, r2
   18e2e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   18e30:	4463      	add	r3, ip
   18e32:	930e      	str	r3, [sp, #56]	; 0x38
   18e34:	2a00      	cmp	r2, #0
   18e36:	dc00      	bgt.n	18e3a <_vfprintf_r+0x141a>
   18e38:	e0e3      	b.n	19002 <_vfprintf_r+0x15e2>
   18e3a:	001a      	movs	r2, r3
   18e3c:	43db      	mvns	r3, r3
   18e3e:	17db      	asrs	r3, r3, #31
   18e40:	401a      	ands	r2, r3
   18e42:	2367      	movs	r3, #103	; 0x67
   18e44:	9208      	str	r2, [sp, #32]
   18e46:	9312      	str	r3, [sp, #72]	; 0x48
   18e48:	e658      	b.n	18afc <_vfprintf_r+0x10dc>
   18e4a:	003a      	movs	r2, r7
   18e4c:	4659      	mov	r1, fp
   18e4e:	9806      	ldr	r0, [sp, #24]
   18e50:	f003 f8d8 	bl	1c004 <__sprint_r>
   18e54:	2800      	cmp	r0, #0
   18e56:	d001      	beq.n	18e5c <_vfprintf_r+0x143c>
   18e58:	f7ff fb72 	bl	18540 <_vfprintf_r+0xb20>
   18e5c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   18e5e:	68bc      	ldr	r4, [r7, #8]
   18e60:	ae32      	add	r6, sp, #200	; 0xc8
   18e62:	e69d      	b.n	18ba0 <_vfprintf_r+0x1180>
   18e64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   18e66:	9313      	str	r3, [sp, #76]	; 0x4c
   18e68:	2b00      	cmp	r3, #0
   18e6a:	dc00      	bgt.n	18e6e <_vfprintf_r+0x144e>
   18e6c:	e0f2      	b.n	19054 <_vfprintf_r+0x1634>
   18e6e:	4652      	mov	r2, sl
   18e70:	2a00      	cmp	r2, #0
   18e72:	d000      	beq.n	18e76 <_vfprintf_r+0x1456>
   18e74:	e0a0      	b.n	18fb8 <_vfprintf_r+0x1598>
   18e76:	07e2      	lsls	r2, r4, #31
   18e78:	d500      	bpl.n	18e7c <_vfprintf_r+0x145c>
   18e7a:	e09d      	b.n	18fb8 <_vfprintf_r+0x1598>
   18e7c:	9308      	str	r3, [sp, #32]
   18e7e:	930e      	str	r3, [sp, #56]	; 0x38
   18e80:	e63c      	b.n	18afc <_vfprintf_r+0x10dc>
   18e82:	ab16      	add	r3, sp, #88	; 0x58
   18e84:	7fdb      	ldrb	r3, [r3, #31]
   18e86:	950f      	str	r5, [sp, #60]	; 0x3c
   18e88:	4698      	mov	r8, r3
   18e8a:	4653      	mov	r3, sl
   18e8c:	9308      	str	r3, [sp, #32]
   18e8e:	930e      	str	r3, [sp, #56]	; 0x38
   18e90:	2300      	movs	r3, #0
   18e92:	9409      	str	r4, [sp, #36]	; 0x24
   18e94:	469a      	mov	sl, r3
   18e96:	9313      	str	r3, [sp, #76]	; 0x4c
   18e98:	f7fe ff37 	bl	17d0a <_vfprintf_r+0x2ea>
   18e9c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18e9e:	4698      	mov	r8, r3
   18ea0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18ea2:	44a8      	add	r8, r5
   18ea4:	2b47      	cmp	r3, #71	; 0x47
   18ea6:	d000      	beq.n	18eaa <_vfprintf_r+0x148a>
   18ea8:	e5f2      	b.n	18a90 <_vfprintf_r+0x1070>
   18eaa:	07e3      	lsls	r3, r4, #31
   18eac:	d400      	bmi.n	18eb0 <_vfprintf_r+0x1490>
   18eae:	e0dc      	b.n	1906a <_vfprintf_r+0x164a>
   18eb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   18eb2:	4698      	mov	r8, r3
   18eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18eb6:	44a8      	add	r8, r5
   18eb8:	2b46      	cmp	r3, #70	; 0x46
   18eba:	d093      	beq.n	18de4 <_vfprintf_r+0x13c4>
   18ebc:	e5e8      	b.n	18a90 <_vfprintf_r+0x1070>
   18ebe:	ab23      	add	r3, sp, #140	; 0x8c
   18ec0:	931b      	str	r3, [sp, #108]	; 0x6c
   18ec2:	9304      	str	r3, [sp, #16]
   18ec4:	ab20      	add	r3, sp, #128	; 0x80
   18ec6:	9303      	str	r3, [sp, #12]
   18ec8:	ab1f      	add	r3, sp, #124	; 0x7c
   18eca:	9302      	str	r3, [sp, #8]
   18ecc:	4653      	mov	r3, sl
   18ece:	9301      	str	r3, [sp, #4]
   18ed0:	2303      	movs	r3, #3
   18ed2:	464a      	mov	r2, r9
   18ed4:	9300      	str	r3, [sp, #0]
   18ed6:	9806      	ldr	r0, [sp, #24]
   18ed8:	9b08      	ldr	r3, [sp, #32]
   18eda:	f000 fa79 	bl	193d0 <_dtoa_r>
   18ede:	4655      	mov	r5, sl
   18ee0:	9011      	str	r0, [sp, #68]	; 0x44
   18ee2:	e7e5      	b.n	18eb0 <_vfprintf_r+0x1490>
   18ee4:	003a      	movs	r2, r7
   18ee6:	4659      	mov	r1, fp
   18ee8:	9806      	ldr	r0, [sp, #24]
   18eea:	f003 f88b 	bl	1c004 <__sprint_r>
   18eee:	2800      	cmp	r0, #0
   18ef0:	d101      	bne.n	18ef6 <_vfprintf_r+0x14d6>
   18ef2:	f7ff faab 	bl	1844c <_vfprintf_r+0xa2c>
   18ef6:	f7ff faab 	bl	18450 <_vfprintf_r+0xa30>
   18efa:	4642      	mov	r2, r8
   18efc:	9207      	str	r2, [sp, #28]
   18efe:	f7fe fe1b 	bl	17b38 <_vfprintf_r+0x118>
   18f02:	4244      	negs	r4, r0
   18f04:	3010      	adds	r0, #16
   18f06:	db00      	blt.n	18f0a <_vfprintf_r+0x14ea>
   18f08:	e0d8      	b.n	190bc <_vfprintf_r+0x169c>
   18f0a:	4805      	ldr	r0, [pc, #20]	; (18f20 <_vfprintf_r+0x1500>)
   18f0c:	2610      	movs	r6, #16
   18f0e:	0005      	movs	r5, r0
   18f10:	e00c      	b.n	18f2c <_vfprintf_r+0x150c>
   18f12:	46c0      	nop			; (mov r8, r8)
   18f14:	0001d630 	.word	0x0001d630
   18f18:	0001e048 	.word	0x0001e048
   18f1c:	0001e07c 	.word	0x0001e07c
   18f20:	0001e218 	.word	0x0001e218
   18f24:	3208      	adds	r2, #8
   18f26:	3c10      	subs	r4, #16
   18f28:	2c10      	cmp	r4, #16
   18f2a:	dd51      	ble.n	18fd0 <_vfprintf_r+0x15b0>
   18f2c:	3110      	adds	r1, #16
   18f2e:	3301      	adds	r3, #1
   18f30:	6015      	str	r5, [r2, #0]
   18f32:	6056      	str	r6, [r2, #4]
   18f34:	60b9      	str	r1, [r7, #8]
   18f36:	607b      	str	r3, [r7, #4]
   18f38:	2b07      	cmp	r3, #7
   18f3a:	ddf3      	ble.n	18f24 <_vfprintf_r+0x1504>
   18f3c:	003a      	movs	r2, r7
   18f3e:	4659      	mov	r1, fp
   18f40:	9806      	ldr	r0, [sp, #24]
   18f42:	f003 f85f 	bl	1c004 <__sprint_r>
   18f46:	2800      	cmp	r0, #0
   18f48:	d001      	beq.n	18f4e <_vfprintf_r+0x152e>
   18f4a:	f7ff faf9 	bl	18540 <_vfprintf_r+0xb20>
   18f4e:	68b9      	ldr	r1, [r7, #8]
   18f50:	687b      	ldr	r3, [r7, #4]
   18f52:	aa32      	add	r2, sp, #200	; 0xc8
   18f54:	e7e7      	b.n	18f26 <_vfprintf_r+0x1506>
   18f56:	003a      	movs	r2, r7
   18f58:	4659      	mov	r1, fp
   18f5a:	9806      	ldr	r0, [sp, #24]
   18f5c:	f003 f852 	bl	1c004 <__sprint_r>
   18f60:	2800      	cmp	r0, #0
   18f62:	d001      	beq.n	18f68 <_vfprintf_r+0x1548>
   18f64:	f7ff faec 	bl	18540 <_vfprintf_r+0xb20>
   18f68:	981f      	ldr	r0, [sp, #124]	; 0x7c
   18f6a:	68b9      	ldr	r1, [r7, #8]
   18f6c:	687b      	ldr	r3, [r7, #4]
   18f6e:	aa32      	add	r2, sp, #200	; 0xc8
   18f70:	e62e      	b.n	18bd0 <_vfprintf_r+0x11b0>
   18f72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18f74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18f76:	4694      	mov	ip, r2
   18f78:	4463      	add	r3, ip
   18f7a:	001a      	movs	r2, r3
   18f7c:	930e      	str	r3, [sp, #56]	; 0x38
   18f7e:	e75d      	b.n	18e3c <_vfprintf_r+0x141c>
   18f80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   18f82:	e599      	b.n	18ab8 <_vfprintf_r+0x1098>
   18f84:	212e      	movs	r1, #46	; 0x2e
   18f86:	2330      	movs	r3, #48	; 0x30
   18f88:	aa16      	add	r2, sp, #88	; 0x58
   18f8a:	1852      	adds	r2, r2, r1
   18f8c:	7013      	strb	r3, [r2, #0]
   18f8e:	002b      	movs	r3, r5
   18f90:	aa16      	add	r2, sp, #88	; 0x58
   18f92:	3101      	adds	r1, #1
   18f94:	3330      	adds	r3, #48	; 0x30
   18f96:	1852      	adds	r2, r2, r1
   18f98:	7013      	strb	r3, [r2, #0]
   18f9a:	ab22      	add	r3, sp, #136	; 0x88
   18f9c:	e6c1      	b.n	18d22 <_vfprintf_r+0x1302>
   18f9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
   18fa0:	2b00      	cmp	r3, #0
   18fa2:	db52      	blt.n	1904a <_vfprintf_r+0x162a>
   18fa4:	ab16      	add	r3, sp, #88	; 0x58
   18fa6:	7fdb      	ldrb	r3, [r3, #31]
   18fa8:	4698      	mov	r8, r3
   18faa:	9b12      	ldr	r3, [sp, #72]	; 0x48
   18fac:	2b47      	cmp	r3, #71	; 0x47
   18fae:	dc48      	bgt.n	19042 <_vfprintf_r+0x1622>
   18fb0:	4b4e      	ldr	r3, [pc, #312]	; (190ec <_vfprintf_r+0x16cc>)
   18fb2:	9311      	str	r3, [sp, #68]	; 0x44
   18fb4:	f7ff f88c 	bl	180d0 <_vfprintf_r+0x6b0>
   18fb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   18fba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   18fbc:	4694      	mov	ip, r2
   18fbe:	4463      	add	r3, ip
   18fc0:	4453      	add	r3, sl
   18fc2:	001a      	movs	r2, r3
   18fc4:	930e      	str	r3, [sp, #56]	; 0x38
   18fc6:	43db      	mvns	r3, r3
   18fc8:	17db      	asrs	r3, r3, #31
   18fca:	401a      	ands	r2, r3
   18fcc:	9208      	str	r2, [sp, #32]
   18fce:	e595      	b.n	18afc <_vfprintf_r+0x10dc>
   18fd0:	46a9      	mov	r9, r5
   18fd2:	4648      	mov	r0, r9
   18fd4:	1909      	adds	r1, r1, r4
   18fd6:	3301      	adds	r3, #1
   18fd8:	6010      	str	r0, [r2, #0]
   18fda:	6054      	str	r4, [r2, #4]
   18fdc:	60b9      	str	r1, [r7, #8]
   18fde:	3208      	adds	r2, #8
   18fe0:	607b      	str	r3, [r7, #4]
   18fe2:	2b07      	cmp	r3, #7
   18fe4:	dc00      	bgt.n	18fe8 <_vfprintf_r+0x15c8>
   18fe6:	e5f6      	b.n	18bd6 <_vfprintf_r+0x11b6>
   18fe8:	003a      	movs	r2, r7
   18fea:	4659      	mov	r1, fp
   18fec:	9806      	ldr	r0, [sp, #24]
   18fee:	f003 f809 	bl	1c004 <__sprint_r>
   18ff2:	2800      	cmp	r0, #0
   18ff4:	d001      	beq.n	18ffa <_vfprintf_r+0x15da>
   18ff6:	f7ff faa3 	bl	18540 <_vfprintf_r+0xb20>
   18ffa:	68b9      	ldr	r1, [r7, #8]
   18ffc:	687b      	ldr	r3, [r7, #4]
   18ffe:	aa32      	add	r2, sp, #200	; 0xc8
   19000:	e5e9      	b.n	18bd6 <_vfprintf_r+0x11b6>
   19002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19004:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19006:	1a98      	subs	r0, r3, r2
   19008:	1c43      	adds	r3, r0, #1
   1900a:	001a      	movs	r2, r3
   1900c:	930e      	str	r3, [sp, #56]	; 0x38
   1900e:	e715      	b.n	18e3c <_vfprintf_r+0x141c>
   19010:	4a37      	ldr	r2, [pc, #220]	; (190f0 <_vfprintf_r+0x16d0>)
   19012:	687b      	ldr	r3, [r7, #4]
   19014:	4691      	mov	r9, r2
   19016:	f7ff fbf5 	bl	18804 <_vfprintf_r+0xde4>
   1901a:	2301      	movs	r3, #1
   1901c:	4023      	ands	r3, r4
   1901e:	9313      	str	r3, [sp, #76]	; 0x4c
   19020:	d000      	beq.n	19024 <_vfprintf_r+0x1604>
   19022:	e689      	b.n	18d38 <_vfprintf_r+0x1318>
   19024:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   19026:	43d3      	mvns	r3, r2
   19028:	17db      	asrs	r3, r3, #31
   1902a:	401a      	ands	r2, r3
   1902c:	9208      	str	r2, [sp, #32]
   1902e:	e565      	b.n	18afc <_vfprintf_r+0x10dc>
   19030:	2301      	movs	r3, #1
   19032:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   19034:	391b      	subs	r1, #27
   19036:	1a9d      	subs	r5, r3, r2
   19038:	aa16      	add	r2, sp, #88	; 0x58
   1903a:	332c      	adds	r3, #44	; 0x2c
   1903c:	1852      	adds	r2, r2, r1
   1903e:	7013      	strb	r3, [r2, #0]
   19040:	e62f      	b.n	18ca2 <_vfprintf_r+0x1282>
   19042:	4b2c      	ldr	r3, [pc, #176]	; (190f4 <_vfprintf_r+0x16d4>)
   19044:	9311      	str	r3, [sp, #68]	; 0x44
   19046:	f7ff f843 	bl	180d0 <_vfprintf_r+0x6b0>
   1904a:	232d      	movs	r3, #45	; 0x2d
   1904c:	aa16      	add	r2, sp, #88	; 0x58
   1904e:	77d3      	strb	r3, [r2, #31]
   19050:	4698      	mov	r8, r3
   19052:	e7aa      	b.n	18faa <_vfprintf_r+0x158a>
   19054:	4653      	mov	r3, sl
   19056:	2b00      	cmp	r3, #0
   19058:	d101      	bne.n	1905e <_vfprintf_r+0x163e>
   1905a:	07e3      	lsls	r3, r4, #31
   1905c:	d503      	bpl.n	19066 <_vfprintf_r+0x1646>
   1905e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19060:	1c58      	adds	r0, r3, #1
   19062:	0003      	movs	r3, r0
   19064:	e7ac      	b.n	18fc0 <_vfprintf_r+0x15a0>
   19066:	2301      	movs	r3, #1
   19068:	e708      	b.n	18e7c <_vfprintf_r+0x145c>
   1906a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1906c:	9a11      	ldr	r2, [sp, #68]	; 0x44
   1906e:	1a9b      	subs	r3, r3, r2
   19070:	9314      	str	r3, [sp, #80]	; 0x50
   19072:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19074:	2b47      	cmp	r3, #71	; 0x47
   19076:	d100      	bne.n	1907a <_vfprintf_r+0x165a>
   19078:	e5f6      	b.n	18c68 <_vfprintf_r+0x1248>
   1907a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   1907c:	9313      	str	r3, [sp, #76]	; 0x4c
   1907e:	e5fd      	b.n	18c7c <_vfprintf_r+0x125c>
   19080:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   19082:	1d1d      	adds	r5, r3, #4
   19084:	681b      	ldr	r3, [r3, #0]
   19086:	46a8      	mov	r8, r5
   19088:	469a      	mov	sl, r3
   1908a:	2b00      	cmp	r3, #0
   1908c:	db0a      	blt.n	190a4 <_vfprintf_r+0x1684>
   1908e:	4645      	mov	r5, r8
   19090:	9b07      	ldr	r3, [sp, #28]
   19092:	950f      	str	r5, [sp, #60]	; 0x3c
   19094:	785b      	ldrb	r3, [r3, #1]
   19096:	9207      	str	r2, [sp, #28]
   19098:	f7fe fd4b 	bl	17b32 <_vfprintf_r+0x112>
   1909c:	ab16      	add	r3, sp, #88	; 0x58
   1909e:	77d8      	strb	r0, [r3, #31]
   190a0:	f7ff f830 	bl	18104 <_vfprintf_r+0x6e4>
   190a4:	2301      	movs	r3, #1
   190a6:	425b      	negs	r3, r3
   190a8:	469a      	mov	sl, r3
   190aa:	e7f0      	b.n	1908e <_vfprintf_r+0x166e>
   190ac:	ab16      	add	r3, sp, #88	; 0x58
   190ae:	77d8      	strb	r0, [r3, #31]
   190b0:	f7fe ff27 	bl	17f02 <_vfprintf_r+0x4e2>
   190b4:	ab16      	add	r3, sp, #88	; 0x58
   190b6:	77d8      	strb	r0, [r3, #31]
   190b8:	f7fe fdce 	bl	17c58 <_vfprintf_r+0x238>
   190bc:	480c      	ldr	r0, [pc, #48]	; (190f0 <_vfprintf_r+0x16d0>)
   190be:	4681      	mov	r9, r0
   190c0:	e787      	b.n	18fd2 <_vfprintf_r+0x15b2>
   190c2:	ab16      	add	r3, sp, #88	; 0x58
   190c4:	77d8      	strb	r0, [r3, #31]
   190c6:	f7ff f829 	bl	1811c <_vfprintf_r+0x6fc>
   190ca:	ab16      	add	r3, sp, #88	; 0x58
   190cc:	77d8      	strb	r0, [r3, #31]
   190ce:	f7fe ffc3 	bl	18058 <_vfprintf_r+0x638>
   190d2:	ab16      	add	r3, sp, #88	; 0x58
   190d4:	77d8      	strb	r0, [r3, #31]
   190d6:	f7fe ffa5 	bl	18024 <_vfprintf_r+0x604>
   190da:	ab16      	add	r3, sp, #88	; 0x58
   190dc:	77d8      	strb	r0, [r3, #31]
   190de:	f7fe feaf 	bl	17e40 <_vfprintf_r+0x420>
   190e2:	aa16      	add	r2, sp, #88	; 0x58
   190e4:	232e      	movs	r3, #46	; 0x2e
   190e6:	4694      	mov	ip, r2
   190e8:	4463      	add	r3, ip
   190ea:	e61a      	b.n	18d22 <_vfprintf_r+0x1302>
   190ec:	0001e04c 	.word	0x0001e04c
   190f0:	0001e218 	.word	0x0001e218
   190f4:	0001e050 	.word	0x0001e050

000190f8 <__sbprintf>:
   190f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   190fa:	0015      	movs	r5, r2
   190fc:	2202      	movs	r2, #2
   190fe:	4c1e      	ldr	r4, [pc, #120]	; (19178 <__sbprintf+0x80>)
   19100:	001f      	movs	r7, r3
   19102:	898b      	ldrh	r3, [r1, #12]
   19104:	44a5      	add	sp, r4
   19106:	4393      	bics	r3, r2
   19108:	466a      	mov	r2, sp
   1910a:	8193      	strh	r3, [r2, #12]
   1910c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1910e:	0006      	movs	r6, r0
   19110:	9319      	str	r3, [sp, #100]	; 0x64
   19112:	89cb      	ldrh	r3, [r1, #14]
   19114:	a816      	add	r0, sp, #88	; 0x58
   19116:	81d3      	strh	r3, [r2, #14]
   19118:	69cb      	ldr	r3, [r1, #28]
   1911a:	000c      	movs	r4, r1
   1911c:	9307      	str	r3, [sp, #28]
   1911e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   19120:	9309      	str	r3, [sp, #36]	; 0x24
   19122:	ab1a      	add	r3, sp, #104	; 0x68
   19124:	9300      	str	r3, [sp, #0]
   19126:	9304      	str	r3, [sp, #16]
   19128:	2380      	movs	r3, #128	; 0x80
   1912a:	00db      	lsls	r3, r3, #3
   1912c:	9302      	str	r3, [sp, #8]
   1912e:	9305      	str	r3, [sp, #20]
   19130:	2300      	movs	r3, #0
   19132:	9306      	str	r3, [sp, #24]
   19134:	f001 fd50 	bl	1abd8 <__retarget_lock_init_recursive>
   19138:	002a      	movs	r2, r5
   1913a:	003b      	movs	r3, r7
   1913c:	4669      	mov	r1, sp
   1913e:	0030      	movs	r0, r6
   19140:	f7fe fc6e 	bl	17a20 <_vfprintf_r>
   19144:	1e05      	subs	r5, r0, #0
   19146:	db05      	blt.n	19154 <__sbprintf+0x5c>
   19148:	4669      	mov	r1, sp
   1914a:	0030      	movs	r0, r6
   1914c:	f001 f9ac 	bl	1a4a8 <_fflush_r>
   19150:	2800      	cmp	r0, #0
   19152:	d10e      	bne.n	19172 <__sbprintf+0x7a>
   19154:	466b      	mov	r3, sp
   19156:	899b      	ldrh	r3, [r3, #12]
   19158:	065b      	lsls	r3, r3, #25
   1915a:	d503      	bpl.n	19164 <__sbprintf+0x6c>
   1915c:	2240      	movs	r2, #64	; 0x40
   1915e:	89a3      	ldrh	r3, [r4, #12]
   19160:	4313      	orrs	r3, r2
   19162:	81a3      	strh	r3, [r4, #12]
   19164:	9816      	ldr	r0, [sp, #88]	; 0x58
   19166:	f001 fd39 	bl	1abdc <__retarget_lock_close_recursive>
   1916a:	0028      	movs	r0, r5
   1916c:	4b03      	ldr	r3, [pc, #12]	; (1917c <__sbprintf+0x84>)
   1916e:	449d      	add	sp, r3
   19170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19172:	2501      	movs	r5, #1
   19174:	426d      	negs	r5, r5
   19176:	e7ed      	b.n	19154 <__sbprintf+0x5c>
   19178:	fffffb94 	.word	0xfffffb94
   1917c:	0000046c 	.word	0x0000046c

00019180 <__swsetup_r>:
   19180:	4b33      	ldr	r3, [pc, #204]	; (19250 <__swsetup_r+0xd0>)
   19182:	b570      	push	{r4, r5, r6, lr}
   19184:	0005      	movs	r5, r0
   19186:	6818      	ldr	r0, [r3, #0]
   19188:	000c      	movs	r4, r1
   1918a:	2800      	cmp	r0, #0
   1918c:	d002      	beq.n	19194 <__swsetup_r+0x14>
   1918e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   19190:	2b00      	cmp	r3, #0
   19192:	d03c      	beq.n	1920e <__swsetup_r+0x8e>
   19194:	230c      	movs	r3, #12
   19196:	5ee2      	ldrsh	r2, [r4, r3]
   19198:	b293      	uxth	r3, r2
   1919a:	0719      	lsls	r1, r3, #28
   1919c:	d50d      	bpl.n	191ba <__swsetup_r+0x3a>
   1919e:	6921      	ldr	r1, [r4, #16]
   191a0:	2900      	cmp	r1, #0
   191a2:	d015      	beq.n	191d0 <__swsetup_r+0x50>
   191a4:	07da      	lsls	r2, r3, #31
   191a6:	d521      	bpl.n	191ec <__swsetup_r+0x6c>
   191a8:	2300      	movs	r3, #0
   191aa:	60a3      	str	r3, [r4, #8]
   191ac:	6963      	ldr	r3, [r4, #20]
   191ae:	2000      	movs	r0, #0
   191b0:	425b      	negs	r3, r3
   191b2:	61a3      	str	r3, [r4, #24]
   191b4:	2900      	cmp	r1, #0
   191b6:	d021      	beq.n	191fc <__swsetup_r+0x7c>
   191b8:	bd70      	pop	{r4, r5, r6, pc}
   191ba:	06d9      	lsls	r1, r3, #27
   191bc:	d53f      	bpl.n	1923e <__swsetup_r+0xbe>
   191be:	075b      	lsls	r3, r3, #29
   191c0:	d428      	bmi.n	19214 <__swsetup_r+0x94>
   191c2:	6921      	ldr	r1, [r4, #16]
   191c4:	2308      	movs	r3, #8
   191c6:	4313      	orrs	r3, r2
   191c8:	81a3      	strh	r3, [r4, #12]
   191ca:	b29b      	uxth	r3, r3
   191cc:	2900      	cmp	r1, #0
   191ce:	d1e9      	bne.n	191a4 <__swsetup_r+0x24>
   191d0:	22a0      	movs	r2, #160	; 0xa0
   191d2:	2080      	movs	r0, #128	; 0x80
   191d4:	0092      	lsls	r2, r2, #2
   191d6:	0080      	lsls	r0, r0, #2
   191d8:	401a      	ands	r2, r3
   191da:	4282      	cmp	r2, r0
   191dc:	d0e2      	beq.n	191a4 <__swsetup_r+0x24>
   191de:	0021      	movs	r1, r4
   191e0:	0028      	movs	r0, r5
   191e2:	f001 fd31 	bl	1ac48 <__smakebuf_r>
   191e6:	89a3      	ldrh	r3, [r4, #12]
   191e8:	6921      	ldr	r1, [r4, #16]
   191ea:	e7db      	b.n	191a4 <__swsetup_r+0x24>
   191ec:	2200      	movs	r2, #0
   191ee:	079b      	lsls	r3, r3, #30
   191f0:	d400      	bmi.n	191f4 <__swsetup_r+0x74>
   191f2:	6962      	ldr	r2, [r4, #20]
   191f4:	60a2      	str	r2, [r4, #8]
   191f6:	2000      	movs	r0, #0
   191f8:	2900      	cmp	r1, #0
   191fa:	d1dd      	bne.n	191b8 <__swsetup_r+0x38>
   191fc:	220c      	movs	r2, #12
   191fe:	5ea3      	ldrsh	r3, [r4, r2]
   19200:	061a      	lsls	r2, r3, #24
   19202:	d5d9      	bpl.n	191b8 <__swsetup_r+0x38>
   19204:	2240      	movs	r2, #64	; 0x40
   19206:	4313      	orrs	r3, r2
   19208:	81a3      	strh	r3, [r4, #12]
   1920a:	3801      	subs	r0, #1
   1920c:	e7d4      	b.n	191b8 <__swsetup_r+0x38>
   1920e:	f001 f9a5 	bl	1a55c <__sinit>
   19212:	e7bf      	b.n	19194 <__swsetup_r+0x14>
   19214:	6b21      	ldr	r1, [r4, #48]	; 0x30
   19216:	2900      	cmp	r1, #0
   19218:	d00a      	beq.n	19230 <__swsetup_r+0xb0>
   1921a:	0023      	movs	r3, r4
   1921c:	3340      	adds	r3, #64	; 0x40
   1921e:	4299      	cmp	r1, r3
   19220:	d004      	beq.n	1922c <__swsetup_r+0xac>
   19222:	0028      	movs	r0, r5
   19224:	f001 fa44 	bl	1a6b0 <_free_r>
   19228:	230c      	movs	r3, #12
   1922a:	5ee2      	ldrsh	r2, [r4, r3]
   1922c:	2300      	movs	r3, #0
   1922e:	6323      	str	r3, [r4, #48]	; 0x30
   19230:	2324      	movs	r3, #36	; 0x24
   19232:	439a      	bics	r2, r3
   19234:	2300      	movs	r3, #0
   19236:	6921      	ldr	r1, [r4, #16]
   19238:	6063      	str	r3, [r4, #4]
   1923a:	6021      	str	r1, [r4, #0]
   1923c:	e7c2      	b.n	191c4 <__swsetup_r+0x44>
   1923e:	2309      	movs	r3, #9
   19240:	602b      	str	r3, [r5, #0]
   19242:	2340      	movs	r3, #64	; 0x40
   19244:	2001      	movs	r0, #1
   19246:	431a      	orrs	r2, r3
   19248:	81a2      	strh	r2, [r4, #12]
   1924a:	4240      	negs	r0, r0
   1924c:	e7b4      	b.n	191b8 <__swsetup_r+0x38>
   1924e:	46c0      	nop			; (mov r8, r8)
   19250:	20000068 	.word	0x20000068

00019254 <register_fini>:
   19254:	4b03      	ldr	r3, [pc, #12]	; (19264 <register_fini+0x10>)
   19256:	b510      	push	{r4, lr}
   19258:	2b00      	cmp	r3, #0
   1925a:	d002      	beq.n	19262 <register_fini+0xe>
   1925c:	4802      	ldr	r0, [pc, #8]	; (19268 <register_fini+0x14>)
   1925e:	f000 f805 	bl	1926c <atexit>
   19262:	bd10      	pop	{r4, pc}
   19264:	00000000 	.word	0x00000000
   19268:	0001a5dd 	.word	0x0001a5dd

0001926c <atexit>:
   1926c:	b510      	push	{r4, lr}
   1926e:	0001      	movs	r1, r0
   19270:	2300      	movs	r3, #0
   19272:	2200      	movs	r2, #0
   19274:	2000      	movs	r0, #0
   19276:	f002 fee3 	bl	1c040 <__register_exitproc>
   1927a:	bd10      	pop	{r4, pc}

0001927c <quorem>:
   1927c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1927e:	4645      	mov	r5, r8
   19280:	4680      	mov	r8, r0
   19282:	46de      	mov	lr, fp
   19284:	4657      	mov	r7, sl
   19286:	464e      	mov	r6, r9
   19288:	4642      	mov	r2, r8
   1928a:	b5e0      	push	{r5, r6, r7, lr}
   1928c:	690c      	ldr	r4, [r1, #16]
   1928e:	6912      	ldr	r2, [r2, #16]
   19290:	b085      	sub	sp, #20
   19292:	000b      	movs	r3, r1
   19294:	9102      	str	r1, [sp, #8]
   19296:	2000      	movs	r0, #0
   19298:	4294      	cmp	r4, r2
   1929a:	dd00      	ble.n	1929e <quorem+0x22>
   1929c:	e090      	b.n	193c0 <quorem+0x144>
   1929e:	2214      	movs	r2, #20
   192a0:	4694      	mov	ip, r2
   192a2:	4463      	add	r3, ip
   192a4:	4699      	mov	r9, r3
   192a6:	464a      	mov	r2, r9
   192a8:	3c01      	subs	r4, #1
   192aa:	00a3      	lsls	r3, r4, #2
   192ac:	18d6      	adds	r6, r2, r3
   192ae:	2214      	movs	r2, #20
   192b0:	4442      	add	r2, r8
   192b2:	4693      	mov	fp, r2
   192b4:	449b      	add	fp, r3
   192b6:	6833      	ldr	r3, [r6, #0]
   192b8:	0015      	movs	r5, r2
   192ba:	1c59      	adds	r1, r3, #1
   192bc:	465b      	mov	r3, fp
   192be:	6818      	ldr	r0, [r3, #0]
   192c0:	9201      	str	r2, [sp, #4]
   192c2:	f7f9 fd25 	bl	12d10 <__udivsi3>
   192c6:	1e03      	subs	r3, r0, #0
   192c8:	9000      	str	r0, [sp, #0]
   192ca:	d042      	beq.n	19352 <quorem+0xd6>
   192cc:	0029      	movs	r1, r5
   192ce:	2700      	movs	r7, #0
   192d0:	464d      	mov	r5, r9
   192d2:	2000      	movs	r0, #0
   192d4:	46b1      	mov	r9, r6
   192d6:	46a2      	mov	sl, r4
   192d8:	003e      	movs	r6, r7
   192da:	0004      	movs	r4, r0
   192dc:	469c      	mov	ip, r3
   192de:	002f      	movs	r7, r5
   192e0:	0008      	movs	r0, r1
   192e2:	9503      	str	r5, [sp, #12]
   192e4:	4663      	mov	r3, ip
   192e6:	cf04      	ldmia	r7!, {r2}
   192e8:	0415      	lsls	r5, r2, #16
   192ea:	0c2d      	lsrs	r5, r5, #16
   192ec:	435d      	muls	r5, r3
   192ee:	0c12      	lsrs	r2, r2, #16
   192f0:	435a      	muls	r2, r3
   192f2:	19ad      	adds	r5, r5, r6
   192f4:	0c2b      	lsrs	r3, r5, #16
   192f6:	18d2      	adds	r2, r2, r3
   192f8:	6803      	ldr	r3, [r0, #0]
   192fa:	042d      	lsls	r5, r5, #16
   192fc:	0419      	lsls	r1, r3, #16
   192fe:	0c09      	lsrs	r1, r1, #16
   19300:	1909      	adds	r1, r1, r4
   19302:	0c16      	lsrs	r6, r2, #16
   19304:	0c2d      	lsrs	r5, r5, #16
   19306:	0412      	lsls	r2, r2, #16
   19308:	1b49      	subs	r1, r1, r5
   1930a:	0c12      	lsrs	r2, r2, #16
   1930c:	0c1b      	lsrs	r3, r3, #16
   1930e:	1a9b      	subs	r3, r3, r2
   19310:	140a      	asrs	r2, r1, #16
   19312:	189b      	adds	r3, r3, r2
   19314:	0409      	lsls	r1, r1, #16
   19316:	141c      	asrs	r4, r3, #16
   19318:	0c09      	lsrs	r1, r1, #16
   1931a:	041b      	lsls	r3, r3, #16
   1931c:	4319      	orrs	r1, r3
   1931e:	c002      	stmia	r0!, {r1}
   19320:	45b9      	cmp	r9, r7
   19322:	d2df      	bcs.n	192e4 <quorem+0x68>
   19324:	9b03      	ldr	r3, [sp, #12]
   19326:	464e      	mov	r6, r9
   19328:	4699      	mov	r9, r3
   1932a:	465b      	mov	r3, fp
   1932c:	681b      	ldr	r3, [r3, #0]
   1932e:	4654      	mov	r4, sl
   19330:	2b00      	cmp	r3, #0
   19332:	d10e      	bne.n	19352 <quorem+0xd6>
   19334:	465b      	mov	r3, fp
   19336:	9a01      	ldr	r2, [sp, #4]
   19338:	3b04      	subs	r3, #4
   1933a:	429a      	cmp	r2, r3
   1933c:	d304      	bcc.n	19348 <quorem+0xcc>
   1933e:	e006      	b.n	1934e <quorem+0xd2>
   19340:	3b04      	subs	r3, #4
   19342:	3c01      	subs	r4, #1
   19344:	429a      	cmp	r2, r3
   19346:	d202      	bcs.n	1934e <quorem+0xd2>
   19348:	6819      	ldr	r1, [r3, #0]
   1934a:	2900      	cmp	r1, #0
   1934c:	d0f8      	beq.n	19340 <quorem+0xc4>
   1934e:	4643      	mov	r3, r8
   19350:	611c      	str	r4, [r3, #16]
   19352:	9902      	ldr	r1, [sp, #8]
   19354:	4640      	mov	r0, r8
   19356:	f002 fa51 	bl	1b7fc <__mcmp>
   1935a:	2800      	cmp	r0, #0
   1935c:	db2f      	blt.n	193be <quorem+0x142>
   1935e:	464f      	mov	r7, r9
   19360:	2000      	movs	r0, #0
   19362:	9b00      	ldr	r3, [sp, #0]
   19364:	9d01      	ldr	r5, [sp, #4]
   19366:	3301      	adds	r3, #1
   19368:	9300      	str	r3, [sp, #0]
   1936a:	682b      	ldr	r3, [r5, #0]
   1936c:	cf02      	ldmia	r7!, {r1}
   1936e:	041a      	lsls	r2, r3, #16
   19370:	0c12      	lsrs	r2, r2, #16
   19372:	1810      	adds	r0, r2, r0
   19374:	040a      	lsls	r2, r1, #16
   19376:	0c12      	lsrs	r2, r2, #16
   19378:	1a82      	subs	r2, r0, r2
   1937a:	0c09      	lsrs	r1, r1, #16
   1937c:	0c1b      	lsrs	r3, r3, #16
   1937e:	1a5b      	subs	r3, r3, r1
   19380:	1411      	asrs	r1, r2, #16
   19382:	185b      	adds	r3, r3, r1
   19384:	0412      	lsls	r2, r2, #16
   19386:	1418      	asrs	r0, r3, #16
   19388:	0c12      	lsrs	r2, r2, #16
   1938a:	041b      	lsls	r3, r3, #16
   1938c:	4313      	orrs	r3, r2
   1938e:	c508      	stmia	r5!, {r3}
   19390:	42be      	cmp	r6, r7
   19392:	d2ea      	bcs.n	1936a <quorem+0xee>
   19394:	9901      	ldr	r1, [sp, #4]
   19396:	00a3      	lsls	r3, r4, #2
   19398:	468c      	mov	ip, r1
   1939a:	4463      	add	r3, ip
   1939c:	681a      	ldr	r2, [r3, #0]
   1939e:	2a00      	cmp	r2, #0
   193a0:	d10d      	bne.n	193be <quorem+0x142>
   193a2:	3b04      	subs	r3, #4
   193a4:	000a      	movs	r2, r1
   193a6:	4299      	cmp	r1, r3
   193a8:	d304      	bcc.n	193b4 <quorem+0x138>
   193aa:	e006      	b.n	193ba <quorem+0x13e>
   193ac:	3b04      	subs	r3, #4
   193ae:	3c01      	subs	r4, #1
   193b0:	429a      	cmp	r2, r3
   193b2:	d202      	bcs.n	193ba <quorem+0x13e>
   193b4:	6819      	ldr	r1, [r3, #0]
   193b6:	2900      	cmp	r1, #0
   193b8:	d0f8      	beq.n	193ac <quorem+0x130>
   193ba:	4643      	mov	r3, r8
   193bc:	611c      	str	r4, [r3, #16]
   193be:	9800      	ldr	r0, [sp, #0]
   193c0:	b005      	add	sp, #20
   193c2:	bc3c      	pop	{r2, r3, r4, r5}
   193c4:	4690      	mov	r8, r2
   193c6:	4699      	mov	r9, r3
   193c8:	46a2      	mov	sl, r4
   193ca:	46ab      	mov	fp, r5
   193cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   193ce:	46c0      	nop			; (mov r8, r8)

000193d0 <_dtoa_r>:
   193d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   193d2:	4657      	mov	r7, sl
   193d4:	464e      	mov	r6, r9
   193d6:	4645      	mov	r5, r8
   193d8:	46de      	mov	lr, fp
   193da:	b5e0      	push	{r5, r6, r7, lr}
   193dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
   193de:	b099      	sub	sp, #100	; 0x64
   193e0:	4682      	mov	sl, r0
   193e2:	001d      	movs	r5, r3
   193e4:	0016      	movs	r6, r2
   193e6:	001f      	movs	r7, r3
   193e8:	2900      	cmp	r1, #0
   193ea:	d009      	beq.n	19400 <_dtoa_r+0x30>
   193ec:	2301      	movs	r3, #1
   193ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
   193f0:	4093      	lsls	r3, r2
   193f2:	604a      	str	r2, [r1, #4]
   193f4:	608b      	str	r3, [r1, #8]
   193f6:	f001 fff5 	bl	1b3e4 <_Bfree>
   193fa:	2300      	movs	r3, #0
   193fc:	4652      	mov	r2, sl
   193fe:	6413      	str	r3, [r2, #64]	; 0x40
   19400:	46b8      	mov	r8, r7
   19402:	2f00      	cmp	r7, #0
   19404:	db37      	blt.n	19476 <_dtoa_r+0xa6>
   19406:	2300      	movs	r3, #0
   19408:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1940a:	6013      	str	r3, [r2, #0]
   1940c:	4642      	mov	r2, r8
   1940e:	4bd6      	ldr	r3, [pc, #856]	; (19768 <_dtoa_r+0x398>)
   19410:	401a      	ands	r2, r3
   19412:	429a      	cmp	r2, r3
   19414:	d018      	beq.n	19448 <_dtoa_r+0x78>
   19416:	2200      	movs	r2, #0
   19418:	2300      	movs	r3, #0
   1941a:	0030      	movs	r0, r6
   1941c:	0039      	movs	r1, r7
   1941e:	f7fc fc19 	bl	15c54 <__aeabi_dcmpeq>
   19422:	2800      	cmp	r0, #0
   19424:	d02f      	beq.n	19486 <_dtoa_r+0xb6>
   19426:	2301      	movs	r3, #1
   19428:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1942a:	6013      	str	r3, [r2, #0]
   1942c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1942e:	2b00      	cmp	r3, #0
   19430:	d100      	bne.n	19434 <_dtoa_r+0x64>
   19432:	e22a      	b.n	1988a <_dtoa_r+0x4ba>
   19434:	48cd      	ldr	r0, [pc, #820]	; (1976c <_dtoa_r+0x39c>)
   19436:	6018      	str	r0, [r3, #0]
   19438:	3801      	subs	r0, #1
   1943a:	b019      	add	sp, #100	; 0x64
   1943c:	bc3c      	pop	{r2, r3, r4, r5}
   1943e:	4690      	mov	r8, r2
   19440:	4699      	mov	r9, r3
   19442:	46a2      	mov	sl, r4
   19444:	46ab      	mov	fp, r5
   19446:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19448:	4bc9      	ldr	r3, [pc, #804]	; (19770 <_dtoa_r+0x3a0>)
   1944a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1944c:	6013      	str	r3, [r2, #0]
   1944e:	2e00      	cmp	r6, #0
   19450:	d10b      	bne.n	1946a <_dtoa_r+0x9a>
   19452:	4643      	mov	r3, r8
   19454:	0318      	lsls	r0, r3, #12
   19456:	d108      	bne.n	1946a <_dtoa_r+0x9a>
   19458:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1945a:	48c6      	ldr	r0, [pc, #792]	; (19774 <_dtoa_r+0x3a4>)
   1945c:	2b00      	cmp	r3, #0
   1945e:	d0ec      	beq.n	1943a <_dtoa_r+0x6a>
   19460:	0003      	movs	r3, r0
   19462:	3308      	adds	r3, #8
   19464:	9a26      	ldr	r2, [sp, #152]	; 0x98
   19466:	6013      	str	r3, [r2, #0]
   19468:	e7e7      	b.n	1943a <_dtoa_r+0x6a>
   1946a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1946c:	48c2      	ldr	r0, [pc, #776]	; (19778 <_dtoa_r+0x3a8>)
   1946e:	2b00      	cmp	r3, #0
   19470:	d0e3      	beq.n	1943a <_dtoa_r+0x6a>
   19472:	1cc3      	adds	r3, r0, #3
   19474:	e7f6      	b.n	19464 <_dtoa_r+0x94>
   19476:	2301      	movs	r3, #1
   19478:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1947a:	0068      	lsls	r0, r5, #1
   1947c:	6013      	str	r3, [r2, #0]
   1947e:	0843      	lsrs	r3, r0, #1
   19480:	4698      	mov	r8, r3
   19482:	001f      	movs	r7, r3
   19484:	e7c2      	b.n	1940c <_dtoa_r+0x3c>
   19486:	ab16      	add	r3, sp, #88	; 0x58
   19488:	9301      	str	r3, [sp, #4]
   1948a:	ab17      	add	r3, sp, #92	; 0x5c
   1948c:	9300      	str	r3, [sp, #0]
   1948e:	0032      	movs	r2, r6
   19490:	003b      	movs	r3, r7
   19492:	4650      	mov	r0, sl
   19494:	f002 fa68 	bl	1b968 <__d2b>
   19498:	4643      	mov	r3, r8
   1949a:	4683      	mov	fp, r0
   1949c:	0d1a      	lsrs	r2, r3, #20
   1949e:	d100      	bne.n	194a2 <_dtoa_r+0xd2>
   194a0:	e1d6      	b.n	19850 <_dtoa_r+0x480>
   194a2:	033b      	lsls	r3, r7, #12
   194a4:	4cb5      	ldr	r4, [pc, #724]	; (1977c <_dtoa_r+0x3ac>)
   194a6:	0b1b      	lsrs	r3, r3, #12
   194a8:	431c      	orrs	r4, r3
   194aa:	4bb5      	ldr	r3, [pc, #724]	; (19780 <_dtoa_r+0x3b0>)
   194ac:	0030      	movs	r0, r6
   194ae:	4698      	mov	r8, r3
   194b0:	9b16      	ldr	r3, [sp, #88]	; 0x58
   194b2:	0021      	movs	r1, r4
   194b4:	4699      	mov	r9, r3
   194b6:	2300      	movs	r3, #0
   194b8:	4490      	add	r8, r2
   194ba:	930f      	str	r3, [sp, #60]	; 0x3c
   194bc:	2200      	movs	r2, #0
   194be:	4bb1      	ldr	r3, [pc, #708]	; (19784 <_dtoa_r+0x3b4>)
   194c0:	f7fb fed0 	bl	15264 <__aeabi_dsub>
   194c4:	4ab0      	ldr	r2, [pc, #704]	; (19788 <_dtoa_r+0x3b8>)
   194c6:	4bb1      	ldr	r3, [pc, #708]	; (1978c <_dtoa_r+0x3bc>)
   194c8:	f7fb fc4c 	bl	14d64 <__aeabi_dmul>
   194cc:	4ab0      	ldr	r2, [pc, #704]	; (19790 <_dtoa_r+0x3c0>)
   194ce:	4bb1      	ldr	r3, [pc, #708]	; (19794 <_dtoa_r+0x3c4>)
   194d0:	f7fa fe04 	bl	140dc <__aeabi_dadd>
   194d4:	0004      	movs	r4, r0
   194d6:	4640      	mov	r0, r8
   194d8:	000d      	movs	r5, r1
   194da:	f7fc fa0d 	bl	158f8 <__aeabi_i2d>
   194de:	4aae      	ldr	r2, [pc, #696]	; (19798 <_dtoa_r+0x3c8>)
   194e0:	4bae      	ldr	r3, [pc, #696]	; (1979c <_dtoa_r+0x3cc>)
   194e2:	f7fb fc3f 	bl	14d64 <__aeabi_dmul>
   194e6:	0002      	movs	r2, r0
   194e8:	000b      	movs	r3, r1
   194ea:	0020      	movs	r0, r4
   194ec:	0029      	movs	r1, r5
   194ee:	f7fa fdf5 	bl	140dc <__aeabi_dadd>
   194f2:	0004      	movs	r4, r0
   194f4:	000d      	movs	r5, r1
   194f6:	f7fc f9cb 	bl	15890 <__aeabi_d2iz>
   194fa:	2200      	movs	r2, #0
   194fc:	9003      	str	r0, [sp, #12]
   194fe:	2300      	movs	r3, #0
   19500:	0020      	movs	r0, r4
   19502:	0029      	movs	r1, r5
   19504:	f7fc fbac 	bl	15c60 <__aeabi_dcmplt>
   19508:	2800      	cmp	r0, #0
   1950a:	d000      	beq.n	1950e <_dtoa_r+0x13e>
   1950c:	e2b1      	b.n	19a72 <_dtoa_r+0x6a2>
   1950e:	2301      	movs	r3, #1
   19510:	9c03      	ldr	r4, [sp, #12]
   19512:	930c      	str	r3, [sp, #48]	; 0x30
   19514:	2c16      	cmp	r4, #22
   19516:	d810      	bhi.n	1953a <_dtoa_r+0x16a>
   19518:	49a1      	ldr	r1, [pc, #644]	; (197a0 <_dtoa_r+0x3d0>)
   1951a:	00e3      	lsls	r3, r4, #3
   1951c:	18c9      	adds	r1, r1, r3
   1951e:	0032      	movs	r2, r6
   19520:	6808      	ldr	r0, [r1, #0]
   19522:	6849      	ldr	r1, [r1, #4]
   19524:	003b      	movs	r3, r7
   19526:	f7fc fbaf 	bl	15c88 <__aeabi_dcmpgt>
   1952a:	2800      	cmp	r0, #0
   1952c:	d100      	bne.n	19530 <_dtoa_r+0x160>
   1952e:	e31d      	b.n	19b6c <_dtoa_r+0x79c>
   19530:	0023      	movs	r3, r4
   19532:	3b01      	subs	r3, #1
   19534:	9303      	str	r3, [sp, #12]
   19536:	2300      	movs	r3, #0
   19538:	930c      	str	r3, [sp, #48]	; 0x30
   1953a:	464b      	mov	r3, r9
   1953c:	4642      	mov	r2, r8
   1953e:	1a9a      	subs	r2, r3, r2
   19540:	2300      	movs	r3, #0
   19542:	9306      	str	r3, [sp, #24]
   19544:	0013      	movs	r3, r2
   19546:	3b01      	subs	r3, #1
   19548:	9304      	str	r3, [sp, #16]
   1954a:	d500      	bpl.n	1954e <_dtoa_r+0x17e>
   1954c:	e2a1      	b.n	19a92 <_dtoa_r+0x6c2>
   1954e:	9b03      	ldr	r3, [sp, #12]
   19550:	2b00      	cmp	r3, #0
   19552:	da00      	bge.n	19556 <_dtoa_r+0x186>
   19554:	e284      	b.n	19a60 <_dtoa_r+0x690>
   19556:	469c      	mov	ip, r3
   19558:	930d      	str	r3, [sp, #52]	; 0x34
   1955a:	2300      	movs	r3, #0
   1955c:	9a04      	ldr	r2, [sp, #16]
   1955e:	4699      	mov	r9, r3
   19560:	0011      	movs	r1, r2
   19562:	4461      	add	r1, ip
   19564:	9104      	str	r1, [sp, #16]
   19566:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19568:	2b09      	cmp	r3, #9
   1956a:	d900      	bls.n	1956e <_dtoa_r+0x19e>
   1956c:	e18f      	b.n	1988e <_dtoa_r+0x4be>
   1956e:	2401      	movs	r4, #1
   19570:	2b05      	cmp	r3, #5
   19572:	dd02      	ble.n	1957a <_dtoa_r+0x1aa>
   19574:	2400      	movs	r4, #0
   19576:	3b04      	subs	r3, #4
   19578:	9322      	str	r3, [sp, #136]	; 0x88
   1957a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1957c:	2b03      	cmp	r3, #3
   1957e:	d101      	bne.n	19584 <_dtoa_r+0x1b4>
   19580:	f000 fcce 	bl	19f20 <_dtoa_r+0xb50>
   19584:	dc01      	bgt.n	1958a <_dtoa_r+0x1ba>
   19586:	f000 fc92 	bl	19eae <_dtoa_r+0xade>
   1958a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1958c:	2b04      	cmp	r3, #4
   1958e:	d101      	bne.n	19594 <_dtoa_r+0x1c4>
   19590:	f000 fc40 	bl	19e14 <_dtoa_r+0xa44>
   19594:	2301      	movs	r3, #1
   19596:	930b      	str	r3, [sp, #44]	; 0x2c
   19598:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1959a:	2b05      	cmp	r3, #5
   1959c:	d001      	beq.n	195a2 <_dtoa_r+0x1d2>
   1959e:	f000 fc8b 	bl	19eb8 <_dtoa_r+0xae8>
   195a2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   195a4:	9b03      	ldr	r3, [sp, #12]
   195a6:	4694      	mov	ip, r2
   195a8:	4463      	add	r3, ip
   195aa:	930e      	str	r3, [sp, #56]	; 0x38
   195ac:	3301      	adds	r3, #1
   195ae:	9307      	str	r3, [sp, #28]
   195b0:	1e1d      	subs	r5, r3, #0
   195b2:	dc01      	bgt.n	195b8 <_dtoa_r+0x1e8>
   195b4:	f000 fd49 	bl	1a04a <_dtoa_r+0xc7a>
   195b8:	9b07      	ldr	r3, [sp, #28]
   195ba:	4698      	mov	r8, r3
   195bc:	2300      	movs	r3, #0
   195be:	4652      	mov	r2, sl
   195c0:	2100      	movs	r1, #0
   195c2:	6453      	str	r3, [r2, #68]	; 0x44
   195c4:	2d17      	cmp	r5, #23
   195c6:	d90a      	bls.n	195de <_dtoa_r+0x20e>
   195c8:	2201      	movs	r2, #1
   195ca:	3304      	adds	r3, #4
   195cc:	005b      	lsls	r3, r3, #1
   195ce:	0018      	movs	r0, r3
   195d0:	3014      	adds	r0, #20
   195d2:	0011      	movs	r1, r2
   195d4:	3201      	adds	r2, #1
   195d6:	4285      	cmp	r5, r0
   195d8:	d2f8      	bcs.n	195cc <_dtoa_r+0x1fc>
   195da:	4653      	mov	r3, sl
   195dc:	6459      	str	r1, [r3, #68]	; 0x44
   195de:	4650      	mov	r0, sl
   195e0:	f001 fed8 	bl	1b394 <_Balloc>
   195e4:	4653      	mov	r3, sl
   195e6:	6418      	str	r0, [r3, #64]	; 0x40
   195e8:	4643      	mov	r3, r8
   195ea:	900a      	str	r0, [sp, #40]	; 0x28
   195ec:	2b0e      	cmp	r3, #14
   195ee:	d900      	bls.n	195f2 <_dtoa_r+0x222>
   195f0:	e161      	b.n	198b6 <_dtoa_r+0x4e6>
   195f2:	2c00      	cmp	r4, #0
   195f4:	d100      	bne.n	195f8 <_dtoa_r+0x228>
   195f6:	e15e      	b.n	198b6 <_dtoa_r+0x4e6>
   195f8:	9610      	str	r6, [sp, #64]	; 0x40
   195fa:	9711      	str	r7, [sp, #68]	; 0x44
   195fc:	9e03      	ldr	r6, [sp, #12]
   195fe:	2e00      	cmp	r6, #0
   19600:	dc01      	bgt.n	19606 <_dtoa_r+0x236>
   19602:	f000 fd25 	bl	1a050 <_dtoa_r+0xc80>
   19606:	0032      	movs	r2, r6
   19608:	210f      	movs	r1, #15
   1960a:	4b65      	ldr	r3, [pc, #404]	; (197a0 <_dtoa_r+0x3d0>)
   1960c:	400a      	ands	r2, r1
   1960e:	00d2      	lsls	r2, r2, #3
   19610:	189b      	adds	r3, r3, r2
   19612:	1136      	asrs	r6, r6, #4
   19614:	681c      	ldr	r4, [r3, #0]
   19616:	685d      	ldr	r5, [r3, #4]
   19618:	06f3      	lsls	r3, r6, #27
   1961a:	d401      	bmi.n	19620 <_dtoa_r+0x250>
   1961c:	f000 fcca 	bl	19fb4 <_dtoa_r+0xbe4>
   19620:	4b60      	ldr	r3, [pc, #384]	; (197a4 <_dtoa_r+0x3d4>)
   19622:	400e      	ands	r6, r1
   19624:	6a1a      	ldr	r2, [r3, #32]
   19626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   19628:	9810      	ldr	r0, [sp, #64]	; 0x40
   1962a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1962c:	f7fb f866 	bl	146fc <__aeabi_ddiv>
   19630:	2303      	movs	r3, #3
   19632:	4698      	mov	r8, r3
   19634:	9008      	str	r0, [sp, #32]
   19636:	9109      	str	r1, [sp, #36]	; 0x24
   19638:	2e00      	cmp	r6, #0
   1963a:	d011      	beq.n	19660 <_dtoa_r+0x290>
   1963c:	4f59      	ldr	r7, [pc, #356]	; (197a4 <_dtoa_r+0x3d4>)
   1963e:	2301      	movs	r3, #1
   19640:	4233      	tst	r3, r6
   19642:	d009      	beq.n	19658 <_dtoa_r+0x288>
   19644:	469c      	mov	ip, r3
   19646:	683a      	ldr	r2, [r7, #0]
   19648:	687b      	ldr	r3, [r7, #4]
   1964a:	0020      	movs	r0, r4
   1964c:	0029      	movs	r1, r5
   1964e:	44e0      	add	r8, ip
   19650:	f7fb fb88 	bl	14d64 <__aeabi_dmul>
   19654:	0004      	movs	r4, r0
   19656:	000d      	movs	r5, r1
   19658:	1076      	asrs	r6, r6, #1
   1965a:	3708      	adds	r7, #8
   1965c:	2e00      	cmp	r6, #0
   1965e:	d1ee      	bne.n	1963e <_dtoa_r+0x26e>
   19660:	0022      	movs	r2, r4
   19662:	9808      	ldr	r0, [sp, #32]
   19664:	9909      	ldr	r1, [sp, #36]	; 0x24
   19666:	002b      	movs	r3, r5
   19668:	f7fb f848 	bl	146fc <__aeabi_ddiv>
   1966c:	0006      	movs	r6, r0
   1966e:	000f      	movs	r7, r1
   19670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19672:	2b00      	cmp	r3, #0
   19674:	d009      	beq.n	1968a <_dtoa_r+0x2ba>
   19676:	2200      	movs	r2, #0
   19678:	4b40      	ldr	r3, [pc, #256]	; (1977c <_dtoa_r+0x3ac>)
   1967a:	0030      	movs	r0, r6
   1967c:	0039      	movs	r1, r7
   1967e:	f7fc faef 	bl	15c60 <__aeabi_dcmplt>
   19682:	2800      	cmp	r0, #0
   19684:	d001      	beq.n	1968a <_dtoa_r+0x2ba>
   19686:	f000 fdc2 	bl	1a20e <_dtoa_r+0xe3e>
   1968a:	4640      	mov	r0, r8
   1968c:	f7fc f934 	bl	158f8 <__aeabi_i2d>
   19690:	0032      	movs	r2, r6
   19692:	003b      	movs	r3, r7
   19694:	f7fb fb66 	bl	14d64 <__aeabi_dmul>
   19698:	2200      	movs	r2, #0
   1969a:	4b43      	ldr	r3, [pc, #268]	; (197a8 <_dtoa_r+0x3d8>)
   1969c:	f7fa fd1e 	bl	140dc <__aeabi_dadd>
   196a0:	4a42      	ldr	r2, [pc, #264]	; (197ac <_dtoa_r+0x3dc>)
   196a2:	000b      	movs	r3, r1
   196a4:	4694      	mov	ip, r2
   196a6:	4463      	add	r3, ip
   196a8:	9008      	str	r0, [sp, #32]
   196aa:	9109      	str	r1, [sp, #36]	; 0x24
   196ac:	9309      	str	r3, [sp, #36]	; 0x24
   196ae:	9b07      	ldr	r3, [sp, #28]
   196b0:	2b00      	cmp	r3, #0
   196b2:	d101      	bne.n	196b8 <_dtoa_r+0x2e8>
   196b4:	f000 fc50 	bl	19f58 <_dtoa_r+0xb88>
   196b8:	9b03      	ldr	r3, [sp, #12]
   196ba:	9313      	str	r3, [sp, #76]	; 0x4c
   196bc:	9b07      	ldr	r3, [sp, #28]
   196be:	9312      	str	r3, [sp, #72]	; 0x48
   196c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   196c2:	2b00      	cmp	r3, #0
   196c4:	d101      	bne.n	196ca <_dtoa_r+0x2fa>
   196c6:	f000 fd1d 	bl	1a104 <_dtoa_r+0xd34>
   196ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   196cc:	2000      	movs	r0, #0
   196ce:	1e5a      	subs	r2, r3, #1
   196d0:	4b33      	ldr	r3, [pc, #204]	; (197a0 <_dtoa_r+0x3d0>)
   196d2:	00d2      	lsls	r2, r2, #3
   196d4:	189b      	adds	r3, r3, r2
   196d6:	681a      	ldr	r2, [r3, #0]
   196d8:	685b      	ldr	r3, [r3, #4]
   196da:	4935      	ldr	r1, [pc, #212]	; (197b0 <_dtoa_r+0x3e0>)
   196dc:	f7fb f80e 	bl	146fc <__aeabi_ddiv>
   196e0:	9a08      	ldr	r2, [sp, #32]
   196e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   196e4:	f7fb fdbe 	bl	15264 <__aeabi_dsub>
   196e8:	9008      	str	r0, [sp, #32]
   196ea:	9109      	str	r1, [sp, #36]	; 0x24
   196ec:	0039      	movs	r1, r7
   196ee:	0030      	movs	r0, r6
   196f0:	f7fc f8ce 	bl	15890 <__aeabi_d2iz>
   196f4:	0004      	movs	r4, r0
   196f6:	f7fc f8ff 	bl	158f8 <__aeabi_i2d>
   196fa:	0002      	movs	r2, r0
   196fc:	000b      	movs	r3, r1
   196fe:	0030      	movs	r0, r6
   19700:	0039      	movs	r1, r7
   19702:	f7fb fdaf 	bl	15264 <__aeabi_dsub>
   19706:	0005      	movs	r5, r0
   19708:	000e      	movs	r6, r1
   1970a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1970c:	3430      	adds	r4, #48	; 0x30
   1970e:	1c51      	adds	r1, r2, #1
   19710:	b2e7      	uxtb	r7, r4
   19712:	9114      	str	r1, [sp, #80]	; 0x50
   19714:	7017      	strb	r7, [r2, #0]
   19716:	0033      	movs	r3, r6
   19718:	9808      	ldr	r0, [sp, #32]
   1971a:	9909      	ldr	r1, [sp, #36]	; 0x24
   1971c:	002a      	movs	r2, r5
   1971e:	f7fc fab3 	bl	15c88 <__aeabi_dcmpgt>
   19722:	2800      	cmp	r0, #0
   19724:	d001      	beq.n	1972a <_dtoa_r+0x35a>
   19726:	f000 fdfe 	bl	1a326 <_dtoa_r+0xf56>
   1972a:	002a      	movs	r2, r5
   1972c:	0033      	movs	r3, r6
   1972e:	2000      	movs	r0, #0
   19730:	4912      	ldr	r1, [pc, #72]	; (1977c <_dtoa_r+0x3ac>)
   19732:	f7fb fd97 	bl	15264 <__aeabi_dsub>
   19736:	0002      	movs	r2, r0
   19738:	000b      	movs	r3, r1
   1973a:	9808      	ldr	r0, [sp, #32]
   1973c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1973e:	f7fc faa3 	bl	15c88 <__aeabi_dcmpgt>
   19742:	2800      	cmp	r0, #0
   19744:	d001      	beq.n	1974a <_dtoa_r+0x37a>
   19746:	f000 fde7 	bl	1a318 <_dtoa_r+0xf48>
   1974a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1974c:	2b01      	cmp	r3, #1
   1974e:	d101      	bne.n	19754 <_dtoa_r+0x384>
   19750:	f000 fc78 	bl	1a044 <_dtoa_r+0xc74>
   19754:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19756:	9b12      	ldr	r3, [sp, #72]	; 0x48
   19758:	4694      	mov	ip, r2
   1975a:	4463      	add	r3, ip
   1975c:	4698      	mov	r8, r3
   1975e:	464b      	mov	r3, r9
   19760:	9312      	str	r3, [sp, #72]	; 0x48
   19762:	9b14      	ldr	r3, [sp, #80]	; 0x50
   19764:	4699      	mov	r9, r3
   19766:	e038      	b.n	197da <_dtoa_r+0x40a>
   19768:	7ff00000 	.word	0x7ff00000
   1976c:	0001d631 	.word	0x0001d631
   19770:	0000270f 	.word	0x0000270f
   19774:	0001e228 	.word	0x0001e228
   19778:	0001e234 	.word	0x0001e234
   1977c:	3ff00000 	.word	0x3ff00000
   19780:	fffffc01 	.word	0xfffffc01
   19784:	3ff80000 	.word	0x3ff80000
   19788:	636f4361 	.word	0x636f4361
   1978c:	3fd287a7 	.word	0x3fd287a7
   19790:	8b60c8b3 	.word	0x8b60c8b3
   19794:	3fc68a28 	.word	0x3fc68a28
   19798:	509f79fb 	.word	0x509f79fb
   1979c:	3fd34413 	.word	0x3fd34413
   197a0:	0001e260 	.word	0x0001e260
   197a4:	0001e238 	.word	0x0001e238
   197a8:	401c0000 	.word	0x401c0000
   197ac:	fcc00000 	.word	0xfcc00000
   197b0:	3fe00000 	.word	0x3fe00000
   197b4:	002a      	movs	r2, r5
   197b6:	0033      	movs	r3, r6
   197b8:	2000      	movs	r0, #0
   197ba:	49b9      	ldr	r1, [pc, #740]	; (19aa0 <_dtoa_r+0x6d0>)
   197bc:	f7fb fd52 	bl	15264 <__aeabi_dsub>
   197c0:	9a08      	ldr	r2, [sp, #32]
   197c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   197c4:	f7fc fa4c 	bl	15c60 <__aeabi_dcmplt>
   197c8:	2800      	cmp	r0, #0
   197ca:	d001      	beq.n	197d0 <_dtoa_r+0x400>
   197cc:	f000 fd74 	bl	1a2b8 <_dtoa_r+0xee8>
   197d0:	46a1      	mov	r9, r4
   197d2:	4544      	cmp	r4, r8
   197d4:	d101      	bne.n	197da <_dtoa_r+0x40a>
   197d6:	f000 fc33 	bl	1a040 <_dtoa_r+0xc70>
   197da:	9808      	ldr	r0, [sp, #32]
   197dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   197de:	2200      	movs	r2, #0
   197e0:	4bb0      	ldr	r3, [pc, #704]	; (19aa4 <_dtoa_r+0x6d4>)
   197e2:	f7fb fabf 	bl	14d64 <__aeabi_dmul>
   197e6:	2200      	movs	r2, #0
   197e8:	4bae      	ldr	r3, [pc, #696]	; (19aa4 <_dtoa_r+0x6d4>)
   197ea:	9008      	str	r0, [sp, #32]
   197ec:	9109      	str	r1, [sp, #36]	; 0x24
   197ee:	0028      	movs	r0, r5
   197f0:	0031      	movs	r1, r6
   197f2:	f7fb fab7 	bl	14d64 <__aeabi_dmul>
   197f6:	000d      	movs	r5, r1
   197f8:	0004      	movs	r4, r0
   197fa:	f7fc f849 	bl	15890 <__aeabi_d2iz>
   197fe:	0007      	movs	r7, r0
   19800:	f7fc f87a 	bl	158f8 <__aeabi_i2d>
   19804:	0002      	movs	r2, r0
   19806:	000b      	movs	r3, r1
   19808:	0020      	movs	r0, r4
   1980a:	0029      	movs	r1, r5
   1980c:	f7fb fd2a 	bl	15264 <__aeabi_dsub>
   19810:	464b      	mov	r3, r9
   19812:	3730      	adds	r7, #48	; 0x30
   19814:	b2ff      	uxtb	r7, r7
   19816:	1c5c      	adds	r4, r3, #1
   19818:	701f      	strb	r7, [r3, #0]
   1981a:	9a08      	ldr	r2, [sp, #32]
   1981c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1981e:	0005      	movs	r5, r0
   19820:	000e      	movs	r6, r1
   19822:	f7fc fa1d 	bl	15c60 <__aeabi_dcmplt>
   19826:	2800      	cmp	r0, #0
   19828:	d0c4      	beq.n	197b4 <_dtoa_r+0x3e4>
   1982a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1982c:	9303      	str	r3, [sp, #12]
   1982e:	4659      	mov	r1, fp
   19830:	4650      	mov	r0, sl
   19832:	f001 fdd7 	bl	1b3e4 <_Bfree>
   19836:	2300      	movs	r3, #0
   19838:	7023      	strb	r3, [r4, #0]
   1983a:	9b03      	ldr	r3, [sp, #12]
   1983c:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1983e:	3301      	adds	r3, #1
   19840:	6013      	str	r3, [r2, #0]
   19842:	9b26      	ldr	r3, [sp, #152]	; 0x98
   19844:	2b00      	cmp	r3, #0
   19846:	d100      	bne.n	1984a <_dtoa_r+0x47a>
   19848:	e3a8      	b.n	19f9c <_dtoa_r+0xbcc>
   1984a:	601c      	str	r4, [r3, #0]
   1984c:	980a      	ldr	r0, [sp, #40]	; 0x28
   1984e:	e5f4      	b.n	1943a <_dtoa_r+0x6a>
   19850:	9b16      	ldr	r3, [sp, #88]	; 0x58
   19852:	4699      	mov	r9, r3
   19854:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   19856:	444b      	add	r3, r9
   19858:	001c      	movs	r4, r3
   1985a:	4b93      	ldr	r3, [pc, #588]	; (19aa8 <_dtoa_r+0x6d8>)
   1985c:	18e3      	adds	r3, r4, r3
   1985e:	2b20      	cmp	r3, #32
   19860:	dc00      	bgt.n	19864 <_dtoa_r+0x494>
   19862:	e17e      	b.n	19b62 <_dtoa_r+0x792>
   19864:	0031      	movs	r1, r6
   19866:	4a91      	ldr	r2, [pc, #580]	; (19aac <_dtoa_r+0x6dc>)
   19868:	4640      	mov	r0, r8
   1986a:	18a2      	adds	r2, r4, r2
   1986c:	40d1      	lsrs	r1, r2
   1986e:	000a      	movs	r2, r1
   19870:	2140      	movs	r1, #64	; 0x40
   19872:	1acb      	subs	r3, r1, r3
   19874:	4098      	lsls	r0, r3
   19876:	4310      	orrs	r0, r2
   19878:	f7fc f880 	bl	1597c <__aeabi_ui2d>
   1987c:	1e63      	subs	r3, r4, #1
   1987e:	4698      	mov	r8, r3
   19880:	2301      	movs	r3, #1
   19882:	4d8b      	ldr	r5, [pc, #556]	; (19ab0 <_dtoa_r+0x6e0>)
   19884:	930f      	str	r3, [sp, #60]	; 0x3c
   19886:	1949      	adds	r1, r1, r5
   19888:	e618      	b.n	194bc <_dtoa_r+0xec>
   1988a:	488a      	ldr	r0, [pc, #552]	; (19ab4 <_dtoa_r+0x6e4>)
   1988c:	e5d5      	b.n	1943a <_dtoa_r+0x6a>
   1988e:	2300      	movs	r3, #0
   19890:	4652      	mov	r2, sl
   19892:	2100      	movs	r1, #0
   19894:	6453      	str	r3, [r2, #68]	; 0x44
   19896:	4650      	mov	r0, sl
   19898:	f001 fd7c 	bl	1b394 <_Balloc>
   1989c:	4653      	mov	r3, sl
   1989e:	6418      	str	r0, [r3, #64]	; 0x40
   198a0:	2301      	movs	r3, #1
   198a2:	425b      	negs	r3, r3
   198a4:	9307      	str	r3, [sp, #28]
   198a6:	930e      	str	r3, [sp, #56]	; 0x38
   198a8:	3302      	adds	r3, #2
   198aa:	2200      	movs	r2, #0
   198ac:	930b      	str	r3, [sp, #44]	; 0x2c
   198ae:	2300      	movs	r3, #0
   198b0:	900a      	str	r0, [sp, #40]	; 0x28
   198b2:	9223      	str	r2, [sp, #140]	; 0x8c
   198b4:	9322      	str	r3, [sp, #136]	; 0x88
   198b6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   198b8:	2b00      	cmp	r3, #0
   198ba:	da00      	bge.n	198be <_dtoa_r+0x4ee>
   198bc:	e0ab      	b.n	19a16 <_dtoa_r+0x646>
   198be:	9a03      	ldr	r2, [sp, #12]
   198c0:	2a0e      	cmp	r2, #14
   198c2:	dd00      	ble.n	198c6 <_dtoa_r+0x4f6>
   198c4:	e0a7      	b.n	19a16 <_dtoa_r+0x646>
   198c6:	4b7c      	ldr	r3, [pc, #496]	; (19ab8 <_dtoa_r+0x6e8>)
   198c8:	00d2      	lsls	r2, r2, #3
   198ca:	189b      	adds	r3, r3, r2
   198cc:	685c      	ldr	r4, [r3, #4]
   198ce:	681b      	ldr	r3, [r3, #0]
   198d0:	9304      	str	r3, [sp, #16]
   198d2:	9405      	str	r4, [sp, #20]
   198d4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   198d6:	2b00      	cmp	r3, #0
   198d8:	da00      	bge.n	198dc <_dtoa_r+0x50c>
   198da:	e2a7      	b.n	19e2c <_dtoa_r+0xa5c>
   198dc:	9c04      	ldr	r4, [sp, #16]
   198de:	9d05      	ldr	r5, [sp, #20]
   198e0:	0030      	movs	r0, r6
   198e2:	0022      	movs	r2, r4
   198e4:	002b      	movs	r3, r5
   198e6:	0039      	movs	r1, r7
   198e8:	f7fa ff08 	bl	146fc <__aeabi_ddiv>
   198ec:	f7fb ffd0 	bl	15890 <__aeabi_d2iz>
   198f0:	4680      	mov	r8, r0
   198f2:	f7fc f801 	bl	158f8 <__aeabi_i2d>
   198f6:	0022      	movs	r2, r4
   198f8:	002b      	movs	r3, r5
   198fa:	f7fb fa33 	bl	14d64 <__aeabi_dmul>
   198fe:	0002      	movs	r2, r0
   19900:	000b      	movs	r3, r1
   19902:	0030      	movs	r0, r6
   19904:	0039      	movs	r1, r7
   19906:	f7fb fcad 	bl	15264 <__aeabi_dsub>
   1990a:	4643      	mov	r3, r8
   1990c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1990e:	3330      	adds	r3, #48	; 0x30
   19910:	7013      	strb	r3, [r2, #0]
   19912:	9b07      	ldr	r3, [sp, #28]
   19914:	0006      	movs	r6, r0
   19916:	000f      	movs	r7, r1
   19918:	1c54      	adds	r4, r2, #1
   1991a:	2b01      	cmp	r3, #1
   1991c:	d04e      	beq.n	199bc <_dtoa_r+0x5ec>
   1991e:	2200      	movs	r2, #0
   19920:	4b60      	ldr	r3, [pc, #384]	; (19aa4 <_dtoa_r+0x6d4>)
   19922:	f7fb fa1f 	bl	14d64 <__aeabi_dmul>
   19926:	2200      	movs	r2, #0
   19928:	2300      	movs	r3, #0
   1992a:	0006      	movs	r6, r0
   1992c:	000f      	movs	r7, r1
   1992e:	f7fc f991 	bl	15c54 <__aeabi_dcmpeq>
   19932:	2800      	cmp	r0, #0
   19934:	d000      	beq.n	19938 <_dtoa_r+0x568>
   19936:	e77a      	b.n	1982e <_dtoa_r+0x45e>
   19938:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1993a:	9a07      	ldr	r2, [sp, #28]
   1993c:	1c9d      	adds	r5, r3, #2
   1993e:	469c      	mov	ip, r3
   19940:	465b      	mov	r3, fp
   19942:	9306      	str	r3, [sp, #24]
   19944:	4653      	mov	r3, sl
   19946:	4462      	add	r2, ip
   19948:	46aa      	mov	sl, r5
   1994a:	9c04      	ldr	r4, [sp, #16]
   1994c:	9d05      	ldr	r5, [sp, #20]
   1994e:	4691      	mov	r9, r2
   19950:	9307      	str	r3, [sp, #28]
   19952:	e00f      	b.n	19974 <_dtoa_r+0x5a4>
   19954:	2200      	movs	r2, #0
   19956:	4b53      	ldr	r3, [pc, #332]	; (19aa4 <_dtoa_r+0x6d4>)
   19958:	f7fb fa04 	bl	14d64 <__aeabi_dmul>
   1995c:	2301      	movs	r3, #1
   1995e:	469c      	mov	ip, r3
   19960:	2200      	movs	r2, #0
   19962:	2300      	movs	r3, #0
   19964:	0006      	movs	r6, r0
   19966:	000f      	movs	r7, r1
   19968:	44e2      	add	sl, ip
   1996a:	f7fc f973 	bl	15c54 <__aeabi_dcmpeq>
   1996e:	2800      	cmp	r0, #0
   19970:	d000      	beq.n	19974 <_dtoa_r+0x5a4>
   19972:	e2d9      	b.n	19f28 <_dtoa_r+0xb58>
   19974:	0022      	movs	r2, r4
   19976:	002b      	movs	r3, r5
   19978:	0030      	movs	r0, r6
   1997a:	0039      	movs	r1, r7
   1997c:	f7fa febe 	bl	146fc <__aeabi_ddiv>
   19980:	f7fb ff86 	bl	15890 <__aeabi_d2iz>
   19984:	4680      	mov	r8, r0
   19986:	f7fb ffb7 	bl	158f8 <__aeabi_i2d>
   1998a:	0022      	movs	r2, r4
   1998c:	002b      	movs	r3, r5
   1998e:	f7fb f9e9 	bl	14d64 <__aeabi_dmul>
   19992:	0002      	movs	r2, r0
   19994:	000b      	movs	r3, r1
   19996:	0030      	movs	r0, r6
   19998:	0039      	movs	r1, r7
   1999a:	f7fb fc63 	bl	15264 <__aeabi_dsub>
   1999e:	4653      	mov	r3, sl
   199a0:	4642      	mov	r2, r8
   199a2:	3b01      	subs	r3, #1
   199a4:	3230      	adds	r2, #48	; 0x30
   199a6:	0006      	movs	r6, r0
   199a8:	000f      	movs	r7, r1
   199aa:	46d3      	mov	fp, sl
   199ac:	701a      	strb	r2, [r3, #0]
   199ae:	45d1      	cmp	r9, sl
   199b0:	d1d0      	bne.n	19954 <_dtoa_r+0x584>
   199b2:	9b06      	ldr	r3, [sp, #24]
   199b4:	4654      	mov	r4, sl
   199b6:	469b      	mov	fp, r3
   199b8:	9b07      	ldr	r3, [sp, #28]
   199ba:	469a      	mov	sl, r3
   199bc:	0032      	movs	r2, r6
   199be:	003b      	movs	r3, r7
   199c0:	0030      	movs	r0, r6
   199c2:	0039      	movs	r1, r7
   199c4:	f7fa fb8a 	bl	140dc <__aeabi_dadd>
   199c8:	0006      	movs	r6, r0
   199ca:	000f      	movs	r7, r1
   199cc:	0002      	movs	r2, r0
   199ce:	000b      	movs	r3, r1
   199d0:	9804      	ldr	r0, [sp, #16]
   199d2:	9905      	ldr	r1, [sp, #20]
   199d4:	f7fc f944 	bl	15c60 <__aeabi_dcmplt>
   199d8:	2800      	cmp	r0, #0
   199da:	d10c      	bne.n	199f6 <_dtoa_r+0x626>
   199dc:	9804      	ldr	r0, [sp, #16]
   199de:	9905      	ldr	r1, [sp, #20]
   199e0:	0032      	movs	r2, r6
   199e2:	003b      	movs	r3, r7
   199e4:	f7fc f936 	bl	15c54 <__aeabi_dcmpeq>
   199e8:	2800      	cmp	r0, #0
   199ea:	d100      	bne.n	199ee <_dtoa_r+0x61e>
   199ec:	e71f      	b.n	1982e <_dtoa_r+0x45e>
   199ee:	4643      	mov	r3, r8
   199f0:	07db      	lsls	r3, r3, #31
   199f2:	d400      	bmi.n	199f6 <_dtoa_r+0x626>
   199f4:	e71b      	b.n	1982e <_dtoa_r+0x45e>
   199f6:	1e65      	subs	r5, r4, #1
   199f8:	782f      	ldrb	r7, [r5, #0]
   199fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   199fc:	e006      	b.n	19a0c <_dtoa_r+0x63c>
   199fe:	429d      	cmp	r5, r3
   19a00:	d100      	bne.n	19a04 <_dtoa_r+0x634>
   19a02:	e351      	b.n	1a0a8 <_dtoa_r+0xcd8>
   19a04:	3c02      	subs	r4, #2
   19a06:	7827      	ldrb	r7, [r4, #0]
   19a08:	002c      	movs	r4, r5
   19a0a:	3d01      	subs	r5, #1
   19a0c:	2f39      	cmp	r7, #57	; 0x39
   19a0e:	d0f6      	beq.n	199fe <_dtoa_r+0x62e>
   19a10:	3701      	adds	r7, #1
   19a12:	702f      	strb	r7, [r5, #0]
   19a14:	e70b      	b.n	1982e <_dtoa_r+0x45e>
   19a16:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19a18:	2a00      	cmp	r2, #0
   19a1a:	d04f      	beq.n	19abc <_dtoa_r+0x6ec>
   19a1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19a1e:	2a01      	cmp	r2, #1
   19a20:	dc00      	bgt.n	19a24 <_dtoa_r+0x654>
   19a22:	e22c      	b.n	19e7e <_dtoa_r+0xaae>
   19a24:	9b07      	ldr	r3, [sp, #28]
   19a26:	1e5c      	subs	r4, r3, #1
   19a28:	464b      	mov	r3, r9
   19a2a:	45a1      	cmp	r9, r4
   19a2c:	da00      	bge.n	19a30 <_dtoa_r+0x660>
   19a2e:	e2b8      	b.n	19fa2 <_dtoa_r+0xbd2>
   19a30:	1b1c      	subs	r4, r3, r4
   19a32:	9b07      	ldr	r3, [sp, #28]
   19a34:	2b00      	cmp	r3, #0
   19a36:	da00      	bge.n	19a3a <_dtoa_r+0x66a>
   19a38:	e3d4      	b.n	1a1e4 <_dtoa_r+0xe14>
   19a3a:	9b06      	ldr	r3, [sp, #24]
   19a3c:	9308      	str	r3, [sp, #32]
   19a3e:	9b07      	ldr	r3, [sp, #28]
   19a40:	9a06      	ldr	r2, [sp, #24]
   19a42:	2101      	movs	r1, #1
   19a44:	4694      	mov	ip, r2
   19a46:	449c      	add	ip, r3
   19a48:	4662      	mov	r2, ip
   19a4a:	9206      	str	r2, [sp, #24]
   19a4c:	9a04      	ldr	r2, [sp, #16]
   19a4e:	4650      	mov	r0, sl
   19a50:	4694      	mov	ip, r2
   19a52:	449c      	add	ip, r3
   19a54:	4663      	mov	r3, ip
   19a56:	9304      	str	r3, [sp, #16]
   19a58:	f001 fd5c 	bl	1b514 <__i2b>
   19a5c:	4680      	mov	r8, r0
   19a5e:	e032      	b.n	19ac6 <_dtoa_r+0x6f6>
   19a60:	9a06      	ldr	r2, [sp, #24]
   19a62:	9b03      	ldr	r3, [sp, #12]
   19a64:	1ad2      	subs	r2, r2, r3
   19a66:	425b      	negs	r3, r3
   19a68:	4699      	mov	r9, r3
   19a6a:	2300      	movs	r3, #0
   19a6c:	9206      	str	r2, [sp, #24]
   19a6e:	930d      	str	r3, [sp, #52]	; 0x34
   19a70:	e579      	b.n	19566 <_dtoa_r+0x196>
   19a72:	9803      	ldr	r0, [sp, #12]
   19a74:	f7fb ff40 	bl	158f8 <__aeabi_i2d>
   19a78:	000b      	movs	r3, r1
   19a7a:	0002      	movs	r2, r0
   19a7c:	0029      	movs	r1, r5
   19a7e:	0020      	movs	r0, r4
   19a80:	f7fc f8e8 	bl	15c54 <__aeabi_dcmpeq>
   19a84:	0002      	movs	r2, r0
   19a86:	4250      	negs	r0, r2
   19a88:	4150      	adcs	r0, r2
   19a8a:	9b03      	ldr	r3, [sp, #12]
   19a8c:	1a1b      	subs	r3, r3, r0
   19a8e:	9303      	str	r3, [sp, #12]
   19a90:	e53d      	b.n	1950e <_dtoa_r+0x13e>
   19a92:	2301      	movs	r3, #1
   19a94:	1a9b      	subs	r3, r3, r2
   19a96:	9306      	str	r3, [sp, #24]
   19a98:	2300      	movs	r3, #0
   19a9a:	9304      	str	r3, [sp, #16]
   19a9c:	e557      	b.n	1954e <_dtoa_r+0x17e>
   19a9e:	46c0      	nop			; (mov r8, r8)
   19aa0:	3ff00000 	.word	0x3ff00000
   19aa4:	40240000 	.word	0x40240000
   19aa8:	00000432 	.word	0x00000432
   19aac:	00000412 	.word	0x00000412
   19ab0:	fe100000 	.word	0xfe100000
   19ab4:	0001d630 	.word	0x0001d630
   19ab8:	0001e260 	.word	0x0001e260
   19abc:	9b06      	ldr	r3, [sp, #24]
   19abe:	464c      	mov	r4, r9
   19ac0:	9308      	str	r3, [sp, #32]
   19ac2:	2300      	movs	r3, #0
   19ac4:	4698      	mov	r8, r3
   19ac6:	9908      	ldr	r1, [sp, #32]
   19ac8:	1e0b      	subs	r3, r1, #0
   19aca:	dd0e      	ble.n	19aea <_dtoa_r+0x71a>
   19acc:	9a04      	ldr	r2, [sp, #16]
   19ace:	2a00      	cmp	r2, #0
   19ad0:	dd0b      	ble.n	19aea <_dtoa_r+0x71a>
   19ad2:	4293      	cmp	r3, r2
   19ad4:	dd00      	ble.n	19ad8 <_dtoa_r+0x708>
   19ad6:	e187      	b.n	19de8 <_dtoa_r+0xa18>
   19ad8:	9a06      	ldr	r2, [sp, #24]
   19ada:	1ad2      	subs	r2, r2, r3
   19adc:	9206      	str	r2, [sp, #24]
   19ade:	9a08      	ldr	r2, [sp, #32]
   19ae0:	1ad2      	subs	r2, r2, r3
   19ae2:	9208      	str	r2, [sp, #32]
   19ae4:	9a04      	ldr	r2, [sp, #16]
   19ae6:	1ad3      	subs	r3, r2, r3
   19ae8:	9304      	str	r3, [sp, #16]
   19aea:	464b      	mov	r3, r9
   19aec:	2b00      	cmp	r3, #0
   19aee:	d01a      	beq.n	19b26 <_dtoa_r+0x756>
   19af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19af2:	2b00      	cmp	r3, #0
   19af4:	d100      	bne.n	19af8 <_dtoa_r+0x728>
   19af6:	e1bb      	b.n	19e70 <_dtoa_r+0xaa0>
   19af8:	2c00      	cmp	r4, #0
   19afa:	dd10      	ble.n	19b1e <_dtoa_r+0x74e>
   19afc:	4641      	mov	r1, r8
   19afe:	0022      	movs	r2, r4
   19b00:	4650      	mov	r0, sl
   19b02:	f001 fdbb 	bl	1b67c <__pow5mult>
   19b06:	465a      	mov	r2, fp
   19b08:	0001      	movs	r1, r0
   19b0a:	4680      	mov	r8, r0
   19b0c:	4650      	mov	r0, sl
   19b0e:	f001 fd0b 	bl	1b528 <__multiply>
   19b12:	0005      	movs	r5, r0
   19b14:	4659      	mov	r1, fp
   19b16:	4650      	mov	r0, sl
   19b18:	f001 fc64 	bl	1b3e4 <_Bfree>
   19b1c:	46ab      	mov	fp, r5
   19b1e:	464b      	mov	r3, r9
   19b20:	1b1a      	subs	r2, r3, r4
   19b22:	d000      	beq.n	19b26 <_dtoa_r+0x756>
   19b24:	e1a5      	b.n	19e72 <_dtoa_r+0xaa2>
   19b26:	2101      	movs	r1, #1
   19b28:	4650      	mov	r0, sl
   19b2a:	f001 fcf3 	bl	1b514 <__i2b>
   19b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19b30:	4681      	mov	r9, r0
   19b32:	2b00      	cmp	r3, #0
   19b34:	dd1d      	ble.n	19b72 <_dtoa_r+0x7a2>
   19b36:	001a      	movs	r2, r3
   19b38:	0001      	movs	r1, r0
   19b3a:	4650      	mov	r0, sl
   19b3c:	f001 fd9e 	bl	1b67c <__pow5mult>
   19b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19b42:	4681      	mov	r9, r0
   19b44:	2b01      	cmp	r3, #1
   19b46:	dc00      	bgt.n	19b4a <_dtoa_r+0x77a>
   19b48:	e150      	b.n	19dec <_dtoa_r+0xa1c>
   19b4a:	2400      	movs	r4, #0
   19b4c:	464b      	mov	r3, r9
   19b4e:	691b      	ldr	r3, [r3, #16]
   19b50:	3303      	adds	r3, #3
   19b52:	009b      	lsls	r3, r3, #2
   19b54:	444b      	add	r3, r9
   19b56:	6858      	ldr	r0, [r3, #4]
   19b58:	f001 fc94 	bl	1b484 <__hi0bits>
   19b5c:	2320      	movs	r3, #32
   19b5e:	1a1b      	subs	r3, r3, r0
   19b60:	e010      	b.n	19b84 <_dtoa_r+0x7b4>
   19b62:	2220      	movs	r2, #32
   19b64:	0030      	movs	r0, r6
   19b66:	1ad3      	subs	r3, r2, r3
   19b68:	4098      	lsls	r0, r3
   19b6a:	e685      	b.n	19878 <_dtoa_r+0x4a8>
   19b6c:	2300      	movs	r3, #0
   19b6e:	930c      	str	r3, [sp, #48]	; 0x30
   19b70:	e4e3      	b.n	1953a <_dtoa_r+0x16a>
   19b72:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19b74:	2400      	movs	r4, #0
   19b76:	2b01      	cmp	r3, #1
   19b78:	dc00      	bgt.n	19b7c <_dtoa_r+0x7ac>
   19b7a:	e18b      	b.n	19e94 <_dtoa_r+0xac4>
   19b7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   19b7e:	2301      	movs	r3, #1
   19b80:	2a00      	cmp	r2, #0
   19b82:	d1e3      	bne.n	19b4c <_dtoa_r+0x77c>
   19b84:	9904      	ldr	r1, [sp, #16]
   19b86:	201f      	movs	r0, #31
   19b88:	468c      	mov	ip, r1
   19b8a:	4463      	add	r3, ip
   19b8c:	4018      	ands	r0, r3
   19b8e:	d100      	bne.n	19b92 <_dtoa_r+0x7c2>
   19b90:	e0ae      	b.n	19cf0 <_dtoa_r+0x920>
   19b92:	2320      	movs	r3, #32
   19b94:	1a1b      	subs	r3, r3, r0
   19b96:	2b04      	cmp	r3, #4
   19b98:	dc00      	bgt.n	19b9c <_dtoa_r+0x7cc>
   19b9a:	e3cc      	b.n	1a336 <_dtoa_r+0xf66>
   19b9c:	231c      	movs	r3, #28
   19b9e:	1a18      	subs	r0, r3, r0
   19ba0:	9b06      	ldr	r3, [sp, #24]
   19ba2:	469c      	mov	ip, r3
   19ba4:	4484      	add	ip, r0
   19ba6:	4663      	mov	r3, ip
   19ba8:	9306      	str	r3, [sp, #24]
   19baa:	9b08      	ldr	r3, [sp, #32]
   19bac:	469c      	mov	ip, r3
   19bae:	4484      	add	ip, r0
   19bb0:	4663      	mov	r3, ip
   19bb2:	468c      	mov	ip, r1
   19bb4:	4484      	add	ip, r0
   19bb6:	9308      	str	r3, [sp, #32]
   19bb8:	4663      	mov	r3, ip
   19bba:	9304      	str	r3, [sp, #16]
   19bbc:	9b06      	ldr	r3, [sp, #24]
   19bbe:	2b00      	cmp	r3, #0
   19bc0:	dd05      	ble.n	19bce <_dtoa_r+0x7fe>
   19bc2:	4659      	mov	r1, fp
   19bc4:	001a      	movs	r2, r3
   19bc6:	4650      	mov	r0, sl
   19bc8:	f001 fdb8 	bl	1b73c <__lshift>
   19bcc:	4683      	mov	fp, r0
   19bce:	9b04      	ldr	r3, [sp, #16]
   19bd0:	2b00      	cmp	r3, #0
   19bd2:	dd05      	ble.n	19be0 <_dtoa_r+0x810>
   19bd4:	4649      	mov	r1, r9
   19bd6:	001a      	movs	r2, r3
   19bd8:	4650      	mov	r0, sl
   19bda:	f001 fdaf 	bl	1b73c <__lshift>
   19bde:	4681      	mov	r9, r0
   19be0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19be2:	2b00      	cmp	r3, #0
   19be4:	d000      	beq.n	19be8 <_dtoa_r+0x818>
   19be6:	e094      	b.n	19d12 <_dtoa_r+0x942>
   19be8:	9b07      	ldr	r3, [sp, #28]
   19bea:	2b00      	cmp	r3, #0
   19bec:	dc00      	bgt.n	19bf0 <_dtoa_r+0x820>
   19bee:	e175      	b.n	19edc <_dtoa_r+0xb0c>
   19bf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19bf2:	2b00      	cmp	r3, #0
   19bf4:	d100      	bne.n	19bf8 <_dtoa_r+0x828>
   19bf6:	e0a6      	b.n	19d46 <_dtoa_r+0x976>
   19bf8:	9b08      	ldr	r3, [sp, #32]
   19bfa:	2b00      	cmp	r3, #0
   19bfc:	dd05      	ble.n	19c0a <_dtoa_r+0x83a>
   19bfe:	4641      	mov	r1, r8
   19c00:	001a      	movs	r2, r3
   19c02:	4650      	mov	r0, sl
   19c04:	f001 fd9a 	bl	1b73c <__lshift>
   19c08:	4680      	mov	r8, r0
   19c0a:	4643      	mov	r3, r8
   19c0c:	930c      	str	r3, [sp, #48]	; 0x30
   19c0e:	2c00      	cmp	r4, #0
   19c10:	d000      	beq.n	19c14 <_dtoa_r+0x844>
   19c12:	e250      	b.n	1a0b6 <_dtoa_r+0xce6>
   19c14:	9c07      	ldr	r4, [sp, #28]
   19c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19c18:	3c01      	subs	r4, #1
   19c1a:	0023      	movs	r3, r4
   19c1c:	4694      	mov	ip, r2
   19c1e:	4463      	add	r3, ip
   19c20:	9308      	str	r3, [sp, #32]
   19c22:	2301      	movs	r3, #1
   19c24:	4033      	ands	r3, r6
   19c26:	9307      	str	r3, [sp, #28]
   19c28:	464b      	mov	r3, r9
   19c2a:	9306      	str	r3, [sp, #24]
   19c2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   19c2e:	4657      	mov	r7, sl
   19c30:	4645      	mov	r5, r8
   19c32:	465e      	mov	r6, fp
   19c34:	4692      	mov	sl, r2
   19c36:	4698      	mov	r8, r3
   19c38:	9b06      	ldr	r3, [sp, #24]
   19c3a:	0030      	movs	r0, r6
   19c3c:	0019      	movs	r1, r3
   19c3e:	4699      	mov	r9, r3
   19c40:	f7ff fb1c 	bl	1927c <quorem>
   19c44:	0003      	movs	r3, r0
   19c46:	900b      	str	r0, [sp, #44]	; 0x2c
   19c48:	3330      	adds	r3, #48	; 0x30
   19c4a:	0029      	movs	r1, r5
   19c4c:	0030      	movs	r0, r6
   19c4e:	9304      	str	r3, [sp, #16]
   19c50:	f001 fdd4 	bl	1b7fc <__mcmp>
   19c54:	4649      	mov	r1, r9
   19c56:	0004      	movs	r4, r0
   19c58:	4642      	mov	r2, r8
   19c5a:	0038      	movs	r0, r7
   19c5c:	f001 fde8 	bl	1b830 <__mdiff>
   19c60:	68c3      	ldr	r3, [r0, #12]
   19c62:	4681      	mov	r9, r0
   19c64:	2b00      	cmp	r3, #0
   19c66:	d000      	beq.n	19c6a <_dtoa_r+0x89a>
   19c68:	e11e      	b.n	19ea8 <_dtoa_r+0xad8>
   19c6a:	0001      	movs	r1, r0
   19c6c:	0030      	movs	r0, r6
   19c6e:	f001 fdc5 	bl	1b7fc <__mcmp>
   19c72:	4683      	mov	fp, r0
   19c74:	4649      	mov	r1, r9
   19c76:	0038      	movs	r0, r7
   19c78:	f001 fbb4 	bl	1b3e4 <_Bfree>
   19c7c:	465b      	mov	r3, fp
   19c7e:	9a22      	ldr	r2, [sp, #136]	; 0x88
   19c80:	4313      	orrs	r3, r2
   19c82:	d103      	bne.n	19c8c <_dtoa_r+0x8bc>
   19c84:	9b07      	ldr	r3, [sp, #28]
   19c86:	2b00      	cmp	r3, #0
   19c88:	d100      	bne.n	19c8c <_dtoa_r+0x8bc>
   19c8a:	e306      	b.n	1a29a <_dtoa_r+0xeca>
   19c8c:	2c00      	cmp	r4, #0
   19c8e:	da00      	bge.n	19c92 <_dtoa_r+0x8c2>
   19c90:	e1a8      	b.n	19fe4 <_dtoa_r+0xc14>
   19c92:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19c94:	431c      	orrs	r4, r3
   19c96:	d103      	bne.n	19ca0 <_dtoa_r+0x8d0>
   19c98:	9b07      	ldr	r3, [sp, #28]
   19c9a:	2b00      	cmp	r3, #0
   19c9c:	d100      	bne.n	19ca0 <_dtoa_r+0x8d0>
   19c9e:	e1a1      	b.n	19fe4 <_dtoa_r+0xc14>
   19ca0:	465b      	mov	r3, fp
   19ca2:	2b00      	cmp	r3, #0
   19ca4:	dd00      	ble.n	19ca8 <_dtoa_r+0x8d8>
   19ca6:	e282      	b.n	1a1ae <_dtoa_r+0xdde>
   19ca8:	4669      	mov	r1, sp
   19caa:	4652      	mov	r2, sl
   19cac:	4653      	mov	r3, sl
   19cae:	7c09      	ldrb	r1, [r1, #16]
   19cb0:	1c5c      	adds	r4, r3, #1
   19cb2:	7011      	strb	r1, [r2, #0]
   19cb4:	9a08      	ldr	r2, [sp, #32]
   19cb6:	4552      	cmp	r2, sl
   19cb8:	d100      	bne.n	19cbc <_dtoa_r+0x8ec>
   19cba:	e28a      	b.n	1a1d2 <_dtoa_r+0xe02>
   19cbc:	0031      	movs	r1, r6
   19cbe:	2300      	movs	r3, #0
   19cc0:	220a      	movs	r2, #10
   19cc2:	0038      	movs	r0, r7
   19cc4:	f001 fb98 	bl	1b3f8 <__multadd>
   19cc8:	2300      	movs	r3, #0
   19cca:	0006      	movs	r6, r0
   19ccc:	220a      	movs	r2, #10
   19cce:	0029      	movs	r1, r5
   19cd0:	0038      	movs	r0, r7
   19cd2:	4545      	cmp	r5, r8
   19cd4:	d100      	bne.n	19cd8 <_dtoa_r+0x908>
   19cd6:	e0e1      	b.n	19e9c <_dtoa_r+0xacc>
   19cd8:	f001 fb8e 	bl	1b3f8 <__multadd>
   19cdc:	4641      	mov	r1, r8
   19cde:	0005      	movs	r5, r0
   19ce0:	2300      	movs	r3, #0
   19ce2:	220a      	movs	r2, #10
   19ce4:	0038      	movs	r0, r7
   19ce6:	f001 fb87 	bl	1b3f8 <__multadd>
   19cea:	46a2      	mov	sl, r4
   19cec:	4680      	mov	r8, r0
   19cee:	e7a3      	b.n	19c38 <_dtoa_r+0x868>
   19cf0:	201c      	movs	r0, #28
   19cf2:	9b06      	ldr	r3, [sp, #24]
   19cf4:	469c      	mov	ip, r3
   19cf6:	4484      	add	ip, r0
   19cf8:	4663      	mov	r3, ip
   19cfa:	9306      	str	r3, [sp, #24]
   19cfc:	9b08      	ldr	r3, [sp, #32]
   19cfe:	469c      	mov	ip, r3
   19d00:	4484      	add	ip, r0
   19d02:	4663      	mov	r3, ip
   19d04:	9308      	str	r3, [sp, #32]
   19d06:	9b04      	ldr	r3, [sp, #16]
   19d08:	469c      	mov	ip, r3
   19d0a:	4484      	add	ip, r0
   19d0c:	4663      	mov	r3, ip
   19d0e:	9304      	str	r3, [sp, #16]
   19d10:	e754      	b.n	19bbc <_dtoa_r+0x7ec>
   19d12:	4649      	mov	r1, r9
   19d14:	4658      	mov	r0, fp
   19d16:	f001 fd71 	bl	1b7fc <__mcmp>
   19d1a:	2800      	cmp	r0, #0
   19d1c:	db00      	blt.n	19d20 <_dtoa_r+0x950>
   19d1e:	e763      	b.n	19be8 <_dtoa_r+0x818>
   19d20:	9b03      	ldr	r3, [sp, #12]
   19d22:	4659      	mov	r1, fp
   19d24:	3b01      	subs	r3, #1
   19d26:	9303      	str	r3, [sp, #12]
   19d28:	220a      	movs	r2, #10
   19d2a:	2300      	movs	r3, #0
   19d2c:	4650      	mov	r0, sl
   19d2e:	f001 fb63 	bl	1b3f8 <__multadd>
   19d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   19d34:	4683      	mov	fp, r0
   19d36:	2b00      	cmp	r3, #0
   19d38:	d000      	beq.n	19d3c <_dtoa_r+0x96c>
   19d3a:	e2ca      	b.n	1a2d2 <_dtoa_r+0xf02>
   19d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   19d3e:	2b00      	cmp	r3, #0
   19d40:	dc00      	bgt.n	19d44 <_dtoa_r+0x974>
   19d42:	e2d8      	b.n	1a2f6 <_dtoa_r+0xf26>
   19d44:	9307      	str	r3, [sp, #28]
   19d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d48:	465d      	mov	r5, fp
   19d4a:	2400      	movs	r4, #0
   19d4c:	9f07      	ldr	r7, [sp, #28]
   19d4e:	469b      	mov	fp, r3
   19d50:	e006      	b.n	19d60 <_dtoa_r+0x990>
   19d52:	0029      	movs	r1, r5
   19d54:	2300      	movs	r3, #0
   19d56:	220a      	movs	r2, #10
   19d58:	4650      	mov	r0, sl
   19d5a:	f001 fb4d 	bl	1b3f8 <__multadd>
   19d5e:	0005      	movs	r5, r0
   19d60:	4649      	mov	r1, r9
   19d62:	0028      	movs	r0, r5
   19d64:	f7ff fa8a 	bl	1927c <quorem>
   19d68:	465b      	mov	r3, fp
   19d6a:	3030      	adds	r0, #48	; 0x30
   19d6c:	5518      	strb	r0, [r3, r4]
   19d6e:	3401      	adds	r4, #1
   19d70:	42bc      	cmp	r4, r7
   19d72:	dbee      	blt.n	19d52 <_dtoa_r+0x982>
   19d74:	46ab      	mov	fp, r5
   19d76:	0006      	movs	r6, r0
   19d78:	9c07      	ldr	r4, [sp, #28]
   19d7a:	2c00      	cmp	r4, #0
   19d7c:	dc00      	bgt.n	19d80 <_dtoa_r+0x9b0>
   19d7e:	e237      	b.n	1a1f0 <_dtoa_r+0xe20>
   19d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   19d82:	2700      	movs	r7, #0
   19d84:	469c      	mov	ip, r3
   19d86:	4464      	add	r4, ip
   19d88:	4659      	mov	r1, fp
   19d8a:	2201      	movs	r2, #1
   19d8c:	4650      	mov	r0, sl
   19d8e:	f001 fcd5 	bl	1b73c <__lshift>
   19d92:	4649      	mov	r1, r9
   19d94:	4683      	mov	fp, r0
   19d96:	f001 fd31 	bl	1b7fc <__mcmp>
   19d9a:	2800      	cmp	r0, #0
   19d9c:	dc00      	bgt.n	19da0 <_dtoa_r+0x9d0>
   19d9e:	e144      	b.n	1a02a <_dtoa_r+0xc5a>
   19da0:	1e65      	subs	r5, r4, #1
   19da2:	782b      	ldrb	r3, [r5, #0]
   19da4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19da6:	e006      	b.n	19db6 <_dtoa_r+0x9e6>
   19da8:	4295      	cmp	r5, r2
   19daa:	d100      	bne.n	19dae <_dtoa_r+0x9de>
   19dac:	e0b1      	b.n	19f12 <_dtoa_r+0xb42>
   19dae:	3c02      	subs	r4, #2
   19db0:	7823      	ldrb	r3, [r4, #0]
   19db2:	002c      	movs	r4, r5
   19db4:	3d01      	subs	r5, #1
   19db6:	2b39      	cmp	r3, #57	; 0x39
   19db8:	d0f6      	beq.n	19da8 <_dtoa_r+0x9d8>
   19dba:	3301      	adds	r3, #1
   19dbc:	702b      	strb	r3, [r5, #0]
   19dbe:	4649      	mov	r1, r9
   19dc0:	4650      	mov	r0, sl
   19dc2:	f001 fb0f 	bl	1b3e4 <_Bfree>
   19dc6:	4643      	mov	r3, r8
   19dc8:	2b00      	cmp	r3, #0
   19dca:	d100      	bne.n	19dce <_dtoa_r+0x9fe>
   19dcc:	e52f      	b.n	1982e <_dtoa_r+0x45e>
   19dce:	2f00      	cmp	r7, #0
   19dd0:	d005      	beq.n	19dde <_dtoa_r+0xa0e>
   19dd2:	4547      	cmp	r7, r8
   19dd4:	d003      	beq.n	19dde <_dtoa_r+0xa0e>
   19dd6:	0039      	movs	r1, r7
   19dd8:	4650      	mov	r0, sl
   19dda:	f001 fb03 	bl	1b3e4 <_Bfree>
   19dde:	4641      	mov	r1, r8
   19de0:	4650      	mov	r0, sl
   19de2:	f001 faff 	bl	1b3e4 <_Bfree>
   19de6:	e522      	b.n	1982e <_dtoa_r+0x45e>
   19de8:	0013      	movs	r3, r2
   19dea:	e675      	b.n	19ad8 <_dtoa_r+0x708>
   19dec:	2e00      	cmp	r6, #0
   19dee:	d000      	beq.n	19df2 <_dtoa_r+0xa22>
   19df0:	e6ab      	b.n	19b4a <_dtoa_r+0x77a>
   19df2:	033b      	lsls	r3, r7, #12
   19df4:	2400      	movs	r4, #0
   19df6:	2b00      	cmp	r3, #0
   19df8:	d000      	beq.n	19dfc <_dtoa_r+0xa2c>
   19dfa:	e6bf      	b.n	19b7c <_dtoa_r+0x7ac>
   19dfc:	4bba      	ldr	r3, [pc, #744]	; (1a0e8 <_dtoa_r+0xd18>)
   19dfe:	423b      	tst	r3, r7
   19e00:	d100      	bne.n	19e04 <_dtoa_r+0xa34>
   19e02:	e6bb      	b.n	19b7c <_dtoa_r+0x7ac>
   19e04:	9b06      	ldr	r3, [sp, #24]
   19e06:	3401      	adds	r4, #1
   19e08:	3301      	adds	r3, #1
   19e0a:	9306      	str	r3, [sp, #24]
   19e0c:	9b04      	ldr	r3, [sp, #16]
   19e0e:	3301      	adds	r3, #1
   19e10:	9304      	str	r3, [sp, #16]
   19e12:	e6b3      	b.n	19b7c <_dtoa_r+0x7ac>
   19e14:	2301      	movs	r3, #1
   19e16:	930b      	str	r3, [sp, #44]	; 0x2c
   19e18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19e1a:	2b00      	cmp	r3, #0
   19e1c:	dc00      	bgt.n	19e20 <_dtoa_r+0xa50>
   19e1e:	e0d1      	b.n	19fc4 <_dtoa_r+0xbf4>
   19e20:	001d      	movs	r5, r3
   19e22:	4698      	mov	r8, r3
   19e24:	930e      	str	r3, [sp, #56]	; 0x38
   19e26:	9307      	str	r3, [sp, #28]
   19e28:	f7ff fbc8 	bl	195bc <_dtoa_r+0x1ec>
   19e2c:	9b07      	ldr	r3, [sp, #28]
   19e2e:	2b00      	cmp	r3, #0
   19e30:	dd00      	ble.n	19e34 <_dtoa_r+0xa64>
   19e32:	e553      	b.n	198dc <_dtoa_r+0x50c>
   19e34:	d000      	beq.n	19e38 <_dtoa_r+0xa68>
   19e36:	e0ad      	b.n	19f94 <_dtoa_r+0xbc4>
   19e38:	9804      	ldr	r0, [sp, #16]
   19e3a:	9905      	ldr	r1, [sp, #20]
   19e3c:	2200      	movs	r2, #0
   19e3e:	4bab      	ldr	r3, [pc, #684]	; (1a0ec <_dtoa_r+0xd1c>)
   19e40:	f7fa ff90 	bl	14d64 <__aeabi_dmul>
   19e44:	003b      	movs	r3, r7
   19e46:	0032      	movs	r2, r6
   19e48:	f7fb ff28 	bl	15c9c <__aeabi_dcmpge>
   19e4c:	2300      	movs	r3, #0
   19e4e:	4699      	mov	r9, r3
   19e50:	4698      	mov	r8, r3
   19e52:	2800      	cmp	r0, #0
   19e54:	d055      	beq.n	19f02 <_dtoa_r+0xb32>
   19e56:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   19e58:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   19e5a:	43db      	mvns	r3, r3
   19e5c:	9303      	str	r3, [sp, #12]
   19e5e:	4649      	mov	r1, r9
   19e60:	4650      	mov	r0, sl
   19e62:	f001 fabf 	bl	1b3e4 <_Bfree>
   19e66:	4643      	mov	r3, r8
   19e68:	2b00      	cmp	r3, #0
   19e6a:	d100      	bne.n	19e6e <_dtoa_r+0xa9e>
   19e6c:	e4df      	b.n	1982e <_dtoa_r+0x45e>
   19e6e:	e7b6      	b.n	19dde <_dtoa_r+0xa0e>
   19e70:	464a      	mov	r2, r9
   19e72:	4659      	mov	r1, fp
   19e74:	4650      	mov	r0, sl
   19e76:	f001 fc01 	bl	1b67c <__pow5mult>
   19e7a:	4683      	mov	fp, r0
   19e7c:	e653      	b.n	19b26 <_dtoa_r+0x756>
   19e7e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   19e80:	2a00      	cmp	r2, #0
   19e82:	d100      	bne.n	19e86 <_dtoa_r+0xab6>
   19e84:	e1b6      	b.n	1a1f4 <_dtoa_r+0xe24>
   19e86:	4a9a      	ldr	r2, [pc, #616]	; (1a0f0 <_dtoa_r+0xd20>)
   19e88:	464c      	mov	r4, r9
   19e8a:	4694      	mov	ip, r2
   19e8c:	9a06      	ldr	r2, [sp, #24]
   19e8e:	4463      	add	r3, ip
   19e90:	9208      	str	r2, [sp, #32]
   19e92:	e5d5      	b.n	19a40 <_dtoa_r+0x670>
   19e94:	2e00      	cmp	r6, #0
   19e96:	d000      	beq.n	19e9a <_dtoa_r+0xaca>
   19e98:	e670      	b.n	19b7c <_dtoa_r+0x7ac>
   19e9a:	e7aa      	b.n	19df2 <_dtoa_r+0xa22>
   19e9c:	f001 faac 	bl	1b3f8 <__multadd>
   19ea0:	46a2      	mov	sl, r4
   19ea2:	0005      	movs	r5, r0
   19ea4:	4680      	mov	r8, r0
   19ea6:	e6c7      	b.n	19c38 <_dtoa_r+0x868>
   19ea8:	2301      	movs	r3, #1
   19eaa:	469b      	mov	fp, r3
   19eac:	e6e2      	b.n	19c74 <_dtoa_r+0x8a4>
   19eae:	2300      	movs	r3, #0
   19eb0:	930b      	str	r3, [sp, #44]	; 0x2c
   19eb2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19eb4:	2b02      	cmp	r3, #2
   19eb6:	d0af      	beq.n	19e18 <_dtoa_r+0xa48>
   19eb8:	2400      	movs	r4, #0
   19eba:	4653      	mov	r3, sl
   19ebc:	0021      	movs	r1, r4
   19ebe:	645c      	str	r4, [r3, #68]	; 0x44
   19ec0:	4650      	mov	r0, sl
   19ec2:	f001 fa67 	bl	1b394 <_Balloc>
   19ec6:	4653      	mov	r3, sl
   19ec8:	6418      	str	r0, [r3, #64]	; 0x40
   19eca:	2301      	movs	r3, #1
   19ecc:	425b      	negs	r3, r3
   19ece:	9307      	str	r3, [sp, #28]
   19ed0:	930e      	str	r3, [sp, #56]	; 0x38
   19ed2:	3302      	adds	r3, #2
   19ed4:	900a      	str	r0, [sp, #40]	; 0x28
   19ed6:	9423      	str	r4, [sp, #140]	; 0x8c
   19ed8:	930b      	str	r3, [sp, #44]	; 0x2c
   19eda:	e4ec      	b.n	198b6 <_dtoa_r+0x4e6>
   19edc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   19ede:	2b02      	cmp	r3, #2
   19ee0:	dc00      	bgt.n	19ee4 <_dtoa_r+0xb14>
   19ee2:	e685      	b.n	19bf0 <_dtoa_r+0x820>
   19ee4:	9b07      	ldr	r3, [sp, #28]
   19ee6:	2b00      	cmp	r3, #0
   19ee8:	d1b5      	bne.n	19e56 <_dtoa_r+0xa86>
   19eea:	4649      	mov	r1, r9
   19eec:	2205      	movs	r2, #5
   19eee:	4650      	mov	r0, sl
   19ef0:	f001 fa82 	bl	1b3f8 <__multadd>
   19ef4:	4681      	mov	r9, r0
   19ef6:	0001      	movs	r1, r0
   19ef8:	4658      	mov	r0, fp
   19efa:	f001 fc7f 	bl	1b7fc <__mcmp>
   19efe:	2800      	cmp	r0, #0
   19f00:	dda9      	ble.n	19e56 <_dtoa_r+0xa86>
   19f02:	2331      	movs	r3, #49	; 0x31
   19f04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19f06:	7013      	strb	r3, [r2, #0]
   19f08:	9b03      	ldr	r3, [sp, #12]
   19f0a:	1c54      	adds	r4, r2, #1
   19f0c:	3301      	adds	r3, #1
   19f0e:	9303      	str	r3, [sp, #12]
   19f10:	e7a5      	b.n	19e5e <_dtoa_r+0xa8e>
   19f12:	9b03      	ldr	r3, [sp, #12]
   19f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   19f16:	3301      	adds	r3, #1
   19f18:	9303      	str	r3, [sp, #12]
   19f1a:	2331      	movs	r3, #49	; 0x31
   19f1c:	7013      	strb	r3, [r2, #0]
   19f1e:	e74e      	b.n	19dbe <_dtoa_r+0x9ee>
   19f20:	2300      	movs	r3, #0
   19f22:	930b      	str	r3, [sp, #44]	; 0x2c
   19f24:	f7ff fb3d 	bl	195a2 <_dtoa_r+0x1d2>
   19f28:	9b06      	ldr	r3, [sp, #24]
   19f2a:	465c      	mov	r4, fp
   19f2c:	469b      	mov	fp, r3
   19f2e:	9b07      	ldr	r3, [sp, #28]
   19f30:	469a      	mov	sl, r3
   19f32:	e47c      	b.n	1982e <_dtoa_r+0x45e>
   19f34:	4640      	mov	r0, r8
   19f36:	f7fb fcdf 	bl	158f8 <__aeabi_i2d>
   19f3a:	0032      	movs	r2, r6
   19f3c:	003b      	movs	r3, r7
   19f3e:	f7fa ff11 	bl	14d64 <__aeabi_dmul>
   19f42:	2200      	movs	r2, #0
   19f44:	4b6b      	ldr	r3, [pc, #428]	; (1a0f4 <_dtoa_r+0xd24>)
   19f46:	f7fa f8c9 	bl	140dc <__aeabi_dadd>
   19f4a:	4a6b      	ldr	r2, [pc, #428]	; (1a0f8 <_dtoa_r+0xd28>)
   19f4c:	000b      	movs	r3, r1
   19f4e:	4694      	mov	ip, r2
   19f50:	4463      	add	r3, ip
   19f52:	9008      	str	r0, [sp, #32]
   19f54:	9109      	str	r1, [sp, #36]	; 0x24
   19f56:	9309      	str	r3, [sp, #36]	; 0x24
   19f58:	2200      	movs	r2, #0
   19f5a:	4b64      	ldr	r3, [pc, #400]	; (1a0ec <_dtoa_r+0xd1c>)
   19f5c:	0030      	movs	r0, r6
   19f5e:	0039      	movs	r1, r7
   19f60:	f7fb f980 	bl	15264 <__aeabi_dsub>
   19f64:	9e08      	ldr	r6, [sp, #32]
   19f66:	9f09      	ldr	r7, [sp, #36]	; 0x24
   19f68:	0032      	movs	r2, r6
   19f6a:	003b      	movs	r3, r7
   19f6c:	0004      	movs	r4, r0
   19f6e:	000d      	movs	r5, r1
   19f70:	f7fb fe8a 	bl	15c88 <__aeabi_dcmpgt>
   19f74:	2800      	cmp	r0, #0
   19f76:	d000      	beq.n	19f7a <_dtoa_r+0xbaa>
   19f78:	e0b2      	b.n	1a0e0 <_dtoa_r+0xd10>
   19f7a:	2080      	movs	r0, #128	; 0x80
   19f7c:	0600      	lsls	r0, r0, #24
   19f7e:	4684      	mov	ip, r0
   19f80:	0039      	movs	r1, r7
   19f82:	4461      	add	r1, ip
   19f84:	000b      	movs	r3, r1
   19f86:	0032      	movs	r2, r6
   19f88:	0020      	movs	r0, r4
   19f8a:	0029      	movs	r1, r5
   19f8c:	f7fb fe68 	bl	15c60 <__aeabi_dcmplt>
   19f90:	2800      	cmp	r0, #0
   19f92:	d057      	beq.n	1a044 <_dtoa_r+0xc74>
   19f94:	2300      	movs	r3, #0
   19f96:	4699      	mov	r9, r3
   19f98:	4698      	mov	r8, r3
   19f9a:	e75c      	b.n	19e56 <_dtoa_r+0xa86>
   19f9c:	980a      	ldr	r0, [sp, #40]	; 0x28
   19f9e:	f7ff fa4c 	bl	1943a <_dtoa_r+0x6a>
   19fa2:	1ae2      	subs	r2, r4, r3
   19fa4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   19fa6:	46a1      	mov	r9, r4
   19fa8:	469c      	mov	ip, r3
   19faa:	4494      	add	ip, r2
   19fac:	4663      	mov	r3, ip
   19fae:	2400      	movs	r4, #0
   19fb0:	930d      	str	r3, [sp, #52]	; 0x34
   19fb2:	e53e      	b.n	19a32 <_dtoa_r+0x662>
   19fb4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   19fb6:	9b11      	ldr	r3, [sp, #68]	; 0x44
   19fb8:	9208      	str	r2, [sp, #32]
   19fba:	9309      	str	r3, [sp, #36]	; 0x24
   19fbc:	2302      	movs	r3, #2
   19fbe:	4698      	mov	r8, r3
   19fc0:	f7ff fb3a 	bl	19638 <_dtoa_r+0x268>
   19fc4:	2300      	movs	r3, #0
   19fc6:	4652      	mov	r2, sl
   19fc8:	2100      	movs	r1, #0
   19fca:	6453      	str	r3, [r2, #68]	; 0x44
   19fcc:	4650      	mov	r0, sl
   19fce:	f001 f9e1 	bl	1b394 <_Balloc>
   19fd2:	4653      	mov	r3, sl
   19fd4:	6418      	str	r0, [r3, #64]	; 0x40
   19fd6:	2301      	movs	r3, #1
   19fd8:	900a      	str	r0, [sp, #40]	; 0x28
   19fda:	9307      	str	r3, [sp, #28]
   19fdc:	9323      	str	r3, [sp, #140]	; 0x8c
   19fde:	930e      	str	r3, [sp, #56]	; 0x38
   19fe0:	f7ff fb07 	bl	195f2 <_dtoa_r+0x222>
   19fe4:	4643      	mov	r3, r8
   19fe6:	930c      	str	r3, [sp, #48]	; 0x30
   19fe8:	465b      	mov	r3, fp
   19fea:	9a06      	ldr	r2, [sp, #24]
   19fec:	46a8      	mov	r8, r5
   19fee:	46b3      	mov	fp, r6
   19ff0:	4655      	mov	r5, sl
   19ff2:	9e04      	ldr	r6, [sp, #16]
   19ff4:	4691      	mov	r9, r2
   19ff6:	46ba      	mov	sl, r7
   19ff8:	2b00      	cmp	r3, #0
   19ffa:	dd10      	ble.n	1a01e <_dtoa_r+0xc4e>
   19ffc:	4659      	mov	r1, fp
   19ffe:	2201      	movs	r2, #1
   1a000:	0038      	movs	r0, r7
   1a002:	f001 fb9b 	bl	1b73c <__lshift>
   1a006:	4649      	mov	r1, r9
   1a008:	4683      	mov	fp, r0
   1a00a:	f001 fbf7 	bl	1b7fc <__mcmp>
   1a00e:	2800      	cmp	r0, #0
   1a010:	dc00      	bgt.n	1a014 <_dtoa_r+0xc44>
   1a012:	e157      	b.n	1a2c4 <_dtoa_r+0xef4>
   1a014:	2e39      	cmp	r6, #57	; 0x39
   1a016:	d100      	bne.n	1a01a <_dtoa_r+0xc4a>
   1a018:	e122      	b.n	1a260 <_dtoa_r+0xe90>
   1a01a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   1a01c:	3631      	adds	r6, #49	; 0x31
   1a01e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a020:	4647      	mov	r7, r8
   1a022:	1c6c      	adds	r4, r5, #1
   1a024:	702e      	strb	r6, [r5, #0]
   1a026:	4698      	mov	r8, r3
   1a028:	e6c9      	b.n	19dbe <_dtoa_r+0x9ee>
   1a02a:	2800      	cmp	r0, #0
   1a02c:	d103      	bne.n	1a036 <_dtoa_r+0xc66>
   1a02e:	07f3      	lsls	r3, r6, #31
   1a030:	d501      	bpl.n	1a036 <_dtoa_r+0xc66>
   1a032:	e6b5      	b.n	19da0 <_dtoa_r+0x9d0>
   1a034:	001c      	movs	r4, r3
   1a036:	1e63      	subs	r3, r4, #1
   1a038:	781a      	ldrb	r2, [r3, #0]
   1a03a:	2a30      	cmp	r2, #48	; 0x30
   1a03c:	d0fa      	beq.n	1a034 <_dtoa_r+0xc64>
   1a03e:	e6be      	b.n	19dbe <_dtoa_r+0x9ee>
   1a040:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a042:	4699      	mov	r9, r3
   1a044:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1a046:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a048:	e435      	b.n	198b6 <_dtoa_r+0x4e6>
   1a04a:	2501      	movs	r5, #1
   1a04c:	f7ff fab4 	bl	195b8 <_dtoa_r+0x1e8>
   1a050:	9b03      	ldr	r3, [sp, #12]
   1a052:	2b00      	cmp	r3, #0
   1a054:	d100      	bne.n	1a058 <_dtoa_r+0xc88>
   1a056:	e0d4      	b.n	1a202 <_dtoa_r+0xe32>
   1a058:	9810      	ldr	r0, [sp, #64]	; 0x40
   1a05a:	9911      	ldr	r1, [sp, #68]	; 0x44
   1a05c:	425c      	negs	r4, r3
   1a05e:	230f      	movs	r3, #15
   1a060:	4a26      	ldr	r2, [pc, #152]	; (1a0fc <_dtoa_r+0xd2c>)
   1a062:	4023      	ands	r3, r4
   1a064:	00db      	lsls	r3, r3, #3
   1a066:	18d3      	adds	r3, r2, r3
   1a068:	681a      	ldr	r2, [r3, #0]
   1a06a:	685b      	ldr	r3, [r3, #4]
   1a06c:	f7fa fe7a 	bl	14d64 <__aeabi_dmul>
   1a070:	1124      	asrs	r4, r4, #4
   1a072:	0006      	movs	r6, r0
   1a074:	000f      	movs	r7, r1
   1a076:	2c00      	cmp	r4, #0
   1a078:	d100      	bne.n	1a07c <_dtoa_r+0xcac>
   1a07a:	e149      	b.n	1a310 <_dtoa_r+0xf40>
   1a07c:	2302      	movs	r3, #2
   1a07e:	4698      	mov	r8, r3
   1a080:	4d1f      	ldr	r5, [pc, #124]	; (1a100 <_dtoa_r+0xd30>)
   1a082:	2301      	movs	r3, #1
   1a084:	4223      	tst	r3, r4
   1a086:	d009      	beq.n	1a09c <_dtoa_r+0xccc>
   1a088:	469c      	mov	ip, r3
   1a08a:	682a      	ldr	r2, [r5, #0]
   1a08c:	686b      	ldr	r3, [r5, #4]
   1a08e:	0030      	movs	r0, r6
   1a090:	0039      	movs	r1, r7
   1a092:	44e0      	add	r8, ip
   1a094:	f7fa fe66 	bl	14d64 <__aeabi_dmul>
   1a098:	0006      	movs	r6, r0
   1a09a:	000f      	movs	r7, r1
   1a09c:	1064      	asrs	r4, r4, #1
   1a09e:	3508      	adds	r5, #8
   1a0a0:	2c00      	cmp	r4, #0
   1a0a2:	d1ee      	bne.n	1a082 <_dtoa_r+0xcb2>
   1a0a4:	f7ff fae4 	bl	19670 <_dtoa_r+0x2a0>
   1a0a8:	9b03      	ldr	r3, [sp, #12]
   1a0aa:	2730      	movs	r7, #48	; 0x30
   1a0ac:	3301      	adds	r3, #1
   1a0ae:	9303      	str	r3, [sp, #12]
   1a0b0:	2330      	movs	r3, #48	; 0x30
   1a0b2:	702b      	strb	r3, [r5, #0]
   1a0b4:	e4ac      	b.n	19a10 <_dtoa_r+0x640>
   1a0b6:	6859      	ldr	r1, [r3, #4]
   1a0b8:	4650      	mov	r0, sl
   1a0ba:	f001 f96b 	bl	1b394 <_Balloc>
   1a0be:	4643      	mov	r3, r8
   1a0c0:	4641      	mov	r1, r8
   1a0c2:	0004      	movs	r4, r0
   1a0c4:	691b      	ldr	r3, [r3, #16]
   1a0c6:	310c      	adds	r1, #12
   1a0c8:	1c9a      	adds	r2, r3, #2
   1a0ca:	0092      	lsls	r2, r2, #2
   1a0cc:	300c      	adds	r0, #12
   1a0ce:	f7fb ff39 	bl	15f44 <memcpy>
   1a0d2:	2201      	movs	r2, #1
   1a0d4:	0021      	movs	r1, r4
   1a0d6:	4650      	mov	r0, sl
   1a0d8:	f001 fb30 	bl	1b73c <__lshift>
   1a0dc:	900c      	str	r0, [sp, #48]	; 0x30
   1a0de:	e599      	b.n	19c14 <_dtoa_r+0x844>
   1a0e0:	2300      	movs	r3, #0
   1a0e2:	4699      	mov	r9, r3
   1a0e4:	4698      	mov	r8, r3
   1a0e6:	e70c      	b.n	19f02 <_dtoa_r+0xb32>
   1a0e8:	7ff00000 	.word	0x7ff00000
   1a0ec:	40140000 	.word	0x40140000
   1a0f0:	00000433 	.word	0x00000433
   1a0f4:	401c0000 	.word	0x401c0000
   1a0f8:	fcc00000 	.word	0xfcc00000
   1a0fc:	0001e260 	.word	0x0001e260
   1a100:	0001e238 	.word	0x0001e238
   1a104:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a106:	498f      	ldr	r1, [pc, #572]	; (1a344 <_dtoa_r+0xf74>)
   1a108:	3b01      	subs	r3, #1
   1a10a:	00db      	lsls	r3, r3, #3
   1a10c:	18c9      	adds	r1, r1, r3
   1a10e:	6808      	ldr	r0, [r1, #0]
   1a110:	6849      	ldr	r1, [r1, #4]
   1a112:	9a08      	ldr	r2, [sp, #32]
   1a114:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a116:	f7fa fe25 	bl	14d64 <__aeabi_dmul>
   1a11a:	9014      	str	r0, [sp, #80]	; 0x50
   1a11c:	9115      	str	r1, [sp, #84]	; 0x54
   1a11e:	0039      	movs	r1, r7
   1a120:	0030      	movs	r0, r6
   1a122:	f7fb fbb5 	bl	15890 <__aeabi_d2iz>
   1a126:	0005      	movs	r5, r0
   1a128:	f7fb fbe6 	bl	158f8 <__aeabi_i2d>
   1a12c:	0002      	movs	r2, r0
   1a12e:	000b      	movs	r3, r1
   1a130:	0030      	movs	r0, r6
   1a132:	0039      	movs	r1, r7
   1a134:	f7fb f896 	bl	15264 <__aeabi_dsub>
   1a138:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1a13a:	9008      	str	r0, [sp, #32]
   1a13c:	9109      	str	r1, [sp, #36]	; 0x24
   1a13e:	990a      	ldr	r1, [sp, #40]	; 0x28
   1a140:	001a      	movs	r2, r3
   1a142:	468c      	mov	ip, r1
   1a144:	3530      	adds	r5, #48	; 0x30
   1a146:	4462      	add	r2, ip
   1a148:	1c4c      	adds	r4, r1, #1
   1a14a:	700d      	strb	r5, [r1, #0]
   1a14c:	4690      	mov	r8, r2
   1a14e:	2b01      	cmp	r3, #1
   1a150:	d01b      	beq.n	1a18a <_dtoa_r+0xdba>
   1a152:	9808      	ldr	r0, [sp, #32]
   1a154:	9909      	ldr	r1, [sp, #36]	; 0x24
   1a156:	0025      	movs	r5, r4
   1a158:	2200      	movs	r2, #0
   1a15a:	4b7b      	ldr	r3, [pc, #492]	; (1a348 <_dtoa_r+0xf78>)
   1a15c:	f7fa fe02 	bl	14d64 <__aeabi_dmul>
   1a160:	000f      	movs	r7, r1
   1a162:	0006      	movs	r6, r0
   1a164:	f7fb fb94 	bl	15890 <__aeabi_d2iz>
   1a168:	0004      	movs	r4, r0
   1a16a:	f7fb fbc5 	bl	158f8 <__aeabi_i2d>
   1a16e:	3430      	adds	r4, #48	; 0x30
   1a170:	0002      	movs	r2, r0
   1a172:	000b      	movs	r3, r1
   1a174:	0030      	movs	r0, r6
   1a176:	0039      	movs	r1, r7
   1a178:	f7fb f874 	bl	15264 <__aeabi_dsub>
   1a17c:	702c      	strb	r4, [r5, #0]
   1a17e:	3501      	adds	r5, #1
   1a180:	45a8      	cmp	r8, r5
   1a182:	d1e9      	bne.n	1a158 <_dtoa_r+0xd88>
   1a184:	4644      	mov	r4, r8
   1a186:	9008      	str	r0, [sp, #32]
   1a188:	9109      	str	r1, [sp, #36]	; 0x24
   1a18a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1a18c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1a18e:	2200      	movs	r2, #0
   1a190:	4b6e      	ldr	r3, [pc, #440]	; (1a34c <_dtoa_r+0xf7c>)
   1a192:	f7f9 ffa3 	bl	140dc <__aeabi_dadd>
   1a196:	9a08      	ldr	r2, [sp, #32]
   1a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a19a:	f7fb fd61 	bl	15c60 <__aeabi_dcmplt>
   1a19e:	2800      	cmp	r0, #0
   1a1a0:	d067      	beq.n	1a272 <_dtoa_r+0xea2>
   1a1a2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a1a4:	1e65      	subs	r5, r4, #1
   1a1a6:	9303      	str	r3, [sp, #12]
   1a1a8:	782f      	ldrb	r7, [r5, #0]
   1a1aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a1ac:	e42e      	b.n	19a0c <_dtoa_r+0x63c>
   1a1ae:	4643      	mov	r3, r8
   1a1b0:	46b3      	mov	fp, r6
   1a1b2:	930c      	str	r3, [sp, #48]	; 0x30
   1a1b4:	9e04      	ldr	r6, [sp, #16]
   1a1b6:	9b06      	ldr	r3, [sp, #24]
   1a1b8:	46a8      	mov	r8, r5
   1a1ba:	4699      	mov	r9, r3
   1a1bc:	4655      	mov	r5, sl
   1a1be:	46ba      	mov	sl, r7
   1a1c0:	2e39      	cmp	r6, #57	; 0x39
   1a1c2:	d04d      	beq.n	1a260 <_dtoa_r+0xe90>
   1a1c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a1c6:	3601      	adds	r6, #1
   1a1c8:	4647      	mov	r7, r8
   1a1ca:	1c6c      	adds	r4, r5, #1
   1a1cc:	702e      	strb	r6, [r5, #0]
   1a1ce:	4698      	mov	r8, r3
   1a1d0:	e5f5      	b.n	19dbe <_dtoa_r+0x9ee>
   1a1d2:	4642      	mov	r2, r8
   1a1d4:	9b06      	ldr	r3, [sp, #24]
   1a1d6:	46b3      	mov	fp, r6
   1a1d8:	46ba      	mov	sl, r7
   1a1da:	9e04      	ldr	r6, [sp, #16]
   1a1dc:	4699      	mov	r9, r3
   1a1de:	002f      	movs	r7, r5
   1a1e0:	4690      	mov	r8, r2
   1a1e2:	e5d1      	b.n	19d88 <_dtoa_r+0x9b8>
   1a1e4:	9b06      	ldr	r3, [sp, #24]
   1a1e6:	9a07      	ldr	r2, [sp, #28]
   1a1e8:	1a9b      	subs	r3, r3, r2
   1a1ea:	9308      	str	r3, [sp, #32]
   1a1ec:	2300      	movs	r3, #0
   1a1ee:	e427      	b.n	19a40 <_dtoa_r+0x670>
   1a1f0:	2401      	movs	r4, #1
   1a1f2:	e5c5      	b.n	19d80 <_dtoa_r+0x9b0>
   1a1f4:	2336      	movs	r3, #54	; 0x36
   1a1f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1a1f8:	464c      	mov	r4, r9
   1a1fa:	1a9b      	subs	r3, r3, r2
   1a1fc:	9a06      	ldr	r2, [sp, #24]
   1a1fe:	9208      	str	r2, [sp, #32]
   1a200:	e41e      	b.n	19a40 <_dtoa_r+0x670>
   1a202:	2302      	movs	r3, #2
   1a204:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1a206:	9f11      	ldr	r7, [sp, #68]	; 0x44
   1a208:	4698      	mov	r8, r3
   1a20a:	f7ff fa31 	bl	19670 <_dtoa_r+0x2a0>
   1a20e:	9b07      	ldr	r3, [sp, #28]
   1a210:	2b00      	cmp	r3, #0
   1a212:	d100      	bne.n	1a216 <_dtoa_r+0xe46>
   1a214:	e68e      	b.n	19f34 <_dtoa_r+0xb64>
   1a216:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   1a218:	2c00      	cmp	r4, #0
   1a21a:	dc00      	bgt.n	1a21e <_dtoa_r+0xe4e>
   1a21c:	e712      	b.n	1a044 <_dtoa_r+0xc74>
   1a21e:	9b03      	ldr	r3, [sp, #12]
   1a220:	2200      	movs	r2, #0
   1a222:	3b01      	subs	r3, #1
   1a224:	9313      	str	r3, [sp, #76]	; 0x4c
   1a226:	0030      	movs	r0, r6
   1a228:	4b47      	ldr	r3, [pc, #284]	; (1a348 <_dtoa_r+0xf78>)
   1a22a:	0039      	movs	r1, r7
   1a22c:	f7fa fd9a 	bl	14d64 <__aeabi_dmul>
   1a230:	0006      	movs	r6, r0
   1a232:	4640      	mov	r0, r8
   1a234:	000f      	movs	r7, r1
   1a236:	3001      	adds	r0, #1
   1a238:	f7fb fb5e 	bl	158f8 <__aeabi_i2d>
   1a23c:	0032      	movs	r2, r6
   1a23e:	003b      	movs	r3, r7
   1a240:	f7fa fd90 	bl	14d64 <__aeabi_dmul>
   1a244:	2200      	movs	r2, #0
   1a246:	4b42      	ldr	r3, [pc, #264]	; (1a350 <_dtoa_r+0xf80>)
   1a248:	f7f9 ff48 	bl	140dc <__aeabi_dadd>
   1a24c:	4a41      	ldr	r2, [pc, #260]	; (1a354 <_dtoa_r+0xf84>)
   1a24e:	000b      	movs	r3, r1
   1a250:	4694      	mov	ip, r2
   1a252:	4463      	add	r3, ip
   1a254:	9008      	str	r0, [sp, #32]
   1a256:	9109      	str	r1, [sp, #36]	; 0x24
   1a258:	9412      	str	r4, [sp, #72]	; 0x48
   1a25a:	9309      	str	r3, [sp, #36]	; 0x24
   1a25c:	f7ff fa30 	bl	196c0 <_dtoa_r+0x2f0>
   1a260:	2339      	movs	r3, #57	; 0x39
   1a262:	702b      	strb	r3, [r5, #0]
   1a264:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a266:	4647      	mov	r7, r8
   1a268:	1c6c      	adds	r4, r5, #1
   1a26a:	4698      	mov	r8, r3
   1a26c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1a26e:	2339      	movs	r3, #57	; 0x39
   1a270:	e5a1      	b.n	19db6 <_dtoa_r+0x9e6>
   1a272:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1a274:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a276:	2000      	movs	r0, #0
   1a278:	4934      	ldr	r1, [pc, #208]	; (1a34c <_dtoa_r+0xf7c>)
   1a27a:	f7fa fff3 	bl	15264 <__aeabi_dsub>
   1a27e:	9a08      	ldr	r2, [sp, #32]
   1a280:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1a282:	f7fb fd01 	bl	15c88 <__aeabi_dcmpgt>
   1a286:	2800      	cmp	r0, #0
   1a288:	d101      	bne.n	1a28e <_dtoa_r+0xebe>
   1a28a:	e6db      	b.n	1a044 <_dtoa_r+0xc74>
   1a28c:	001c      	movs	r4, r3
   1a28e:	1e63      	subs	r3, r4, #1
   1a290:	781a      	ldrb	r2, [r3, #0]
   1a292:	2a30      	cmp	r2, #48	; 0x30
   1a294:	d0fa      	beq.n	1a28c <_dtoa_r+0xebc>
   1a296:	f7ff fac8 	bl	1982a <_dtoa_r+0x45a>
   1a29a:	4643      	mov	r3, r8
   1a29c:	46b3      	mov	fp, r6
   1a29e:	930c      	str	r3, [sp, #48]	; 0x30
   1a2a0:	9e04      	ldr	r6, [sp, #16]
   1a2a2:	9b06      	ldr	r3, [sp, #24]
   1a2a4:	46a8      	mov	r8, r5
   1a2a6:	4699      	mov	r9, r3
   1a2a8:	4655      	mov	r5, sl
   1a2aa:	46ba      	mov	sl, r7
   1a2ac:	2e39      	cmp	r6, #57	; 0x39
   1a2ae:	d0d7      	beq.n	1a260 <_dtoa_r+0xe90>
   1a2b0:	2c00      	cmp	r4, #0
   1a2b2:	dd00      	ble.n	1a2b6 <_dtoa_r+0xee6>
   1a2b4:	e6b1      	b.n	1a01a <_dtoa_r+0xc4a>
   1a2b6:	e6b2      	b.n	1a01e <_dtoa_r+0xc4e>
   1a2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1a2ba:	464d      	mov	r5, r9
   1a2bc:	9203      	str	r2, [sp, #12]
   1a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a2c0:	f7ff fba4 	bl	19a0c <_dtoa_r+0x63c>
   1a2c4:	2800      	cmp	r0, #0
   1a2c6:	d000      	beq.n	1a2ca <_dtoa_r+0xefa>
   1a2c8:	e6a9      	b.n	1a01e <_dtoa_r+0xc4e>
   1a2ca:	07f3      	lsls	r3, r6, #31
   1a2cc:	d400      	bmi.n	1a2d0 <_dtoa_r+0xf00>
   1a2ce:	e6a6      	b.n	1a01e <_dtoa_r+0xc4e>
   1a2d0:	e6a0      	b.n	1a014 <_dtoa_r+0xc44>
   1a2d2:	2300      	movs	r3, #0
   1a2d4:	4641      	mov	r1, r8
   1a2d6:	220a      	movs	r2, #10
   1a2d8:	4650      	mov	r0, sl
   1a2da:	f001 f88d 	bl	1b3f8 <__multadd>
   1a2de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a2e0:	4680      	mov	r8, r0
   1a2e2:	2b00      	cmp	r3, #0
   1a2e4:	dd01      	ble.n	1a2ea <_dtoa_r+0xf1a>
   1a2e6:	9307      	str	r3, [sp, #28]
   1a2e8:	e486      	b.n	19bf8 <_dtoa_r+0x828>
   1a2ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a2ec:	2b02      	cmp	r3, #2
   1a2ee:	dc1f      	bgt.n	1a330 <_dtoa_r+0xf60>
   1a2f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a2f2:	9307      	str	r3, [sp, #28]
   1a2f4:	e480      	b.n	19bf8 <_dtoa_r+0x828>
   1a2f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1a2f8:	2b02      	cmp	r3, #2
   1a2fa:	dc19      	bgt.n	1a330 <_dtoa_r+0xf60>
   1a2fc:	4649      	mov	r1, r9
   1a2fe:	f7fe ffbd 	bl	1927c <quorem>
   1a302:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a304:	3030      	adds	r0, #48	; 0x30
   1a306:	7018      	strb	r0, [r3, #0]
   1a308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a30a:	0006      	movs	r6, r0
   1a30c:	9307      	str	r3, [sp, #28]
   1a30e:	e533      	b.n	19d78 <_dtoa_r+0x9a8>
   1a310:	2302      	movs	r3, #2
   1a312:	4698      	mov	r8, r3
   1a314:	f7ff f9ac 	bl	19670 <_dtoa_r+0x2a0>
   1a318:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a31a:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a31c:	9303      	str	r3, [sp, #12]
   1a31e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1a320:	001d      	movs	r5, r3
   1a322:	f7ff fb73 	bl	19a0c <_dtoa_r+0x63c>
   1a326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1a328:	9c14      	ldr	r4, [sp, #80]	; 0x50
   1a32a:	9303      	str	r3, [sp, #12]
   1a32c:	f7ff fa7f 	bl	1982e <_dtoa_r+0x45e>
   1a330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a332:	9307      	str	r3, [sp, #28]
   1a334:	e5d6      	b.n	19ee4 <_dtoa_r+0xb14>
   1a336:	2b04      	cmp	r3, #4
   1a338:	d100      	bne.n	1a33c <_dtoa_r+0xf6c>
   1a33a:	e43f      	b.n	19bbc <_dtoa_r+0x7ec>
   1a33c:	233c      	movs	r3, #60	; 0x3c
   1a33e:	1a18      	subs	r0, r3, r0
   1a340:	e4d7      	b.n	19cf2 <_dtoa_r+0x922>
   1a342:	46c0      	nop			; (mov r8, r8)
   1a344:	0001e260 	.word	0x0001e260
   1a348:	40240000 	.word	0x40240000
   1a34c:	3fe00000 	.word	0x3fe00000
   1a350:	401c0000 	.word	0x401c0000
   1a354:	fcc00000 	.word	0xfcc00000

0001a358 <__sflush_r>:
   1a358:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a35a:	46c6      	mov	lr, r8
   1a35c:	b500      	push	{lr}
   1a35e:	230c      	movs	r3, #12
   1a360:	5eca      	ldrsh	r2, [r1, r3]
   1a362:	4680      	mov	r8, r0
   1a364:	b293      	uxth	r3, r2
   1a366:	000c      	movs	r4, r1
   1a368:	0719      	lsls	r1, r3, #28
   1a36a:	d440      	bmi.n	1a3ee <__sflush_r+0x96>
   1a36c:	2380      	movs	r3, #128	; 0x80
   1a36e:	011b      	lsls	r3, r3, #4
   1a370:	4313      	orrs	r3, r2
   1a372:	6862      	ldr	r2, [r4, #4]
   1a374:	81a3      	strh	r3, [r4, #12]
   1a376:	2a00      	cmp	r2, #0
   1a378:	dc00      	bgt.n	1a37c <__sflush_r+0x24>
   1a37a:	e070      	b.n	1a45e <__sflush_r+0x106>
   1a37c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a37e:	2e00      	cmp	r6, #0
   1a380:	d031      	beq.n	1a3e6 <__sflush_r+0x8e>
   1a382:	4642      	mov	r2, r8
   1a384:	4641      	mov	r1, r8
   1a386:	6815      	ldr	r5, [r2, #0]
   1a388:	2200      	movs	r2, #0
   1a38a:	b29b      	uxth	r3, r3
   1a38c:	600a      	str	r2, [r1, #0]
   1a38e:	04da      	lsls	r2, r3, #19
   1a390:	d400      	bmi.n	1a394 <__sflush_r+0x3c>
   1a392:	e069      	b.n	1a468 <__sflush_r+0x110>
   1a394:	6d22      	ldr	r2, [r4, #80]	; 0x50
   1a396:	075b      	lsls	r3, r3, #29
   1a398:	d506      	bpl.n	1a3a8 <__sflush_r+0x50>
   1a39a:	6863      	ldr	r3, [r4, #4]
   1a39c:	1ad2      	subs	r2, r2, r3
   1a39e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1a3a0:	2b00      	cmp	r3, #0
   1a3a2:	d001      	beq.n	1a3a8 <__sflush_r+0x50>
   1a3a4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1a3a6:	1ad2      	subs	r2, r2, r3
   1a3a8:	2300      	movs	r3, #0
   1a3aa:	69e1      	ldr	r1, [r4, #28]
   1a3ac:	4640      	mov	r0, r8
   1a3ae:	47b0      	blx	r6
   1a3b0:	1c43      	adds	r3, r0, #1
   1a3b2:	d03d      	beq.n	1a430 <__sflush_r+0xd8>
   1a3b4:	89a3      	ldrh	r3, [r4, #12]
   1a3b6:	4a3a      	ldr	r2, [pc, #232]	; (1a4a0 <__sflush_r+0x148>)
   1a3b8:	4013      	ands	r3, r2
   1a3ba:	2200      	movs	r2, #0
   1a3bc:	6062      	str	r2, [r4, #4]
   1a3be:	6922      	ldr	r2, [r4, #16]
   1a3c0:	b21b      	sxth	r3, r3
   1a3c2:	81a3      	strh	r3, [r4, #12]
   1a3c4:	6022      	str	r2, [r4, #0]
   1a3c6:	04db      	lsls	r3, r3, #19
   1a3c8:	d447      	bmi.n	1a45a <__sflush_r+0x102>
   1a3ca:	4643      	mov	r3, r8
   1a3cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1a3ce:	601d      	str	r5, [r3, #0]
   1a3d0:	2900      	cmp	r1, #0
   1a3d2:	d008      	beq.n	1a3e6 <__sflush_r+0x8e>
   1a3d4:	0023      	movs	r3, r4
   1a3d6:	3340      	adds	r3, #64	; 0x40
   1a3d8:	4299      	cmp	r1, r3
   1a3da:	d002      	beq.n	1a3e2 <__sflush_r+0x8a>
   1a3dc:	4640      	mov	r0, r8
   1a3de:	f000 f967 	bl	1a6b0 <_free_r>
   1a3e2:	2300      	movs	r3, #0
   1a3e4:	6323      	str	r3, [r4, #48]	; 0x30
   1a3e6:	2000      	movs	r0, #0
   1a3e8:	bc04      	pop	{r2}
   1a3ea:	4690      	mov	r8, r2
   1a3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a3ee:	6926      	ldr	r6, [r4, #16]
   1a3f0:	2e00      	cmp	r6, #0
   1a3f2:	d0f8      	beq.n	1a3e6 <__sflush_r+0x8e>
   1a3f4:	6822      	ldr	r2, [r4, #0]
   1a3f6:	6026      	str	r6, [r4, #0]
   1a3f8:	1b95      	subs	r5, r2, r6
   1a3fa:	2200      	movs	r2, #0
   1a3fc:	079b      	lsls	r3, r3, #30
   1a3fe:	d100      	bne.n	1a402 <__sflush_r+0xaa>
   1a400:	6962      	ldr	r2, [r4, #20]
   1a402:	60a2      	str	r2, [r4, #8]
   1a404:	2d00      	cmp	r5, #0
   1a406:	dc04      	bgt.n	1a412 <__sflush_r+0xba>
   1a408:	e7ed      	b.n	1a3e6 <__sflush_r+0x8e>
   1a40a:	1836      	adds	r6, r6, r0
   1a40c:	1a2d      	subs	r5, r5, r0
   1a40e:	2d00      	cmp	r5, #0
   1a410:	dde9      	ble.n	1a3e6 <__sflush_r+0x8e>
   1a412:	002b      	movs	r3, r5
   1a414:	0032      	movs	r2, r6
   1a416:	69e1      	ldr	r1, [r4, #28]
   1a418:	4640      	mov	r0, r8
   1a41a:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1a41c:	47b8      	blx	r7
   1a41e:	2800      	cmp	r0, #0
   1a420:	dcf3      	bgt.n	1a40a <__sflush_r+0xb2>
   1a422:	2240      	movs	r2, #64	; 0x40
   1a424:	2001      	movs	r0, #1
   1a426:	89a3      	ldrh	r3, [r4, #12]
   1a428:	4240      	negs	r0, r0
   1a42a:	4313      	orrs	r3, r2
   1a42c:	81a3      	strh	r3, [r4, #12]
   1a42e:	e7db      	b.n	1a3e8 <__sflush_r+0x90>
   1a430:	4643      	mov	r3, r8
   1a432:	6819      	ldr	r1, [r3, #0]
   1a434:	291d      	cmp	r1, #29
   1a436:	d8f4      	bhi.n	1a422 <__sflush_r+0xca>
   1a438:	4b1a      	ldr	r3, [pc, #104]	; (1a4a4 <__sflush_r+0x14c>)
   1a43a:	2201      	movs	r2, #1
   1a43c:	40cb      	lsrs	r3, r1
   1a43e:	439a      	bics	r2, r3
   1a440:	d1ef      	bne.n	1a422 <__sflush_r+0xca>
   1a442:	89a3      	ldrh	r3, [r4, #12]
   1a444:	4e16      	ldr	r6, [pc, #88]	; (1a4a0 <__sflush_r+0x148>)
   1a446:	6062      	str	r2, [r4, #4]
   1a448:	4033      	ands	r3, r6
   1a44a:	6922      	ldr	r2, [r4, #16]
   1a44c:	b21b      	sxth	r3, r3
   1a44e:	81a3      	strh	r3, [r4, #12]
   1a450:	6022      	str	r2, [r4, #0]
   1a452:	04db      	lsls	r3, r3, #19
   1a454:	d5b9      	bpl.n	1a3ca <__sflush_r+0x72>
   1a456:	2900      	cmp	r1, #0
   1a458:	d1b7      	bne.n	1a3ca <__sflush_r+0x72>
   1a45a:	6520      	str	r0, [r4, #80]	; 0x50
   1a45c:	e7b5      	b.n	1a3ca <__sflush_r+0x72>
   1a45e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   1a460:	2a00      	cmp	r2, #0
   1a462:	dd00      	ble.n	1a466 <__sflush_r+0x10e>
   1a464:	e78a      	b.n	1a37c <__sflush_r+0x24>
   1a466:	e7be      	b.n	1a3e6 <__sflush_r+0x8e>
   1a468:	2200      	movs	r2, #0
   1a46a:	2301      	movs	r3, #1
   1a46c:	69e1      	ldr	r1, [r4, #28]
   1a46e:	4640      	mov	r0, r8
   1a470:	47b0      	blx	r6
   1a472:	0002      	movs	r2, r0
   1a474:	1c43      	adds	r3, r0, #1
   1a476:	d002      	beq.n	1a47e <__sflush_r+0x126>
   1a478:	89a3      	ldrh	r3, [r4, #12]
   1a47a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
   1a47c:	e78b      	b.n	1a396 <__sflush_r+0x3e>
   1a47e:	4643      	mov	r3, r8
   1a480:	681b      	ldr	r3, [r3, #0]
   1a482:	2b00      	cmp	r3, #0
   1a484:	d0f8      	beq.n	1a478 <__sflush_r+0x120>
   1a486:	2b1d      	cmp	r3, #29
   1a488:	d001      	beq.n	1a48e <__sflush_r+0x136>
   1a48a:	2b16      	cmp	r3, #22
   1a48c:	d103      	bne.n	1a496 <__sflush_r+0x13e>
   1a48e:	4643      	mov	r3, r8
   1a490:	2000      	movs	r0, #0
   1a492:	601d      	str	r5, [r3, #0]
   1a494:	e7a8      	b.n	1a3e8 <__sflush_r+0x90>
   1a496:	2140      	movs	r1, #64	; 0x40
   1a498:	89a3      	ldrh	r3, [r4, #12]
   1a49a:	430b      	orrs	r3, r1
   1a49c:	81a3      	strh	r3, [r4, #12]
   1a49e:	e7a3      	b.n	1a3e8 <__sflush_r+0x90>
   1a4a0:	fffff7ff 	.word	0xfffff7ff
   1a4a4:	20400001 	.word	0x20400001

0001a4a8 <_fflush_r>:
   1a4a8:	b570      	push	{r4, r5, r6, lr}
   1a4aa:	0005      	movs	r5, r0
   1a4ac:	000c      	movs	r4, r1
   1a4ae:	2800      	cmp	r0, #0
   1a4b0:	d002      	beq.n	1a4b8 <_fflush_r+0x10>
   1a4b2:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1a4b4:	2b00      	cmp	r3, #0
   1a4b6:	d016      	beq.n	1a4e6 <_fflush_r+0x3e>
   1a4b8:	220c      	movs	r2, #12
   1a4ba:	5ea3      	ldrsh	r3, [r4, r2]
   1a4bc:	2600      	movs	r6, #0
   1a4be:	2b00      	cmp	r3, #0
   1a4c0:	d00f      	beq.n	1a4e2 <_fflush_r+0x3a>
   1a4c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1a4c4:	07d2      	lsls	r2, r2, #31
   1a4c6:	d401      	bmi.n	1a4cc <_fflush_r+0x24>
   1a4c8:	059b      	lsls	r3, r3, #22
   1a4ca:	d513      	bpl.n	1a4f4 <_fflush_r+0x4c>
   1a4cc:	0021      	movs	r1, r4
   1a4ce:	0028      	movs	r0, r5
   1a4d0:	f7ff ff42 	bl	1a358 <__sflush_r>
   1a4d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1a4d6:	0006      	movs	r6, r0
   1a4d8:	07db      	lsls	r3, r3, #31
   1a4da:	d402      	bmi.n	1a4e2 <_fflush_r+0x3a>
   1a4dc:	89a3      	ldrh	r3, [r4, #12]
   1a4de:	059b      	lsls	r3, r3, #22
   1a4e0:	d504      	bpl.n	1a4ec <_fflush_r+0x44>
   1a4e2:	0030      	movs	r0, r6
   1a4e4:	bd70      	pop	{r4, r5, r6, pc}
   1a4e6:	f000 f839 	bl	1a55c <__sinit>
   1a4ea:	e7e5      	b.n	1a4b8 <_fflush_r+0x10>
   1a4ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a4ee:	f000 fb79 	bl	1abe4 <__retarget_lock_release_recursive>
   1a4f2:	e7f6      	b.n	1a4e2 <_fflush_r+0x3a>
   1a4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1a4f6:	f000 fb73 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1a4fa:	e7e7      	b.n	1a4cc <_fflush_r+0x24>

0001a4fc <_cleanup_r>:
   1a4fc:	b510      	push	{r4, lr}
   1a4fe:	4902      	ldr	r1, [pc, #8]	; (1a508 <_cleanup_r+0xc>)
   1a500:	f000 fb36 	bl	1ab70 <_fwalk_reent>
   1a504:	bd10      	pop	{r4, pc}
   1a506:	46c0      	nop			; (mov r8, r8)
   1a508:	0001c1b1 	.word	0x0001c1b1

0001a50c <std.isra.0>:
   1a50c:	2300      	movs	r3, #0
   1a50e:	b510      	push	{r4, lr}
   1a510:	0004      	movs	r4, r0
   1a512:	6003      	str	r3, [r0, #0]
   1a514:	6043      	str	r3, [r0, #4]
   1a516:	6083      	str	r3, [r0, #8]
   1a518:	8181      	strh	r1, [r0, #12]
   1a51a:	6643      	str	r3, [r0, #100]	; 0x64
   1a51c:	81c2      	strh	r2, [r0, #14]
   1a51e:	6103      	str	r3, [r0, #16]
   1a520:	6143      	str	r3, [r0, #20]
   1a522:	6183      	str	r3, [r0, #24]
   1a524:	2208      	movs	r2, #8
   1a526:	2100      	movs	r1, #0
   1a528:	305c      	adds	r0, #92	; 0x5c
   1a52a:	f7fb fd4d 	bl	15fc8 <memset>
   1a52e:	0020      	movs	r0, r4
   1a530:	4b06      	ldr	r3, [pc, #24]	; (1a54c <std.isra.0+0x40>)
   1a532:	61e4      	str	r4, [r4, #28]
   1a534:	6223      	str	r3, [r4, #32]
   1a536:	4b06      	ldr	r3, [pc, #24]	; (1a550 <std.isra.0+0x44>)
   1a538:	3058      	adds	r0, #88	; 0x58
   1a53a:	6263      	str	r3, [r4, #36]	; 0x24
   1a53c:	4b05      	ldr	r3, [pc, #20]	; (1a554 <std.isra.0+0x48>)
   1a53e:	62a3      	str	r3, [r4, #40]	; 0x28
   1a540:	4b05      	ldr	r3, [pc, #20]	; (1a558 <std.isra.0+0x4c>)
   1a542:	62e3      	str	r3, [r4, #44]	; 0x2c
   1a544:	f000 fb48 	bl	1abd8 <__retarget_lock_init_recursive>
   1a548:	bd10      	pop	{r4, pc}
   1a54a:	46c0      	nop			; (mov r8, r8)
   1a54c:	0001bdc5 	.word	0x0001bdc5
   1a550:	0001bded 	.word	0x0001bded
   1a554:	0001be29 	.word	0x0001be29
   1a558:	0001be55 	.word	0x0001be55

0001a55c <__sinit>:
   1a55c:	b570      	push	{r4, r5, r6, lr}
   1a55e:	0004      	movs	r4, r0
   1a560:	4d14      	ldr	r5, [pc, #80]	; (1a5b4 <__sinit+0x58>)
   1a562:	0028      	movs	r0, r5
   1a564:	f000 fb3c 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1a568:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a56a:	2b00      	cmp	r3, #0
   1a56c:	d11d      	bne.n	1a5aa <__sinit+0x4e>
   1a56e:	4a12      	ldr	r2, [pc, #72]	; (1a5b8 <__sinit+0x5c>)
   1a570:	2104      	movs	r1, #4
   1a572:	63e2      	str	r2, [r4, #60]	; 0x3c
   1a574:	22b8      	movs	r2, #184	; 0xb8
   1a576:	0092      	lsls	r2, r2, #2
   1a578:	50a3      	str	r3, [r4, r2]
   1a57a:	23b9      	movs	r3, #185	; 0xb9
   1a57c:	2203      	movs	r2, #3
   1a57e:	009b      	lsls	r3, r3, #2
   1a580:	50e2      	str	r2, [r4, r3]
   1a582:	3308      	adds	r3, #8
   1a584:	18e2      	adds	r2, r4, r3
   1a586:	3b04      	subs	r3, #4
   1a588:	50e2      	str	r2, [r4, r3]
   1a58a:	6860      	ldr	r0, [r4, #4]
   1a58c:	2200      	movs	r2, #0
   1a58e:	f7ff ffbd 	bl	1a50c <std.isra.0>
   1a592:	2201      	movs	r2, #1
   1a594:	2109      	movs	r1, #9
   1a596:	68a0      	ldr	r0, [r4, #8]
   1a598:	f7ff ffb8 	bl	1a50c <std.isra.0>
   1a59c:	2202      	movs	r2, #2
   1a59e:	2112      	movs	r1, #18
   1a5a0:	68e0      	ldr	r0, [r4, #12]
   1a5a2:	f7ff ffb3 	bl	1a50c <std.isra.0>
   1a5a6:	2301      	movs	r3, #1
   1a5a8:	63a3      	str	r3, [r4, #56]	; 0x38
   1a5aa:	0028      	movs	r0, r5
   1a5ac:	f000 fb1a 	bl	1abe4 <__retarget_lock_release_recursive>
   1a5b0:	bd70      	pop	{r4, r5, r6, pc}
   1a5b2:	46c0      	nop			; (mov r8, r8)
   1a5b4:	200027e4 	.word	0x200027e4
   1a5b8:	0001a4fd 	.word	0x0001a4fd

0001a5bc <__sfp_lock_acquire>:
   1a5bc:	b510      	push	{r4, lr}
   1a5be:	4802      	ldr	r0, [pc, #8]	; (1a5c8 <__sfp_lock_acquire+0xc>)
   1a5c0:	f000 fb0e 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1a5c4:	bd10      	pop	{r4, pc}
   1a5c6:	46c0      	nop			; (mov r8, r8)
   1a5c8:	200027f8 	.word	0x200027f8

0001a5cc <__sfp_lock_release>:
   1a5cc:	b510      	push	{r4, lr}
   1a5ce:	4802      	ldr	r0, [pc, #8]	; (1a5d8 <__sfp_lock_release+0xc>)
   1a5d0:	f000 fb08 	bl	1abe4 <__retarget_lock_release_recursive>
   1a5d4:	bd10      	pop	{r4, pc}
   1a5d6:	46c0      	nop			; (mov r8, r8)
   1a5d8:	200027f8 	.word	0x200027f8

0001a5dc <__libc_fini_array>:
   1a5dc:	b570      	push	{r4, r5, r6, lr}
   1a5de:	4b09      	ldr	r3, [pc, #36]	; (1a604 <__libc_fini_array+0x28>)
   1a5e0:	4c09      	ldr	r4, [pc, #36]	; (1a608 <__libc_fini_array+0x2c>)
   1a5e2:	1ae4      	subs	r4, r4, r3
   1a5e4:	10a4      	asrs	r4, r4, #2
   1a5e6:	d009      	beq.n	1a5fc <__libc_fini_array+0x20>
   1a5e8:	4a08      	ldr	r2, [pc, #32]	; (1a60c <__libc_fini_array+0x30>)
   1a5ea:	18a5      	adds	r5, r4, r2
   1a5ec:	00ad      	lsls	r5, r5, #2
   1a5ee:	18ed      	adds	r5, r5, r3
   1a5f0:	682b      	ldr	r3, [r5, #0]
   1a5f2:	3c01      	subs	r4, #1
   1a5f4:	4798      	blx	r3
   1a5f6:	3d04      	subs	r5, #4
   1a5f8:	2c00      	cmp	r4, #0
   1a5fa:	d1f9      	bne.n	1a5f0 <__libc_fini_array+0x14>
   1a5fc:	f003 ff2e 	bl	1e45c <_fini>
   1a600:	bd70      	pop	{r4, r5, r6, pc}
   1a602:	46c0      	nop			; (mov r8, r8)
   1a604:	0001e468 	.word	0x0001e468
   1a608:	0001e46c 	.word	0x0001e46c
   1a60c:	3fffffff 	.word	0x3fffffff

0001a610 <_malloc_trim_r>:
   1a610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a612:	000c      	movs	r4, r1
   1a614:	0006      	movs	r6, r0
   1a616:	f000 fead 	bl	1b374 <__malloc_lock>
   1a61a:	4f20      	ldr	r7, [pc, #128]	; (1a69c <_malloc_trim_r+0x8c>)
   1a61c:	68bb      	ldr	r3, [r7, #8]
   1a61e:	685d      	ldr	r5, [r3, #4]
   1a620:	2303      	movs	r3, #3
   1a622:	439d      	bics	r5, r3
   1a624:	4b1e      	ldr	r3, [pc, #120]	; (1a6a0 <_malloc_trim_r+0x90>)
   1a626:	1b2c      	subs	r4, r5, r4
   1a628:	469c      	mov	ip, r3
   1a62a:	4464      	add	r4, ip
   1a62c:	0b24      	lsrs	r4, r4, #12
   1a62e:	4b1d      	ldr	r3, [pc, #116]	; (1a6a4 <_malloc_trim_r+0x94>)
   1a630:	3c01      	subs	r4, #1
   1a632:	0324      	lsls	r4, r4, #12
   1a634:	429c      	cmp	r4, r3
   1a636:	dd07      	ble.n	1a648 <_malloc_trim_r+0x38>
   1a638:	2100      	movs	r1, #0
   1a63a:	0030      	movs	r0, r6
   1a63c:	f001 fbb0 	bl	1bda0 <_sbrk_r>
   1a640:	68bb      	ldr	r3, [r7, #8]
   1a642:	195b      	adds	r3, r3, r5
   1a644:	4298      	cmp	r0, r3
   1a646:	d004      	beq.n	1a652 <_malloc_trim_r+0x42>
   1a648:	0030      	movs	r0, r6
   1a64a:	f000 fe9b 	bl	1b384 <__malloc_unlock>
   1a64e:	2000      	movs	r0, #0
   1a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a652:	4261      	negs	r1, r4
   1a654:	0030      	movs	r0, r6
   1a656:	f001 fba3 	bl	1bda0 <_sbrk_r>
   1a65a:	1c43      	adds	r3, r0, #1
   1a65c:	d00d      	beq.n	1a67a <_malloc_trim_r+0x6a>
   1a65e:	2201      	movs	r2, #1
   1a660:	68bb      	ldr	r3, [r7, #8]
   1a662:	1b2d      	subs	r5, r5, r4
   1a664:	4315      	orrs	r5, r2
   1a666:	605d      	str	r5, [r3, #4]
   1a668:	4b0f      	ldr	r3, [pc, #60]	; (1a6a8 <_malloc_trim_r+0x98>)
   1a66a:	0030      	movs	r0, r6
   1a66c:	681a      	ldr	r2, [r3, #0]
   1a66e:	1b14      	subs	r4, r2, r4
   1a670:	601c      	str	r4, [r3, #0]
   1a672:	f000 fe87 	bl	1b384 <__malloc_unlock>
   1a676:	2001      	movs	r0, #1
   1a678:	e7ea      	b.n	1a650 <_malloc_trim_r+0x40>
   1a67a:	2100      	movs	r1, #0
   1a67c:	0030      	movs	r0, r6
   1a67e:	f001 fb8f 	bl	1bda0 <_sbrk_r>
   1a682:	68ba      	ldr	r2, [r7, #8]
   1a684:	1a83      	subs	r3, r0, r2
   1a686:	2b0f      	cmp	r3, #15
   1a688:	ddde      	ble.n	1a648 <_malloc_trim_r+0x38>
   1a68a:	4908      	ldr	r1, [pc, #32]	; (1a6ac <_malloc_trim_r+0x9c>)
   1a68c:	6809      	ldr	r1, [r1, #0]
   1a68e:	1a40      	subs	r0, r0, r1
   1a690:	4905      	ldr	r1, [pc, #20]	; (1a6a8 <_malloc_trim_r+0x98>)
   1a692:	6008      	str	r0, [r1, #0]
   1a694:	2101      	movs	r1, #1
   1a696:	430b      	orrs	r3, r1
   1a698:	6053      	str	r3, [r2, #4]
   1a69a:	e7d5      	b.n	1a648 <_malloc_trim_r+0x38>
   1a69c:	2000049c 	.word	0x2000049c
   1a6a0:	00000fef 	.word	0x00000fef
   1a6a4:	00000fff 	.word	0x00000fff
   1a6a8:	20001024 	.word	0x20001024
   1a6ac:	200008a4 	.word	0x200008a4

0001a6b0 <_free_r>:
   1a6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a6b2:	0004      	movs	r4, r0
   1a6b4:	1e0d      	subs	r5, r1, #0
   1a6b6:	d03c      	beq.n	1a732 <_free_r+0x82>
   1a6b8:	f000 fe5c 	bl	1b374 <__malloc_lock>
   1a6bc:	0029      	movs	r1, r5
   1a6be:	3908      	subs	r1, #8
   1a6c0:	6848      	ldr	r0, [r1, #4]
   1a6c2:	2301      	movs	r3, #1
   1a6c4:	0005      	movs	r5, r0
   1a6c6:	2603      	movs	r6, #3
   1a6c8:	439d      	bics	r5, r3
   1a6ca:	194a      	adds	r2, r1, r5
   1a6cc:	469c      	mov	ip, r3
   1a6ce:	4f61      	ldr	r7, [pc, #388]	; (1a854 <_free_r+0x1a4>)
   1a6d0:	6853      	ldr	r3, [r2, #4]
   1a6d2:	43b3      	bics	r3, r6
   1a6d4:	68be      	ldr	r6, [r7, #8]
   1a6d6:	42b2      	cmp	r2, r6
   1a6d8:	d056      	beq.n	1a788 <_free_r+0xd8>
   1a6da:	4666      	mov	r6, ip
   1a6dc:	6053      	str	r3, [r2, #4]
   1a6de:	4206      	tst	r6, r0
   1a6e0:	d10a      	bne.n	1a6f8 <_free_r+0x48>
   1a6e2:	003e      	movs	r6, r7
   1a6e4:	6808      	ldr	r0, [r1, #0]
   1a6e6:	3608      	adds	r6, #8
   1a6e8:	1a09      	subs	r1, r1, r0
   1a6ea:	182d      	adds	r5, r5, r0
   1a6ec:	6888      	ldr	r0, [r1, #8]
   1a6ee:	42b0      	cmp	r0, r6
   1a6f0:	d065      	beq.n	1a7be <_free_r+0x10e>
   1a6f2:	68ce      	ldr	r6, [r1, #12]
   1a6f4:	60c6      	str	r6, [r0, #12]
   1a6f6:	60b0      	str	r0, [r6, #8]
   1a6f8:	2001      	movs	r0, #1
   1a6fa:	18d6      	adds	r6, r2, r3
   1a6fc:	6876      	ldr	r6, [r6, #4]
   1a6fe:	4206      	tst	r6, r0
   1a700:	d033      	beq.n	1a76a <_free_r+0xba>
   1a702:	4b55      	ldr	r3, [pc, #340]	; (1a858 <_free_r+0x1a8>)
   1a704:	4328      	orrs	r0, r5
   1a706:	6048      	str	r0, [r1, #4]
   1a708:	514d      	str	r5, [r1, r5]
   1a70a:	429d      	cmp	r5, r3
   1a70c:	d812      	bhi.n	1a734 <_free_r+0x84>
   1a70e:	08ed      	lsrs	r5, r5, #3
   1a710:	3bff      	subs	r3, #255	; 0xff
   1a712:	10aa      	asrs	r2, r5, #2
   1a714:	3bff      	subs	r3, #255	; 0xff
   1a716:	4093      	lsls	r3, r2
   1a718:	687a      	ldr	r2, [r7, #4]
   1a71a:	00ed      	lsls	r5, r5, #3
   1a71c:	4313      	orrs	r3, r2
   1a71e:	607b      	str	r3, [r7, #4]
   1a720:	19ef      	adds	r7, r5, r7
   1a722:	68bb      	ldr	r3, [r7, #8]
   1a724:	60cf      	str	r7, [r1, #12]
   1a726:	608b      	str	r3, [r1, #8]
   1a728:	60b9      	str	r1, [r7, #8]
   1a72a:	60d9      	str	r1, [r3, #12]
   1a72c:	0020      	movs	r0, r4
   1a72e:	f000 fe29 	bl	1b384 <__malloc_unlock>
   1a732:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a734:	0a68      	lsrs	r0, r5, #9
   1a736:	2804      	cmp	r0, #4
   1a738:	d850      	bhi.n	1a7dc <_free_r+0x12c>
   1a73a:	09a8      	lsrs	r0, r5, #6
   1a73c:	0002      	movs	r2, r0
   1a73e:	3039      	adds	r0, #57	; 0x39
   1a740:	3238      	adds	r2, #56	; 0x38
   1a742:	00c0      	lsls	r0, r0, #3
   1a744:	1838      	adds	r0, r7, r0
   1a746:	3808      	subs	r0, #8
   1a748:	6883      	ldr	r3, [r0, #8]
   1a74a:	2603      	movs	r6, #3
   1a74c:	4298      	cmp	r0, r3
   1a74e:	d04c      	beq.n	1a7ea <_free_r+0x13a>
   1a750:	685a      	ldr	r2, [r3, #4]
   1a752:	43b2      	bics	r2, r6
   1a754:	4295      	cmp	r5, r2
   1a756:	d230      	bcs.n	1a7ba <_free_r+0x10a>
   1a758:	689b      	ldr	r3, [r3, #8]
   1a75a:	4298      	cmp	r0, r3
   1a75c:	d1f8      	bne.n	1a750 <_free_r+0xa0>
   1a75e:	68c3      	ldr	r3, [r0, #12]
   1a760:	60cb      	str	r3, [r1, #12]
   1a762:	6088      	str	r0, [r1, #8]
   1a764:	6099      	str	r1, [r3, #8]
   1a766:	60c1      	str	r1, [r0, #12]
   1a768:	e7e0      	b.n	1a72c <_free_r+0x7c>
   1a76a:	18ed      	adds	r5, r5, r3
   1a76c:	4e3b      	ldr	r6, [pc, #236]	; (1a85c <_free_r+0x1ac>)
   1a76e:	6893      	ldr	r3, [r2, #8]
   1a770:	42b3      	cmp	r3, r6
   1a772:	d042      	beq.n	1a7fa <_free_r+0x14a>
   1a774:	68d2      	ldr	r2, [r2, #12]
   1a776:	4328      	orrs	r0, r5
   1a778:	60da      	str	r2, [r3, #12]
   1a77a:	6093      	str	r3, [r2, #8]
   1a77c:	4b36      	ldr	r3, [pc, #216]	; (1a858 <_free_r+0x1a8>)
   1a77e:	6048      	str	r0, [r1, #4]
   1a780:	514d      	str	r5, [r1, r5]
   1a782:	429d      	cmp	r5, r3
   1a784:	d8d6      	bhi.n	1a734 <_free_r+0x84>
   1a786:	e7c2      	b.n	1a70e <_free_r+0x5e>
   1a788:	4662      	mov	r2, ip
   1a78a:	18eb      	adds	r3, r5, r3
   1a78c:	4202      	tst	r2, r0
   1a78e:	d106      	bne.n	1a79e <_free_r+0xee>
   1a790:	680a      	ldr	r2, [r1, #0]
   1a792:	1a89      	subs	r1, r1, r2
   1a794:	6888      	ldr	r0, [r1, #8]
   1a796:	189b      	adds	r3, r3, r2
   1a798:	68ca      	ldr	r2, [r1, #12]
   1a79a:	60c2      	str	r2, [r0, #12]
   1a79c:	6090      	str	r0, [r2, #8]
   1a79e:	2201      	movs	r2, #1
   1a7a0:	431a      	orrs	r2, r3
   1a7a2:	604a      	str	r2, [r1, #4]
   1a7a4:	4a2e      	ldr	r2, [pc, #184]	; (1a860 <_free_r+0x1b0>)
   1a7a6:	60b9      	str	r1, [r7, #8]
   1a7a8:	6812      	ldr	r2, [r2, #0]
   1a7aa:	4293      	cmp	r3, r2
   1a7ac:	d3be      	bcc.n	1a72c <_free_r+0x7c>
   1a7ae:	4b2d      	ldr	r3, [pc, #180]	; (1a864 <_free_r+0x1b4>)
   1a7b0:	0020      	movs	r0, r4
   1a7b2:	6819      	ldr	r1, [r3, #0]
   1a7b4:	f7ff ff2c 	bl	1a610 <_malloc_trim_r>
   1a7b8:	e7b8      	b.n	1a72c <_free_r+0x7c>
   1a7ba:	0018      	movs	r0, r3
   1a7bc:	e7cf      	b.n	1a75e <_free_r+0xae>
   1a7be:	4666      	mov	r6, ip
   1a7c0:	18d0      	adds	r0, r2, r3
   1a7c2:	6840      	ldr	r0, [r0, #4]
   1a7c4:	4230      	tst	r0, r6
   1a7c6:	d13f      	bne.n	1a848 <_free_r+0x198>
   1a7c8:	6890      	ldr	r0, [r2, #8]
   1a7ca:	195d      	adds	r5, r3, r5
   1a7cc:	68d3      	ldr	r3, [r2, #12]
   1a7ce:	60c3      	str	r3, [r0, #12]
   1a7d0:	6098      	str	r0, [r3, #8]
   1a7d2:	4663      	mov	r3, ip
   1a7d4:	432b      	orrs	r3, r5
   1a7d6:	604b      	str	r3, [r1, #4]
   1a7d8:	514d      	str	r5, [r1, r5]
   1a7da:	e7a7      	b.n	1a72c <_free_r+0x7c>
   1a7dc:	2814      	cmp	r0, #20
   1a7de:	d814      	bhi.n	1a80a <_free_r+0x15a>
   1a7e0:	0002      	movs	r2, r0
   1a7e2:	305c      	adds	r0, #92	; 0x5c
   1a7e4:	325b      	adds	r2, #91	; 0x5b
   1a7e6:	00c0      	lsls	r0, r0, #3
   1a7e8:	e7ac      	b.n	1a744 <_free_r+0x94>
   1a7ea:	2301      	movs	r3, #1
   1a7ec:	1092      	asrs	r2, r2, #2
   1a7ee:	4093      	lsls	r3, r2
   1a7f0:	687a      	ldr	r2, [r7, #4]
   1a7f2:	4313      	orrs	r3, r2
   1a7f4:	607b      	str	r3, [r7, #4]
   1a7f6:	0003      	movs	r3, r0
   1a7f8:	e7b2      	b.n	1a760 <_free_r+0xb0>
   1a7fa:	4328      	orrs	r0, r5
   1a7fc:	60d9      	str	r1, [r3, #12]
   1a7fe:	6099      	str	r1, [r3, #8]
   1a800:	60cb      	str	r3, [r1, #12]
   1a802:	608b      	str	r3, [r1, #8]
   1a804:	6048      	str	r0, [r1, #4]
   1a806:	514d      	str	r5, [r1, r5]
   1a808:	e790      	b.n	1a72c <_free_r+0x7c>
   1a80a:	2854      	cmp	r0, #84	; 0x54
   1a80c:	d805      	bhi.n	1a81a <_free_r+0x16a>
   1a80e:	0b28      	lsrs	r0, r5, #12
   1a810:	0002      	movs	r2, r0
   1a812:	306f      	adds	r0, #111	; 0x6f
   1a814:	326e      	adds	r2, #110	; 0x6e
   1a816:	00c0      	lsls	r0, r0, #3
   1a818:	e794      	b.n	1a744 <_free_r+0x94>
   1a81a:	22aa      	movs	r2, #170	; 0xaa
   1a81c:	0052      	lsls	r2, r2, #1
   1a81e:	4290      	cmp	r0, r2
   1a820:	d805      	bhi.n	1a82e <_free_r+0x17e>
   1a822:	0be8      	lsrs	r0, r5, #15
   1a824:	0002      	movs	r2, r0
   1a826:	3078      	adds	r0, #120	; 0x78
   1a828:	3277      	adds	r2, #119	; 0x77
   1a82a:	00c0      	lsls	r0, r0, #3
   1a82c:	e78a      	b.n	1a744 <_free_r+0x94>
   1a82e:	4a0e      	ldr	r2, [pc, #56]	; (1a868 <_free_r+0x1b8>)
   1a830:	4290      	cmp	r0, r2
   1a832:	d805      	bhi.n	1a840 <_free_r+0x190>
   1a834:	0ca8      	lsrs	r0, r5, #18
   1a836:	0002      	movs	r2, r0
   1a838:	307d      	adds	r0, #125	; 0x7d
   1a83a:	327c      	adds	r2, #124	; 0x7c
   1a83c:	00c0      	lsls	r0, r0, #3
   1a83e:	e781      	b.n	1a744 <_free_r+0x94>
   1a840:	20fe      	movs	r0, #254	; 0xfe
   1a842:	227e      	movs	r2, #126	; 0x7e
   1a844:	0080      	lsls	r0, r0, #2
   1a846:	e77d      	b.n	1a744 <_free_r+0x94>
   1a848:	4663      	mov	r3, ip
   1a84a:	432b      	orrs	r3, r5
   1a84c:	604b      	str	r3, [r1, #4]
   1a84e:	6015      	str	r5, [r2, #0]
   1a850:	e76c      	b.n	1a72c <_free_r+0x7c>
   1a852:	46c0      	nop			; (mov r8, r8)
   1a854:	2000049c 	.word	0x2000049c
   1a858:	000001ff 	.word	0x000001ff
   1a85c:	200004a4 	.word	0x200004a4
   1a860:	200008a8 	.word	0x200008a8
   1a864:	20001054 	.word	0x20001054
   1a868:	00000554 	.word	0x00000554

0001a86c <__sfvwrite_r>:
   1a86c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a86e:	464e      	mov	r6, r9
   1a870:	46de      	mov	lr, fp
   1a872:	4657      	mov	r7, sl
   1a874:	4645      	mov	r5, r8
   1a876:	b5e0      	push	{r5, r6, r7, lr}
   1a878:	6893      	ldr	r3, [r2, #8]
   1a87a:	b083      	sub	sp, #12
   1a87c:	9000      	str	r0, [sp, #0]
   1a87e:	000c      	movs	r4, r1
   1a880:	0016      	movs	r6, r2
   1a882:	2b00      	cmp	r3, #0
   1a884:	d025      	beq.n	1a8d2 <__sfvwrite_r+0x66>
   1a886:	898b      	ldrh	r3, [r1, #12]
   1a888:	071a      	lsls	r2, r3, #28
   1a88a:	d52a      	bpl.n	1a8e2 <__sfvwrite_r+0x76>
   1a88c:	690a      	ldr	r2, [r1, #16]
   1a88e:	2a00      	cmp	r2, #0
   1a890:	d027      	beq.n	1a8e2 <__sfvwrite_r+0x76>
   1a892:	6832      	ldr	r2, [r6, #0]
   1a894:	4693      	mov	fp, r2
   1a896:	079a      	lsls	r2, r3, #30
   1a898:	d52f      	bpl.n	1a8fa <__sfvwrite_r+0x8e>
   1a89a:	4bb2      	ldr	r3, [pc, #712]	; (1ab64 <__sfvwrite_r+0x2f8>)
   1a89c:	2700      	movs	r7, #0
   1a89e:	2500      	movs	r5, #0
   1a8a0:	4698      	mov	r8, r3
   1a8a2:	46b1      	mov	r9, r6
   1a8a4:	2d00      	cmp	r5, #0
   1a8a6:	d100      	bne.n	1a8aa <__sfvwrite_r+0x3e>
   1a8a8:	e072      	b.n	1a990 <__sfvwrite_r+0x124>
   1a8aa:	002b      	movs	r3, r5
   1a8ac:	4545      	cmp	r5, r8
   1a8ae:	d900      	bls.n	1a8b2 <__sfvwrite_r+0x46>
   1a8b0:	4bac      	ldr	r3, [pc, #688]	; (1ab64 <__sfvwrite_r+0x2f8>)
   1a8b2:	003a      	movs	r2, r7
   1a8b4:	69e1      	ldr	r1, [r4, #28]
   1a8b6:	9800      	ldr	r0, [sp, #0]
   1a8b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1a8ba:	47b0      	blx	r6
   1a8bc:	2800      	cmp	r0, #0
   1a8be:	dc00      	bgt.n	1a8c2 <__sfvwrite_r+0x56>
   1a8c0:	e073      	b.n	1a9aa <__sfvwrite_r+0x13e>
   1a8c2:	464b      	mov	r3, r9
   1a8c4:	689b      	ldr	r3, [r3, #8]
   1a8c6:	183f      	adds	r7, r7, r0
   1a8c8:	1a2d      	subs	r5, r5, r0
   1a8ca:	1a18      	subs	r0, r3, r0
   1a8cc:	464b      	mov	r3, r9
   1a8ce:	6098      	str	r0, [r3, #8]
   1a8d0:	d1e8      	bne.n	1a8a4 <__sfvwrite_r+0x38>
   1a8d2:	2000      	movs	r0, #0
   1a8d4:	b003      	add	sp, #12
   1a8d6:	bc3c      	pop	{r2, r3, r4, r5}
   1a8d8:	4690      	mov	r8, r2
   1a8da:	4699      	mov	r9, r3
   1a8dc:	46a2      	mov	sl, r4
   1a8de:	46ab      	mov	fp, r5
   1a8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a8e2:	0021      	movs	r1, r4
   1a8e4:	9800      	ldr	r0, [sp, #0]
   1a8e6:	f7fe fc4b 	bl	19180 <__swsetup_r>
   1a8ea:	2800      	cmp	r0, #0
   1a8ec:	d000      	beq.n	1a8f0 <__sfvwrite_r+0x84>
   1a8ee:	e130      	b.n	1ab52 <__sfvwrite_r+0x2e6>
   1a8f0:	6832      	ldr	r2, [r6, #0]
   1a8f2:	89a3      	ldrh	r3, [r4, #12]
   1a8f4:	4693      	mov	fp, r2
   1a8f6:	079a      	lsls	r2, r3, #30
   1a8f8:	d4cf      	bmi.n	1a89a <__sfvwrite_r+0x2e>
   1a8fa:	07da      	lsls	r2, r3, #31
   1a8fc:	d55d      	bpl.n	1a9ba <__sfvwrite_r+0x14e>
   1a8fe:	2300      	movs	r3, #0
   1a900:	2000      	movs	r0, #0
   1a902:	469a      	mov	sl, r3
   1a904:	2700      	movs	r7, #0
   1a906:	001d      	movs	r5, r3
   1a908:	46b1      	mov	r9, r6
   1a90a:	e029      	b.n	1a960 <__sfvwrite_r+0xf4>
   1a90c:	2800      	cmp	r0, #0
   1a90e:	d033      	beq.n	1a978 <__sfvwrite_r+0x10c>
   1a910:	46a8      	mov	r8, r5
   1a912:	42bd      	cmp	r5, r7
   1a914:	d900      	bls.n	1a918 <__sfvwrite_r+0xac>
   1a916:	46b8      	mov	r8, r7
   1a918:	6820      	ldr	r0, [r4, #0]
   1a91a:	6922      	ldr	r2, [r4, #16]
   1a91c:	4646      	mov	r6, r8
   1a91e:	6963      	ldr	r3, [r4, #20]
   1a920:	4290      	cmp	r0, r2
   1a922:	d907      	bls.n	1a934 <__sfvwrite_r+0xc8>
   1a924:	68a2      	ldr	r2, [r4, #8]
   1a926:	4694      	mov	ip, r2
   1a928:	449c      	add	ip, r3
   1a92a:	4662      	mov	r2, ip
   1a92c:	9201      	str	r2, [sp, #4]
   1a92e:	45e0      	cmp	r8, ip
   1a930:	dd00      	ble.n	1a934 <__sfvwrite_r+0xc8>
   1a932:	e0e9      	b.n	1ab08 <__sfvwrite_r+0x29c>
   1a934:	4598      	cmp	r8, r3
   1a936:	da00      	bge.n	1a93a <__sfvwrite_r+0xce>
   1a938:	e08f      	b.n	1aa5a <__sfvwrite_r+0x1ee>
   1a93a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   1a93c:	4652      	mov	r2, sl
   1a93e:	69e1      	ldr	r1, [r4, #28]
   1a940:	9800      	ldr	r0, [sp, #0]
   1a942:	47b0      	blx	r6
   1a944:	1e06      	subs	r6, r0, #0
   1a946:	dd30      	ble.n	1a9aa <__sfvwrite_r+0x13e>
   1a948:	1bad      	subs	r5, r5, r6
   1a94a:	2001      	movs	r0, #1
   1a94c:	2d00      	cmp	r5, #0
   1a94e:	d026      	beq.n	1a99e <__sfvwrite_r+0x132>
   1a950:	464b      	mov	r3, r9
   1a952:	689b      	ldr	r3, [r3, #8]
   1a954:	44b2      	add	sl, r6
   1a956:	1bbf      	subs	r7, r7, r6
   1a958:	1b9e      	subs	r6, r3, r6
   1a95a:	464b      	mov	r3, r9
   1a95c:	609e      	str	r6, [r3, #8]
   1a95e:	d0b8      	beq.n	1a8d2 <__sfvwrite_r+0x66>
   1a960:	2f00      	cmp	r7, #0
   1a962:	d1d3      	bne.n	1a90c <__sfvwrite_r+0xa0>
   1a964:	465b      	mov	r3, fp
   1a966:	681b      	ldr	r3, [r3, #0]
   1a968:	469a      	mov	sl, r3
   1a96a:	465b      	mov	r3, fp
   1a96c:	685f      	ldr	r7, [r3, #4]
   1a96e:	2308      	movs	r3, #8
   1a970:	469c      	mov	ip, r3
   1a972:	44e3      	add	fp, ip
   1a974:	2f00      	cmp	r7, #0
   1a976:	d0f5      	beq.n	1a964 <__sfvwrite_r+0xf8>
   1a978:	003a      	movs	r2, r7
   1a97a:	210a      	movs	r1, #10
   1a97c:	4650      	mov	r0, sl
   1a97e:	f000 fc69 	bl	1b254 <memchr>
   1a982:	2800      	cmp	r0, #0
   1a984:	d100      	bne.n	1a988 <__sfvwrite_r+0x11c>
   1a986:	e0e2      	b.n	1ab4e <__sfvwrite_r+0x2e2>
   1a988:	4653      	mov	r3, sl
   1a98a:	3001      	adds	r0, #1
   1a98c:	1ac5      	subs	r5, r0, r3
   1a98e:	e7bf      	b.n	1a910 <__sfvwrite_r+0xa4>
   1a990:	465b      	mov	r3, fp
   1a992:	681f      	ldr	r7, [r3, #0]
   1a994:	685d      	ldr	r5, [r3, #4]
   1a996:	2308      	movs	r3, #8
   1a998:	469c      	mov	ip, r3
   1a99a:	44e3      	add	fp, ip
   1a99c:	e782      	b.n	1a8a4 <__sfvwrite_r+0x38>
   1a99e:	0021      	movs	r1, r4
   1a9a0:	9800      	ldr	r0, [sp, #0]
   1a9a2:	f7ff fd81 	bl	1a4a8 <_fflush_r>
   1a9a6:	2800      	cmp	r0, #0
   1a9a8:	d0d2      	beq.n	1a950 <__sfvwrite_r+0xe4>
   1a9aa:	220c      	movs	r2, #12
   1a9ac:	5ea3      	ldrsh	r3, [r4, r2]
   1a9ae:	2240      	movs	r2, #64	; 0x40
   1a9b0:	2001      	movs	r0, #1
   1a9b2:	4313      	orrs	r3, r2
   1a9b4:	81a3      	strh	r3, [r4, #12]
   1a9b6:	4240      	negs	r0, r0
   1a9b8:	e78c      	b.n	1a8d4 <__sfvwrite_r+0x68>
   1a9ba:	2200      	movs	r2, #0
   1a9bc:	4691      	mov	r9, r2
   1a9be:	464d      	mov	r5, r9
   1a9c0:	2d00      	cmp	r5, #0
   1a9c2:	d023      	beq.n	1aa0c <__sfvwrite_r+0x1a0>
   1a9c4:	68a2      	ldr	r2, [r4, #8]
   1a9c6:	4690      	mov	r8, r2
   1a9c8:	2280      	movs	r2, #128	; 0x80
   1a9ca:	0092      	lsls	r2, r2, #2
   1a9cc:	4213      	tst	r3, r2
   1a9ce:	d026      	beq.n	1aa1e <__sfvwrite_r+0x1b2>
   1a9d0:	46c2      	mov	sl, r8
   1a9d2:	4545      	cmp	r5, r8
   1a9d4:	d34d      	bcc.n	1aa72 <__sfvwrite_r+0x206>
   1a9d6:	2290      	movs	r2, #144	; 0x90
   1a9d8:	00d2      	lsls	r2, r2, #3
   1a9da:	4213      	tst	r3, r2
   1a9dc:	d14e      	bne.n	1aa7c <__sfvwrite_r+0x210>
   1a9de:	002f      	movs	r7, r5
   1a9e0:	6820      	ldr	r0, [r4, #0]
   1a9e2:	4652      	mov	r2, sl
   1a9e4:	4649      	mov	r1, r9
   1a9e6:	f000 fc75 	bl	1b2d4 <memmove>
   1a9ea:	4642      	mov	r2, r8
   1a9ec:	68a3      	ldr	r3, [r4, #8]
   1a9ee:	1a98      	subs	r0, r3, r2
   1a9f0:	6823      	ldr	r3, [r4, #0]
   1a9f2:	60a0      	str	r0, [r4, #8]
   1a9f4:	4453      	add	r3, sl
   1a9f6:	6023      	str	r3, [r4, #0]
   1a9f8:	68b3      	ldr	r3, [r6, #8]
   1a9fa:	44b9      	add	r9, r7
   1a9fc:	1bed      	subs	r5, r5, r7
   1a9fe:	1bdf      	subs	r7, r3, r7
   1aa00:	60b7      	str	r7, [r6, #8]
   1aa02:	d100      	bne.n	1aa06 <__sfvwrite_r+0x19a>
   1aa04:	e765      	b.n	1a8d2 <__sfvwrite_r+0x66>
   1aa06:	89a3      	ldrh	r3, [r4, #12]
   1aa08:	2d00      	cmp	r5, #0
   1aa0a:	d1db      	bne.n	1a9c4 <__sfvwrite_r+0x158>
   1aa0c:	465a      	mov	r2, fp
   1aa0e:	6812      	ldr	r2, [r2, #0]
   1aa10:	4691      	mov	r9, r2
   1aa12:	465a      	mov	r2, fp
   1aa14:	6855      	ldr	r5, [r2, #4]
   1aa16:	2208      	movs	r2, #8
   1aa18:	4694      	mov	ip, r2
   1aa1a:	44e3      	add	fp, ip
   1aa1c:	e7d0      	b.n	1a9c0 <__sfvwrite_r+0x154>
   1aa1e:	6820      	ldr	r0, [r4, #0]
   1aa20:	6923      	ldr	r3, [r4, #16]
   1aa22:	4298      	cmp	r0, r3
   1aa24:	d802      	bhi.n	1aa2c <__sfvwrite_r+0x1c0>
   1aa26:	6967      	ldr	r7, [r4, #20]
   1aa28:	42bd      	cmp	r5, r7
   1aa2a:	d259      	bcs.n	1aae0 <__sfvwrite_r+0x274>
   1aa2c:	4647      	mov	r7, r8
   1aa2e:	42af      	cmp	r7, r5
   1aa30:	d900      	bls.n	1aa34 <__sfvwrite_r+0x1c8>
   1aa32:	002f      	movs	r7, r5
   1aa34:	003a      	movs	r2, r7
   1aa36:	4649      	mov	r1, r9
   1aa38:	f000 fc4c 	bl	1b2d4 <memmove>
   1aa3c:	68a3      	ldr	r3, [r4, #8]
   1aa3e:	6822      	ldr	r2, [r4, #0]
   1aa40:	1bdb      	subs	r3, r3, r7
   1aa42:	19d2      	adds	r2, r2, r7
   1aa44:	60a3      	str	r3, [r4, #8]
   1aa46:	6022      	str	r2, [r4, #0]
   1aa48:	2b00      	cmp	r3, #0
   1aa4a:	d1d5      	bne.n	1a9f8 <__sfvwrite_r+0x18c>
   1aa4c:	0021      	movs	r1, r4
   1aa4e:	9800      	ldr	r0, [sp, #0]
   1aa50:	f7ff fd2a 	bl	1a4a8 <_fflush_r>
   1aa54:	2800      	cmp	r0, #0
   1aa56:	d0cf      	beq.n	1a9f8 <__sfvwrite_r+0x18c>
   1aa58:	e7a7      	b.n	1a9aa <__sfvwrite_r+0x13e>
   1aa5a:	4642      	mov	r2, r8
   1aa5c:	4651      	mov	r1, sl
   1aa5e:	f000 fc39 	bl	1b2d4 <memmove>
   1aa62:	4642      	mov	r2, r8
   1aa64:	68a3      	ldr	r3, [r4, #8]
   1aa66:	1a9b      	subs	r3, r3, r2
   1aa68:	60a3      	str	r3, [r4, #8]
   1aa6a:	6823      	ldr	r3, [r4, #0]
   1aa6c:	4443      	add	r3, r8
   1aa6e:	6023      	str	r3, [r4, #0]
   1aa70:	e76a      	b.n	1a948 <__sfvwrite_r+0xdc>
   1aa72:	46a8      	mov	r8, r5
   1aa74:	6820      	ldr	r0, [r4, #0]
   1aa76:	002f      	movs	r7, r5
   1aa78:	46aa      	mov	sl, r5
   1aa7a:	e7b2      	b.n	1a9e2 <__sfvwrite_r+0x176>
   1aa7c:	6921      	ldr	r1, [r4, #16]
   1aa7e:	6822      	ldr	r2, [r4, #0]
   1aa80:	1a52      	subs	r2, r2, r1
   1aa82:	4692      	mov	sl, r2
   1aa84:	6962      	ldr	r2, [r4, #20]
   1aa86:	0057      	lsls	r7, r2, #1
   1aa88:	18bf      	adds	r7, r7, r2
   1aa8a:	0ffa      	lsrs	r2, r7, #31
   1aa8c:	19d7      	adds	r7, r2, r7
   1aa8e:	4652      	mov	r2, sl
   1aa90:	1c50      	adds	r0, r2, #1
   1aa92:	107f      	asrs	r7, r7, #1
   1aa94:	1940      	adds	r0, r0, r5
   1aa96:	003a      	movs	r2, r7
   1aa98:	42b8      	cmp	r0, r7
   1aa9a:	d901      	bls.n	1aaa0 <__sfvwrite_r+0x234>
   1aa9c:	0007      	movs	r7, r0
   1aa9e:	0002      	movs	r2, r0
   1aaa0:	055b      	lsls	r3, r3, #21
   1aaa2:	d542      	bpl.n	1ab2a <__sfvwrite_r+0x2be>
   1aaa4:	0011      	movs	r1, r2
   1aaa6:	9800      	ldr	r0, [sp, #0]
   1aaa8:	f000 f920 	bl	1acec <_malloc_r>
   1aaac:	4680      	mov	r8, r0
   1aaae:	1e03      	subs	r3, r0, #0
   1aab0:	d052      	beq.n	1ab58 <__sfvwrite_r+0x2ec>
   1aab2:	4652      	mov	r2, sl
   1aab4:	6921      	ldr	r1, [r4, #16]
   1aab6:	f7fb fa45 	bl	15f44 <memcpy>
   1aaba:	89a3      	ldrh	r3, [r4, #12]
   1aabc:	4a2a      	ldr	r2, [pc, #168]	; (1ab68 <__sfvwrite_r+0x2fc>)
   1aabe:	4013      	ands	r3, r2
   1aac0:	2280      	movs	r2, #128	; 0x80
   1aac2:	4313      	orrs	r3, r2
   1aac4:	81a3      	strh	r3, [r4, #12]
   1aac6:	4643      	mov	r3, r8
   1aac8:	4640      	mov	r0, r8
   1aaca:	6123      	str	r3, [r4, #16]
   1aacc:	4653      	mov	r3, sl
   1aace:	4450      	add	r0, sl
   1aad0:	6167      	str	r7, [r4, #20]
   1aad2:	1aff      	subs	r7, r7, r3
   1aad4:	60a7      	str	r7, [r4, #8]
   1aad6:	6020      	str	r0, [r4, #0]
   1aad8:	46a8      	mov	r8, r5
   1aada:	002f      	movs	r7, r5
   1aadc:	46aa      	mov	sl, r5
   1aade:	e780      	b.n	1a9e2 <__sfvwrite_r+0x176>
   1aae0:	4b22      	ldr	r3, [pc, #136]	; (1ab6c <__sfvwrite_r+0x300>)
   1aae2:	0028      	movs	r0, r5
   1aae4:	429d      	cmp	r5, r3
   1aae6:	d900      	bls.n	1aaea <__sfvwrite_r+0x27e>
   1aae8:	0018      	movs	r0, r3
   1aaea:	0039      	movs	r1, r7
   1aaec:	f7f8 f99a 	bl	12e24 <__divsi3>
   1aaf0:	003b      	movs	r3, r7
   1aaf2:	464a      	mov	r2, r9
   1aaf4:	4343      	muls	r3, r0
   1aaf6:	69e1      	ldr	r1, [r4, #28]
   1aaf8:	9800      	ldr	r0, [sp, #0]
   1aafa:	6a67      	ldr	r7, [r4, #36]	; 0x24
   1aafc:	47b8      	blx	r7
   1aafe:	2800      	cmp	r0, #0
   1ab00:	dc00      	bgt.n	1ab04 <__sfvwrite_r+0x298>
   1ab02:	e752      	b.n	1a9aa <__sfvwrite_r+0x13e>
   1ab04:	0007      	movs	r7, r0
   1ab06:	e777      	b.n	1a9f8 <__sfvwrite_r+0x18c>
   1ab08:	4666      	mov	r6, ip
   1ab0a:	4651      	mov	r1, sl
   1ab0c:	f000 fbe2 	bl	1b2d4 <memmove>
   1ab10:	46b4      	mov	ip, r6
   1ab12:	6823      	ldr	r3, [r4, #0]
   1ab14:	0021      	movs	r1, r4
   1ab16:	4463      	add	r3, ip
   1ab18:	6023      	str	r3, [r4, #0]
   1ab1a:	9800      	ldr	r0, [sp, #0]
   1ab1c:	f7ff fcc4 	bl	1a4a8 <_fflush_r>
   1ab20:	2800      	cmp	r0, #0
   1ab22:	d000      	beq.n	1ab26 <__sfvwrite_r+0x2ba>
   1ab24:	e741      	b.n	1a9aa <__sfvwrite_r+0x13e>
   1ab26:	9e01      	ldr	r6, [sp, #4]
   1ab28:	e70e      	b.n	1a948 <__sfvwrite_r+0xdc>
   1ab2a:	9800      	ldr	r0, [sp, #0]
   1ab2c:	f000 ff7a 	bl	1ba24 <_realloc_r>
   1ab30:	4680      	mov	r8, r0
   1ab32:	2800      	cmp	r0, #0
   1ab34:	d1c7      	bne.n	1aac6 <__sfvwrite_r+0x25a>
   1ab36:	9d00      	ldr	r5, [sp, #0]
   1ab38:	6921      	ldr	r1, [r4, #16]
   1ab3a:	0028      	movs	r0, r5
   1ab3c:	f7ff fdb8 	bl	1a6b0 <_free_r>
   1ab40:	2280      	movs	r2, #128	; 0x80
   1ab42:	89a3      	ldrh	r3, [r4, #12]
   1ab44:	4393      	bics	r3, r2
   1ab46:	3a74      	subs	r2, #116	; 0x74
   1ab48:	b21b      	sxth	r3, r3
   1ab4a:	602a      	str	r2, [r5, #0]
   1ab4c:	e72f      	b.n	1a9ae <__sfvwrite_r+0x142>
   1ab4e:	1c7d      	adds	r5, r7, #1
   1ab50:	e6de      	b.n	1a910 <__sfvwrite_r+0xa4>
   1ab52:	2001      	movs	r0, #1
   1ab54:	4240      	negs	r0, r0
   1ab56:	e6bd      	b.n	1a8d4 <__sfvwrite_r+0x68>
   1ab58:	9a00      	ldr	r2, [sp, #0]
   1ab5a:	330c      	adds	r3, #12
   1ab5c:	6013      	str	r3, [r2, #0]
   1ab5e:	220c      	movs	r2, #12
   1ab60:	5ea3      	ldrsh	r3, [r4, r2]
   1ab62:	e724      	b.n	1a9ae <__sfvwrite_r+0x142>
   1ab64:	7ffffc00 	.word	0x7ffffc00
   1ab68:	fffffb7f 	.word	0xfffffb7f
   1ab6c:	7fffffff 	.word	0x7fffffff

0001ab70 <_fwalk_reent>:
   1ab70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab72:	4647      	mov	r7, r8
   1ab74:	46ce      	mov	lr, r9
   1ab76:	b580      	push	{r7, lr}
   1ab78:	27b8      	movs	r7, #184	; 0xb8
   1ab7a:	4680      	mov	r8, r0
   1ab7c:	00bf      	lsls	r7, r7, #2
   1ab7e:	4447      	add	r7, r8
   1ab80:	4689      	mov	r9, r1
   1ab82:	2600      	movs	r6, #0
   1ab84:	2f00      	cmp	r7, #0
   1ab86:	d014      	beq.n	1abb2 <_fwalk_reent+0x42>
   1ab88:	687b      	ldr	r3, [r7, #4]
   1ab8a:	68bc      	ldr	r4, [r7, #8]
   1ab8c:	1e5d      	subs	r5, r3, #1
   1ab8e:	d40d      	bmi.n	1abac <_fwalk_reent+0x3c>
   1ab90:	89a3      	ldrh	r3, [r4, #12]
   1ab92:	2b01      	cmp	r3, #1
   1ab94:	d907      	bls.n	1aba6 <_fwalk_reent+0x36>
   1ab96:	220e      	movs	r2, #14
   1ab98:	5ea3      	ldrsh	r3, [r4, r2]
   1ab9a:	3301      	adds	r3, #1
   1ab9c:	d003      	beq.n	1aba6 <_fwalk_reent+0x36>
   1ab9e:	0021      	movs	r1, r4
   1aba0:	4640      	mov	r0, r8
   1aba2:	47c8      	blx	r9
   1aba4:	4306      	orrs	r6, r0
   1aba6:	3468      	adds	r4, #104	; 0x68
   1aba8:	3d01      	subs	r5, #1
   1abaa:	d2f1      	bcs.n	1ab90 <_fwalk_reent+0x20>
   1abac:	683f      	ldr	r7, [r7, #0]
   1abae:	2f00      	cmp	r7, #0
   1abb0:	d1ea      	bne.n	1ab88 <_fwalk_reent+0x18>
   1abb2:	0030      	movs	r0, r6
   1abb4:	bc0c      	pop	{r2, r3}
   1abb6:	4690      	mov	r8, r2
   1abb8:	4699      	mov	r9, r3
   1abba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001abbc <_localeconv_r>:
   1abbc:	4b04      	ldr	r3, [pc, #16]	; (1abd0 <_localeconv_r+0x14>)
   1abbe:	681b      	ldr	r3, [r3, #0]
   1abc0:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1abc2:	2800      	cmp	r0, #0
   1abc4:	d001      	beq.n	1abca <_localeconv_r+0xe>
   1abc6:	30f0      	adds	r0, #240	; 0xf0
   1abc8:	4770      	bx	lr
   1abca:	4802      	ldr	r0, [pc, #8]	; (1abd4 <_localeconv_r+0x18>)
   1abcc:	e7fb      	b.n	1abc6 <_localeconv_r+0xa>
   1abce:	46c0      	nop			; (mov r8, r8)
   1abd0:	20000068 	.word	0x20000068
   1abd4:	200008ac 	.word	0x200008ac

0001abd8 <__retarget_lock_init_recursive>:
   1abd8:	4770      	bx	lr
   1abda:	46c0      	nop			; (mov r8, r8)

0001abdc <__retarget_lock_close_recursive>:
   1abdc:	4770      	bx	lr
   1abde:	46c0      	nop			; (mov r8, r8)

0001abe0 <__retarget_lock_acquire_recursive>:
   1abe0:	4770      	bx	lr
   1abe2:	46c0      	nop			; (mov r8, r8)

0001abe4 <__retarget_lock_release_recursive>:
   1abe4:	4770      	bx	lr
   1abe6:	46c0      	nop			; (mov r8, r8)

0001abe8 <__swhatbuf_r>:
   1abe8:	b570      	push	{r4, r5, r6, lr}
   1abea:	000c      	movs	r4, r1
   1abec:	001e      	movs	r6, r3
   1abee:	230e      	movs	r3, #14
   1abf0:	5ec9      	ldrsh	r1, [r1, r3]
   1abf2:	b090      	sub	sp, #64	; 0x40
   1abf4:	0015      	movs	r5, r2
   1abf6:	2900      	cmp	r1, #0
   1abf8:	db15      	blt.n	1ac26 <__swhatbuf_r+0x3e>
   1abfa:	aa01      	add	r2, sp, #4
   1abfc:	f001 fbb8 	bl	1c370 <_fstat_r>
   1ac00:	2800      	cmp	r0, #0
   1ac02:	db10      	blt.n	1ac26 <__swhatbuf_r+0x3e>
   1ac04:	22f0      	movs	r2, #240	; 0xf0
   1ac06:	9b02      	ldr	r3, [sp, #8]
   1ac08:	0212      	lsls	r2, r2, #8
   1ac0a:	4013      	ands	r3, r2
   1ac0c:	4a0d      	ldr	r2, [pc, #52]	; (1ac44 <__swhatbuf_r+0x5c>)
   1ac0e:	2080      	movs	r0, #128	; 0x80
   1ac10:	4694      	mov	ip, r2
   1ac12:	4463      	add	r3, ip
   1ac14:	425a      	negs	r2, r3
   1ac16:	4153      	adcs	r3, r2
   1ac18:	6033      	str	r3, [r6, #0]
   1ac1a:	2380      	movs	r3, #128	; 0x80
   1ac1c:	00db      	lsls	r3, r3, #3
   1ac1e:	602b      	str	r3, [r5, #0]
   1ac20:	0100      	lsls	r0, r0, #4
   1ac22:	b010      	add	sp, #64	; 0x40
   1ac24:	bd70      	pop	{r4, r5, r6, pc}
   1ac26:	2300      	movs	r3, #0
   1ac28:	6033      	str	r3, [r6, #0]
   1ac2a:	89a3      	ldrh	r3, [r4, #12]
   1ac2c:	061b      	lsls	r3, r3, #24
   1ac2e:	d503      	bpl.n	1ac38 <__swhatbuf_r+0x50>
   1ac30:	2340      	movs	r3, #64	; 0x40
   1ac32:	2000      	movs	r0, #0
   1ac34:	602b      	str	r3, [r5, #0]
   1ac36:	e7f4      	b.n	1ac22 <__swhatbuf_r+0x3a>
   1ac38:	2380      	movs	r3, #128	; 0x80
   1ac3a:	00db      	lsls	r3, r3, #3
   1ac3c:	602b      	str	r3, [r5, #0]
   1ac3e:	2000      	movs	r0, #0
   1ac40:	e7ef      	b.n	1ac22 <__swhatbuf_r+0x3a>
   1ac42:	46c0      	nop			; (mov r8, r8)
   1ac44:	ffffe000 	.word	0xffffe000

0001ac48 <__smakebuf_r>:
   1ac48:	b570      	push	{r4, r5, r6, lr}
   1ac4a:	898b      	ldrh	r3, [r1, #12]
   1ac4c:	b082      	sub	sp, #8
   1ac4e:	0006      	movs	r6, r0
   1ac50:	000c      	movs	r4, r1
   1ac52:	079b      	lsls	r3, r3, #30
   1ac54:	d507      	bpl.n	1ac66 <__smakebuf_r+0x1e>
   1ac56:	0023      	movs	r3, r4
   1ac58:	3343      	adds	r3, #67	; 0x43
   1ac5a:	6023      	str	r3, [r4, #0]
   1ac5c:	6123      	str	r3, [r4, #16]
   1ac5e:	2301      	movs	r3, #1
   1ac60:	6163      	str	r3, [r4, #20]
   1ac62:	b002      	add	sp, #8
   1ac64:	bd70      	pop	{r4, r5, r6, pc}
   1ac66:	ab01      	add	r3, sp, #4
   1ac68:	466a      	mov	r2, sp
   1ac6a:	f7ff ffbd 	bl	1abe8 <__swhatbuf_r>
   1ac6e:	9900      	ldr	r1, [sp, #0]
   1ac70:	0005      	movs	r5, r0
   1ac72:	0030      	movs	r0, r6
   1ac74:	f000 f83a 	bl	1acec <_malloc_r>
   1ac78:	2800      	cmp	r0, #0
   1ac7a:	d01e      	beq.n	1acba <__smakebuf_r+0x72>
   1ac7c:	2280      	movs	r2, #128	; 0x80
   1ac7e:	4b15      	ldr	r3, [pc, #84]	; (1acd4 <__smakebuf_r+0x8c>)
   1ac80:	63f3      	str	r3, [r6, #60]	; 0x3c
   1ac82:	89a3      	ldrh	r3, [r4, #12]
   1ac84:	6020      	str	r0, [r4, #0]
   1ac86:	4313      	orrs	r3, r2
   1ac88:	9a00      	ldr	r2, [sp, #0]
   1ac8a:	b21b      	sxth	r3, r3
   1ac8c:	6162      	str	r2, [r4, #20]
   1ac8e:	9a01      	ldr	r2, [sp, #4]
   1ac90:	81a3      	strh	r3, [r4, #12]
   1ac92:	6120      	str	r0, [r4, #16]
   1ac94:	2a00      	cmp	r2, #0
   1ac96:	d102      	bne.n	1ac9e <__smakebuf_r+0x56>
   1ac98:	432b      	orrs	r3, r5
   1ac9a:	81a3      	strh	r3, [r4, #12]
   1ac9c:	e7e1      	b.n	1ac62 <__smakebuf_r+0x1a>
   1ac9e:	230e      	movs	r3, #14
   1aca0:	5ee1      	ldrsh	r1, [r4, r3]
   1aca2:	0030      	movs	r0, r6
   1aca4:	f001 fb78 	bl	1c398 <_isatty_r>
   1aca8:	2800      	cmp	r0, #0
   1acaa:	d010      	beq.n	1acce <__smakebuf_r+0x86>
   1acac:	2203      	movs	r2, #3
   1acae:	89a3      	ldrh	r3, [r4, #12]
   1acb0:	4393      	bics	r3, r2
   1acb2:	2201      	movs	r2, #1
   1acb4:	4313      	orrs	r3, r2
   1acb6:	b21b      	sxth	r3, r3
   1acb8:	e7ee      	b.n	1ac98 <__smakebuf_r+0x50>
   1acba:	220c      	movs	r2, #12
   1acbc:	5ea3      	ldrsh	r3, [r4, r2]
   1acbe:	059a      	lsls	r2, r3, #22
   1acc0:	d4cf      	bmi.n	1ac62 <__smakebuf_r+0x1a>
   1acc2:	2203      	movs	r2, #3
   1acc4:	4393      	bics	r3, r2
   1acc6:	2202      	movs	r2, #2
   1acc8:	4313      	orrs	r3, r2
   1acca:	81a3      	strh	r3, [r4, #12]
   1accc:	e7c3      	b.n	1ac56 <__smakebuf_r+0xe>
   1acce:	220c      	movs	r2, #12
   1acd0:	5ea3      	ldrsh	r3, [r4, r2]
   1acd2:	e7e1      	b.n	1ac98 <__smakebuf_r+0x50>
   1acd4:	0001a4fd 	.word	0x0001a4fd

0001acd8 <malloc>:
   1acd8:	b510      	push	{r4, lr}
   1acda:	4b03      	ldr	r3, [pc, #12]	; (1ace8 <malloc+0x10>)
   1acdc:	0001      	movs	r1, r0
   1acde:	6818      	ldr	r0, [r3, #0]
   1ace0:	f000 f804 	bl	1acec <_malloc_r>
   1ace4:	bd10      	pop	{r4, pc}
   1ace6:	46c0      	nop			; (mov r8, r8)
   1ace8:	20000068 	.word	0x20000068

0001acec <_malloc_r>:
   1acec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1acee:	4657      	mov	r7, sl
   1acf0:	4645      	mov	r5, r8
   1acf2:	46de      	mov	lr, fp
   1acf4:	464e      	mov	r6, r9
   1acf6:	b5e0      	push	{r5, r6, r7, lr}
   1acf8:	000d      	movs	r5, r1
   1acfa:	350b      	adds	r5, #11
   1acfc:	b083      	sub	sp, #12
   1acfe:	0007      	movs	r7, r0
   1ad00:	2d16      	cmp	r5, #22
   1ad02:	d800      	bhi.n	1ad06 <_malloc_r+0x1a>
   1ad04:	e09f      	b.n	1ae46 <_malloc_r+0x15a>
   1ad06:	2307      	movs	r3, #7
   1ad08:	439d      	bics	r5, r3
   1ad0a:	d500      	bpl.n	1ad0e <_malloc_r+0x22>
   1ad0c:	e0c4      	b.n	1ae98 <_malloc_r+0x1ac>
   1ad0e:	42a9      	cmp	r1, r5
   1ad10:	d900      	bls.n	1ad14 <_malloc_r+0x28>
   1ad12:	e0c1      	b.n	1ae98 <_malloc_r+0x1ac>
   1ad14:	f000 fb2e 	bl	1b374 <__malloc_lock>
   1ad18:	23f8      	movs	r3, #248	; 0xf8
   1ad1a:	33ff      	adds	r3, #255	; 0xff
   1ad1c:	429d      	cmp	r5, r3
   1ad1e:	d800      	bhi.n	1ad22 <_malloc_r+0x36>
   1ad20:	e28f      	b.n	1b242 <_malloc_r+0x556>
   1ad22:	0a68      	lsrs	r0, r5, #9
   1ad24:	d100      	bne.n	1ad28 <_malloc_r+0x3c>
   1ad26:	e0bb      	b.n	1aea0 <_malloc_r+0x1b4>
   1ad28:	2804      	cmp	r0, #4
   1ad2a:	d900      	bls.n	1ad2e <_malloc_r+0x42>
   1ad2c:	e162      	b.n	1aff4 <_malloc_r+0x308>
   1ad2e:	2338      	movs	r3, #56	; 0x38
   1ad30:	4698      	mov	r8, r3
   1ad32:	09a8      	lsrs	r0, r5, #6
   1ad34:	4480      	add	r8, r0
   1ad36:	3039      	adds	r0, #57	; 0x39
   1ad38:	00c1      	lsls	r1, r0, #3
   1ad3a:	4ed2      	ldr	r6, [pc, #840]	; (1b084 <_malloc_r+0x398>)
   1ad3c:	1871      	adds	r1, r6, r1
   1ad3e:	3908      	subs	r1, #8
   1ad40:	68cc      	ldr	r4, [r1, #12]
   1ad42:	42a1      	cmp	r1, r4
   1ad44:	d019      	beq.n	1ad7a <_malloc_r+0x8e>
   1ad46:	2303      	movs	r3, #3
   1ad48:	6862      	ldr	r2, [r4, #4]
   1ad4a:	439a      	bics	r2, r3
   1ad4c:	0013      	movs	r3, r2
   1ad4e:	1b52      	subs	r2, r2, r5
   1ad50:	2a0f      	cmp	r2, #15
   1ad52:	dd00      	ble.n	1ad56 <_malloc_r+0x6a>
   1ad54:	e0aa      	b.n	1aeac <_malloc_r+0x1c0>
   1ad56:	2a00      	cmp	r2, #0
   1ad58:	db00      	blt.n	1ad5c <_malloc_r+0x70>
   1ad5a:	e088      	b.n	1ae6e <_malloc_r+0x182>
   1ad5c:	2303      	movs	r3, #3
   1ad5e:	469c      	mov	ip, r3
   1ad60:	e008      	b.n	1ad74 <_malloc_r+0x88>
   1ad62:	4662      	mov	r2, ip
   1ad64:	6863      	ldr	r3, [r4, #4]
   1ad66:	4393      	bics	r3, r2
   1ad68:	1b5a      	subs	r2, r3, r5
   1ad6a:	2a0f      	cmp	r2, #15
   1ad6c:	dd00      	ble.n	1ad70 <_malloc_r+0x84>
   1ad6e:	e09d      	b.n	1aeac <_malloc_r+0x1c0>
   1ad70:	2a00      	cmp	r2, #0
   1ad72:	da7c      	bge.n	1ae6e <_malloc_r+0x182>
   1ad74:	68e4      	ldr	r4, [r4, #12]
   1ad76:	42a1      	cmp	r1, r4
   1ad78:	d1f3      	bne.n	1ad62 <_malloc_r+0x76>
   1ad7a:	0032      	movs	r2, r6
   1ad7c:	6934      	ldr	r4, [r6, #16]
   1ad7e:	3208      	adds	r2, #8
   1ad80:	4294      	cmp	r4, r2
   1ad82:	d100      	bne.n	1ad86 <_malloc_r+0x9a>
   1ad84:	e190      	b.n	1b0a8 <_malloc_r+0x3bc>
   1ad86:	2303      	movs	r3, #3
   1ad88:	6861      	ldr	r1, [r4, #4]
   1ad8a:	4399      	bics	r1, r3
   1ad8c:	4689      	mov	r9, r1
   1ad8e:	1b49      	subs	r1, r1, r5
   1ad90:	290f      	cmp	r1, #15
   1ad92:	dd00      	ble.n	1ad96 <_malloc_r+0xaa>
   1ad94:	e162      	b.n	1b05c <_malloc_r+0x370>
   1ad96:	6172      	str	r2, [r6, #20]
   1ad98:	6132      	str	r2, [r6, #16]
   1ad9a:	2900      	cmp	r1, #0
   1ad9c:	db00      	blt.n	1ada0 <_malloc_r+0xb4>
   1ad9e:	e087      	b.n	1aeb0 <_malloc_r+0x1c4>
   1ada0:	4ab9      	ldr	r2, [pc, #740]	; (1b088 <_malloc_r+0x39c>)
   1ada2:	464b      	mov	r3, r9
   1ada4:	4591      	cmp	r9, r2
   1ada6:	d900      	bls.n	1adaa <_malloc_r+0xbe>
   1ada8:	e130      	b.n	1b00c <_malloc_r+0x320>
   1adaa:	08db      	lsrs	r3, r3, #3
   1adac:	3aff      	subs	r2, #255	; 0xff
   1adae:	1099      	asrs	r1, r3, #2
   1adb0:	3aff      	subs	r2, #255	; 0xff
   1adb2:	408a      	lsls	r2, r1
   1adb4:	00db      	lsls	r3, r3, #3
   1adb6:	6871      	ldr	r1, [r6, #4]
   1adb8:	199b      	adds	r3, r3, r6
   1adba:	430a      	orrs	r2, r1
   1adbc:	6899      	ldr	r1, [r3, #8]
   1adbe:	6072      	str	r2, [r6, #4]
   1adc0:	60e3      	str	r3, [r4, #12]
   1adc2:	60a1      	str	r1, [r4, #8]
   1adc4:	609c      	str	r4, [r3, #8]
   1adc6:	0013      	movs	r3, r2
   1adc8:	60cc      	str	r4, [r1, #12]
   1adca:	2101      	movs	r1, #1
   1adcc:	1082      	asrs	r2, r0, #2
   1adce:	4091      	lsls	r1, r2
   1add0:	4299      	cmp	r1, r3
   1add2:	d86f      	bhi.n	1aeb4 <_malloc_r+0x1c8>
   1add4:	420b      	tst	r3, r1
   1add6:	d105      	bne.n	1ade4 <_malloc_r+0xf8>
   1add8:	2203      	movs	r2, #3
   1adda:	4390      	bics	r0, r2
   1addc:	0049      	lsls	r1, r1, #1
   1adde:	3004      	adds	r0, #4
   1ade0:	420b      	tst	r3, r1
   1ade2:	d0fb      	beq.n	1addc <_malloc_r+0xf0>
   1ade4:	2303      	movs	r3, #3
   1ade6:	4698      	mov	r8, r3
   1ade8:	00c3      	lsls	r3, r0, #3
   1adea:	4699      	mov	r9, r3
   1adec:	44b1      	add	r9, r6
   1adee:	46cc      	mov	ip, r9
   1adf0:	4682      	mov	sl, r0
   1adf2:	4663      	mov	r3, ip
   1adf4:	68dc      	ldr	r4, [r3, #12]
   1adf6:	45a4      	cmp	ip, r4
   1adf8:	d107      	bne.n	1ae0a <_malloc_r+0x11e>
   1adfa:	e157      	b.n	1b0ac <_malloc_r+0x3c0>
   1adfc:	2a00      	cmp	r2, #0
   1adfe:	db00      	blt.n	1ae02 <_malloc_r+0x116>
   1ae00:	e166      	b.n	1b0d0 <_malloc_r+0x3e4>
   1ae02:	68e4      	ldr	r4, [r4, #12]
   1ae04:	45a4      	cmp	ip, r4
   1ae06:	d100      	bne.n	1ae0a <_malloc_r+0x11e>
   1ae08:	e150      	b.n	1b0ac <_malloc_r+0x3c0>
   1ae0a:	4642      	mov	r2, r8
   1ae0c:	6863      	ldr	r3, [r4, #4]
   1ae0e:	4393      	bics	r3, r2
   1ae10:	1b5a      	subs	r2, r3, r5
   1ae12:	2a0f      	cmp	r2, #15
   1ae14:	ddf2      	ble.n	1adfc <_malloc_r+0x110>
   1ae16:	2001      	movs	r0, #1
   1ae18:	4680      	mov	r8, r0
   1ae1a:	1961      	adds	r1, r4, r5
   1ae1c:	4305      	orrs	r5, r0
   1ae1e:	6065      	str	r5, [r4, #4]
   1ae20:	68a0      	ldr	r0, [r4, #8]
   1ae22:	68e5      	ldr	r5, [r4, #12]
   1ae24:	3608      	adds	r6, #8
   1ae26:	60c5      	str	r5, [r0, #12]
   1ae28:	60a8      	str	r0, [r5, #8]
   1ae2a:	4640      	mov	r0, r8
   1ae2c:	60f1      	str	r1, [r6, #12]
   1ae2e:	60b1      	str	r1, [r6, #8]
   1ae30:	4310      	orrs	r0, r2
   1ae32:	6048      	str	r0, [r1, #4]
   1ae34:	60ce      	str	r6, [r1, #12]
   1ae36:	608e      	str	r6, [r1, #8]
   1ae38:	0038      	movs	r0, r7
   1ae3a:	50e2      	str	r2, [r4, r3]
   1ae3c:	f000 faa2 	bl	1b384 <__malloc_unlock>
   1ae40:	0020      	movs	r0, r4
   1ae42:	3008      	adds	r0, #8
   1ae44:	e021      	b.n	1ae8a <_malloc_r+0x19e>
   1ae46:	2910      	cmp	r1, #16
   1ae48:	d826      	bhi.n	1ae98 <_malloc_r+0x1ac>
   1ae4a:	0038      	movs	r0, r7
   1ae4c:	f000 fa92 	bl	1b374 <__malloc_lock>
   1ae50:	2510      	movs	r5, #16
   1ae52:	2318      	movs	r3, #24
   1ae54:	2002      	movs	r0, #2
   1ae56:	4e8b      	ldr	r6, [pc, #556]	; (1b084 <_malloc_r+0x398>)
   1ae58:	18f3      	adds	r3, r6, r3
   1ae5a:	001a      	movs	r2, r3
   1ae5c:	685c      	ldr	r4, [r3, #4]
   1ae5e:	3a08      	subs	r2, #8
   1ae60:	4294      	cmp	r4, r2
   1ae62:	d100      	bne.n	1ae66 <_malloc_r+0x17a>
   1ae64:	e12e      	b.n	1b0c4 <_malloc_r+0x3d8>
   1ae66:	2303      	movs	r3, #3
   1ae68:	6862      	ldr	r2, [r4, #4]
   1ae6a:	439a      	bics	r2, r3
   1ae6c:	0013      	movs	r3, r2
   1ae6e:	68e2      	ldr	r2, [r4, #12]
   1ae70:	68a1      	ldr	r1, [r4, #8]
   1ae72:	60ca      	str	r2, [r1, #12]
   1ae74:	6091      	str	r1, [r2, #8]
   1ae76:	2201      	movs	r2, #1
   1ae78:	18e3      	adds	r3, r4, r3
   1ae7a:	6859      	ldr	r1, [r3, #4]
   1ae7c:	0038      	movs	r0, r7
   1ae7e:	430a      	orrs	r2, r1
   1ae80:	605a      	str	r2, [r3, #4]
   1ae82:	f000 fa7f 	bl	1b384 <__malloc_unlock>
   1ae86:	0020      	movs	r0, r4
   1ae88:	3008      	adds	r0, #8
   1ae8a:	b003      	add	sp, #12
   1ae8c:	bc3c      	pop	{r2, r3, r4, r5}
   1ae8e:	4690      	mov	r8, r2
   1ae90:	4699      	mov	r9, r3
   1ae92:	46a2      	mov	sl, r4
   1ae94:	46ab      	mov	fp, r5
   1ae96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ae98:	230c      	movs	r3, #12
   1ae9a:	2000      	movs	r0, #0
   1ae9c:	603b      	str	r3, [r7, #0]
   1ae9e:	e7f4      	b.n	1ae8a <_malloc_r+0x19e>
   1aea0:	2180      	movs	r1, #128	; 0x80
   1aea2:	233f      	movs	r3, #63	; 0x3f
   1aea4:	2040      	movs	r0, #64	; 0x40
   1aea6:	0089      	lsls	r1, r1, #2
   1aea8:	4698      	mov	r8, r3
   1aeaa:	e746      	b.n	1ad3a <_malloc_r+0x4e>
   1aeac:	4640      	mov	r0, r8
   1aeae:	e764      	b.n	1ad7a <_malloc_r+0x8e>
   1aeb0:	464b      	mov	r3, r9
   1aeb2:	e7e0      	b.n	1ae76 <_malloc_r+0x18a>
   1aeb4:	2303      	movs	r3, #3
   1aeb6:	68b4      	ldr	r4, [r6, #8]
   1aeb8:	6862      	ldr	r2, [r4, #4]
   1aeba:	439a      	bics	r2, r3
   1aebc:	4690      	mov	r8, r2
   1aebe:	42aa      	cmp	r2, r5
   1aec0:	d303      	bcc.n	1aeca <_malloc_r+0x1de>
   1aec2:	1b53      	subs	r3, r2, r5
   1aec4:	2b0f      	cmp	r3, #15
   1aec6:	dd00      	ble.n	1aeca <_malloc_r+0x1de>
   1aec8:	e086      	b.n	1afd8 <_malloc_r+0x2ec>
   1aeca:	0023      	movs	r3, r4
   1aecc:	4443      	add	r3, r8
   1aece:	4a6f      	ldr	r2, [pc, #444]	; (1b08c <_malloc_r+0x3a0>)
   1aed0:	9301      	str	r3, [sp, #4]
   1aed2:	4b6f      	ldr	r3, [pc, #444]	; (1b090 <_malloc_r+0x3a4>)
   1aed4:	4693      	mov	fp, r2
   1aed6:	681b      	ldr	r3, [r3, #0]
   1aed8:	6812      	ldr	r2, [r2, #0]
   1aeda:	18eb      	adds	r3, r5, r3
   1aedc:	3201      	adds	r2, #1
   1aede:	d100      	bne.n	1aee2 <_malloc_r+0x1f6>
   1aee0:	e168      	b.n	1b1b4 <_malloc_r+0x4c8>
   1aee2:	4a6c      	ldr	r2, [pc, #432]	; (1b094 <_malloc_r+0x3a8>)
   1aee4:	4694      	mov	ip, r2
   1aee6:	4463      	add	r3, ip
   1aee8:	0b1b      	lsrs	r3, r3, #12
   1aeea:	031b      	lsls	r3, r3, #12
   1aeec:	9300      	str	r3, [sp, #0]
   1aeee:	9900      	ldr	r1, [sp, #0]
   1aef0:	0038      	movs	r0, r7
   1aef2:	f000 ff55 	bl	1bda0 <_sbrk_r>
   1aef6:	0003      	movs	r3, r0
   1aef8:	4681      	mov	r9, r0
   1aefa:	3301      	adds	r3, #1
   1aefc:	d061      	beq.n	1afc2 <_malloc_r+0x2d6>
   1aefe:	9b01      	ldr	r3, [sp, #4]
   1af00:	4283      	cmp	r3, r0
   1af02:	d900      	bls.n	1af06 <_malloc_r+0x21a>
   1af04:	e0ff      	b.n	1b106 <_malloc_r+0x41a>
   1af06:	4b64      	ldr	r3, [pc, #400]	; (1b098 <_malloc_r+0x3ac>)
   1af08:	9a00      	ldr	r2, [sp, #0]
   1af0a:	469a      	mov	sl, r3
   1af0c:	681b      	ldr	r3, [r3, #0]
   1af0e:	469c      	mov	ip, r3
   1af10:	4653      	mov	r3, sl
   1af12:	4462      	add	r2, ip
   1af14:	601a      	str	r2, [r3, #0]
   1af16:	9b01      	ldr	r3, [sp, #4]
   1af18:	0011      	movs	r1, r2
   1af1a:	4283      	cmp	r3, r0
   1af1c:	d100      	bne.n	1af20 <_malloc_r+0x234>
   1af1e:	e155      	b.n	1b1cc <_malloc_r+0x4e0>
   1af20:	465b      	mov	r3, fp
   1af22:	681b      	ldr	r3, [r3, #0]
   1af24:	3301      	adds	r3, #1
   1af26:	d100      	bne.n	1af2a <_malloc_r+0x23e>
   1af28:	e16c      	b.n	1b204 <_malloc_r+0x518>
   1af2a:	464b      	mov	r3, r9
   1af2c:	9a01      	ldr	r2, [sp, #4]
   1af2e:	1a9b      	subs	r3, r3, r2
   1af30:	1859      	adds	r1, r3, r1
   1af32:	4653      	mov	r3, sl
   1af34:	6019      	str	r1, [r3, #0]
   1af36:	2307      	movs	r3, #7
   1af38:	464a      	mov	r2, r9
   1af3a:	4013      	ands	r3, r2
   1af3c:	d100      	bne.n	1af40 <_malloc_r+0x254>
   1af3e:	e124      	b.n	1b18a <_malloc_r+0x49e>
   1af40:	2108      	movs	r1, #8
   1af42:	4689      	mov	r9, r1
   1af44:	4955      	ldr	r1, [pc, #340]	; (1b09c <_malloc_r+0x3b0>)
   1af46:	1ad2      	subs	r2, r2, r3
   1af48:	4491      	add	r9, r2
   1af4a:	1acb      	subs	r3, r1, r3
   1af4c:	9a00      	ldr	r2, [sp, #0]
   1af4e:	0038      	movs	r0, r7
   1af50:	444a      	add	r2, r9
   1af52:	0511      	lsls	r1, r2, #20
   1af54:	0d09      	lsrs	r1, r1, #20
   1af56:	1a5b      	subs	r3, r3, r1
   1af58:	0019      	movs	r1, r3
   1af5a:	469b      	mov	fp, r3
   1af5c:	f000 ff20 	bl	1bda0 <_sbrk_r>
   1af60:	1c43      	adds	r3, r0, #1
   1af62:	d100      	bne.n	1af66 <_malloc_r+0x27a>
   1af64:	e142      	b.n	1b1ec <_malloc_r+0x500>
   1af66:	464b      	mov	r3, r9
   1af68:	1ac0      	subs	r0, r0, r3
   1af6a:	2301      	movs	r3, #1
   1af6c:	4458      	add	r0, fp
   1af6e:	4318      	orrs	r0, r3
   1af70:	4653      	mov	r3, sl
   1af72:	681b      	ldr	r3, [r3, #0]
   1af74:	445b      	add	r3, fp
   1af76:	0019      	movs	r1, r3
   1af78:	4653      	mov	r3, sl
   1af7a:	6019      	str	r1, [r3, #0]
   1af7c:	464b      	mov	r3, r9
   1af7e:	60b3      	str	r3, [r6, #8]
   1af80:	6058      	str	r0, [r3, #4]
   1af82:	42b4      	cmp	r4, r6
   1af84:	d013      	beq.n	1afae <_malloc_r+0x2c2>
   1af86:	4643      	mov	r3, r8
   1af88:	2b0f      	cmp	r3, #15
   1af8a:	d800      	bhi.n	1af8e <_malloc_r+0x2a2>
   1af8c:	e0e8      	b.n	1b160 <_malloc_r+0x474>
   1af8e:	4643      	mov	r3, r8
   1af90:	2207      	movs	r2, #7
   1af92:	6860      	ldr	r0, [r4, #4]
   1af94:	3b0c      	subs	r3, #12
   1af96:	4393      	bics	r3, r2
   1af98:	3a06      	subs	r2, #6
   1af9a:	4002      	ands	r2, r0
   1af9c:	2005      	movs	r0, #5
   1af9e:	431a      	orrs	r2, r3
   1afa0:	6062      	str	r2, [r4, #4]
   1afa2:	18e2      	adds	r2, r4, r3
   1afa4:	6050      	str	r0, [r2, #4]
   1afa6:	6090      	str	r0, [r2, #8]
   1afa8:	2b0f      	cmp	r3, #15
   1afaa:	d900      	bls.n	1afae <_malloc_r+0x2c2>
   1afac:	e122      	b.n	1b1f4 <_malloc_r+0x508>
   1afae:	4b3c      	ldr	r3, [pc, #240]	; (1b0a0 <_malloc_r+0x3b4>)
   1afb0:	681a      	ldr	r2, [r3, #0]
   1afb2:	4291      	cmp	r1, r2
   1afb4:	d900      	bls.n	1afb8 <_malloc_r+0x2cc>
   1afb6:	6019      	str	r1, [r3, #0]
   1afb8:	4b3a      	ldr	r3, [pc, #232]	; (1b0a4 <_malloc_r+0x3b8>)
   1afba:	681a      	ldr	r2, [r3, #0]
   1afbc:	4291      	cmp	r1, r2
   1afbe:	d900      	bls.n	1afc2 <_malloc_r+0x2d6>
   1afc0:	6019      	str	r1, [r3, #0]
   1afc2:	2303      	movs	r3, #3
   1afc4:	68b4      	ldr	r4, [r6, #8]
   1afc6:	6862      	ldr	r2, [r4, #4]
   1afc8:	439a      	bics	r2, r3
   1afca:	1b53      	subs	r3, r2, r5
   1afcc:	4295      	cmp	r5, r2
   1afce:	d900      	bls.n	1afd2 <_malloc_r+0x2e6>
   1afd0:	e0c9      	b.n	1b166 <_malloc_r+0x47a>
   1afd2:	2b0f      	cmp	r3, #15
   1afd4:	dc00      	bgt.n	1afd8 <_malloc_r+0x2ec>
   1afd6:	e0c6      	b.n	1b166 <_malloc_r+0x47a>
   1afd8:	2201      	movs	r2, #1
   1afda:	0029      	movs	r1, r5
   1afdc:	4313      	orrs	r3, r2
   1afde:	4311      	orrs	r1, r2
   1afe0:	1965      	adds	r5, r4, r5
   1afe2:	6061      	str	r1, [r4, #4]
   1afe4:	0038      	movs	r0, r7
   1afe6:	60b5      	str	r5, [r6, #8]
   1afe8:	606b      	str	r3, [r5, #4]
   1afea:	f000 f9cb 	bl	1b384 <__malloc_unlock>
   1afee:	0020      	movs	r0, r4
   1aff0:	3008      	adds	r0, #8
   1aff2:	e74a      	b.n	1ae8a <_malloc_r+0x19e>
   1aff4:	2814      	cmp	r0, #20
   1aff6:	d97a      	bls.n	1b0ee <_malloc_r+0x402>
   1aff8:	2854      	cmp	r0, #84	; 0x54
   1affa:	d900      	bls.n	1affe <_malloc_r+0x312>
   1affc:	e0ba      	b.n	1b174 <_malloc_r+0x488>
   1affe:	236e      	movs	r3, #110	; 0x6e
   1b000:	4698      	mov	r8, r3
   1b002:	0b28      	lsrs	r0, r5, #12
   1b004:	4480      	add	r8, r0
   1b006:	306f      	adds	r0, #111	; 0x6f
   1b008:	00c1      	lsls	r1, r0, #3
   1b00a:	e696      	b.n	1ad3a <_malloc_r+0x4e>
   1b00c:	0a5a      	lsrs	r2, r3, #9
   1b00e:	2a04      	cmp	r2, #4
   1b010:	d973      	bls.n	1b0fa <_malloc_r+0x40e>
   1b012:	2a14      	cmp	r2, #20
   1b014:	d900      	bls.n	1b018 <_malloc_r+0x32c>
   1b016:	e0d0      	b.n	1b1ba <_malloc_r+0x4ce>
   1b018:	0011      	movs	r1, r2
   1b01a:	325c      	adds	r2, #92	; 0x5c
   1b01c:	315b      	adds	r1, #91	; 0x5b
   1b01e:	00d2      	lsls	r2, r2, #3
   1b020:	2308      	movs	r3, #8
   1b022:	425b      	negs	r3, r3
   1b024:	469c      	mov	ip, r3
   1b026:	18b2      	adds	r2, r6, r2
   1b028:	4494      	add	ip, r2
   1b02a:	4663      	mov	r3, ip
   1b02c:	689a      	ldr	r2, [r3, #8]
   1b02e:	2303      	movs	r3, #3
   1b030:	4698      	mov	r8, r3
   1b032:	4594      	cmp	ip, r2
   1b034:	d100      	bne.n	1b038 <_malloc_r+0x34c>
   1b036:	e0ab      	b.n	1b190 <_malloc_r+0x4a4>
   1b038:	4643      	mov	r3, r8
   1b03a:	6851      	ldr	r1, [r2, #4]
   1b03c:	4399      	bics	r1, r3
   1b03e:	4589      	cmp	r9, r1
   1b040:	d300      	bcc.n	1b044 <_malloc_r+0x358>
   1b042:	e095      	b.n	1b170 <_malloc_r+0x484>
   1b044:	6892      	ldr	r2, [r2, #8]
   1b046:	4594      	cmp	ip, r2
   1b048:	d1f6      	bne.n	1b038 <_malloc_r+0x34c>
   1b04a:	4663      	mov	r3, ip
   1b04c:	68da      	ldr	r2, [r3, #12]
   1b04e:	6873      	ldr	r3, [r6, #4]
   1b050:	4661      	mov	r1, ip
   1b052:	60e2      	str	r2, [r4, #12]
   1b054:	60a1      	str	r1, [r4, #8]
   1b056:	6094      	str	r4, [r2, #8]
   1b058:	60cc      	str	r4, [r1, #12]
   1b05a:	e6b6      	b.n	1adca <_malloc_r+0xde>
   1b05c:	2301      	movs	r3, #1
   1b05e:	1960      	adds	r0, r4, r5
   1b060:	431d      	orrs	r5, r3
   1b062:	6065      	str	r5, [r4, #4]
   1b064:	6170      	str	r0, [r6, #20]
   1b066:	6130      	str	r0, [r6, #16]
   1b068:	60c2      	str	r2, [r0, #12]
   1b06a:	6082      	str	r2, [r0, #8]
   1b06c:	001a      	movs	r2, r3
   1b06e:	464b      	mov	r3, r9
   1b070:	430a      	orrs	r2, r1
   1b072:	6042      	str	r2, [r0, #4]
   1b074:	0038      	movs	r0, r7
   1b076:	50e1      	str	r1, [r4, r3]
   1b078:	f000 f984 	bl	1b384 <__malloc_unlock>
   1b07c:	0020      	movs	r0, r4
   1b07e:	3008      	adds	r0, #8
   1b080:	e703      	b.n	1ae8a <_malloc_r+0x19e>
   1b082:	46c0      	nop			; (mov r8, r8)
   1b084:	2000049c 	.word	0x2000049c
   1b088:	000001ff 	.word	0x000001ff
   1b08c:	200008a4 	.word	0x200008a4
   1b090:	20001054 	.word	0x20001054
   1b094:	0000100f 	.word	0x0000100f
   1b098:	20001024 	.word	0x20001024
   1b09c:	00001008 	.word	0x00001008
   1b0a0:	2000104c 	.word	0x2000104c
   1b0a4:	20001050 	.word	0x20001050
   1b0a8:	6873      	ldr	r3, [r6, #4]
   1b0aa:	e68e      	b.n	1adca <_malloc_r+0xde>
   1b0ac:	2308      	movs	r3, #8
   1b0ae:	469b      	mov	fp, r3
   1b0b0:	3b07      	subs	r3, #7
   1b0b2:	44dc      	add	ip, fp
   1b0b4:	469b      	mov	fp, r3
   1b0b6:	44da      	add	sl, fp
   1b0b8:	4643      	mov	r3, r8
   1b0ba:	4652      	mov	r2, sl
   1b0bc:	4213      	tst	r3, r2
   1b0be:	d000      	beq.n	1b0c2 <_malloc_r+0x3d6>
   1b0c0:	e697      	b.n	1adf2 <_malloc_r+0x106>
   1b0c2:	e037      	b.n	1b134 <_malloc_r+0x448>
   1b0c4:	68dc      	ldr	r4, [r3, #12]
   1b0c6:	3002      	adds	r0, #2
   1b0c8:	42a3      	cmp	r3, r4
   1b0ca:	d100      	bne.n	1b0ce <_malloc_r+0x3e2>
   1b0cc:	e655      	b.n	1ad7a <_malloc_r+0x8e>
   1b0ce:	e6ca      	b.n	1ae66 <_malloc_r+0x17a>
   1b0d0:	2201      	movs	r2, #1
   1b0d2:	18e3      	adds	r3, r4, r3
   1b0d4:	6859      	ldr	r1, [r3, #4]
   1b0d6:	0038      	movs	r0, r7
   1b0d8:	430a      	orrs	r2, r1
   1b0da:	605a      	str	r2, [r3, #4]
   1b0dc:	68e3      	ldr	r3, [r4, #12]
   1b0de:	68a2      	ldr	r2, [r4, #8]
   1b0e0:	60d3      	str	r3, [r2, #12]
   1b0e2:	609a      	str	r2, [r3, #8]
   1b0e4:	f000 f94e 	bl	1b384 <__malloc_unlock>
   1b0e8:	0020      	movs	r0, r4
   1b0ea:	3008      	adds	r0, #8
   1b0ec:	e6cd      	b.n	1ae8a <_malloc_r+0x19e>
   1b0ee:	235b      	movs	r3, #91	; 0x5b
   1b0f0:	4698      	mov	r8, r3
   1b0f2:	4480      	add	r8, r0
   1b0f4:	305c      	adds	r0, #92	; 0x5c
   1b0f6:	00c1      	lsls	r1, r0, #3
   1b0f8:	e61f      	b.n	1ad3a <_malloc_r+0x4e>
   1b0fa:	099a      	lsrs	r2, r3, #6
   1b0fc:	0011      	movs	r1, r2
   1b0fe:	3239      	adds	r2, #57	; 0x39
   1b100:	3138      	adds	r1, #56	; 0x38
   1b102:	00d2      	lsls	r2, r2, #3
   1b104:	e78c      	b.n	1b020 <_malloc_r+0x334>
   1b106:	42b4      	cmp	r4, r6
   1b108:	d000      	beq.n	1b10c <_malloc_r+0x420>
   1b10a:	e75a      	b.n	1afc2 <_malloc_r+0x2d6>
   1b10c:	4b4f      	ldr	r3, [pc, #316]	; (1b24c <_malloc_r+0x560>)
   1b10e:	9a00      	ldr	r2, [sp, #0]
   1b110:	469a      	mov	sl, r3
   1b112:	681b      	ldr	r3, [r3, #0]
   1b114:	469c      	mov	ip, r3
   1b116:	4653      	mov	r3, sl
   1b118:	4462      	add	r2, ip
   1b11a:	0011      	movs	r1, r2
   1b11c:	601a      	str	r2, [r3, #0]
   1b11e:	e6ff      	b.n	1af20 <_malloc_r+0x234>
   1b120:	2308      	movs	r3, #8
   1b122:	425b      	negs	r3, r3
   1b124:	469c      	mov	ip, r3
   1b126:	44e1      	add	r9, ip
   1b128:	464b      	mov	r3, r9
   1b12a:	689b      	ldr	r3, [r3, #8]
   1b12c:	3801      	subs	r0, #1
   1b12e:	4599      	cmp	r9, r3
   1b130:	d000      	beq.n	1b134 <_malloc_r+0x448>
   1b132:	e084      	b.n	1b23e <_malloc_r+0x552>
   1b134:	4643      	mov	r3, r8
   1b136:	4203      	tst	r3, r0
   1b138:	d1f2      	bne.n	1b120 <_malloc_r+0x434>
   1b13a:	6873      	ldr	r3, [r6, #4]
   1b13c:	438b      	bics	r3, r1
   1b13e:	6073      	str	r3, [r6, #4]
   1b140:	0049      	lsls	r1, r1, #1
   1b142:	4299      	cmp	r1, r3
   1b144:	d900      	bls.n	1b148 <_malloc_r+0x45c>
   1b146:	e6b5      	b.n	1aeb4 <_malloc_r+0x1c8>
   1b148:	2900      	cmp	r1, #0
   1b14a:	d100      	bne.n	1b14e <_malloc_r+0x462>
   1b14c:	e6b2      	b.n	1aeb4 <_malloc_r+0x1c8>
   1b14e:	4650      	mov	r0, sl
   1b150:	420b      	tst	r3, r1
   1b152:	d000      	beq.n	1b156 <_malloc_r+0x46a>
   1b154:	e648      	b.n	1ade8 <_malloc_r+0xfc>
   1b156:	0049      	lsls	r1, r1, #1
   1b158:	3004      	adds	r0, #4
   1b15a:	420b      	tst	r3, r1
   1b15c:	d0fb      	beq.n	1b156 <_malloc_r+0x46a>
   1b15e:	e643      	b.n	1ade8 <_malloc_r+0xfc>
   1b160:	2301      	movs	r3, #1
   1b162:	464a      	mov	r2, r9
   1b164:	6053      	str	r3, [r2, #4]
   1b166:	0038      	movs	r0, r7
   1b168:	f000 f90c 	bl	1b384 <__malloc_unlock>
   1b16c:	2000      	movs	r0, #0
   1b16e:	e68c      	b.n	1ae8a <_malloc_r+0x19e>
   1b170:	4694      	mov	ip, r2
   1b172:	e76a      	b.n	1b04a <_malloc_r+0x35e>
   1b174:	23aa      	movs	r3, #170	; 0xaa
   1b176:	005b      	lsls	r3, r3, #1
   1b178:	4298      	cmp	r0, r3
   1b17a:	d811      	bhi.n	1b1a0 <_malloc_r+0x4b4>
   1b17c:	3bdd      	subs	r3, #221	; 0xdd
   1b17e:	4698      	mov	r8, r3
   1b180:	0be8      	lsrs	r0, r5, #15
   1b182:	4480      	add	r8, r0
   1b184:	3078      	adds	r0, #120	; 0x78
   1b186:	00c1      	lsls	r1, r0, #3
   1b188:	e5d7      	b.n	1ad3a <_malloc_r+0x4e>
   1b18a:	2380      	movs	r3, #128	; 0x80
   1b18c:	015b      	lsls	r3, r3, #5
   1b18e:	e6dd      	b.n	1af4c <_malloc_r+0x260>
   1b190:	1089      	asrs	r1, r1, #2
   1b192:	3b02      	subs	r3, #2
   1b194:	408b      	lsls	r3, r1
   1b196:	6872      	ldr	r2, [r6, #4]
   1b198:	4313      	orrs	r3, r2
   1b19a:	6073      	str	r3, [r6, #4]
   1b19c:	4662      	mov	r2, ip
   1b19e:	e757      	b.n	1b050 <_malloc_r+0x364>
   1b1a0:	4b2b      	ldr	r3, [pc, #172]	; (1b250 <_malloc_r+0x564>)
   1b1a2:	4298      	cmp	r0, r3
   1b1a4:	d81c      	bhi.n	1b1e0 <_malloc_r+0x4f4>
   1b1a6:	237c      	movs	r3, #124	; 0x7c
   1b1a8:	4698      	mov	r8, r3
   1b1aa:	0ca8      	lsrs	r0, r5, #18
   1b1ac:	4480      	add	r8, r0
   1b1ae:	307d      	adds	r0, #125	; 0x7d
   1b1b0:	00c1      	lsls	r1, r0, #3
   1b1b2:	e5c2      	b.n	1ad3a <_malloc_r+0x4e>
   1b1b4:	3310      	adds	r3, #16
   1b1b6:	9300      	str	r3, [sp, #0]
   1b1b8:	e699      	b.n	1aeee <_malloc_r+0x202>
   1b1ba:	2a54      	cmp	r2, #84	; 0x54
   1b1bc:	d826      	bhi.n	1b20c <_malloc_r+0x520>
   1b1be:	464b      	mov	r3, r9
   1b1c0:	0b1a      	lsrs	r2, r3, #12
   1b1c2:	0011      	movs	r1, r2
   1b1c4:	326f      	adds	r2, #111	; 0x6f
   1b1c6:	316e      	adds	r1, #110	; 0x6e
   1b1c8:	00d2      	lsls	r2, r2, #3
   1b1ca:	e729      	b.n	1b020 <_malloc_r+0x334>
   1b1cc:	051b      	lsls	r3, r3, #20
   1b1ce:	d000      	beq.n	1b1d2 <_malloc_r+0x4e6>
   1b1d0:	e6a6      	b.n	1af20 <_malloc_r+0x234>
   1b1d2:	2001      	movs	r0, #1
   1b1d4:	9b00      	ldr	r3, [sp, #0]
   1b1d6:	68b2      	ldr	r2, [r6, #8]
   1b1d8:	4443      	add	r3, r8
   1b1da:	4303      	orrs	r3, r0
   1b1dc:	6053      	str	r3, [r2, #4]
   1b1de:	e6e6      	b.n	1afae <_malloc_r+0x2c2>
   1b1e0:	21fe      	movs	r1, #254	; 0xfe
   1b1e2:	237e      	movs	r3, #126	; 0x7e
   1b1e4:	207f      	movs	r0, #127	; 0x7f
   1b1e6:	0089      	lsls	r1, r1, #2
   1b1e8:	4698      	mov	r8, r3
   1b1ea:	e5a6      	b.n	1ad3a <_malloc_r+0x4e>
   1b1ec:	2300      	movs	r3, #0
   1b1ee:	2001      	movs	r0, #1
   1b1f0:	469b      	mov	fp, r3
   1b1f2:	e6bd      	b.n	1af70 <_malloc_r+0x284>
   1b1f4:	0021      	movs	r1, r4
   1b1f6:	0038      	movs	r0, r7
   1b1f8:	3108      	adds	r1, #8
   1b1fa:	f7ff fa59 	bl	1a6b0 <_free_r>
   1b1fe:	4653      	mov	r3, sl
   1b200:	6819      	ldr	r1, [r3, #0]
   1b202:	e6d4      	b.n	1afae <_malloc_r+0x2c2>
   1b204:	465b      	mov	r3, fp
   1b206:	464a      	mov	r2, r9
   1b208:	601a      	str	r2, [r3, #0]
   1b20a:	e694      	b.n	1af36 <_malloc_r+0x24a>
   1b20c:	21aa      	movs	r1, #170	; 0xaa
   1b20e:	0049      	lsls	r1, r1, #1
   1b210:	428a      	cmp	r2, r1
   1b212:	d806      	bhi.n	1b222 <_malloc_r+0x536>
   1b214:	464b      	mov	r3, r9
   1b216:	0bda      	lsrs	r2, r3, #15
   1b218:	0011      	movs	r1, r2
   1b21a:	3278      	adds	r2, #120	; 0x78
   1b21c:	3177      	adds	r1, #119	; 0x77
   1b21e:	00d2      	lsls	r2, r2, #3
   1b220:	e6fe      	b.n	1b020 <_malloc_r+0x334>
   1b222:	490b      	ldr	r1, [pc, #44]	; (1b250 <_malloc_r+0x564>)
   1b224:	428a      	cmp	r2, r1
   1b226:	d806      	bhi.n	1b236 <_malloc_r+0x54a>
   1b228:	464b      	mov	r3, r9
   1b22a:	0c9a      	lsrs	r2, r3, #18
   1b22c:	0011      	movs	r1, r2
   1b22e:	327d      	adds	r2, #125	; 0x7d
   1b230:	317c      	adds	r1, #124	; 0x7c
   1b232:	00d2      	lsls	r2, r2, #3
   1b234:	e6f4      	b.n	1b020 <_malloc_r+0x334>
   1b236:	22fe      	movs	r2, #254	; 0xfe
   1b238:	217e      	movs	r1, #126	; 0x7e
   1b23a:	0092      	lsls	r2, r2, #2
   1b23c:	e6f0      	b.n	1b020 <_malloc_r+0x334>
   1b23e:	6873      	ldr	r3, [r6, #4]
   1b240:	e77e      	b.n	1b140 <_malloc_r+0x454>
   1b242:	002b      	movs	r3, r5
   1b244:	08e8      	lsrs	r0, r5, #3
   1b246:	3308      	adds	r3, #8
   1b248:	e605      	b.n	1ae56 <_malloc_r+0x16a>
   1b24a:	46c0      	nop			; (mov r8, r8)
   1b24c:	20001024 	.word	0x20001024
   1b250:	00000554 	.word	0x00000554

0001b254 <memchr>:
   1b254:	b570      	push	{r4, r5, r6, lr}
   1b256:	b2cd      	uxtb	r5, r1
   1b258:	0783      	lsls	r3, r0, #30
   1b25a:	d034      	beq.n	1b2c6 <memchr+0x72>
   1b25c:	1e54      	subs	r4, r2, #1
   1b25e:	2a00      	cmp	r2, #0
   1b260:	d01b      	beq.n	1b29a <memchr+0x46>
   1b262:	7803      	ldrb	r3, [r0, #0]
   1b264:	42ab      	cmp	r3, r5
   1b266:	d019      	beq.n	1b29c <memchr+0x48>
   1b268:	2203      	movs	r2, #3
   1b26a:	e004      	b.n	1b276 <memchr+0x22>
   1b26c:	3c01      	subs	r4, #1
   1b26e:	d314      	bcc.n	1b29a <memchr+0x46>
   1b270:	7803      	ldrb	r3, [r0, #0]
   1b272:	42ab      	cmp	r3, r5
   1b274:	d012      	beq.n	1b29c <memchr+0x48>
   1b276:	3001      	adds	r0, #1
   1b278:	4210      	tst	r0, r2
   1b27a:	d1f7      	bne.n	1b26c <memchr+0x18>
   1b27c:	2c03      	cmp	r4, #3
   1b27e:	d80e      	bhi.n	1b29e <memchr+0x4a>
   1b280:	2c00      	cmp	r4, #0
   1b282:	d00a      	beq.n	1b29a <memchr+0x46>
   1b284:	7803      	ldrb	r3, [r0, #0]
   1b286:	42ab      	cmp	r3, r5
   1b288:	d008      	beq.n	1b29c <memchr+0x48>
   1b28a:	1904      	adds	r4, r0, r4
   1b28c:	e002      	b.n	1b294 <memchr+0x40>
   1b28e:	7803      	ldrb	r3, [r0, #0]
   1b290:	42ab      	cmp	r3, r5
   1b292:	d003      	beq.n	1b29c <memchr+0x48>
   1b294:	3001      	adds	r0, #1
   1b296:	4284      	cmp	r4, r0
   1b298:	d1f9      	bne.n	1b28e <memchr+0x3a>
   1b29a:	2000      	movs	r0, #0
   1b29c:	bd70      	pop	{r4, r5, r6, pc}
   1b29e:	22ff      	movs	r2, #255	; 0xff
   1b2a0:	060b      	lsls	r3, r1, #24
   1b2a2:	0c1b      	lsrs	r3, r3, #16
   1b2a4:	4011      	ands	r1, r2
   1b2a6:	4319      	orrs	r1, r3
   1b2a8:	040b      	lsls	r3, r1, #16
   1b2aa:	4e08      	ldr	r6, [pc, #32]	; (1b2cc <memchr+0x78>)
   1b2ac:	4319      	orrs	r1, r3
   1b2ae:	6803      	ldr	r3, [r0, #0]
   1b2b0:	4a07      	ldr	r2, [pc, #28]	; (1b2d0 <memchr+0x7c>)
   1b2b2:	404b      	eors	r3, r1
   1b2b4:	189a      	adds	r2, r3, r2
   1b2b6:	439a      	bics	r2, r3
   1b2b8:	4232      	tst	r2, r6
   1b2ba:	d1e3      	bne.n	1b284 <memchr+0x30>
   1b2bc:	3c04      	subs	r4, #4
   1b2be:	3004      	adds	r0, #4
   1b2c0:	2c03      	cmp	r4, #3
   1b2c2:	d8f4      	bhi.n	1b2ae <memchr+0x5a>
   1b2c4:	e7dc      	b.n	1b280 <memchr+0x2c>
   1b2c6:	0014      	movs	r4, r2
   1b2c8:	e7d8      	b.n	1b27c <memchr+0x28>
   1b2ca:	46c0      	nop			; (mov r8, r8)
   1b2cc:	80808080 	.word	0x80808080
   1b2d0:	fefefeff 	.word	0xfefefeff

0001b2d4 <memmove>:
   1b2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b2d6:	4288      	cmp	r0, r1
   1b2d8:	d90a      	bls.n	1b2f0 <memmove+0x1c>
   1b2da:	188b      	adds	r3, r1, r2
   1b2dc:	4298      	cmp	r0, r3
   1b2de:	d207      	bcs.n	1b2f0 <memmove+0x1c>
   1b2e0:	1e53      	subs	r3, r2, #1
   1b2e2:	2a00      	cmp	r2, #0
   1b2e4:	d003      	beq.n	1b2ee <memmove+0x1a>
   1b2e6:	5cca      	ldrb	r2, [r1, r3]
   1b2e8:	54c2      	strb	r2, [r0, r3]
   1b2ea:	3b01      	subs	r3, #1
   1b2ec:	d2fb      	bcs.n	1b2e6 <memmove+0x12>
   1b2ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b2f0:	0005      	movs	r5, r0
   1b2f2:	2a0f      	cmp	r2, #15
   1b2f4:	d808      	bhi.n	1b308 <memmove+0x34>
   1b2f6:	2a00      	cmp	r2, #0
   1b2f8:	d0f9      	beq.n	1b2ee <memmove+0x1a>
   1b2fa:	2300      	movs	r3, #0
   1b2fc:	5ccc      	ldrb	r4, [r1, r3]
   1b2fe:	54ec      	strb	r4, [r5, r3]
   1b300:	3301      	adds	r3, #1
   1b302:	4293      	cmp	r3, r2
   1b304:	d1fa      	bne.n	1b2fc <memmove+0x28>
   1b306:	e7f2      	b.n	1b2ee <memmove+0x1a>
   1b308:	000b      	movs	r3, r1
   1b30a:	4303      	orrs	r3, r0
   1b30c:	079b      	lsls	r3, r3, #30
   1b30e:	d12d      	bne.n	1b36c <memmove+0x98>
   1b310:	0015      	movs	r5, r2
   1b312:	000c      	movs	r4, r1
   1b314:	0003      	movs	r3, r0
   1b316:	3d10      	subs	r5, #16
   1b318:	092f      	lsrs	r7, r5, #4
   1b31a:	3701      	adds	r7, #1
   1b31c:	013f      	lsls	r7, r7, #4
   1b31e:	19c7      	adds	r7, r0, r7
   1b320:	6826      	ldr	r6, [r4, #0]
   1b322:	601e      	str	r6, [r3, #0]
   1b324:	6866      	ldr	r6, [r4, #4]
   1b326:	605e      	str	r6, [r3, #4]
   1b328:	68a6      	ldr	r6, [r4, #8]
   1b32a:	609e      	str	r6, [r3, #8]
   1b32c:	68e6      	ldr	r6, [r4, #12]
   1b32e:	3410      	adds	r4, #16
   1b330:	60de      	str	r6, [r3, #12]
   1b332:	3310      	adds	r3, #16
   1b334:	429f      	cmp	r7, r3
   1b336:	d1f3      	bne.n	1b320 <memmove+0x4c>
   1b338:	240f      	movs	r4, #15
   1b33a:	43a5      	bics	r5, r4
   1b33c:	3510      	adds	r5, #16
   1b33e:	1949      	adds	r1, r1, r5
   1b340:	4014      	ands	r4, r2
   1b342:	1945      	adds	r5, r0, r5
   1b344:	2c03      	cmp	r4, #3
   1b346:	d913      	bls.n	1b370 <memmove+0x9c>
   1b348:	2300      	movs	r3, #0
   1b34a:	1f27      	subs	r7, r4, #4
   1b34c:	08be      	lsrs	r6, r7, #2
   1b34e:	3601      	adds	r6, #1
   1b350:	00b6      	lsls	r6, r6, #2
   1b352:	58cc      	ldr	r4, [r1, r3]
   1b354:	50ec      	str	r4, [r5, r3]
   1b356:	3304      	adds	r3, #4
   1b358:	42b3      	cmp	r3, r6
   1b35a:	d1fa      	bne.n	1b352 <memmove+0x7e>
   1b35c:	2603      	movs	r6, #3
   1b35e:	43b7      	bics	r7, r6
   1b360:	1d3c      	adds	r4, r7, #4
   1b362:	1909      	adds	r1, r1, r4
   1b364:	192d      	adds	r5, r5, r4
   1b366:	4032      	ands	r2, r6
   1b368:	d1c7      	bne.n	1b2fa <memmove+0x26>
   1b36a:	e7c0      	b.n	1b2ee <memmove+0x1a>
   1b36c:	0005      	movs	r5, r0
   1b36e:	e7c4      	b.n	1b2fa <memmove+0x26>
   1b370:	0022      	movs	r2, r4
   1b372:	e7c0      	b.n	1b2f6 <memmove+0x22>

0001b374 <__malloc_lock>:
   1b374:	b510      	push	{r4, lr}
   1b376:	4802      	ldr	r0, [pc, #8]	; (1b380 <__malloc_lock+0xc>)
   1b378:	f7ff fc32 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1b37c:	bd10      	pop	{r4, pc}
   1b37e:	46c0      	nop			; (mov r8, r8)
   1b380:	200027e8 	.word	0x200027e8

0001b384 <__malloc_unlock>:
   1b384:	b510      	push	{r4, lr}
   1b386:	4802      	ldr	r0, [pc, #8]	; (1b390 <__malloc_unlock+0xc>)
   1b388:	f7ff fc2c 	bl	1abe4 <__retarget_lock_release_recursive>
   1b38c:	bd10      	pop	{r4, pc}
   1b38e:	46c0      	nop			; (mov r8, r8)
   1b390:	200027e8 	.word	0x200027e8

0001b394 <_Balloc>:
   1b394:	b570      	push	{r4, r5, r6, lr}
   1b396:	0004      	movs	r4, r0
   1b398:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1b39a:	000d      	movs	r5, r1
   1b39c:	2800      	cmp	r0, #0
   1b39e:	d00a      	beq.n	1b3b6 <_Balloc+0x22>
   1b3a0:	00ab      	lsls	r3, r5, #2
   1b3a2:	18c3      	adds	r3, r0, r3
   1b3a4:	6818      	ldr	r0, [r3, #0]
   1b3a6:	2800      	cmp	r0, #0
   1b3a8:	d00f      	beq.n	1b3ca <_Balloc+0x36>
   1b3aa:	6802      	ldr	r2, [r0, #0]
   1b3ac:	601a      	str	r2, [r3, #0]
   1b3ae:	2300      	movs	r3, #0
   1b3b0:	6103      	str	r3, [r0, #16]
   1b3b2:	60c3      	str	r3, [r0, #12]
   1b3b4:	bd70      	pop	{r4, r5, r6, pc}
   1b3b6:	2221      	movs	r2, #33	; 0x21
   1b3b8:	2104      	movs	r1, #4
   1b3ba:	0020      	movs	r0, r4
   1b3bc:	f000 feba 	bl	1c134 <_calloc_r>
   1b3c0:	64e0      	str	r0, [r4, #76]	; 0x4c
   1b3c2:	2800      	cmp	r0, #0
   1b3c4:	d1ec      	bne.n	1b3a0 <_Balloc+0xc>
   1b3c6:	2000      	movs	r0, #0
   1b3c8:	e7f4      	b.n	1b3b4 <_Balloc+0x20>
   1b3ca:	2601      	movs	r6, #1
   1b3cc:	40ae      	lsls	r6, r5
   1b3ce:	1d72      	adds	r2, r6, #5
   1b3d0:	0092      	lsls	r2, r2, #2
   1b3d2:	2101      	movs	r1, #1
   1b3d4:	0020      	movs	r0, r4
   1b3d6:	f000 fead 	bl	1c134 <_calloc_r>
   1b3da:	2800      	cmp	r0, #0
   1b3dc:	d0f3      	beq.n	1b3c6 <_Balloc+0x32>
   1b3de:	6045      	str	r5, [r0, #4]
   1b3e0:	6086      	str	r6, [r0, #8]
   1b3e2:	e7e4      	b.n	1b3ae <_Balloc+0x1a>

0001b3e4 <_Bfree>:
   1b3e4:	2900      	cmp	r1, #0
   1b3e6:	d006      	beq.n	1b3f6 <_Bfree+0x12>
   1b3e8:	684b      	ldr	r3, [r1, #4]
   1b3ea:	009a      	lsls	r2, r3, #2
   1b3ec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1b3ee:	189b      	adds	r3, r3, r2
   1b3f0:	681a      	ldr	r2, [r3, #0]
   1b3f2:	600a      	str	r2, [r1, #0]
   1b3f4:	6019      	str	r1, [r3, #0]
   1b3f6:	4770      	bx	lr

0001b3f8 <__multadd>:
   1b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b3fa:	46ce      	mov	lr, r9
   1b3fc:	4647      	mov	r7, r8
   1b3fe:	4681      	mov	r9, r0
   1b400:	0008      	movs	r0, r1
   1b402:	b580      	push	{r7, lr}
   1b404:	000d      	movs	r5, r1
   1b406:	690c      	ldr	r4, [r1, #16]
   1b408:	001f      	movs	r7, r3
   1b40a:	2100      	movs	r1, #0
   1b40c:	3014      	adds	r0, #20
   1b40e:	6803      	ldr	r3, [r0, #0]
   1b410:	3101      	adds	r1, #1
   1b412:	041e      	lsls	r6, r3, #16
   1b414:	0c36      	lsrs	r6, r6, #16
   1b416:	4356      	muls	r6, r2
   1b418:	0c1b      	lsrs	r3, r3, #16
   1b41a:	4353      	muls	r3, r2
   1b41c:	19f6      	adds	r6, r6, r7
   1b41e:	0c37      	lsrs	r7, r6, #16
   1b420:	19db      	adds	r3, r3, r7
   1b422:	0436      	lsls	r6, r6, #16
   1b424:	0c1f      	lsrs	r7, r3, #16
   1b426:	0c36      	lsrs	r6, r6, #16
   1b428:	041b      	lsls	r3, r3, #16
   1b42a:	199b      	adds	r3, r3, r6
   1b42c:	c008      	stmia	r0!, {r3}
   1b42e:	428c      	cmp	r4, r1
   1b430:	dced      	bgt.n	1b40e <__multadd+0x16>
   1b432:	2f00      	cmp	r7, #0
   1b434:	d008      	beq.n	1b448 <__multadd+0x50>
   1b436:	68ab      	ldr	r3, [r5, #8]
   1b438:	429c      	cmp	r4, r3
   1b43a:	da0a      	bge.n	1b452 <__multadd+0x5a>
   1b43c:	1d23      	adds	r3, r4, #4
   1b43e:	009b      	lsls	r3, r3, #2
   1b440:	18eb      	adds	r3, r5, r3
   1b442:	3401      	adds	r4, #1
   1b444:	605f      	str	r7, [r3, #4]
   1b446:	612c      	str	r4, [r5, #16]
   1b448:	0028      	movs	r0, r5
   1b44a:	bc0c      	pop	{r2, r3}
   1b44c:	4690      	mov	r8, r2
   1b44e:	4699      	mov	r9, r3
   1b450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b452:	686b      	ldr	r3, [r5, #4]
   1b454:	4648      	mov	r0, r9
   1b456:	1c59      	adds	r1, r3, #1
   1b458:	f7ff ff9c 	bl	1b394 <_Balloc>
   1b45c:	0029      	movs	r1, r5
   1b45e:	692b      	ldr	r3, [r5, #16]
   1b460:	4680      	mov	r8, r0
   1b462:	1c9a      	adds	r2, r3, #2
   1b464:	0092      	lsls	r2, r2, #2
   1b466:	310c      	adds	r1, #12
   1b468:	300c      	adds	r0, #12
   1b46a:	f7fa fd6b 	bl	15f44 <memcpy>
   1b46e:	686b      	ldr	r3, [r5, #4]
   1b470:	009a      	lsls	r2, r3, #2
   1b472:	464b      	mov	r3, r9
   1b474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b476:	189b      	adds	r3, r3, r2
   1b478:	681a      	ldr	r2, [r3, #0]
   1b47a:	602a      	str	r2, [r5, #0]
   1b47c:	601d      	str	r5, [r3, #0]
   1b47e:	4645      	mov	r5, r8
   1b480:	e7dc      	b.n	1b43c <__multadd+0x44>
   1b482:	46c0      	nop			; (mov r8, r8)

0001b484 <__hi0bits>:
   1b484:	0003      	movs	r3, r0
   1b486:	0c02      	lsrs	r2, r0, #16
   1b488:	2000      	movs	r0, #0
   1b48a:	2a00      	cmp	r2, #0
   1b48c:	d101      	bne.n	1b492 <__hi0bits+0xe>
   1b48e:	041b      	lsls	r3, r3, #16
   1b490:	3010      	adds	r0, #16
   1b492:	0e1a      	lsrs	r2, r3, #24
   1b494:	d101      	bne.n	1b49a <__hi0bits+0x16>
   1b496:	3008      	adds	r0, #8
   1b498:	021b      	lsls	r3, r3, #8
   1b49a:	0f1a      	lsrs	r2, r3, #28
   1b49c:	d101      	bne.n	1b4a2 <__hi0bits+0x1e>
   1b49e:	3004      	adds	r0, #4
   1b4a0:	011b      	lsls	r3, r3, #4
   1b4a2:	0f9a      	lsrs	r2, r3, #30
   1b4a4:	d101      	bne.n	1b4aa <__hi0bits+0x26>
   1b4a6:	3002      	adds	r0, #2
   1b4a8:	009b      	lsls	r3, r3, #2
   1b4aa:	2b00      	cmp	r3, #0
   1b4ac:	db03      	blt.n	1b4b6 <__hi0bits+0x32>
   1b4ae:	3001      	adds	r0, #1
   1b4b0:	005b      	lsls	r3, r3, #1
   1b4b2:	d400      	bmi.n	1b4b6 <__hi0bits+0x32>
   1b4b4:	2020      	movs	r0, #32
   1b4b6:	4770      	bx	lr

0001b4b8 <__lo0bits>:
   1b4b8:	6803      	ldr	r3, [r0, #0]
   1b4ba:	075a      	lsls	r2, r3, #29
   1b4bc:	d009      	beq.n	1b4d2 <__lo0bits+0x1a>
   1b4be:	2200      	movs	r2, #0
   1b4c0:	07d9      	lsls	r1, r3, #31
   1b4c2:	d404      	bmi.n	1b4ce <__lo0bits+0x16>
   1b4c4:	079a      	lsls	r2, r3, #30
   1b4c6:	d420      	bmi.n	1b50a <__lo0bits+0x52>
   1b4c8:	2202      	movs	r2, #2
   1b4ca:	089b      	lsrs	r3, r3, #2
   1b4cc:	6003      	str	r3, [r0, #0]
   1b4ce:	0010      	movs	r0, r2
   1b4d0:	4770      	bx	lr
   1b4d2:	0419      	lsls	r1, r3, #16
   1b4d4:	2200      	movs	r2, #0
   1b4d6:	2900      	cmp	r1, #0
   1b4d8:	d101      	bne.n	1b4de <__lo0bits+0x26>
   1b4da:	0c1b      	lsrs	r3, r3, #16
   1b4dc:	3210      	adds	r2, #16
   1b4de:	21ff      	movs	r1, #255	; 0xff
   1b4e0:	4219      	tst	r1, r3
   1b4e2:	d101      	bne.n	1b4e8 <__lo0bits+0x30>
   1b4e4:	3208      	adds	r2, #8
   1b4e6:	0a1b      	lsrs	r3, r3, #8
   1b4e8:	0719      	lsls	r1, r3, #28
   1b4ea:	d101      	bne.n	1b4f0 <__lo0bits+0x38>
   1b4ec:	3204      	adds	r2, #4
   1b4ee:	091b      	lsrs	r3, r3, #4
   1b4f0:	0799      	lsls	r1, r3, #30
   1b4f2:	d101      	bne.n	1b4f8 <__lo0bits+0x40>
   1b4f4:	3202      	adds	r2, #2
   1b4f6:	089b      	lsrs	r3, r3, #2
   1b4f8:	07d9      	lsls	r1, r3, #31
   1b4fa:	d404      	bmi.n	1b506 <__lo0bits+0x4e>
   1b4fc:	085b      	lsrs	r3, r3, #1
   1b4fe:	d101      	bne.n	1b504 <__lo0bits+0x4c>
   1b500:	2220      	movs	r2, #32
   1b502:	e7e4      	b.n	1b4ce <__lo0bits+0x16>
   1b504:	3201      	adds	r2, #1
   1b506:	6003      	str	r3, [r0, #0]
   1b508:	e7e1      	b.n	1b4ce <__lo0bits+0x16>
   1b50a:	085b      	lsrs	r3, r3, #1
   1b50c:	6003      	str	r3, [r0, #0]
   1b50e:	2201      	movs	r2, #1
   1b510:	e7dd      	b.n	1b4ce <__lo0bits+0x16>
   1b512:	46c0      	nop			; (mov r8, r8)

0001b514 <__i2b>:
   1b514:	b510      	push	{r4, lr}
   1b516:	000c      	movs	r4, r1
   1b518:	2101      	movs	r1, #1
   1b51a:	f7ff ff3b 	bl	1b394 <_Balloc>
   1b51e:	2301      	movs	r3, #1
   1b520:	6144      	str	r4, [r0, #20]
   1b522:	6103      	str	r3, [r0, #16]
   1b524:	bd10      	pop	{r4, pc}
   1b526:	46c0      	nop			; (mov r8, r8)

0001b528 <__multiply>:
   1b528:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b52a:	4657      	mov	r7, sl
   1b52c:	464e      	mov	r6, r9
   1b52e:	4645      	mov	r5, r8
   1b530:	46de      	mov	lr, fp
   1b532:	b5e0      	push	{r5, r6, r7, lr}
   1b534:	6914      	ldr	r4, [r2, #16]
   1b536:	690e      	ldr	r6, [r1, #16]
   1b538:	b085      	sub	sp, #20
   1b53a:	000f      	movs	r7, r1
   1b53c:	0015      	movs	r5, r2
   1b53e:	42a6      	cmp	r6, r4
   1b540:	da04      	bge.n	1b54c <__multiply+0x24>
   1b542:	0033      	movs	r3, r6
   1b544:	0017      	movs	r7, r2
   1b546:	0026      	movs	r6, r4
   1b548:	000d      	movs	r5, r1
   1b54a:	001c      	movs	r4, r3
   1b54c:	1933      	adds	r3, r6, r4
   1b54e:	4698      	mov	r8, r3
   1b550:	68bb      	ldr	r3, [r7, #8]
   1b552:	6879      	ldr	r1, [r7, #4]
   1b554:	4598      	cmp	r8, r3
   1b556:	dd00      	ble.n	1b55a <__multiply+0x32>
   1b558:	3101      	adds	r1, #1
   1b55a:	f7ff ff1b 	bl	1b394 <_Balloc>
   1b55e:	2214      	movs	r2, #20
   1b560:	0003      	movs	r3, r0
   1b562:	4694      	mov	ip, r2
   1b564:	4463      	add	r3, ip
   1b566:	469b      	mov	fp, r3
   1b568:	4643      	mov	r3, r8
   1b56a:	009b      	lsls	r3, r3, #2
   1b56c:	445b      	add	r3, fp
   1b56e:	0019      	movs	r1, r3
   1b570:	9302      	str	r3, [sp, #8]
   1b572:	9003      	str	r0, [sp, #12]
   1b574:	465b      	mov	r3, fp
   1b576:	2200      	movs	r2, #0
   1b578:	458b      	cmp	fp, r1
   1b57a:	d203      	bcs.n	1b584 <__multiply+0x5c>
   1b57c:	9902      	ldr	r1, [sp, #8]
   1b57e:	c304      	stmia	r3!, {r2}
   1b580:	4299      	cmp	r1, r3
   1b582:	d8fc      	bhi.n	1b57e <__multiply+0x56>
   1b584:	2314      	movs	r3, #20
   1b586:	00a4      	lsls	r4, r4, #2
   1b588:	469a      	mov	sl, r3
   1b58a:	3714      	adds	r7, #20
   1b58c:	0023      	movs	r3, r4
   1b58e:	46bc      	mov	ip, r7
   1b590:	44aa      	add	sl, r5
   1b592:	00b6      	lsls	r6, r6, #2
   1b594:	4453      	add	r3, sl
   1b596:	9700      	str	r7, [sp, #0]
   1b598:	44b4      	add	ip, r6
   1b59a:	9301      	str	r3, [sp, #4]
   1b59c:	459a      	cmp	sl, r3
   1b59e:	d24f      	bcs.n	1b640 <__multiply+0x118>
   1b5a0:	4653      	mov	r3, sl
   1b5a2:	681b      	ldr	r3, [r3, #0]
   1b5a4:	041e      	lsls	r6, r3, #16
   1b5a6:	0c36      	lsrs	r6, r6, #16
   1b5a8:	d020      	beq.n	1b5ec <__multiply+0xc4>
   1b5aa:	465c      	mov	r4, fp
   1b5ac:	2700      	movs	r7, #0
   1b5ae:	9d00      	ldr	r5, [sp, #0]
   1b5b0:	0021      	movs	r1, r4
   1b5b2:	cc08      	ldmia	r4!, {r3}
   1b5b4:	cd04      	ldmia	r5!, {r2}
   1b5b6:	4699      	mov	r9, r3
   1b5b8:	4648      	mov	r0, r9
   1b5ba:	0413      	lsls	r3, r2, #16
   1b5bc:	0c1b      	lsrs	r3, r3, #16
   1b5be:	4373      	muls	r3, r6
   1b5c0:	0400      	lsls	r0, r0, #16
   1b5c2:	0c00      	lsrs	r0, r0, #16
   1b5c4:	181b      	adds	r3, r3, r0
   1b5c6:	19d8      	adds	r0, r3, r7
   1b5c8:	0c13      	lsrs	r3, r2, #16
   1b5ca:	464a      	mov	r2, r9
   1b5cc:	4373      	muls	r3, r6
   1b5ce:	0c12      	lsrs	r2, r2, #16
   1b5d0:	189b      	adds	r3, r3, r2
   1b5d2:	0c02      	lsrs	r2, r0, #16
   1b5d4:	189b      	adds	r3, r3, r2
   1b5d6:	0402      	lsls	r2, r0, #16
   1b5d8:	0c1f      	lsrs	r7, r3, #16
   1b5da:	0c12      	lsrs	r2, r2, #16
   1b5dc:	041b      	lsls	r3, r3, #16
   1b5de:	4313      	orrs	r3, r2
   1b5e0:	600b      	str	r3, [r1, #0]
   1b5e2:	45ac      	cmp	ip, r5
   1b5e4:	d8e4      	bhi.n	1b5b0 <__multiply+0x88>
   1b5e6:	4653      	mov	r3, sl
   1b5e8:	6027      	str	r7, [r4, #0]
   1b5ea:	681b      	ldr	r3, [r3, #0]
   1b5ec:	0c1e      	lsrs	r6, r3, #16
   1b5ee:	d020      	beq.n	1b632 <__multiply+0x10a>
   1b5f0:	465b      	mov	r3, fp
   1b5f2:	2100      	movs	r1, #0
   1b5f4:	681b      	ldr	r3, [r3, #0]
   1b5f6:	465c      	mov	r4, fp
   1b5f8:	0018      	movs	r0, r3
   1b5fa:	000f      	movs	r7, r1
   1b5fc:	4662      	mov	r2, ip
   1b5fe:	9d00      	ldr	r5, [sp, #0]
   1b600:	8829      	ldrh	r1, [r5, #0]
   1b602:	0c00      	lsrs	r0, r0, #16
   1b604:	4371      	muls	r1, r6
   1b606:	1809      	adds	r1, r1, r0
   1b608:	19c9      	adds	r1, r1, r7
   1b60a:	041b      	lsls	r3, r3, #16
   1b60c:	0408      	lsls	r0, r1, #16
   1b60e:	0c1b      	lsrs	r3, r3, #16
   1b610:	4303      	orrs	r3, r0
   1b612:	6023      	str	r3, [r4, #0]
   1b614:	cd08      	ldmia	r5!, {r3}
   1b616:	6860      	ldr	r0, [r4, #4]
   1b618:	0c1b      	lsrs	r3, r3, #16
   1b61a:	4373      	muls	r3, r6
   1b61c:	0407      	lsls	r7, r0, #16
   1b61e:	0c3f      	lsrs	r7, r7, #16
   1b620:	19db      	adds	r3, r3, r7
   1b622:	0c09      	lsrs	r1, r1, #16
   1b624:	185b      	adds	r3, r3, r1
   1b626:	0c1f      	lsrs	r7, r3, #16
   1b628:	3404      	adds	r4, #4
   1b62a:	42aa      	cmp	r2, r5
   1b62c:	d8e8      	bhi.n	1b600 <__multiply+0xd8>
   1b62e:	4694      	mov	ip, r2
   1b630:	6023      	str	r3, [r4, #0]
   1b632:	2304      	movs	r3, #4
   1b634:	4699      	mov	r9, r3
   1b636:	9b01      	ldr	r3, [sp, #4]
   1b638:	44ca      	add	sl, r9
   1b63a:	44cb      	add	fp, r9
   1b63c:	4553      	cmp	r3, sl
   1b63e:	d8af      	bhi.n	1b5a0 <__multiply+0x78>
   1b640:	4643      	mov	r3, r8
   1b642:	2b00      	cmp	r3, #0
   1b644:	dd0e      	ble.n	1b664 <__multiply+0x13c>
   1b646:	9b02      	ldr	r3, [sp, #8]
   1b648:	3b04      	subs	r3, #4
   1b64a:	681a      	ldr	r2, [r3, #0]
   1b64c:	2a00      	cmp	r2, #0
   1b64e:	d109      	bne.n	1b664 <__multiply+0x13c>
   1b650:	4642      	mov	r2, r8
   1b652:	e003      	b.n	1b65c <__multiply+0x134>
   1b654:	3b04      	subs	r3, #4
   1b656:	6819      	ldr	r1, [r3, #0]
   1b658:	2900      	cmp	r1, #0
   1b65a:	d102      	bne.n	1b662 <__multiply+0x13a>
   1b65c:	3a01      	subs	r2, #1
   1b65e:	2a00      	cmp	r2, #0
   1b660:	d1f8      	bne.n	1b654 <__multiply+0x12c>
   1b662:	4690      	mov	r8, r2
   1b664:	9b03      	ldr	r3, [sp, #12]
   1b666:	4642      	mov	r2, r8
   1b668:	0018      	movs	r0, r3
   1b66a:	611a      	str	r2, [r3, #16]
   1b66c:	b005      	add	sp, #20
   1b66e:	bc3c      	pop	{r2, r3, r4, r5}
   1b670:	4690      	mov	r8, r2
   1b672:	4699      	mov	r9, r3
   1b674:	46a2      	mov	sl, r4
   1b676:	46ab      	mov	fp, r5
   1b678:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b67a:	46c0      	nop			; (mov r8, r8)

0001b67c <__pow5mult>:
   1b67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b67e:	4647      	mov	r7, r8
   1b680:	46ce      	mov	lr, r9
   1b682:	2303      	movs	r3, #3
   1b684:	b580      	push	{r7, lr}
   1b686:	4680      	mov	r8, r0
   1b688:	000f      	movs	r7, r1
   1b68a:	0014      	movs	r4, r2
   1b68c:	4013      	ands	r3, r2
   1b68e:	d13a      	bne.n	1b706 <__pow5mult+0x8a>
   1b690:	10a4      	asrs	r4, r4, #2
   1b692:	003e      	movs	r6, r7
   1b694:	2c00      	cmp	r4, #0
   1b696:	d025      	beq.n	1b6e4 <__pow5mult+0x68>
   1b698:	4643      	mov	r3, r8
   1b69a:	6c9d      	ldr	r5, [r3, #72]	; 0x48
   1b69c:	2d00      	cmp	r5, #0
   1b69e:	d03b      	beq.n	1b718 <__pow5mult+0x9c>
   1b6a0:	003e      	movs	r6, r7
   1b6a2:	2300      	movs	r3, #0
   1b6a4:	2701      	movs	r7, #1
   1b6a6:	4699      	mov	r9, r3
   1b6a8:	4227      	tst	r7, r4
   1b6aa:	d107      	bne.n	1b6bc <__pow5mult+0x40>
   1b6ac:	1064      	asrs	r4, r4, #1
   1b6ae:	d019      	beq.n	1b6e4 <__pow5mult+0x68>
   1b6b0:	6828      	ldr	r0, [r5, #0]
   1b6b2:	2800      	cmp	r0, #0
   1b6b4:	d01b      	beq.n	1b6ee <__pow5mult+0x72>
   1b6b6:	0005      	movs	r5, r0
   1b6b8:	4227      	tst	r7, r4
   1b6ba:	d0f7      	beq.n	1b6ac <__pow5mult+0x30>
   1b6bc:	002a      	movs	r2, r5
   1b6be:	0031      	movs	r1, r6
   1b6c0:	4640      	mov	r0, r8
   1b6c2:	f7ff ff31 	bl	1b528 <__multiply>
   1b6c6:	2e00      	cmp	r6, #0
   1b6c8:	d01b      	beq.n	1b702 <__pow5mult+0x86>
   1b6ca:	4642      	mov	r2, r8
   1b6cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1b6ce:	6873      	ldr	r3, [r6, #4]
   1b6d0:	4694      	mov	ip, r2
   1b6d2:	009b      	lsls	r3, r3, #2
   1b6d4:	4463      	add	r3, ip
   1b6d6:	681a      	ldr	r2, [r3, #0]
   1b6d8:	1064      	asrs	r4, r4, #1
   1b6da:	6032      	str	r2, [r6, #0]
   1b6dc:	601e      	str	r6, [r3, #0]
   1b6de:	0006      	movs	r6, r0
   1b6e0:	2c00      	cmp	r4, #0
   1b6e2:	d1e5      	bne.n	1b6b0 <__pow5mult+0x34>
   1b6e4:	0030      	movs	r0, r6
   1b6e6:	bc0c      	pop	{r2, r3}
   1b6e8:	4690      	mov	r8, r2
   1b6ea:	4699      	mov	r9, r3
   1b6ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b6ee:	002a      	movs	r2, r5
   1b6f0:	0029      	movs	r1, r5
   1b6f2:	4640      	mov	r0, r8
   1b6f4:	f7ff ff18 	bl	1b528 <__multiply>
   1b6f8:	464b      	mov	r3, r9
   1b6fa:	6028      	str	r0, [r5, #0]
   1b6fc:	6003      	str	r3, [r0, #0]
   1b6fe:	0005      	movs	r5, r0
   1b700:	e7da      	b.n	1b6b8 <__pow5mult+0x3c>
   1b702:	0006      	movs	r6, r0
   1b704:	e7d2      	b.n	1b6ac <__pow5mult+0x30>
   1b706:	4a0b      	ldr	r2, [pc, #44]	; (1b734 <__pow5mult+0xb8>)
   1b708:	3b01      	subs	r3, #1
   1b70a:	009b      	lsls	r3, r3, #2
   1b70c:	589a      	ldr	r2, [r3, r2]
   1b70e:	2300      	movs	r3, #0
   1b710:	f7ff fe72 	bl	1b3f8 <__multadd>
   1b714:	0007      	movs	r7, r0
   1b716:	e7bb      	b.n	1b690 <__pow5mult+0x14>
   1b718:	2101      	movs	r1, #1
   1b71a:	4640      	mov	r0, r8
   1b71c:	f7ff fe3a 	bl	1b394 <_Balloc>
   1b720:	4b05      	ldr	r3, [pc, #20]	; (1b738 <__pow5mult+0xbc>)
   1b722:	0005      	movs	r5, r0
   1b724:	6143      	str	r3, [r0, #20]
   1b726:	2301      	movs	r3, #1
   1b728:	6103      	str	r3, [r0, #16]
   1b72a:	4643      	mov	r3, r8
   1b72c:	6498      	str	r0, [r3, #72]	; 0x48
   1b72e:	2300      	movs	r3, #0
   1b730:	6003      	str	r3, [r0, #0]
   1b732:	e7b5      	b.n	1b6a0 <__pow5mult+0x24>
   1b734:	0001e328 	.word	0x0001e328
   1b738:	00000271 	.word	0x00000271

0001b73c <__lshift>:
   1b73c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b73e:	464e      	mov	r6, r9
   1b740:	4645      	mov	r5, r8
   1b742:	46de      	mov	lr, fp
   1b744:	4657      	mov	r7, sl
   1b746:	b5e0      	push	{r5, r6, r7, lr}
   1b748:	000e      	movs	r6, r1
   1b74a:	6933      	ldr	r3, [r6, #16]
   1b74c:	1154      	asrs	r4, r2, #5
   1b74e:	4698      	mov	r8, r3
   1b750:	44a0      	add	r8, r4
   1b752:	4643      	mov	r3, r8
   1b754:	1c5d      	adds	r5, r3, #1
   1b756:	68b3      	ldr	r3, [r6, #8]
   1b758:	4683      	mov	fp, r0
   1b75a:	4691      	mov	r9, r2
   1b75c:	6849      	ldr	r1, [r1, #4]
   1b75e:	429d      	cmp	r5, r3
   1b760:	dd03      	ble.n	1b76a <__lshift+0x2e>
   1b762:	3101      	adds	r1, #1
   1b764:	005b      	lsls	r3, r3, #1
   1b766:	429d      	cmp	r5, r3
   1b768:	dcfb      	bgt.n	1b762 <__lshift+0x26>
   1b76a:	4658      	mov	r0, fp
   1b76c:	f7ff fe12 	bl	1b394 <_Balloc>
   1b770:	0003      	movs	r3, r0
   1b772:	4684      	mov	ip, r0
   1b774:	3314      	adds	r3, #20
   1b776:	2c00      	cmp	r4, #0
   1b778:	dd06      	ble.n	1b788 <__lshift+0x4c>
   1b77a:	2100      	movs	r1, #0
   1b77c:	00a4      	lsls	r4, r4, #2
   1b77e:	001a      	movs	r2, r3
   1b780:	191b      	adds	r3, r3, r4
   1b782:	c202      	stmia	r2!, {r1}
   1b784:	4293      	cmp	r3, r2
   1b786:	d1fc      	bne.n	1b782 <__lshift+0x46>
   1b788:	6932      	ldr	r2, [r6, #16]
   1b78a:	4648      	mov	r0, r9
   1b78c:	0097      	lsls	r7, r2, #2
   1b78e:	0031      	movs	r1, r6
   1b790:	221f      	movs	r2, #31
   1b792:	3114      	adds	r1, #20
   1b794:	4010      	ands	r0, r2
   1b796:	19cf      	adds	r7, r1, r7
   1b798:	4681      	mov	r9, r0
   1b79a:	2800      	cmp	r0, #0
   1b79c:	d025      	beq.n	1b7ea <__lshift+0xae>
   1b79e:	2220      	movs	r2, #32
   1b7a0:	1a12      	subs	r2, r2, r0
   1b7a2:	4692      	mov	sl, r2
   1b7a4:	2200      	movs	r2, #0
   1b7a6:	4648      	mov	r0, r9
   1b7a8:	680c      	ldr	r4, [r1, #0]
   1b7aa:	4084      	lsls	r4, r0
   1b7ac:	4650      	mov	r0, sl
   1b7ae:	4314      	orrs	r4, r2
   1b7b0:	601c      	str	r4, [r3, #0]
   1b7b2:	c904      	ldmia	r1!, {r2}
   1b7b4:	3304      	adds	r3, #4
   1b7b6:	40c2      	lsrs	r2, r0
   1b7b8:	428f      	cmp	r7, r1
   1b7ba:	d8f4      	bhi.n	1b7a6 <__lshift+0x6a>
   1b7bc:	601a      	str	r2, [r3, #0]
   1b7be:	2a00      	cmp	r2, #0
   1b7c0:	d001      	beq.n	1b7c6 <__lshift+0x8a>
   1b7c2:	4645      	mov	r5, r8
   1b7c4:	3502      	adds	r5, #2
   1b7c6:	4663      	mov	r3, ip
   1b7c8:	3d01      	subs	r5, #1
   1b7ca:	611d      	str	r5, [r3, #16]
   1b7cc:	6873      	ldr	r3, [r6, #4]
   1b7ce:	4660      	mov	r0, ip
   1b7d0:	009a      	lsls	r2, r3, #2
   1b7d2:	465b      	mov	r3, fp
   1b7d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1b7d6:	189b      	adds	r3, r3, r2
   1b7d8:	681a      	ldr	r2, [r3, #0]
   1b7da:	6032      	str	r2, [r6, #0]
   1b7dc:	601e      	str	r6, [r3, #0]
   1b7de:	bc3c      	pop	{r2, r3, r4, r5}
   1b7e0:	4690      	mov	r8, r2
   1b7e2:	4699      	mov	r9, r3
   1b7e4:	46a2      	mov	sl, r4
   1b7e6:	46ab      	mov	fp, r5
   1b7e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b7ea:	c904      	ldmia	r1!, {r2}
   1b7ec:	c304      	stmia	r3!, {r2}
   1b7ee:	428f      	cmp	r7, r1
   1b7f0:	d9e9      	bls.n	1b7c6 <__lshift+0x8a>
   1b7f2:	c904      	ldmia	r1!, {r2}
   1b7f4:	c304      	stmia	r3!, {r2}
   1b7f6:	428f      	cmp	r7, r1
   1b7f8:	d8f7      	bhi.n	1b7ea <__lshift+0xae>
   1b7fa:	e7e4      	b.n	1b7c6 <__lshift+0x8a>

0001b7fc <__mcmp>:
   1b7fc:	690a      	ldr	r2, [r1, #16]
   1b7fe:	6903      	ldr	r3, [r0, #16]
   1b800:	b530      	push	{r4, r5, lr}
   1b802:	0005      	movs	r5, r0
   1b804:	1a98      	subs	r0, r3, r2
   1b806:	d111      	bne.n	1b82c <__mcmp+0x30>
   1b808:	0092      	lsls	r2, r2, #2
   1b80a:	3514      	adds	r5, #20
   1b80c:	3114      	adds	r1, #20
   1b80e:	18ab      	adds	r3, r5, r2
   1b810:	1889      	adds	r1, r1, r2
   1b812:	e001      	b.n	1b818 <__mcmp+0x1c>
   1b814:	429d      	cmp	r5, r3
   1b816:	d209      	bcs.n	1b82c <__mcmp+0x30>
   1b818:	3b04      	subs	r3, #4
   1b81a:	3904      	subs	r1, #4
   1b81c:	681c      	ldr	r4, [r3, #0]
   1b81e:	680a      	ldr	r2, [r1, #0]
   1b820:	4294      	cmp	r4, r2
   1b822:	d0f7      	beq.n	1b814 <__mcmp+0x18>
   1b824:	4294      	cmp	r4, r2
   1b826:	4180      	sbcs	r0, r0
   1b828:	2201      	movs	r2, #1
   1b82a:	4310      	orrs	r0, r2
   1b82c:	bd30      	pop	{r4, r5, pc}
   1b82e:	46c0      	nop			; (mov r8, r8)

0001b830 <__mdiff>:
   1b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b832:	4645      	mov	r5, r8
   1b834:	46de      	mov	lr, fp
   1b836:	4657      	mov	r7, sl
   1b838:	464e      	mov	r6, r9
   1b83a:	0014      	movs	r4, r2
   1b83c:	690b      	ldr	r3, [r1, #16]
   1b83e:	6912      	ldr	r2, [r2, #16]
   1b840:	b5e0      	push	{r5, r6, r7, lr}
   1b842:	4688      	mov	r8, r1
   1b844:	1a9d      	subs	r5, r3, r2
   1b846:	d11a      	bne.n	1b87e <__mdiff+0x4e>
   1b848:	000f      	movs	r7, r1
   1b84a:	2114      	movs	r1, #20
   1b84c:	468c      	mov	ip, r1
   1b84e:	0092      	lsls	r2, r2, #2
   1b850:	3714      	adds	r7, #20
   1b852:	44a4      	add	ip, r4
   1b854:	18bb      	adds	r3, r7, r2
   1b856:	4462      	add	r2, ip
   1b858:	e002      	b.n	1b860 <__mdiff+0x30>
   1b85a:	429f      	cmp	r7, r3
   1b85c:	d300      	bcc.n	1b860 <__mdiff+0x30>
   1b85e:	e070      	b.n	1b942 <__mdiff+0x112>
   1b860:	3b04      	subs	r3, #4
   1b862:	3a04      	subs	r2, #4
   1b864:	681e      	ldr	r6, [r3, #0]
   1b866:	6811      	ldr	r1, [r2, #0]
   1b868:	428e      	cmp	r6, r1
   1b86a:	d0f6      	beq.n	1b85a <__mdiff+0x2a>
   1b86c:	d300      	bcc.n	1b870 <__mdiff+0x40>
   1b86e:	e071      	b.n	1b954 <__mdiff+0x124>
   1b870:	4643      	mov	r3, r8
   1b872:	003e      	movs	r6, r7
   1b874:	46a0      	mov	r8, r4
   1b876:	4667      	mov	r7, ip
   1b878:	001c      	movs	r4, r3
   1b87a:	2501      	movs	r5, #1
   1b87c:	e006      	b.n	1b88c <__mdiff+0x5c>
   1b87e:	2d00      	cmp	r5, #0
   1b880:	db6a      	blt.n	1b958 <__mdiff+0x128>
   1b882:	4647      	mov	r7, r8
   1b884:	0026      	movs	r6, r4
   1b886:	2500      	movs	r5, #0
   1b888:	3714      	adds	r7, #20
   1b88a:	3614      	adds	r6, #20
   1b88c:	4643      	mov	r3, r8
   1b88e:	6859      	ldr	r1, [r3, #4]
   1b890:	f7ff fd80 	bl	1b394 <_Balloc>
   1b894:	4643      	mov	r3, r8
   1b896:	4681      	mov	r9, r0
   1b898:	60c5      	str	r5, [r0, #12]
   1b89a:	6918      	ldr	r0, [r3, #16]
   1b89c:	464d      	mov	r5, r9
   1b89e:	0083      	lsls	r3, r0, #2
   1b8a0:	469c      	mov	ip, r3
   1b8a2:	6923      	ldr	r3, [r4, #16]
   1b8a4:	44bc      	add	ip, r7
   1b8a6:	009b      	lsls	r3, r3, #2
   1b8a8:	4698      	mov	r8, r3
   1b8aa:	2300      	movs	r3, #0
   1b8ac:	44b0      	add	r8, r6
   1b8ae:	3514      	adds	r5, #20
   1b8b0:	469a      	mov	sl, r3
   1b8b2:	e000      	b.n	1b8b6 <__mdiff+0x86>
   1b8b4:	0027      	movs	r7, r4
   1b8b6:	ce04      	ldmia	r6!, {r2}
   1b8b8:	003c      	movs	r4, r7
   1b8ba:	4693      	mov	fp, r2
   1b8bc:	4659      	mov	r1, fp
   1b8be:	cc08      	ldmia	r4!, {r3}
   1b8c0:	0409      	lsls	r1, r1, #16
   1b8c2:	041a      	lsls	r2, r3, #16
   1b8c4:	0c12      	lsrs	r2, r2, #16
   1b8c6:	4452      	add	r2, sl
   1b8c8:	0c09      	lsrs	r1, r1, #16
   1b8ca:	1a52      	subs	r2, r2, r1
   1b8cc:	0c19      	lsrs	r1, r3, #16
   1b8ce:	465b      	mov	r3, fp
   1b8d0:	0c1b      	lsrs	r3, r3, #16
   1b8d2:	1acb      	subs	r3, r1, r3
   1b8d4:	1411      	asrs	r1, r2, #16
   1b8d6:	185b      	adds	r3, r3, r1
   1b8d8:	0412      	lsls	r2, r2, #16
   1b8da:	1419      	asrs	r1, r3, #16
   1b8dc:	0c12      	lsrs	r2, r2, #16
   1b8de:	041b      	lsls	r3, r3, #16
   1b8e0:	468a      	mov	sl, r1
   1b8e2:	4313      	orrs	r3, r2
   1b8e4:	1d29      	adds	r1, r5, #4
   1b8e6:	602b      	str	r3, [r5, #0]
   1b8e8:	000d      	movs	r5, r1
   1b8ea:	45b0      	cmp	r8, r6
   1b8ec:	d8e2      	bhi.n	1b8b4 <__mdiff+0x84>
   1b8ee:	45a4      	cmp	ip, r4
   1b8f0:	d916      	bls.n	1b920 <__mdiff+0xf0>
   1b8f2:	cc08      	ldmia	r4!, {r3}
   1b8f4:	041a      	lsls	r2, r3, #16
   1b8f6:	0c12      	lsrs	r2, r2, #16
   1b8f8:	4452      	add	r2, sl
   1b8fa:	1416      	asrs	r6, r2, #16
   1b8fc:	0c1b      	lsrs	r3, r3, #16
   1b8fe:	199b      	adds	r3, r3, r6
   1b900:	0412      	lsls	r2, r2, #16
   1b902:	141e      	asrs	r6, r3, #16
   1b904:	0c12      	lsrs	r2, r2, #16
   1b906:	041b      	lsls	r3, r3, #16
   1b908:	4313      	orrs	r3, r2
   1b90a:	46b2      	mov	sl, r6
   1b90c:	c508      	stmia	r5!, {r3}
   1b90e:	45a4      	cmp	ip, r4
   1b910:	d8ef      	bhi.n	1b8f2 <__mdiff+0xc2>
   1b912:	4662      	mov	r2, ip
   1b914:	2403      	movs	r4, #3
   1b916:	1bd2      	subs	r2, r2, r7
   1b918:	3a05      	subs	r2, #5
   1b91a:	43a2      	bics	r2, r4
   1b91c:	3204      	adds	r2, #4
   1b91e:	1889      	adds	r1, r1, r2
   1b920:	3904      	subs	r1, #4
   1b922:	2b00      	cmp	r3, #0
   1b924:	d104      	bne.n	1b930 <__mdiff+0x100>
   1b926:	3904      	subs	r1, #4
   1b928:	680b      	ldr	r3, [r1, #0]
   1b92a:	3801      	subs	r0, #1
   1b92c:	2b00      	cmp	r3, #0
   1b92e:	d0fa      	beq.n	1b926 <__mdiff+0xf6>
   1b930:	464b      	mov	r3, r9
   1b932:	6118      	str	r0, [r3, #16]
   1b934:	4648      	mov	r0, r9
   1b936:	bc3c      	pop	{r2, r3, r4, r5}
   1b938:	4690      	mov	r8, r2
   1b93a:	4699      	mov	r9, r3
   1b93c:	46a2      	mov	sl, r4
   1b93e:	46ab      	mov	fp, r5
   1b940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b942:	2100      	movs	r1, #0
   1b944:	f7ff fd26 	bl	1b394 <_Balloc>
   1b948:	2301      	movs	r3, #1
   1b94a:	6103      	str	r3, [r0, #16]
   1b94c:	2300      	movs	r3, #0
   1b94e:	4681      	mov	r9, r0
   1b950:	6143      	str	r3, [r0, #20]
   1b952:	e7ef      	b.n	1b934 <__mdiff+0x104>
   1b954:	4666      	mov	r6, ip
   1b956:	e799      	b.n	1b88c <__mdiff+0x5c>
   1b958:	0027      	movs	r7, r4
   1b95a:	000e      	movs	r6, r1
   1b95c:	46a0      	mov	r8, r4
   1b95e:	3714      	adds	r7, #20
   1b960:	3614      	adds	r6, #20
   1b962:	000c      	movs	r4, r1
   1b964:	2501      	movs	r5, #1
   1b966:	e791      	b.n	1b88c <__mdiff+0x5c>

0001b968 <__d2b>:
   1b968:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b96a:	2101      	movs	r1, #1
   1b96c:	001c      	movs	r4, r3
   1b96e:	b083      	sub	sp, #12
   1b970:	9e08      	ldr	r6, [sp, #32]
   1b972:	0015      	movs	r5, r2
   1b974:	f7ff fd0e 	bl	1b394 <_Balloc>
   1b978:	0323      	lsls	r3, r4, #12
   1b97a:	0064      	lsls	r4, r4, #1
   1b97c:	0007      	movs	r7, r0
   1b97e:	0b1b      	lsrs	r3, r3, #12
   1b980:	0d64      	lsrs	r4, r4, #21
   1b982:	d002      	beq.n	1b98a <__d2b+0x22>
   1b984:	2280      	movs	r2, #128	; 0x80
   1b986:	0352      	lsls	r2, r2, #13
   1b988:	4313      	orrs	r3, r2
   1b98a:	9301      	str	r3, [sp, #4]
   1b98c:	2d00      	cmp	r5, #0
   1b98e:	d019      	beq.n	1b9c4 <__d2b+0x5c>
   1b990:	4668      	mov	r0, sp
   1b992:	9500      	str	r5, [sp, #0]
   1b994:	f7ff fd90 	bl	1b4b8 <__lo0bits>
   1b998:	2800      	cmp	r0, #0
   1b99a:	d130      	bne.n	1b9fe <__d2b+0x96>
   1b99c:	9b00      	ldr	r3, [sp, #0]
   1b99e:	617b      	str	r3, [r7, #20]
   1b9a0:	9b01      	ldr	r3, [sp, #4]
   1b9a2:	61bb      	str	r3, [r7, #24]
   1b9a4:	1e5a      	subs	r2, r3, #1
   1b9a6:	4193      	sbcs	r3, r2
   1b9a8:	1c5d      	adds	r5, r3, #1
   1b9aa:	613d      	str	r5, [r7, #16]
   1b9ac:	2c00      	cmp	r4, #0
   1b9ae:	d014      	beq.n	1b9da <__d2b+0x72>
   1b9b0:	4b19      	ldr	r3, [pc, #100]	; (1ba18 <__d2b+0xb0>)
   1b9b2:	469c      	mov	ip, r3
   1b9b4:	2335      	movs	r3, #53	; 0x35
   1b9b6:	4464      	add	r4, ip
   1b9b8:	1824      	adds	r4, r4, r0
   1b9ba:	1a18      	subs	r0, r3, r0
   1b9bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b9be:	6034      	str	r4, [r6, #0]
   1b9c0:	6018      	str	r0, [r3, #0]
   1b9c2:	e019      	b.n	1b9f8 <__d2b+0x90>
   1b9c4:	a801      	add	r0, sp, #4
   1b9c6:	f7ff fd77 	bl	1b4b8 <__lo0bits>
   1b9ca:	9b01      	ldr	r3, [sp, #4]
   1b9cc:	3020      	adds	r0, #32
   1b9ce:	617b      	str	r3, [r7, #20]
   1b9d0:	2301      	movs	r3, #1
   1b9d2:	2501      	movs	r5, #1
   1b9d4:	613b      	str	r3, [r7, #16]
   1b9d6:	2c00      	cmp	r4, #0
   1b9d8:	d1ea      	bne.n	1b9b0 <__d2b+0x48>
   1b9da:	4b10      	ldr	r3, [pc, #64]	; (1ba1c <__d2b+0xb4>)
   1b9dc:	469c      	mov	ip, r3
   1b9de:	4b10      	ldr	r3, [pc, #64]	; (1ba20 <__d2b+0xb8>)
   1b9e0:	4460      	add	r0, ip
   1b9e2:	18eb      	adds	r3, r5, r3
   1b9e4:	009b      	lsls	r3, r3, #2
   1b9e6:	18fb      	adds	r3, r7, r3
   1b9e8:	6030      	str	r0, [r6, #0]
   1b9ea:	6958      	ldr	r0, [r3, #20]
   1b9ec:	f7ff fd4a 	bl	1b484 <__hi0bits>
   1b9f0:	016b      	lsls	r3, r5, #5
   1b9f2:	1a18      	subs	r0, r3, r0
   1b9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1b9f6:	6018      	str	r0, [r3, #0]
   1b9f8:	0038      	movs	r0, r7
   1b9fa:	b003      	add	sp, #12
   1b9fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b9fe:	9b01      	ldr	r3, [sp, #4]
   1ba00:	2220      	movs	r2, #32
   1ba02:	0019      	movs	r1, r3
   1ba04:	1a12      	subs	r2, r2, r0
   1ba06:	4091      	lsls	r1, r2
   1ba08:	000a      	movs	r2, r1
   1ba0a:	40c3      	lsrs	r3, r0
   1ba0c:	9900      	ldr	r1, [sp, #0]
   1ba0e:	9301      	str	r3, [sp, #4]
   1ba10:	430a      	orrs	r2, r1
   1ba12:	617a      	str	r2, [r7, #20]
   1ba14:	e7c5      	b.n	1b9a2 <__d2b+0x3a>
   1ba16:	46c0      	nop			; (mov r8, r8)
   1ba18:	fffffbcd 	.word	0xfffffbcd
   1ba1c:	fffffbce 	.word	0xfffffbce
   1ba20:	3fffffff 	.word	0x3fffffff

0001ba24 <_realloc_r>:
   1ba24:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ba26:	464e      	mov	r6, r9
   1ba28:	4645      	mov	r5, r8
   1ba2a:	46de      	mov	lr, fp
   1ba2c:	4657      	mov	r7, sl
   1ba2e:	b5e0      	push	{r5, r6, r7, lr}
   1ba30:	b085      	sub	sp, #20
   1ba32:	9001      	str	r0, [sp, #4]
   1ba34:	000e      	movs	r6, r1
   1ba36:	0015      	movs	r5, r2
   1ba38:	2900      	cmp	r1, #0
   1ba3a:	d100      	bne.n	1ba3e <_realloc_r+0x1a>
   1ba3c:	e09e      	b.n	1bb7c <_realloc_r+0x158>
   1ba3e:	0037      	movs	r7, r6
   1ba40:	9801      	ldr	r0, [sp, #4]
   1ba42:	3f08      	subs	r7, #8
   1ba44:	f7ff fc96 	bl	1b374 <__malloc_lock>
   1ba48:	687a      	ldr	r2, [r7, #4]
   1ba4a:	2303      	movs	r3, #3
   1ba4c:	0014      	movs	r4, r2
   1ba4e:	439c      	bics	r4, r3
   1ba50:	002b      	movs	r3, r5
   1ba52:	330b      	adds	r3, #11
   1ba54:	46b9      	mov	r9, r7
   1ba56:	2b16      	cmp	r3, #22
   1ba58:	d847      	bhi.n	1baea <_realloc_r+0xc6>
   1ba5a:	2110      	movs	r1, #16
   1ba5c:	2310      	movs	r3, #16
   1ba5e:	4688      	mov	r8, r1
   1ba60:	4545      	cmp	r5, r8
   1ba62:	d846      	bhi.n	1baf2 <_realloc_r+0xce>
   1ba64:	429c      	cmp	r4, r3
   1ba66:	da49      	bge.n	1bafc <_realloc_r+0xd8>
   1ba68:	49cc      	ldr	r1, [pc, #816]	; (1bd9c <_realloc_r+0x378>)
   1ba6a:	1938      	adds	r0, r7, r4
   1ba6c:	468b      	mov	fp, r1
   1ba6e:	6889      	ldr	r1, [r1, #8]
   1ba70:	9002      	str	r0, [sp, #8]
   1ba72:	4288      	cmp	r0, r1
   1ba74:	d100      	bne.n	1ba78 <_realloc_r+0x54>
   1ba76:	e0c2      	b.n	1bbfe <_realloc_r+0x1da>
   1ba78:	2101      	movs	r1, #1
   1ba7a:	468a      	mov	sl, r1
   1ba7c:	6840      	ldr	r0, [r0, #4]
   1ba7e:	0001      	movs	r1, r0
   1ba80:	9003      	str	r0, [sp, #12]
   1ba82:	4650      	mov	r0, sl
   1ba84:	4381      	bics	r1, r0
   1ba86:	468c      	mov	ip, r1
   1ba88:	9902      	ldr	r1, [sp, #8]
   1ba8a:	468b      	mov	fp, r1
   1ba8c:	44dc      	add	ip, fp
   1ba8e:	4661      	mov	r1, ip
   1ba90:	6849      	ldr	r1, [r1, #4]
   1ba92:	4201      	tst	r1, r0
   1ba94:	d04d      	beq.n	1bb32 <_realloc_r+0x10e>
   1ba96:	4210      	tst	r0, r2
   1ba98:	d100      	bne.n	1ba9c <_realloc_r+0x78>
   1ba9a:	e0a2      	b.n	1bbe2 <_realloc_r+0x1be>
   1ba9c:	0029      	movs	r1, r5
   1ba9e:	9801      	ldr	r0, [sp, #4]
   1baa0:	f7ff f924 	bl	1acec <_malloc_r>
   1baa4:	1e05      	subs	r5, r0, #0
   1baa6:	d039      	beq.n	1bb1c <_realloc_r+0xf8>
   1baa8:	2301      	movs	r3, #1
   1baaa:	0002      	movs	r2, r0
   1baac:	6879      	ldr	r1, [r7, #4]
   1baae:	3a08      	subs	r2, #8
   1bab0:	4399      	bics	r1, r3
   1bab2:	187f      	adds	r7, r7, r1
   1bab4:	42ba      	cmp	r2, r7
   1bab6:	d100      	bne.n	1baba <_realloc_r+0x96>
   1bab8:	e12e      	b.n	1bd18 <_realloc_r+0x2f4>
   1baba:	1f22      	subs	r2, r4, #4
   1babc:	2a24      	cmp	r2, #36	; 0x24
   1babe:	d900      	bls.n	1bac2 <_realloc_r+0x9e>
   1bac0:	e114      	b.n	1bcec <_realloc_r+0x2c8>
   1bac2:	2a13      	cmp	r2, #19
   1bac4:	d900      	bls.n	1bac8 <_realloc_r+0xa4>
   1bac6:	e0e8      	b.n	1bc9a <_realloc_r+0x276>
   1bac8:	0003      	movs	r3, r0
   1baca:	0032      	movs	r2, r6
   1bacc:	6811      	ldr	r1, [r2, #0]
   1bace:	6019      	str	r1, [r3, #0]
   1bad0:	6851      	ldr	r1, [r2, #4]
   1bad2:	6059      	str	r1, [r3, #4]
   1bad4:	6892      	ldr	r2, [r2, #8]
   1bad6:	609a      	str	r2, [r3, #8]
   1bad8:	9c01      	ldr	r4, [sp, #4]
   1bada:	0031      	movs	r1, r6
   1badc:	0020      	movs	r0, r4
   1bade:	f7fe fde7 	bl	1a6b0 <_free_r>
   1bae2:	0020      	movs	r0, r4
   1bae4:	f7ff fc4e 	bl	1b384 <__malloc_unlock>
   1bae8:	e01b      	b.n	1bb22 <_realloc_r+0xfe>
   1baea:	2107      	movs	r1, #7
   1baec:	438b      	bics	r3, r1
   1baee:	4698      	mov	r8, r3
   1baf0:	d5b6      	bpl.n	1ba60 <_realloc_r+0x3c>
   1baf2:	230c      	movs	r3, #12
   1baf4:	9a01      	ldr	r2, [sp, #4]
   1baf6:	2500      	movs	r5, #0
   1baf8:	6013      	str	r3, [r2, #0]
   1bafa:	e012      	b.n	1bb22 <_realloc_r+0xfe>
   1bafc:	0035      	movs	r5, r6
   1bafe:	4643      	mov	r3, r8
   1bb00:	1ae3      	subs	r3, r4, r3
   1bb02:	2b0f      	cmp	r3, #15
   1bb04:	d825      	bhi.n	1bb52 <_realloc_r+0x12e>
   1bb06:	464b      	mov	r3, r9
   1bb08:	2201      	movs	r2, #1
   1bb0a:	4649      	mov	r1, r9
   1bb0c:	685b      	ldr	r3, [r3, #4]
   1bb0e:	4013      	ands	r3, r2
   1bb10:	4323      	orrs	r3, r4
   1bb12:	604b      	str	r3, [r1, #4]
   1bb14:	444c      	add	r4, r9
   1bb16:	6863      	ldr	r3, [r4, #4]
   1bb18:	431a      	orrs	r2, r3
   1bb1a:	6062      	str	r2, [r4, #4]
   1bb1c:	9801      	ldr	r0, [sp, #4]
   1bb1e:	f7ff fc31 	bl	1b384 <__malloc_unlock>
   1bb22:	0028      	movs	r0, r5
   1bb24:	b005      	add	sp, #20
   1bb26:	bc3c      	pop	{r2, r3, r4, r5}
   1bb28:	4690      	mov	r8, r2
   1bb2a:	4699      	mov	r9, r3
   1bb2c:	46a2      	mov	sl, r4
   1bb2e:	46ab      	mov	fp, r5
   1bb30:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bb32:	2103      	movs	r1, #3
   1bb34:	9803      	ldr	r0, [sp, #12]
   1bb36:	468c      	mov	ip, r1
   1bb38:	4388      	bics	r0, r1
   1bb3a:	1821      	adds	r1, r4, r0
   1bb3c:	468b      	mov	fp, r1
   1bb3e:	4299      	cmp	r1, r3
   1bb40:	db21      	blt.n	1bb86 <_realloc_r+0x162>
   1bb42:	9a02      	ldr	r2, [sp, #8]
   1bb44:	0035      	movs	r5, r6
   1bb46:	68d3      	ldr	r3, [r2, #12]
   1bb48:	6892      	ldr	r2, [r2, #8]
   1bb4a:	465c      	mov	r4, fp
   1bb4c:	60d3      	str	r3, [r2, #12]
   1bb4e:	609a      	str	r2, [r3, #8]
   1bb50:	e7d5      	b.n	1bafe <_realloc_r+0xda>
   1bb52:	464a      	mov	r2, r9
   1bb54:	2001      	movs	r0, #1
   1bb56:	4646      	mov	r6, r8
   1bb58:	6852      	ldr	r2, [r2, #4]
   1bb5a:	4649      	mov	r1, r9
   1bb5c:	4002      	ands	r2, r0
   1bb5e:	4332      	orrs	r2, r6
   1bb60:	464e      	mov	r6, r9
   1bb62:	4441      	add	r1, r8
   1bb64:	4303      	orrs	r3, r0
   1bb66:	6072      	str	r2, [r6, #4]
   1bb68:	444c      	add	r4, r9
   1bb6a:	604b      	str	r3, [r1, #4]
   1bb6c:	6863      	ldr	r3, [r4, #4]
   1bb6e:	3108      	adds	r1, #8
   1bb70:	4318      	orrs	r0, r3
   1bb72:	6060      	str	r0, [r4, #4]
   1bb74:	9801      	ldr	r0, [sp, #4]
   1bb76:	f7fe fd9b 	bl	1a6b0 <_free_r>
   1bb7a:	e7cf      	b.n	1bb1c <_realloc_r+0xf8>
   1bb7c:	0011      	movs	r1, r2
   1bb7e:	f7ff f8b5 	bl	1acec <_malloc_r>
   1bb82:	0005      	movs	r5, r0
   1bb84:	e7cd      	b.n	1bb22 <_realloc_r+0xfe>
   1bb86:	4651      	mov	r1, sl
   1bb88:	4211      	tst	r1, r2
   1bb8a:	d000      	beq.n	1bb8e <_realloc_r+0x16a>
   1bb8c:	e786      	b.n	1ba9c <_realloc_r+0x78>
   1bb8e:	4661      	mov	r1, ip
   1bb90:	683a      	ldr	r2, [r7, #0]
   1bb92:	1aba      	subs	r2, r7, r2
   1bb94:	4692      	mov	sl, r2
   1bb96:	6852      	ldr	r2, [r2, #4]
   1bb98:	438a      	bics	r2, r1
   1bb9a:	1880      	adds	r0, r0, r2
   1bb9c:	4683      	mov	fp, r0
   1bb9e:	44a3      	add	fp, r4
   1bba0:	459b      	cmp	fp, r3
   1bba2:	db26      	blt.n	1bbf2 <_realloc_r+0x1ce>
   1bba4:	9a02      	ldr	r2, [sp, #8]
   1bba6:	68d3      	ldr	r3, [r2, #12]
   1bba8:	6892      	ldr	r2, [r2, #8]
   1bbaa:	60d3      	str	r3, [r2, #12]
   1bbac:	609a      	str	r2, [r3, #8]
   1bbae:	4653      	mov	r3, sl
   1bbb0:	4652      	mov	r2, sl
   1bbb2:	4655      	mov	r5, sl
   1bbb4:	6892      	ldr	r2, [r2, #8]
   1bbb6:	68db      	ldr	r3, [r3, #12]
   1bbb8:	3508      	adds	r5, #8
   1bbba:	60d3      	str	r3, [r2, #12]
   1bbbc:	609a      	str	r2, [r3, #8]
   1bbbe:	1f22      	subs	r2, r4, #4
   1bbc0:	2a24      	cmp	r2, #36	; 0x24
   1bbc2:	d900      	bls.n	1bbc6 <_realloc_r+0x1a2>
   1bbc4:	e096      	b.n	1bcf4 <_realloc_r+0x2d0>
   1bbc6:	2a13      	cmp	r2, #19
   1bbc8:	d972      	bls.n	1bcb0 <_realloc_r+0x28c>
   1bbca:	4653      	mov	r3, sl
   1bbcc:	6831      	ldr	r1, [r6, #0]
   1bbce:	6099      	str	r1, [r3, #8]
   1bbd0:	6871      	ldr	r1, [r6, #4]
   1bbd2:	60d9      	str	r1, [r3, #12]
   1bbd4:	2a1b      	cmp	r2, #27
   1bbd6:	d900      	bls.n	1bbda <_realloc_r+0x1b6>
   1bbd8:	e0a4      	b.n	1bd24 <_realloc_r+0x300>
   1bbda:	0032      	movs	r2, r6
   1bbdc:	3310      	adds	r3, #16
   1bbde:	3208      	adds	r2, #8
   1bbe0:	e068      	b.n	1bcb4 <_realloc_r+0x290>
   1bbe2:	683a      	ldr	r2, [r7, #0]
   1bbe4:	1aba      	subs	r2, r7, r2
   1bbe6:	4692      	mov	sl, r2
   1bbe8:	4651      	mov	r1, sl
   1bbea:	2203      	movs	r2, #3
   1bbec:	6849      	ldr	r1, [r1, #4]
   1bbee:	4391      	bics	r1, r2
   1bbf0:	000a      	movs	r2, r1
   1bbf2:	4693      	mov	fp, r2
   1bbf4:	44a3      	add	fp, r4
   1bbf6:	459b      	cmp	fp, r3
   1bbf8:	da00      	bge.n	1bbfc <_realloc_r+0x1d8>
   1bbfa:	e74f      	b.n	1ba9c <_realloc_r+0x78>
   1bbfc:	e7d7      	b.n	1bbae <_realloc_r+0x18a>
   1bbfe:	2003      	movs	r0, #3
   1bc00:	9902      	ldr	r1, [sp, #8]
   1bc02:	4684      	mov	ip, r0
   1bc04:	6849      	ldr	r1, [r1, #4]
   1bc06:	4381      	bics	r1, r0
   1bc08:	4640      	mov	r0, r8
   1bc0a:	1909      	adds	r1, r1, r4
   1bc0c:	3010      	adds	r0, #16
   1bc0e:	9002      	str	r0, [sp, #8]
   1bc10:	4281      	cmp	r1, r0
   1bc12:	da58      	bge.n	1bcc6 <_realloc_r+0x2a2>
   1bc14:	07d2      	lsls	r2, r2, #31
   1bc16:	d500      	bpl.n	1bc1a <_realloc_r+0x1f6>
   1bc18:	e740      	b.n	1ba9c <_realloc_r+0x78>
   1bc1a:	4660      	mov	r0, ip
   1bc1c:	683a      	ldr	r2, [r7, #0]
   1bc1e:	1aba      	subs	r2, r7, r2
   1bc20:	4692      	mov	sl, r2
   1bc22:	6852      	ldr	r2, [r2, #4]
   1bc24:	4382      	bics	r2, r0
   1bc26:	9802      	ldr	r0, [sp, #8]
   1bc28:	1851      	adds	r1, r2, r1
   1bc2a:	9103      	str	r1, [sp, #12]
   1bc2c:	4288      	cmp	r0, r1
   1bc2e:	dce0      	bgt.n	1bbf2 <_realloc_r+0x1ce>
   1bc30:	4653      	mov	r3, sl
   1bc32:	4652      	mov	r2, sl
   1bc34:	4655      	mov	r5, sl
   1bc36:	6892      	ldr	r2, [r2, #8]
   1bc38:	68db      	ldr	r3, [r3, #12]
   1bc3a:	3508      	adds	r5, #8
   1bc3c:	60d3      	str	r3, [r2, #12]
   1bc3e:	609a      	str	r2, [r3, #8]
   1bc40:	1f22      	subs	r2, r4, #4
   1bc42:	2a24      	cmp	r2, #36	; 0x24
   1bc44:	d900      	bls.n	1bc48 <_realloc_r+0x224>
   1bc46:	e08e      	b.n	1bd66 <_realloc_r+0x342>
   1bc48:	2a13      	cmp	r2, #19
   1bc4a:	d800      	bhi.n	1bc4e <_realloc_r+0x22a>
   1bc4c:	e088      	b.n	1bd60 <_realloc_r+0x33c>
   1bc4e:	4653      	mov	r3, sl
   1bc50:	6831      	ldr	r1, [r6, #0]
   1bc52:	6099      	str	r1, [r3, #8]
   1bc54:	6871      	ldr	r1, [r6, #4]
   1bc56:	60d9      	str	r1, [r3, #12]
   1bc58:	2a1b      	cmp	r2, #27
   1bc5a:	d900      	bls.n	1bc5e <_realloc_r+0x23a>
   1bc5c:	e088      	b.n	1bd70 <_realloc_r+0x34c>
   1bc5e:	0032      	movs	r2, r6
   1bc60:	3310      	adds	r3, #16
   1bc62:	3208      	adds	r2, #8
   1bc64:	6811      	ldr	r1, [r2, #0]
   1bc66:	6019      	str	r1, [r3, #0]
   1bc68:	6851      	ldr	r1, [r2, #4]
   1bc6a:	6059      	str	r1, [r3, #4]
   1bc6c:	6892      	ldr	r2, [r2, #8]
   1bc6e:	609a      	str	r2, [r3, #8]
   1bc70:	4651      	mov	r1, sl
   1bc72:	465b      	mov	r3, fp
   1bc74:	4642      	mov	r2, r8
   1bc76:	4441      	add	r1, r8
   1bc78:	6099      	str	r1, [r3, #8]
   1bc7a:	9b03      	ldr	r3, [sp, #12]
   1bc7c:	9801      	ldr	r0, [sp, #4]
   1bc7e:	1a9a      	subs	r2, r3, r2
   1bc80:	2301      	movs	r3, #1
   1bc82:	431a      	orrs	r2, r3
   1bc84:	604a      	str	r2, [r1, #4]
   1bc86:	4652      	mov	r2, sl
   1bc88:	6852      	ldr	r2, [r2, #4]
   1bc8a:	4013      	ands	r3, r2
   1bc8c:	4642      	mov	r2, r8
   1bc8e:	4313      	orrs	r3, r2
   1bc90:	4652      	mov	r2, sl
   1bc92:	6053      	str	r3, [r2, #4]
   1bc94:	f7ff fb76 	bl	1b384 <__malloc_unlock>
   1bc98:	e743      	b.n	1bb22 <_realloc_r+0xfe>
   1bc9a:	6833      	ldr	r3, [r6, #0]
   1bc9c:	6003      	str	r3, [r0, #0]
   1bc9e:	6873      	ldr	r3, [r6, #4]
   1bca0:	6043      	str	r3, [r0, #4]
   1bca2:	2a1b      	cmp	r2, #27
   1bca4:	d82d      	bhi.n	1bd02 <_realloc_r+0x2de>
   1bca6:	0003      	movs	r3, r0
   1bca8:	0032      	movs	r2, r6
   1bcaa:	3308      	adds	r3, #8
   1bcac:	3208      	adds	r2, #8
   1bcae:	e70d      	b.n	1bacc <_realloc_r+0xa8>
   1bcb0:	002b      	movs	r3, r5
   1bcb2:	0032      	movs	r2, r6
   1bcb4:	6811      	ldr	r1, [r2, #0]
   1bcb6:	465c      	mov	r4, fp
   1bcb8:	6019      	str	r1, [r3, #0]
   1bcba:	6851      	ldr	r1, [r2, #4]
   1bcbc:	46d1      	mov	r9, sl
   1bcbe:	6059      	str	r1, [r3, #4]
   1bcc0:	6892      	ldr	r2, [r2, #8]
   1bcc2:	609a      	str	r2, [r3, #8]
   1bcc4:	e71b      	b.n	1bafe <_realloc_r+0xda>
   1bcc6:	4643      	mov	r3, r8
   1bcc8:	18fa      	adds	r2, r7, r3
   1bcca:	465b      	mov	r3, fp
   1bccc:	609a      	str	r2, [r3, #8]
   1bcce:	4643      	mov	r3, r8
   1bcd0:	1ac9      	subs	r1, r1, r3
   1bcd2:	2301      	movs	r3, #1
   1bcd4:	4319      	orrs	r1, r3
   1bcd6:	6051      	str	r1, [r2, #4]
   1bcd8:	687a      	ldr	r2, [r7, #4]
   1bcda:	9801      	ldr	r0, [sp, #4]
   1bcdc:	4013      	ands	r3, r2
   1bcde:	4642      	mov	r2, r8
   1bce0:	4313      	orrs	r3, r2
   1bce2:	607b      	str	r3, [r7, #4]
   1bce4:	f7ff fb4e 	bl	1b384 <__malloc_unlock>
   1bce8:	0035      	movs	r5, r6
   1bcea:	e71a      	b.n	1bb22 <_realloc_r+0xfe>
   1bcec:	0031      	movs	r1, r6
   1bcee:	f7ff faf1 	bl	1b2d4 <memmove>
   1bcf2:	e6f1      	b.n	1bad8 <_realloc_r+0xb4>
   1bcf4:	0031      	movs	r1, r6
   1bcf6:	0028      	movs	r0, r5
   1bcf8:	f7ff faec 	bl	1b2d4 <memmove>
   1bcfc:	465c      	mov	r4, fp
   1bcfe:	46d1      	mov	r9, sl
   1bd00:	e6fd      	b.n	1bafe <_realloc_r+0xda>
   1bd02:	68b3      	ldr	r3, [r6, #8]
   1bd04:	6083      	str	r3, [r0, #8]
   1bd06:	68f3      	ldr	r3, [r6, #12]
   1bd08:	60c3      	str	r3, [r0, #12]
   1bd0a:	2a24      	cmp	r2, #36	; 0x24
   1bd0c:	d015      	beq.n	1bd3a <_realloc_r+0x316>
   1bd0e:	0003      	movs	r3, r0
   1bd10:	0032      	movs	r2, r6
   1bd12:	3310      	adds	r3, #16
   1bd14:	3210      	adds	r2, #16
   1bd16:	e6d9      	b.n	1bacc <_realloc_r+0xa8>
   1bd18:	6853      	ldr	r3, [r2, #4]
   1bd1a:	2203      	movs	r2, #3
   1bd1c:	4393      	bics	r3, r2
   1bd1e:	18e4      	adds	r4, r4, r3
   1bd20:	0035      	movs	r5, r6
   1bd22:	e6ec      	b.n	1bafe <_realloc_r+0xda>
   1bd24:	4653      	mov	r3, sl
   1bd26:	68b1      	ldr	r1, [r6, #8]
   1bd28:	6119      	str	r1, [r3, #16]
   1bd2a:	68f1      	ldr	r1, [r6, #12]
   1bd2c:	6159      	str	r1, [r3, #20]
   1bd2e:	2a24      	cmp	r2, #36	; 0x24
   1bd30:	d00c      	beq.n	1bd4c <_realloc_r+0x328>
   1bd32:	0032      	movs	r2, r6
   1bd34:	3318      	adds	r3, #24
   1bd36:	3210      	adds	r2, #16
   1bd38:	e7bc      	b.n	1bcb4 <_realloc_r+0x290>
   1bd3a:	6933      	ldr	r3, [r6, #16]
   1bd3c:	0032      	movs	r2, r6
   1bd3e:	6103      	str	r3, [r0, #16]
   1bd40:	0003      	movs	r3, r0
   1bd42:	6971      	ldr	r1, [r6, #20]
   1bd44:	3318      	adds	r3, #24
   1bd46:	3218      	adds	r2, #24
   1bd48:	6141      	str	r1, [r0, #20]
   1bd4a:	e6bf      	b.n	1bacc <_realloc_r+0xa8>
   1bd4c:	4653      	mov	r3, sl
   1bd4e:	6932      	ldr	r2, [r6, #16]
   1bd50:	4651      	mov	r1, sl
   1bd52:	619a      	str	r2, [r3, #24]
   1bd54:	0032      	movs	r2, r6
   1bd56:	6970      	ldr	r0, [r6, #20]
   1bd58:	3320      	adds	r3, #32
   1bd5a:	3218      	adds	r2, #24
   1bd5c:	61c8      	str	r0, [r1, #28]
   1bd5e:	e7a9      	b.n	1bcb4 <_realloc_r+0x290>
   1bd60:	002b      	movs	r3, r5
   1bd62:	0032      	movs	r2, r6
   1bd64:	e77e      	b.n	1bc64 <_realloc_r+0x240>
   1bd66:	0031      	movs	r1, r6
   1bd68:	0028      	movs	r0, r5
   1bd6a:	f7ff fab3 	bl	1b2d4 <memmove>
   1bd6e:	e77f      	b.n	1bc70 <_realloc_r+0x24c>
   1bd70:	4653      	mov	r3, sl
   1bd72:	68b1      	ldr	r1, [r6, #8]
   1bd74:	6119      	str	r1, [r3, #16]
   1bd76:	68f1      	ldr	r1, [r6, #12]
   1bd78:	6159      	str	r1, [r3, #20]
   1bd7a:	2a24      	cmp	r2, #36	; 0x24
   1bd7c:	d003      	beq.n	1bd86 <_realloc_r+0x362>
   1bd7e:	0032      	movs	r2, r6
   1bd80:	3318      	adds	r3, #24
   1bd82:	3210      	adds	r2, #16
   1bd84:	e76e      	b.n	1bc64 <_realloc_r+0x240>
   1bd86:	4653      	mov	r3, sl
   1bd88:	6932      	ldr	r2, [r6, #16]
   1bd8a:	4651      	mov	r1, sl
   1bd8c:	619a      	str	r2, [r3, #24]
   1bd8e:	0032      	movs	r2, r6
   1bd90:	6970      	ldr	r0, [r6, #20]
   1bd92:	3320      	adds	r3, #32
   1bd94:	3218      	adds	r2, #24
   1bd96:	61c8      	str	r0, [r1, #28]
   1bd98:	e764      	b.n	1bc64 <_realloc_r+0x240>
   1bd9a:	46c0      	nop			; (mov r8, r8)
   1bd9c:	2000049c 	.word	0x2000049c

0001bda0 <_sbrk_r>:
   1bda0:	2300      	movs	r3, #0
   1bda2:	b570      	push	{r4, r5, r6, lr}
   1bda4:	4c06      	ldr	r4, [pc, #24]	; (1bdc0 <_sbrk_r+0x20>)
   1bda6:	0005      	movs	r5, r0
   1bda8:	0008      	movs	r0, r1
   1bdaa:	6023      	str	r3, [r4, #0]
   1bdac:	f7e7 fe5a 	bl	3a64 <_sbrk>
   1bdb0:	1c43      	adds	r3, r0, #1
   1bdb2:	d000      	beq.n	1bdb6 <_sbrk_r+0x16>
   1bdb4:	bd70      	pop	{r4, r5, r6, pc}
   1bdb6:	6823      	ldr	r3, [r4, #0]
   1bdb8:	2b00      	cmp	r3, #0
   1bdba:	d0fb      	beq.n	1bdb4 <_sbrk_r+0x14>
   1bdbc:	602b      	str	r3, [r5, #0]
   1bdbe:	e7f9      	b.n	1bdb4 <_sbrk_r+0x14>
   1bdc0:	200027fc 	.word	0x200027fc

0001bdc4 <__sread>:
   1bdc4:	b570      	push	{r4, r5, r6, lr}
   1bdc6:	000c      	movs	r4, r1
   1bdc8:	250e      	movs	r5, #14
   1bdca:	5f49      	ldrsh	r1, [r1, r5]
   1bdcc:	f000 fb30 	bl	1c430 <_read_r>
   1bdd0:	2800      	cmp	r0, #0
   1bdd2:	db03      	blt.n	1bddc <__sread+0x18>
   1bdd4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1bdd6:	181b      	adds	r3, r3, r0
   1bdd8:	6523      	str	r3, [r4, #80]	; 0x50
   1bdda:	bd70      	pop	{r4, r5, r6, pc}
   1bddc:	89a3      	ldrh	r3, [r4, #12]
   1bdde:	4a02      	ldr	r2, [pc, #8]	; (1bde8 <__sread+0x24>)
   1bde0:	4013      	ands	r3, r2
   1bde2:	81a3      	strh	r3, [r4, #12]
   1bde4:	e7f9      	b.n	1bdda <__sread+0x16>
   1bde6:	46c0      	nop			; (mov r8, r8)
   1bde8:	ffffefff 	.word	0xffffefff

0001bdec <__swrite>:
   1bdec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bdee:	0016      	movs	r6, r2
   1bdf0:	001f      	movs	r7, r3
   1bdf2:	220c      	movs	r2, #12
   1bdf4:	5e8b      	ldrsh	r3, [r1, r2]
   1bdf6:	0005      	movs	r5, r0
   1bdf8:	000c      	movs	r4, r1
   1bdfa:	05da      	lsls	r2, r3, #23
   1bdfc:	d507      	bpl.n	1be0e <__swrite+0x22>
   1bdfe:	230e      	movs	r3, #14
   1be00:	5ec9      	ldrsh	r1, [r1, r3]
   1be02:	2200      	movs	r2, #0
   1be04:	2302      	movs	r3, #2
   1be06:	f000 fae9 	bl	1c3dc <_lseek_r>
   1be0a:	220c      	movs	r2, #12
   1be0c:	5ea3      	ldrsh	r3, [r4, r2]
   1be0e:	4a05      	ldr	r2, [pc, #20]	; (1be24 <__swrite+0x38>)
   1be10:	0028      	movs	r0, r5
   1be12:	4013      	ands	r3, r2
   1be14:	81a3      	strh	r3, [r4, #12]
   1be16:	0032      	movs	r2, r6
   1be18:	230e      	movs	r3, #14
   1be1a:	5ee1      	ldrsh	r1, [r4, r3]
   1be1c:	003b      	movs	r3, r7
   1be1e:	f000 f8fb 	bl	1c018 <_write_r>
   1be22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1be24:	ffffefff 	.word	0xffffefff

0001be28 <__sseek>:
   1be28:	b570      	push	{r4, r5, r6, lr}
   1be2a:	000c      	movs	r4, r1
   1be2c:	250e      	movs	r5, #14
   1be2e:	5f49      	ldrsh	r1, [r1, r5]
   1be30:	f000 fad4 	bl	1c3dc <_lseek_r>
   1be34:	1c43      	adds	r3, r0, #1
   1be36:	d006      	beq.n	1be46 <__sseek+0x1e>
   1be38:	2380      	movs	r3, #128	; 0x80
   1be3a:	89a2      	ldrh	r2, [r4, #12]
   1be3c:	015b      	lsls	r3, r3, #5
   1be3e:	4313      	orrs	r3, r2
   1be40:	81a3      	strh	r3, [r4, #12]
   1be42:	6520      	str	r0, [r4, #80]	; 0x50
   1be44:	bd70      	pop	{r4, r5, r6, pc}
   1be46:	89a3      	ldrh	r3, [r4, #12]
   1be48:	4a01      	ldr	r2, [pc, #4]	; (1be50 <__sseek+0x28>)
   1be4a:	4013      	ands	r3, r2
   1be4c:	81a3      	strh	r3, [r4, #12]
   1be4e:	e7f9      	b.n	1be44 <__sseek+0x1c>
   1be50:	ffffefff 	.word	0xffffefff

0001be54 <__sclose>:
   1be54:	b510      	push	{r4, lr}
   1be56:	230e      	movs	r3, #14
   1be58:	5ec9      	ldrsh	r1, [r1, r3]
   1be5a:	f000 f997 	bl	1c18c <_close_r>
   1be5e:	bd10      	pop	{r4, pc}

0001be60 <__ssprint_r>:
   1be60:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be62:	4657      	mov	r7, sl
   1be64:	464e      	mov	r6, r9
   1be66:	46de      	mov	lr, fp
   1be68:	4645      	mov	r5, r8
   1be6a:	b5e0      	push	{r5, r6, r7, lr}
   1be6c:	6893      	ldr	r3, [r2, #8]
   1be6e:	b083      	sub	sp, #12
   1be70:	9001      	str	r0, [sp, #4]
   1be72:	000e      	movs	r6, r1
   1be74:	4692      	mov	sl, r2
   1be76:	2b00      	cmp	r3, #0
   1be78:	d070      	beq.n	1bf5c <__ssprint_r+0xfc>
   1be7a:	688d      	ldr	r5, [r1, #8]
   1be7c:	6813      	ldr	r3, [r2, #0]
   1be7e:	002c      	movs	r4, r5
   1be80:	6808      	ldr	r0, [r1, #0]
   1be82:	001d      	movs	r5, r3
   1be84:	e046      	b.n	1bf14 <__ssprint_r+0xb4>
   1be86:	2290      	movs	r2, #144	; 0x90
   1be88:	89b3      	ldrh	r3, [r6, #12]
   1be8a:	00d2      	lsls	r2, r2, #3
   1be8c:	4213      	tst	r3, r2
   1be8e:	d030      	beq.n	1bef2 <__ssprint_r+0x92>
   1be90:	6931      	ldr	r1, [r6, #16]
   1be92:	1a42      	subs	r2, r0, r1
   1be94:	4693      	mov	fp, r2
   1be96:	6970      	ldr	r0, [r6, #20]
   1be98:	0042      	lsls	r2, r0, #1
   1be9a:	1812      	adds	r2, r2, r0
   1be9c:	0fd0      	lsrs	r0, r2, #31
   1be9e:	1882      	adds	r2, r0, r2
   1bea0:	1052      	asrs	r2, r2, #1
   1bea2:	4690      	mov	r8, r2
   1bea4:	465a      	mov	r2, fp
   1bea6:	1c50      	adds	r0, r2, #1
   1bea8:	19c0      	adds	r0, r0, r7
   1beaa:	4642      	mov	r2, r8
   1beac:	4540      	cmp	r0, r8
   1beae:	d901      	bls.n	1beb4 <__ssprint_r+0x54>
   1beb0:	4680      	mov	r8, r0
   1beb2:	0002      	movs	r2, r0
   1beb4:	2080      	movs	r0, #128	; 0x80
   1beb6:	00c0      	lsls	r0, r0, #3
   1beb8:	4203      	tst	r3, r0
   1beba:	d038      	beq.n	1bf2e <__ssprint_r+0xce>
   1bebc:	0011      	movs	r1, r2
   1bebe:	9801      	ldr	r0, [sp, #4]
   1bec0:	f7fe ff14 	bl	1acec <_malloc_r>
   1bec4:	1e04      	subs	r4, r0, #0
   1bec6:	d054      	beq.n	1bf72 <__ssprint_r+0x112>
   1bec8:	465a      	mov	r2, fp
   1beca:	6931      	ldr	r1, [r6, #16]
   1becc:	f7fa f83a 	bl	15f44 <memcpy>
   1bed0:	89b3      	ldrh	r3, [r6, #12]
   1bed2:	4a2a      	ldr	r2, [pc, #168]	; (1bf7c <__ssprint_r+0x11c>)
   1bed4:	4013      	ands	r3, r2
   1bed6:	2280      	movs	r2, #128	; 0x80
   1bed8:	4313      	orrs	r3, r2
   1beda:	81b3      	strh	r3, [r6, #12]
   1bedc:	4643      	mov	r3, r8
   1bede:	0020      	movs	r0, r4
   1bee0:	465a      	mov	r2, fp
   1bee2:	6134      	str	r4, [r6, #16]
   1bee4:	46b8      	mov	r8, r7
   1bee6:	003c      	movs	r4, r7
   1bee8:	4458      	add	r0, fp
   1beea:	6173      	str	r3, [r6, #20]
   1beec:	1a9b      	subs	r3, r3, r2
   1beee:	6030      	str	r0, [r6, #0]
   1bef0:	60b3      	str	r3, [r6, #8]
   1bef2:	4642      	mov	r2, r8
   1bef4:	4649      	mov	r1, r9
   1bef6:	f7ff f9ed 	bl	1b2d4 <memmove>
   1befa:	68b3      	ldr	r3, [r6, #8]
   1befc:	1b1c      	subs	r4, r3, r4
   1befe:	6833      	ldr	r3, [r6, #0]
   1bf00:	60b4      	str	r4, [r6, #8]
   1bf02:	4443      	add	r3, r8
   1bf04:	6033      	str	r3, [r6, #0]
   1bf06:	0018      	movs	r0, r3
   1bf08:	4653      	mov	r3, sl
   1bf0a:	689b      	ldr	r3, [r3, #8]
   1bf0c:	1bdf      	subs	r7, r3, r7
   1bf0e:	4653      	mov	r3, sl
   1bf10:	609f      	str	r7, [r3, #8]
   1bf12:	d023      	beq.n	1bf5c <__ssprint_r+0xfc>
   1bf14:	686f      	ldr	r7, [r5, #4]
   1bf16:	002b      	movs	r3, r5
   1bf18:	3508      	adds	r5, #8
   1bf1a:	2f00      	cmp	r7, #0
   1bf1c:	d0fa      	beq.n	1bf14 <__ssprint_r+0xb4>
   1bf1e:	681b      	ldr	r3, [r3, #0]
   1bf20:	46a0      	mov	r8, r4
   1bf22:	4699      	mov	r9, r3
   1bf24:	42a7      	cmp	r7, r4
   1bf26:	d2ae      	bcs.n	1be86 <__ssprint_r+0x26>
   1bf28:	003c      	movs	r4, r7
   1bf2a:	46b8      	mov	r8, r7
   1bf2c:	e7e1      	b.n	1bef2 <__ssprint_r+0x92>
   1bf2e:	9801      	ldr	r0, [sp, #4]
   1bf30:	f7ff fd78 	bl	1ba24 <_realloc_r>
   1bf34:	1e04      	subs	r4, r0, #0
   1bf36:	d1d1      	bne.n	1bedc <__ssprint_r+0x7c>
   1bf38:	9c01      	ldr	r4, [sp, #4]
   1bf3a:	6931      	ldr	r1, [r6, #16]
   1bf3c:	0020      	movs	r0, r4
   1bf3e:	f7fe fbb7 	bl	1a6b0 <_free_r>
   1bf42:	230c      	movs	r3, #12
   1bf44:	6023      	str	r3, [r4, #0]
   1bf46:	2240      	movs	r2, #64	; 0x40
   1bf48:	89b3      	ldrh	r3, [r6, #12]
   1bf4a:	2001      	movs	r0, #1
   1bf4c:	4313      	orrs	r3, r2
   1bf4e:	81b3      	strh	r3, [r6, #12]
   1bf50:	4652      	mov	r2, sl
   1bf52:	2300      	movs	r3, #0
   1bf54:	4240      	negs	r0, r0
   1bf56:	6093      	str	r3, [r2, #8]
   1bf58:	6053      	str	r3, [r2, #4]
   1bf5a:	e003      	b.n	1bf64 <__ssprint_r+0x104>
   1bf5c:	2300      	movs	r3, #0
   1bf5e:	4652      	mov	r2, sl
   1bf60:	2000      	movs	r0, #0
   1bf62:	6053      	str	r3, [r2, #4]
   1bf64:	b003      	add	sp, #12
   1bf66:	bc3c      	pop	{r2, r3, r4, r5}
   1bf68:	4690      	mov	r8, r2
   1bf6a:	4699      	mov	r9, r3
   1bf6c:	46a2      	mov	sl, r4
   1bf6e:	46ab      	mov	fp, r5
   1bf70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1bf72:	230c      	movs	r3, #12
   1bf74:	9a01      	ldr	r2, [sp, #4]
   1bf76:	6013      	str	r3, [r2, #0]
   1bf78:	e7e5      	b.n	1bf46 <__ssprint_r+0xe6>
   1bf7a:	46c0      	nop			; (mov r8, r8)
   1bf7c:	fffffb7f 	.word	0xfffffb7f

0001bf80 <__sprint_r.part.0>:
   1bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bf82:	464e      	mov	r6, r9
   1bf84:	4645      	mov	r5, r8
   1bf86:	46de      	mov	lr, fp
   1bf88:	4657      	mov	r7, sl
   1bf8a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   1bf8c:	b5e0      	push	{r5, r6, r7, lr}
   1bf8e:	4680      	mov	r8, r0
   1bf90:	000e      	movs	r6, r1
   1bf92:	4691      	mov	r9, r2
   1bf94:	049b      	lsls	r3, r3, #18
   1bf96:	d531      	bpl.n	1bffc <__sprint_r.part.0+0x7c>
   1bf98:	6813      	ldr	r3, [r2, #0]
   1bf9a:	469a      	mov	sl, r3
   1bf9c:	6893      	ldr	r3, [r2, #8]
   1bf9e:	2b00      	cmp	r3, #0
   1bfa0:	d02a      	beq.n	1bff8 <__sprint_r.part.0+0x78>
   1bfa2:	4652      	mov	r2, sl
   1bfa4:	6852      	ldr	r2, [r2, #4]
   1bfa6:	2500      	movs	r5, #0
   1bfa8:	4693      	mov	fp, r2
   1bfaa:	0897      	lsrs	r7, r2, #2
   1bfac:	4652      	mov	r2, sl
   1bfae:	6814      	ldr	r4, [r2, #0]
   1bfb0:	d104      	bne.n	1bfbc <__sprint_r.part.0+0x3c>
   1bfb2:	e016      	b.n	1bfe2 <__sprint_r.part.0+0x62>
   1bfb4:	3501      	adds	r5, #1
   1bfb6:	3404      	adds	r4, #4
   1bfb8:	42af      	cmp	r7, r5
   1bfba:	d010      	beq.n	1bfde <__sprint_r.part.0+0x5e>
   1bfbc:	0032      	movs	r2, r6
   1bfbe:	6821      	ldr	r1, [r4, #0]
   1bfc0:	4640      	mov	r0, r8
   1bfc2:	f000 f9a7 	bl	1c314 <_fputwc_r>
   1bfc6:	1c43      	adds	r3, r0, #1
   1bfc8:	d1f4      	bne.n	1bfb4 <__sprint_r.part.0+0x34>
   1bfca:	464a      	mov	r2, r9
   1bfcc:	2300      	movs	r3, #0
   1bfce:	6093      	str	r3, [r2, #8]
   1bfd0:	6053      	str	r3, [r2, #4]
   1bfd2:	bc3c      	pop	{r2, r3, r4, r5}
   1bfd4:	4690      	mov	r8, r2
   1bfd6:	4699      	mov	r9, r3
   1bfd8:	46a2      	mov	sl, r4
   1bfda:	46ab      	mov	fp, r5
   1bfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bfde:	464b      	mov	r3, r9
   1bfe0:	689b      	ldr	r3, [r3, #8]
   1bfe2:	465a      	mov	r2, fp
   1bfe4:	2103      	movs	r1, #3
   1bfe6:	438a      	bics	r2, r1
   1bfe8:	1a9b      	subs	r3, r3, r2
   1bfea:	464a      	mov	r2, r9
   1bfec:	6093      	str	r3, [r2, #8]
   1bfee:	2208      	movs	r2, #8
   1bff0:	4694      	mov	ip, r2
   1bff2:	44e2      	add	sl, ip
   1bff4:	2b00      	cmp	r3, #0
   1bff6:	d1d4      	bne.n	1bfa2 <__sprint_r.part.0+0x22>
   1bff8:	2000      	movs	r0, #0
   1bffa:	e7e6      	b.n	1bfca <__sprint_r.part.0+0x4a>
   1bffc:	f7fe fc36 	bl	1a86c <__sfvwrite_r>
   1c000:	e7e3      	b.n	1bfca <__sprint_r.part.0+0x4a>
   1c002:	46c0      	nop			; (mov r8, r8)

0001c004 <__sprint_r>:
   1c004:	6893      	ldr	r3, [r2, #8]
   1c006:	b510      	push	{r4, lr}
   1c008:	2b00      	cmp	r3, #0
   1c00a:	d002      	beq.n	1c012 <__sprint_r+0xe>
   1c00c:	f7ff ffb8 	bl	1bf80 <__sprint_r.part.0>
   1c010:	bd10      	pop	{r4, pc}
   1c012:	6053      	str	r3, [r2, #4]
   1c014:	2000      	movs	r0, #0
   1c016:	e7fb      	b.n	1c010 <__sprint_r+0xc>

0001c018 <_write_r>:
   1c018:	b570      	push	{r4, r5, r6, lr}
   1c01a:	0005      	movs	r5, r0
   1c01c:	0008      	movs	r0, r1
   1c01e:	0011      	movs	r1, r2
   1c020:	2200      	movs	r2, #0
   1c022:	4c06      	ldr	r4, [pc, #24]	; (1c03c <_write_r+0x24>)
   1c024:	6022      	str	r2, [r4, #0]
   1c026:	001a      	movs	r2, r3
   1c028:	f7e7 fcf4 	bl	3a14 <_write>
   1c02c:	1c43      	adds	r3, r0, #1
   1c02e:	d000      	beq.n	1c032 <_write_r+0x1a>
   1c030:	bd70      	pop	{r4, r5, r6, pc}
   1c032:	6823      	ldr	r3, [r4, #0]
   1c034:	2b00      	cmp	r3, #0
   1c036:	d0fb      	beq.n	1c030 <_write_r+0x18>
   1c038:	602b      	str	r3, [r5, #0]
   1c03a:	e7f9      	b.n	1c030 <_write_r+0x18>
   1c03c:	200027fc 	.word	0x200027fc

0001c040 <__register_exitproc>:
   1c040:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c042:	464e      	mov	r6, r9
   1c044:	4645      	mov	r5, r8
   1c046:	46de      	mov	lr, fp
   1c048:	4657      	mov	r7, sl
   1c04a:	b5e0      	push	{r5, r6, r7, lr}
   1c04c:	4d36      	ldr	r5, [pc, #216]	; (1c128 <__register_exitproc+0xe8>)
   1c04e:	b083      	sub	sp, #12
   1c050:	0006      	movs	r6, r0
   1c052:	6828      	ldr	r0, [r5, #0]
   1c054:	4698      	mov	r8, r3
   1c056:	000f      	movs	r7, r1
   1c058:	4691      	mov	r9, r2
   1c05a:	f7fe fdc1 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1c05e:	4b33      	ldr	r3, [pc, #204]	; (1c12c <__register_exitproc+0xec>)
   1c060:	681c      	ldr	r4, [r3, #0]
   1c062:	23a4      	movs	r3, #164	; 0xa4
   1c064:	005b      	lsls	r3, r3, #1
   1c066:	58e0      	ldr	r0, [r4, r3]
   1c068:	2800      	cmp	r0, #0
   1c06a:	d052      	beq.n	1c112 <__register_exitproc+0xd2>
   1c06c:	6843      	ldr	r3, [r0, #4]
   1c06e:	2b1f      	cmp	r3, #31
   1c070:	dc13      	bgt.n	1c09a <__register_exitproc+0x5a>
   1c072:	1c5a      	adds	r2, r3, #1
   1c074:	9201      	str	r2, [sp, #4]
   1c076:	2e00      	cmp	r6, #0
   1c078:	d128      	bne.n	1c0cc <__register_exitproc+0x8c>
   1c07a:	9a01      	ldr	r2, [sp, #4]
   1c07c:	3302      	adds	r3, #2
   1c07e:	009b      	lsls	r3, r3, #2
   1c080:	6042      	str	r2, [r0, #4]
   1c082:	501f      	str	r7, [r3, r0]
   1c084:	6828      	ldr	r0, [r5, #0]
   1c086:	f7fe fdad 	bl	1abe4 <__retarget_lock_release_recursive>
   1c08a:	2000      	movs	r0, #0
   1c08c:	b003      	add	sp, #12
   1c08e:	bc3c      	pop	{r2, r3, r4, r5}
   1c090:	4690      	mov	r8, r2
   1c092:	4699      	mov	r9, r3
   1c094:	46a2      	mov	sl, r4
   1c096:	46ab      	mov	fp, r5
   1c098:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c09a:	4b25      	ldr	r3, [pc, #148]	; (1c130 <__register_exitproc+0xf0>)
   1c09c:	2b00      	cmp	r3, #0
   1c09e:	d03d      	beq.n	1c11c <__register_exitproc+0xdc>
   1c0a0:	20c8      	movs	r0, #200	; 0xc8
   1c0a2:	0040      	lsls	r0, r0, #1
   1c0a4:	f7fe fe18 	bl	1acd8 <malloc>
   1c0a8:	2800      	cmp	r0, #0
   1c0aa:	d037      	beq.n	1c11c <__register_exitproc+0xdc>
   1c0ac:	22a4      	movs	r2, #164	; 0xa4
   1c0ae:	2300      	movs	r3, #0
   1c0b0:	0052      	lsls	r2, r2, #1
   1c0b2:	58a1      	ldr	r1, [r4, r2]
   1c0b4:	6043      	str	r3, [r0, #4]
   1c0b6:	6001      	str	r1, [r0, #0]
   1c0b8:	50a0      	str	r0, [r4, r2]
   1c0ba:	3240      	adds	r2, #64	; 0x40
   1c0bc:	5083      	str	r3, [r0, r2]
   1c0be:	3204      	adds	r2, #4
   1c0c0:	5083      	str	r3, [r0, r2]
   1c0c2:	3301      	adds	r3, #1
   1c0c4:	9301      	str	r3, [sp, #4]
   1c0c6:	2300      	movs	r3, #0
   1c0c8:	2e00      	cmp	r6, #0
   1c0ca:	d0d6      	beq.n	1c07a <__register_exitproc+0x3a>
   1c0cc:	009a      	lsls	r2, r3, #2
   1c0ce:	4692      	mov	sl, r2
   1c0d0:	4482      	add	sl, r0
   1c0d2:	464a      	mov	r2, r9
   1c0d4:	2188      	movs	r1, #136	; 0x88
   1c0d6:	4654      	mov	r4, sl
   1c0d8:	5062      	str	r2, [r4, r1]
   1c0da:	22c4      	movs	r2, #196	; 0xc4
   1c0dc:	0052      	lsls	r2, r2, #1
   1c0de:	4691      	mov	r9, r2
   1c0e0:	4481      	add	r9, r0
   1c0e2:	464a      	mov	r2, r9
   1c0e4:	3987      	subs	r1, #135	; 0x87
   1c0e6:	4099      	lsls	r1, r3
   1c0e8:	6812      	ldr	r2, [r2, #0]
   1c0ea:	468b      	mov	fp, r1
   1c0ec:	430a      	orrs	r2, r1
   1c0ee:	4694      	mov	ip, r2
   1c0f0:	464a      	mov	r2, r9
   1c0f2:	4661      	mov	r1, ip
   1c0f4:	6011      	str	r1, [r2, #0]
   1c0f6:	2284      	movs	r2, #132	; 0x84
   1c0f8:	4641      	mov	r1, r8
   1c0fa:	0052      	lsls	r2, r2, #1
   1c0fc:	50a1      	str	r1, [r4, r2]
   1c0fe:	2e02      	cmp	r6, #2
   1c100:	d1bb      	bne.n	1c07a <__register_exitproc+0x3a>
   1c102:	0002      	movs	r2, r0
   1c104:	465c      	mov	r4, fp
   1c106:	328d      	adds	r2, #141	; 0x8d
   1c108:	32ff      	adds	r2, #255	; 0xff
   1c10a:	6811      	ldr	r1, [r2, #0]
   1c10c:	430c      	orrs	r4, r1
   1c10e:	6014      	str	r4, [r2, #0]
   1c110:	e7b3      	b.n	1c07a <__register_exitproc+0x3a>
   1c112:	0020      	movs	r0, r4
   1c114:	304d      	adds	r0, #77	; 0x4d
   1c116:	30ff      	adds	r0, #255	; 0xff
   1c118:	50e0      	str	r0, [r4, r3]
   1c11a:	e7a7      	b.n	1c06c <__register_exitproc+0x2c>
   1c11c:	6828      	ldr	r0, [r5, #0]
   1c11e:	f7fe fd61 	bl	1abe4 <__retarget_lock_release_recursive>
   1c122:	2001      	movs	r0, #1
   1c124:	4240      	negs	r0, r0
   1c126:	e7b1      	b.n	1c08c <__register_exitproc+0x4c>
   1c128:	20000498 	.word	0x20000498
   1c12c:	0001dedc 	.word	0x0001dedc
   1c130:	0001acd9 	.word	0x0001acd9

0001c134 <_calloc_r>:
   1c134:	b510      	push	{r4, lr}
   1c136:	4351      	muls	r1, r2
   1c138:	f7fe fdd8 	bl	1acec <_malloc_r>
   1c13c:	1e04      	subs	r4, r0, #0
   1c13e:	d01c      	beq.n	1c17a <_calloc_r+0x46>
   1c140:	0003      	movs	r3, r0
   1c142:	3b08      	subs	r3, #8
   1c144:	685a      	ldr	r2, [r3, #4]
   1c146:	2303      	movs	r3, #3
   1c148:	439a      	bics	r2, r3
   1c14a:	3a04      	subs	r2, #4
   1c14c:	2a24      	cmp	r2, #36	; 0x24
   1c14e:	d816      	bhi.n	1c17e <_calloc_r+0x4a>
   1c150:	0003      	movs	r3, r0
   1c152:	2a13      	cmp	r2, #19
   1c154:	d90d      	bls.n	1c172 <_calloc_r+0x3e>
   1c156:	2100      	movs	r1, #0
   1c158:	3308      	adds	r3, #8
   1c15a:	6001      	str	r1, [r0, #0]
   1c15c:	6041      	str	r1, [r0, #4]
   1c15e:	2a1b      	cmp	r2, #27
   1c160:	d907      	bls.n	1c172 <_calloc_r+0x3e>
   1c162:	6081      	str	r1, [r0, #8]
   1c164:	60c1      	str	r1, [r0, #12]
   1c166:	2a24      	cmp	r2, #36	; 0x24
   1c168:	d10d      	bne.n	1c186 <_calloc_r+0x52>
   1c16a:	0003      	movs	r3, r0
   1c16c:	6101      	str	r1, [r0, #16]
   1c16e:	3318      	adds	r3, #24
   1c170:	6141      	str	r1, [r0, #20]
   1c172:	2200      	movs	r2, #0
   1c174:	601a      	str	r2, [r3, #0]
   1c176:	605a      	str	r2, [r3, #4]
   1c178:	609a      	str	r2, [r3, #8]
   1c17a:	0020      	movs	r0, r4
   1c17c:	bd10      	pop	{r4, pc}
   1c17e:	2100      	movs	r1, #0
   1c180:	f7f9 ff22 	bl	15fc8 <memset>
   1c184:	e7f9      	b.n	1c17a <_calloc_r+0x46>
   1c186:	0003      	movs	r3, r0
   1c188:	3310      	adds	r3, #16
   1c18a:	e7f2      	b.n	1c172 <_calloc_r+0x3e>

0001c18c <_close_r>:
   1c18c:	2300      	movs	r3, #0
   1c18e:	b570      	push	{r4, r5, r6, lr}
   1c190:	4c06      	ldr	r4, [pc, #24]	; (1c1ac <_close_r+0x20>)
   1c192:	0005      	movs	r5, r0
   1c194:	0008      	movs	r0, r1
   1c196:	6023      	str	r3, [r4, #0]
   1c198:	f7e7 fc76 	bl	3a88 <_close>
   1c19c:	1c43      	adds	r3, r0, #1
   1c19e:	d000      	beq.n	1c1a2 <_close_r+0x16>
   1c1a0:	bd70      	pop	{r4, r5, r6, pc}
   1c1a2:	6823      	ldr	r3, [r4, #0]
   1c1a4:	2b00      	cmp	r3, #0
   1c1a6:	d0fb      	beq.n	1c1a0 <_close_r+0x14>
   1c1a8:	602b      	str	r3, [r5, #0]
   1c1aa:	e7f9      	b.n	1c1a0 <_close_r+0x14>
   1c1ac:	200027fc 	.word	0x200027fc

0001c1b0 <_fclose_r>:
   1c1b0:	b570      	push	{r4, r5, r6, lr}
   1c1b2:	0005      	movs	r5, r0
   1c1b4:	1e0c      	subs	r4, r1, #0
   1c1b6:	d040      	beq.n	1c23a <_fclose_r+0x8a>
   1c1b8:	2800      	cmp	r0, #0
   1c1ba:	d002      	beq.n	1c1c2 <_fclose_r+0x12>
   1c1bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c1be:	2b00      	cmp	r3, #0
   1c1c0:	d03e      	beq.n	1c240 <_fclose_r+0x90>
   1c1c2:	2601      	movs	r6, #1
   1c1c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c1c6:	4233      	tst	r3, r6
   1c1c8:	d133      	bne.n	1c232 <_fclose_r+0x82>
   1c1ca:	89a3      	ldrh	r3, [r4, #12]
   1c1cc:	059b      	lsls	r3, r3, #22
   1c1ce:	d543      	bpl.n	1c258 <_fclose_r+0xa8>
   1c1d0:	0021      	movs	r1, r4
   1c1d2:	0028      	movs	r0, r5
   1c1d4:	f7fe f8c0 	bl	1a358 <__sflush_r>
   1c1d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1c1da:	0006      	movs	r6, r0
   1c1dc:	2b00      	cmp	r3, #0
   1c1de:	d004      	beq.n	1c1ea <_fclose_r+0x3a>
   1c1e0:	69e1      	ldr	r1, [r4, #28]
   1c1e2:	0028      	movs	r0, r5
   1c1e4:	4798      	blx	r3
   1c1e6:	2800      	cmp	r0, #0
   1c1e8:	db44      	blt.n	1c274 <_fclose_r+0xc4>
   1c1ea:	89a3      	ldrh	r3, [r4, #12]
   1c1ec:	061b      	lsls	r3, r3, #24
   1c1ee:	d42a      	bmi.n	1c246 <_fclose_r+0x96>
   1c1f0:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1c1f2:	2900      	cmp	r1, #0
   1c1f4:	d008      	beq.n	1c208 <_fclose_r+0x58>
   1c1f6:	0023      	movs	r3, r4
   1c1f8:	3340      	adds	r3, #64	; 0x40
   1c1fa:	4299      	cmp	r1, r3
   1c1fc:	d002      	beq.n	1c204 <_fclose_r+0x54>
   1c1fe:	0028      	movs	r0, r5
   1c200:	f7fe fa56 	bl	1a6b0 <_free_r>
   1c204:	2300      	movs	r3, #0
   1c206:	6323      	str	r3, [r4, #48]	; 0x30
   1c208:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1c20a:	2900      	cmp	r1, #0
   1c20c:	d004      	beq.n	1c218 <_fclose_r+0x68>
   1c20e:	0028      	movs	r0, r5
   1c210:	f7fe fa4e 	bl	1a6b0 <_free_r>
   1c214:	2300      	movs	r3, #0
   1c216:	6463      	str	r3, [r4, #68]	; 0x44
   1c218:	f7fe f9d0 	bl	1a5bc <__sfp_lock_acquire>
   1c21c:	2300      	movs	r3, #0
   1c21e:	81a3      	strh	r3, [r4, #12]
   1c220:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c222:	07db      	lsls	r3, r3, #31
   1c224:	d514      	bpl.n	1c250 <_fclose_r+0xa0>
   1c226:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c228:	f7fe fcd8 	bl	1abdc <__retarget_lock_close_recursive>
   1c22c:	f7fe f9ce 	bl	1a5cc <__sfp_lock_release>
   1c230:	e004      	b.n	1c23c <_fclose_r+0x8c>
   1c232:	220c      	movs	r2, #12
   1c234:	5ea3      	ldrsh	r3, [r4, r2]
   1c236:	2b00      	cmp	r3, #0
   1c238:	d1ca      	bne.n	1c1d0 <_fclose_r+0x20>
   1c23a:	2600      	movs	r6, #0
   1c23c:	0030      	movs	r0, r6
   1c23e:	bd70      	pop	{r4, r5, r6, pc}
   1c240:	f7fe f98c 	bl	1a55c <__sinit>
   1c244:	e7bd      	b.n	1c1c2 <_fclose_r+0x12>
   1c246:	6921      	ldr	r1, [r4, #16]
   1c248:	0028      	movs	r0, r5
   1c24a:	f7fe fa31 	bl	1a6b0 <_free_r>
   1c24e:	e7cf      	b.n	1c1f0 <_fclose_r+0x40>
   1c250:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c252:	f7fe fcc7 	bl	1abe4 <__retarget_lock_release_recursive>
   1c256:	e7e6      	b.n	1c226 <_fclose_r+0x76>
   1c258:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c25a:	f7fe fcc1 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1c25e:	220c      	movs	r2, #12
   1c260:	5ea3      	ldrsh	r3, [r4, r2]
   1c262:	2b00      	cmp	r3, #0
   1c264:	d1b4      	bne.n	1c1d0 <_fclose_r+0x20>
   1c266:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c268:	401e      	ands	r6, r3
   1c26a:	d1e6      	bne.n	1c23a <_fclose_r+0x8a>
   1c26c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c26e:	f7fe fcb9 	bl	1abe4 <__retarget_lock_release_recursive>
   1c272:	e7e3      	b.n	1c23c <_fclose_r+0x8c>
   1c274:	2601      	movs	r6, #1
   1c276:	4276      	negs	r6, r6
   1c278:	e7b7      	b.n	1c1ea <_fclose_r+0x3a>
   1c27a:	46c0      	nop			; (mov r8, r8)

0001c27c <__fputwc>:
   1c27c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c27e:	46ce      	mov	lr, r9
   1c280:	4647      	mov	r7, r8
   1c282:	b580      	push	{r7, lr}
   1c284:	b085      	sub	sp, #20
   1c286:	4680      	mov	r8, r0
   1c288:	4689      	mov	r9, r1
   1c28a:	0014      	movs	r4, r2
   1c28c:	f000 f896 	bl	1c3bc <__locale_mb_cur_max>
   1c290:	2801      	cmp	r0, #1
   1c292:	d031      	beq.n	1c2f8 <__fputwc+0x7c>
   1c294:	0023      	movs	r3, r4
   1c296:	af03      	add	r7, sp, #12
   1c298:	335c      	adds	r3, #92	; 0x5c
   1c29a:	464a      	mov	r2, r9
   1c29c:	0039      	movs	r1, r7
   1c29e:	4640      	mov	r0, r8
   1c2a0:	f000 f938 	bl	1c514 <_wcrtomb_r>
   1c2a4:	0006      	movs	r6, r0
   1c2a6:	1c43      	adds	r3, r0, #1
   1c2a8:	d021      	beq.n	1c2ee <__fputwc+0x72>
   1c2aa:	2800      	cmp	r0, #0
   1c2ac:	d030      	beq.n	1c310 <__fputwc+0x94>
   1c2ae:	7839      	ldrb	r1, [r7, #0]
   1c2b0:	2500      	movs	r5, #0
   1c2b2:	e007      	b.n	1c2c4 <__fputwc+0x48>
   1c2b4:	6823      	ldr	r3, [r4, #0]
   1c2b6:	1c5a      	adds	r2, r3, #1
   1c2b8:	6022      	str	r2, [r4, #0]
   1c2ba:	7019      	strb	r1, [r3, #0]
   1c2bc:	3501      	adds	r5, #1
   1c2be:	42b5      	cmp	r5, r6
   1c2c0:	d226      	bcs.n	1c310 <__fputwc+0x94>
   1c2c2:	5d79      	ldrb	r1, [r7, r5]
   1c2c4:	68a3      	ldr	r3, [r4, #8]
   1c2c6:	3b01      	subs	r3, #1
   1c2c8:	60a3      	str	r3, [r4, #8]
   1c2ca:	2b00      	cmp	r3, #0
   1c2cc:	daf2      	bge.n	1c2b4 <__fputwc+0x38>
   1c2ce:	69a2      	ldr	r2, [r4, #24]
   1c2d0:	4293      	cmp	r3, r2
   1c2d2:	db01      	blt.n	1c2d8 <__fputwc+0x5c>
   1c2d4:	290a      	cmp	r1, #10
   1c2d6:	d1ed      	bne.n	1c2b4 <__fputwc+0x38>
   1c2d8:	0022      	movs	r2, r4
   1c2da:	4640      	mov	r0, r8
   1c2dc:	f000 f8bc 	bl	1c458 <__swbuf_r>
   1c2e0:	1c43      	adds	r3, r0, #1
   1c2e2:	d1eb      	bne.n	1c2bc <__fputwc+0x40>
   1c2e4:	b005      	add	sp, #20
   1c2e6:	bc0c      	pop	{r2, r3}
   1c2e8:	4690      	mov	r8, r2
   1c2ea:	4699      	mov	r9, r3
   1c2ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c2ee:	2240      	movs	r2, #64	; 0x40
   1c2f0:	89a3      	ldrh	r3, [r4, #12]
   1c2f2:	4313      	orrs	r3, r2
   1c2f4:	81a3      	strh	r3, [r4, #12]
   1c2f6:	e7f5      	b.n	1c2e4 <__fputwc+0x68>
   1c2f8:	464b      	mov	r3, r9
   1c2fa:	3b01      	subs	r3, #1
   1c2fc:	2bfe      	cmp	r3, #254	; 0xfe
   1c2fe:	d8c9      	bhi.n	1c294 <__fputwc+0x18>
   1c300:	466a      	mov	r2, sp
   1c302:	464b      	mov	r3, r9
   1c304:	71d3      	strb	r3, [r2, #7]
   1c306:	79d1      	ldrb	r1, [r2, #7]
   1c308:	af03      	add	r7, sp, #12
   1c30a:	7039      	strb	r1, [r7, #0]
   1c30c:	2601      	movs	r6, #1
   1c30e:	e7cf      	b.n	1c2b0 <__fputwc+0x34>
   1c310:	4648      	mov	r0, r9
   1c312:	e7e7      	b.n	1c2e4 <__fputwc+0x68>

0001c314 <_fputwc_r>:
   1c314:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1c316:	b570      	push	{r4, r5, r6, lr}
   1c318:	0005      	movs	r5, r0
   1c31a:	000e      	movs	r6, r1
   1c31c:	0014      	movs	r4, r2
   1c31e:	07db      	lsls	r3, r3, #31
   1c320:	d41e      	bmi.n	1c360 <_fputwc_r+0x4c>
   1c322:	230c      	movs	r3, #12
   1c324:	5ed2      	ldrsh	r2, [r2, r3]
   1c326:	b291      	uxth	r1, r2
   1c328:	058b      	lsls	r3, r1, #22
   1c32a:	d516      	bpl.n	1c35a <_fputwc_r+0x46>
   1c32c:	2380      	movs	r3, #128	; 0x80
   1c32e:	019b      	lsls	r3, r3, #6
   1c330:	4219      	tst	r1, r3
   1c332:	d104      	bne.n	1c33e <_fputwc_r+0x2a>
   1c334:	431a      	orrs	r2, r3
   1c336:	81a2      	strh	r2, [r4, #12]
   1c338:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1c33a:	4313      	orrs	r3, r2
   1c33c:	6663      	str	r3, [r4, #100]	; 0x64
   1c33e:	0028      	movs	r0, r5
   1c340:	0022      	movs	r2, r4
   1c342:	0031      	movs	r1, r6
   1c344:	f7ff ff9a 	bl	1c27c <__fputwc>
   1c348:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1c34a:	0005      	movs	r5, r0
   1c34c:	07db      	lsls	r3, r3, #31
   1c34e:	d402      	bmi.n	1c356 <_fputwc_r+0x42>
   1c350:	89a3      	ldrh	r3, [r4, #12]
   1c352:	059b      	lsls	r3, r3, #22
   1c354:	d508      	bpl.n	1c368 <_fputwc_r+0x54>
   1c356:	0028      	movs	r0, r5
   1c358:	bd70      	pop	{r4, r5, r6, pc}
   1c35a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c35c:	f7fe fc40 	bl	1abe0 <__retarget_lock_acquire_recursive>
   1c360:	230c      	movs	r3, #12
   1c362:	5ee2      	ldrsh	r2, [r4, r3]
   1c364:	b291      	uxth	r1, r2
   1c366:	e7e1      	b.n	1c32c <_fputwc_r+0x18>
   1c368:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1c36a:	f7fe fc3b 	bl	1abe4 <__retarget_lock_release_recursive>
   1c36e:	e7f2      	b.n	1c356 <_fputwc_r+0x42>

0001c370 <_fstat_r>:
   1c370:	2300      	movs	r3, #0
   1c372:	b570      	push	{r4, r5, r6, lr}
   1c374:	4c07      	ldr	r4, [pc, #28]	; (1c394 <_fstat_r+0x24>)
   1c376:	0005      	movs	r5, r0
   1c378:	0008      	movs	r0, r1
   1c37a:	0011      	movs	r1, r2
   1c37c:	6023      	str	r3, [r4, #0]
   1c37e:	f7e7 fb86 	bl	3a8e <_fstat>
   1c382:	1c43      	adds	r3, r0, #1
   1c384:	d000      	beq.n	1c388 <_fstat_r+0x18>
   1c386:	bd70      	pop	{r4, r5, r6, pc}
   1c388:	6823      	ldr	r3, [r4, #0]
   1c38a:	2b00      	cmp	r3, #0
   1c38c:	d0fb      	beq.n	1c386 <_fstat_r+0x16>
   1c38e:	602b      	str	r3, [r5, #0]
   1c390:	e7f9      	b.n	1c386 <_fstat_r+0x16>
   1c392:	46c0      	nop			; (mov r8, r8)
   1c394:	200027fc 	.word	0x200027fc

0001c398 <_isatty_r>:
   1c398:	2300      	movs	r3, #0
   1c39a:	b570      	push	{r4, r5, r6, lr}
   1c39c:	4c06      	ldr	r4, [pc, #24]	; (1c3b8 <_isatty_r+0x20>)
   1c39e:	0005      	movs	r5, r0
   1c3a0:	0008      	movs	r0, r1
   1c3a2:	6023      	str	r3, [r4, #0]
   1c3a4:	f7e7 fb78 	bl	3a98 <_isatty>
   1c3a8:	1c43      	adds	r3, r0, #1
   1c3aa:	d000      	beq.n	1c3ae <_isatty_r+0x16>
   1c3ac:	bd70      	pop	{r4, r5, r6, pc}
   1c3ae:	6823      	ldr	r3, [r4, #0]
   1c3b0:	2b00      	cmp	r3, #0
   1c3b2:	d0fb      	beq.n	1c3ac <_isatty_r+0x14>
   1c3b4:	602b      	str	r3, [r5, #0]
   1c3b6:	e7f9      	b.n	1c3ac <_isatty_r+0x14>
   1c3b8:	200027fc 	.word	0x200027fc

0001c3bc <__locale_mb_cur_max>:
   1c3bc:	4b05      	ldr	r3, [pc, #20]	; (1c3d4 <__locale_mb_cur_max+0x18>)
   1c3be:	681b      	ldr	r3, [r3, #0]
   1c3c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c3c2:	2b00      	cmp	r3, #0
   1c3c4:	d003      	beq.n	1c3ce <__locale_mb_cur_max+0x12>
   1c3c6:	2294      	movs	r2, #148	; 0x94
   1c3c8:	0052      	lsls	r2, r2, #1
   1c3ca:	5c98      	ldrb	r0, [r3, r2]
   1c3cc:	4770      	bx	lr
   1c3ce:	4b02      	ldr	r3, [pc, #8]	; (1c3d8 <__locale_mb_cur_max+0x1c>)
   1c3d0:	e7f9      	b.n	1c3c6 <__locale_mb_cur_max+0xa>
   1c3d2:	46c0      	nop			; (mov r8, r8)
   1c3d4:	20000068 	.word	0x20000068
   1c3d8:	200008ac 	.word	0x200008ac

0001c3dc <_lseek_r>:
   1c3dc:	b570      	push	{r4, r5, r6, lr}
   1c3de:	0005      	movs	r5, r0
   1c3e0:	0008      	movs	r0, r1
   1c3e2:	0011      	movs	r1, r2
   1c3e4:	2200      	movs	r2, #0
   1c3e6:	4c06      	ldr	r4, [pc, #24]	; (1c400 <_lseek_r+0x24>)
   1c3e8:	6022      	str	r2, [r4, #0]
   1c3ea:	001a      	movs	r2, r3
   1c3ec:	f7e7 fb56 	bl	3a9c <_lseek>
   1c3f0:	1c43      	adds	r3, r0, #1
   1c3f2:	d000      	beq.n	1c3f6 <_lseek_r+0x1a>
   1c3f4:	bd70      	pop	{r4, r5, r6, pc}
   1c3f6:	6823      	ldr	r3, [r4, #0]
   1c3f8:	2b00      	cmp	r3, #0
   1c3fa:	d0fb      	beq.n	1c3f4 <_lseek_r+0x18>
   1c3fc:	602b      	str	r3, [r5, #0]
   1c3fe:	e7f9      	b.n	1c3f4 <_lseek_r+0x18>
   1c400:	200027fc 	.word	0x200027fc

0001c404 <__ascii_mbtowc>:
   1c404:	b082      	sub	sp, #8
   1c406:	2900      	cmp	r1, #0
   1c408:	d00a      	beq.n	1c420 <__ascii_mbtowc+0x1c>
   1c40a:	2a00      	cmp	r2, #0
   1c40c:	d00b      	beq.n	1c426 <__ascii_mbtowc+0x22>
   1c40e:	2b00      	cmp	r3, #0
   1c410:	d00b      	beq.n	1c42a <__ascii_mbtowc+0x26>
   1c412:	7813      	ldrb	r3, [r2, #0]
   1c414:	600b      	str	r3, [r1, #0]
   1c416:	7810      	ldrb	r0, [r2, #0]
   1c418:	1e43      	subs	r3, r0, #1
   1c41a:	4198      	sbcs	r0, r3
   1c41c:	b002      	add	sp, #8
   1c41e:	4770      	bx	lr
   1c420:	a901      	add	r1, sp, #4
   1c422:	2a00      	cmp	r2, #0
   1c424:	d1f3      	bne.n	1c40e <__ascii_mbtowc+0xa>
   1c426:	2000      	movs	r0, #0
   1c428:	e7f8      	b.n	1c41c <__ascii_mbtowc+0x18>
   1c42a:	2002      	movs	r0, #2
   1c42c:	4240      	negs	r0, r0
   1c42e:	e7f5      	b.n	1c41c <__ascii_mbtowc+0x18>

0001c430 <_read_r>:
   1c430:	b570      	push	{r4, r5, r6, lr}
   1c432:	0005      	movs	r5, r0
   1c434:	0008      	movs	r0, r1
   1c436:	0011      	movs	r1, r2
   1c438:	2200      	movs	r2, #0
   1c43a:	4c06      	ldr	r4, [pc, #24]	; (1c454 <_read_r+0x24>)
   1c43c:	6022      	str	r2, [r4, #0]
   1c43e:	001a      	movs	r2, r3
   1c440:	f7e7 fac6 	bl	39d0 <_read>
   1c444:	1c43      	adds	r3, r0, #1
   1c446:	d000      	beq.n	1c44a <_read_r+0x1a>
   1c448:	bd70      	pop	{r4, r5, r6, pc}
   1c44a:	6823      	ldr	r3, [r4, #0]
   1c44c:	2b00      	cmp	r3, #0
   1c44e:	d0fb      	beq.n	1c448 <_read_r+0x18>
   1c450:	602b      	str	r3, [r5, #0]
   1c452:	e7f9      	b.n	1c448 <_read_r+0x18>
   1c454:	200027fc 	.word	0x200027fc

0001c458 <__swbuf_r>:
   1c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c45a:	0006      	movs	r6, r0
   1c45c:	000d      	movs	r5, r1
   1c45e:	0014      	movs	r4, r2
   1c460:	2800      	cmp	r0, #0
   1c462:	d002      	beq.n	1c46a <__swbuf_r+0x12>
   1c464:	6b83      	ldr	r3, [r0, #56]	; 0x38
   1c466:	2b00      	cmp	r3, #0
   1c468:	d04e      	beq.n	1c508 <__swbuf_r+0xb0>
   1c46a:	69a3      	ldr	r3, [r4, #24]
   1c46c:	60a3      	str	r3, [r4, #8]
   1c46e:	230c      	movs	r3, #12
   1c470:	5ee0      	ldrsh	r0, [r4, r3]
   1c472:	b281      	uxth	r1, r0
   1c474:	070b      	lsls	r3, r1, #28
   1c476:	d53c      	bpl.n	1c4f2 <__swbuf_r+0x9a>
   1c478:	6923      	ldr	r3, [r4, #16]
   1c47a:	2b00      	cmp	r3, #0
   1c47c:	d039      	beq.n	1c4f2 <__swbuf_r+0x9a>
   1c47e:	22ff      	movs	r2, #255	; 0xff
   1c480:	b2ef      	uxtb	r7, r5
   1c482:	4015      	ands	r5, r2
   1c484:	2280      	movs	r2, #128	; 0x80
   1c486:	0192      	lsls	r2, r2, #6
   1c488:	4211      	tst	r1, r2
   1c48a:	d015      	beq.n	1c4b8 <__swbuf_r+0x60>
   1c48c:	6822      	ldr	r2, [r4, #0]
   1c48e:	6961      	ldr	r1, [r4, #20]
   1c490:	1ad3      	subs	r3, r2, r3
   1c492:	428b      	cmp	r3, r1
   1c494:	da1b      	bge.n	1c4ce <__swbuf_r+0x76>
   1c496:	3301      	adds	r3, #1
   1c498:	68a1      	ldr	r1, [r4, #8]
   1c49a:	3901      	subs	r1, #1
   1c49c:	60a1      	str	r1, [r4, #8]
   1c49e:	1c51      	adds	r1, r2, #1
   1c4a0:	6021      	str	r1, [r4, #0]
   1c4a2:	7017      	strb	r7, [r2, #0]
   1c4a4:	6962      	ldr	r2, [r4, #20]
   1c4a6:	429a      	cmp	r2, r3
   1c4a8:	d01a      	beq.n	1c4e0 <__swbuf_r+0x88>
   1c4aa:	89a3      	ldrh	r3, [r4, #12]
   1c4ac:	07db      	lsls	r3, r3, #31
   1c4ae:	d501      	bpl.n	1c4b4 <__swbuf_r+0x5c>
   1c4b0:	2d0a      	cmp	r5, #10
   1c4b2:	d015      	beq.n	1c4e0 <__swbuf_r+0x88>
   1c4b4:	0028      	movs	r0, r5
   1c4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c4b8:	4302      	orrs	r2, r0
   1c4ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
   1c4bc:	81a2      	strh	r2, [r4, #12]
   1c4be:	4a14      	ldr	r2, [pc, #80]	; (1c510 <__swbuf_r+0xb8>)
   1c4c0:	400a      	ands	r2, r1
   1c4c2:	6662      	str	r2, [r4, #100]	; 0x64
   1c4c4:	6961      	ldr	r1, [r4, #20]
   1c4c6:	6822      	ldr	r2, [r4, #0]
   1c4c8:	1ad3      	subs	r3, r2, r3
   1c4ca:	428b      	cmp	r3, r1
   1c4cc:	dbe3      	blt.n	1c496 <__swbuf_r+0x3e>
   1c4ce:	0021      	movs	r1, r4
   1c4d0:	0030      	movs	r0, r6
   1c4d2:	f7fd ffe9 	bl	1a4a8 <_fflush_r>
   1c4d6:	2800      	cmp	r0, #0
   1c4d8:	d108      	bne.n	1c4ec <__swbuf_r+0x94>
   1c4da:	6822      	ldr	r2, [r4, #0]
   1c4dc:	2301      	movs	r3, #1
   1c4de:	e7db      	b.n	1c498 <__swbuf_r+0x40>
   1c4e0:	0021      	movs	r1, r4
   1c4e2:	0030      	movs	r0, r6
   1c4e4:	f7fd ffe0 	bl	1a4a8 <_fflush_r>
   1c4e8:	2800      	cmp	r0, #0
   1c4ea:	d0e3      	beq.n	1c4b4 <__swbuf_r+0x5c>
   1c4ec:	2501      	movs	r5, #1
   1c4ee:	426d      	negs	r5, r5
   1c4f0:	e7e0      	b.n	1c4b4 <__swbuf_r+0x5c>
   1c4f2:	0021      	movs	r1, r4
   1c4f4:	0030      	movs	r0, r6
   1c4f6:	f7fc fe43 	bl	19180 <__swsetup_r>
   1c4fa:	2800      	cmp	r0, #0
   1c4fc:	d1f6      	bne.n	1c4ec <__swbuf_r+0x94>
   1c4fe:	230c      	movs	r3, #12
   1c500:	5ee0      	ldrsh	r0, [r4, r3]
   1c502:	6923      	ldr	r3, [r4, #16]
   1c504:	b281      	uxth	r1, r0
   1c506:	e7ba      	b.n	1c47e <__swbuf_r+0x26>
   1c508:	f7fe f828 	bl	1a55c <__sinit>
   1c50c:	e7ad      	b.n	1c46a <__swbuf_r+0x12>
   1c50e:	46c0      	nop			; (mov r8, r8)
   1c510:	ffffdfff 	.word	0xffffdfff

0001c514 <_wcrtomb_r>:
   1c514:	b570      	push	{r4, r5, r6, lr}
   1c516:	001d      	movs	r5, r3
   1c518:	4b11      	ldr	r3, [pc, #68]	; (1c560 <_wcrtomb_r+0x4c>)
   1c51a:	b084      	sub	sp, #16
   1c51c:	681b      	ldr	r3, [r3, #0]
   1c51e:	0004      	movs	r4, r0
   1c520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   1c522:	2900      	cmp	r1, #0
   1c524:	d00e      	beq.n	1c544 <_wcrtomb_r+0x30>
   1c526:	2b00      	cmp	r3, #0
   1c528:	d016      	beq.n	1c558 <_wcrtomb_r+0x44>
   1c52a:	20e0      	movs	r0, #224	; 0xe0
   1c52c:	581e      	ldr	r6, [r3, r0]
   1c52e:	002b      	movs	r3, r5
   1c530:	0020      	movs	r0, r4
   1c532:	47b0      	blx	r6
   1c534:	1c43      	adds	r3, r0, #1
   1c536:	d103      	bne.n	1c540 <_wcrtomb_r+0x2c>
   1c538:	2300      	movs	r3, #0
   1c53a:	602b      	str	r3, [r5, #0]
   1c53c:	338a      	adds	r3, #138	; 0x8a
   1c53e:	6023      	str	r3, [r4, #0]
   1c540:	b004      	add	sp, #16
   1c542:	bd70      	pop	{r4, r5, r6, pc}
   1c544:	2b00      	cmp	r3, #0
   1c546:	d009      	beq.n	1c55c <_wcrtomb_r+0x48>
   1c548:	22e0      	movs	r2, #224	; 0xe0
   1c54a:	a901      	add	r1, sp, #4
   1c54c:	589e      	ldr	r6, [r3, r2]
   1c54e:	0020      	movs	r0, r4
   1c550:	002b      	movs	r3, r5
   1c552:	2200      	movs	r2, #0
   1c554:	47b0      	blx	r6
   1c556:	e7ed      	b.n	1c534 <_wcrtomb_r+0x20>
   1c558:	4b02      	ldr	r3, [pc, #8]	; (1c564 <_wcrtomb_r+0x50>)
   1c55a:	e7e6      	b.n	1c52a <_wcrtomb_r+0x16>
   1c55c:	4b01      	ldr	r3, [pc, #4]	; (1c564 <_wcrtomb_r+0x50>)
   1c55e:	e7f3      	b.n	1c548 <_wcrtomb_r+0x34>
   1c560:	20000068 	.word	0x20000068
   1c564:	200008ac 	.word	0x200008ac

0001c568 <__ascii_wctomb>:
   1c568:	2900      	cmp	r1, #0
   1c56a:	d004      	beq.n	1c576 <__ascii_wctomb+0xe>
   1c56c:	2aff      	cmp	r2, #255	; 0xff
   1c56e:	d804      	bhi.n	1c57a <__ascii_wctomb+0x12>
   1c570:	2001      	movs	r0, #1
   1c572:	700a      	strb	r2, [r1, #0]
   1c574:	4770      	bx	lr
   1c576:	2000      	movs	r0, #0
   1c578:	e7fc      	b.n	1c574 <__ascii_wctomb+0xc>
   1c57a:	238a      	movs	r3, #138	; 0x8a
   1c57c:	6003      	str	r3, [r0, #0]
   1c57e:	2001      	movs	r0, #1
   1c580:	4240      	negs	r0, r0
   1c582:	e7f7      	b.n	1c574 <__ascii_wctomb+0xc>

0001c584 <__aeabi_dcmpun>:
   1c584:	b570      	push	{r4, r5, r6, lr}
   1c586:	4e0e      	ldr	r6, [pc, #56]	; (1c5c0 <__aeabi_dcmpun+0x3c>)
   1c588:	030d      	lsls	r5, r1, #12
   1c58a:	031c      	lsls	r4, r3, #12
   1c58c:	0049      	lsls	r1, r1, #1
   1c58e:	005b      	lsls	r3, r3, #1
   1c590:	0b2d      	lsrs	r5, r5, #12
   1c592:	0d49      	lsrs	r1, r1, #21
   1c594:	0b24      	lsrs	r4, r4, #12
   1c596:	0d5b      	lsrs	r3, r3, #21
   1c598:	42b1      	cmp	r1, r6
   1c59a:	d004      	beq.n	1c5a6 <__aeabi_dcmpun+0x22>
   1c59c:	4908      	ldr	r1, [pc, #32]	; (1c5c0 <__aeabi_dcmpun+0x3c>)
   1c59e:	2000      	movs	r0, #0
   1c5a0:	428b      	cmp	r3, r1
   1c5a2:	d008      	beq.n	1c5b6 <__aeabi_dcmpun+0x32>
   1c5a4:	bd70      	pop	{r4, r5, r6, pc}
   1c5a6:	4305      	orrs	r5, r0
   1c5a8:	2001      	movs	r0, #1
   1c5aa:	2d00      	cmp	r5, #0
   1c5ac:	d1fa      	bne.n	1c5a4 <__aeabi_dcmpun+0x20>
   1c5ae:	4904      	ldr	r1, [pc, #16]	; (1c5c0 <__aeabi_dcmpun+0x3c>)
   1c5b0:	2000      	movs	r0, #0
   1c5b2:	428b      	cmp	r3, r1
   1c5b4:	d1f6      	bne.n	1c5a4 <__aeabi_dcmpun+0x20>
   1c5b6:	4314      	orrs	r4, r2
   1c5b8:	0020      	movs	r0, r4
   1c5ba:	1e44      	subs	r4, r0, #1
   1c5bc:	41a0      	sbcs	r0, r4
   1c5be:	e7f1      	b.n	1c5a4 <__aeabi_dcmpun+0x20>
   1c5c0:	000007ff 	.word	0x000007ff
   1c5c4:	0000060c 	.word	0x0000060c
   1c5c8:	00000856 	.word	0x00000856
   1c5cc:	00000856 	.word	0x00000856
   1c5d0:	00000856 	.word	0x00000856
   1c5d4:	00000856 	.word	0x00000856
   1c5d8:	00000856 	.word	0x00000856
   1c5dc:	00000856 	.word	0x00000856
   1c5e0:	00000856 	.word	0x00000856
   1c5e4:	00000856 	.word	0x00000856
   1c5e8:	00000856 	.word	0x00000856
   1c5ec:	00000856 	.word	0x00000856
   1c5f0:	00000856 	.word	0x00000856
   1c5f4:	00000856 	.word	0x00000856
   1c5f8:	00000856 	.word	0x00000856
   1c5fc:	00000856 	.word	0x00000856
   1c600:	00000856 	.word	0x00000856
   1c604:	000005f4 	.word	0x000005f4
   1c608:	00000856 	.word	0x00000856
   1c60c:	00000856 	.word	0x00000856
   1c610:	00000856 	.word	0x00000856
   1c614:	00000856 	.word	0x00000856
   1c618:	00000856 	.word	0x00000856
   1c61c:	00000856 	.word	0x00000856
   1c620:	00000856 	.word	0x00000856
   1c624:	00000856 	.word	0x00000856
   1c628:	00000856 	.word	0x00000856
   1c62c:	00000856 	.word	0x00000856
   1c630:	00000856 	.word	0x00000856
   1c634:	00000856 	.word	0x00000856
   1c638:	00000856 	.word	0x00000856
   1c63c:	00000856 	.word	0x00000856
   1c640:	00000856 	.word	0x00000856
   1c644:	00000604 	.word	0x00000604
   1c648:	00000856 	.word	0x00000856
   1c64c:	00000856 	.word	0x00000856
   1c650:	00000856 	.word	0x00000856
   1c654:	00000856 	.word	0x00000856
   1c658:	00000856 	.word	0x00000856
   1c65c:	00000856 	.word	0x00000856
   1c660:	00000856 	.word	0x00000856
   1c664:	00000856 	.word	0x00000856
   1c668:	00000856 	.word	0x00000856
   1c66c:	00000856 	.word	0x00000856
   1c670:	00000856 	.word	0x00000856
   1c674:	00000856 	.word	0x00000856
   1c678:	00000856 	.word	0x00000856
   1c67c:	00000856 	.word	0x00000856
   1c680:	00000856 	.word	0x00000856
   1c684:	000005fc 	.word	0x000005fc
   1c688:	00000614 	.word	0x00000614
   1c68c:	000005dc 	.word	0x000005dc
   1c690:	000005ec 	.word	0x000005ec
   1c694:	000005e4 	.word	0x000005e4
   1c698:	0000ffff 	.word	0x0000ffff
   1c69c:	0000ffff 	.word	0x0000ffff
   1c6a0:	00000004 	.word	0x00000004
   1c6a4:	00000005 	.word	0x00000005
   1c6a8:	00000006 	.word	0x00000006
   1c6ac:	00000007 	.word	0x00000007
   1c6b0:	00000020 	.word	0x00000020
   1c6b4:	0000ffff 	.word	0x0000ffff
   1c6b8:	00000022 	.word	0x00000022
   1c6bc:	00000023 	.word	0x00000023
   1c6c0:	0000ffff 	.word	0x0000ffff
   1c6c4:	0000ffff 	.word	0x0000ffff
   1c6c8:	0000ffff 	.word	0x0000ffff
   1c6cc:	0000ffff 	.word	0x0000ffff
   1c6d0:	00000008 	.word	0x00000008
   1c6d4:	00000009 	.word	0x00000009
   1c6d8:	0000000a 	.word	0x0000000a
   1c6dc:	0000000b 	.word	0x0000000b
   1c6e0:	0000ffff 	.word	0x0000ffff
   1c6e4:	0000ffff 	.word	0x0000ffff
   1c6e8:	0000ffff 	.word	0x0000ffff
   1c6ec:	0000ffff 	.word	0x0000ffff
   1c6f0:	00000e2a 	.word	0x00000e2a
   1c6f4:	00000e2a 	.word	0x00000e2a
   1c6f8:	00000e06 	.word	0x00000e06
   1c6fc:	00000e2a 	.word	0x00000e2a
   1c700:	00000e06 	.word	0x00000e06
   1c704:	00000dec 	.word	0x00000dec
   1c708:	00000dec 	.word	0x00000dec
   1c70c:	00000e2a 	.word	0x00000e2a
   1c710:	00000e2a 	.word	0x00000e2a
   1c714:	00000e2a 	.word	0x00000e2a
   1c718:	00000e2a 	.word	0x00000e2a
   1c71c:	00000e2a 	.word	0x00000e2a
   1c720:	00000e2a 	.word	0x00000e2a
   1c724:	00000e2a 	.word	0x00000e2a
   1c728:	00000e2a 	.word	0x00000e2a
   1c72c:	00000e2a 	.word	0x00000e2a
   1c730:	00000e2a 	.word	0x00000e2a
   1c734:	00000e2a 	.word	0x00000e2a
   1c738:	00000e2a 	.word	0x00000e2a
   1c73c:	00000e2a 	.word	0x00000e2a
   1c740:	00000e2a 	.word	0x00000e2a
   1c744:	00000e2a 	.word	0x00000e2a
   1c748:	00000e2a 	.word	0x00000e2a
   1c74c:	00000e2a 	.word	0x00000e2a
   1c750:	00000e2a 	.word	0x00000e2a
   1c754:	00000e2a 	.word	0x00000e2a
   1c758:	00000e06 	.word	0x00000e06
   1c75c:	00000e2a 	.word	0x00000e2a
   1c760:	00000e06 	.word	0x00000e06
   1c764:	00000e2a 	.word	0x00000e2a
   1c768:	00000e2a 	.word	0x00000e2a
   1c76c:	00000e2a 	.word	0x00000e2a
   1c770:	00000e2a 	.word	0x00000e2a
   1c774:	00000e2a 	.word	0x00000e2a
   1c778:	00000e2a 	.word	0x00000e2a
   1c77c:	00000e2a 	.word	0x00000e2a
   1c780:	00000e2a 	.word	0x00000e2a
   1c784:	00000e2a 	.word	0x00000e2a
   1c788:	00000e2a 	.word	0x00000e2a
   1c78c:	00000e2a 	.word	0x00000e2a
   1c790:	00000e2a 	.word	0x00000e2a
   1c794:	00000e2a 	.word	0x00000e2a
   1c798:	00000e2a 	.word	0x00000e2a
   1c79c:	00000e2a 	.word	0x00000e2a
   1c7a0:	00000e2a 	.word	0x00000e2a
   1c7a4:	00000e2a 	.word	0x00000e2a
   1c7a8:	00000e2a 	.word	0x00000e2a
   1c7ac:	00000e2a 	.word	0x00000e2a
   1c7b0:	00000e2a 	.word	0x00000e2a
   1c7b4:	00000e2a 	.word	0x00000e2a
   1c7b8:	00000e2a 	.word	0x00000e2a
   1c7bc:	00000e2a 	.word	0x00000e2a
   1c7c0:	00000e2a 	.word	0x00000e2a
   1c7c4:	00000e2a 	.word	0x00000e2a
   1c7c8:	00000e2a 	.word	0x00000e2a
   1c7cc:	00000e2a 	.word	0x00000e2a
   1c7d0:	00000e2a 	.word	0x00000e2a
   1c7d4:	00000e2a 	.word	0x00000e2a
   1c7d8:	00000e2a 	.word	0x00000e2a
   1c7dc:	00000e2a 	.word	0x00000e2a
   1c7e0:	00000e2a 	.word	0x00000e2a
   1c7e4:	00000e2a 	.word	0x00000e2a
   1c7e8:	00000e2a 	.word	0x00000e2a
   1c7ec:	00000e2a 	.word	0x00000e2a
   1c7f0:	00000e06 	.word	0x00000e06
   1c7f4:	00000e06 	.word	0x00000e06
   1c7f8:	00000e0e 	.word	0x00000e0e
   1c7fc:	00000e0e 	.word	0x00000e0e
   1c800:	00000e0e 	.word	0x00000e0e
   1c804:	00000e0e 	.word	0x00000e0e
   1c808:	42000000 	.word	0x42000000
   1c80c:	42000400 	.word	0x42000400
   1c810:	42000800 	.word	0x42000800
   1c814:	42000c00 	.word	0x42000c00
   1c818:	42001000 	.word	0x42001000
   1c81c:	43000400 	.word	0x43000400
   1c820:	00002bc6 	.word	0x00002bc6
   1c824:	00002bc2 	.word	0x00002bc2
   1c828:	00002bc2 	.word	0x00002bc2
   1c82c:	00002c28 	.word	0x00002c28
   1c830:	00002c28 	.word	0x00002c28
   1c834:	00002bdc 	.word	0x00002bdc
   1c838:	00002bcc 	.word	0x00002bcc
   1c83c:	00002be2 	.word	0x00002be2
   1c840:	00002c16 	.word	0x00002c16
   1c844:	00002dcc 	.word	0x00002dcc
   1c848:	00002dac 	.word	0x00002dac
   1c84c:	00002dac 	.word	0x00002dac
   1c850:	00002e46 	.word	0x00002e46
   1c854:	00002dbe 	.word	0x00002dbe
   1c858:	00002dda 	.word	0x00002dda
   1c85c:	00002db0 	.word	0x00002db0
   1c860:	00002de8 	.word	0x00002de8
   1c864:	00002e2a 	.word	0x00002e2a
   1c868:	00002e84 	.word	0x00002e84
   1c86c:	00002ec6 	.word	0x00002ec6
   1c870:	00002ec6 	.word	0x00002ec6
   1c874:	00002ec6 	.word	0x00002ec6
   1c878:	00002e76 	.word	0x00002e76
   1c87c:	00002e92 	.word	0x00002e92
   1c880:	00002e68 	.word	0x00002e68
   1c884:	00002ea0 	.word	0x00002ea0
   1c888:	00002eb6 	.word	0x00002eb6
   1c88c:	0000366e 	.word	0x0000366e
   1c890:	00003764 	.word	0x00003764
   1c894:	0000376e 	.word	0x0000376e
   1c898:	00003778 	.word	0x00003778
   1c89c:	00003782 	.word	0x00003782
   1c8a0:	000037b4 	.word	0x000037b4
   1c8a4:	000037be 	.word	0x000037be
   1c8a8:	000037c8 	.word	0x000037c8
   1c8ac:	000037d2 	.word	0x000037d2
   1c8b0:	000037dc 	.word	0x000037dc
   1c8b4:	42002000 	.word	0x42002000
   1c8b8:	42002400 	.word	0x42002400
   1c8bc:	42002800 	.word	0x42002800
   1c8c0:	42002c00 	.word	0x42002c00
   1c8c4:	43000800 	.word	0x43000800
   1c8c8:	00000002 	.word	0x00000002
   1c8cc:	00000100 	.word	0x00000100
   1c8d0:	00000002 	.word	0x00000002
   1c8d4:	00000200 	.word	0x00000200
   1c8d8:	00000002 	.word	0x00000002
   1c8dc:	00000400 	.word	0x00000400
   1c8e0:	00000002 	.word	0x00000002
   1c8e4:	00000800 	.word	0x00000800
   1c8e8:	00000003 	.word	0x00000003
   1c8ec:	00000004 	.word	0x00000004
   1c8f0:	00004030 	.word	0x00004030
   1c8f4:	00003f68 	.word	0x00003f68
   1c8f8:	00003f70 	.word	0x00003f70
   1c8fc:	00003f78 	.word	0x00003f78
   1c900:	00003f80 	.word	0x00003f80
   1c904:	00003f88 	.word	0x00003f88
   1c908:	00003f90 	.word	0x00003f90
   1c90c:	00003f98 	.word	0x00003f98
   1c910:	00003f04 	.word	0x00003f04
   1c914:	00003fa0 	.word	0x00003fa0
   1c918:	00003fa8 	.word	0x00003fa8
   1c91c:	00003fb0 	.word	0x00003fb0
   1c920:	00003fb8 	.word	0x00003fb8
   1c924:	00003fc0 	.word	0x00003fc0
   1c928:	00003fc8 	.word	0x00003fc8
   1c92c:	00003fd0 	.word	0x00003fd0
   1c930:	00003fd8 	.word	0x00003fd8
   1c934:	00003fe0 	.word	0x00003fe0
   1c938:	00003fe8 	.word	0x00003fe8
   1c93c:	00003ff0 	.word	0x00003ff0
   1c940:	00003ff8 	.word	0x00003ff8
   1c944:	00004000 	.word	0x00004000
   1c948:	00004030 	.word	0x00004030
   1c94c:	00004008 	.word	0x00004008
   1c950:	00004010 	.word	0x00004010
   1c954:	00004018 	.word	0x00004018
   1c958:	00004020 	.word	0x00004020
   1c95c:	00004030 	.word	0x00004030
   1c960:	00004030 	.word	0x00004030
   1c964:	00004030 	.word	0x00004030
   1c968:	00004028 	.word	0x00004028
   1c96c:	0000406c 	.word	0x0000406c
   1c970:	00004074 	.word	0x00004074
   1c974:	0000407c 	.word	0x0000407c
   1c978:	00004084 	.word	0x00004084
   1c97c:	0000408c 	.word	0x0000408c
   1c980:	0000409c 	.word	0x0000409c
   1c984:	000040a4 	.word	0x000040a4
   1c988:	000040ac 	.word	0x000040ac
   1c98c:	00004048 	.word	0x00004048
   1c990:	000040b4 	.word	0x000040b4
   1c994:	000040bc 	.word	0x000040bc
   1c998:	000040c4 	.word	0x000040c4
   1c99c:	000040cc 	.word	0x000040cc
   1c9a0:	000040d4 	.word	0x000040d4
   1c9a4:	000040dc 	.word	0x000040dc
   1c9a8:	000040e4 	.word	0x000040e4
   1c9ac:	000040ec 	.word	0x000040ec
   1c9b0:	000040f4 	.word	0x000040f4
   1c9b4:	000040fc 	.word	0x000040fc
   1c9b8:	00004104 	.word	0x00004104
   1c9bc:	0000410c 	.word	0x0000410c
   1c9c0:	00004114 	.word	0x00004114
   1c9c4:	00004144 	.word	0x00004144
   1c9c8:	0000411c 	.word	0x0000411c
   1c9cc:	00004124 	.word	0x00004124
   1c9d0:	0000412c 	.word	0x0000412c
   1c9d4:	00004134 	.word	0x00004134
   1c9d8:	00004094 	.word	0x00004094
   1c9dc:	00004144 	.word	0x00004144
   1c9e0:	00004144 	.word	0x00004144
   1c9e4:	0000413c 	.word	0x0000413c
   1c9e8:	0000498c 	.word	0x0000498c
   1c9ec:	0000499c 	.word	0x0000499c
   1c9f0:	000049a4 	.word	0x000049a4
   1c9f4:	000049ac 	.word	0x000049ac
   1c9f8:	000049b4 	.word	0x000049b4
   1c9fc:	000049bc 	.word	0x000049bc
   1ca00:	000049c4 	.word	0x000049c4
   1ca04:	000049cc 	.word	0x000049cc
   1ca08:	000049d4 	.word	0x000049d4
   1ca0c:	00004994 	.word	0x00004994
   1ca10:	000049ec 	.word	0x000049ec
   1ca14:	000049e4 	.word	0x000049e4
   1ca18:	000049ec 	.word	0x000049ec
   1ca1c:	000049dc 	.word	0x000049dc
   1ca20:	20434441 	.word	0x20434441
   1ca24:	6c6c6143 	.word	0x6c6c6143
   1ca28:	6b636162 	.word	0x6b636162
   1ca2c:	0d212121 	.word	0x0d212121
   1ca30:	00000000 	.word	0x00000000

0001ca34 <appTaskHandlers>:
   1ca34:	00004245 00004ae1 6c730a0d 5f706565     EB...J....sleep_
   1ca44:	25206b6f 6d20646c 000a0d73              ok %ld ms...

0001ca50 <bandStrings>:
   1ca50:	0001d5f8 0001d60c 0001cf20 0001d614     ........ .......
   1ca60:	0001d61c 0001d624 0001d62c 0001d634     ....$...,...4...
   1ca70:	0001d63c 0001d648                       <...H...

0001ca78 <demoMcastAppsKey>:
   1ca78:	16157e2b a6d2ae28 16157e2b a6d2ae28     +~..(...+~..(...

0001ca88 <demoMcastNwksKey>:
   1ca88:	27268f3c b7e3bf39 992608bc 4d50d01a     <.&'9.....&...PM
   1ca98:	2e2e6425 00000000 202a2a2a 65636552     %d......*** Rece
   1caa8:	64657669 204c4420 61746144 2a2a2a20     ived DL Data ***
   1cab8:	00000d0a 6172460a 5220656d 69656365     .....Frame Recei
   1cac8:	20646576 70207461 2074726f 0d0a6425     ved at port %d..
   1cad8:	00000000 6172460a 4c20656d 74676e65     .....Frame Lengt
   1cae8:	202d2068 0d0a6425 00000000 6464410a     h - %d.......Add
   1caf8:	73736572 30202d20 786c2578 00000d0a     ress - 0x%lx....
   1cb08:	7961500a 64616f6c 0000203a 00007825     .Payload: ..%x..
   1cb18:	2a2a0a0d 2a2a2a2a 2a2a2a2a 2a2a2a2a     ..**************
   1cb28:	2a2a2a2a 2a2a2a2a 0d2a2a2a 00000000     ***********.....
   1cb38:	65636552 64657669 4b434120 726f6620     Received ACK for
   1cb48:	6e6f4320 6d726966 64206465 0d617461      Confirmed data.
   1cb58:	00000000 41520d0a 5f4f4944 445f4f4e     ......RADIO_NO_D
   1cb68:	20415441 00000d0a 41520d0a 5f4f4944     ATA ......RADIO_
   1cb78:	41544144 5a49535f 0d0a2045 00000000     DATA_SIZE ......
   1cb88:	41520d0a 5f4f4944 41564e49 5f44494c     ..RADIO_INVALID_
   1cb98:	20514552 00000d0a 41520d0a 5f4f4944     REQ ......RADIO_
   1cba8:	59535542 000d0a20 41520d0a 5f4f4944     BUSY .....RADIO_
   1cbb8:	5f54554f 525f464f 45474e41 000d0a20     OUT_OF_RANGE ...
   1cbc8:	41520d0a 5f4f4944 55534e55 524f5050     ..RADIO_UNSUPPOR
   1cbd8:	5f444554 52545441 000d0a20 41520d0a     TED_ATTR .....RA
   1cbe8:	5f4f4944 4e414843 5f4c454e 59535542     DIO_CHANNEL_BUSY
   1cbf8:	000d0a20 574e0d0a 4f4e5f4b 4f4a5f54      .....NWK_NOT_JO
   1cc08:	44454e49 000d0a20 4e490d0a 494c4156     INED .....INVALI
   1cc18:	41505f44 454d4152 20524554 00000d0a     D_PARAMETER ....
   1cc28:	454b0d0a 4e5f5359 495f544f 4954494e     ..KEYS_NOT_INITI
   1cc38:	5a494c41 0a204445 0000000d 49530d0a     ALIZED .......SI
   1cc48:	544e454c 4d4d495f 41494445 594c4554     LENT_IMMEDIATELY
   1cc58:	5443415f 0a455649 0000000d 43460d0a     _ACTIVE.......FC
   1cc68:	5f52544e 4f525245 45525f52 4e494f4a     NTR_ERROR_REJOIN
   1cc78:	45454e5f 20444544 00000d0a 4e490d0a     _NEEDED ......IN
   1cc88:	494c4156 55425f44 52454646 4e454c5f     VALID_BUFFER_LEN
   1cc98:	20485447 00000d0a 414d0d0a 41505f43     GTH ......MAC_PA
   1cca8:	44455355 0d0a2020 00000000 4f4e0d0a     USED  ........NO
   1ccb8:	4148435f 4c454e4e 4f465f53 20444e55     _CHANNELS_FOUND 
   1ccc8:	00000d0a 55420d0a 0d0a5953 00000000     ......BUSY......
   1ccd8:	4f4e0d0a 4b43415f 000d0a20 4c410d0a     ..NO_ACK .....AL
   1cce8:	44414552 4f4a2059 4e494e49 53492047     READY JOINING IS
   1ccf8:	204e4920 474f5250 53534552 000d0a20      IN PROGRESS ...
   1cd08:	45520d0a 52554f53 555f4543 4156414e     ..RESOURCE_UNAVA
   1cd18:	42414c49 0a20454c 0000000d 4e490d0a     ILABLE .......IN
   1cd28:	494c4156 45525f44 53455551 0d0a2054     VALID_REQUEST ..
   1cd38:	00000000 43460d0a 5f52544e 4f525245     ......FCNTR_ERRO
   1cd48:	0d0a2052 00000000 494d0d0a 52455f43     R ........MIC_ER
   1cd58:	20524f52 00000d0a 4e490d0a 494c4156     ROR ......INVALI
   1cd68:	544d5f44 20455059 00000d0a 434d0d0a     D_MTYPE ......MC
   1cd78:	5f545341 5f524448 41564e49 2044494c     AST_HDR_INVALID 
   1cd88:	00000d0a 4e490d0a 494c4156 41505f44     ......INVALID_PA
   1cd98:	54454b43 000d0a20 4e4b4e55 204e574f     CKET ...UNKNOWN 
   1cda8:	4f525245 000d0a52 6e617254 73696d73     ERROR...Transmis
   1cdb8:	6e6f6973 63755320 73736563 0000000d     sion Success....
   1cdc8:	2078540a 656d6954 0a74756f 0000000d     .Tx Timeout.....
   1cdd8:	4e550d0a 574f4e4b 5245204e 0a524f52     ..UNKNOWN ERROR.
   1cde8:	0000000d 2a2a0d0a 2a2a2a2a 2a2a2a2a     ......**********
   1cdf8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ce08:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ce18:	2a2a2a2a 0a2a2a2a 0000000d 696f4a0a     *******......Joi
   1ce28:	676e696e 63755320 73736563 0a6c7566     ning Successful.
   1ce38:	0000000d 7665440a 72646441 7830203a     .....DevAddr: 0x
   1ce48:	0a786c25 0000000d 6464410a 73736572     %lx......Address
   1ce58:	6e6f6320 63696c66 65622074 65657774      conflict betwee
   1ce68:	6544206e 65636976 64644120 73736572     n Device Address
   1ce78:	646e6120 6c754d20 61636974 67207473      and Multicast g
   1ce88:	70756f72 64646120 73736572 00000d0a     roup address....
   1ce98:	6f4e200a 65724620 68432065 656e6e61     . No Free Channe
   1cea8:	6f66206c 00646e75 696f4a0a 676e696e     l found..Joining
   1ceb8:	6e654420 0a646569 0000000d 2a2a0d0a      Denied.......**
   1cec8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1ced8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cee8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cef8:	2a2a2a2a 000d0a2a 65726957 7373656c     *****...Wireless
   1cf08:	6e655320 20726f73 7774654e 206b726f      Sensor Network 
   1cf18:	6f6d6544 0000000d 3139414e 00000035     Demo....NA915...
   1cf28:	65520a0d 6e6f6967 62206c61 20646e61     ..Regional band 
   1cf38:	656c6573 64657463 20736920 0a0d7325     selected is %s..
   1cf48:	00000000 2e310a0d 6e655320 6f4a2064     ......1. Send Jo
   1cf58:	52206e69 65757165 000d7473 53202e32     in Request..2. S
   1cf68:	20646e65 61746144 0000000d 53202e33     end Data....3. S
   1cf78:	7065656c 0000000d 4d202e34 206e6961     leep....4. Main 
   1cf88:	756e654d 0000000d 6e450a0d 20726574     Menu......Enter 
   1cf98:	72756f79 6f686320 3a656369 00000020     your choice: ...
   1cfa8:	6f727245 54532072 20455441 65746e45     Error STATE Ente
   1cfb8:	0d646572 00000000 2a0d0a0a 2a2a2a2a     red........*****
   1cfc8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cfd8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cfe8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1cff8:	0d0a2a2a 00000000 5f534c4d 5f4b4453     **......MLS_SDK_
   1d008:	5f305f31 00325f50 694d0d0a 636f7263     1_0_P_2...Microc
   1d018:	20706968 61526f4c 204e4157 63617453     hip LoRaWAN Stac
   1d028:	7325206b 00000a0d 6e490a0d 2d207469     k %s......Init -
   1d038:	63755320 73736563 0d6c7566 00000000      Successful.....
   1d048:	7473614c 6e6f6320 75676966 20646572     Last configured 
   1d058:	69676552 6c616e6f 6e616220 73252064     Regional band %s
   1d068:	00000a0d 73657250 6e612073 656b2079     ....Press any ke
   1d078:	6f742079 61686320 2065676e 646e6162     y to change band
   1d088:	43200a0d 69746e6f 6e69756e 6e692067     .. Continuing in
   1d098:	20732520 00206e69 696f4a0a 6170206e      %s in ..Join pa
   1d0a8:	656d6172 73726574 696e6920 6c616974     rameters initial
   1d0b8:	74617a69 206e6f69 6c696166 0d0a6465     ization failed..
   1d0c8:	00000000 736e550a 6f707075 64657472     .....Unsupported
   1d0d8:	76654420 20656369 65707954 00000d0a      Device Type....
   1d0e8:	696f4a0a 6552206e 73657571 65532074     .Join Request Se
   1d0f8:	6620746e 2520726f 000d0a73 2a2a2a0a     nt for %s....***
   1d108:	2a2a2a2a 2a2a2a2a 2a2a2a2a 6c707041     ************Appl
   1d118:	74616369 206e6f69 666e6f43 72756769     ication Configur
   1d128:	6f697461 2a2a2a6e 2a2a2a2a 2a2a2a2a     ation***********
   1d138:	2a2a2a2a 00000d0a 7665440a 65707954     ****.....DevType
   1d148:	00203a20 53414c43 0a412053 0000000d      : .CLASS A.....
   1d158:	53414c43 0a432053 0000000d 7463410a     CLASS C......Act
   1d168:	74617669 546e6f69 20657079 0000203a     ivationType : ..
   1d178:	4141544f 00000d0a 6172540a 696d736e     OTAA.....Transmi
   1d188:	6f697373 7954206e 2d206570 00000020     ssion Type - ...
   1d198:	4f434e55 5249464e 0a44454d 0000000d     UNCONFIRMED.....
   1d1a8:	6f50460a 2d207472 0a642520 0000000d     .FPort - %d.....
   1d1b8:	2a2a2a0a 2a2a2a2a 2a2a2a2a 2a2a2a2a     .***************
   1d1c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d1d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d1e8:	2a2a2a2a 2a2a2a2a 00000d0a 00007830     ********....0x..
   1d1f8:	78323025 00000000 726f6c0a 6e617761     %02x.....lorawan
   1d208:	6375735f 73736563 00000d0a 726f6c0a     _success.....lor
   1d218:	6e617761 6174735f 3a206574 61747320     awan_state : sta
   1d228:	425f6b63 0a797375 0000000d 7665640a     ck_Busy......dev
   1d238:	5f656369 5f746f6e 6e696f6a 745f6465     ice_not_joined_t
   1d248:	656e5f6f 726f7774 000d0a6b 766e690a     o_network....inv
   1d258:	64696c61 7261705f 74656d61 0d0a7265     alid_parameter..
   1d268:	00000000 79656b0a 6f6e5f73 6e695f74     .....keys_not_in
   1d278:	61697469 657a696c 000d0a64 6c69730a     itialized....sil
   1d288:	5f746e65 656d6d69 74616964 5f796c65     ent_immediately_
   1d298:	69746361 0d0a6576 00000000 6172660a     active.......fra
   1d2a8:	6f63656d 65746e75 72655f72 5f726f72     mecounter_error_
   1d2b8:	6f6a6572 6e5f6e69 65646565 000d0a64     rejoin_needed...
   1d2c8:	766e690a 64696c61 6675625f 5f726566     .invalid_buffer_
   1d2d8:	676e656c 0d0a6874 00000000 43414d0a     length.......MAC
   1d2e8:	7561705f 0a646573 0000000d 5f6f6e0a     _paused......no_
   1d2f8:	65657266 6168635f 6c656e6e 6f665f73     free_channels_fo
   1d308:	0a646e75 0000000d 7165720a 74736575     und......request
   1d318:	766e695f 64696c61 00000d0a 6572700a     _invalid.....pre
   1d328:	6f6a5f76 725f6e69 65757165 695f7473     v_join_request_i
   1d338:	72705f6e 6572676f 0d0a7373 00000000     n_progress......
   1d348:	7165720a 74736575 6961665f 2064656c     .request_failed 
   1d358:	0d0a6425 00000000 44500a0d 65525f53     %d........PDS_Re
   1d368:	726f7473 6f697461 6174536e 3a737574     storationStatus:
   1d378:	63755320 73736563 0000000d 6e696f6a      Success....join
   1d388:	74617453 203a7375 6e696f4a 000d6465     Status: Joined..
   1d398:	6e696f4a 74617453 3a207375 6e654420     JoinStatus : Den
   1d3a8:	0d646569 00000000 646e6142 7325203a     ied.....Band: %s
   1d3b8:	00000a0d 74736552 7461726f 206e6f69     ....Restoration 
   1d3c8:	6c696166 000d6465 746c6f56 20656761     failed..Voltage 
   1d3d8:	6f636552 64656472 25202d20 000a0d64     Recorded - %d...
   1d3e8:	6d65540a 61726570 65727574 0000203a     .Temperature: ..
   1d3f8:	66312e25 2e252f43 0a466631 00000000     %.1fC/%.1fF.....
   1d408:	66312e25 2043f820 25202f20 2066312e     %.1f .C  / %.1f 
   1d418:	0a0d46f8 00000000 74746142 20797265     .F......Battery 
   1d428:	746c6f76 20656761 66322e25 0d205620     voltage %.2f V .
   1d438:	0000000a 2078540a 61746144 6e655320     .....Tx Data Sen
   1d448:	000d2074 2a2a2a0a 2a2a2a2a 2a2a2a2a     t ...***********
   1d458:	2a2a2a2a 2a2a2a2a 696f4a2a 6150206e     *********Join Pa
   1d468:	656d6172 73726574 2a2a2a2a 2a2a2a2a     rameters********
   1d478:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000d0a     ************....
   1d488:	7070410a 73736553 4b6e6f69 3a207965     .AppSessionKey :
   1d498:	00000020 6b774e0a 73736553 4b6e6f69      ....NwkSessionK
   1d4a8:	3a207965 00000020 7665440a 20495545     ey : ....DevEUI 
   1d4b8:	0000203a 7070410a 20495545 0000203a     : ...AppEUI : ..
   1d4c8:	7070410a 2079654b 0000203a 2a2a2a0a     .AppKey : ...***
   1d4d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 746c754d     ************Mult
   1d4e8:	73616369 61502074 656d6172 73726574     icast Parameters
   1d4f8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d508:	2a2a2a2a 00000d0a 61634d0a 70417473     ****.....McastAp
   1d518:	73655370 6e6f6973 2079654b 0000203a     pSessionKey : ..
   1d528:	61634d0a 774e7473 7365536b 6e6f6973     .McastNwkSession
   1d538:	2079654b 0000203a 61634d0a 72477473     Key : ...McastGr
   1d548:	4170756f 20726464 7830203a 0a786c25     oupAddr : 0x%lx.
   1d558:	0000000d 61634d0a 72477473 4170756f     .....McastGroupA
   1d568:	53726464 75746174 203a2073 6c696146     ddrStatus : Fail
   1d578:	0d0a6465 00000000 6c754d0a 61636974     ed.......Multica
   1d588:	74537473 73757461 45203a20 6c62616e     stStatus : Enabl
   1d598:	0d0a6465 00000000 6c754d0a 61636974     ed.......Multica
   1d5a8:	74537473 73757461 46203a20 656c6961     stStatus : Faile
   1d5b8:	000d0a64 2a2a2a0a 2a2a2a2a 2a2a2a2a     d....***********
   1d5c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d5d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
   1d5e8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 000d0a2a     *************...
   1d5f8:	74636146 4479726f 75616665 6552746c     FactoryDefaultRe
   1d608:	00746573 36385545 00000038 31395541     set.EU868...AU91
   1d618:	00000035 32395341 00000033 394e504a     5...AS923...JPN9
   1d628:	00003332 3239524b 00000030 38444e49     23..KR920...IND8
   1d638:	00003536 61656c43 44502072 00000053     65..Clear PDS...
   1d648:	65736552 6f422074 00647261 7473614c     Reset Board.Last
   1d658:	73657220 63207465 65737561 0000203a      reset cause: ..
   1d668:	74737953 52206d65 74657365 71655220     System Reset Req
   1d678:	74736575 0000000d 63746157 676f6468     uest....Watchdog
   1d688:	73655220 000d7465 65747845 6c616e72      Reset..External
   1d698:	73655220 000d7465 776f7242 754f206e      Reset..Brown Ou
   1d6a8:	33332074 74654420 6f746365 65522072     t 33 Detector Re
   1d6b8:	0d746573 00000000 776f7242 754f206e     set.....Brown Ou
   1d6c8:	32312074 74654420 6f746365 65522072     t 12 Detector Re
   1d6d8:	0d746573 00000000 65776f50 6e4f2d72     set.....Power-On
   1d6e8:	73655220 000d7465                        Reset..

0001d6f0 <AdvChannels923>:
   1d6f0:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1d700:	3709f740 ff100100                       @..7....

0001d708 <DefaultChannels923>:
   1d708:	50015001                                .P.P

0001d70c <DefaultDrParamsAS>:
   1d70c:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1d71c:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1d72c:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1d73c:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001d74c <SubBandDutyCycle923>:
   1d74c:	00000064                                d...

0001d750 <SubBandParams923>:
   1d750:	35c36d80 37502800 00000000              .m.5.(P7....

0001d75c <pds_reg_as_item_list>:
   1d75c:	20001bd7 00200004 20001bf7 25c00104     ... .. .... ...%
   1d76c:	20001b82 ea010204                       ... ....

0001d774 <DefaultChannels915AU>:
   1d774:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d784:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d794:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d7a4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d7b4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d7c4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d7d4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d7e4:	50015001 50015001 50015001 50015001     .P.P.P.P.P.P.P.P
   1d7f4:	66016601 66016601 66016601 66016601     .f.f.f.f.f.f.f.f

0001d804 <DefaultDrParamsAU>:
   1d804:	00330008 01070cdf 0033000b 01070bce     ..3.......3.....
   1d814:	00330012 01070ac6 0073001c 010709c2     ..3.......s.....
   1d824:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1d834:	00f2003d 010908be 00000000 010a0000     =...............
   1d844:	00350007 01090c0c 00810005 01090b06     ..5.............
   1d854:	00f20007 01090a01 00f2000c 010909fe     ................
   1d864:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001d874 <pds_reg_au_item_list>:
   1d874:	20001c07 00900008 20001cab 95010108     ... ....... ....

0001d884 <AdvChannels433>:
   1d884:	19d1b9d8 19d1b9d8 ff0c0101 19d4c718     ................
   1d894:	19d4c718 ff0c0101 19d7d458 19d7d458     ........X...X...
   1d8a4:	ff0c0101                                ....

0001d8a8 <AdvChannels868>:
   1d8a8:	33be27a0 33be27a0 ff100101 33c134e0     .'.3.'.3.....4.3
   1d8b8:	33c134e0 ff100101 33c44220 33c44220     .4.3.... B.3 B.3
   1d8c8:	ff100101                                ....

0001d8cc <DefaultChannels433>:
   1d8cc:	50015001 00005001                       .P.P.P..

0001d8d4 <DefaultChannels868>:
   1d8d4:	50015001 00005001                       .P.P.P..

0001d8dc <DefaultDrparamsEU>:
   1d8dc:	00330008 01070cdf 0033000b 01070bd3     ..3.......3.....
   1d8ec:	00330017 01070acc 0073001c 010709c2     ..3.......s.....
   1d8fc:	00f2003d 010708be 00f20053 010707bc     =.......S.......
   1d90c:	00f2003c 010807f1 00f20064 000a00ce     <.......d.......

0001d91c <SubBandDutyCycle868>:
   1d91c:	006403e8 03e80064 0064000a              ..d.d.....d.

0001d928 <SubBandParams433>:
   1d928:	19cf0e40 19ea8580 00000000              @...........

0001d934 <SubBandParams868>:
   1d934:	337055c0 338eda40 00000000 338eda41     .Up3@..3....A..3
   1d944:	33bca100 00000000 33bca101 33c5c8c0     ...3.......3...3
   1d954:	00000000 33c74f60 33cef080 00000000     ....`O.3...3....
   1d964:	33d1fdc0 33d5ce50 00000000 33d691a0     ...3P..3.......3
   1d974:	33db2580 00000000                       .%.3....

0001d97c <pds_reg_eu868_fid1_item_list>:
   1d97c:	20001bd7 00200003                       ... .. .

0001d984 <pds_reg_eu868_fid2_item_list>:
   1d984:	20001bf7 00c0000b                       ... ....

0001d98c <AdvChannels865>:
   1d98c:	338fce64 338fce64 ff1e0100 3394fe84     d..3d..3.......3
   1d99c:	3394fe84 ff1e0100 339de1e8 339de1e8     ...3.......3...3
   1d9ac:	ff1e0100                                ....

0001d9b0 <DefaultChannels865>:
   1d9b0:	50015001 00005001                       .P.P.P..

0001d9b8 <DefaultDrParamsIN>:
   1d9b8:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1d9c8:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1d9d8:	00f20031 010708be 00f20053 010707bc     1.......S.......
   1d9e8:	00000000 010a0000 00f20008 000a00fe     ................

0001d9f8 <pds_reg_ind_item_list>:
   1d9f8:	20001bd7 00200006 20001bf7 25c00106     ... .. .... ...%

0001da08 <AdvChannels923JP>:
   1da08:	3706ea00 3706ea00 ff100100 3709f740     ...7...7....@..7
   1da18:	3709f740 ff100100                       @..7....

0001da20 <DefaultChannels923JP>:
   1da20:	50015001                                .P.P

0001da24 <DefaultDrParamsJP>:
   1da24:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1da34:	0b33000e 01070ac6 3573001a 010709c2     ..3.......s5....
   1da44:	7df20031 010708be f2f20053 010707bc     1..}....S.......
   1da54:	f2f2003c 010807f1 f2f20064 000a00ce     <.......d.......

0001da64 <SubBandDutyCycleJP923>:
   1da64:	00000064                                d...

0001da68 <SubBandParamsJP923>:
   1da68:	36d61600 37502800 00000000              ...6.(P7....

0001da74 <pds_reg_jpn_fid1_item_list>:
   1da74:	20001bd7 00200007 20001bf7 25c00107     ... .. .... ...%

0001da84 <AdvChannels920KR>:
   1da84:	36f62120 36f62120 ff0e0100 36f92e60      !.6 !.6....`..6
   1da94:	36f92e60 ff0e0100 36fc3ba0 36fc3ba0     `..6.....;.6.;.6
   1daa4:	ff0e0100                                ....

0001daa8 <DefaultChannels920KR>:
   1daa8:	50015001 00005001                       .P.P.P..

0001dab0 <DefaultDrParamsKR>:
   1dab0:	00330008 01070cdf 0033000a 01070bce     ..3.......3.....
   1dac0:	0033000e 01070ac6 0073001a 010709c2     ..3.......s.....
   1dad0:	00f20031 010708be 00f20053 010707bc     1.......S.......

0001dae0 <pds_reg_kr_fid1_item_list>:
   1dae0:	20001bd7 00200005 20001bf7 25c00105     ... .. .... ...%

0001daf0 <DefaultChannels915>:
   1daf0:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db00:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db10:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db20:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db30:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db40:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db50:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db60:	30013001 30013001 30013001 30013001     .0.0.0.0.0.0.0.0
   1db70:	44014401 44014401 44014401 44014401     .D.D.D.D.D.D.D.D

0001db80 <DefaultDrParamsNA>:
   1db80:	000b0012 01070ac6 00350005 01070906     ..........5.....
   1db90:	007d0007 01070801 00f2000c 010707fe     ..}.............
   1dba0:	00f20016 010908fc 00000000 010a0000     ................
   1dbb0:	00000000 010a0000 00000000 010a0000     ................
   1dbc0:	00350023 01090cd5 00810007 01090b06     #.5.............
   1dbd0:	00f20007 01090a01 00f2000c 010909fe     ................
   1dbe0:	00f20016 010908fc 00f2002a 010907fc     ........*.......

0001dbf0 <pds_reg_na_item_list>:
   1dbf0:	20001c07 00900002 20001cab 95010102     ... ....... ....
   1dc00:	000078d8 000078d8 000078d8 000078d8     .x...x...x...x..
   1dc10:	0000793e 000079a4 00007956 0000793e     >y...y..Vy..>y..

0001dc20 <taskHandlers>:
   1dc20:	0000c225 00011a29 00011021 0000b511     %...)...!.......
   1dc30:	00004555                                UE..

0001dc34 <tc_interrupt_vectors.13444>:
   1dc34:	14131211 c194c115                                .....

0001dc39 <FskSyncWordBuff>:
   1dc39:	01c194c1                                         ...

0001dc3c <macEndDevCmdReplyLen>:
   1dc3c:	02010201 01010203 0c0a0802                       .........

0001dc45 <maxEIRPTable>:
   1dc45:	0d0c0a08 1412100e 1b1a1815 24211e1d     ..............!$
   1dc55:	ba000000                                         ...

0001dc58 <pds_mac_fid1_item_list>:
   1dc58:	200024ba 00010000 200024b8 06010100     .$. .....$. ....
   1dc68:	2000244c 0c040200 200024bb 15010300     L$. .....$. ....
   1dc78:	200024bc 1b040400 2000250c 24040500     .$. .....%. ...$
   1dc88:	200024e8 2d040600 200024fc 36100700     .$. ...-.$. ...6
   1dc98:	200024ec 4b100800 200024d6 60040900     .$. ...K.$. ...`
   1dca8:	200024a5 69010b00 20002454 6f010a00     .$. ...iT$. ...o
   1dcb8:	2000248c 75020c00 2000248e 7c020d00     .$. ...u.$. ...|
   1dcc8:	20002490 83020e00 20002492 8a020f00     .$. .....$. ....
   1dcd8:	20002494 91021000 20002496 98021100     .$. .....$. ....
   1dce8:	20002498 9f011200 20002499 a5011300     .$. .....$. ....
   1dcf8:	2000249e b1011500 2000249d ab011400     .$. .....$. ....
   1dd08:	20002444 b7041600                       D$. ....

0001dd10 <pds_mac_fid2_item_list>:
   1dd10:	2000242e 00050001 200024b2 0a010101     .$. .....$. ....
   1dd20:	200023e4 10010201 200023e5 16040301     .#. .....#. ....
   1dd30:	200023e9 1f100401 200023f9 34100501     .#. .....#. ...4
   1dd40:	20002409 49100601 20002419 5e080701     .$. ...I.$. ...^
   1dd50:	20002421 6b080801 2000249a 78020901     !$. ...k.$. ...x
   1dd60:	20002448 7f040a01 20002440 88040b01     H$. ....@$. ....
   1dd70:	200024a3 91010c01                       .$. ....

0001dd78 <lorawanHandlers>:
   1dd78:	00010ed5 00010de9 00010fa9 000000fd     ................

0001dd88 <radioTaskHandlers>:
   1dd88:	0001260d 0001270d 0001242d 00011cb1     .&...'..-$......
   1dd98:	00012a2d 000137a4 00013774 00013786     -*...7..t7...7..
   1dda8:	000136c8 00013786 0001376a 00013786     .6...7..j7...7..
   1ddb8:	000136c8 00013774 00013774 0001376a     .6..t7..t7..j7..
   1ddc8:	000136c8 000136d0 000136d0 000136d0     .6...6...6...6..
   1ddd8:	0001378c 00013774 00013774 00013748     .7..t7..t7..H7..
   1dde8:	0001382c 00013748 0001376a 00013748     ,8..H7..j7..H7..
   1ddf8:	0001382c 00013774 00013774 0001376a     ,8..t7..t7..j7..
   1de08:	0001382c 000136d0 000136d0 000136d0     ,8...6...6...6..
   1de18:	00013836 00013b24 00013a74 00013a74     68..$;..t:..t:..
   1de28:	00013a72 00013b16 00013b16 00013b0c     r:...;...;...;..
   1de38:	00013a72 00013b16 00013b0c 00013b16     r:...;...;...;..
   1de48:	00013a72 00013b1c 00013b1c 00013b1c     r:...;...;...;..
   1de58:	00013bac 000148f4 000148d6 00014890     .;...H...H...H..
   1de68:	000147ae 00014890 000148c8 00014890     .G...H...H...H..
   1de78:	000147ae 000148d6 000148d6 000148c8     .G...H...H...H..
   1de88:	000147ae 000147a6 000147a6 000147a6     .G...G...G...G..
   1de98:	00014b0c 00014f54 00014e14 00014e14     .K..TO...N...N..
   1dea8:	00014e10 00014f2c 00014f2c 00014f1e     .N..,O..,O...O..
   1deb8:	00014e10 00014f2c 00014f1e 00014f2c     .N..,O...O..,O..
   1dec8:	00014e10 00014f34 00014f34 00014f34     .N..4O..4O..4O..
   1ded8:	00015138                                8Q..

0001dedc <_global_impure_ptr>:
   1dedc:	20000070 00016a74 00016ae8 00016ae8     p.. tj...j...j..
   1deec:	00016a58 00016ae8 00016ae8 00016ae8     Xj...j...j...j..
   1defc:	00016ae8 00016ae8 00016ae8 00016a60     .j...j...j..`j..
   1df0c:	00016542 00016ae8 000164fc 0001654c     Be...j...d..Le..
   1df1c:	00016ae8 00016598 00016782 00016782     .j...e...g...g..
   1df2c:	00016782 00016782 00016782 00016782     .g...g...g...g..
   1df3c:	00016782 00016782 00016782 00016ae8     .g...g...g...j..
   1df4c:	00016ae8 00016ae8 00016ae8 00016ae8     .j...j...j...j..
   1df5c:	00016ae8 00016ae8 00016ae8 00016ae8     .j...j...j...j..
   1df6c:	00016ae8 000165a0 000166e8 00016ae8     .j...e...f...j..
   1df7c:	000166e8 00016ae8 00016ae8 00016ae8     .f...j...j...j..
   1df8c:	00016ae8 000167b2 00016ae8 00016ae8     .j...g...j...j..
   1df9c:	000167ba 00016ae8 00016ae8 00016ae8     .g...j...j...j..
   1dfac:	00016ae8 00016ae8 0001685c 00016ae8     .j...j..\h...j..
   1dfbc:	00016ae8 0001688e 00016ae8 00016ae8     .j...h...j...j..
   1dfcc:	00016ae8 00016ae8 00016ae8 00016ae8     .j...j...j...j..
   1dfdc:	00016ae8 00016ae8 00016ae8 00016ae8     .j...j...j...j..
   1dfec:	00016988 000169bc 000166e8 000166e8     .i...i...f...f..
   1dffc:	000166e8 000169ce 000169bc 00016ae8     .f...i...i...j..
   1e00c:	00016ae8 000169d6 00016ae8 000168f0     .j...i...j...h..
   1e01c:	00016ab6 00016a2c 00016926 00016ae8     .j..,j..&i...j..
   1e02c:	0001692e 00016ae8 00016a84 00016ae8     .i...j...j...j..
   1e03c:	00016ae8 000169e6 00464e49 00666e69     .j...i..INF.inf.
   1e04c:	004e414e 006e616e 33323130 37363534     NAN.nan.01234567
   1e05c:	42413938 46454443 00000000 33323130     89ABCDEF....0123
   1e06c:	37363534 62613938 66656463 00000000     456789abcdef....
   1e07c:	6c756e28 0000296c                       (null)..

0001e084 <blanks.7223>:
   1e084:	20202020 20202020 20202020 20202020                     

0001e094 <zeroes.7224>:
   1e094:	30303030 30303030 30303030 30303030     0000000000000000
   1e0a4:	0001803e 00018112 00018112 0001802a     >...........*...
   1e0b4:	00018112 00018112 00018112 00018112     ................
   1e0c4:	00018112 00018112 000180e4 00017bf6     .............{..
   1e0d4:	00018112 00017bec 00017c00 00018112     .....{...|......
   1e0e4:	00018034 00017dc0 00017dc0 00017dc0     4....}...}...}..
   1e0f4:	00017dc0 00017dc0 00017dc0 00017dc0     .}...}...}...}..
   1e104:	00017dc0 00017dc0 00018112 00018112     .}...}..........
   1e114:	00018112 00018112 00018112 00018112     ................
   1e124:	00018112 00018112 00018112 00018112     ................
   1e134:	000180fa 0001804e 00018112 0001804e     ....N.......N...
   1e144:	00018112 00018112 00018112 00018112     ................
   1e154:	00017fb4 00018112 00018112 00017fbe     ................
   1e164:	00018112 00018112 00018112 00018112     ................
   1e174:	00018112 00017fec 00018112 00018112     ................
   1e184:	0001801a 00018112 00018112 00018112     ................
   1e194:	00018112 00018112 00018112 00018112     ................
   1e1a4:	00018112 00018112 00018112 00017e00     .............~..
   1e1b4:	00017e36 0001804e 0001804e 0001804e     6~..N...N...N...
   1e1c4:	00017ede 00017e36 00018112 00018112     .~..6~..........
   1e1d4:	00017ee8 00018112 00017efa 0001810e     .~.......~......
   1e1e4:	00017f28 00017f52 00018112 00017f5c     (...R.......\...
   1e1f4:	00018112 0001810a 00018112 00018112     ................
   1e204:	00017c4e                                N|..

0001e208 <blanks.7238>:
   1e208:	20202020 20202020 20202020 20202020                     

0001e218 <zeroes.7239>:
   1e218:	30303030 30303030 30303030 30303030     0000000000000000
   1e228:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.

0001e238 <__mprec_bigtens>:
   1e238:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   1e248:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   1e258:	7f73bf3c 75154fdd                       <.s..O.u

0001e260 <__mprec_tens>:
   1e260:	00000000 3ff00000 00000000 40240000     .......?......$@
   1e270:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   1e280:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   1e290:	00000000 412e8480 00000000 416312d0     .......A......cA
   1e2a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   1e2b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   1e2c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   1e2d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   1e2e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   1e2f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   1e300:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   1e310:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   1e320:	79d99db4 44ea7843                       ...yCx.D

0001e328 <p05.6055>:
   1e328:	00000005 00000019 0000007d 00000043     ........}...C...
   1e338:	49534f50 00000058 0000002e              POSIX.......

0001e344 <_ctype_>:
   1e344:	20202000 20202020 28282020 20282828     .         ((((( 
   1e354:	20202020 20202020 20202020 20202020                     
   1e364:	10108820 10101010 10101010 10101010      ...............
   1e374:	04040410 04040404 10040404 10101010     ................
   1e384:	41411010 41414141 01010101 01010101     ..AAAAAA........
   1e394:	01010101 01010101 01010101 10101010     ................
   1e3a4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   1e3b4:	02020202 02020202 02020202 10101010     ................
   1e3c4:	00000020 00000000 00000000 00000000      ...............
	...

0001e448 <_init>:
   1e448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e44a:	46c0      	nop			; (mov r8, r8)
   1e44c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e44e:	bc08      	pop	{r3}
   1e450:	469e      	mov	lr, r3
   1e452:	4770      	bx	lr

0001e454 <__init_array_start>:
   1e454:	00019255 	.word	0x00019255

0001e458 <__frame_dummy_init_array_entry>:
   1e458:	000000dd                                ....

0001e45c <_fini>:
   1e45c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1e45e:	46c0      	nop			; (mov r8, r8)
   1e460:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1e462:	bc08      	pop	{r3}
   1e464:	469e      	mov	lr, r3
   1e466:	4770      	bx	lr

0001e468 <__fini_array_start>:
   1e468:	000000b5 	.word	0x000000b5
